-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_8_stride is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of subconv_3x3_8_stride is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_1_fu_193_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_1_reg_483 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_15_cast_fu_216_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_15_cast_reg_488 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond4_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl_cast_fu_228_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_reg_493 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_17_cast_fu_238_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_17_cast_reg_498 : STD_LOGIC_VECTOR (10 downto 0);
    signal bias_addr_reg_503 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_1_fu_248_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_1_reg_511 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_2_cast_fu_260_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_cast_reg_516 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond3_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_cast_fu_273_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_23_cast_reg_522 : STD_LOGIC_VECTOR (11 downto 0);
    signal w_1_fu_287_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_1_reg_530 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_5_cast_fu_299_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_cast_reg_535 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_303_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_reg_540 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_1_fu_319_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_1_reg_548 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_15_fu_340_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_15_reg_553 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond1_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_cast_fu_370_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_31_cast_reg_558 : STD_LOGIC_VECTOR (13 downto 0);
    signal sel_tmp_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_563 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_397_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_reg_568 : STD_LOGIC_VECTOR (11 downto 0);
    signal n_1_fu_412_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_1_reg_576 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_17_fu_422_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_17_reg_581 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_reg_586 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_451_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_18_reg_591 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal weight_load_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_12_fu_468_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_611 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_177_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal bias_load_reg_626 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal result_reg_631 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal co_reg_97 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_reg_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_119 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal sum_reg_131 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_143 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_166 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_cast_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_cast_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_cast_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_177_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_177_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_s_fu_208_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_220_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_fu_204_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_232_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_254_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_cast_fu_264_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_268_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_293_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_cast_fu_325_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_329_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_fu_334_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp3_fu_346_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_352_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_356_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_cast_fu_361_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_fu_365_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_cast8_cast_fu_309_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_378_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_cast_fu_384_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_cast_fu_393_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_18_fu_418_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal n_cast6_fu_402_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp4_fu_432_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp4_cast_fu_438_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_442_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_cast_fu_447_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sel_tmp1_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);

    component ShuffleNetV2_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ShuffleNetV2_faddbkb_x_U81 : component ShuffleNetV2_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_177_p0,
        din1 => grp_fu_177_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_177_p2);

    ShuffleNetV2_fmulcud_x_U82 : component ShuffleNetV2_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_load_reg_606,
        din1 => tmp_12_reg_611,
        ce => ap_const_logic_1,
        dout => grp_fu_183_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_242_p2 = ap_const_lv1_1))) then 
                co_reg_97 <= co_1_reg_483;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_97 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    h_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_281_p2 = ap_const_lv1_1))) then 
                h_reg_108 <= h_1_reg_511;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_187_p2 = ap_const_lv1_0))) then 
                h_reg_108 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    m_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_406_p2))) then 
                m_reg_143 <= m_1_reg_548;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_281_p2))) then 
                m_reg_143 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_313_p2))) then 
                n_reg_166 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                n_reg_166 <= n_1_reg_576;
            end if; 
        end if;
    end process;

    sum_1_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_313_p2))) then 
                sum_1_reg_154 <= sum_reg_131;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                sum_1_reg_154 <= grp_fu_177_p2;
            end if; 
        end if;
    end process;

    sum_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_406_p2))) then 
                sum_reg_131 <= sum_1_reg_154;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_281_p2))) then 
                sum_reg_131 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_242_p2))) then 
                w_reg_119 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                w_reg_119 <= w_1_reg_530;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_187_p2 = ap_const_lv1_0))) then
                bias_addr_reg_503 <= tmp_fu_199_p1(7 - 1 downto 0);
                    p_shl_cast_reg_493(8 downto 2) <= p_shl_cast_fu_228_p1(8 downto 2);
                    tmp_15_cast_reg_488(9 downto 3) <= tmp_15_cast_fu_216_p1(9 downto 3);
                tmp_17_cast_reg_498 <= tmp_17_cast_fu_238_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                bias_load_reg_626 <= bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_1_reg_483 <= co_1_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_1_reg_511 <= h_1_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_1_reg_548 <= m_1_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_1_reg_576 <= n_1_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond_fu_406_p2))) then
                p_not_reg_586 <= p_not_fu_427_p2;
                tmp_17_reg_581 <= tmp_17_fu_422_p2;
                tmp_18_reg_591 <= tmp_18_fu_451_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                result_reg_631 <= grp_fu_177_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_313_p2))) then
                sel_tmp_reg_563 <= sel_tmp_fu_388_p2;
                tmp_15_reg_553 <= tmp_15_fu_340_p2;
                    tmp_31_cast_reg_558(13 downto 3) <= tmp_31_cast_fu_370_p3(13 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_12_reg_611 <= tmp_12_fu_468_p3;
                weight_load_reg_606 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_13_reg_616 <= grp_fu_183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_281_p2))) then
                    tmp_1_reg_540(3 downto 1) <= tmp_1_fu_303_p2(3 downto 1);
                    tmp_5_cast_reg_535(2 downto 1) <= tmp_5_cast_fu_299_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_242_p2))) then
                    tmp_23_cast_reg_522(11 downto 2) <= tmp_23_cast_fu_273_p3(11 downto 2);
                    tmp_2_cast_reg_516(2 downto 1) <= tmp_2_cast_fu_260_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_313_p2 = ap_const_lv1_1))) then
                tmp_8_reg_568 <= tmp_8_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                w_1_reg_530 <= w_1_fu_287_p2;
            end if;
        end if;
    end process;
    tmp_15_cast_reg_488(2 downto 0) <= "000";
    tmp_15_cast_reg_488(10) <= '0';
    p_shl_cast_reg_493(1 downto 0) <= "00";
    p_shl_cast_reg_493(9) <= '0';
    tmp_2_cast_reg_516(0) <= '0';
    tmp_2_cast_reg_516(3) <= '0';
    tmp_23_cast_reg_522(1 downto 0) <= "00";
    tmp_5_cast_reg_535(0) <= '0';
    tmp_5_cast_reg_535(3) <= '0';
    tmp_1_reg_540(0) <= '0';
    tmp_31_cast_reg_558(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_187_p2, ap_CS_fsm_state3, exitcond3_fu_242_p2, ap_CS_fsm_state4, exitcond2_fu_281_p2, ap_CS_fsm_state5, exitcond1_fu_313_p2, ap_CS_fsm_state6, exitcond_fu_406_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_187_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_242_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_281_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_313_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_406_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_187_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_187_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_187_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_187_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_503;

    bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_1_fu_193_p2 <= std_logic_vector(unsigned(co_reg_97) + unsigned(ap_const_lv7_1));
    exitcond1_fu_313_p2 <= "1" when (m_reg_143 = ap_const_lv2_3) else "0";
    exitcond2_fu_281_p2 <= "1" when (w_reg_119 = ap_const_lv3_4) else "0";
    exitcond3_fu_242_p2 <= "1" when (h_reg_108 = ap_const_lv3_4) else "0";
    exitcond4_fu_187_p2 <= "1" when (co_reg_97 = ap_const_lv7_60) else "0";
    exitcond_fu_406_p2 <= "1" when (n_reg_166 = ap_const_lv2_3) else "0";

    grp_fu_177_p0_assign_proc : process(sum_reg_131, sum_1_reg_154, ap_CS_fsm_state13, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_177_p0 <= sum_reg_131;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_177_p0 <= sum_1_reg_154;
        else 
            grp_fu_177_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_177_p1_assign_proc : process(tmp_13_reg_616, bias_load_reg_626, ap_CS_fsm_state13, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_177_p1 <= bias_load_reg_626;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_177_p1 <= tmp_13_reg_616;
        else 
            grp_fu_177_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_1_fu_248_p2 <= std_logic_vector(unsigned(h_reg_108) + unsigned(ap_const_lv3_1));
    input_r_address0 <= tmp_33_cast_fu_460_p1(13 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_1_fu_319_p2 <= std_logic_vector(unsigned(m_reg_143) + unsigned(ap_const_lv2_1));
    m_cast8_cast_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_143),3));
    n_1_fu_412_p2 <= std_logic_vector(unsigned(n_reg_166) + unsigned(ap_const_lv2_1));
    n_cast6_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_166),4));
    output_r_address0 <= tmp_25_cast_fu_476_p1(11 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= result_reg_631;

    output_r_we0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_not_fu_427_p2 <= "1" when (n_cast6_fu_402_p1 = tmp_1_reg_540) else "0";
    p_shl_cast_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_220_p3),10));
    sel_tmp1_fu_464_p2 <= (sel_tmp_reg_563 or p_not_reg_586);
    sel_tmp_fu_388_p2 <= "1" when (tmp_2_cast_reg_516 = tmp_9_cast_fu_384_p1) else "0";
        tmp3_cast_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_346_p2),4));

    tmp3_fu_346_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(m_reg_143));
        tmp4_cast_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_fu_432_p2),4));

    tmp4_fu_432_p2 <= std_logic_vector(unsigned(n_reg_166) + unsigned(ap_const_lv2_3));
    tmp_10_fu_442_p2 <= std_logic_vector(unsigned(tmp_5_cast_reg_535) + unsigned(tmp4_cast_fu_438_p1));
        tmp_11_cast_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_442_p2),14));

    tmp_11_fu_329_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_325_p1) + unsigned(tmp_17_cast_reg_498));
    tmp_12_fu_468_p3 <= 
        ap_const_lv32_0 when (sel_tmp1_fu_464_p2(0) = '1') else 
        input_r_q0;
    tmp_14_fu_334_p2 <= std_logic_vector(shift_left(unsigned(tmp_11_fu_329_p2),to_integer(unsigned('0' & ap_const_lv11_2(11-1 downto 0)))));
    tmp_15_cast_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_208_p3),11));
    tmp_15_fu_340_p2 <= std_logic_vector(unsigned(tmp_14_fu_334_p2) - unsigned(tmp_11_fu_329_p2));
    tmp_16_fu_365_p2 <= std_logic_vector(signed(tmp_7_cast_fu_361_p1) + signed(tmp_15_cast_reg_488));
        tmp_17_cast_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_232_p2),11));

    tmp_17_fu_422_p2 <= std_logic_vector(unsigned(tmp_15_reg_553) + unsigned(tmp_cast_18_fu_418_p1));
    tmp_18_fu_451_p2 <= std_logic_vector(unsigned(tmp_31_cast_reg_558) + unsigned(tmp_11_cast_fu_447_p1));
    tmp_1_fu_303_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(tmp_5_cast_fu_299_p1));
    tmp_23_cast_fu_273_p3 <= (tmp_6_fu_268_p2 & ap_const_lv2_0);
    tmp_25_cast_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_568),64));
    tmp_2_cast_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_254_p2),4));
    tmp_2_fu_220_p3 <= (co_reg_97 & ap_const_lv2_0);
    tmp_31_cast_fu_370_p3 <= (tmp_16_fu_365_p2 & ap_const_lv3_0);
    tmp_32_cast_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_reg_581),64));
    tmp_33_cast_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_reg_591),64));
    tmp_3_cast_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_108),10));
    tmp_3_fu_232_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_228_p1) - unsigned(tmp_cast_fu_204_p1));
    tmp_4_fu_356_p2 <= std_logic_vector(signed(tmp3_cast_fu_352_p1) + signed(tmp_2_cast_reg_516));
    tmp_5_cast_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_293_p2),4));
    tmp_5_fu_254_p2 <= std_logic_vector(shift_left(unsigned(h_reg_108),to_integer(unsigned('0' & ap_const_lv3_1(3-1 downto 0)))));
    tmp_6_cast_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_119),12));
    tmp_6_fu_268_p2 <= std_logic_vector(unsigned(p_shl_cast_reg_493) + unsigned(tmp_3_cast_fu_264_p1));
        tmp_7_cast_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_356_p2),11));

    tmp_7_fu_293_p2 <= std_logic_vector(shift_left(unsigned(w_reg_119),to_integer(unsigned('0' & ap_const_lv3_1(3-1 downto 0)))));
    tmp_8_cast_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_143),11));
    tmp_8_fu_397_p2 <= std_logic_vector(unsigned(tmp_23_cast_reg_522) + unsigned(tmp_6_cast_fu_393_p1));
        tmp_9_cast_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_fu_378_p2),4));

    tmp_9_fu_378_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(m_cast8_cast_fu_309_p1));
    tmp_cast_18_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_166),11));
    tmp_cast_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_97),10));
    tmp_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_97),64));
    tmp_s_fu_208_p3 <= (co_reg_97 & ap_const_lv3_0);
    w_1_fu_287_p2 <= std_logic_vector(unsigned(w_reg_119) + unsigned(ap_const_lv3_1));
    weight_address0 <= tmp_32_cast_fu_456_p1(10 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
