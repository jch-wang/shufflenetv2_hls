-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ShuffleUnit2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_weight_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    conv1_weight_ce0 : OUT STD_LOGIC;
    conv1_weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_bias_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv1_bias_ce0 : OUT STD_LOGIC;
    conv1_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_weight_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv2_weight_ce0 : OUT STD_LOGIC;
    conv2_weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_bias_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv2_bias_ce0 : OUT STD_LOGIC;
    conv2_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv3_weight_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    conv3_weight_ce0 : OUT STD_LOGIC;
    conv3_weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv3_bias_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv3_bias_ce0 : OUT STD_LOGIC;
    conv3_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ShuffleUnit2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv7_5F : STD_LOGIC_VECTOR (6 downto 0) := "1011111";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv8_60 : STD_LOGIC_VECTOR (7 downto 0) := "01100000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvarinc7_fu_435_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvarinc7_reg_822 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal indvarinc1_fu_441_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvarinc1_reg_827 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal indvarinc2_fu_447_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal indvarinc4_fu_486_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvarinc4_reg_846 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal indvarinc5_fu_492_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvarinc5_reg_851 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal indvarinc6_fu_498_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal indvarinc9_fu_537_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvarinc9_reg_870 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal indvarinc_fu_543_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvarinc_reg_875 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal indvarinc3_fu_549_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal indvarinc8_fu_588_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvarinc8_reg_894 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal indvarinc10_fu_594_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvarinc10_reg_899 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal indvarinc11_fu_600_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal indvarinc12_fu_639_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvarinc12_reg_918 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal indvarinc13_fu_645_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvarinc13_reg_923 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal indvarinc14_fu_651_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal co_19_fu_700_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_19_reg_945 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_307_cast_fu_720_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_307_cast_reg_950 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond2_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_309_cast_fu_732_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_309_cast_reg_955 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_19_fu_742_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_19_reg_963 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_312_cast_fu_761_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_312_cast_reg_968 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond1_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_315_cast_fu_782_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_315_cast_reg_973 : STD_LOGIC_VECTOR (12 downto 0);
    signal w_19_fu_792_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_19_reg_981 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal exitcond_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_317_cast_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_317_cast_reg_991 : STD_LOGIC_VECTOR (63 downto 0);
    signal left_part_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal left_part_0_ce0 : STD_LOGIC;
    signal left_part_0_we0 : STD_LOGIC;
    signal left_part_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_part_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_part_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal right_part_0_ce0 : STD_LOGIC;
    signal right_part_0_we0 : STD_LOGIC;
    signal right_part_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_part_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_output_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv1_output_0_ce0 : STD_LOGIC;
    signal conv1_output_0_we0 : STD_LOGIC;
    signal conv1_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_output_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_output_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv2_output_0_ce0 : STD_LOGIC;
    signal conv2_output_0_we0 : STD_LOGIC;
    signal conv2_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_output_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_output_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv3_output_0_ce0 : STD_LOGIC;
    signal conv3_output_0_we0 : STD_LOGIC;
    signal conv3_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_output_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_subconv_1x1_419_fu_405_ap_start : STD_LOGIC;
    signal grp_subconv_1x1_419_fu_405_ap_done : STD_LOGIC;
    signal grp_subconv_1x1_419_fu_405_ap_idle : STD_LOGIC;
    signal grp_subconv_1x1_419_fu_405_ap_ready : STD_LOGIC;
    signal grp_subconv_1x1_419_fu_405_input_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_subconv_1x1_419_fu_405_input_0_ce0 : STD_LOGIC;
    signal grp_subconv_1x1_419_fu_405_input_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_subconv_1x1_419_fu_405_weight_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_subconv_1x1_419_fu_405_weight_ce0 : STD_LOGIC;
    signal grp_subconv_1x1_419_fu_405_weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_subconv_1x1_419_fu_405_bias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_subconv_1x1_419_fu_405_bias_ce0 : STD_LOGIC;
    signal grp_subconv_1x1_419_fu_405_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_subconv_1x1_419_fu_405_output_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_subconv_1x1_419_fu_405_output_0_ce0 : STD_LOGIC;
    signal grp_subconv_1x1_419_fu_405_output_0_we0 : STD_LOGIC;
    signal grp_subconv_1x1_419_fu_405_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_subconv_3x3_4_no_rel_fu_417_ap_start : STD_LOGIC;
    signal grp_subconv_3x3_4_no_rel_fu_417_ap_done : STD_LOGIC;
    signal grp_subconv_3x3_4_no_rel_fu_417_ap_idle : STD_LOGIC;
    signal grp_subconv_3x3_4_no_rel_fu_417_ap_ready : STD_LOGIC;
    signal grp_subconv_3x3_4_no_rel_fu_417_input_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_subconv_3x3_4_no_rel_fu_417_input_0_ce0 : STD_LOGIC;
    signal grp_subconv_3x3_4_no_rel_fu_417_weight_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_subconv_3x3_4_no_rel_fu_417_weight_ce0 : STD_LOGIC;
    signal grp_subconv_3x3_4_no_rel_fu_417_bias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_subconv_3x3_4_no_rel_fu_417_bias_ce0 : STD_LOGIC;
    signal grp_subconv_3x3_4_no_rel_fu_417_output_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_subconv_3x3_4_no_rel_fu_417_output_0_ce0 : STD_LOGIC;
    signal grp_subconv_3x3_4_no_rel_fu_417_output_0_we0 : STD_LOGIC;
    signal grp_subconv_3x3_4_no_rel_fu_417_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_shuffle_9621_fu_427_ap_start : STD_LOGIC;
    signal grp_shuffle_9621_fu_427_ap_done : STD_LOGIC;
    signal grp_shuffle_9621_fu_427_ap_idle : STD_LOGIC;
    signal grp_shuffle_9621_fu_427_ap_ready : STD_LOGIC;
    signal grp_shuffle_9621_fu_427_left_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_shuffle_9621_fu_427_left_0_ce0 : STD_LOGIC;
    signal grp_shuffle_9621_fu_427_right_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_shuffle_9621_fu_427_right_0_ce0 : STD_LOGIC;
    signal grp_shuffle_9621_fu_427_output_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_shuffle_9621_fu_427_output_r_ce0 : STD_LOGIC;
    signal grp_shuffle_9621_fu_427_output_r_we0 : STD_LOGIC;
    signal grp_shuffle_9621_fu_427_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar6_reg_197 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_120_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_119_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar1_reg_209 : STD_LOGIC_VECTOR (1 downto 0);
    signal invdar2_reg_221 : STD_LOGIC_VECTOR (1 downto 0);
    signal invdar4_reg_232 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_123_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_121_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_122_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar5_reg_244 : STD_LOGIC_VECTOR (1 downto 0);
    signal invdar7_reg_256 : STD_LOGIC_VECTOR (1 downto 0);
    signal invdar9_reg_267 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_126_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_124_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_125_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar_reg_279 : STD_LOGIC_VECTOR (1 downto 0);
    signal invdar3_reg_291 : STD_LOGIC_VECTOR (1 downto 0);
    signal invdar8_reg_302 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_129_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_127_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_128_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar10_reg_314 : STD_LOGIC_VECTOR (1 downto 0);
    signal invdar11_reg_326 : STD_LOGIC_VECTOR (1 downto 0);
    signal invdar12_reg_337 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_132_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_130_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_131_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar13_reg_349 : STD_LOGIC_VECTOR (1 downto 0);
    signal invdar14_reg_361 : STD_LOGIC_VECTOR (1 downto 0);
    signal co_reg_372 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_reg_383 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_394 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_reg_grp_subconv_1x1_419_fu_405_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_reg_grp_subconv_3x3_4_no_rel_fu_417_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_reg_grp_shuffle_9621_fu_427_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp_180_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_181_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_182_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_183_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_184_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_316_cast_fu_807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_453_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_105_fu_504_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_106_fu_555_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_107_fu_606_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_108_fu_657_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal co_cast_fu_690_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_133_fu_706_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_185_fu_712_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_186_fu_724_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_134_cast_fu_752_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_187_fu_756_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_134_cast1_fu_748_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_188_fu_769_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_109_fu_774_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_135_cast_fu_798_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_189_fu_802_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_190_fu_812_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);

    component subconv_1x1_419 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weight_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        weight_ce0 : OUT STD_LOGIC;
        weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_0_ce0 : OUT STD_LOGIC;
        output_0_we0 : OUT STD_LOGIC;
        output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component subconv_3x3_4_no_rel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weight_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        weight_ce0 : OUT STD_LOGIC;
        weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_0_ce0 : OUT STD_LOGIC;
        output_0_we0 : OUT STD_LOGIC;
        output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component shuffle_9621 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        left_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        left_0_ce0 : OUT STD_LOGIC;
        left_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        right_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        right_0_ce0 : OUT STD_LOGIC;
        right_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DownsampleUnit2_czec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    left_part_0_U : component DownsampleUnit2_czec
    generic map (
        DataWidth => 32,
        AddressRange => 1536,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => left_part_0_address0,
        ce0 => left_part_0_ce0,
        we0 => left_part_0_we0,
        d0 => left_part_0_d0,
        q0 => left_part_0_q0);

    right_part_0_U : component DownsampleUnit2_czec
    generic map (
        DataWidth => 32,
        AddressRange => 1536,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => right_part_0_address0,
        ce0 => right_part_0_ce0,
        we0 => right_part_0_we0,
        d0 => right_part_0_d0,
        q0 => right_part_0_q0);

    conv1_output_0_U : component DownsampleUnit2_czec
    generic map (
        DataWidth => 32,
        AddressRange => 1536,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv1_output_0_address0,
        ce0 => conv1_output_0_ce0,
        we0 => conv1_output_0_we0,
        d0 => conv1_output_0_d0,
        q0 => conv1_output_0_q0);

    conv2_output_0_U : component DownsampleUnit2_czec
    generic map (
        DataWidth => 32,
        AddressRange => 1536,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2_output_0_address0,
        ce0 => conv2_output_0_ce0,
        we0 => conv2_output_0_we0,
        d0 => conv2_output_0_d0,
        q0 => conv2_output_0_q0);

    conv3_output_0_U : component DownsampleUnit2_czec
    generic map (
        DataWidth => 32,
        AddressRange => 1536,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv3_output_0_address0,
        ce0 => conv3_output_0_ce0,
        we0 => conv3_output_0_we0,
        d0 => conv3_output_0_d0,
        q0 => conv3_output_0_q0);

    grp_subconv_1x1_419_fu_405 : component subconv_1x1_419
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_subconv_1x1_419_fu_405_ap_start,
        ap_done => grp_subconv_1x1_419_fu_405_ap_done,
        ap_idle => grp_subconv_1x1_419_fu_405_ap_idle,
        ap_ready => grp_subconv_1x1_419_fu_405_ap_ready,
        input_0_address0 => grp_subconv_1x1_419_fu_405_input_0_address0,
        input_0_ce0 => grp_subconv_1x1_419_fu_405_input_0_ce0,
        input_0_q0 => grp_subconv_1x1_419_fu_405_input_0_q0,
        weight_address0 => grp_subconv_1x1_419_fu_405_weight_address0,
        weight_ce0 => grp_subconv_1x1_419_fu_405_weight_ce0,
        weight_q0 => grp_subconv_1x1_419_fu_405_weight_q0,
        bias_address0 => grp_subconv_1x1_419_fu_405_bias_address0,
        bias_ce0 => grp_subconv_1x1_419_fu_405_bias_ce0,
        bias_q0 => grp_subconv_1x1_419_fu_405_bias_q0,
        output_0_address0 => grp_subconv_1x1_419_fu_405_output_0_address0,
        output_0_ce0 => grp_subconv_1x1_419_fu_405_output_0_ce0,
        output_0_we0 => grp_subconv_1x1_419_fu_405_output_0_we0,
        output_0_d0 => grp_subconv_1x1_419_fu_405_output_0_d0);

    grp_subconv_3x3_4_no_rel_fu_417 : component subconv_3x3_4_no_rel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_subconv_3x3_4_no_rel_fu_417_ap_start,
        ap_done => grp_subconv_3x3_4_no_rel_fu_417_ap_done,
        ap_idle => grp_subconv_3x3_4_no_rel_fu_417_ap_idle,
        ap_ready => grp_subconv_3x3_4_no_rel_fu_417_ap_ready,
        input_0_address0 => grp_subconv_3x3_4_no_rel_fu_417_input_0_address0,
        input_0_ce0 => grp_subconv_3x3_4_no_rel_fu_417_input_0_ce0,
        input_0_q0 => conv1_output_0_q0,
        weight_address0 => grp_subconv_3x3_4_no_rel_fu_417_weight_address0,
        weight_ce0 => grp_subconv_3x3_4_no_rel_fu_417_weight_ce0,
        weight_q0 => conv2_weight_q0,
        bias_address0 => grp_subconv_3x3_4_no_rel_fu_417_bias_address0,
        bias_ce0 => grp_subconv_3x3_4_no_rel_fu_417_bias_ce0,
        bias_q0 => conv2_bias_q0,
        output_0_address0 => grp_subconv_3x3_4_no_rel_fu_417_output_0_address0,
        output_0_ce0 => grp_subconv_3x3_4_no_rel_fu_417_output_0_ce0,
        output_0_we0 => grp_subconv_3x3_4_no_rel_fu_417_output_0_we0,
        output_0_d0 => grp_subconv_3x3_4_no_rel_fu_417_output_0_d0);

    grp_shuffle_9621_fu_427 : component shuffle_9621
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shuffle_9621_fu_427_ap_start,
        ap_done => grp_shuffle_9621_fu_427_ap_done,
        ap_idle => grp_shuffle_9621_fu_427_ap_idle,
        ap_ready => grp_shuffle_9621_fu_427_ap_ready,
        left_0_address0 => grp_shuffle_9621_fu_427_left_0_address0,
        left_0_ce0 => grp_shuffle_9621_fu_427_left_0_ce0,
        left_0_q0 => left_part_0_q0,
        right_0_address0 => grp_shuffle_9621_fu_427_right_0_address0,
        right_0_ce0 => grp_shuffle_9621_fu_427_right_0_ce0,
        right_0_q0 => conv3_output_0_q0,
        output_r_address0 => grp_shuffle_9621_fu_427_output_r_address0,
        output_r_ce0 => grp_shuffle_9621_fu_427_output_r_ce0,
        output_r_we0 => grp_shuffle_9621_fu_427_output_r_we0,
        output_r_d0 => grp_shuffle_9621_fu_427_output_r_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_shuffle_9621_fu_427_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_shuffle_9621_fu_427_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    ap_reg_grp_shuffle_9621_fu_427_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_shuffle_9621_fu_427_ap_ready)) then 
                    ap_reg_grp_shuffle_9621_fu_427_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_subconv_1x1_419_fu_405_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_subconv_1x1_419_fu_405_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond2_fu_694_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                    ap_reg_grp_subconv_1x1_419_fu_405_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_subconv_1x1_419_fu_405_ap_ready)) then 
                    ap_reg_grp_subconv_1x1_419_fu_405_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_subconv_3x3_4_no_rel_fu_417_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_subconv_3x3_4_no_rel_fu_417_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_reg_grp_subconv_3x3_4_no_rel_fu_417_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_subconv_3x3_4_no_rel_fu_417_ap_ready)) then 
                    ap_reg_grp_subconv_3x3_4_no_rel_fu_417_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    co_reg_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = tmp_130_fu_672_p2) and (ap_const_lv1_1 = tmp_131_fu_678_p2) and (ap_const_lv1_1 = tmp_132_fu_684_p2))) then 
                co_reg_372 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond1_fu_736_p2 = ap_const_lv1_1))) then 
                co_reg_372 <= co_19_reg_945;
            end if; 
        end if;
    end process;

    h_reg_383_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond_fu_786_p2 = ap_const_lv1_1))) then 
                h_reg_383 <= h_19_reg_963;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond2_fu_694_p2 = ap_const_lv1_0))) then 
                h_reg_383 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    invdar10_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = tmp_127_fu_621_p2) and (ap_const_lv1_0 = tmp_128_fu_627_p2))) then 
                invdar10_reg_314 <= indvarinc10_reg_899;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                invdar10_reg_314 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    invdar11_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_127_fu_621_p2))) then 
                invdar11_reg_326 <= indvarinc11_fu_600_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                invdar11_reg_326 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    invdar12_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = tmp_127_fu_621_p2) and (ap_const_lv1_1 = tmp_128_fu_627_p2) and (ap_const_lv1_1 = tmp_129_fu_633_p2))) then 
                invdar12_reg_337 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = tmp_132_fu_684_p2) and (ap_const_lv1_1 = tmp_130_fu_672_p2) and (ap_const_lv1_1 = tmp_131_fu_678_p2))) then 
                invdar12_reg_337 <= indvarinc12_reg_918;
            end if; 
        end if;
    end process;

    invdar13_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = tmp_130_fu_672_p2) and (ap_const_lv1_0 = tmp_131_fu_678_p2))) then 
                invdar13_reg_349 <= indvarinc13_reg_923;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                invdar13_reg_349 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    invdar14_reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = tmp_130_fu_672_p2))) then 
                invdar14_reg_361 <= indvarinc14_fu_651_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                invdar14_reg_361 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    invdar1_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_s_fu_468_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = tmp_119_fu_474_p2))) then 
                invdar1_reg_209 <= indvarinc1_reg_827;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                invdar1_reg_209 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    invdar2_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = tmp_s_fu_468_p2))) then 
                invdar2_reg_221 <= indvarinc2_fu_447_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                invdar2_reg_221 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    invdar3_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = tmp_124_fu_570_p2))) then 
                invdar3_reg_291 <= indvarinc3_fu_549_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                invdar3_reg_291 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    invdar4_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_s_fu_468_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_119_fu_474_p2) and (tmp_120_fu_480_p2 = ap_const_lv1_1))) then 
                invdar4_reg_232 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_123_fu_531_p2) and (ap_const_lv1_1 = tmp_121_fu_519_p2) and (ap_const_lv1_1 = tmp_122_fu_525_p2))) then 
                invdar4_reg_232 <= indvarinc4_reg_846;
            end if; 
        end if;
    end process;

    invdar5_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = tmp_121_fu_519_p2) and (ap_const_lv1_0 = tmp_122_fu_525_p2))) then 
                invdar5_reg_244 <= indvarinc5_reg_851;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                invdar5_reg_244 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    invdar6_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = tmp_120_fu_480_p2) and (tmp_s_fu_468_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_119_fu_474_p2))) then 
                invdar6_reg_197 <= indvarinc7_reg_822;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                invdar6_reg_197 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    invdar7_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_121_fu_519_p2))) then 
                invdar7_reg_256 <= indvarinc6_fu_498_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                invdar7_reg_256 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    invdar8_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = tmp_124_fu_570_p2) and (ap_const_lv1_1 = tmp_125_fu_576_p2) and (ap_const_lv1_1 = tmp_126_fu_582_p2))) then 
                invdar8_reg_302 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_129_fu_633_p2) and (ap_const_lv1_1 = tmp_127_fu_621_p2) and (ap_const_lv1_1 = tmp_128_fu_627_p2))) then 
                invdar8_reg_302 <= indvarinc8_reg_894;
            end if; 
        end if;
    end process;

    invdar9_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = tmp_121_fu_519_p2) and (ap_const_lv1_1 = tmp_122_fu_525_p2) and (ap_const_lv1_1 = tmp_123_fu_531_p2))) then 
                invdar9_reg_267 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = tmp_126_fu_582_p2) and (ap_const_lv1_1 = tmp_124_fu_570_p2) and (ap_const_lv1_1 = tmp_125_fu_576_p2))) then 
                invdar9_reg_267 <= indvarinc9_reg_870;
            end if; 
        end if;
    end process;

    invdar_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = tmp_124_fu_570_p2) and (ap_const_lv1_0 = tmp_125_fu_576_p2))) then 
                invdar_reg_279 <= indvarinc_reg_875;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                invdar_reg_279 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    w_reg_394_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_0 = exitcond1_fu_736_p2))) then 
                w_reg_394 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                w_reg_394 <= w_19_reg_981;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                co_19_reg_945 <= co_19_fu_700_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                h_19_reg_963 <= h_19_fu_742_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                indvarinc10_reg_899 <= indvarinc10_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                indvarinc12_reg_918 <= indvarinc12_fu_639_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                indvarinc13_reg_923 <= indvarinc13_fu_645_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                indvarinc1_reg_827 <= indvarinc1_fu_441_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                indvarinc4_reg_846 <= indvarinc4_fu_486_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                indvarinc5_reg_851 <= indvarinc5_fu_492_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                indvarinc7_reg_822 <= indvarinc7_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                indvarinc8_reg_894 <= indvarinc8_fu_588_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                indvarinc9_reg_870 <= indvarinc9_fu_537_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                indvarinc_reg_875 <= indvarinc_fu_543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond2_fu_694_p2 = ap_const_lv1_0))) then
                    tmp_307_cast_reg_950(9 downto 2) <= tmp_307_cast_fu_720_p1(9 downto 2);
                    tmp_309_cast_reg_955(8 downto 2) <= tmp_309_cast_fu_732_p1(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_0 = exitcond1_fu_736_p2))) then
                    tmp_312_cast_reg_968(12 downto 2) <= tmp_312_cast_fu_761_p3(12 downto 2);
                    tmp_315_cast_reg_973(11 downto 2) <= tmp_315_cast_fu_782_p1(11 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_lv1_0 = exitcond_fu_786_p2))) then
                    tmp_317_cast_reg_991(12 downto 0) <= tmp_317_cast_fu_817_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                w_19_reg_981 <= w_19_fu_792_p2;
            end if;
        end if;
    end process;
    tmp_307_cast_reg_950(1 downto 0) <= "00";
    tmp_307_cast_reg_950(10) <= '0';
    tmp_309_cast_reg_955(1 downto 0) <= "00";
    tmp_309_cast_reg_955(9) <= '0';
    tmp_312_cast_reg_968(1 downto 0) <= "00";
    tmp_315_cast_reg_973(1 downto 0) <= "00";
    tmp_315_cast_reg_973(12) <= '0';
    tmp_317_cast_reg_991(63 downto 13) <= "000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state17, exitcond2_fu_694_p2, ap_CS_fsm_state18, exitcond1_fu_736_p2, ap_CS_fsm_state19, exitcond_fu_786_p2, grp_subconv_1x1_419_fu_405_ap_done, grp_subconv_3x3_4_no_rel_fu_417_ap_done, grp_shuffle_9621_fu_427_ap_done, tmp_120_fu_480_p2, tmp_s_fu_468_p2, tmp_119_fu_474_p2, tmp_123_fu_531_p2, tmp_121_fu_519_p2, tmp_122_fu_525_p2, tmp_126_fu_582_p2, tmp_124_fu_570_p2, tmp_125_fu_576_p2, tmp_129_fu_633_p2, tmp_127_fu_621_p2, tmp_128_fu_627_p2, tmp_132_fu_684_p2, tmp_130_fu_672_p2, tmp_131_fu_678_p2, ap_CS_fsm_state21, ap_CS_fsm_state25, ap_CS_fsm_state23, ap_CS_fsm_state27)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_s_fu_468_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_119_fu_474_p2) and (tmp_120_fu_480_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = tmp_120_fu_480_p2) and (tmp_s_fu_468_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_119_fu_474_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_s_fu_468_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = tmp_119_fu_474_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = tmp_121_fu_519_p2) and (ap_const_lv1_1 = tmp_122_fu_525_p2) and (ap_const_lv1_1 = tmp_123_fu_531_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_123_fu_531_p2) and (ap_const_lv1_1 = tmp_121_fu_519_p2) and (ap_const_lv1_1 = tmp_122_fu_525_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = tmp_121_fu_519_p2) and (ap_const_lv1_0 = tmp_122_fu_525_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = tmp_124_fu_570_p2) and (ap_const_lv1_1 = tmp_125_fu_576_p2) and (ap_const_lv1_1 = tmp_126_fu_582_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = tmp_126_fu_582_p2) and (ap_const_lv1_1 = tmp_124_fu_570_p2) and (ap_const_lv1_1 = tmp_125_fu_576_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = tmp_124_fu_570_p2) and (ap_const_lv1_0 = tmp_125_fu_576_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = tmp_127_fu_621_p2) and (ap_const_lv1_1 = tmp_128_fu_627_p2) and (ap_const_lv1_1 = tmp_129_fu_633_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_129_fu_633_p2) and (ap_const_lv1_1 = tmp_127_fu_621_p2) and (ap_const_lv1_1 = tmp_128_fu_627_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = tmp_127_fu_621_p2) and (ap_const_lv1_0 = tmp_128_fu_627_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = tmp_130_fu_672_p2) and (ap_const_lv1_1 = tmp_131_fu_678_p2) and (ap_const_lv1_1 = tmp_132_fu_684_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = tmp_132_fu_684_p2) and (ap_const_lv1_1 = tmp_130_fu_672_p2) and (ap_const_lv1_1 = tmp_131_fu_678_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = tmp_130_fu_672_p2) and (ap_const_lv1_0 = tmp_131_fu_678_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond2_fu_694_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond1_fu_736_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond_fu_786_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_subconv_1x1_419_fu_405_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (grp_subconv_3x3_4_no_rel_fu_417_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (grp_subconv_1x1_419_fu_405_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (grp_shuffle_9621_fu_427_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_shuffle_9621_fu_427_ap_done, ap_CS_fsm_state27)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (grp_shuffle_9621_fu_427_ap_done = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_shuffle_9621_fu_427_ap_done, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (grp_shuffle_9621_fu_427_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    co_19_fu_700_p2 <= std_logic_vector(unsigned(co_reg_372) + unsigned(ap_const_lv7_1));
    co_cast_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_372),8));
    conv1_bias_address0 <= grp_subconv_1x1_419_fu_405_bias_address0;

    conv1_bias_ce0_assign_proc : process(grp_subconv_1x1_419_fu_405_bias_ce0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv1_bias_ce0 <= grp_subconv_1x1_419_fu_405_bias_ce0;
        else 
            conv1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_output_0_address0_assign_proc : process(ap_CS_fsm_state10, grp_subconv_1x1_419_fu_405_output_0_address0, grp_subconv_3x3_4_no_rel_fu_417_input_0_address0, ap_CS_fsm_state21, ap_CS_fsm_state23, tmp_182_fu_565_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv1_output_0_address0 <= tmp_182_fu_565_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv1_output_0_address0 <= grp_subconv_3x3_4_no_rel_fu_417_input_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv1_output_0_address0 <= grp_subconv_1x1_419_fu_405_output_0_address0;
        else 
            conv1_output_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv1_output_0_ce0_assign_proc : process(ap_CS_fsm_state10, grp_subconv_1x1_419_fu_405_output_0_ce0, grp_subconv_3x3_4_no_rel_fu_417_input_0_ce0, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv1_output_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv1_output_0_ce0 <= grp_subconv_3x3_4_no_rel_fu_417_input_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv1_output_0_ce0 <= grp_subconv_1x1_419_fu_405_output_0_ce0;
        else 
            conv1_output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_output_0_d0_assign_proc : process(ap_CS_fsm_state10, grp_subconv_1x1_419_fu_405_output_0_d0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv1_output_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv1_output_0_d0 <= grp_subconv_1x1_419_fu_405_output_0_d0;
        else 
            conv1_output_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv1_output_0_we0_assign_proc : process(ap_CS_fsm_state10, grp_subconv_1x1_419_fu_405_output_0_we0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv1_output_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv1_output_0_we0 <= grp_subconv_1x1_419_fu_405_output_0_we0;
        else 
            conv1_output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_weight_address0 <= grp_subconv_1x1_419_fu_405_weight_address0;

    conv1_weight_ce0_assign_proc : process(grp_subconv_1x1_419_fu_405_weight_ce0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv1_weight_ce0 <= grp_subconv_1x1_419_fu_405_weight_ce0;
        else 
            conv1_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_bias_address0 <= grp_subconv_3x3_4_no_rel_fu_417_bias_address0;
    conv2_bias_ce0 <= grp_subconv_3x3_4_no_rel_fu_417_bias_ce0;

    conv2_output_0_address0_assign_proc : process(ap_CS_fsm_state13, grp_subconv_1x1_419_fu_405_input_0_address0, grp_subconv_3x3_4_no_rel_fu_417_output_0_address0, ap_CS_fsm_state25, ap_CS_fsm_state23, tmp_183_fu_616_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv2_output_0_address0 <= tmp_183_fu_616_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv2_output_0_address0 <= grp_subconv_3x3_4_no_rel_fu_417_output_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv2_output_0_address0 <= grp_subconv_1x1_419_fu_405_input_0_address0;
        else 
            conv2_output_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv2_output_0_ce0_assign_proc : process(ap_CS_fsm_state13, grp_subconv_1x1_419_fu_405_input_0_ce0, grp_subconv_3x3_4_no_rel_fu_417_output_0_ce0, ap_CS_fsm_state25, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv2_output_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv2_output_0_ce0 <= grp_subconv_3x3_4_no_rel_fu_417_output_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv2_output_0_ce0 <= grp_subconv_1x1_419_fu_405_input_0_ce0;
        else 
            conv2_output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_output_0_d0_assign_proc : process(ap_CS_fsm_state13, grp_subconv_3x3_4_no_rel_fu_417_output_0_d0, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv2_output_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv2_output_0_d0 <= grp_subconv_3x3_4_no_rel_fu_417_output_0_d0;
        else 
            conv2_output_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv2_output_0_we0_assign_proc : process(ap_CS_fsm_state13, grp_subconv_3x3_4_no_rel_fu_417_output_0_we0, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv2_output_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv2_output_0_we0 <= grp_subconv_3x3_4_no_rel_fu_417_output_0_we0;
        else 
            conv2_output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_weight_address0 <= grp_subconv_3x3_4_no_rel_fu_417_weight_address0;
    conv2_weight_ce0 <= grp_subconv_3x3_4_no_rel_fu_417_weight_ce0;
    conv3_bias_address0 <= grp_subconv_1x1_419_fu_405_bias_address0;

    conv3_bias_ce0_assign_proc : process(grp_subconv_1x1_419_fu_405_bias_ce0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv3_bias_ce0 <= grp_subconv_1x1_419_fu_405_bias_ce0;
        else 
            conv3_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv3_output_0_address0_assign_proc : process(ap_CS_fsm_state16, grp_subconv_1x1_419_fu_405_output_0_address0, grp_shuffle_9621_fu_427_right_0_address0, ap_CS_fsm_state25, ap_CS_fsm_state27, tmp_184_fu_667_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv3_output_0_address0 <= tmp_184_fu_667_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            conv3_output_0_address0 <= grp_shuffle_9621_fu_427_right_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv3_output_0_address0 <= grp_subconv_1x1_419_fu_405_output_0_address0;
        else 
            conv3_output_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv3_output_0_ce0_assign_proc : process(ap_CS_fsm_state16, grp_subconv_1x1_419_fu_405_output_0_ce0, grp_shuffle_9621_fu_427_right_0_ce0, ap_CS_fsm_state25, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv3_output_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            conv3_output_0_ce0 <= grp_shuffle_9621_fu_427_right_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv3_output_0_ce0 <= grp_subconv_1x1_419_fu_405_output_0_ce0;
        else 
            conv3_output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv3_output_0_d0_assign_proc : process(ap_CS_fsm_state16, grp_subconv_1x1_419_fu_405_output_0_d0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv3_output_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv3_output_0_d0 <= grp_subconv_1x1_419_fu_405_output_0_d0;
        else 
            conv3_output_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv3_output_0_we0_assign_proc : process(ap_CS_fsm_state16, grp_subconv_1x1_419_fu_405_output_0_we0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv3_output_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv3_output_0_we0 <= grp_subconv_1x1_419_fu_405_output_0_we0;
        else 
            conv3_output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv3_weight_address0 <= grp_subconv_1x1_419_fu_405_weight_address0;

    conv3_weight_ce0_assign_proc : process(grp_subconv_1x1_419_fu_405_weight_ce0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv3_weight_ce0 <= grp_subconv_1x1_419_fu_405_weight_ce0;
        else 
            conv3_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_736_p2 <= "1" when (h_reg_383 = ap_const_lv3_4) else "0";
    exitcond2_fu_694_p2 <= "1" when (co_reg_372 = ap_const_lv7_60) else "0";
    exitcond_fu_786_p2 <= "1" when (w_reg_394 = ap_const_lv3_4) else "0";
    grp_shuffle_9621_fu_427_ap_start <= ap_reg_grp_shuffle_9621_fu_427_ap_start;
    grp_subconv_1x1_419_fu_405_ap_start <= ap_reg_grp_subconv_1x1_419_fu_405_ap_start;

    grp_subconv_1x1_419_fu_405_bias_q0_assign_proc : process(conv1_bias_q0, conv3_bias_q0, ap_CS_fsm_state21, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_subconv_1x1_419_fu_405_bias_q0 <= conv3_bias_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_subconv_1x1_419_fu_405_bias_q0 <= conv1_bias_q0;
        else 
            grp_subconv_1x1_419_fu_405_bias_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_subconv_1x1_419_fu_405_input_0_q0_assign_proc : process(right_part_0_q0, conv2_output_0_q0, ap_CS_fsm_state21, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_subconv_1x1_419_fu_405_input_0_q0 <= conv2_output_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_subconv_1x1_419_fu_405_input_0_q0 <= right_part_0_q0;
        else 
            grp_subconv_1x1_419_fu_405_input_0_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_subconv_1x1_419_fu_405_weight_q0_assign_proc : process(conv1_weight_q0, conv3_weight_q0, ap_CS_fsm_state21, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_subconv_1x1_419_fu_405_weight_q0 <= conv3_weight_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_subconv_1x1_419_fu_405_weight_q0 <= conv1_weight_q0;
        else 
            grp_subconv_1x1_419_fu_405_weight_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_subconv_3x3_4_no_rel_fu_417_ap_start <= ap_reg_grp_subconv_3x3_4_no_rel_fu_417_ap_start;
    h_19_fu_742_p2 <= std_logic_vector(unsigned(h_reg_383) + unsigned(ap_const_lv3_1));
    indvarinc10_fu_594_p2 <= std_logic_vector(unsigned(invdar10_reg_314) + unsigned(ap_const_lv2_1));
    indvarinc11_fu_600_p2 <= std_logic_vector(unsigned(invdar11_reg_326) + unsigned(ap_const_lv2_1));
    indvarinc12_fu_639_p2 <= std_logic_vector(unsigned(invdar12_reg_337) + unsigned(ap_const_lv7_1));
    indvarinc13_fu_645_p2 <= std_logic_vector(unsigned(invdar13_reg_349) + unsigned(ap_const_lv2_1));
    indvarinc14_fu_651_p2 <= std_logic_vector(unsigned(invdar14_reg_361) + unsigned(ap_const_lv2_1));
    indvarinc1_fu_441_p2 <= std_logic_vector(unsigned(invdar1_reg_209) + unsigned(ap_const_lv2_1));
    indvarinc2_fu_447_p2 <= std_logic_vector(unsigned(invdar2_reg_221) + unsigned(ap_const_lv2_1));
    indvarinc3_fu_549_p2 <= std_logic_vector(unsigned(invdar3_reg_291) + unsigned(ap_const_lv2_1));
    indvarinc4_fu_486_p2 <= std_logic_vector(unsigned(invdar4_reg_232) + unsigned(ap_const_lv7_1));
    indvarinc5_fu_492_p2 <= std_logic_vector(unsigned(invdar5_reg_244) + unsigned(ap_const_lv2_1));
    indvarinc6_fu_498_p2 <= std_logic_vector(unsigned(invdar7_reg_256) + unsigned(ap_const_lv2_1));
    indvarinc7_fu_435_p2 <= std_logic_vector(unsigned(invdar6_reg_197) + unsigned(ap_const_lv7_1));
    indvarinc8_fu_588_p2 <= std_logic_vector(unsigned(invdar8_reg_302) + unsigned(ap_const_lv7_1));
    indvarinc9_fu_537_p2 <= std_logic_vector(unsigned(invdar9_reg_267) + unsigned(ap_const_lv7_1));
    indvarinc_fu_543_p2 <= std_logic_vector(unsigned(invdar_reg_279) + unsigned(ap_const_lv2_1));
    input_r_address0 <= tmp_316_cast_fu_807_p1(12 - 1 downto 0);
    input_r_address1 <= tmp_317_cast_fu_817_p1(12 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    left_part_0_address0_assign_proc : process(ap_CS_fsm_state4, tmp_317_cast_reg_991, grp_shuffle_9621_fu_427_left_0_address0, ap_CS_fsm_state20, ap_CS_fsm_state27, tmp_180_fu_463_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            left_part_0_address0 <= tmp_317_cast_reg_991(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            left_part_0_address0 <= tmp_180_fu_463_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            left_part_0_address0 <= grp_shuffle_9621_fu_427_left_0_address0;
        else 
            left_part_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    left_part_0_ce0_assign_proc : process(ap_CS_fsm_state4, grp_shuffle_9621_fu_427_left_0_ce0, ap_CS_fsm_state20, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            left_part_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            left_part_0_ce0 <= grp_shuffle_9621_fu_427_left_0_ce0;
        else 
            left_part_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    left_part_0_d0_assign_proc : process(input_r_q1, ap_CS_fsm_state4, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            left_part_0_d0 <= input_r_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            left_part_0_d0 <= ap_const_lv32_0;
        else 
            left_part_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    left_part_0_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            left_part_0_we0 <= ap_const_logic_1;
        else 
            left_part_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_address0 <= grp_shuffle_9621_fu_427_output_r_address0;
    output_r_ce0 <= grp_shuffle_9621_fu_427_output_r_ce0;
    output_r_d0 <= grp_shuffle_9621_fu_427_output_r_d0;
    output_r_we0 <= grp_shuffle_9621_fu_427_output_r_we0;

    right_part_0_address0_assign_proc : process(ap_CS_fsm_state7, tmp_317_cast_reg_991, grp_subconv_1x1_419_fu_405_input_0_address0, ap_CS_fsm_state20, ap_CS_fsm_state21, tmp_181_fu_514_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            right_part_0_address0 <= tmp_317_cast_reg_991(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            right_part_0_address0 <= tmp_181_fu_514_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            right_part_0_address0 <= grp_subconv_1x1_419_fu_405_input_0_address0;
        else 
            right_part_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    right_part_0_ce0_assign_proc : process(ap_CS_fsm_state7, grp_subconv_1x1_419_fu_405_input_0_ce0, ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            right_part_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            right_part_0_ce0 <= grp_subconv_1x1_419_fu_405_input_0_ce0;
        else 
            right_part_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    right_part_0_d0_assign_proc : process(input_r_q0, ap_CS_fsm_state7, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            right_part_0_d0 <= input_r_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            right_part_0_d0 <= ap_const_lv32_0;
        else 
            right_part_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    right_part_0_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            right_part_0_we0 <= ap_const_logic_1;
        else 
            right_part_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_105_fu_504_p4 <= ((invdar4_reg_232 & invdar5_reg_244) & invdar7_reg_256);
    tmp_106_fu_555_p4 <= ((invdar9_reg_267 & invdar_reg_279) & invdar3_reg_291);
    tmp_107_fu_606_p4 <= ((invdar8_reg_302 & invdar10_reg_314) & invdar11_reg_326);
    tmp_108_fu_657_p4 <= ((invdar12_reg_337 & invdar13_reg_349) & invdar14_reg_361);
    tmp_109_fu_774_p3 <= (tmp_188_fu_769_p2 & ap_const_lv2_0);
    tmp_119_fu_474_p2 <= "1" when (invdar1_reg_209 = ap_const_lv2_3) else "0";
    tmp_120_fu_480_p2 <= "1" when (invdar6_reg_197 = ap_const_lv7_5F) else "0";
    tmp_121_fu_519_p2 <= "1" when (invdar7_reg_256 = ap_const_lv2_3) else "0";
    tmp_122_fu_525_p2 <= "1" when (invdar5_reg_244 = ap_const_lv2_3) else "0";
    tmp_123_fu_531_p2 <= "1" when (invdar4_reg_232 = ap_const_lv7_5F) else "0";
    tmp_124_fu_570_p2 <= "1" when (invdar3_reg_291 = ap_const_lv2_3) else "0";
    tmp_125_fu_576_p2 <= "1" when (invdar_reg_279 = ap_const_lv2_3) else "0";
    tmp_126_fu_582_p2 <= "1" when (invdar9_reg_267 = ap_const_lv7_5F) else "0";
    tmp_127_fu_621_p2 <= "1" when (invdar11_reg_326 = ap_const_lv2_3) else "0";
    tmp_128_fu_627_p2 <= "1" when (invdar10_reg_314 = ap_const_lv2_3) else "0";
    tmp_129_fu_633_p2 <= "1" when (invdar8_reg_302 = ap_const_lv7_5F) else "0";
    tmp_130_fu_672_p2 <= "1" when (invdar14_reg_361 = ap_const_lv2_3) else "0";
    tmp_131_fu_678_p2 <= "1" when (invdar13_reg_349 = ap_const_lv2_3) else "0";
    tmp_132_fu_684_p2 <= "1" when (invdar12_reg_337 = ap_const_lv7_5F) else "0";
    tmp_133_fu_706_p2 <= std_logic_vector(unsigned(co_cast_fu_690_p1) + unsigned(ap_const_lv8_60));
    tmp_134_cast1_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_383),10));
    tmp_134_cast_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_383),11));
    tmp_135_cast_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_394),13));
    tmp_180_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_453_p4),64));
    tmp_181_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_105_fu_504_p4),64));
    tmp_182_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_106_fu_555_p4),64));
    tmp_183_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_107_fu_606_p4),64));
    tmp_184_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_108_fu_657_p4),64));
    tmp_185_fu_712_p3 <= (tmp_133_fu_706_p2 & ap_const_lv2_0);
    tmp_186_fu_724_p3 <= (co_reg_372 & ap_const_lv2_0);
    tmp_187_fu_756_p2 <= std_logic_vector(unsigned(tmp_307_cast_reg_950) + unsigned(tmp_134_cast_fu_752_p1));
    tmp_188_fu_769_p2 <= std_logic_vector(unsigned(tmp_309_cast_reg_955) + unsigned(tmp_134_cast1_fu_748_p1));
    tmp_189_fu_802_p2 <= std_logic_vector(unsigned(tmp_312_cast_reg_968) + unsigned(tmp_135_cast_fu_798_p1));
    tmp_190_fu_812_p2 <= std_logic_vector(unsigned(tmp_315_cast_reg_973) + unsigned(tmp_135_cast_fu_798_p1));
    tmp_307_cast_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_185_fu_712_p3),11));
    tmp_309_cast_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_186_fu_724_p3),10));
    tmp_312_cast_fu_761_p3 <= (tmp_187_fu_756_p2 & ap_const_lv2_0);
    tmp_315_cast_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_109_fu_774_p3),13));
    tmp_316_cast_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_189_fu_802_p2),64));
    tmp_317_cast_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_190_fu_812_p2),64));
    tmp_fu_453_p4 <= ((invdar6_reg_197 & invdar1_reg_209) & invdar2_reg_221);
    tmp_s_fu_468_p2 <= "1" when (invdar2_reg_221 = ap_const_lv2_3) else "0";
    w_19_fu_792_p2 <= std_logic_vector(unsigned(w_reg_394) + unsigned(ap_const_lv3_1));
end behav;
