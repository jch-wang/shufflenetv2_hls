// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shuffle_48_l (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        left_r_address0,
        left_r_ce0,
        left_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] left_r_address0;
output   left_r_ce0;
input  [31:0] left_r_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg left_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_98_fu_98_p1;
reg   [0:0] tmp_98_reg_233;
wire    ap_CS_fsm_state2;
wire   [6:0] co_17_fu_108_p2;
reg   [6:0] co_17_reg_240;
wire   [9:0] tmp_267_cast_fu_132_p1;
reg   [9:0] tmp_267_cast_reg_245;
wire   [0:0] exitcond2_fu_102_p2;
wire   [10:0] tmp_269_cast_fu_144_p1;
reg   [10:0] tmp_269_cast_reg_250;
wire   [3:0] h_17_fu_154_p2;
reg   [3:0] h_17_reg_258;
wire    ap_CS_fsm_state3;
wire   [12:0] tmp_272_cast_fu_173_p3;
reg   [12:0] tmp_272_cast_reg_263;
wire   [0:0] exitcond1_fu_148_p2;
wire   [13:0] tmp_275_cast_fu_186_p3;
reg   [13:0] tmp_275_cast_reg_268;
wire   [3:0] w_17_fu_200_p2;
reg   [3:0] w_17_reg_276;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_194_p2;
wire   [13:0] tmp_165_fu_224_p2;
reg   [13:0] tmp_165_reg_286;
reg   [6:0] co_reg_65;
reg   [3:0] h_reg_76;
reg   [3:0] w_reg_87;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_276_cast_fu_219_p1;
wire   [63:0] tmp_277_cast_fu_229_p1;
wire   [5:0] tmp_fu_114_p4;
wire   [8:0] tmp_s_fu_124_p3;
wire   [9:0] tmp_161_fu_136_p3;
wire   [9:0] tmp_cast_fu_164_p1;
wire   [9:0] tmp_162_fu_168_p2;
wire   [10:0] tmp_cast2_fu_160_p1;
wire   [10:0] tmp_163_fu_181_p2;
wire   [12:0] tmp_101_cast_fu_210_p1;
wire   [12:0] tmp_164_fu_214_p2;
wire   [13:0] tmp_101_cast1_fu_206_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_148_p2 == 1'd1))) begin
        co_reg_65 <= co_17_reg_240;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_65 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_194_p2 == 1'd1))) begin
        h_reg_76 <= h_17_reg_258;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_102_p2 == 1'd0))) begin
        h_reg_76 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond1_fu_148_p2))) begin
        w_reg_87 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_reg_87 <= w_17_reg_276;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_17_reg_240 <= co_17_fu_108_p2;
        tmp_98_reg_233 <= tmp_98_fu_98_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_17_reg_258 <= h_17_fu_154_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_194_p2) & (tmp_98_reg_233 == 1'd0))) begin
        tmp_165_reg_286 <= tmp_165_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_102_p2 == 1'd0))) begin
        tmp_267_cast_reg_245[8 : 3] <= tmp_267_cast_fu_132_p1[8 : 3];
        tmp_269_cast_reg_250[9 : 3] <= tmp_269_cast_fu_144_p1[9 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond1_fu_148_p2))) begin
        tmp_272_cast_reg_263[12 : 3] <= tmp_272_cast_fu_173_p3[12 : 3];
        tmp_275_cast_reg_268[13 : 3] <= tmp_275_cast_fu_186_p3[13 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_17_reg_276 <= w_17_fu_200_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_102_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_102_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        left_r_ce0 = 1'b1;
    end else begin
        left_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_98_reg_233 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_102_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_148_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_194_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign co_17_fu_108_p2 = (7'd1 + co_reg_65);

assign exitcond1_fu_148_p2 = ((h_reg_76 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond2_fu_102_p2 = ((co_reg_65 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond_fu_194_p2 = ((w_reg_87 == 4'd8) ? 1'b1 : 1'b0);

assign h_17_fu_154_p2 = (h_reg_76 + 4'd1);

assign left_r_address0 = tmp_276_cast_fu_219_p1;

assign output_r_address0 = tmp_277_cast_fu_229_p1;

assign output_r_d0 = left_r_q0;

assign tmp_101_cast1_fu_206_p1 = w_reg_87;

assign tmp_101_cast_fu_210_p1 = w_reg_87;

assign tmp_161_fu_136_p3 = {{co_reg_65}, {3'd0}};

assign tmp_162_fu_168_p2 = (tmp_cast_fu_164_p1 + tmp_267_cast_reg_245);

assign tmp_163_fu_181_p2 = (tmp_cast2_fu_160_p1 + tmp_269_cast_reg_250);

assign tmp_164_fu_214_p2 = (tmp_272_cast_reg_263 + tmp_101_cast_fu_210_p1);

assign tmp_165_fu_224_p2 = (tmp_275_cast_reg_268 + tmp_101_cast1_fu_206_p1);

assign tmp_267_cast_fu_132_p1 = tmp_s_fu_124_p3;

assign tmp_269_cast_fu_144_p1 = tmp_161_fu_136_p3;

assign tmp_272_cast_fu_173_p3 = {{tmp_162_fu_168_p2}, {3'd0}};

assign tmp_275_cast_fu_186_p3 = {{tmp_163_fu_181_p2}, {3'd0}};

assign tmp_276_cast_fu_219_p1 = tmp_164_fu_214_p2;

assign tmp_277_cast_fu_229_p1 = tmp_165_reg_286;

assign tmp_98_fu_98_p1 = co_reg_65[0:0];

assign tmp_cast2_fu_160_p1 = h_reg_76;

assign tmp_cast_fu_164_p1 = h_reg_76;

assign tmp_fu_114_p4 = {{co_reg_65[6:1]}};

assign tmp_s_fu_124_p3 = {{tmp_fu_114_p4}, {3'd0}};

assign w_17_fu_200_p2 = (w_reg_87 + 4'd1);

always @ (posedge ap_clk) begin
    tmp_267_cast_reg_245[2:0] <= 3'b000;
    tmp_267_cast_reg_245[9] <= 1'b0;
    tmp_269_cast_reg_250[2:0] <= 3'b000;
    tmp_269_cast_reg_250[10] <= 1'b0;
    tmp_272_cast_reg_263[2:0] <= 3'b000;
    tmp_275_cast_reg_268[2:0] <= 3'b000;
end

endmodule //shuffle_48_l
