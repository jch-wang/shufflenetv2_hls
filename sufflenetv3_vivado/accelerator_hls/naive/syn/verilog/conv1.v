// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 26'd1;
parameter    ap_ST_fsm_state2 = 26'd2;
parameter    ap_ST_fsm_state3 = 26'd4;
parameter    ap_ST_fsm_state4 = 26'd8;
parameter    ap_ST_fsm_state5 = 26'd16;
parameter    ap_ST_fsm_state6 = 26'd32;
parameter    ap_ST_fsm_state7 = 26'd64;
parameter    ap_ST_fsm_state8 = 26'd128;
parameter    ap_ST_fsm_state9 = 26'd256;
parameter    ap_ST_fsm_state10 = 26'd512;
parameter    ap_ST_fsm_state11 = 26'd1024;
parameter    ap_ST_fsm_state12 = 26'd2048;
parameter    ap_ST_fsm_state13 = 26'd4096;
parameter    ap_ST_fsm_state14 = 26'd8192;
parameter    ap_ST_fsm_state15 = 26'd16384;
parameter    ap_ST_fsm_state16 = 26'd32768;
parameter    ap_ST_fsm_state17 = 26'd65536;
parameter    ap_ST_fsm_state18 = 26'd131072;
parameter    ap_ST_fsm_state19 = 26'd262144;
parameter    ap_ST_fsm_state20 = 26'd524288;
parameter    ap_ST_fsm_state21 = 26'd1048576;
parameter    ap_ST_fsm_state22 = 26'd2097152;
parameter    ap_ST_fsm_state23 = 26'd4194304;
parameter    ap_ST_fsm_state24 = 26'd8388608;
parameter    ap_ST_fsm_state25 = 26'd16777216;
parameter    ap_ST_fsm_state26 = 26'd33554432;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [9:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [4:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [14:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg weight_ce0;
reg bias_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] co_23_fu_240_p2;
reg   [4:0] co_23_reg_674;
wire    ap_CS_fsm_state2;
wire  signed [8:0] tmp_343_cast_fu_273_p1;
reg  signed [8:0] tmp_343_cast_reg_679;
wire   [0:0] exitcond5_fu_234_p2;
wire   [10:0] tmp_345_cast_fu_285_p1;
reg   [10:0] tmp_345_cast_reg_684;
reg   [4:0] bias_addr_reg_689;
wire   [6:0] h_cast_fu_289_p1;
reg   [6:0] h_cast_reg_694;
wire    ap_CS_fsm_state3;
wire   [5:0] h_23_fu_299_p2;
reg   [5:0] h_23_reg_702;
wire   [15:0] tmp_348_cast_fu_314_p3;
reg   [15:0] tmp_348_cast_reg_707;
wire   [0:0] exitcond4_fu_293_p2;
wire   [6:0] w_cast_fu_322_p1;
reg   [6:0] w_cast_reg_712;
wire    ap_CS_fsm_state4;
wire   [5:0] w_23_fu_332_p2;
reg   [5:0] w_23_reg_720;
wire   [5:0] tmp_109_fu_338_p2;
reg   [5:0] tmp_109_reg_725;
wire   [0:0] exitcond3_fu_326_p2;
wire   [1:0] ci_8_fu_350_p2;
reg   [1:0] ci_8_reg_733;
wire    ap_CS_fsm_state5;
wire   [7:0] tmp_351_cast_fu_368_p1;
reg   [7:0] tmp_351_cast_reg_738;
wire   [0:0] exitcond2_fu_344_p2;
wire   [63:0] tmp_201_fu_393_p2;
reg   [63:0] tmp_201_reg_743;
wire   [15:0] tmp_198_fu_403_p2;
reg   [15:0] tmp_198_reg_748;
wire   [1:0] m_7_fu_418_p2;
reg   [1:0] m_7_reg_756;
wire    ap_CS_fsm_state6;
wire   [10:0] tmp_203_fu_449_p2;
reg   [10:0] tmp_203_reg_761;
wire   [0:0] exitcond1_fu_412_p2;
wire   [0:0] tmp_114_fu_465_p2;
reg   [0:0] tmp_114_reg_766;
wire   [12:0] tmp_360_cast_fu_495_p3;
reg   [12:0] tmp_360_cast_reg_771;
wire   [0:0] icmp_fu_513_p2;
reg   [0:0] icmp_reg_776;
wire   [1:0] n_7_fu_529_p2;
reg   [1:0] n_7_reg_784;
wire    ap_CS_fsm_state7;
wire   [10:0] tmp_205_fu_539_p2;
reg   [10:0] tmp_205_reg_789;
wire   [0:0] exitcond_fu_523_p2;
wire   [0:0] icmp5_fu_569_p2;
reg   [0:0] icmp5_reg_794;
wire   [12:0] tmp_206_fu_579_p2;
reg   [12:0] tmp_206_reg_799;
wire   [0:0] notlhs_fu_584_p2;
reg   [0:0] notlhs_reg_804;
wire    ap_CS_fsm_state8;
reg   [31:0] weight_load_reg_819;
wire    ap_CS_fsm_state9;
wire   [31:0] tmp_121_fu_611_p3;
reg   [31:0] tmp_121_reg_824;
wire   [31:0] grp_fu_225_p2;
reg   [31:0] tmp_122_reg_829;
wire    ap_CS_fsm_state13;
wire   [31:0] grp_fu_219_p2;
wire    ap_CS_fsm_state18;
reg   [31:0] bias_load_reg_839;
wire    ap_CS_fsm_state19;
reg   [31:0] result_reg_844;
wire    ap_CS_fsm_state24;
wire   [0:0] tmp_39_fu_229_p2;
reg   [0:0] tmp_39_reg_851;
wire    ap_CS_fsm_state25;
reg   [4:0] co_reg_115;
reg   [5:0] h_reg_126;
reg   [5:0] w_reg_138;
wire    ap_CS_fsm_state26;
reg   [31:0] sum_reg_150;
reg   [1:0] ci_reg_162;
reg   [31:0] sum_1_reg_173;
reg   [1:0] m_reg_185;
reg   [31:0] sum_2_reg_196;
reg   [1:0] n_reg_208;
wire   [63:0] tmp_fu_246_p1;
wire   [63:0] tmp_361_cast_fu_589_p1;
wire   [63:0] tmp_362_cast_fu_593_p1;
wire   [63:0] tmp_349_cast_fu_667_p1;
reg   [31:0] grp_fu_219_p0;
reg   [31:0] grp_fu_219_p1;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state10;
wire   [6:0] tmp_s_fu_255_p3;
wire   [7:0] p_shl_cast_fu_263_p1;
wire   [7:0] tmp_cast_fu_251_p1;
wire   [7:0] tmp_195_fu_267_p2;
wire   [9:0] tmp_196_fu_277_p3;
wire   [10:0] tmp_cast_84_fu_305_p1;
wire   [10:0] tmp_197_fu_309_p2;
wire   [6:0] tmp_199_fu_360_p3;
wire   [8:0] tmp_111_cast_fu_356_p1;
wire   [8:0] tmp_200_fu_372_p2;
wire   [10:0] tmp_105_fu_381_p3;
wire  signed [63:0] p_shl1_fu_389_p1;
wire  signed [63:0] tmp_352_cast_fu_377_p1;
wire   [15:0] tmp_110_cast_fu_399_p1;
wire   [63:0] tmp_112_fu_424_p1;
wire   [63:0] tmp_202_fu_428_p2;
wire   [8:0] tmp_107_fu_437_p1;
wire   [10:0] p_shl2_cast_fu_441_p3;
wire   [10:0] tmp_106_fu_433_p1;
wire   [2:0] m_cast_cast_fu_408_p1;
wire   [2:0] tmp_113_fu_455_p2;
wire  signed [5:0] tmp_113_cast_fu_461_p1;
wire   [1:0] tmp4_fu_471_p2;
wire  signed [6:0] tmp4_cast_fu_477_p1;
wire   [6:0] tmp_115_fu_481_p2;
wire  signed [7:0] tmp_116_cast_fu_486_p1;
wire   [7:0] tmp_204_fu_490_p2;
wire   [1:0] tmp_108_fu_503_p4;
wire   [10:0] tmp_117_cast_fu_535_p1;
wire   [1:0] tmp5_fu_544_p2;
wire  signed [6:0] tmp5_cast_fu_550_p1;
wire   [6:0] tmp_118_fu_554_p2;
wire   [1:0] tmp_110_fu_559_p4;
wire  signed [12:0] tmp_120_cast_fu_575_p1;
wire   [5:0] n_cast9_fu_519_p1;
wire   [0:0] tmp7_fu_601_p2;
wire   [0:0] tmp6_fu_597_p2;
wire   [0:0] sel_tmp2_fu_605_p2;
wire   [31:0] result_to_int_fu_619_p1;
wire   [7:0] tmp_36_fu_622_p4;
wire   [22:0] tmp_104_fu_632_p1;
wire   [0:0] notrhs1_fu_642_p2;
wire   [0:0] notlhs1_fu_636_p2;
wire   [0:0] tmp_38_fu_648_p2;
wire   [0:0] tmp_40_fu_654_p2;
reg   [25:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 26'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_219_p0),
    .din1(grp_fu_219_p1),
    .ce(1'b1),
    .dout(grp_fu_219_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_819),
    .din1(tmp_121_reg_824),
    .ce(1'b1),
    .dout(grp_fu_225_p2)
);

ShuffleNetV2_fcmpdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
ShuffleNetV2_fcmpdEe_U3(
    .din0(result_reg_844),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_39_fu_229_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond1_fu_412_p2))) begin
        ci_reg_162 <= ci_8_reg_733;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_326_p2))) begin
        ci_reg_162 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_293_p2 == 1'd1))) begin
        co_reg_115 <= co_23_reg_674;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_115 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_326_p2 == 1'd1))) begin
        h_reg_126 <= h_23_reg_702;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_234_p2 == 1'd0))) begin
        h_reg_126 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_523_p2))) begin
        m_reg_185 <= m_7_reg_756;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_344_p2))) begin
        m_reg_185 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond1_fu_412_p2))) begin
        n_reg_208 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        n_reg_208 <= n_7_reg_784;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_523_p2))) begin
        sum_1_reg_173 <= sum_2_reg_196;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_344_p2))) begin
        sum_1_reg_173 <= sum_reg_150;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond1_fu_412_p2))) begin
        sum_2_reg_196 <= sum_1_reg_173;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        sum_2_reg_196 <= grp_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond1_fu_412_p2))) begin
        sum_reg_150 <= sum_1_reg_173;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_326_p2))) begin
        sum_reg_150 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond4_fu_293_p2))) begin
        w_reg_138 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        w_reg_138 <= w_23_reg_720;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_234_p2 == 1'd0))) begin
        bias_addr_reg_689 <= tmp_fu_246_p1;
        tmp_343_cast_reg_679 <= tmp_343_cast_fu_273_p1;
        tmp_345_cast_reg_684[9 : 5] <= tmp_345_cast_fu_285_p1[9 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        bias_load_reg_839 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ci_8_reg_733 <= ci_8_fu_350_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_23_reg_674 <= co_23_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_23_reg_702 <= h_23_fu_299_p2;
        h_cast_reg_694[5 : 0] <= h_cast_fu_289_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond_fu_523_p2))) begin
        icmp5_reg_794 <= icmp5_fu_569_p2;
        notlhs_reg_804 <= notlhs_fu_584_p2;
        tmp_205_reg_789 <= tmp_205_fu_539_p2;
        tmp_206_reg_799 <= tmp_206_fu_579_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond1_fu_412_p2))) begin
        icmp_reg_776 <= icmp_fu_513_p2;
        tmp_114_reg_766 <= tmp_114_fu_465_p2;
        tmp_203_reg_761 <= tmp_203_fu_449_p2;
        tmp_360_cast_reg_771[12 : 5] <= tmp_360_cast_fu_495_p3[12 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        m_7_reg_756 <= m_7_fu_418_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        n_7_reg_784 <= n_7_fu_529_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        result_reg_844 <= grp_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_326_p2))) begin
        tmp_109_reg_725 <= tmp_109_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_121_reg_824 <= tmp_121_fu_611_p3;
        weight_load_reg_819 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_122_reg_829 <= grp_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_344_p2 == 1'd1))) begin
        tmp_198_reg_748 <= tmp_198_fu_403_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_344_p2))) begin
        tmp_201_reg_743 <= tmp_201_fu_393_p2;
        tmp_351_cast_reg_738[6 : 5] <= tmp_351_cast_fu_368_p1[6 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond4_fu_293_p2))) begin
        tmp_348_cast_reg_707[15 : 5] <= tmp_348_cast_fu_314_p3[15 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp_39_reg_851 <= tmp_39_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_23_reg_720 <= w_23_fu_332_p2;
        w_cast_reg_712[5 : 0] <= w_cast_fu_322_p1[5 : 0];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_234_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_234_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_219_p0 = sum_reg_150;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_219_p0 = sum_2_reg_196;
    end else begin
        grp_fu_219_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_219_p1 = bias_load_reg_839;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_219_p1 = tmp_122_reg_829;
    end else begin
        grp_fu_219_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_234_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_293_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_326_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_344_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond1_fu_412_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_523_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_689;

assign ci_8_fu_350_p2 = (ci_reg_162 + 2'd1);

assign co_23_fu_240_p2 = (co_reg_115 + 5'd1);

assign exitcond1_fu_412_p2 = ((m_reg_185 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_344_p2 = ((ci_reg_162 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond3_fu_326_p2 = ((w_reg_138 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond4_fu_293_p2 = ((h_reg_126 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond5_fu_234_p2 = ((co_reg_115 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond_fu_523_p2 = ((n_reg_208 == 2'd3) ? 1'b1 : 1'b0);

assign h_23_fu_299_p2 = (h_reg_126 + 6'd1);

assign h_cast_fu_289_p1 = h_reg_126;

assign icmp5_fu_569_p2 = ((tmp_110_fu_559_p4 != 2'd1) ? 1'b1 : 1'b0);

assign icmp_fu_513_p2 = ((tmp_108_fu_503_p4 != 2'd1) ? 1'b1 : 1'b0);

assign input_r_address0 = tmp_362_cast_fu_593_p1;

assign m_7_fu_418_p2 = (m_reg_185 + 2'd1);

assign m_cast_cast_fu_408_p1 = m_reg_185;

assign n_7_fu_529_p2 = (n_reg_208 + 2'd1);

assign n_cast9_fu_519_p1 = n_reg_208;

assign notlhs1_fu_636_p2 = ((tmp_36_fu_622_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_584_p2 = ((n_cast9_fu_519_p1 != tmp_109_reg_725) ? 1'b1 : 1'b0);

assign notrhs1_fu_642_p2 = ((tmp_104_fu_632_p1 == 23'd0) ? 1'b1 : 1'b0);

assign output_r_address0 = tmp_349_cast_fu_667_p1;

assign output_r_d0 = ((tmp_40_fu_654_p2[0:0] === 1'b1) ? result_reg_844 : 32'd0);

assign p_shl1_fu_389_p1 = $signed(tmp_105_fu_381_p3);

assign p_shl2_cast_fu_441_p3 = {{tmp_107_fu_437_p1}, {2'd0}};

assign p_shl_cast_fu_263_p1 = tmp_s_fu_255_p3;

assign result_to_int_fu_619_p1 = result_reg_844;

assign sel_tmp2_fu_605_p2 = (tmp7_fu_601_p2 & tmp6_fu_597_p2);

assign tmp4_cast_fu_477_p1 = $signed(tmp4_fu_471_p2);

assign tmp4_fu_471_p2 = ($signed(2'd3) + $signed(m_reg_185));

assign tmp5_cast_fu_550_p1 = $signed(tmp5_fu_544_p2);

assign tmp5_fu_544_p2 = ($signed(n_reg_208) + $signed(2'd3));

assign tmp6_fu_597_p2 = (icmp_reg_776 & notlhs_reg_804);

assign tmp7_fu_601_p2 = (tmp_114_reg_766 & icmp5_reg_794);

assign tmp_104_fu_632_p1 = result_to_int_fu_619_p1[22:0];

assign tmp_105_fu_381_p3 = {{tmp_200_fu_372_p2}, {2'd0}};

assign tmp_106_fu_433_p1 = tmp_202_fu_428_p2[10:0];

assign tmp_107_fu_437_p1 = tmp_202_fu_428_p2[8:0];

assign tmp_108_fu_503_p4 = {{tmp_115_fu_481_p2[6:5]}};

assign tmp_109_fu_338_p2 = (6'd0 - w_reg_138);

assign tmp_110_cast_fu_399_p1 = w_reg_138;

assign tmp_110_fu_559_p4 = {{tmp_118_fu_554_p2[6:5]}};

assign tmp_111_cast_fu_356_p1 = ci_reg_162;

assign tmp_112_fu_424_p1 = m_reg_185;

assign tmp_113_cast_fu_461_p1 = $signed(tmp_113_fu_455_p2);

assign tmp_113_fu_455_p2 = (3'd0 - m_cast_cast_fu_408_p1);

assign tmp_114_fu_465_p2 = ((h_reg_126 != tmp_113_cast_fu_461_p1) ? 1'b1 : 1'b0);

assign tmp_115_fu_481_p2 = ($signed(tmp4_cast_fu_477_p1) + $signed(h_cast_reg_694));

assign tmp_116_cast_fu_486_p1 = $signed(tmp_115_fu_481_p2);

assign tmp_117_cast_fu_535_p1 = n_reg_208;

assign tmp_118_fu_554_p2 = ($signed(w_cast_reg_712) + $signed(tmp5_cast_fu_550_p1));

assign tmp_120_cast_fu_575_p1 = $signed(tmp_118_fu_554_p2);

assign tmp_121_fu_611_p3 = ((sel_tmp2_fu_605_p2[0:0] === 1'b1) ? input_r_q0 : 32'd0);

assign tmp_195_fu_267_p2 = (p_shl_cast_fu_263_p1 - tmp_cast_fu_251_p1);

assign tmp_196_fu_277_p3 = {{co_reg_115}, {5'd0}};

assign tmp_197_fu_309_p2 = (tmp_cast_84_fu_305_p1 + tmp_345_cast_reg_684);

assign tmp_198_fu_403_p2 = (tmp_348_cast_reg_707 + tmp_110_cast_fu_399_p1);

assign tmp_199_fu_360_p3 = {{ci_reg_162}, {5'd0}};

assign tmp_200_fu_372_p2 = ($signed(tmp_111_cast_fu_356_p1) + $signed(tmp_343_cast_reg_679));

assign tmp_201_fu_393_p2 = ($signed(p_shl1_fu_389_p1) - $signed(tmp_352_cast_fu_377_p1));

assign tmp_202_fu_428_p2 = (tmp_112_fu_424_p1 + tmp_201_reg_743);

assign tmp_203_fu_449_p2 = (p_shl2_cast_fu_441_p3 - tmp_106_fu_433_p1);

assign tmp_204_fu_490_p2 = ($signed(tmp_116_cast_fu_486_p1) + $signed(tmp_351_cast_reg_738));

assign tmp_205_fu_539_p2 = (tmp_203_reg_761 + tmp_117_cast_fu_535_p1);

assign tmp_206_fu_579_p2 = ($signed(tmp_360_cast_reg_771) + $signed(tmp_120_cast_fu_575_p1));

assign tmp_343_cast_fu_273_p1 = $signed(tmp_195_fu_267_p2);

assign tmp_345_cast_fu_285_p1 = tmp_196_fu_277_p3;

assign tmp_348_cast_fu_314_p3 = {{tmp_197_fu_309_p2}, {5'd0}};

assign tmp_349_cast_fu_667_p1 = tmp_198_reg_748;

assign tmp_351_cast_fu_368_p1 = tmp_199_fu_360_p3;

assign tmp_352_cast_fu_377_p1 = $signed(tmp_200_fu_372_p2);

assign tmp_360_cast_fu_495_p3 = {{tmp_204_fu_490_p2}, {5'd0}};

assign tmp_361_cast_fu_589_p1 = tmp_205_reg_789;

assign tmp_362_cast_fu_593_p1 = tmp_206_reg_799;

assign tmp_36_fu_622_p4 = {{result_to_int_fu_619_p1[30:23]}};

assign tmp_38_fu_648_p2 = (notrhs1_fu_642_p2 | notlhs1_fu_636_p2);

assign tmp_40_fu_654_p2 = (tmp_38_fu_648_p2 & tmp_39_reg_851);

assign tmp_cast_84_fu_305_p1 = h_reg_126;

assign tmp_cast_fu_251_p1 = co_reg_115;

assign tmp_fu_246_p1 = co_reg_115;

assign tmp_s_fu_255_p3 = {{co_reg_115}, {2'd0}};

assign w_23_fu_332_p2 = (w_reg_138 + 6'd1);

assign w_cast_fu_322_p1 = w_reg_138;

assign weight_address0 = tmp_361_cast_fu_589_p1;

always @ (posedge ap_clk) begin
    tmp_345_cast_reg_684[4:0] <= 5'b00000;
    tmp_345_cast_reg_684[10] <= 1'b0;
    h_cast_reg_694[6] <= 1'b0;
    tmp_348_cast_reg_707[4:0] <= 5'b00000;
    w_cast_reg_712[6] <= 1'b0;
    tmp_351_cast_reg_738[4:0] <= 5'b00000;
    tmp_351_cast_reg_738[7] <= 1'b0;
    tmp_360_cast_reg_771[4:0] <= 5'b00000;
end

endmodule //conv1
