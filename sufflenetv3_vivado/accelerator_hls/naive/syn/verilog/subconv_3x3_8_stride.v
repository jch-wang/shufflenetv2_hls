// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_8_stride (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [9:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [6:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [10:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg weight_ce0;
reg bias_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] co_1_fu_193_p2;
reg   [6:0] co_1_reg_483;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_15_cast_fu_216_p1;
reg   [10:0] tmp_15_cast_reg_488;
wire   [0:0] exitcond4_fu_187_p2;
wire   [9:0] p_shl_cast_fu_228_p1;
reg   [9:0] p_shl_cast_reg_493;
wire  signed [10:0] tmp_17_cast_fu_238_p1;
reg  signed [10:0] tmp_17_cast_reg_498;
reg   [6:0] bias_addr_reg_503;
wire   [2:0] h_1_fu_248_p2;
reg   [2:0] h_1_reg_511;
wire    ap_CS_fsm_state3;
wire   [3:0] tmp_2_cast_fu_260_p1;
reg   [3:0] tmp_2_cast_reg_516;
wire   [0:0] exitcond3_fu_242_p2;
wire   [11:0] tmp_23_cast_fu_273_p3;
reg   [11:0] tmp_23_cast_reg_522;
wire   [2:0] w_1_fu_287_p2;
reg   [2:0] w_1_reg_530;
wire    ap_CS_fsm_state4;
wire   [3:0] tmp_5_cast_fu_299_p1;
reg   [3:0] tmp_5_cast_reg_535;
wire   [0:0] exitcond2_fu_281_p2;
wire   [3:0] tmp_1_fu_303_p2;
reg   [3:0] tmp_1_reg_540;
wire   [1:0] m_1_fu_319_p2;
reg   [1:0] m_1_reg_548;
wire    ap_CS_fsm_state5;
wire   [10:0] tmp_15_fu_340_p2;
reg   [10:0] tmp_15_reg_553;
wire   [0:0] exitcond1_fu_313_p2;
wire   [13:0] tmp_31_cast_fu_370_p3;
reg   [13:0] tmp_31_cast_reg_558;
wire   [0:0] sel_tmp_fu_388_p2;
reg   [0:0] sel_tmp_reg_563;
wire   [11:0] tmp_8_fu_397_p2;
reg   [11:0] tmp_8_reg_568;
wire   [1:0] n_1_fu_412_p2;
reg   [1:0] n_1_reg_576;
wire    ap_CS_fsm_state6;
wire   [10:0] tmp_17_fu_422_p2;
reg   [10:0] tmp_17_reg_581;
wire   [0:0] exitcond_fu_406_p2;
wire   [0:0] p_not_fu_427_p2;
reg   [0:0] p_not_reg_586;
wire   [13:0] tmp_18_fu_451_p2;
reg   [13:0] tmp_18_reg_591;
wire    ap_CS_fsm_state7;
reg   [31:0] weight_load_reg_606;
wire    ap_CS_fsm_state8;
wire   [31:0] tmp_12_fu_468_p3;
reg   [31:0] tmp_12_reg_611;
wire   [31:0] grp_fu_183_p2;
reg   [31:0] tmp_13_reg_616;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_177_p2;
wire    ap_CS_fsm_state17;
reg   [31:0] bias_load_reg_626;
wire    ap_CS_fsm_state18;
reg   [31:0] result_reg_631;
wire    ap_CS_fsm_state23;
reg   [6:0] co_reg_97;
reg   [2:0] h_reg_108;
reg   [2:0] w_reg_119;
wire    ap_CS_fsm_state24;
reg   [31:0] sum_reg_131;
reg   [1:0] m_reg_143;
reg   [31:0] sum_1_reg_154;
reg   [1:0] n_reg_166;
wire   [63:0] tmp_fu_199_p1;
wire   [63:0] tmp_32_cast_fu_456_p1;
wire   [63:0] tmp_33_cast_fu_460_p1;
wire   [63:0] tmp_25_cast_fu_476_p1;
reg   [31:0] grp_fu_177_p0;
reg   [31:0] grp_fu_177_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state9;
wire   [9:0] tmp_s_fu_208_p3;
wire   [8:0] tmp_2_fu_220_p3;
wire   [9:0] tmp_cast_fu_204_p1;
wire   [9:0] tmp_3_fu_232_p2;
wire   [2:0] tmp_5_fu_254_p2;
wire   [9:0] tmp_3_cast_fu_264_p1;
wire   [9:0] tmp_6_fu_268_p2;
wire   [2:0] tmp_7_fu_293_p2;
wire   [10:0] tmp_8_cast_fu_325_p1;
wire   [10:0] tmp_11_fu_329_p2;
wire   [10:0] tmp_14_fu_334_p2;
wire   [1:0] tmp3_fu_346_p2;
wire  signed [3:0] tmp3_cast_fu_352_p1;
wire   [3:0] tmp_4_fu_356_p2;
wire  signed [10:0] tmp_7_cast_fu_361_p1;
wire   [10:0] tmp_16_fu_365_p2;
wire   [2:0] m_cast8_cast_fu_309_p1;
wire   [2:0] tmp_9_fu_378_p2;
wire  signed [3:0] tmp_9_cast_fu_384_p1;
wire   [11:0] tmp_6_cast_fu_393_p1;
wire   [10:0] tmp_cast_18_fu_418_p1;
wire   [3:0] n_cast6_fu_402_p1;
wire   [1:0] tmp4_fu_432_p2;
wire  signed [3:0] tmp4_cast_fu_438_p1;
wire   [3:0] tmp_10_fu_442_p2;
wire  signed [13:0] tmp_11_cast_fu_447_p1;
wire   [0:0] sel_tmp1_fu_464_p2;
reg   [23:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_x_U81(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_177_p0),
    .din1(grp_fu_177_p1),
    .ce(1'b1),
    .dout(grp_fu_177_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_x_U82(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_606),
    .din1(tmp_12_reg_611),
    .ce(1'b1),
    .dout(grp_fu_183_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_242_p2 == 1'd1))) begin
        co_reg_97 <= co_1_reg_483;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_97 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_281_p2 == 1'd1))) begin
        h_reg_108 <= h_1_reg_511;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_187_p2 == 1'd0))) begin
        h_reg_108 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_406_p2))) begin
        m_reg_143 <= m_1_reg_548;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_281_p2))) begin
        m_reg_143 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_313_p2))) begin
        n_reg_166 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        n_reg_166 <= n_1_reg_576;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_313_p2))) begin
        sum_1_reg_154 <= sum_reg_131;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        sum_1_reg_154 <= grp_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_406_p2))) begin
        sum_reg_131 <= sum_1_reg_154;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_281_p2))) begin
        sum_reg_131 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond3_fu_242_p2))) begin
        w_reg_119 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        w_reg_119 <= w_1_reg_530;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_187_p2 == 1'd0))) begin
        bias_addr_reg_503 <= tmp_fu_199_p1;
        p_shl_cast_reg_493[8 : 2] <= p_shl_cast_fu_228_p1[8 : 2];
        tmp_15_cast_reg_488[9 : 3] <= tmp_15_cast_fu_216_p1[9 : 3];
        tmp_17_cast_reg_498 <= tmp_17_cast_fu_238_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        bias_load_reg_626 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_1_reg_483 <= co_1_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_1_reg_511 <= h_1_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_1_reg_548 <= m_1_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_1_reg_576 <= n_1_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond_fu_406_p2))) begin
        p_not_reg_586 <= p_not_fu_427_p2;
        tmp_17_reg_581 <= tmp_17_fu_422_p2;
        tmp_18_reg_591 <= tmp_18_fu_451_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        result_reg_631 <= grp_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_313_p2))) begin
        sel_tmp_reg_563 <= sel_tmp_fu_388_p2;
        tmp_15_reg_553 <= tmp_15_fu_340_p2;
        tmp_31_cast_reg_558[13 : 3] <= tmp_31_cast_fu_370_p3[13 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_12_reg_611 <= tmp_12_fu_468_p3;
        weight_load_reg_606 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_13_reg_616 <= grp_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_281_p2))) begin
        tmp_1_reg_540[3 : 1] <= tmp_1_fu_303_p2[3 : 1];
        tmp_5_cast_reg_535[2 : 1] <= tmp_5_cast_fu_299_p1[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond3_fu_242_p2))) begin
        tmp_23_cast_reg_522[11 : 2] <= tmp_23_cast_fu_273_p3[11 : 2];
        tmp_2_cast_reg_516[2 : 1] <= tmp_2_cast_fu_260_p1[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_313_p2 == 1'd1))) begin
        tmp_8_reg_568 <= tmp_8_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_1_reg_530 <= w_1_fu_287_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_187_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_187_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_177_p0 = sum_reg_131;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_177_p0 = sum_1_reg_154;
    end else begin
        grp_fu_177_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_177_p1 = bias_load_reg_626;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_177_p1 = tmp_13_reg_616;
    end else begin
        grp_fu_177_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_187_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_242_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_281_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_313_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_406_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_503;

assign co_1_fu_193_p2 = (co_reg_97 + 7'd1);

assign exitcond1_fu_313_p2 = ((m_reg_143 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_281_p2 = ((w_reg_119 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond3_fu_242_p2 = ((h_reg_108 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond4_fu_187_p2 = ((co_reg_97 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond_fu_406_p2 = ((n_reg_166 == 2'd3) ? 1'b1 : 1'b0);

assign h_1_fu_248_p2 = (h_reg_108 + 3'd1);

assign input_r_address0 = tmp_33_cast_fu_460_p1;

assign m_1_fu_319_p2 = (m_reg_143 + 2'd1);

assign m_cast8_cast_fu_309_p1 = m_reg_143;

assign n_1_fu_412_p2 = (n_reg_166 + 2'd1);

assign n_cast6_fu_402_p1 = n_reg_166;

assign output_r_address0 = tmp_25_cast_fu_476_p1;

assign output_r_d0 = result_reg_631;

assign p_not_fu_427_p2 = ((n_cast6_fu_402_p1 == tmp_1_reg_540) ? 1'b1 : 1'b0);

assign p_shl_cast_fu_228_p1 = tmp_2_fu_220_p3;

assign sel_tmp1_fu_464_p2 = (sel_tmp_reg_563 | p_not_reg_586);

assign sel_tmp_fu_388_p2 = ((tmp_2_cast_reg_516 == tmp_9_cast_fu_384_p1) ? 1'b1 : 1'b0);

assign tmp3_cast_fu_352_p1 = $signed(tmp3_fu_346_p2);

assign tmp3_fu_346_p2 = ($signed(2'd3) + $signed(m_reg_143));

assign tmp4_cast_fu_438_p1 = $signed(tmp4_fu_432_p2);

assign tmp4_fu_432_p2 = ($signed(n_reg_166) + $signed(2'd3));

assign tmp_10_fu_442_p2 = ($signed(tmp_5_cast_reg_535) + $signed(tmp4_cast_fu_438_p1));

assign tmp_11_cast_fu_447_p1 = $signed(tmp_10_fu_442_p2);

assign tmp_11_fu_329_p2 = ($signed(tmp_8_cast_fu_325_p1) + $signed(tmp_17_cast_reg_498));

assign tmp_12_fu_468_p3 = ((sel_tmp1_fu_464_p2[0:0] === 1'b1) ? 32'd0 : input_r_q0);

assign tmp_14_fu_334_p2 = tmp_11_fu_329_p2 << 11'd2;

assign tmp_15_cast_fu_216_p1 = tmp_s_fu_208_p3;

assign tmp_15_fu_340_p2 = (tmp_14_fu_334_p2 - tmp_11_fu_329_p2);

assign tmp_16_fu_365_p2 = ($signed(tmp_7_cast_fu_361_p1) + $signed(tmp_15_cast_reg_488));

assign tmp_17_cast_fu_238_p1 = $signed(tmp_3_fu_232_p2);

assign tmp_17_fu_422_p2 = (tmp_15_reg_553 + tmp_cast_18_fu_418_p1);

assign tmp_18_fu_451_p2 = ($signed(tmp_31_cast_reg_558) + $signed(tmp_11_cast_fu_447_p1));

assign tmp_1_fu_303_p2 = (4'd0 - tmp_5_cast_fu_299_p1);

assign tmp_23_cast_fu_273_p3 = {{tmp_6_fu_268_p2}, {2'd0}};

assign tmp_25_cast_fu_476_p1 = tmp_8_reg_568;

assign tmp_2_cast_fu_260_p1 = tmp_5_fu_254_p2;

assign tmp_2_fu_220_p3 = {{co_reg_97}, {2'd0}};

assign tmp_31_cast_fu_370_p3 = {{tmp_16_fu_365_p2}, {3'd0}};

assign tmp_32_cast_fu_456_p1 = tmp_17_reg_581;

assign tmp_33_cast_fu_460_p1 = tmp_18_reg_591;

assign tmp_3_cast_fu_264_p1 = h_reg_108;

assign tmp_3_fu_232_p2 = (p_shl_cast_fu_228_p1 - tmp_cast_fu_204_p1);

assign tmp_4_fu_356_p2 = ($signed(tmp3_cast_fu_352_p1) + $signed(tmp_2_cast_reg_516));

assign tmp_5_cast_fu_299_p1 = tmp_7_fu_293_p2;

assign tmp_5_fu_254_p2 = h_reg_108 << 3'd1;

assign tmp_6_cast_fu_393_p1 = w_reg_119;

assign tmp_6_fu_268_p2 = (p_shl_cast_reg_493 + tmp_3_cast_fu_264_p1);

assign tmp_7_cast_fu_361_p1 = $signed(tmp_4_fu_356_p2);

assign tmp_7_fu_293_p2 = w_reg_119 << 3'd1;

assign tmp_8_cast_fu_325_p1 = m_reg_143;

assign tmp_8_fu_397_p2 = (tmp_23_cast_reg_522 + tmp_6_cast_fu_393_p1);

assign tmp_9_cast_fu_384_p1 = $signed(tmp_9_fu_378_p2);

assign tmp_9_fu_378_p2 = (3'd0 - m_cast8_cast_fu_309_p1);

assign tmp_cast_18_fu_418_p1 = n_reg_166;

assign tmp_cast_fu_204_p1 = co_reg_97;

assign tmp_fu_199_p1 = co_reg_97;

assign tmp_s_fu_208_p3 = {{co_reg_97}, {3'd0}};

assign w_1_fu_287_p2 = (w_reg_119 + 3'd1);

assign weight_address0 = tmp_32_cast_fu_456_p1;

always @ (posedge ap_clk) begin
    tmp_15_cast_reg_488[2:0] <= 3'b000;
    tmp_15_cast_reg_488[10] <= 1'b0;
    p_shl_cast_reg_493[1:0] <= 2'b00;
    p_shl_cast_reg_493[9] <= 1'b0;
    tmp_2_cast_reg_516[0] <= 1'b0;
    tmp_2_cast_reg_516[3] <= 1'b0;
    tmp_23_cast_reg_522[1:0] <= 2'b00;
    tmp_5_cast_reg_535[0] <= 1'b0;
    tmp_5_cast_reg_535[3] <= 1'b0;
    tmp_1_reg_540[0] <= 1'b0;
    tmp_31_cast_reg_558[2:0] <= 3'b000;
end

endmodule //subconv_3x3_8_stride
