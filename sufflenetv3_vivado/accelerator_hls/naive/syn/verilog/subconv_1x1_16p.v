// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_1x1_16p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        shuffleunit0_2_outpu_address0,
        shuffleunit0_2_outpu_ce0,
        shuffleunit0_2_outpu_q0,
        ShuffleConvs_1_Downs_address0,
        ShuffleConvs_1_Downs_ce0,
        ShuffleConvs_1_Downs_we0,
        ShuffleConvs_1_Downs_d0
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [5:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [13:0] shuffleunit0_2_outpu_address0;
output   shuffleunit0_2_outpu_ce0;
input  [31:0] shuffleunit0_2_outpu_q0;
output  [13:0] ShuffleConvs_1_Downs_address0;
output   ShuffleConvs_1_Downs_ce0;
output   ShuffleConvs_1_Downs_we0;
output  [31:0] ShuffleConvs_1_Downs_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_ce0;
reg bias_ce0;
reg shuffleunit0_2_outpu_ce0;
reg ShuffleConvs_1_Downs_ce0;
reg ShuffleConvs_1_Downs_we0;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] co_11_fu_170_p2;
reg   [5:0] co_11_reg_382;
wire    ap_CS_fsm_state2;
wire   [10:0] p_shl1_cast2_fu_201_p1;
reg   [10:0] p_shl1_cast2_reg_387;
wire   [0:0] exitcond3_fu_164_p2;
wire   [12:0] tmp_125_fu_209_p2;
reg   [12:0] tmp_125_reg_392;
reg   [5:0] bias_addr_reg_397;
wire   [4:0] h_11_fu_221_p2;
reg   [4:0] h_11_reg_405;
wire    ap_CS_fsm_state3;
wire   [10:0] tmp_cast_fu_227_p1;
reg   [10:0] tmp_cast_reg_410;
wire   [0:0] exitcond2_fu_215_p2;
wire   [14:0] tmp_193_cast_fu_236_p3;
reg   [14:0] tmp_193_cast_reg_415;
wire   [4:0] w_11_fu_250_p2;
reg   [4:0] w_11_reg_423;
wire    ap_CS_fsm_state4;
wire   [14:0] tmp_91_cast_fu_256_p1;
reg   [14:0] tmp_91_cast_reg_428;
wire   [0:0] exitcond1_fu_244_p2;
reg   [13:0] ShuffleConvs_1_Downs_reg_433;
wire   [5:0] ci_5_fu_276_p2;
reg   [5:0] ci_5_reg_441;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_fu_270_p2;
reg   [31:0] weight_load_reg_456;
wire    ap_CS_fsm_state6;
reg   [31:0] shuffleunit0_2_outpu_1_reg_461;
wire   [31:0] grp_fu_155_p2;
reg   [31:0] tmp_93_reg_466;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_150_p2;
wire    ap_CS_fsm_state15;
reg   [31:0] bias_load_reg_476;
wire    ap_CS_fsm_state16;
reg   [31:0] result_reg_481;
wire    ap_CS_fsm_state21;
wire   [0:0] tmp_24_fu_159_p2;
reg   [0:0] tmp_24_reg_488;
wire    ap_CS_fsm_state22;
reg   [5:0] co_reg_94;
reg   [4:0] h_reg_105;
reg   [4:0] w_reg_116;
wire    ap_CS_fsm_state23;
reg   [31:0] sum_reg_127;
reg   [5:0] ci_reg_139;
wire   [63:0] tmp_fu_176_p1;
wire   [63:0] tmp_194_cast_fu_265_p1;
wire  signed [63:0] tmp_195_cast_fu_291_p1;
wire   [63:0] tmp_201_cast_fu_326_p1;
reg   [31:0] grp_fu_150_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state7;
wire   [11:0] tmp_s_fu_181_p3;
wire   [9:0] tmp_124_fu_193_p3;
wire   [12:0] p_shl_cast_fu_189_p1;
wire   [12:0] p_shl1_cast_fu_205_p1;
wire   [10:0] tmp_126_fu_231_p2;
wire   [14:0] tmp_127_fu_260_p2;
wire   [12:0] tmp_92_cast_fu_282_p1;
wire   [12:0] tmp_128_fu_286_p2;
wire   [9:0] tmp_129_fu_296_p3;
wire   [10:0] tmp_197_cast_fu_304_p1;
wire   [10:0] tmp_130_fu_308_p2;
wire   [14:0] tmp_200_cast_fu_313_p3;
wire   [14:0] tmp_131_fu_321_p2;
wire   [31:0] result_to_int_fu_331_p1;
wire   [7:0] tmp_21_fu_334_p4;
wire   [22:0] tmp_92_fu_344_p1;
wire   [0:0] notrhs_fu_354_p2;
wire   [0:0] notlhs_fu_348_p2;
wire   [0:0] tmp_23_fu_360_p2;
wire   [0:0] tmp_25_fu_366_p2;
reg   [22:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_x_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_reg_127),
    .din1(grp_fu_150_p1),
    .ce(1'b1),
    .dout(grp_fu_150_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_x_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_456),
    .din1(shuffleunit0_2_outpu_1_reg_461),
    .ce(1'b1),
    .dout(grp_fu_155_p2)
);

ShuffleNetV2_fcmpdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
ShuffleNetV2_fcmpdEe_x_U43(
    .din0(result_reg_481),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_24_fu_159_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_244_p2))) begin
        ci_reg_139 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        ci_reg_139 <= ci_5_reg_441;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_215_p2 == 1'd1))) begin
        co_reg_94 <= co_11_reg_382;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_94 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_244_p2 == 1'd1))) begin
        h_reg_105 <= h_11_reg_405;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_164_p2 == 1'd0))) begin
        h_reg_105 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_244_p2))) begin
        sum_reg_127 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        sum_reg_127 <= grp_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_215_p2))) begin
        w_reg_116 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        w_reg_116 <= w_11_reg_423;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_244_p2))) begin
        ShuffleConvs_1_Downs_reg_433 <= tmp_194_cast_fu_265_p1;
        tmp_91_cast_reg_428[4 : 0] <= tmp_91_cast_fu_256_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_164_p2 == 1'd0))) begin
        bias_addr_reg_397 <= tmp_fu_176_p1;
        p_shl1_cast2_reg_387[9 : 4] <= p_shl1_cast2_fu_201_p1[9 : 4];
        tmp_125_reg_392[12 : 4] <= tmp_125_fu_209_p2[12 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        bias_load_reg_476 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ci_5_reg_441 <= ci_5_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_11_reg_382 <= co_11_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_11_reg_405 <= h_11_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        result_reg_481 <= grp_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        shuffleunit0_2_outpu_1_reg_461 <= shuffleunit0_2_outpu_q0;
        weight_load_reg_456 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_215_p2))) begin
        tmp_193_cast_reg_415[14 : 4] <= tmp_193_cast_fu_236_p3[14 : 4];
        tmp_cast_reg_410[4 : 0] <= tmp_cast_fu_227_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_24_reg_488 <= tmp_24_fu_159_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_93_reg_466 <= grp_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_11_reg_423 <= w_11_fu_250_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ShuffleConvs_1_Downs_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ShuffleConvs_1_Downs_we0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_164_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_164_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_150_p1 = bias_load_reg_476;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_150_p1 = tmp_93_reg_466;
    end else begin
        grp_fu_150_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        shuffleunit0_2_outpu_ce0 = 1'b1;
    end else begin
        shuffleunit0_2_outpu_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_164_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_215_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_244_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_270_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ShuffleConvs_1_Downs_address0 = ShuffleConvs_1_Downs_reg_433;

assign ShuffleConvs_1_Downs_d0 = ((tmp_25_fu_366_p2[0:0] === 1'b1) ? result_reg_481 : 32'd0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign bias_address0 = bias_addr_reg_397;

assign ci_5_fu_276_p2 = (ci_reg_139 + 6'd1);

assign co_11_fu_170_p2 = (co_reg_94 + 6'd1);

assign exitcond1_fu_244_p2 = ((w_reg_116 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond2_fu_215_p2 = ((h_reg_105 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond3_fu_164_p2 = ((co_reg_94 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond_fu_270_p2 = ((ci_reg_139 == 6'd48) ? 1'b1 : 1'b0);

assign h_11_fu_221_p2 = (h_reg_105 + 5'd1);

assign notlhs_fu_348_p2 = ((tmp_21_fu_334_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_354_p2 = ((tmp_92_fu_344_p1 == 23'd0) ? 1'b1 : 1'b0);

assign p_shl1_cast2_fu_201_p1 = tmp_124_fu_193_p3;

assign p_shl1_cast_fu_205_p1 = tmp_124_fu_193_p3;

assign p_shl_cast_fu_189_p1 = tmp_s_fu_181_p3;

assign result_to_int_fu_331_p1 = result_reg_481;

assign shuffleunit0_2_outpu_address0 = tmp_201_cast_fu_326_p1;

assign tmp_124_fu_193_p3 = {{co_reg_94}, {4'd0}};

assign tmp_125_fu_209_p2 = (p_shl_cast_fu_189_p1 - p_shl1_cast_fu_205_p1);

assign tmp_126_fu_231_p2 = (tmp_cast_fu_227_p1 + p_shl1_cast2_reg_387);

assign tmp_127_fu_260_p2 = (tmp_193_cast_reg_415 + tmp_91_cast_fu_256_p1);

assign tmp_128_fu_286_p2 = (tmp_92_cast_fu_282_p1 + tmp_125_reg_392);

assign tmp_129_fu_296_p3 = {{ci_reg_139}, {4'd0}};

assign tmp_130_fu_308_p2 = (tmp_cast_reg_410 + tmp_197_cast_fu_304_p1);

assign tmp_131_fu_321_p2 = (tmp_91_cast_reg_428 + tmp_200_cast_fu_313_p3);

assign tmp_193_cast_fu_236_p3 = {{tmp_126_fu_231_p2}, {4'd0}};

assign tmp_194_cast_fu_265_p1 = tmp_127_fu_260_p2;

assign tmp_195_cast_fu_291_p1 = $signed(tmp_128_fu_286_p2);

assign tmp_197_cast_fu_304_p1 = tmp_129_fu_296_p3;

assign tmp_200_cast_fu_313_p3 = {{tmp_130_fu_308_p2}, {4'd0}};

assign tmp_201_cast_fu_326_p1 = tmp_131_fu_321_p2;

assign tmp_21_fu_334_p4 = {{result_to_int_fu_331_p1[30:23]}};

assign tmp_23_fu_360_p2 = (notrhs_fu_354_p2 | notlhs_fu_348_p2);

assign tmp_25_fu_366_p2 = (tmp_23_fu_360_p2 & tmp_24_reg_488);

assign tmp_91_cast_fu_256_p1 = w_reg_116;

assign tmp_92_cast_fu_282_p1 = ci_reg_139;

assign tmp_92_fu_344_p1 = result_to_int_fu_331_p1[22:0];

assign tmp_cast_fu_227_p1 = h_reg_105;

assign tmp_fu_176_p1 = co_reg_94;

assign tmp_s_fu_181_p3 = {{co_reg_94}, {6'd0}};

assign w_11_fu_250_p2 = (w_reg_116 + 5'd1);

assign weight_address0 = tmp_195_cast_fu_291_p1;

always @ (posedge ap_clk) begin
    p_shl1_cast2_reg_387[3:0] <= 4'b0000;
    p_shl1_cast2_reg_387[10] <= 1'b0;
    tmp_125_reg_392[3:0] <= 4'b0000;
    tmp_cast_reg_410[10:5] <= 6'b000000;
    tmp_193_cast_reg_415[3:0] <= 4'b0000;
    tmp_91_cast_reg_428[14:5] <= 10'b0000000000;
end

endmodule //subconv_1x1_16p
