// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_32_strid (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_0_address0,
        output_0_ce0,
        output_0_we0,
        output_0_d0
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [7:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [4:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [12:0] output_0_address0;
output   output_0_ce0;
output   output_0_we0;
output  [31:0] output_0_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg weight_ce0;
reg bias_ce0;
reg output_0_ce0;
reg output_0_we0;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] co_4_fu_195_p2;
reg   [4:0] co_4_reg_497;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_67_cast_fu_218_p1;
reg   [10:0] tmp_67_cast_reg_502;
wire   [0:0] exitcond4_fu_189_p2;
wire  signed [8:0] tmp_69_cast_fu_240_p1;
reg  signed [8:0] tmp_69_cast_reg_507;
wire   [9:0] tmp_71_cast_fu_252_p1;
reg   [9:0] tmp_71_cast_reg_512;
reg   [4:0] bias_addr_reg_517;
wire   [4:0] h_4_fu_262_p2;
reg   [4:0] h_4_reg_525;
wire    ap_CS_fsm_state3;
wire   [5:0] tmp_cast_31_fu_274_p1;
reg   [5:0] tmp_cast_31_reg_530;
wire   [0:0] exitcond3_fu_256_p2;
wire   [13:0] tmp_75_cast_fu_287_p3;
reg   [13:0] tmp_75_cast_reg_536;
wire   [4:0] w_4_fu_301_p2;
reg   [4:0] w_4_reg_544;
wire    ap_CS_fsm_state4;
wire   [5:0] tmp_48_cast_fu_313_p1;
reg   [5:0] tmp_48_cast_reg_549;
wire   [0:0] exitcond2_fu_295_p2;
wire   [5:0] tmp_47_fu_317_p2;
reg   [5:0] tmp_47_reg_554;
wire   [1:0] m_4_fu_333_p2;
reg   [1:0] m_4_reg_562;
wire    ap_CS_fsm_state5;
wire   [8:0] tmp_61_fu_354_p2;
reg   [8:0] tmp_61_reg_567;
wire   [0:0] exitcond1_fu_327_p2;
wire   [15:0] tmp_83_cast_fu_384_p3;
reg   [15:0] tmp_83_cast_reg_572;
wire   [0:0] sel_tmp_fu_402_p2;
reg   [0:0] sel_tmp_reg_577;
wire   [13:0] tmp_58_fu_411_p2;
reg   [13:0] tmp_58_reg_582;
wire   [1:0] n_4_fu_426_p2;
reg   [1:0] n_4_reg_590;
wire    ap_CS_fsm_state6;
wire   [8:0] tmp_63_fu_436_p2;
reg   [8:0] tmp_63_reg_595;
wire   [0:0] exitcond_fu_420_p2;
wire   [0:0] p_not_fu_441_p2;
reg   [0:0] p_not_reg_600;
wire   [15:0] tmp_64_fu_465_p2;
reg   [15:0] tmp_64_reg_605;
wire    ap_CS_fsm_state7;
reg   [31:0] weight_load_reg_620;
wire    ap_CS_fsm_state8;
wire   [31:0] tmp_51_fu_482_p3;
reg   [31:0] tmp_51_reg_625;
wire   [31:0] grp_fu_185_p2;
reg   [31:0] tmp_52_reg_630;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_179_p2;
wire    ap_CS_fsm_state17;
reg   [31:0] bias_load_reg_640;
wire    ap_CS_fsm_state18;
reg   [31:0] result_reg_645;
wire    ap_CS_fsm_state23;
reg   [4:0] co_reg_99;
reg   [4:0] h_reg_110;
reg   [4:0] w_reg_121;
wire    ap_CS_fsm_state24;
reg   [31:0] sum_reg_133;
reg   [1:0] m_reg_145;
reg   [31:0] sum_1_reg_156;
reg   [1:0] n_reg_168;
wire   [63:0] tmp_fu_201_p1;
wire   [63:0] tmp_84_cast_fu_470_p1;
wire   [63:0] tmp_85_cast_fu_474_p1;
wire   [63:0] tmp_77_cast_fu_490_p1;
reg   [31:0] grp_fu_179_p0;
reg   [31:0] grp_fu_179_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state9;
wire   [9:0] tmp_s_fu_210_p3;
wire   [6:0] tmp_49_fu_222_p3;
wire   [7:0] p_shl_cast_fu_230_p1;
wire   [7:0] tmp_cast_fu_206_p1;
wire   [7:0] tmp_53_fu_234_p2;
wire   [8:0] tmp_54_fu_244_p3;
wire   [4:0] tmp_55_fu_268_p2;
wire   [9:0] tmp_40_cast_fu_278_p1;
wire   [9:0] tmp_56_fu_282_p2;
wire   [4:0] tmp_57_fu_307_p2;
wire   [8:0] tmp_43_cast_fu_339_p1;
wire   [8:0] tmp_59_fu_343_p2;
wire   [8:0] tmp_60_fu_348_p2;
wire   [1:0] tmp3_fu_360_p2;
wire  signed [5:0] tmp3_cast_fu_366_p1;
wire   [5:0] tmp_44_fu_370_p2;
wire  signed [10:0] tmp_45_cast_fu_375_p1;
wire   [10:0] tmp_62_fu_379_p2;
wire   [2:0] m_cast8_cast_fu_323_p1;
wire   [2:0] tmp_50_fu_392_p2;
wire  signed [5:0] tmp_50_cast_fu_398_p1;
wire   [13:0] tmp_42_cast_fu_407_p1;
wire   [8:0] tmp_46_cast_fu_432_p1;
wire   [5:0] n_cast6_fu_416_p1;
wire   [1:0] tmp4_fu_446_p2;
wire  signed [5:0] tmp4_cast_fu_452_p1;
wire   [5:0] tmp_48_fu_456_p2;
wire  signed [15:0] tmp_49_cast_fu_461_p1;
wire   [0:0] sel_tmp1_fu_478_p2;
reg   [23:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_x_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_179_p0),
    .din1(grp_fu_179_p1),
    .ce(1'b1),
    .dout(grp_fu_179_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_x_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_620),
    .din1(tmp_51_reg_625),
    .ce(1'b1),
    .dout(grp_fu_185_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_256_p2 == 1'd1))) begin
        co_reg_99 <= co_4_reg_497;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_99 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_295_p2 == 1'd1))) begin
        h_reg_110 <= h_4_reg_525;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_189_p2 == 1'd0))) begin
        h_reg_110 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_420_p2))) begin
        m_reg_145 <= m_4_reg_562;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_295_p2))) begin
        m_reg_145 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_327_p2))) begin
        n_reg_168 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        n_reg_168 <= n_4_reg_590;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_327_p2))) begin
        sum_1_reg_156 <= sum_reg_133;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        sum_1_reg_156 <= grp_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_420_p2))) begin
        sum_reg_133 <= sum_1_reg_156;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_295_p2))) begin
        sum_reg_133 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond3_fu_256_p2))) begin
        w_reg_121 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        w_reg_121 <= w_4_reg_544;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_189_p2 == 1'd0))) begin
        bias_addr_reg_517 <= tmp_fu_201_p1;
        tmp_67_cast_reg_502[9 : 5] <= tmp_67_cast_fu_218_p1[9 : 5];
        tmp_69_cast_reg_507 <= tmp_69_cast_fu_240_p1;
        tmp_71_cast_reg_512[8 : 4] <= tmp_71_cast_fu_252_p1[8 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        bias_load_reg_640 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_4_reg_497 <= co_4_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_4_reg_525 <= h_4_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_4_reg_562 <= m_4_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_4_reg_590 <= n_4_fu_426_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond_fu_420_p2))) begin
        p_not_reg_600 <= p_not_fu_441_p2;
        tmp_63_reg_595 <= tmp_63_fu_436_p2;
        tmp_64_reg_605 <= tmp_64_fu_465_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        result_reg_645 <= grp_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_327_p2))) begin
        sel_tmp_reg_577 <= sel_tmp_fu_402_p2;
        tmp_61_reg_567 <= tmp_61_fu_354_p2;
        tmp_83_cast_reg_572[15 : 5] <= tmp_83_cast_fu_384_p3[15 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_295_p2))) begin
        tmp_47_reg_554[5 : 1] <= tmp_47_fu_317_p2[5 : 1];
        tmp_48_cast_reg_549[4 : 1] <= tmp_48_cast_fu_313_p1[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_51_reg_625 <= tmp_51_fu_482_p3;
        weight_load_reg_620 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_52_reg_630 <= grp_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_327_p2 == 1'd1))) begin
        tmp_58_reg_582 <= tmp_58_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond3_fu_256_p2))) begin
        tmp_75_cast_reg_536[13 : 4] <= tmp_75_cast_fu_287_p3[13 : 4];
        tmp_cast_31_reg_530[4 : 1] <= tmp_cast_31_fu_274_p1[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_4_reg_544 <= w_4_fu_301_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_189_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_189_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_179_p0 = sum_reg_133;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_179_p0 = sum_1_reg_156;
    end else begin
        grp_fu_179_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_179_p1 = bias_load_reg_640;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_179_p1 = tmp_52_reg_630;
    end else begin
        grp_fu_179_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        output_0_we0 = 1'b1;
    end else begin
        output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_189_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_256_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_295_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_327_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_420_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_517;

assign co_4_fu_195_p2 = (co_reg_99 + 5'd1);

assign exitcond1_fu_327_p2 = ((m_reg_145 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_295_p2 = ((w_reg_121 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond3_fu_256_p2 = ((h_reg_110 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond4_fu_189_p2 = ((co_reg_99 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond_fu_420_p2 = ((n_reg_168 == 2'd3) ? 1'b1 : 1'b0);

assign h_4_fu_262_p2 = (h_reg_110 + 5'd1);

assign input_r_address0 = tmp_85_cast_fu_474_p1;

assign m_4_fu_333_p2 = (m_reg_145 + 2'd1);

assign m_cast8_cast_fu_323_p1 = m_reg_145;

assign n_4_fu_426_p2 = (n_reg_168 + 2'd1);

assign n_cast6_fu_416_p1 = n_reg_168;

assign output_0_address0 = tmp_77_cast_fu_490_p1;

assign output_0_d0 = result_reg_645;

assign p_not_fu_441_p2 = ((n_cast6_fu_416_p1 == tmp_47_reg_554) ? 1'b1 : 1'b0);

assign p_shl_cast_fu_230_p1 = tmp_49_fu_222_p3;

assign sel_tmp1_fu_478_p2 = (sel_tmp_reg_577 | p_not_reg_600);

assign sel_tmp_fu_402_p2 = ((tmp_cast_31_reg_530 == tmp_50_cast_fu_398_p1) ? 1'b1 : 1'b0);

assign tmp3_cast_fu_366_p1 = $signed(tmp3_fu_360_p2);

assign tmp3_fu_360_p2 = ($signed(2'd3) + $signed(m_reg_145));

assign tmp4_cast_fu_452_p1 = $signed(tmp4_fu_446_p2);

assign tmp4_fu_446_p2 = ($signed(n_reg_168) + $signed(2'd3));

assign tmp_40_cast_fu_278_p1 = h_reg_110;

assign tmp_42_cast_fu_407_p1 = w_reg_121;

assign tmp_43_cast_fu_339_p1 = m_reg_145;

assign tmp_44_fu_370_p2 = ($signed(tmp3_cast_fu_366_p1) + $signed(tmp_cast_31_reg_530));

assign tmp_45_cast_fu_375_p1 = $signed(tmp_44_fu_370_p2);

assign tmp_46_cast_fu_432_p1 = n_reg_168;

assign tmp_47_fu_317_p2 = (6'd0 - tmp_48_cast_fu_313_p1);

assign tmp_48_cast_fu_313_p1 = tmp_57_fu_307_p2;

assign tmp_48_fu_456_p2 = ($signed(tmp_48_cast_reg_549) + $signed(tmp4_cast_fu_452_p1));

assign tmp_49_cast_fu_461_p1 = $signed(tmp_48_fu_456_p2);

assign tmp_49_fu_222_p3 = {{co_reg_99}, {2'd0}};

assign tmp_50_cast_fu_398_p1 = $signed(tmp_50_fu_392_p2);

assign tmp_50_fu_392_p2 = (3'd0 - m_cast8_cast_fu_323_p1);

assign tmp_51_fu_482_p3 = ((sel_tmp1_fu_478_p2[0:0] === 1'b1) ? 32'd0 : input_r_q0);

assign tmp_53_fu_234_p2 = (p_shl_cast_fu_230_p1 - tmp_cast_fu_206_p1);

assign tmp_54_fu_244_p3 = {{co_reg_99}, {4'd0}};

assign tmp_55_fu_268_p2 = h_reg_110 << 5'd1;

assign tmp_56_fu_282_p2 = (tmp_71_cast_reg_512 + tmp_40_cast_fu_278_p1);

assign tmp_57_fu_307_p2 = w_reg_121 << 5'd1;

assign tmp_58_fu_411_p2 = (tmp_75_cast_reg_536 + tmp_42_cast_fu_407_p1);

assign tmp_59_fu_343_p2 = ($signed(tmp_43_cast_fu_339_p1) + $signed(tmp_69_cast_reg_507));

assign tmp_60_fu_348_p2 = tmp_59_fu_343_p2 << 9'd2;

assign tmp_61_fu_354_p2 = (tmp_60_fu_348_p2 - tmp_59_fu_343_p2);

assign tmp_62_fu_379_p2 = ($signed(tmp_45_cast_fu_375_p1) + $signed(tmp_67_cast_reg_502));

assign tmp_63_fu_436_p2 = (tmp_61_reg_567 + tmp_46_cast_fu_432_p1);

assign tmp_64_fu_465_p2 = ($signed(tmp_83_cast_reg_572) + $signed(tmp_49_cast_fu_461_p1));

assign tmp_67_cast_fu_218_p1 = tmp_s_fu_210_p3;

assign tmp_69_cast_fu_240_p1 = $signed(tmp_53_fu_234_p2);

assign tmp_71_cast_fu_252_p1 = tmp_54_fu_244_p3;

assign tmp_75_cast_fu_287_p3 = {{tmp_56_fu_282_p2}, {4'd0}};

assign tmp_77_cast_fu_490_p1 = tmp_58_reg_582;

assign tmp_83_cast_fu_384_p3 = {{tmp_62_fu_379_p2}, {5'd0}};

assign tmp_84_cast_fu_470_p1 = tmp_63_reg_595;

assign tmp_85_cast_fu_474_p1 = tmp_64_reg_605;

assign tmp_cast_31_fu_274_p1 = tmp_55_fu_268_p2;

assign tmp_cast_fu_206_p1 = co_reg_99;

assign tmp_fu_201_p1 = co_reg_99;

assign tmp_s_fu_210_p3 = {{co_reg_99}, {5'd0}};

assign w_4_fu_301_p2 = (w_reg_121 + 5'd1);

assign weight_address0 = tmp_84_cast_fu_470_p1;

always @ (posedge ap_clk) begin
    tmp_67_cast_reg_502[4:0] <= 5'b00000;
    tmp_67_cast_reg_502[10] <= 1'b0;
    tmp_71_cast_reg_512[3:0] <= 4'b0000;
    tmp_71_cast_reg_512[9] <= 1'b0;
    tmp_cast_31_reg_530[0] <= 1'b0;
    tmp_cast_31_reg_530[5] <= 1'b0;
    tmp_75_cast_reg_536[3:0] <= 4'b0000;
    tmp_48_cast_reg_549[0] <= 1'b0;
    tmp_48_cast_reg_549[5] <= 1'b0;
    tmp_47_reg_554[0] <= 1'b0;
    tmp_83_cast_reg_572[4:0] <= 5'b00000;
end

endmodule //subconv_3x3_32_strid
