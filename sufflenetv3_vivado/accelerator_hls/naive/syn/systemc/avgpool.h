// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _avgpool_HH_
#define _avgpool_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "ShuffleNetV2_faddbkb.h"
#include "ShuffleNetV2_fmulcud.h"

namespace ap_rtl {

struct avgpool : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<9> > output_r_address0;
    sc_out< sc_logic > output_r_ce0;
    sc_out< sc_logic > output_r_we0;
    sc_out< sc_lv<32> > output_r_d0;
    sc_out< sc_lv<13> > conv_last_output_address0;
    sc_out< sc_logic > conv_last_output_ce0;
    sc_in< sc_lv<32> > conv_last_output_q0;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<32> > ap_var_for_const1;


    // Module declarations
    avgpool(sc_module_name name);
    SC_HAS_PROCESS(avgpool);

    ~avgpool();

    sc_trace_file* mVcdFile;

    ShuffleNetV2_faddbkb<1,5,32,32,32>* ShuffleNetV2_faddbkb_x_U114;
    ShuffleNetV2_fmulcud<1,4,32,32,32>* ShuffleNetV2_fmulcud_x_U115;
    sc_signal< sc_lv<14> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<10> > co_24_fu_132_p2;
    sc_signal< sc_lv<10> > co_24_reg_212;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > tmp_fu_138_p1;
    sc_signal< sc_lv<64> > tmp_reg_217;
    sc_signal< sc_lv<1> > exitcond2_fu_126_p2;
    sc_signal< sc_lv<13> > tmp_364_cast_fu_150_p1;
    sc_signal< sc_lv<13> > tmp_364_cast_reg_222;
    sc_signal< sc_lv<3> > h_24_fu_160_p2;
    sc_signal< sc_lv<3> > h_24_reg_230;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<15> > tmp_367_cast_fu_175_p3;
    sc_signal< sc_lv<15> > tmp_367_cast_reg_235;
    sc_signal< sc_lv<1> > exitcond1_fu_154_p2;
    sc_signal< sc_lv<3> > w_24_fu_189_p2;
    sc_signal< sc_lv<3> > w_24_reg_243;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > exitcond_fu_183_p2;
    sc_signal< sc_lv<32> > conv_last_output_loa_reg_253;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > grp_fu_115_p2;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<32> > grp_fu_120_p2;
    sc_signal< sc_lv<32> > tmp_s_reg_263;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_lv<10> > co_reg_58;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_lv<32> > sum_reg_69;
    sc_signal< sc_lv<3> > h_reg_81;
    sc_signal< sc_lv<32> > sum_1_reg_92;
    sc_signal< sc_lv<3> > w_reg_104;
    sc_signal< sc_lv<64> > tmp_368_cast_fu_204_p1;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<12> > tmp_207_fu_142_p3;
    sc_signal< sc_lv<13> > tmp_123_cast_fu_166_p1;
    sc_signal< sc_lv<13> > tmp_208_fu_170_p2;
    sc_signal< sc_lv<15> > tmp_124_cast_fu_195_p1;
    sc_signal< sc_lv<15> > tmp_209_fu_199_p2;
    sc_signal< sc_lv<14> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<14> ap_ST_fsm_state1;
    static const sc_lv<14> ap_ST_fsm_state2;
    static const sc_lv<14> ap_ST_fsm_state3;
    static const sc_lv<14> ap_ST_fsm_state4;
    static const sc_lv<14> ap_ST_fsm_state5;
    static const sc_lv<14> ap_ST_fsm_state6;
    static const sc_lv<14> ap_ST_fsm_state7;
    static const sc_lv<14> ap_ST_fsm_state8;
    static const sc_lv<14> ap_ST_fsm_state9;
    static const sc_lv<14> ap_ST_fsm_state10;
    static const sc_lv<14> ap_ST_fsm_state11;
    static const sc_lv<14> ap_ST_fsm_state12;
    static const sc_lv<14> ap_ST_fsm_state13;
    static const sc_lv<14> ap_ST_fsm_state14;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_3D800000;
    static const sc_lv<10> ap_const_lv10_200;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_co_24_fu_132_p2();
    void thread_conv_last_output_address0();
    void thread_conv_last_output_ce0();
    void thread_exitcond1_fu_154_p2();
    void thread_exitcond2_fu_126_p2();
    void thread_exitcond_fu_183_p2();
    void thread_h_24_fu_160_p2();
    void thread_output_r_address0();
    void thread_output_r_ce0();
    void thread_output_r_d0();
    void thread_output_r_we0();
    void thread_tmp_123_cast_fu_166_p1();
    void thread_tmp_124_cast_fu_195_p1();
    void thread_tmp_207_fu_142_p3();
    void thread_tmp_208_fu_170_p2();
    void thread_tmp_209_fu_199_p2();
    void thread_tmp_364_cast_fu_150_p1();
    void thread_tmp_367_cast_fu_175_p3();
    void thread_tmp_368_cast_fu_204_p1();
    void thread_tmp_fu_138_p1();
    void thread_w_24_fu_189_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
