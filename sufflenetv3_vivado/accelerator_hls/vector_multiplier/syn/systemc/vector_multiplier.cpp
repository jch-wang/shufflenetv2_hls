// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "vector_multiplier.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic vector_multiplier::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic vector_multiplier::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<14> vector_multiplier::ap_ST_fsm_state1 = "1";
const sc_lv<14> vector_multiplier::ap_ST_fsm_state2 = "10";
const sc_lv<14> vector_multiplier::ap_ST_fsm_state3 = "100";
const sc_lv<14> vector_multiplier::ap_ST_fsm_state4 = "1000";
const sc_lv<14> vector_multiplier::ap_ST_fsm_state5 = "10000";
const sc_lv<14> vector_multiplier::ap_ST_fsm_state6 = "100000";
const sc_lv<14> vector_multiplier::ap_ST_fsm_state7 = "1000000";
const sc_lv<14> vector_multiplier::ap_ST_fsm_state8 = "10000000";
const sc_lv<14> vector_multiplier::ap_ST_fsm_pp0_stage0 = "100000000";
const sc_lv<14> vector_multiplier::ap_ST_fsm_state14 = "1000000000";
const sc_lv<14> vector_multiplier::ap_ST_fsm_state15 = "10000000000";
const sc_lv<14> vector_multiplier::ap_ST_fsm_state16 = "100000000000";
const sc_lv<14> vector_multiplier::ap_ST_fsm_state17 = "1000000000000";
const sc_lv<14> vector_multiplier::ap_ST_fsm_state18 = "10000000000000";
const sc_lv<32> vector_multiplier::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool vector_multiplier::ap_const_boolean_1 = true;
const sc_lv<32> vector_multiplier::ap_const_lv32_1 = "1";
const sc_lv<32> vector_multiplier::ap_const_lv32_8 = "1000";
const bool vector_multiplier::ap_const_boolean_0 = false;
const sc_lv<1> vector_multiplier::ap_const_lv1_0 = "0";
const sc_lv<32> vector_multiplier::ap_const_lv32_7 = "111";
const sc_lv<32> vector_multiplier::ap_const_lv32_D = "1101";
const int vector_multiplier::C_S_AXI_DATA_WIDTH = "100000";
const int vector_multiplier::C_M_AXI_DATA_A_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int vector_multiplier::C_M_AXI_DATA_A_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int vector_multiplier::C_M_AXI_DATA_A_CACHE_VALUE = "11";
const int vector_multiplier::C_M_AXI_DATA_WIDTH = "100000";
const int vector_multiplier::C_M_AXI_DATA_B_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int vector_multiplier::C_M_AXI_DATA_B_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int vector_multiplier::C_M_AXI_DATA_B_CACHE_VALUE = "11";
const int vector_multiplier::C_M_AXI_DATA_C_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int vector_multiplier::C_M_AXI_DATA_C_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int vector_multiplier::C_M_AXI_DATA_C_CACHE_VALUE = "11";
const sc_lv<1> vector_multiplier::ap_const_lv1_1 = "1";
const sc_lv<7> vector_multiplier::ap_const_lv7_0 = "0000000";
const sc_lv<32> vector_multiplier::ap_const_lv32_40 = "1000000";
const sc_lv<3> vector_multiplier::ap_const_lv3_0 = "000";
const sc_lv<2> vector_multiplier::ap_const_lv2_0 = "00";
const sc_lv<4> vector_multiplier::ap_const_lv4_0 = "0000";
const sc_lv<4> vector_multiplier::ap_const_lv4_F = "1111";
const sc_lv<32> vector_multiplier::ap_const_lv32_2 = "10";
const sc_lv<32> vector_multiplier::ap_const_lv32_1F = "11111";
const sc_lv<7> vector_multiplier::ap_const_lv7_40 = "1000000";
const sc_lv<7> vector_multiplier::ap_const_lv7_1 = "1";
const sc_lv<32> vector_multiplier::ap_const_lv32_C = "1100";

vector_multiplier::vector_multiplier(sc_module_name name) : sc_module(name), mVcdFile(0) {
    vector_multiplier_CTL_s_axi_U = new vector_multiplier_CTL_s_axi<C_S_AXI_CTL_ADDR_WIDTH,C_S_AXI_CTL_DATA_WIDTH>("vector_multiplier_CTL_s_axi_U");
    vector_multiplier_CTL_s_axi_U->AWVALID(s_axi_CTL_AWVALID);
    vector_multiplier_CTL_s_axi_U->AWREADY(s_axi_CTL_AWREADY);
    vector_multiplier_CTL_s_axi_U->AWADDR(s_axi_CTL_AWADDR);
    vector_multiplier_CTL_s_axi_U->WVALID(s_axi_CTL_WVALID);
    vector_multiplier_CTL_s_axi_U->WREADY(s_axi_CTL_WREADY);
    vector_multiplier_CTL_s_axi_U->WDATA(s_axi_CTL_WDATA);
    vector_multiplier_CTL_s_axi_U->WSTRB(s_axi_CTL_WSTRB);
    vector_multiplier_CTL_s_axi_U->ARVALID(s_axi_CTL_ARVALID);
    vector_multiplier_CTL_s_axi_U->ARREADY(s_axi_CTL_ARREADY);
    vector_multiplier_CTL_s_axi_U->ARADDR(s_axi_CTL_ARADDR);
    vector_multiplier_CTL_s_axi_U->RVALID(s_axi_CTL_RVALID);
    vector_multiplier_CTL_s_axi_U->RREADY(s_axi_CTL_RREADY);
    vector_multiplier_CTL_s_axi_U->RDATA(s_axi_CTL_RDATA);
    vector_multiplier_CTL_s_axi_U->RRESP(s_axi_CTL_RRESP);
    vector_multiplier_CTL_s_axi_U->BVALID(s_axi_CTL_BVALID);
    vector_multiplier_CTL_s_axi_U->BREADY(s_axi_CTL_BREADY);
    vector_multiplier_CTL_s_axi_U->BRESP(s_axi_CTL_BRESP);
    vector_multiplier_CTL_s_axi_U->ACLK(ap_clk);
    vector_multiplier_CTL_s_axi_U->ARESET(ap_rst_n_inv);
    vector_multiplier_CTL_s_axi_U->ACLK_EN(ap_var_for_const0);
    vector_multiplier_CTL_s_axi_U->ap_start(ap_start);
    vector_multiplier_CTL_s_axi_U->interrupt(interrupt);
    vector_multiplier_CTL_s_axi_U->ap_ready(ap_ready);
    vector_multiplier_CTL_s_axi_U->ap_done(ap_done);
    vector_multiplier_CTL_s_axi_U->ap_idle(ap_idle);
    vector_multiplier_CTL_s_axi_U->ap_return(ap_return);
    vector_multiplier_CTL_s_axi_U->a(a);
    vector_multiplier_CTL_s_axi_U->b(b);
    vector_multiplier_CTL_s_axi_U->c(c);
    vector_multiplier_DATA_A_m_axi_U = new vector_multiplier_DATA_A_m_axi<32,32,5,16,16,16,16,C_M_AXI_DATA_A_ID_WIDTH,C_M_AXI_DATA_A_ADDR_WIDTH,C_M_AXI_DATA_A_DATA_WIDTH,C_M_AXI_DATA_A_AWUSER_WIDTH,C_M_AXI_DATA_A_ARUSER_WIDTH,C_M_AXI_DATA_A_WUSER_WIDTH,C_M_AXI_DATA_A_RUSER_WIDTH,C_M_AXI_DATA_A_BUSER_WIDTH,C_M_AXI_DATA_A_USER_VALUE,C_M_AXI_DATA_A_PROT_VALUE,C_M_AXI_DATA_A_CACHE_VALUE>("vector_multiplier_DATA_A_m_axi_U");
    vector_multiplier_DATA_A_m_axi_U->AWVALID(m_axi_DATA_A_AWVALID);
    vector_multiplier_DATA_A_m_axi_U->AWREADY(m_axi_DATA_A_AWREADY);
    vector_multiplier_DATA_A_m_axi_U->AWADDR(m_axi_DATA_A_AWADDR);
    vector_multiplier_DATA_A_m_axi_U->AWID(m_axi_DATA_A_AWID);
    vector_multiplier_DATA_A_m_axi_U->AWLEN(m_axi_DATA_A_AWLEN);
    vector_multiplier_DATA_A_m_axi_U->AWSIZE(m_axi_DATA_A_AWSIZE);
    vector_multiplier_DATA_A_m_axi_U->AWBURST(m_axi_DATA_A_AWBURST);
    vector_multiplier_DATA_A_m_axi_U->AWLOCK(m_axi_DATA_A_AWLOCK);
    vector_multiplier_DATA_A_m_axi_U->AWCACHE(m_axi_DATA_A_AWCACHE);
    vector_multiplier_DATA_A_m_axi_U->AWPROT(m_axi_DATA_A_AWPROT);
    vector_multiplier_DATA_A_m_axi_U->AWQOS(m_axi_DATA_A_AWQOS);
    vector_multiplier_DATA_A_m_axi_U->AWREGION(m_axi_DATA_A_AWREGION);
    vector_multiplier_DATA_A_m_axi_U->AWUSER(m_axi_DATA_A_AWUSER);
    vector_multiplier_DATA_A_m_axi_U->WVALID(m_axi_DATA_A_WVALID);
    vector_multiplier_DATA_A_m_axi_U->WREADY(m_axi_DATA_A_WREADY);
    vector_multiplier_DATA_A_m_axi_U->WDATA(m_axi_DATA_A_WDATA);
    vector_multiplier_DATA_A_m_axi_U->WSTRB(m_axi_DATA_A_WSTRB);
    vector_multiplier_DATA_A_m_axi_U->WLAST(m_axi_DATA_A_WLAST);
    vector_multiplier_DATA_A_m_axi_U->WID(m_axi_DATA_A_WID);
    vector_multiplier_DATA_A_m_axi_U->WUSER(m_axi_DATA_A_WUSER);
    vector_multiplier_DATA_A_m_axi_U->ARVALID(m_axi_DATA_A_ARVALID);
    vector_multiplier_DATA_A_m_axi_U->ARREADY(m_axi_DATA_A_ARREADY);
    vector_multiplier_DATA_A_m_axi_U->ARADDR(m_axi_DATA_A_ARADDR);
    vector_multiplier_DATA_A_m_axi_U->ARID(m_axi_DATA_A_ARID);
    vector_multiplier_DATA_A_m_axi_U->ARLEN(m_axi_DATA_A_ARLEN);
    vector_multiplier_DATA_A_m_axi_U->ARSIZE(m_axi_DATA_A_ARSIZE);
    vector_multiplier_DATA_A_m_axi_U->ARBURST(m_axi_DATA_A_ARBURST);
    vector_multiplier_DATA_A_m_axi_U->ARLOCK(m_axi_DATA_A_ARLOCK);
    vector_multiplier_DATA_A_m_axi_U->ARCACHE(m_axi_DATA_A_ARCACHE);
    vector_multiplier_DATA_A_m_axi_U->ARPROT(m_axi_DATA_A_ARPROT);
    vector_multiplier_DATA_A_m_axi_U->ARQOS(m_axi_DATA_A_ARQOS);
    vector_multiplier_DATA_A_m_axi_U->ARREGION(m_axi_DATA_A_ARREGION);
    vector_multiplier_DATA_A_m_axi_U->ARUSER(m_axi_DATA_A_ARUSER);
    vector_multiplier_DATA_A_m_axi_U->RVALID(m_axi_DATA_A_RVALID);
    vector_multiplier_DATA_A_m_axi_U->RREADY(m_axi_DATA_A_RREADY);
    vector_multiplier_DATA_A_m_axi_U->RDATA(m_axi_DATA_A_RDATA);
    vector_multiplier_DATA_A_m_axi_U->RLAST(m_axi_DATA_A_RLAST);
    vector_multiplier_DATA_A_m_axi_U->RID(m_axi_DATA_A_RID);
    vector_multiplier_DATA_A_m_axi_U->RUSER(m_axi_DATA_A_RUSER);
    vector_multiplier_DATA_A_m_axi_U->RRESP(m_axi_DATA_A_RRESP);
    vector_multiplier_DATA_A_m_axi_U->BVALID(m_axi_DATA_A_BVALID);
    vector_multiplier_DATA_A_m_axi_U->BREADY(m_axi_DATA_A_BREADY);
    vector_multiplier_DATA_A_m_axi_U->BRESP(m_axi_DATA_A_BRESP);
    vector_multiplier_DATA_A_m_axi_U->BID(m_axi_DATA_A_BID);
    vector_multiplier_DATA_A_m_axi_U->BUSER(m_axi_DATA_A_BUSER);
    vector_multiplier_DATA_A_m_axi_U->ACLK(ap_clk);
    vector_multiplier_DATA_A_m_axi_U->ARESET(ap_rst_n_inv);
    vector_multiplier_DATA_A_m_axi_U->ACLK_EN(ap_var_for_const0);
    vector_multiplier_DATA_A_m_axi_U->I_ARVALID(DATA_A_ARVALID);
    vector_multiplier_DATA_A_m_axi_U->I_ARREADY(DATA_A_ARREADY);
    vector_multiplier_DATA_A_m_axi_U->I_ARADDR(tmp_4_fu_200_p1);
    vector_multiplier_DATA_A_m_axi_U->I_ARID(ap_var_for_const1);
    vector_multiplier_DATA_A_m_axi_U->I_ARLEN(ap_var_for_const2);
    vector_multiplier_DATA_A_m_axi_U->I_ARSIZE(ap_var_for_const3);
    vector_multiplier_DATA_A_m_axi_U->I_ARLOCK(ap_var_for_const4);
    vector_multiplier_DATA_A_m_axi_U->I_ARCACHE(ap_var_for_const5);
    vector_multiplier_DATA_A_m_axi_U->I_ARQOS(ap_var_for_const5);
    vector_multiplier_DATA_A_m_axi_U->I_ARPROT(ap_var_for_const3);
    vector_multiplier_DATA_A_m_axi_U->I_ARUSER(ap_var_for_const1);
    vector_multiplier_DATA_A_m_axi_U->I_ARBURST(ap_var_for_const4);
    vector_multiplier_DATA_A_m_axi_U->I_ARREGION(ap_var_for_const5);
    vector_multiplier_DATA_A_m_axi_U->I_RVALID(DATA_A_RVALID);
    vector_multiplier_DATA_A_m_axi_U->I_RREADY(DATA_A_RREADY);
    vector_multiplier_DATA_A_m_axi_U->I_RDATA(DATA_A_RDATA);
    vector_multiplier_DATA_A_m_axi_U->I_RID(DATA_A_RID);
    vector_multiplier_DATA_A_m_axi_U->I_RUSER(DATA_A_RUSER);
    vector_multiplier_DATA_A_m_axi_U->I_RRESP(DATA_A_RRESP);
    vector_multiplier_DATA_A_m_axi_U->I_RLAST(DATA_A_RLAST);
    vector_multiplier_DATA_A_m_axi_U->I_AWVALID(ap_var_for_const6);
    vector_multiplier_DATA_A_m_axi_U->I_AWREADY(DATA_A_AWREADY);
    vector_multiplier_DATA_A_m_axi_U->I_AWADDR(ap_var_for_const7);
    vector_multiplier_DATA_A_m_axi_U->I_AWID(ap_var_for_const1);
    vector_multiplier_DATA_A_m_axi_U->I_AWLEN(ap_var_for_const7);
    vector_multiplier_DATA_A_m_axi_U->I_AWSIZE(ap_var_for_const3);
    vector_multiplier_DATA_A_m_axi_U->I_AWLOCK(ap_var_for_const4);
    vector_multiplier_DATA_A_m_axi_U->I_AWCACHE(ap_var_for_const5);
    vector_multiplier_DATA_A_m_axi_U->I_AWQOS(ap_var_for_const5);
    vector_multiplier_DATA_A_m_axi_U->I_AWPROT(ap_var_for_const3);
    vector_multiplier_DATA_A_m_axi_U->I_AWUSER(ap_var_for_const1);
    vector_multiplier_DATA_A_m_axi_U->I_AWBURST(ap_var_for_const4);
    vector_multiplier_DATA_A_m_axi_U->I_AWREGION(ap_var_for_const5);
    vector_multiplier_DATA_A_m_axi_U->I_WVALID(ap_var_for_const6);
    vector_multiplier_DATA_A_m_axi_U->I_WREADY(DATA_A_WREADY);
    vector_multiplier_DATA_A_m_axi_U->I_WDATA(ap_var_for_const7);
    vector_multiplier_DATA_A_m_axi_U->I_WID(ap_var_for_const1);
    vector_multiplier_DATA_A_m_axi_U->I_WUSER(ap_var_for_const1);
    vector_multiplier_DATA_A_m_axi_U->I_WLAST(ap_var_for_const6);
    vector_multiplier_DATA_A_m_axi_U->I_WSTRB(ap_var_for_const5);
    vector_multiplier_DATA_A_m_axi_U->I_BVALID(DATA_A_BVALID);
    vector_multiplier_DATA_A_m_axi_U->I_BREADY(ap_var_for_const6);
    vector_multiplier_DATA_A_m_axi_U->I_BRESP(DATA_A_BRESP);
    vector_multiplier_DATA_A_m_axi_U->I_BID(DATA_A_BID);
    vector_multiplier_DATA_A_m_axi_U->I_BUSER(DATA_A_BUSER);
    vector_multiplier_DATA_B_m_axi_U = new vector_multiplier_DATA_B_m_axi<32,32,5,16,16,16,16,C_M_AXI_DATA_B_ID_WIDTH,C_M_AXI_DATA_B_ADDR_WIDTH,C_M_AXI_DATA_B_DATA_WIDTH,C_M_AXI_DATA_B_AWUSER_WIDTH,C_M_AXI_DATA_B_ARUSER_WIDTH,C_M_AXI_DATA_B_WUSER_WIDTH,C_M_AXI_DATA_B_RUSER_WIDTH,C_M_AXI_DATA_B_BUSER_WIDTH,C_M_AXI_DATA_B_USER_VALUE,C_M_AXI_DATA_B_PROT_VALUE,C_M_AXI_DATA_B_CACHE_VALUE>("vector_multiplier_DATA_B_m_axi_U");
    vector_multiplier_DATA_B_m_axi_U->AWVALID(m_axi_DATA_B_AWVALID);
    vector_multiplier_DATA_B_m_axi_U->AWREADY(m_axi_DATA_B_AWREADY);
    vector_multiplier_DATA_B_m_axi_U->AWADDR(m_axi_DATA_B_AWADDR);
    vector_multiplier_DATA_B_m_axi_U->AWID(m_axi_DATA_B_AWID);
    vector_multiplier_DATA_B_m_axi_U->AWLEN(m_axi_DATA_B_AWLEN);
    vector_multiplier_DATA_B_m_axi_U->AWSIZE(m_axi_DATA_B_AWSIZE);
    vector_multiplier_DATA_B_m_axi_U->AWBURST(m_axi_DATA_B_AWBURST);
    vector_multiplier_DATA_B_m_axi_U->AWLOCK(m_axi_DATA_B_AWLOCK);
    vector_multiplier_DATA_B_m_axi_U->AWCACHE(m_axi_DATA_B_AWCACHE);
    vector_multiplier_DATA_B_m_axi_U->AWPROT(m_axi_DATA_B_AWPROT);
    vector_multiplier_DATA_B_m_axi_U->AWQOS(m_axi_DATA_B_AWQOS);
    vector_multiplier_DATA_B_m_axi_U->AWREGION(m_axi_DATA_B_AWREGION);
    vector_multiplier_DATA_B_m_axi_U->AWUSER(m_axi_DATA_B_AWUSER);
    vector_multiplier_DATA_B_m_axi_U->WVALID(m_axi_DATA_B_WVALID);
    vector_multiplier_DATA_B_m_axi_U->WREADY(m_axi_DATA_B_WREADY);
    vector_multiplier_DATA_B_m_axi_U->WDATA(m_axi_DATA_B_WDATA);
    vector_multiplier_DATA_B_m_axi_U->WSTRB(m_axi_DATA_B_WSTRB);
    vector_multiplier_DATA_B_m_axi_U->WLAST(m_axi_DATA_B_WLAST);
    vector_multiplier_DATA_B_m_axi_U->WID(m_axi_DATA_B_WID);
    vector_multiplier_DATA_B_m_axi_U->WUSER(m_axi_DATA_B_WUSER);
    vector_multiplier_DATA_B_m_axi_U->ARVALID(m_axi_DATA_B_ARVALID);
    vector_multiplier_DATA_B_m_axi_U->ARREADY(m_axi_DATA_B_ARREADY);
    vector_multiplier_DATA_B_m_axi_U->ARADDR(m_axi_DATA_B_ARADDR);
    vector_multiplier_DATA_B_m_axi_U->ARID(m_axi_DATA_B_ARID);
    vector_multiplier_DATA_B_m_axi_U->ARLEN(m_axi_DATA_B_ARLEN);
    vector_multiplier_DATA_B_m_axi_U->ARSIZE(m_axi_DATA_B_ARSIZE);
    vector_multiplier_DATA_B_m_axi_U->ARBURST(m_axi_DATA_B_ARBURST);
    vector_multiplier_DATA_B_m_axi_U->ARLOCK(m_axi_DATA_B_ARLOCK);
    vector_multiplier_DATA_B_m_axi_U->ARCACHE(m_axi_DATA_B_ARCACHE);
    vector_multiplier_DATA_B_m_axi_U->ARPROT(m_axi_DATA_B_ARPROT);
    vector_multiplier_DATA_B_m_axi_U->ARQOS(m_axi_DATA_B_ARQOS);
    vector_multiplier_DATA_B_m_axi_U->ARREGION(m_axi_DATA_B_ARREGION);
    vector_multiplier_DATA_B_m_axi_U->ARUSER(m_axi_DATA_B_ARUSER);
    vector_multiplier_DATA_B_m_axi_U->RVALID(m_axi_DATA_B_RVALID);
    vector_multiplier_DATA_B_m_axi_U->RREADY(m_axi_DATA_B_RREADY);
    vector_multiplier_DATA_B_m_axi_U->RDATA(m_axi_DATA_B_RDATA);
    vector_multiplier_DATA_B_m_axi_U->RLAST(m_axi_DATA_B_RLAST);
    vector_multiplier_DATA_B_m_axi_U->RID(m_axi_DATA_B_RID);
    vector_multiplier_DATA_B_m_axi_U->RUSER(m_axi_DATA_B_RUSER);
    vector_multiplier_DATA_B_m_axi_U->RRESP(m_axi_DATA_B_RRESP);
    vector_multiplier_DATA_B_m_axi_U->BVALID(m_axi_DATA_B_BVALID);
    vector_multiplier_DATA_B_m_axi_U->BREADY(m_axi_DATA_B_BREADY);
    vector_multiplier_DATA_B_m_axi_U->BRESP(m_axi_DATA_B_BRESP);
    vector_multiplier_DATA_B_m_axi_U->BID(m_axi_DATA_B_BID);
    vector_multiplier_DATA_B_m_axi_U->BUSER(m_axi_DATA_B_BUSER);
    vector_multiplier_DATA_B_m_axi_U->ACLK(ap_clk);
    vector_multiplier_DATA_B_m_axi_U->ARESET(ap_rst_n_inv);
    vector_multiplier_DATA_B_m_axi_U->ACLK_EN(ap_var_for_const0);
    vector_multiplier_DATA_B_m_axi_U->I_ARVALID(DATA_B_ARVALID);
    vector_multiplier_DATA_B_m_axi_U->I_ARREADY(DATA_B_ARREADY);
    vector_multiplier_DATA_B_m_axi_U->I_ARADDR(tmp_3_fu_190_p1);
    vector_multiplier_DATA_B_m_axi_U->I_ARID(ap_var_for_const1);
    vector_multiplier_DATA_B_m_axi_U->I_ARLEN(ap_var_for_const2);
    vector_multiplier_DATA_B_m_axi_U->I_ARSIZE(ap_var_for_const3);
    vector_multiplier_DATA_B_m_axi_U->I_ARLOCK(ap_var_for_const4);
    vector_multiplier_DATA_B_m_axi_U->I_ARCACHE(ap_var_for_const5);
    vector_multiplier_DATA_B_m_axi_U->I_ARQOS(ap_var_for_const5);
    vector_multiplier_DATA_B_m_axi_U->I_ARPROT(ap_var_for_const3);
    vector_multiplier_DATA_B_m_axi_U->I_ARUSER(ap_var_for_const1);
    vector_multiplier_DATA_B_m_axi_U->I_ARBURST(ap_var_for_const4);
    vector_multiplier_DATA_B_m_axi_U->I_ARREGION(ap_var_for_const5);
    vector_multiplier_DATA_B_m_axi_U->I_RVALID(DATA_B_RVALID);
    vector_multiplier_DATA_B_m_axi_U->I_RREADY(DATA_B_RREADY);
    vector_multiplier_DATA_B_m_axi_U->I_RDATA(DATA_B_RDATA);
    vector_multiplier_DATA_B_m_axi_U->I_RID(DATA_B_RID);
    vector_multiplier_DATA_B_m_axi_U->I_RUSER(DATA_B_RUSER);
    vector_multiplier_DATA_B_m_axi_U->I_RRESP(DATA_B_RRESP);
    vector_multiplier_DATA_B_m_axi_U->I_RLAST(DATA_B_RLAST);
    vector_multiplier_DATA_B_m_axi_U->I_AWVALID(ap_var_for_const6);
    vector_multiplier_DATA_B_m_axi_U->I_AWREADY(DATA_B_AWREADY);
    vector_multiplier_DATA_B_m_axi_U->I_AWADDR(ap_var_for_const7);
    vector_multiplier_DATA_B_m_axi_U->I_AWID(ap_var_for_const1);
    vector_multiplier_DATA_B_m_axi_U->I_AWLEN(ap_var_for_const7);
    vector_multiplier_DATA_B_m_axi_U->I_AWSIZE(ap_var_for_const3);
    vector_multiplier_DATA_B_m_axi_U->I_AWLOCK(ap_var_for_const4);
    vector_multiplier_DATA_B_m_axi_U->I_AWCACHE(ap_var_for_const5);
    vector_multiplier_DATA_B_m_axi_U->I_AWQOS(ap_var_for_const5);
    vector_multiplier_DATA_B_m_axi_U->I_AWPROT(ap_var_for_const3);
    vector_multiplier_DATA_B_m_axi_U->I_AWUSER(ap_var_for_const1);
    vector_multiplier_DATA_B_m_axi_U->I_AWBURST(ap_var_for_const4);
    vector_multiplier_DATA_B_m_axi_U->I_AWREGION(ap_var_for_const5);
    vector_multiplier_DATA_B_m_axi_U->I_WVALID(ap_var_for_const6);
    vector_multiplier_DATA_B_m_axi_U->I_WREADY(DATA_B_WREADY);
    vector_multiplier_DATA_B_m_axi_U->I_WDATA(ap_var_for_const7);
    vector_multiplier_DATA_B_m_axi_U->I_WID(ap_var_for_const1);
    vector_multiplier_DATA_B_m_axi_U->I_WUSER(ap_var_for_const1);
    vector_multiplier_DATA_B_m_axi_U->I_WLAST(ap_var_for_const6);
    vector_multiplier_DATA_B_m_axi_U->I_WSTRB(ap_var_for_const5);
    vector_multiplier_DATA_B_m_axi_U->I_BVALID(DATA_B_BVALID);
    vector_multiplier_DATA_B_m_axi_U->I_BREADY(ap_var_for_const6);
    vector_multiplier_DATA_B_m_axi_U->I_BRESP(DATA_B_BRESP);
    vector_multiplier_DATA_B_m_axi_U->I_BID(DATA_B_BID);
    vector_multiplier_DATA_B_m_axi_U->I_BUSER(DATA_B_BUSER);
    vector_multiplier_DATA_C_m_axi_U = new vector_multiplier_DATA_C_m_axi<32,32,5,16,16,16,16,C_M_AXI_DATA_C_ID_WIDTH,C_M_AXI_DATA_C_ADDR_WIDTH,C_M_AXI_DATA_C_DATA_WIDTH,C_M_AXI_DATA_C_AWUSER_WIDTH,C_M_AXI_DATA_C_ARUSER_WIDTH,C_M_AXI_DATA_C_WUSER_WIDTH,C_M_AXI_DATA_C_RUSER_WIDTH,C_M_AXI_DATA_C_BUSER_WIDTH,C_M_AXI_DATA_C_USER_VALUE,C_M_AXI_DATA_C_PROT_VALUE,C_M_AXI_DATA_C_CACHE_VALUE>("vector_multiplier_DATA_C_m_axi_U");
    vector_multiplier_DATA_C_m_axi_U->AWVALID(m_axi_DATA_C_AWVALID);
    vector_multiplier_DATA_C_m_axi_U->AWREADY(m_axi_DATA_C_AWREADY);
    vector_multiplier_DATA_C_m_axi_U->AWADDR(m_axi_DATA_C_AWADDR);
    vector_multiplier_DATA_C_m_axi_U->AWID(m_axi_DATA_C_AWID);
    vector_multiplier_DATA_C_m_axi_U->AWLEN(m_axi_DATA_C_AWLEN);
    vector_multiplier_DATA_C_m_axi_U->AWSIZE(m_axi_DATA_C_AWSIZE);
    vector_multiplier_DATA_C_m_axi_U->AWBURST(m_axi_DATA_C_AWBURST);
    vector_multiplier_DATA_C_m_axi_U->AWLOCK(m_axi_DATA_C_AWLOCK);
    vector_multiplier_DATA_C_m_axi_U->AWCACHE(m_axi_DATA_C_AWCACHE);
    vector_multiplier_DATA_C_m_axi_U->AWPROT(m_axi_DATA_C_AWPROT);
    vector_multiplier_DATA_C_m_axi_U->AWQOS(m_axi_DATA_C_AWQOS);
    vector_multiplier_DATA_C_m_axi_U->AWREGION(m_axi_DATA_C_AWREGION);
    vector_multiplier_DATA_C_m_axi_U->AWUSER(m_axi_DATA_C_AWUSER);
    vector_multiplier_DATA_C_m_axi_U->WVALID(m_axi_DATA_C_WVALID);
    vector_multiplier_DATA_C_m_axi_U->WREADY(m_axi_DATA_C_WREADY);
    vector_multiplier_DATA_C_m_axi_U->WDATA(m_axi_DATA_C_WDATA);
    vector_multiplier_DATA_C_m_axi_U->WSTRB(m_axi_DATA_C_WSTRB);
    vector_multiplier_DATA_C_m_axi_U->WLAST(m_axi_DATA_C_WLAST);
    vector_multiplier_DATA_C_m_axi_U->WID(m_axi_DATA_C_WID);
    vector_multiplier_DATA_C_m_axi_U->WUSER(m_axi_DATA_C_WUSER);
    vector_multiplier_DATA_C_m_axi_U->ARVALID(m_axi_DATA_C_ARVALID);
    vector_multiplier_DATA_C_m_axi_U->ARREADY(m_axi_DATA_C_ARREADY);
    vector_multiplier_DATA_C_m_axi_U->ARADDR(m_axi_DATA_C_ARADDR);
    vector_multiplier_DATA_C_m_axi_U->ARID(m_axi_DATA_C_ARID);
    vector_multiplier_DATA_C_m_axi_U->ARLEN(m_axi_DATA_C_ARLEN);
    vector_multiplier_DATA_C_m_axi_U->ARSIZE(m_axi_DATA_C_ARSIZE);
    vector_multiplier_DATA_C_m_axi_U->ARBURST(m_axi_DATA_C_ARBURST);
    vector_multiplier_DATA_C_m_axi_U->ARLOCK(m_axi_DATA_C_ARLOCK);
    vector_multiplier_DATA_C_m_axi_U->ARCACHE(m_axi_DATA_C_ARCACHE);
    vector_multiplier_DATA_C_m_axi_U->ARPROT(m_axi_DATA_C_ARPROT);
    vector_multiplier_DATA_C_m_axi_U->ARQOS(m_axi_DATA_C_ARQOS);
    vector_multiplier_DATA_C_m_axi_U->ARREGION(m_axi_DATA_C_ARREGION);
    vector_multiplier_DATA_C_m_axi_U->ARUSER(m_axi_DATA_C_ARUSER);
    vector_multiplier_DATA_C_m_axi_U->RVALID(m_axi_DATA_C_RVALID);
    vector_multiplier_DATA_C_m_axi_U->RREADY(m_axi_DATA_C_RREADY);
    vector_multiplier_DATA_C_m_axi_U->RDATA(m_axi_DATA_C_RDATA);
    vector_multiplier_DATA_C_m_axi_U->RLAST(m_axi_DATA_C_RLAST);
    vector_multiplier_DATA_C_m_axi_U->RID(m_axi_DATA_C_RID);
    vector_multiplier_DATA_C_m_axi_U->RUSER(m_axi_DATA_C_RUSER);
    vector_multiplier_DATA_C_m_axi_U->RRESP(m_axi_DATA_C_RRESP);
    vector_multiplier_DATA_C_m_axi_U->BVALID(m_axi_DATA_C_BVALID);
    vector_multiplier_DATA_C_m_axi_U->BREADY(m_axi_DATA_C_BREADY);
    vector_multiplier_DATA_C_m_axi_U->BRESP(m_axi_DATA_C_BRESP);
    vector_multiplier_DATA_C_m_axi_U->BID(m_axi_DATA_C_BID);
    vector_multiplier_DATA_C_m_axi_U->BUSER(m_axi_DATA_C_BUSER);
    vector_multiplier_DATA_C_m_axi_U->ACLK(ap_clk);
    vector_multiplier_DATA_C_m_axi_U->ARESET(ap_rst_n_inv);
    vector_multiplier_DATA_C_m_axi_U->ACLK_EN(ap_var_for_const0);
    vector_multiplier_DATA_C_m_axi_U->I_ARVALID(ap_var_for_const6);
    vector_multiplier_DATA_C_m_axi_U->I_ARREADY(DATA_C_ARREADY);
    vector_multiplier_DATA_C_m_axi_U->I_ARADDR(ap_var_for_const7);
    vector_multiplier_DATA_C_m_axi_U->I_ARID(ap_var_for_const1);
    vector_multiplier_DATA_C_m_axi_U->I_ARLEN(ap_var_for_const7);
    vector_multiplier_DATA_C_m_axi_U->I_ARSIZE(ap_var_for_const3);
    vector_multiplier_DATA_C_m_axi_U->I_ARLOCK(ap_var_for_const4);
    vector_multiplier_DATA_C_m_axi_U->I_ARCACHE(ap_var_for_const5);
    vector_multiplier_DATA_C_m_axi_U->I_ARQOS(ap_var_for_const5);
    vector_multiplier_DATA_C_m_axi_U->I_ARPROT(ap_var_for_const3);
    vector_multiplier_DATA_C_m_axi_U->I_ARUSER(ap_var_for_const1);
    vector_multiplier_DATA_C_m_axi_U->I_ARBURST(ap_var_for_const4);
    vector_multiplier_DATA_C_m_axi_U->I_ARREGION(ap_var_for_const5);
    vector_multiplier_DATA_C_m_axi_U->I_RVALID(DATA_C_RVALID);
    vector_multiplier_DATA_C_m_axi_U->I_RREADY(ap_var_for_const6);
    vector_multiplier_DATA_C_m_axi_U->I_RDATA(DATA_C_RDATA);
    vector_multiplier_DATA_C_m_axi_U->I_RID(DATA_C_RID);
    vector_multiplier_DATA_C_m_axi_U->I_RUSER(DATA_C_RUSER);
    vector_multiplier_DATA_C_m_axi_U->I_RRESP(DATA_C_RRESP);
    vector_multiplier_DATA_C_m_axi_U->I_RLAST(DATA_C_RLAST);
    vector_multiplier_DATA_C_m_axi_U->I_AWVALID(DATA_C_AWVALID);
    vector_multiplier_DATA_C_m_axi_U->I_AWREADY(DATA_C_AWREADY);
    vector_multiplier_DATA_C_m_axi_U->I_AWADDR(tmp_2_fu_210_p1);
    vector_multiplier_DATA_C_m_axi_U->I_AWID(ap_var_for_const1);
    vector_multiplier_DATA_C_m_axi_U->I_AWLEN(ap_var_for_const2);
    vector_multiplier_DATA_C_m_axi_U->I_AWSIZE(ap_var_for_const3);
    vector_multiplier_DATA_C_m_axi_U->I_AWLOCK(ap_var_for_const4);
    vector_multiplier_DATA_C_m_axi_U->I_AWCACHE(ap_var_for_const5);
    vector_multiplier_DATA_C_m_axi_U->I_AWQOS(ap_var_for_const5);
    vector_multiplier_DATA_C_m_axi_U->I_AWPROT(ap_var_for_const3);
    vector_multiplier_DATA_C_m_axi_U->I_AWUSER(ap_var_for_const1);
    vector_multiplier_DATA_C_m_axi_U->I_AWBURST(ap_var_for_const4);
    vector_multiplier_DATA_C_m_axi_U->I_AWREGION(ap_var_for_const5);
    vector_multiplier_DATA_C_m_axi_U->I_WVALID(DATA_C_WVALID);
    vector_multiplier_DATA_C_m_axi_U->I_WREADY(DATA_C_WREADY);
    vector_multiplier_DATA_C_m_axi_U->I_WDATA(tmp_reg_287);
    vector_multiplier_DATA_C_m_axi_U->I_WID(ap_var_for_const1);
    vector_multiplier_DATA_C_m_axi_U->I_WUSER(ap_var_for_const1);
    vector_multiplier_DATA_C_m_axi_U->I_WLAST(ap_var_for_const6);
    vector_multiplier_DATA_C_m_axi_U->I_WSTRB(ap_var_for_const8);
    vector_multiplier_DATA_C_m_axi_U->I_BVALID(DATA_C_BVALID);
    vector_multiplier_DATA_C_m_axi_U->I_BREADY(DATA_C_BREADY);
    vector_multiplier_DATA_C_m_axi_U->I_BRESP(DATA_C_BRESP);
    vector_multiplier_DATA_C_m_axi_U->I_BID(DATA_C_BID);
    vector_multiplier_DATA_C_m_axi_U->I_BUSER(DATA_C_BUSER);
    vector_multiplierbkb_U0 = new vector_multiplierbkb<1,2,32,32,32>("vector_multiplierbkb_U0");
    vector_multiplierbkb_U0->clk(ap_clk);
    vector_multiplierbkb_U0->reset(ap_rst_n_inv);
    vector_multiplierbkb_U0->din0(DATA_B_addr_read_reg_282);
    vector_multiplierbkb_U0->din1(DATA_A_addr_read_reg_277);
    vector_multiplierbkb_U0->ce(grp_fu_232_ce);
    vector_multiplierbkb_U0->dout(grp_fu_232_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_DATA_A_ARVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_reg_ioackin_DATA_A_ARREADY );

    SC_METHOD(thread_DATA_A_RREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_268 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_DATA_A_blk_n_AR);
    sensitive << ( m_axi_DATA_A_ARREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DATA_A_blk_n_R);
    sensitive << ( m_axi_DATA_A_RVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( exitcond_reg_268 );

    SC_METHOD(thread_DATA_B_ARVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_reg_ioackin_DATA_B_ARREADY );

    SC_METHOD(thread_DATA_B_RREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_268 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_DATA_B_blk_n_AR);
    sensitive << ( m_axi_DATA_B_ARREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_DATA_B_blk_n_R);
    sensitive << ( m_axi_DATA_B_RVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( exitcond_reg_268 );

    SC_METHOD(thread_DATA_C_AWVALID);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_reg_ioackin_DATA_C_AWREADY );

    SC_METHOD(thread_DATA_C_BREADY);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( DATA_C_BVALID );

    SC_METHOD(thread_DATA_C_WVALID);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_reg_pp0_iter3_exitcond_reg_268 );
    sensitive << ( ap_reg_ioackin_DATA_C_WREADY );
    sensitive << ( ap_block_pp0_stage0_flag00001001 );

    SC_METHOD(thread_DATA_C_blk_n_AW);
    sensitive << ( m_axi_DATA_C_AWREADY );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_DATA_C_blk_n_B);
    sensitive << ( m_axi_DATA_C_BVALID );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_DATA_C_blk_n_W);
    sensitive << ( m_axi_DATA_C_WREADY );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_reg_pp0_iter3_exitcond_reg_268 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00000000);

    SC_METHOD(thread_ap_block_pp0_stage0_flag00001001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_268 );
    sensitive << ( DATA_A_RVALID );
    sensitive << ( DATA_B_RVALID );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_268 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( DATA_A_RVALID );
    sensitive << ( DATA_B_RVALID );
    sensitive << ( ap_block_state13_io );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011011);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_268 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( DATA_A_RVALID );
    sensitive << ( DATA_B_RVALID );
    sensitive << ( ap_block_state13_io );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter1);
    sensitive << ( exitcond_reg_268 );
    sensitive << ( DATA_A_RVALID );
    sensitive << ( DATA_B_RVALID );

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state12_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state13_io);
    sensitive << ( ap_reg_pp0_iter3_exitcond_reg_268 );
    sensitive << ( ap_sig_ioackin_DATA_C_WREADY );

    SC_METHOD(thread_ap_block_state13_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( ap_sig_ioackin_DATA_A_ARREADY );
    sensitive << ( ap_sig_ioackin_DATA_B_ARREADY );

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter0);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state9);
    sensitive << ( exitcond_fu_220_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( DATA_C_BVALID );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( DATA_C_BVALID );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_DATA_A_ARREADY);
    sensitive << ( DATA_A_ARREADY );
    sensitive << ( ap_reg_ioackin_DATA_A_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_DATA_B_ARREADY);
    sensitive << ( DATA_B_ARREADY );
    sensitive << ( ap_reg_ioackin_DATA_B_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_DATA_C_AWREADY);
    sensitive << ( DATA_C_AWREADY );
    sensitive << ( ap_reg_ioackin_DATA_C_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_DATA_C_WREADY);
    sensitive << ( DATA_C_WREADY );
    sensitive << ( ap_reg_ioackin_DATA_C_WREADY );

    SC_METHOD(thread_exitcond_fu_220_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_reg_149 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_grp_fu_232_ce);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_i_1_fu_226_p2);
    sensitive << ( i_reg_149 );

    SC_METHOD(thread_tmp_2_fu_210_p1);
    sensitive << ( c5_reg_236 );

    SC_METHOD(thread_tmp_3_fu_190_p1);
    sensitive << ( b3_reg_241 );

    SC_METHOD(thread_tmp_4_fu_200_p1);
    sensitive << ( a1_reg_246 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( DATA_C_BVALID );
    sensitive << ( ap_block_state2_io );
    sensitive << ( ap_sig_ioackin_DATA_C_AWREADY );
    sensitive << ( exitcond_fu_220_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_flag00011011 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const8);

    ap_CS_fsm = "00000000000001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_reg_ioackin_DATA_A_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_DATA_B_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_DATA_C_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_DATA_C_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "vector_multiplier_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_DATA_A_AWVALID, "(port)m_axi_DATA_A_AWVALID");
    sc_trace(mVcdFile, m_axi_DATA_A_AWREADY, "(port)m_axi_DATA_A_AWREADY");
    sc_trace(mVcdFile, m_axi_DATA_A_AWADDR, "(port)m_axi_DATA_A_AWADDR");
    sc_trace(mVcdFile, m_axi_DATA_A_AWID, "(port)m_axi_DATA_A_AWID");
    sc_trace(mVcdFile, m_axi_DATA_A_AWLEN, "(port)m_axi_DATA_A_AWLEN");
    sc_trace(mVcdFile, m_axi_DATA_A_AWSIZE, "(port)m_axi_DATA_A_AWSIZE");
    sc_trace(mVcdFile, m_axi_DATA_A_AWBURST, "(port)m_axi_DATA_A_AWBURST");
    sc_trace(mVcdFile, m_axi_DATA_A_AWLOCK, "(port)m_axi_DATA_A_AWLOCK");
    sc_trace(mVcdFile, m_axi_DATA_A_AWCACHE, "(port)m_axi_DATA_A_AWCACHE");
    sc_trace(mVcdFile, m_axi_DATA_A_AWPROT, "(port)m_axi_DATA_A_AWPROT");
    sc_trace(mVcdFile, m_axi_DATA_A_AWQOS, "(port)m_axi_DATA_A_AWQOS");
    sc_trace(mVcdFile, m_axi_DATA_A_AWREGION, "(port)m_axi_DATA_A_AWREGION");
    sc_trace(mVcdFile, m_axi_DATA_A_AWUSER, "(port)m_axi_DATA_A_AWUSER");
    sc_trace(mVcdFile, m_axi_DATA_A_WVALID, "(port)m_axi_DATA_A_WVALID");
    sc_trace(mVcdFile, m_axi_DATA_A_WREADY, "(port)m_axi_DATA_A_WREADY");
    sc_trace(mVcdFile, m_axi_DATA_A_WDATA, "(port)m_axi_DATA_A_WDATA");
    sc_trace(mVcdFile, m_axi_DATA_A_WSTRB, "(port)m_axi_DATA_A_WSTRB");
    sc_trace(mVcdFile, m_axi_DATA_A_WLAST, "(port)m_axi_DATA_A_WLAST");
    sc_trace(mVcdFile, m_axi_DATA_A_WID, "(port)m_axi_DATA_A_WID");
    sc_trace(mVcdFile, m_axi_DATA_A_WUSER, "(port)m_axi_DATA_A_WUSER");
    sc_trace(mVcdFile, m_axi_DATA_A_ARVALID, "(port)m_axi_DATA_A_ARVALID");
    sc_trace(mVcdFile, m_axi_DATA_A_ARREADY, "(port)m_axi_DATA_A_ARREADY");
    sc_trace(mVcdFile, m_axi_DATA_A_ARADDR, "(port)m_axi_DATA_A_ARADDR");
    sc_trace(mVcdFile, m_axi_DATA_A_ARID, "(port)m_axi_DATA_A_ARID");
    sc_trace(mVcdFile, m_axi_DATA_A_ARLEN, "(port)m_axi_DATA_A_ARLEN");
    sc_trace(mVcdFile, m_axi_DATA_A_ARSIZE, "(port)m_axi_DATA_A_ARSIZE");
    sc_trace(mVcdFile, m_axi_DATA_A_ARBURST, "(port)m_axi_DATA_A_ARBURST");
    sc_trace(mVcdFile, m_axi_DATA_A_ARLOCK, "(port)m_axi_DATA_A_ARLOCK");
    sc_trace(mVcdFile, m_axi_DATA_A_ARCACHE, "(port)m_axi_DATA_A_ARCACHE");
    sc_trace(mVcdFile, m_axi_DATA_A_ARPROT, "(port)m_axi_DATA_A_ARPROT");
    sc_trace(mVcdFile, m_axi_DATA_A_ARQOS, "(port)m_axi_DATA_A_ARQOS");
    sc_trace(mVcdFile, m_axi_DATA_A_ARREGION, "(port)m_axi_DATA_A_ARREGION");
    sc_trace(mVcdFile, m_axi_DATA_A_ARUSER, "(port)m_axi_DATA_A_ARUSER");
    sc_trace(mVcdFile, m_axi_DATA_A_RVALID, "(port)m_axi_DATA_A_RVALID");
    sc_trace(mVcdFile, m_axi_DATA_A_RREADY, "(port)m_axi_DATA_A_RREADY");
    sc_trace(mVcdFile, m_axi_DATA_A_RDATA, "(port)m_axi_DATA_A_RDATA");
    sc_trace(mVcdFile, m_axi_DATA_A_RLAST, "(port)m_axi_DATA_A_RLAST");
    sc_trace(mVcdFile, m_axi_DATA_A_RID, "(port)m_axi_DATA_A_RID");
    sc_trace(mVcdFile, m_axi_DATA_A_RUSER, "(port)m_axi_DATA_A_RUSER");
    sc_trace(mVcdFile, m_axi_DATA_A_RRESP, "(port)m_axi_DATA_A_RRESP");
    sc_trace(mVcdFile, m_axi_DATA_A_BVALID, "(port)m_axi_DATA_A_BVALID");
    sc_trace(mVcdFile, m_axi_DATA_A_BREADY, "(port)m_axi_DATA_A_BREADY");
    sc_trace(mVcdFile, m_axi_DATA_A_BRESP, "(port)m_axi_DATA_A_BRESP");
    sc_trace(mVcdFile, m_axi_DATA_A_BID, "(port)m_axi_DATA_A_BID");
    sc_trace(mVcdFile, m_axi_DATA_A_BUSER, "(port)m_axi_DATA_A_BUSER");
    sc_trace(mVcdFile, m_axi_DATA_B_AWVALID, "(port)m_axi_DATA_B_AWVALID");
    sc_trace(mVcdFile, m_axi_DATA_B_AWREADY, "(port)m_axi_DATA_B_AWREADY");
    sc_trace(mVcdFile, m_axi_DATA_B_AWADDR, "(port)m_axi_DATA_B_AWADDR");
    sc_trace(mVcdFile, m_axi_DATA_B_AWID, "(port)m_axi_DATA_B_AWID");
    sc_trace(mVcdFile, m_axi_DATA_B_AWLEN, "(port)m_axi_DATA_B_AWLEN");
    sc_trace(mVcdFile, m_axi_DATA_B_AWSIZE, "(port)m_axi_DATA_B_AWSIZE");
    sc_trace(mVcdFile, m_axi_DATA_B_AWBURST, "(port)m_axi_DATA_B_AWBURST");
    sc_trace(mVcdFile, m_axi_DATA_B_AWLOCK, "(port)m_axi_DATA_B_AWLOCK");
    sc_trace(mVcdFile, m_axi_DATA_B_AWCACHE, "(port)m_axi_DATA_B_AWCACHE");
    sc_trace(mVcdFile, m_axi_DATA_B_AWPROT, "(port)m_axi_DATA_B_AWPROT");
    sc_trace(mVcdFile, m_axi_DATA_B_AWQOS, "(port)m_axi_DATA_B_AWQOS");
    sc_trace(mVcdFile, m_axi_DATA_B_AWREGION, "(port)m_axi_DATA_B_AWREGION");
    sc_trace(mVcdFile, m_axi_DATA_B_AWUSER, "(port)m_axi_DATA_B_AWUSER");
    sc_trace(mVcdFile, m_axi_DATA_B_WVALID, "(port)m_axi_DATA_B_WVALID");
    sc_trace(mVcdFile, m_axi_DATA_B_WREADY, "(port)m_axi_DATA_B_WREADY");
    sc_trace(mVcdFile, m_axi_DATA_B_WDATA, "(port)m_axi_DATA_B_WDATA");
    sc_trace(mVcdFile, m_axi_DATA_B_WSTRB, "(port)m_axi_DATA_B_WSTRB");
    sc_trace(mVcdFile, m_axi_DATA_B_WLAST, "(port)m_axi_DATA_B_WLAST");
    sc_trace(mVcdFile, m_axi_DATA_B_WID, "(port)m_axi_DATA_B_WID");
    sc_trace(mVcdFile, m_axi_DATA_B_WUSER, "(port)m_axi_DATA_B_WUSER");
    sc_trace(mVcdFile, m_axi_DATA_B_ARVALID, "(port)m_axi_DATA_B_ARVALID");
    sc_trace(mVcdFile, m_axi_DATA_B_ARREADY, "(port)m_axi_DATA_B_ARREADY");
    sc_trace(mVcdFile, m_axi_DATA_B_ARADDR, "(port)m_axi_DATA_B_ARADDR");
    sc_trace(mVcdFile, m_axi_DATA_B_ARID, "(port)m_axi_DATA_B_ARID");
    sc_trace(mVcdFile, m_axi_DATA_B_ARLEN, "(port)m_axi_DATA_B_ARLEN");
    sc_trace(mVcdFile, m_axi_DATA_B_ARSIZE, "(port)m_axi_DATA_B_ARSIZE");
    sc_trace(mVcdFile, m_axi_DATA_B_ARBURST, "(port)m_axi_DATA_B_ARBURST");
    sc_trace(mVcdFile, m_axi_DATA_B_ARLOCK, "(port)m_axi_DATA_B_ARLOCK");
    sc_trace(mVcdFile, m_axi_DATA_B_ARCACHE, "(port)m_axi_DATA_B_ARCACHE");
    sc_trace(mVcdFile, m_axi_DATA_B_ARPROT, "(port)m_axi_DATA_B_ARPROT");
    sc_trace(mVcdFile, m_axi_DATA_B_ARQOS, "(port)m_axi_DATA_B_ARQOS");
    sc_trace(mVcdFile, m_axi_DATA_B_ARREGION, "(port)m_axi_DATA_B_ARREGION");
    sc_trace(mVcdFile, m_axi_DATA_B_ARUSER, "(port)m_axi_DATA_B_ARUSER");
    sc_trace(mVcdFile, m_axi_DATA_B_RVALID, "(port)m_axi_DATA_B_RVALID");
    sc_trace(mVcdFile, m_axi_DATA_B_RREADY, "(port)m_axi_DATA_B_RREADY");
    sc_trace(mVcdFile, m_axi_DATA_B_RDATA, "(port)m_axi_DATA_B_RDATA");
    sc_trace(mVcdFile, m_axi_DATA_B_RLAST, "(port)m_axi_DATA_B_RLAST");
    sc_trace(mVcdFile, m_axi_DATA_B_RID, "(port)m_axi_DATA_B_RID");
    sc_trace(mVcdFile, m_axi_DATA_B_RUSER, "(port)m_axi_DATA_B_RUSER");
    sc_trace(mVcdFile, m_axi_DATA_B_RRESP, "(port)m_axi_DATA_B_RRESP");
    sc_trace(mVcdFile, m_axi_DATA_B_BVALID, "(port)m_axi_DATA_B_BVALID");
    sc_trace(mVcdFile, m_axi_DATA_B_BREADY, "(port)m_axi_DATA_B_BREADY");
    sc_trace(mVcdFile, m_axi_DATA_B_BRESP, "(port)m_axi_DATA_B_BRESP");
    sc_trace(mVcdFile, m_axi_DATA_B_BID, "(port)m_axi_DATA_B_BID");
    sc_trace(mVcdFile, m_axi_DATA_B_BUSER, "(port)m_axi_DATA_B_BUSER");
    sc_trace(mVcdFile, m_axi_DATA_C_AWVALID, "(port)m_axi_DATA_C_AWVALID");
    sc_trace(mVcdFile, m_axi_DATA_C_AWREADY, "(port)m_axi_DATA_C_AWREADY");
    sc_trace(mVcdFile, m_axi_DATA_C_AWADDR, "(port)m_axi_DATA_C_AWADDR");
    sc_trace(mVcdFile, m_axi_DATA_C_AWID, "(port)m_axi_DATA_C_AWID");
    sc_trace(mVcdFile, m_axi_DATA_C_AWLEN, "(port)m_axi_DATA_C_AWLEN");
    sc_trace(mVcdFile, m_axi_DATA_C_AWSIZE, "(port)m_axi_DATA_C_AWSIZE");
    sc_trace(mVcdFile, m_axi_DATA_C_AWBURST, "(port)m_axi_DATA_C_AWBURST");
    sc_trace(mVcdFile, m_axi_DATA_C_AWLOCK, "(port)m_axi_DATA_C_AWLOCK");
    sc_trace(mVcdFile, m_axi_DATA_C_AWCACHE, "(port)m_axi_DATA_C_AWCACHE");
    sc_trace(mVcdFile, m_axi_DATA_C_AWPROT, "(port)m_axi_DATA_C_AWPROT");
    sc_trace(mVcdFile, m_axi_DATA_C_AWQOS, "(port)m_axi_DATA_C_AWQOS");
    sc_trace(mVcdFile, m_axi_DATA_C_AWREGION, "(port)m_axi_DATA_C_AWREGION");
    sc_trace(mVcdFile, m_axi_DATA_C_AWUSER, "(port)m_axi_DATA_C_AWUSER");
    sc_trace(mVcdFile, m_axi_DATA_C_WVALID, "(port)m_axi_DATA_C_WVALID");
    sc_trace(mVcdFile, m_axi_DATA_C_WREADY, "(port)m_axi_DATA_C_WREADY");
    sc_trace(mVcdFile, m_axi_DATA_C_WDATA, "(port)m_axi_DATA_C_WDATA");
    sc_trace(mVcdFile, m_axi_DATA_C_WSTRB, "(port)m_axi_DATA_C_WSTRB");
    sc_trace(mVcdFile, m_axi_DATA_C_WLAST, "(port)m_axi_DATA_C_WLAST");
    sc_trace(mVcdFile, m_axi_DATA_C_WID, "(port)m_axi_DATA_C_WID");
    sc_trace(mVcdFile, m_axi_DATA_C_WUSER, "(port)m_axi_DATA_C_WUSER");
    sc_trace(mVcdFile, m_axi_DATA_C_ARVALID, "(port)m_axi_DATA_C_ARVALID");
    sc_trace(mVcdFile, m_axi_DATA_C_ARREADY, "(port)m_axi_DATA_C_ARREADY");
    sc_trace(mVcdFile, m_axi_DATA_C_ARADDR, "(port)m_axi_DATA_C_ARADDR");
    sc_trace(mVcdFile, m_axi_DATA_C_ARID, "(port)m_axi_DATA_C_ARID");
    sc_trace(mVcdFile, m_axi_DATA_C_ARLEN, "(port)m_axi_DATA_C_ARLEN");
    sc_trace(mVcdFile, m_axi_DATA_C_ARSIZE, "(port)m_axi_DATA_C_ARSIZE");
    sc_trace(mVcdFile, m_axi_DATA_C_ARBURST, "(port)m_axi_DATA_C_ARBURST");
    sc_trace(mVcdFile, m_axi_DATA_C_ARLOCK, "(port)m_axi_DATA_C_ARLOCK");
    sc_trace(mVcdFile, m_axi_DATA_C_ARCACHE, "(port)m_axi_DATA_C_ARCACHE");
    sc_trace(mVcdFile, m_axi_DATA_C_ARPROT, "(port)m_axi_DATA_C_ARPROT");
    sc_trace(mVcdFile, m_axi_DATA_C_ARQOS, "(port)m_axi_DATA_C_ARQOS");
    sc_trace(mVcdFile, m_axi_DATA_C_ARREGION, "(port)m_axi_DATA_C_ARREGION");
    sc_trace(mVcdFile, m_axi_DATA_C_ARUSER, "(port)m_axi_DATA_C_ARUSER");
    sc_trace(mVcdFile, m_axi_DATA_C_RVALID, "(port)m_axi_DATA_C_RVALID");
    sc_trace(mVcdFile, m_axi_DATA_C_RREADY, "(port)m_axi_DATA_C_RREADY");
    sc_trace(mVcdFile, m_axi_DATA_C_RDATA, "(port)m_axi_DATA_C_RDATA");
    sc_trace(mVcdFile, m_axi_DATA_C_RLAST, "(port)m_axi_DATA_C_RLAST");
    sc_trace(mVcdFile, m_axi_DATA_C_RID, "(port)m_axi_DATA_C_RID");
    sc_trace(mVcdFile, m_axi_DATA_C_RUSER, "(port)m_axi_DATA_C_RUSER");
    sc_trace(mVcdFile, m_axi_DATA_C_RRESP, "(port)m_axi_DATA_C_RRESP");
    sc_trace(mVcdFile, m_axi_DATA_C_BVALID, "(port)m_axi_DATA_C_BVALID");
    sc_trace(mVcdFile, m_axi_DATA_C_BREADY, "(port)m_axi_DATA_C_BREADY");
    sc_trace(mVcdFile, m_axi_DATA_C_BRESP, "(port)m_axi_DATA_C_BRESP");
    sc_trace(mVcdFile, m_axi_DATA_C_BID, "(port)m_axi_DATA_C_BID");
    sc_trace(mVcdFile, m_axi_DATA_C_BUSER, "(port)m_axi_DATA_C_BUSER");
    sc_trace(mVcdFile, s_axi_CTL_AWVALID, "(port)s_axi_CTL_AWVALID");
    sc_trace(mVcdFile, s_axi_CTL_AWREADY, "(port)s_axi_CTL_AWREADY");
    sc_trace(mVcdFile, s_axi_CTL_AWADDR, "(port)s_axi_CTL_AWADDR");
    sc_trace(mVcdFile, s_axi_CTL_WVALID, "(port)s_axi_CTL_WVALID");
    sc_trace(mVcdFile, s_axi_CTL_WREADY, "(port)s_axi_CTL_WREADY");
    sc_trace(mVcdFile, s_axi_CTL_WDATA, "(port)s_axi_CTL_WDATA");
    sc_trace(mVcdFile, s_axi_CTL_WSTRB, "(port)s_axi_CTL_WSTRB");
    sc_trace(mVcdFile, s_axi_CTL_ARVALID, "(port)s_axi_CTL_ARVALID");
    sc_trace(mVcdFile, s_axi_CTL_ARREADY, "(port)s_axi_CTL_ARREADY");
    sc_trace(mVcdFile, s_axi_CTL_ARADDR, "(port)s_axi_CTL_ARADDR");
    sc_trace(mVcdFile, s_axi_CTL_RVALID, "(port)s_axi_CTL_RVALID");
    sc_trace(mVcdFile, s_axi_CTL_RREADY, "(port)s_axi_CTL_RREADY");
    sc_trace(mVcdFile, s_axi_CTL_RDATA, "(port)s_axi_CTL_RDATA");
    sc_trace(mVcdFile, s_axi_CTL_RRESP, "(port)s_axi_CTL_RRESP");
    sc_trace(mVcdFile, s_axi_CTL_BVALID, "(port)s_axi_CTL_BVALID");
    sc_trace(mVcdFile, s_axi_CTL_BREADY, "(port)s_axi_CTL_BREADY");
    sc_trace(mVcdFile, s_axi_CTL_BRESP, "(port)s_axi_CTL_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, a, "a");
    sc_trace(mVcdFile, b, "b");
    sc_trace(mVcdFile, c, "c");
    sc_trace(mVcdFile, ap_return, "ap_return");
    sc_trace(mVcdFile, DATA_A_blk_n_AR, "DATA_A_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, DATA_A_blk_n_R, "DATA_A_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00000000, "ap_block_pp0_stage0_flag00000000");
    sc_trace(mVcdFile, exitcond_reg_268, "exitcond_reg_268");
    sc_trace(mVcdFile, DATA_B_blk_n_AR, "DATA_B_blk_n_AR");
    sc_trace(mVcdFile, DATA_B_blk_n_R, "DATA_B_blk_n_R");
    sc_trace(mVcdFile, DATA_C_blk_n_AW, "DATA_C_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, DATA_C_blk_n_W, "DATA_C_blk_n_W");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_reg_pp0_iter3_exitcond_reg_268, "ap_reg_pp0_iter3_exitcond_reg_268");
    sc_trace(mVcdFile, DATA_C_blk_n_B, "DATA_C_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, DATA_A_AWREADY, "DATA_A_AWREADY");
    sc_trace(mVcdFile, DATA_A_WREADY, "DATA_A_WREADY");
    sc_trace(mVcdFile, DATA_A_ARVALID, "DATA_A_ARVALID");
    sc_trace(mVcdFile, DATA_A_ARREADY, "DATA_A_ARREADY");
    sc_trace(mVcdFile, DATA_A_RVALID, "DATA_A_RVALID");
    sc_trace(mVcdFile, DATA_A_RREADY, "DATA_A_RREADY");
    sc_trace(mVcdFile, DATA_A_RDATA, "DATA_A_RDATA");
    sc_trace(mVcdFile, DATA_A_RLAST, "DATA_A_RLAST");
    sc_trace(mVcdFile, DATA_A_RID, "DATA_A_RID");
    sc_trace(mVcdFile, DATA_A_RUSER, "DATA_A_RUSER");
    sc_trace(mVcdFile, DATA_A_RRESP, "DATA_A_RRESP");
    sc_trace(mVcdFile, DATA_A_BVALID, "DATA_A_BVALID");
    sc_trace(mVcdFile, DATA_A_BRESP, "DATA_A_BRESP");
    sc_trace(mVcdFile, DATA_A_BID, "DATA_A_BID");
    sc_trace(mVcdFile, DATA_A_BUSER, "DATA_A_BUSER");
    sc_trace(mVcdFile, DATA_B_AWREADY, "DATA_B_AWREADY");
    sc_trace(mVcdFile, DATA_B_WREADY, "DATA_B_WREADY");
    sc_trace(mVcdFile, DATA_B_ARVALID, "DATA_B_ARVALID");
    sc_trace(mVcdFile, DATA_B_ARREADY, "DATA_B_ARREADY");
    sc_trace(mVcdFile, DATA_B_RVALID, "DATA_B_RVALID");
    sc_trace(mVcdFile, DATA_B_RREADY, "DATA_B_RREADY");
    sc_trace(mVcdFile, DATA_B_RDATA, "DATA_B_RDATA");
    sc_trace(mVcdFile, DATA_B_RLAST, "DATA_B_RLAST");
    sc_trace(mVcdFile, DATA_B_RID, "DATA_B_RID");
    sc_trace(mVcdFile, DATA_B_RUSER, "DATA_B_RUSER");
    sc_trace(mVcdFile, DATA_B_RRESP, "DATA_B_RRESP");
    sc_trace(mVcdFile, DATA_B_BVALID, "DATA_B_BVALID");
    sc_trace(mVcdFile, DATA_B_BRESP, "DATA_B_BRESP");
    sc_trace(mVcdFile, DATA_B_BID, "DATA_B_BID");
    sc_trace(mVcdFile, DATA_B_BUSER, "DATA_B_BUSER");
    sc_trace(mVcdFile, DATA_C_AWVALID, "DATA_C_AWVALID");
    sc_trace(mVcdFile, DATA_C_AWREADY, "DATA_C_AWREADY");
    sc_trace(mVcdFile, DATA_C_WVALID, "DATA_C_WVALID");
    sc_trace(mVcdFile, DATA_C_WREADY, "DATA_C_WREADY");
    sc_trace(mVcdFile, DATA_C_ARREADY, "DATA_C_ARREADY");
    sc_trace(mVcdFile, DATA_C_RVALID, "DATA_C_RVALID");
    sc_trace(mVcdFile, DATA_C_RDATA, "DATA_C_RDATA");
    sc_trace(mVcdFile, DATA_C_RLAST, "DATA_C_RLAST");
    sc_trace(mVcdFile, DATA_C_RID, "DATA_C_RID");
    sc_trace(mVcdFile, DATA_C_RUSER, "DATA_C_RUSER");
    sc_trace(mVcdFile, DATA_C_RRESP, "DATA_C_RRESP");
    sc_trace(mVcdFile, DATA_C_BVALID, "DATA_C_BVALID");
    sc_trace(mVcdFile, DATA_C_BREADY, "DATA_C_BREADY");
    sc_trace(mVcdFile, DATA_C_BRESP, "DATA_C_BRESP");
    sc_trace(mVcdFile, DATA_C_BID, "DATA_C_BID");
    sc_trace(mVcdFile, DATA_C_BUSER, "DATA_C_BUSER");
    sc_trace(mVcdFile, i_reg_149, "i_reg_149");
    sc_trace(mVcdFile, c5_reg_236, "c5_reg_236");
    sc_trace(mVcdFile, b3_reg_241, "b3_reg_241");
    sc_trace(mVcdFile, a1_reg_246, "a1_reg_246");
    sc_trace(mVcdFile, ap_sig_ioackin_DATA_A_ARREADY, "ap_sig_ioackin_DATA_A_ARREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_DATA_B_ARREADY, "ap_sig_ioackin_DATA_B_ARREADY");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, ap_sig_ioackin_DATA_C_AWREADY, "ap_sig_ioackin_DATA_C_AWREADY");
    sc_trace(mVcdFile, exitcond_fu_220_p2, "exitcond_fu_220_p2");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter0, "ap_block_state9_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter1, "ap_block_state10_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter2, "ap_block_state11_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage0_iter3, "ap_block_state12_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state13_pp0_stage0_iter4, "ap_block_state13_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_sig_ioackin_DATA_C_WREADY, "ap_sig_ioackin_DATA_C_WREADY");
    sc_trace(mVcdFile, ap_block_state13_io, "ap_block_state13_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011001, "ap_block_pp0_stage0_flag00011001");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_exitcond_reg_268, "ap_reg_pp0_iter1_exitcond_reg_268");
    sc_trace(mVcdFile, ap_reg_pp0_iter2_exitcond_reg_268, "ap_reg_pp0_iter2_exitcond_reg_268");
    sc_trace(mVcdFile, i_1_fu_226_p2, "i_1_fu_226_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, DATA_A_addr_read_reg_277, "DATA_A_addr_read_reg_277");
    sc_trace(mVcdFile, DATA_B_addr_read_reg_282, "DATA_B_addr_read_reg_282");
    sc_trace(mVcdFile, grp_fu_232_p2, "grp_fu_232_p2");
    sc_trace(mVcdFile, tmp_reg_287, "tmp_reg_287");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011011, "ap_block_pp0_stage0_flag00011011");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state9, "ap_condition_pp0_exit_iter0_state9");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, tmp_3_fu_190_p1, "tmp_3_fu_190_p1");
    sc_trace(mVcdFile, tmp_4_fu_200_p1, "tmp_4_fu_200_p1");
    sc_trace(mVcdFile, tmp_2_fu_210_p1, "tmp_2_fu_210_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_DATA_A_ARREADY, "ap_reg_ioackin_DATA_A_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_DATA_B_ARREADY, "ap_reg_ioackin_DATA_B_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_DATA_C_AWREADY, "ap_reg_ioackin_DATA_C_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_DATA_C_WREADY, "ap_reg_ioackin_DATA_C_WREADY");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00001001, "ap_block_pp0_stage0_flag00001001");
    sc_trace(mVcdFile, grp_fu_232_ce, "grp_fu_232_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("vector_multiplier.hdltvin.dat");
    mHdltvoutHandle.open("vector_multiplier.hdltvout.dat");
}

vector_multiplier::~vector_multiplier() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete vector_multiplier_CTL_s_axi_U;
    delete vector_multiplier_DATA_A_m_axi_U;
    delete vector_multiplier_DATA_B_m_axi_U;
    delete vector_multiplier_DATA_C_m_axi_U;
    delete vector_multiplierbkb_U0;
}

void vector_multiplier::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void vector_multiplier::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void vector_multiplier::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv32_0;
}

void vector_multiplier::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void vector_multiplier::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_40;
}

void vector_multiplier::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void vector_multiplier::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void vector_multiplier::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void vector_multiplier::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv4_F;
}

void vector_multiplier::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                    esl_seteq<1,1,1>(ap_sig_ioackin_DATA_C_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state9.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                    esl_seteq<1,1,1>(ap_sig_ioackin_DATA_C_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter4 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_DATA_A_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            if (esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_DATA_A_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, DATA_A_ARREADY.read())) {
                ap_reg_ioackin_DATA_A_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_DATA_B_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            if (esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_DATA_B_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, DATA_B_ARREADY.read())) {
                ap_reg_ioackin_DATA_B_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_DATA_C_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_DATA_C_AWREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_DATA_C_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, DATA_C_AWREADY.read())) {
                ap_reg_ioackin_DATA_C_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_DATA_C_WREADY = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter3_exitcond_reg_268.read()))) {
            if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_DATA_C_WREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, DATA_C_WREADY.read()) && 
                        esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00001001.read(), ap_const_boolean_0))) {
                ap_reg_ioackin_DATA_C_WREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_220_p2.read()))) {
        i_reg_149 = i_1_fu_226_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                esl_seteq<1,1,1>(ap_sig_ioackin_DATA_C_AWREADY.read(), ap_const_logic_1))) {
        i_reg_149 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(exitcond_reg_268.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        DATA_A_addr_read_reg_277 = DATA_A_RDATA.read();
        DATA_B_addr_read_reg_282 = DATA_B_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        a1_reg_246 = a.read().range(31, 2);
        b3_reg_241 = b.read().range(31, 2);
        c5_reg_236 = c.read().range(31, 2);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        ap_reg_pp0_iter1_exitcond_reg_268 = exitcond_reg_268.read();
        exitcond_reg_268 = exitcond_fu_220_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0)) {
        ap_reg_pp0_iter2_exitcond_reg_268 = ap_reg_pp0_iter1_exitcond_reg_268.read();
        ap_reg_pp0_iter3_exitcond_reg_268 = ap_reg_pp0_iter2_exitcond_reg_268.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter2_exitcond_reg_268.read()))) {
        tmp_reg_287 = grp_fu_232_p2.read();
    }
}

void vector_multiplier::thread_DATA_A_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_DATA_A_ARREADY.read()))) {
        DATA_A_ARVALID = ap_const_logic_1;
    } else {
        DATA_A_ARVALID = ap_const_logic_0;
    }
}

void vector_multiplier::thread_DATA_A_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_268.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        DATA_A_RREADY = ap_const_logic_1;
    } else {
        DATA_A_RREADY = ap_const_logic_0;
    }
}

void vector_multiplier::thread_DATA_A_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        DATA_A_blk_n_AR = m_axi_DATA_A_ARREADY.read();
    } else {
        DATA_A_blk_n_AR = ap_const_logic_1;
    }
}

void vector_multiplier::thread_DATA_A_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_reg_268.read(), ap_const_lv1_0))) {
        DATA_A_blk_n_R = m_axi_DATA_A_RVALID.read();
    } else {
        DATA_A_blk_n_R = ap_const_logic_1;
    }
}

void vector_multiplier::thread_DATA_B_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_DATA_B_ARREADY.read()))) {
        DATA_B_ARVALID = ap_const_logic_1;
    } else {
        DATA_B_ARVALID = ap_const_logic_0;
    }
}

void vector_multiplier::thread_DATA_B_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_268.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        DATA_B_RREADY = ap_const_logic_1;
    } else {
        DATA_B_RREADY = ap_const_logic_0;
    }
}

void vector_multiplier::thread_DATA_B_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        DATA_B_blk_n_AR = m_axi_DATA_B_ARREADY.read();
    } else {
        DATA_B_blk_n_AR = ap_const_logic_1;
    }
}

void vector_multiplier::thread_DATA_B_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_reg_268.read(), ap_const_lv1_0))) {
        DATA_B_blk_n_R = m_axi_DATA_B_RVALID.read();
    } else {
        DATA_B_blk_n_R = ap_const_logic_1;
    }
}

void vector_multiplier::thread_DATA_C_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_DATA_C_AWREADY.read()))) {
        DATA_C_AWVALID = ap_const_logic_1;
    } else {
        DATA_C_AWVALID = ap_const_logic_0;
    }
}

void vector_multiplier::thread_DATA_C_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
         esl_seteq<1,1,1>(DATA_C_BVALID.read(), ap_const_logic_1))) {
        DATA_C_BREADY = ap_const_logic_1;
    } else {
        DATA_C_BREADY = ap_const_logic_0;
    }
}

void vector_multiplier::thread_DATA_C_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter3_exitcond_reg_268.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00001001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_DATA_C_WREADY.read()))) {
        DATA_C_WVALID = ap_const_logic_1;
    } else {
        DATA_C_WVALID = ap_const_logic_0;
    }
}

void vector_multiplier::thread_DATA_C_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        DATA_C_blk_n_AW = m_axi_DATA_C_AWREADY.read();
    } else {
        DATA_C_blk_n_AW = ap_const_logic_1;
    }
}

void vector_multiplier::thread_DATA_C_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        DATA_C_blk_n_B = m_axi_DATA_C_BVALID.read();
    } else {
        DATA_C_blk_n_B = ap_const_logic_1;
    }
}

void vector_multiplier::thread_DATA_C_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter3_exitcond_reg_268.read()))) {
        DATA_C_blk_n_W = m_axi_DATA_C_WREADY.read();
    } else {
        DATA_C_blk_n_W = ap_const_logic_1;
    }
}

void vector_multiplier::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[8];
}

void vector_multiplier::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void vector_multiplier::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[12];
}

void vector_multiplier::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[13];
}

void vector_multiplier::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void vector_multiplier::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void vector_multiplier::thread_ap_block_pp0_stage0_flag00000000() {
    ap_block_pp0_stage0_flag00000000 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void vector_multiplier::thread_ap_block_pp0_stage0_flag00001001() {
    ap_block_pp0_stage0_flag00001001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(exitcond_reg_268.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, DATA_A_RVALID.read())) || 
  (esl_seteq<1,1,1>(exitcond_reg_268.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, DATA_B_RVALID.read()))));
}

void vector_multiplier::thread_ap_block_pp0_stage0_flag00011001() {
    ap_block_pp0_stage0_flag00011001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(exitcond_reg_268.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, DATA_A_RVALID.read())) || 
   (esl_seteq<1,1,1>(exitcond_reg_268.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, DATA_B_RVALID.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state13_io.read())));
}

void vector_multiplier::thread_ap_block_pp0_stage0_flag00011011() {
    ap_block_pp0_stage0_flag00011011 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(exitcond_reg_268.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, DATA_A_RVALID.read())) || 
   (esl_seteq<1,1,1>(exitcond_reg_268.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, DATA_B_RVALID.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state13_io.read())));
}

void vector_multiplier::thread_ap_block_state10_pp0_stage0_iter1() {
    ap_block_state10_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(exitcond_reg_268.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, DATA_A_RVALID.read())) || (esl_seteq<1,1,1>(exitcond_reg_268.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, DATA_B_RVALID.read())));
}

void vector_multiplier::thread_ap_block_state11_pp0_stage0_iter2() {
    ap_block_state11_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void vector_multiplier::thread_ap_block_state12_pp0_stage0_iter3() {
    ap_block_state12_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void vector_multiplier::thread_ap_block_state13_io() {
    ap_block_state13_io = (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter3_exitcond_reg_268.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_DATA_C_WREADY.read()));
}

void vector_multiplier::thread_ap_block_state13_pp0_stage0_iter4() {
    ap_block_state13_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void vector_multiplier::thread_ap_block_state2_io() {
    ap_block_state2_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_DATA_A_ARREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_DATA_B_ARREADY.read()));
}

void vector_multiplier::thread_ap_block_state9_pp0_stage0_iter0() {
    ap_block_state9_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void vector_multiplier::thread_ap_condition_pp0_exit_iter0_state9() {
    if (esl_seteq<1,1,1>(exitcond_fu_220_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_0;
    }
}

void vector_multiplier::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
         esl_seteq<1,1,1>(DATA_C_BVALID.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void vector_multiplier::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void vector_multiplier::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void vector_multiplier::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void vector_multiplier::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
         esl_seteq<1,1,1>(DATA_C_BVALID.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void vector_multiplier::thread_ap_return() {
    ap_return = ap_const_lv32_0;
}

void vector_multiplier::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void vector_multiplier::thread_ap_sig_ioackin_DATA_A_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_DATA_A_ARREADY.read())) {
        ap_sig_ioackin_DATA_A_ARREADY = DATA_A_ARREADY.read();
    } else {
        ap_sig_ioackin_DATA_A_ARREADY = ap_const_logic_1;
    }
}

void vector_multiplier::thread_ap_sig_ioackin_DATA_B_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_DATA_B_ARREADY.read())) {
        ap_sig_ioackin_DATA_B_ARREADY = DATA_B_ARREADY.read();
    } else {
        ap_sig_ioackin_DATA_B_ARREADY = ap_const_logic_1;
    }
}

void vector_multiplier::thread_ap_sig_ioackin_DATA_C_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_DATA_C_AWREADY.read())) {
        ap_sig_ioackin_DATA_C_AWREADY = DATA_C_AWREADY.read();
    } else {
        ap_sig_ioackin_DATA_C_AWREADY = ap_const_logic_1;
    }
}

void vector_multiplier::thread_ap_sig_ioackin_DATA_C_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_DATA_C_WREADY.read())) {
        ap_sig_ioackin_DATA_C_WREADY = DATA_C_WREADY.read();
    } else {
        ap_sig_ioackin_DATA_C_WREADY = ap_const_logic_1;
    }
}

void vector_multiplier::thread_exitcond_fu_220_p2() {
    exitcond_fu_220_p2 = (!i_reg_149.read().is_01() || !ap_const_lv7_40.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_149.read() == ap_const_lv7_40);
}

void vector_multiplier::thread_grp_fu_232_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        grp_fu_232_ce = ap_const_logic_1;
    } else {
        grp_fu_232_ce = ap_const_logic_0;
    }
}

void vector_multiplier::thread_i_1_fu_226_p2() {
    i_1_fu_226_p2 = (!i_reg_149.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_reg_149.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void vector_multiplier::thread_tmp_2_fu_210_p1() {
    tmp_2_fu_210_p1 = esl_zext<32,30>(c5_reg_236.read());
}

void vector_multiplier::thread_tmp_3_fu_190_p1() {
    tmp_3_fu_190_p1 = esl_zext<32,30>(b3_reg_241.read());
}

void vector_multiplier::thread_tmp_4_fu_200_p1() {
    tmp_4_fu_200_p1 = esl_zext<32,30>(a1_reg_246.read());
}

void vector_multiplier::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_DATA_C_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_fu_220_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(exitcond_fu_220_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(DATA_C_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state18;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXX";
            break;
    }
}

void vector_multiplier::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_DATA_A_AWVALID\" :  \"" << m_axi_DATA_A_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_A_AWREADY\" :  \"" << m_axi_DATA_A_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_AWADDR\" :  \"" << m_axi_DATA_A_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_AWID\" :  \"" << m_axi_DATA_A_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_AWLEN\" :  \"" << m_axi_DATA_A_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_AWSIZE\" :  \"" << m_axi_DATA_A_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_AWBURST\" :  \"" << m_axi_DATA_A_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_AWLOCK\" :  \"" << m_axi_DATA_A_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_AWCACHE\" :  \"" << m_axi_DATA_A_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_AWPROT\" :  \"" << m_axi_DATA_A_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_AWQOS\" :  \"" << m_axi_DATA_A_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_AWREGION\" :  \"" << m_axi_DATA_A_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_AWUSER\" :  \"" << m_axi_DATA_A_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_WVALID\" :  \"" << m_axi_DATA_A_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_A_WREADY\" :  \"" << m_axi_DATA_A_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_WDATA\" :  \"" << m_axi_DATA_A_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_WSTRB\" :  \"" << m_axi_DATA_A_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_WLAST\" :  \"" << m_axi_DATA_A_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_WID\" :  \"" << m_axi_DATA_A_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_WUSER\" :  \"" << m_axi_DATA_A_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_ARVALID\" :  \"" << m_axi_DATA_A_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_A_ARREADY\" :  \"" << m_axi_DATA_A_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_ARADDR\" :  \"" << m_axi_DATA_A_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_ARID\" :  \"" << m_axi_DATA_A_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_ARLEN\" :  \"" << m_axi_DATA_A_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_ARSIZE\" :  \"" << m_axi_DATA_A_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_ARBURST\" :  \"" << m_axi_DATA_A_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_ARLOCK\" :  \"" << m_axi_DATA_A_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_ARCACHE\" :  \"" << m_axi_DATA_A_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_ARPROT\" :  \"" << m_axi_DATA_A_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_ARQOS\" :  \"" << m_axi_DATA_A_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_ARREGION\" :  \"" << m_axi_DATA_A_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_ARUSER\" :  \"" << m_axi_DATA_A_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_A_RVALID\" :  \"" << m_axi_DATA_A_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_RREADY\" :  \"" << m_axi_DATA_A_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_A_RDATA\" :  \"" << m_axi_DATA_A_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_A_RLAST\" :  \"" << m_axi_DATA_A_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_A_RID\" :  \"" << m_axi_DATA_A_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_A_RUSER\" :  \"" << m_axi_DATA_A_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_A_RRESP\" :  \"" << m_axi_DATA_A_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_A_BVALID\" :  \"" << m_axi_DATA_A_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_A_BREADY\" :  \"" << m_axi_DATA_A_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_A_BRESP\" :  \"" << m_axi_DATA_A_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_A_BID\" :  \"" << m_axi_DATA_A_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_A_BUSER\" :  \"" << m_axi_DATA_A_BUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_AWVALID\" :  \"" << m_axi_DATA_B_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_B_AWREADY\" :  \"" << m_axi_DATA_B_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_AWADDR\" :  \"" << m_axi_DATA_B_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_AWID\" :  \"" << m_axi_DATA_B_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_AWLEN\" :  \"" << m_axi_DATA_B_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_AWSIZE\" :  \"" << m_axi_DATA_B_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_AWBURST\" :  \"" << m_axi_DATA_B_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_AWLOCK\" :  \"" << m_axi_DATA_B_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_AWCACHE\" :  \"" << m_axi_DATA_B_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_AWPROT\" :  \"" << m_axi_DATA_B_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_AWQOS\" :  \"" << m_axi_DATA_B_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_AWREGION\" :  \"" << m_axi_DATA_B_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_AWUSER\" :  \"" << m_axi_DATA_B_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_WVALID\" :  \"" << m_axi_DATA_B_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_B_WREADY\" :  \"" << m_axi_DATA_B_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_WDATA\" :  \"" << m_axi_DATA_B_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_WSTRB\" :  \"" << m_axi_DATA_B_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_WLAST\" :  \"" << m_axi_DATA_B_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_WID\" :  \"" << m_axi_DATA_B_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_WUSER\" :  \"" << m_axi_DATA_B_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_ARVALID\" :  \"" << m_axi_DATA_B_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_B_ARREADY\" :  \"" << m_axi_DATA_B_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_ARADDR\" :  \"" << m_axi_DATA_B_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_ARID\" :  \"" << m_axi_DATA_B_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_ARLEN\" :  \"" << m_axi_DATA_B_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_ARSIZE\" :  \"" << m_axi_DATA_B_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_ARBURST\" :  \"" << m_axi_DATA_B_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_ARLOCK\" :  \"" << m_axi_DATA_B_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_ARCACHE\" :  \"" << m_axi_DATA_B_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_ARPROT\" :  \"" << m_axi_DATA_B_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_ARQOS\" :  \"" << m_axi_DATA_B_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_ARREGION\" :  \"" << m_axi_DATA_B_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_ARUSER\" :  \"" << m_axi_DATA_B_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_B_RVALID\" :  \"" << m_axi_DATA_B_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_RREADY\" :  \"" << m_axi_DATA_B_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_B_RDATA\" :  \"" << m_axi_DATA_B_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_B_RLAST\" :  \"" << m_axi_DATA_B_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_B_RID\" :  \"" << m_axi_DATA_B_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_B_RUSER\" :  \"" << m_axi_DATA_B_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_B_RRESP\" :  \"" << m_axi_DATA_B_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_B_BVALID\" :  \"" << m_axi_DATA_B_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_B_BREADY\" :  \"" << m_axi_DATA_B_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_B_BRESP\" :  \"" << m_axi_DATA_B_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_B_BID\" :  \"" << m_axi_DATA_B_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_B_BUSER\" :  \"" << m_axi_DATA_B_BUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_AWVALID\" :  \"" << m_axi_DATA_C_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_C_AWREADY\" :  \"" << m_axi_DATA_C_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_AWADDR\" :  \"" << m_axi_DATA_C_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_AWID\" :  \"" << m_axi_DATA_C_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_AWLEN\" :  \"" << m_axi_DATA_C_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_AWSIZE\" :  \"" << m_axi_DATA_C_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_AWBURST\" :  \"" << m_axi_DATA_C_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_AWLOCK\" :  \"" << m_axi_DATA_C_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_AWCACHE\" :  \"" << m_axi_DATA_C_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_AWPROT\" :  \"" << m_axi_DATA_C_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_AWQOS\" :  \"" << m_axi_DATA_C_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_AWREGION\" :  \"" << m_axi_DATA_C_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_AWUSER\" :  \"" << m_axi_DATA_C_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_WVALID\" :  \"" << m_axi_DATA_C_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_C_WREADY\" :  \"" << m_axi_DATA_C_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_WDATA\" :  \"" << m_axi_DATA_C_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_WSTRB\" :  \"" << m_axi_DATA_C_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_WLAST\" :  \"" << m_axi_DATA_C_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_WID\" :  \"" << m_axi_DATA_C_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_WUSER\" :  \"" << m_axi_DATA_C_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_ARVALID\" :  \"" << m_axi_DATA_C_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_C_ARREADY\" :  \"" << m_axi_DATA_C_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_ARADDR\" :  \"" << m_axi_DATA_C_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_ARID\" :  \"" << m_axi_DATA_C_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_ARLEN\" :  \"" << m_axi_DATA_C_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_ARSIZE\" :  \"" << m_axi_DATA_C_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_ARBURST\" :  \"" << m_axi_DATA_C_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_ARLOCK\" :  \"" << m_axi_DATA_C_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_ARCACHE\" :  \"" << m_axi_DATA_C_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_ARPROT\" :  \"" << m_axi_DATA_C_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_ARQOS\" :  \"" << m_axi_DATA_C_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_ARREGION\" :  \"" << m_axi_DATA_C_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_ARUSER\" :  \"" << m_axi_DATA_C_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_C_RVALID\" :  \"" << m_axi_DATA_C_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_RREADY\" :  \"" << m_axi_DATA_C_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_C_RDATA\" :  \"" << m_axi_DATA_C_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_C_RLAST\" :  \"" << m_axi_DATA_C_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_C_RID\" :  \"" << m_axi_DATA_C_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_C_RUSER\" :  \"" << m_axi_DATA_C_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_C_RRESP\" :  \"" << m_axi_DATA_C_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_C_BVALID\" :  \"" << m_axi_DATA_C_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_DATA_C_BREADY\" :  \"" << m_axi_DATA_C_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_C_BRESP\" :  \"" << m_axi_DATA_C_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_C_BID\" :  \"" << m_axi_DATA_C_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_DATA_C_BUSER\" :  \"" << m_axi_DATA_C_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTL_AWVALID\" :  \"" << s_axi_CTL_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTL_AWREADY\" :  \"" << s_axi_CTL_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTL_AWADDR\" :  \"" << s_axi_CTL_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTL_WVALID\" :  \"" << s_axi_CTL_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTL_WREADY\" :  \"" << s_axi_CTL_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTL_WDATA\" :  \"" << s_axi_CTL_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTL_WSTRB\" :  \"" << s_axi_CTL_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTL_ARVALID\" :  \"" << s_axi_CTL_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTL_ARREADY\" :  \"" << s_axi_CTL_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTL_ARADDR\" :  \"" << s_axi_CTL_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTL_RVALID\" :  \"" << s_axi_CTL_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTL_RREADY\" :  \"" << s_axi_CTL_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTL_RDATA\" :  \"" << s_axi_CTL_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTL_RRESP\" :  \"" << s_axi_CTL_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTL_BVALID\" :  \"" << s_axi_CTL_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTL_BREADY\" :  \"" << s_axi_CTL_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTL_BRESP\" :  \"" << s_axi_CTL_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

