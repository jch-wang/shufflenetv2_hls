-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_16_no_re is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of subconv_3x3_16_no_re is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_11_fu_237_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_11_reg_628 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_122_fu_272_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_122_reg_633 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond7_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_addr_reg_638 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_129_fu_313_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_129_reg_646 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond6_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_132_fu_329_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_132_reg_654 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond5_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_11_fu_334_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_11_reg_659 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_11_fu_340_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_12_fu_356_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_12_reg_672 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_125_fu_390_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_125_reg_677 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond4_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_166_cast_fu_414_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_166_cast_reg_683 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_131_fu_453_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_131_reg_691 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond3_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_12_fu_465_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond2_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_6_fu_477_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_6_reg_707 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_134_fu_487_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_134_reg_712 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond1_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_136_fu_512_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_136_reg_718 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_addr_6_reg_724 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_135_fu_536_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_135_reg_729 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_138_fu_559_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_138_reg_734 : STD_LOGIC_VECTOR (13 downto 0);
    signal n_6_fu_571_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_6_reg_742 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_139_fu_581_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_139_reg_747 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_140_fu_606_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_140_reg_752 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal weight_load_reg_767 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal input_load_reg_772 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_78_reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_221_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal output_load_reg_787 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal w_12_fu_619_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_12_reg_792 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_71_reg_797 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal co_reg_106 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_117 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_129 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal co1_reg_140 : STD_LOGIC_VECTOR (4 downto 0);
    signal h2_reg_151 : STD_LOGIC_VECTOR (4 downto 0);
    signal w3_reg_163 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal sum_reg_175 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_187 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_210 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_175_cast_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_176_cast_fu_526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_184_cast_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_185_cast_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_221_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_221_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_s_fu_248_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_121_fu_260_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_268_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_256_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_67_cast_fu_284_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_128_fu_288_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_118_fu_301_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_293_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl3_cast_fu_309_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_69_cast_fu_325_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_123_fu_366_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_124_fu_378_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl6_cast_fu_386_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_cast_fu_374_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_126_fu_396_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl4_cast_fu_404_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_fu_362_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_127_fu_408_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_68_cast_fu_424_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_130_fu_428_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_119_fu_441_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_cast_fu_433_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl8_cast_fu_449_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_72_cast_fu_483_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_492_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_cast_fu_498_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_73_fu_502_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_74_cast_fu_508_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_70_cast_fu_517_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_133_fu_521_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_120_fu_531_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_137_fu_548_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl10_cast_fu_555_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl9_cast_fu_541_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_75_cast_fu_577_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_586_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_592_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_76_fu_596_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_77_cast_fu_602_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);

    component ShuffleNetV2_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ShuffleNetV2_faddbkb_x_U32 : component ShuffleNetV2_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_221_p0,
        din1 => grp_fu_221_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_221_p2);

    ShuffleNetV2_fmulcud_x_U33 : component ShuffleNetV2_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_load_reg_767,
        din1 => input_load_reg_772,
        ce => ap_const_logic_1,
        dout => grp_fu_227_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co1_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_231_p2 = ap_const_lv1_1))) then 
                co1_reg_140 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond3_fu_418_p2))) then 
                co1_reg_140 <= co_12_reg_672;
            end if; 
        end if;
    end process;

    co_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond6_fu_278_p2 = ap_const_lv1_1))) then 
                co_reg_106 <= co_11_reg_628;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_106 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h2_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond4_fu_350_p2))) then 
                h2_reg_151 <= ap_const_lv5_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond2_fu_459_p2))) then 
                h2_reg_151 <= h_12_fu_465_p2;
            end if; 
        end if;
    end process;

    h_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_231_p2 = ap_const_lv1_0))) then 
                h_reg_117 <= ap_const_lv5_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_fu_319_p2 = ap_const_lv1_1))) then 
                h_reg_117 <= h_11_fu_340_p2;
            end if; 
        end if;
    end process;

    m_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond2_fu_459_p2))) then 
                m_reg_187 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = exitcond_fu_565_p2))) then 
                m_reg_187 <= m_6_reg_707;
            end if; 
        end if;
    end process;

    n_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                n_reg_210 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                n_reg_210 <= n_6_reg_742;
            end if; 
        end if;
    end process;

    sum_1_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_1_reg_198 <= sum_reg_175;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                sum_1_reg_198 <= grp_fu_221_p2;
            end if; 
        end if;
    end process;

    sum_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond2_fu_459_p2))) then 
                sum_reg_175 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = exitcond_fu_565_p2))) then 
                sum_reg_175 <= sum_1_reg_198;
            end if; 
        end if;
    end process;

    w3_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond3_fu_418_p2))) then 
                w3_reg_163 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                w3_reg_163 <= w_12_reg_792;
            end if; 
        end if;
    end process;

    w_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_278_p2))) then 
                w_reg_129 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                w_reg_129 <= w_11_reg_659;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_231_p2 = ap_const_lv1_0))) then
                bias_addr_reg_638 <= tmp_fu_243_p1(5 - 1 downto 0);
                    tmp_122_reg_633(9 downto 1) <= tmp_122_fu_272_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_11_reg_628 <= co_11_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                co_12_reg_672 <= co_12_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                input_load_reg_772 <= input_r_q0;
                weight_load_reg_767 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                m_6_reg_707 <= m_6_fu_477_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                n_6_reg_742 <= n_6_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond1_fu_471_p2))) then
                output_addr_6_reg_724 <= tmp_176_cast_fu_526_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                output_load_reg_787 <= output_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond4_fu_350_p2))) then
                    tmp_125_reg_677(9 downto 1) <= tmp_125_fu_390_p2(9 downto 1);
                tmp_166_cast_reg_683 <= tmp_166_cast_fu_414_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_278_p2))) then
                    tmp_129_reg_646(13 downto 1) <= tmp_129_fu_313_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond3_fu_418_p2))) then
                    tmp_131_reg_691(13 downto 1) <= tmp_131_fu_453_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond5_fu_319_p2))) then
                tmp_132_reg_654 <= tmp_132_fu_329_p2;
                w_11_reg_659 <= w_11_fu_334_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond1_fu_471_p2))) then
                tmp_134_reg_712 <= tmp_134_fu_487_p2;
                tmp_136_reg_718 <= tmp_136_fu_512_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_135_reg_729 <= tmp_135_fu_536_p2;
                    tmp_138_reg_734(13 downto 1) <= tmp_138_fu_559_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = exitcond_fu_565_p2))) then
                tmp_139_reg_747 <= tmp_139_fu_581_p2;
                tmp_140_reg_752 <= tmp_140_fu_606_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_71_reg_797 <= grp_fu_221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_78_reg_777 <= grp_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                w_12_reg_792 <= w_12_fu_619_p2;
            end if;
        end if;
    end process;
    tmp_122_reg_633(0) <= '0';
    tmp_129_reg_646(0) <= '0';
    tmp_125_reg_677(0) <= '0';
    tmp_131_reg_691(0) <= '0';
    tmp_138_reg_734(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond7_fu_231_p2, ap_CS_fsm_state3, exitcond6_fu_278_p2, ap_CS_fsm_state4, exitcond5_fu_319_p2, ap_CS_fsm_state6, exitcond4_fu_350_p2, ap_CS_fsm_state7, exitcond3_fu_418_p2, ap_CS_fsm_state8, exitcond2_fu_459_p2, ap_CS_fsm_state9, exitcond1_fu_471_p2, ap_CS_fsm_state11, exitcond_fu_565_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_231_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond6_fu_278_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_fu_319_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond4_fu_350_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond3_fu_418_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond2_fu_459_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond1_fu_471_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = exitcond_fu_565_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, exitcond4_fu_350_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond4_fu_350_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, exitcond4_fu_350_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond4_fu_350_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_638;

    bias_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_11_fu_237_p2 <= std_logic_vector(unsigned(co_reg_106) + unsigned(ap_const_lv5_1));
    co_12_fu_356_p2 <= std_logic_vector(unsigned(co1_reg_140) + unsigned(ap_const_lv5_1));
    exitcond1_fu_471_p2 <= "1" when (m_reg_187 = ap_const_lv2_3) else "0";
    exitcond2_fu_459_p2 <= "1" when (w3_reg_163 = ap_const_lv5_11) else "0";
    exitcond3_fu_418_p2 <= "1" when (h2_reg_151 = ap_const_lv5_11) else "0";
    exitcond4_fu_350_p2 <= "1" when (co1_reg_140 = ap_const_lv5_18) else "0";
    exitcond5_fu_319_p2 <= "1" when (w_reg_129 = ap_const_lv5_11) else "0";
    exitcond6_fu_278_p2 <= "1" when (h_reg_117 = ap_const_lv5_11) else "0";
    exitcond7_fu_231_p2 <= "1" when (co_reg_106 = ap_const_lv5_18) else "0";
    exitcond_fu_565_p2 <= "1" when (n_reg_210 = ap_const_lv2_3) else "0";

    grp_fu_221_p0_assign_proc : process(output_load_reg_787, ap_CS_fsm_state24, sum_1_reg_198, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_221_p0 <= output_load_reg_787;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_221_p0 <= sum_1_reg_198;
        else 
            grp_fu_221_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_221_p1_assign_proc : process(tmp_78_reg_777, ap_CS_fsm_state24, sum_reg_175, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_221_p1 <= sum_reg_175;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_221_p1 <= tmp_78_reg_777;
        else 
            grp_fu_221_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_11_fu_340_p2 <= std_logic_vector(unsigned(h_reg_117) + unsigned(ap_const_lv5_1));
    h_12_fu_465_p2 <= std_logic_vector(unsigned(h2_reg_151) + unsigned(ap_const_lv5_1));
    input_r_address0 <= tmp_185_cast_fu_615_p1(13 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_6_fu_477_p2 <= std_logic_vector(unsigned(m_reg_187) + unsigned(ap_const_lv2_1));
    n_6_fu_571_p2 <= std_logic_vector(unsigned(n_reg_210) + unsigned(ap_const_lv2_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state9, output_addr_6_reg_724, ap_CS_fsm_state5, ap_CS_fsm_state29, tmp_175_cast_fu_346_p1, tmp_176_cast_fu_526_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_r_address0 <= output_addr_6_reg_724;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_address0 <= tmp_176_cast_fu_526_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_address0 <= tmp_175_cast_fu_346_p1(13 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(bias_q0, tmp_71_reg_797, ap_CS_fsm_state5, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_r_d0 <= tmp_71_reg_797;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_d0 <= bias_q0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl10_cast_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_137_fu_548_p3),14));
    p_shl1_cast_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_121_fu_260_p3),10));
    p_shl2_cast_fu_293_p3 <= (tmp_128_fu_288_p2 & ap_const_lv4_0);
    p_shl3_cast_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_118_fu_301_p3),14));
    p_shl4_cast_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_126_fu_396_p3),8));
    p_shl5_cast_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_123_fu_366_p3),10));
    p_shl6_cast_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_124_fu_378_p3),10));
    p_shl7_cast_fu_433_p3 <= (tmp_130_fu_428_p2 & ap_const_lv4_0);
    p_shl8_cast_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_119_fu_441_p3),14));
    p_shl9_cast_fu_541_p3 <= (tmp_136_reg_718 & ap_const_lv4_0);
    p_shl_cast_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_248_p3),10));
        tmp1_cast_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_492_p2),5));

    tmp1_fu_492_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(m_reg_187));
        tmp2_cast_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_586_p2),5));

    tmp2_fu_586_p2 <= std_logic_vector(unsigned(n_reg_210) + unsigned(ap_const_lv2_3));
    tmp_118_fu_301_p3 <= (tmp_128_fu_288_p2 & ap_const_lv1_0);
    tmp_119_fu_441_p3 <= (tmp_130_fu_428_p2 & ap_const_lv1_0);
    tmp_120_fu_531_p2 <= std_logic_vector(shift_left(unsigned(tmp_134_reg_712),to_integer(unsigned('0' & ap_const_lv9_2(9-1 downto 0)))));
    tmp_121_fu_260_p3 <= (co_reg_106 & ap_const_lv1_0);
    tmp_122_fu_272_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_268_p1) + unsigned(p_shl_cast_fu_256_p1));
    tmp_123_fu_366_p3 <= (co1_reg_140 & ap_const_lv4_0);
    tmp_124_fu_378_p3 <= (co1_reg_140 & ap_const_lv1_0);
    tmp_125_fu_390_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_386_p1) + unsigned(p_shl5_cast_fu_374_p1));
    tmp_126_fu_396_p3 <= (co1_reg_140 & ap_const_lv2_0);
    tmp_127_fu_408_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_404_p1) - unsigned(tmp_cast_fu_362_p1));
    tmp_128_fu_288_p2 <= std_logic_vector(unsigned(tmp_67_cast_fu_284_p1) + unsigned(tmp_122_reg_633));
    tmp_129_fu_313_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_293_p3) + unsigned(p_shl3_cast_fu_309_p1));
    tmp_130_fu_428_p2 <= std_logic_vector(unsigned(tmp_68_cast_fu_424_p1) + unsigned(tmp_125_reg_677));
    tmp_131_fu_453_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_433_p3) + unsigned(p_shl8_cast_fu_449_p1));
    tmp_132_fu_329_p2 <= std_logic_vector(unsigned(tmp_129_reg_646) + unsigned(tmp_69_cast_fu_325_p1));
    tmp_133_fu_521_p2 <= std_logic_vector(unsigned(tmp_131_reg_691) + unsigned(tmp_70_cast_fu_517_p1));
    tmp_134_fu_487_p2 <= std_logic_vector(signed(tmp_166_cast_reg_683) + signed(tmp_72_cast_fu_483_p1));
    tmp_135_fu_536_p2 <= std_logic_vector(unsigned(tmp_120_fu_531_p2) - unsigned(tmp_134_reg_712));
    tmp_136_fu_512_p2 <= std_logic_vector(unsigned(tmp_125_reg_677) + unsigned(tmp_74_cast_fu_508_p1));
    tmp_137_fu_548_p3 <= (tmp_136_reg_718 & ap_const_lv1_0);
    tmp_138_fu_559_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_555_p1) + unsigned(p_shl9_cast_fu_541_p3));
    tmp_139_fu_581_p2 <= std_logic_vector(unsigned(tmp_135_reg_729) + unsigned(tmp_75_cast_fu_577_p1));
    tmp_140_fu_606_p2 <= std_logic_vector(unsigned(tmp_138_reg_734) + unsigned(tmp_77_cast_fu_602_p1));
        tmp_166_cast_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_127_fu_408_p2),9));

    tmp_175_cast_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_132_reg_654),64));
    tmp_176_cast_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_133_fu_521_p2),64));
    tmp_184_cast_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_139_reg_747),64));
    tmp_185_cast_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_140_reg_752),64));
    tmp_67_cast_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_117),10));
    tmp_68_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h2_reg_151),10));
    tmp_69_cast_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_129),14));
    tmp_70_cast_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w3_reg_163),14));
    tmp_72_cast_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_187),9));
    tmp_73_fu_502_p2 <= std_logic_vector(unsigned(h2_reg_151) + unsigned(tmp1_cast_fu_498_p1));
    tmp_74_cast_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_73_fu_502_p2),10));
    tmp_75_cast_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_210),9));
    tmp_76_fu_596_p2 <= std_logic_vector(unsigned(w3_reg_163) + unsigned(tmp2_cast_fu_592_p1));
    tmp_77_cast_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_76_fu_596_p2),14));
    tmp_cast_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co1_reg_140),8));
    tmp_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_106),64));
    tmp_s_fu_248_p3 <= (co_reg_106 & ap_const_lv4_0);
    w_11_fu_334_p2 <= std_logic_vector(unsigned(w_reg_129) + unsigned(ap_const_lv5_1));
    w_12_fu_619_p2 <= std_logic_vector(unsigned(w3_reg_163) + unsigned(ap_const_lv5_1));
    weight_address0 <= tmp_184_cast_fu_611_p1(8 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
