-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv1_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv1_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (35 downto 0) := "000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (35 downto 0) := "000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (35 downto 0) := "000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (35 downto 0) := "000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (35 downto 0) := "000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (35 downto 0) := "000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (35 downto 0) := "000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (35 downto 0) := "000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (35 downto 0) := "000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (35 downto 0) := "001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (35 downto 0) := "010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (35 downto 0) := "100000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_321 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal co_43_fu_333_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_43_reg_963 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_439_fu_368_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_439_reg_968 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond11_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_addr_reg_973 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_446_fu_409_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_446_reg_981 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond10_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_452_fu_425_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_452_reg_989 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond9_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_42_fu_430_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_42_reg_994 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_43_fu_436_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal co_44_fu_452_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_44_reg_1007 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_587_cast_fu_480_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_587_cast_reg_1012 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond8_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_444_fu_508_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_444_reg_1017 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_451_fu_549_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_451_reg_1025 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond7_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_44_fu_561_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond6_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ci_8_fu_573_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ci_8_reg_1041 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_459_fu_607_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_459_reg_1046 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond5_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_461_fu_634_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_461_reg_1051 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_addr_16_reg_1056 : STD_LOGIC_VECTOR (14 downto 0);
    signal m_7_fu_660_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_7_reg_1064 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_463_fu_691_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_463_reg_1069 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond4_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_464_fu_717_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_464_reg_1074 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_465_fu_740_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_465_reg_1080 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal n_7_fu_752_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_7_reg_1088 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_466_fu_762_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_466_reg_1093 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond3_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_467_fu_787_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_467_reg_1098 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal weight_load_reg_1113 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal input_load_reg_1118 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_312_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_158_reg_1123 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_306_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal w_43_fu_800_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_43_reg_1133 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_150_reg_1138 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal co_45_fu_812_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_45_reg_1146 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_449_fu_842_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_449_reg_1151 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond2_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_454_fu_883_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_454_reg_1159 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal exitcond1_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_15_reg_1167 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal exitcond_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_45_fu_909_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal notlhs_fu_933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_1177 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal notrhs_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_1182 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_reg_1187 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_44_fu_954_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal co_reg_133 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_144 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_reg_156 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal co1_reg_167 : STD_LOGIC_VECTOR (4 downto 0);
    signal h2_reg_178 : STD_LOGIC_VECTOR (5 downto 0);
    signal w3_reg_190 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ci_reg_202 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_225 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_260 : STD_LOGIC_VECTOR (1 downto 0);
    signal co4_reg_271 : STD_LOGIC_VECTOR (4 downto 0);
    signal h5_reg_282 : STD_LOGIC_VECTOR (5 downto 0);
    signal w6_reg_294 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_602_cast_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_608_cast_fu_649_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_622_cast_fu_792_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_623_cast_fu_796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_607_cast_fu_904_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_fu_949_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_306_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_306_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_s_fu_344_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_438_fu_356_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_364_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_352_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_144_cast_fu_380_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_445_fu_384_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_355_fu_397_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl2_cast_fu_389_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl3_cast_fu_405_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_146_cast_fu_421_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_440_fu_462_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl6_cast_fu_470_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_fu_458_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_441_fu_474_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_442_fu_484_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_443_fu_496_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl5_cast_fu_504_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_492_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_145_cast_fu_520_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_450_fu_524_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_356_fu_537_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl7_cast_fu_529_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl8_cast_fu_545_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_457_fu_583_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_458_fu_595_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl11_cast_fu_603_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl10_cast_fu_591_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_151_cast_fu_579_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_460_fu_613_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_359_fu_622_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl9_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_612_cast_fu_618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_149_cast_fu_640_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_456_fu_644_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_152_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_462_fu_670_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_361_fu_679_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl14_cast_fu_683_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_360_fu_675_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp1_fu_697_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_cast_fu_703_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_153_fu_707_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_154_cast_fu_713_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_362_fu_729_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl13_cast_fu_736_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl12_cast_fu_722_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_155_cast_fu_758_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_fu_767_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_773_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_156_fu_777_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_157_cast_fu_783_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_447_fu_818_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_448_fu_830_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl16_cast_fu_838_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl15_cast_fu_826_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_147_cast_fu_854_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_453_fu_858_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_357_fu_871_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl17_cast_fu_863_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl18_cast_fu_879_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_148_cast_fu_895_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_455_fu_899_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_load_to_int_fu_915_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_919_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_358_fu_929_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_38_fu_945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (35 downto 0);

    component ShuffleNetV2_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fcmpdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    ShuffleNetV2_faddbkb_U1 : component ShuffleNetV2_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_306_p0,
        din1 => grp_fu_306_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_306_p2);

    ShuffleNetV2_fmulcud_U2 : component ShuffleNetV2_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_load_reg_1113,
        din1 => input_load_reg_1118,
        ce => ap_const_logic_1,
        dout => grp_fu_312_p2);

    ShuffleNetV2_fcmpdEe_U3 : component ShuffleNetV2_fcmpdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_321,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_4,
        dout => tmp_39_fu_316_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ci_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond6_fu_555_p2))) then 
                ci_reg_202 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond4_fu_654_p2))) then 
                ci_reg_202 <= ci_8_reg_1041;
            end if; 
        end if;
    end process;

    co1_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond11_fu_327_p2 = ap_const_lv1_1))) then 
                co1_reg_167 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond7_fu_514_p2))) then 
                co1_reg_167 <= co_44_reg_1007;
            end if; 
        end if;
    end process;

    co4_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond8_fu_446_p2))) then 
                co4_reg_271 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_1 = exitcond1_fu_848_p2))) then 
                co4_reg_271 <= co_45_reg_1146;
            end if; 
        end if;
    end process;

    co_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond10_fu_374_p2 = ap_const_lv1_1))) then 
                co_reg_133 <= co_43_reg_963;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_133 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h2_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond8_fu_446_p2))) then 
                h2_reg_178 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond6_fu_555_p2))) then 
                h2_reg_178 <= h_44_fu_561_p2;
            end if; 
        end if;
    end process;

    h5_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_lv1_0 = exitcond2_fu_806_p2))) then 
                h5_reg_282 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_1 = exitcond_fu_889_p2))) then 
                h5_reg_282 <= h_45_fu_909_p2;
            end if; 
        end if;
    end process;

    h_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond11_fu_327_p2 = ap_const_lv1_0))) then 
                h_reg_144 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond9_fu_415_p2 = ap_const_lv1_1))) then 
                h_reg_144 <= h_43_fu_436_p2;
            end if; 
        end if;
    end process;

    m_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = exitcond3_fu_746_p2))) then 
                m_reg_225 <= m_7_reg_1064;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond5_fu_567_p2))) then 
                m_reg_225 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                n_reg_260 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                n_reg_260 <= n_7_reg_1088;
            end if; 
        end if;
    end process;

    sum_1_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = exitcond3_fu_746_p2))) then 
                sum_1_reg_236 <= sum_2_reg_248;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond5_fu_567_p2))) then 
                sum_1_reg_236 <= sum_reg_213;
            end if; 
        end if;
    end process;

    sum_2_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                sum_2_reg_248 <= sum_1_reg_236;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                sum_2_reg_248 <= grp_fu_306_p2;
            end if; 
        end if;
    end process;

    sum_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond6_fu_555_p2))) then 
                sum_reg_213 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond4_fu_654_p2))) then 
                sum_reg_213 <= sum_1_reg_236;
            end if; 
        end if;
    end process;

    w3_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond7_fu_514_p2))) then 
                w3_reg_190 <= ap_const_lv6_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                w3_reg_190 <= w_43_reg_1133;
            end if; 
        end if;
    end process;

    w6_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = exitcond1_fu_848_p2))) then 
                w6_reg_294 <= ap_const_lv6_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                w6_reg_294 <= w_44_fu_954_p2;
            end if; 
        end if;
    end process;

    w_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond10_fu_374_p2))) then 
                w_reg_156 <= ap_const_lv6_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                w_reg_156 <= w_42_reg_994;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond11_fu_327_p2 = ap_const_lv1_0))) then
                bias_addr_reg_973 <= tmp_fu_339_p1(5 - 1 downto 0);
                    tmp_439_reg_968(10 downto 1) <= tmp_439_fu_368_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                ci_8_reg_1041 <= ci_8_fu_573_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_43_reg_963 <= co_43_fu_333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                co_44_reg_1007 <= co_44_fu_452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                co_45_reg_1146 <= co_45_fu_812_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                input_load_reg_1118 <= input_r_q0;
                weight_load_reg_1113 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                m_7_reg_1064 <= m_7_fu_660_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                n_7_reg_1088 <= n_7_fu_752_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                notlhs_reg_1177 <= notlhs_fu_933_p2;
                notrhs_reg_1182 <= notrhs_fu_939_p2;
                tmp_39_reg_1187 <= tmp_39_fu_316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_0 = exitcond_fu_889_p2))) then
                output_addr_15_reg_1167 <= tmp_607_cast_fu_904_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond5_fu_567_p2))) then
                output_addr_16_reg_1056 <= tmp_608_cast_fu_649_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state34))) then
                reg_321 <= output_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                tmp_150_reg_1138 <= grp_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_158_reg_1123 <= grp_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond8_fu_446_p2))) then
                    tmp_444_reg_1017(10 downto 1) <= tmp_444_fu_508_p2(10 downto 1);
                tmp_587_cast_reg_1012 <= tmp_587_cast_fu_480_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond10_fu_374_p2))) then
                    tmp_446_reg_981(15 downto 1) <= tmp_446_fu_409_p2(15 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_lv1_0 = exitcond2_fu_806_p2))) then
                    tmp_449_reg_1151(10 downto 1) <= tmp_449_fu_842_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond7_fu_514_p2))) then
                    tmp_451_reg_1025(15 downto 1) <= tmp_451_fu_549_p2(15 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond9_fu_415_p2))) then
                tmp_452_reg_989 <= tmp_452_fu_425_p2;
                w_42_reg_994 <= w_42_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_0 = exitcond1_fu_848_p2))) then
                    tmp_454_reg_1159(15 downto 1) <= tmp_454_fu_883_p2(15 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond5_fu_567_p2))) then
                    tmp_459_reg_1046(7 downto 1) <= tmp_459_fu_607_p2(7 downto 1);
                tmp_461_reg_1051 <= tmp_461_fu_634_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = exitcond4_fu_654_p2))) then
                tmp_463_reg_1069 <= tmp_463_fu_691_p2;
                tmp_464_reg_1074 <= tmp_464_fu_717_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                    tmp_465_reg_1080(12 downto 1) <= tmp_465_fu_740_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = exitcond3_fu_746_p2))) then
                tmp_466_reg_1093 <= tmp_466_fu_762_p2;
                tmp_467_reg_1098 <= tmp_467_fu_787_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                w_43_reg_1133 <= w_43_fu_800_p2;
            end if;
        end if;
    end process;
    tmp_439_reg_968(0) <= '0';
    tmp_446_reg_981(0) <= '0';
    tmp_444_reg_1017(0) <= '0';
    tmp_451_reg_1025(0) <= '0';
    tmp_459_reg_1046(0) <= '0';
    tmp_465_reg_1080(0) <= '0';
    tmp_449_reg_1151(0) <= '0';
    tmp_454_reg_1159(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond11_fu_327_p2, ap_CS_fsm_state3, exitcond10_fu_374_p2, ap_CS_fsm_state4, exitcond9_fu_415_p2, ap_CS_fsm_state6, exitcond8_fu_446_p2, ap_CS_fsm_state7, exitcond7_fu_514_p2, ap_CS_fsm_state8, exitcond6_fu_555_p2, ap_CS_fsm_state9, exitcond5_fu_567_p2, ap_CS_fsm_state10, exitcond4_fu_654_p2, ap_CS_fsm_state12, exitcond3_fu_746_p2, ap_CS_fsm_state31, exitcond2_fu_806_p2, ap_CS_fsm_state32, exitcond1_fu_848_p2, ap_CS_fsm_state33, exitcond_fu_889_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond11_fu_327_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond10_fu_374_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond9_fu_415_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond8_fu_446_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond7_fu_514_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond6_fu_555_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond5_fu_567_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond4_fu_654_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = exitcond3_fu_746_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_lv1_1 = exitcond2_fu_806_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_1 = exitcond1_fu_848_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_1 = exitcond_fu_889_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state31, exitcond2_fu_806_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_lv1_1 = exitcond2_fu_806_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state31, exitcond2_fu_806_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_lv1_1 = exitcond2_fu_806_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_973;

    bias_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ci_8_fu_573_p2 <= std_logic_vector(unsigned(ci_reg_202) + unsigned(ap_const_lv2_1));
    co_43_fu_333_p2 <= std_logic_vector(unsigned(co_reg_133) + unsigned(ap_const_lv5_1));
    co_44_fu_452_p2 <= std_logic_vector(unsigned(co1_reg_167) + unsigned(ap_const_lv5_1));
    co_45_fu_812_p2 <= std_logic_vector(unsigned(co4_reg_271) + unsigned(ap_const_lv5_1));
    exitcond10_fu_374_p2 <= "1" when (h_reg_144 = ap_const_lv6_21) else "0";
    exitcond11_fu_327_p2 <= "1" when (co_reg_133 = ap_const_lv5_18) else "0";
    exitcond1_fu_848_p2 <= "1" when (h5_reg_282 = ap_const_lv6_21) else "0";
    exitcond2_fu_806_p2 <= "1" when (co4_reg_271 = ap_const_lv5_18) else "0";
    exitcond3_fu_746_p2 <= "1" when (n_reg_260 = ap_const_lv2_3) else "0";
    exitcond4_fu_654_p2 <= "1" when (m_reg_225 = ap_const_lv2_3) else "0";
    exitcond5_fu_567_p2 <= "1" when (ci_reg_202 = ap_const_lv2_3) else "0";
    exitcond6_fu_555_p2 <= "1" when (w3_reg_190 = ap_const_lv6_21) else "0";
    exitcond7_fu_514_p2 <= "1" when (h2_reg_178 = ap_const_lv6_21) else "0";
    exitcond8_fu_446_p2 <= "1" when (co1_reg_167 = ap_const_lv5_18) else "0";
    exitcond9_fu_415_p2 <= "1" when (w_reg_156 = ap_const_lv6_21) else "0";
    exitcond_fu_889_p2 <= "1" when (w6_reg_294 = ap_const_lv6_21) else "0";

    grp_fu_306_p0_assign_proc : process(reg_321, sum_2_reg_248, ap_CS_fsm_state19, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_306_p0 <= reg_321;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_306_p0 <= sum_2_reg_248;
        else 
            grp_fu_306_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_306_p1_assign_proc : process(tmp_158_reg_1123, sum_reg_213, ap_CS_fsm_state19, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_306_p1 <= sum_reg_213;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_306_p1 <= tmp_158_reg_1123;
        else 
            grp_fu_306_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_43_fu_436_p2 <= std_logic_vector(unsigned(h_reg_144) + unsigned(ap_const_lv6_1));
    h_44_fu_561_p2 <= std_logic_vector(unsigned(h2_reg_178) + unsigned(ap_const_lv6_1));
    h_45_fu_909_p2 <= std_logic_vector(unsigned(h5_reg_282) + unsigned(ap_const_lv6_1));
    input_r_address0 <= tmp_623_cast_fu_796_p1(12 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_7_fu_660_p2 <= std_logic_vector(unsigned(m_reg_225) + unsigned(ap_const_lv2_1));
    n_7_fu_752_p2 <= std_logic_vector(unsigned(n_reg_260) + unsigned(ap_const_lv2_1));
    notlhs_fu_933_p2 <= "0" when (tmp_36_fu_919_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_939_p2 <= "1" when (tmp_358_fu_929_p1 = ap_const_lv23_0) else "0";
    output_load_to_int_fu_915_p1 <= reg_321;

    output_r_address0_assign_proc : process(ap_CS_fsm_state9, output_addr_16_reg_1056, output_addr_15_reg_1167, ap_CS_fsm_state33, ap_CS_fsm_state36, ap_CS_fsm_state5, ap_CS_fsm_state30, tmp_602_cast_fu_442_p1, tmp_608_cast_fu_649_p1, tmp_607_cast_fu_904_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            output_r_address0 <= output_addr_15_reg_1167;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            output_r_address0 <= tmp_607_cast_fu_904_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            output_r_address0 <= output_addr_16_reg_1056;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_address0 <= tmp_608_cast_fu_649_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_address0 <= tmp_602_cast_fu_442_p1(15 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state33, ap_CS_fsm_state36, ap_CS_fsm_state5, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(bias_q0, tmp_150_reg_1138, ap_CS_fsm_state36, ap_CS_fsm_state5, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            output_r_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            output_r_d0 <= tmp_150_reg_1138;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_d0 <= bias_q0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state36, ap_CS_fsm_state5, ap_CS_fsm_state30, tmp_40_fu_949_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state36) and (ap_const_lv1_1 = tmp_40_fu_949_p2)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl10_cast_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_457_fu_583_p3),8));
    p_shl11_cast_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_458_fu_595_p3),8));
    p_shl12_cast_fu_722_p3 <= (tmp_464_reg_1074 & ap_const_lv5_0);
    p_shl13_cast_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_362_fu_729_p3),13));
    p_shl14_cast_fu_683_p3 <= (tmp_361_fu_679_p1 & ap_const_lv2_0);
    p_shl15_cast_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_447_fu_818_p3),11));
    p_shl16_cast_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_448_fu_830_p3),11));
    p_shl17_cast_fu_863_p3 <= (tmp_453_fu_858_p2 & ap_const_lv5_0);
    p_shl18_cast_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_357_fu_871_p3),16));
    p_shl1_cast_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_438_fu_356_p3),11));
    p_shl2_cast_fu_389_p3 <= (tmp_445_fu_384_p2 & ap_const_lv5_0);
    p_shl3_cast_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_355_fu_397_p3),16));
    p_shl4_cast_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_442_fu_484_p3),11));
    p_shl5_cast_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_443_fu_496_p3),11));
    p_shl6_cast_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_440_fu_462_p3),8));
    p_shl7_cast_fu_529_p3 <= (tmp_450_fu_524_p2 & ap_const_lv5_0);
    p_shl8_cast_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_356_fu_537_p3),16));
        p_shl9_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_359_fu_622_p3),64));

    p_shl_cast_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_344_p3),11));
        tmp1_cast_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_697_p2),6));

    tmp1_fu_697_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(m_reg_225));
        tmp2_cast_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_767_p2),6));

    tmp2_fu_767_p2 <= std_logic_vector(unsigned(n_reg_260) + unsigned(ap_const_lv2_3));
    tmp_144_cast_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_144),11));
    tmp_145_cast_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h2_reg_178),11));
    tmp_146_cast_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_156),16));
    tmp_147_cast_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h5_reg_282),11));
    tmp_148_cast_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w6_reg_294),16));
    tmp_149_cast_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w3_reg_190),16));
    tmp_151_cast_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_202),9));
    tmp_152_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_225),64));
    tmp_153_fu_707_p2 <= std_logic_vector(unsigned(h2_reg_178) + unsigned(tmp1_cast_fu_703_p1));
    tmp_154_cast_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_153_fu_707_p2),8));
    tmp_155_cast_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_260),11));
    tmp_156_fu_777_p2 <= std_logic_vector(unsigned(w3_reg_190) + unsigned(tmp2_cast_fu_773_p1));
    tmp_157_cast_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_156_fu_777_p2),13));
    tmp_355_fu_397_p3 <= (tmp_445_fu_384_p2 & ap_const_lv1_0);
    tmp_356_fu_537_p3 <= (tmp_450_fu_524_p2 & ap_const_lv1_0);
    tmp_357_fu_871_p3 <= (tmp_453_fu_858_p2 & ap_const_lv1_0);
    tmp_358_fu_929_p1 <= output_load_to_int_fu_915_p1(23 - 1 downto 0);
    tmp_359_fu_622_p3 <= (tmp_460_fu_613_p2 & ap_const_lv2_0);
    tmp_360_fu_675_p1 <= tmp_462_fu_670_p2(11 - 1 downto 0);
    tmp_361_fu_679_p1 <= tmp_462_fu_670_p2(9 - 1 downto 0);
    tmp_362_fu_729_p3 <= (tmp_464_reg_1074 & ap_const_lv1_0);
    tmp_36_fu_919_p4 <= output_load_to_int_fu_915_p1(30 downto 23);
    tmp_38_fu_945_p2 <= (notrhs_reg_1182 or notlhs_reg_1177);
    tmp_40_fu_949_p2 <= (tmp_38_fu_945_p2 and tmp_39_reg_1187);
    tmp_438_fu_356_p3 <= (co_reg_133 & ap_const_lv1_0);
    tmp_439_fu_368_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_364_p1) + unsigned(p_shl_cast_fu_352_p1));
    tmp_440_fu_462_p3 <= (co1_reg_167 & ap_const_lv2_0);
    tmp_441_fu_474_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_470_p1) - unsigned(tmp_cast_fu_458_p1));
    tmp_442_fu_484_p3 <= (co1_reg_167 & ap_const_lv5_0);
    tmp_443_fu_496_p3 <= (co1_reg_167 & ap_const_lv1_0);
    tmp_444_fu_508_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_504_p1) + unsigned(p_shl4_cast_fu_492_p1));
    tmp_445_fu_384_p2 <= std_logic_vector(unsigned(tmp_144_cast_fu_380_p1) + unsigned(tmp_439_reg_968));
    tmp_446_fu_409_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_389_p3) + unsigned(p_shl3_cast_fu_405_p1));
    tmp_447_fu_818_p3 <= (co4_reg_271 & ap_const_lv5_0);
    tmp_448_fu_830_p3 <= (co4_reg_271 & ap_const_lv1_0);
    tmp_449_fu_842_p2 <= std_logic_vector(unsigned(p_shl16_cast_fu_838_p1) + unsigned(p_shl15_cast_fu_826_p1));
    tmp_450_fu_524_p2 <= std_logic_vector(unsigned(tmp_145_cast_fu_520_p1) + unsigned(tmp_444_reg_1017));
    tmp_451_fu_549_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_529_p3) + unsigned(p_shl8_cast_fu_545_p1));
    tmp_452_fu_425_p2 <= std_logic_vector(unsigned(tmp_446_reg_981) + unsigned(tmp_146_cast_fu_421_p1));
    tmp_453_fu_858_p2 <= std_logic_vector(unsigned(tmp_147_cast_fu_854_p1) + unsigned(tmp_449_reg_1151));
    tmp_454_fu_883_p2 <= std_logic_vector(unsigned(p_shl17_cast_fu_863_p3) + unsigned(p_shl18_cast_fu_879_p1));
    tmp_455_fu_899_p2 <= std_logic_vector(unsigned(tmp_454_reg_1159) + unsigned(tmp_148_cast_fu_895_p1));
    tmp_456_fu_644_p2 <= std_logic_vector(unsigned(tmp_451_reg_1025) + unsigned(tmp_149_cast_fu_640_p1));
    tmp_457_fu_583_p3 <= (ci_reg_202 & ap_const_lv5_0);
    tmp_458_fu_595_p3 <= (ci_reg_202 & ap_const_lv1_0);
    tmp_459_fu_607_p2 <= std_logic_vector(unsigned(p_shl11_cast_fu_603_p1) + unsigned(p_shl10_cast_fu_591_p1));
    tmp_460_fu_613_p2 <= std_logic_vector(signed(tmp_587_cast_reg_1012) + signed(tmp_151_cast_fu_579_p1));
    tmp_461_fu_634_p2 <= std_logic_vector(signed(p_shl9_fu_630_p1) - signed(tmp_612_cast_fu_618_p1));
    tmp_462_fu_670_p2 <= std_logic_vector(unsigned(tmp_461_reg_1051) + unsigned(tmp_152_fu_666_p1));
    tmp_463_fu_691_p2 <= std_logic_vector(unsigned(p_shl14_cast_fu_683_p3) - unsigned(tmp_360_fu_675_p1));
    tmp_464_fu_717_p2 <= std_logic_vector(unsigned(tmp_459_reg_1046) + unsigned(tmp_154_cast_fu_713_p1));
    tmp_465_fu_740_p2 <= std_logic_vector(unsigned(p_shl13_cast_fu_736_p1) + unsigned(p_shl12_cast_fu_722_p3));
    tmp_466_fu_762_p2 <= std_logic_vector(unsigned(tmp_463_reg_1069) + unsigned(tmp_155_cast_fu_758_p1));
    tmp_467_fu_787_p2 <= std_logic_vector(unsigned(tmp_465_reg_1080) + unsigned(tmp_157_cast_fu_783_p1));
        tmp_587_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_441_fu_474_p2),9));

    tmp_602_cast_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_452_reg_989),64));
    tmp_607_cast_fu_904_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_455_fu_899_p2),64));
    tmp_608_cast_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_456_fu_644_p2),64));
        tmp_612_cast_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_460_fu_613_p2),64));

    tmp_622_cast_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_466_reg_1093),64));
    tmp_623_cast_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_467_reg_1098),64));
    tmp_cast_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co1_reg_167),8));
    tmp_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_133),64));
    tmp_s_fu_344_p3 <= (co_reg_133 & ap_const_lv5_0);
    w_42_fu_430_p2 <= std_logic_vector(unsigned(w_reg_156) + unsigned(ap_const_lv6_1));
    w_43_fu_800_p2 <= std_logic_vector(unsigned(w3_reg_190) + unsigned(ap_const_lv6_1));
    w_44_fu_954_p2 <= std_logic_vector(unsigned(w6_reg_294) + unsigned(ap_const_lv6_1));
    weight_address0 <= tmp_622_cast_fu_792_p1(10 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
