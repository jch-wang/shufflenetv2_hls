-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_1x1_16p_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ShuffleConvs_1_Downs_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ShuffleConvs_1_Downs_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_we0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ShuffleConvs_1_Downs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shuffleunit0_2_outpu_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    shuffleunit0_2_outpu_ce0 : OUT STD_LOGIC;
    shuffleunit0_2_outpu_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of subconv_1x1_16p_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal co_25_fu_270_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal co_25_reg_772 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_266_fu_305_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_266_reg_777 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond9_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_addr_reg_782 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_273_fu_346_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_273_reg_790 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond8_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_279_fu_362_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_279_reg_798 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond7_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_25_fu_367_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_25_reg_803 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_25_fu_373_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_26_fu_389_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal co_26_reg_816 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_269_fu_423_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_269_reg_821 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond6_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_271_fu_441_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_271_reg_826 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_111_cast_fu_453_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_111_cast_reg_834 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond5_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_278_fu_482_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_278_reg_839 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_114_cast_fu_494_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_114_cast_reg_847 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond4_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ShuffleConvs_1_Downs_2_reg_852 : STD_LOGIC_VECTOR (13 downto 0);
    signal h_26_fu_508_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ci_5_fu_520_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ci_5_reg_865 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_286_fu_530_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_286_reg_870 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond3_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_293_fu_596_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_293_reg_875 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_26_fu_601_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_26_reg_880 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal weight_load_reg_895 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal shuffleunit0_2_outpu_1_reg_900 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_118_reg_905 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_116_reg_915 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal co_27_fu_621_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal co_27_reg_923 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_276_fu_651_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_276_reg_928 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond2_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_282_fu_692_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_282_reg_936 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal exitcond1_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ShuffleConvs_1_Downs_4_reg_944 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal exitcond_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_27_fu_718_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal notlhs_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_954 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal notrhs_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_959 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_964 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_27_fu_763_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal co_reg_116 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_reg_127 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_139 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal co1_reg_150 : STD_LOGIC_VECTOR (5 downto 0);
    signal h2_reg_161 : STD_LOGIC_VECTOR (4 downto 0);
    signal w3_reg_173 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal sum_reg_185 : STD_LOGIC_VECTOR (31 downto 0);
    signal ci_reg_197 : STD_LOGIC_VECTOR (5 downto 0);
    signal co4_reg_208 : STD_LOGIC_VECTOR (5 downto 0);
    signal h5_reg_219 : STD_LOGIC_VECTOR (4 downto 0);
    signal w6_reg_231 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_350_cast_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_355_cast_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_357_cast_fu_607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_365_cast_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_356_cast_fu_713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_243_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_243_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_s_fu_281_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_265_fu_293_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_301_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_289_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_cast_fu_317_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_272_fu_321_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_263_fu_334_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl2_cast_fu_326_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl3_cast_fu_342_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_112_cast_fu_358_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_267_fu_395_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_268_fu_407_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl6_cast_fu_403_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl7_cast_fu_419_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_270_fu_429_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl5_cast_fu_437_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_cast1_fu_415_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_277_fu_457_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_264_fu_470_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl8_cast_fu_462_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl9_cast_fu_478_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_283_fu_498_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_117_cast_fu_526_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_287_fu_535_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_288_fu_547_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl12_cast_fu_543_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl13_cast_fu_555_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_289_fu_559_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_290_fu_565_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_291_fu_578_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl10_cast_fu_570_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl11_cast_fu_586_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_292_fu_590_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_274_fu_627_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_275_fu_639_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl15_cast_fu_647_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl14_cast_fu_635_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_113_cast_fu_663_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_280_fu_667_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_281_fu_680_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl16_cast_fu_672_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl17_cast_fu_688_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_115_cast_fu_704_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_284_fu_708_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ShuffleConvs_1_Downs_7_fu_724_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_728_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_285_fu_738_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_23_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);

    component ShuffleNetV2_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fcmpdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    ShuffleNetV2_faddbkb_x_U41 : component ShuffleNetV2_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_243_p0,
        din1 => grp_fu_243_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_243_p2);

    ShuffleNetV2_fmulcud_x_U42 : component ShuffleNetV2_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_load_reg_895,
        din1 => shuffleunit0_2_outpu_1_reg_900,
        ce => ap_const_logic_1,
        dout => grp_fu_249_p2);

    ShuffleNetV2_fcmpdEe_x_U43 : component ShuffleNetV2_fcmpdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_258,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_4,
        dout => tmp_24_fu_253_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ci_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond4_fu_488_p2))) then 
                ci_reg_197 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                ci_reg_197 <= ci_5_reg_865;
            end if; 
        end if;
    end process;

    co1_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_264_p2 = ap_const_lv1_1))) then 
                co1_reg_150 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond5_fu_447_p2))) then 
                co1_reg_150 <= co_26_reg_816;
            end if; 
        end if;
    end process;

    co4_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond6_fu_383_p2))) then 
                co4_reg_208 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_lv1_1 = exitcond1_fu_657_p2))) then 
                co4_reg_208 <= co_27_reg_923;
            end if; 
        end if;
    end process;

    co_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond8_fu_311_p2 = ap_const_lv1_1))) then 
                co_reg_116 <= co_25_reg_772;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_116 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    h2_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond6_fu_383_p2))) then 
                h2_reg_161 <= ap_const_lv5_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond4_fu_488_p2))) then 
                h2_reg_161 <= h_26_fu_508_p2;
            end if; 
        end if;
    end process;

    h5_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = exitcond2_fu_615_p2))) then 
                h5_reg_219 <= ap_const_lv5_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_1 = exitcond_fu_698_p2))) then 
                h5_reg_219 <= h_27_fu_718_p2;
            end if; 
        end if;
    end process;

    h_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_264_p2 = ap_const_lv1_0))) then 
                h_reg_127 <= ap_const_lv5_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_352_p2 = ap_const_lv1_1))) then 
                h_reg_127 <= h_25_fu_373_p2;
            end if; 
        end if;
    end process;

    sum_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond4_fu_488_p2))) then 
                sum_reg_185 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                sum_reg_185 <= grp_fu_243_p2;
            end if; 
        end if;
    end process;

    w3_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond5_fu_447_p2))) then 
                w3_reg_173 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                w3_reg_173 <= w_26_reg_880;
            end if; 
        end if;
    end process;

    w6_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_lv1_0 = exitcond1_fu_657_p2))) then 
                w6_reg_231 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                w6_reg_231 <= w_27_fu_763_p2;
            end if; 
        end if;
    end process;

    w_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond8_fu_311_p2))) then 
                w_reg_139 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                w_reg_139 <= w_25_reg_803;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond4_fu_488_p2))) then
                ShuffleConvs_1_Downs_2_reg_852 <= tmp_355_cast_fu_503_p1(14 - 1 downto 0);
                    tmp_114_cast_reg_847(4 downto 0) <= tmp_114_cast_fu_494_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = exitcond_fu_698_p2))) then
                ShuffleConvs_1_Downs_4_reg_944 <= tmp_356_cast_fu_713_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_264_p2 = ap_const_lv1_0))) then
                bias_addr_reg_782 <= tmp_fu_276_p1(6 - 1 downto 0);
                    tmp_266_reg_777(10 downto 1) <= tmp_266_fu_305_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                ci_5_reg_865 <= ci_5_fu_520_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_25_reg_772 <= co_25_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                co_26_reg_816 <= co_26_fu_389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                co_27_reg_923 <= co_27_fu_621_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                notlhs_reg_954 <= notlhs_fu_742_p2;
                notrhs_reg_959 <= notrhs_fu_748_p2;
                tmp_24_reg_964 <= tmp_24_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state31))) then
                reg_258 <= ShuffleConvs_1_Downs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                shuffleunit0_2_outpu_1_reg_900 <= shuffleunit0_2_outpu_q0;
                weight_load_reg_895 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond5_fu_447_p2))) then
                    tmp_111_cast_reg_834(4 downto 0) <= tmp_111_cast_fu_453_p1(4 downto 0);
                    tmp_278_reg_839(14 downto 1) <= tmp_278_fu_482_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp_116_reg_915 <= grp_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_118_reg_905 <= grp_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond6_fu_383_p2))) then
                    tmp_269_reg_821(12 downto 4) <= tmp_269_fu_423_p2(12 downto 4);
                    tmp_271_reg_826(10 downto 1) <= tmp_271_fu_441_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond8_fu_311_p2))) then
                    tmp_273_reg_790(14 downto 1) <= tmp_273_fu_346_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = exitcond2_fu_615_p2))) then
                    tmp_276_reg_928(10 downto 1) <= tmp_276_fu_651_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond7_fu_352_p2))) then
                tmp_279_reg_798 <= tmp_279_fu_362_p2;
                w_25_reg_803 <= w_25_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_lv1_0 = exitcond1_fu_657_p2))) then
                    tmp_282_reg_936(14 downto 1) <= tmp_282_fu_692_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond3_fu_514_p2))) then
                tmp_286_reg_870 <= tmp_286_fu_530_p2;
                tmp_293_reg_875 <= tmp_293_fu_596_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond3_fu_514_p2))) then
                w_26_reg_880 <= w_26_fu_601_p2;
            end if;
        end if;
    end process;
    tmp_266_reg_777(0) <= '0';
    tmp_273_reg_790(0) <= '0';
    tmp_269_reg_821(3 downto 0) <= "0000";
    tmp_271_reg_826(0) <= '0';
    tmp_111_cast_reg_834(10 downto 5) <= "000000";
    tmp_278_reg_839(0) <= '0';
    tmp_114_cast_reg_847(14 downto 5) <= "0000000000";
    tmp_276_reg_928(0) <= '0';
    tmp_282_reg_936(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond9_fu_264_p2, ap_CS_fsm_state3, exitcond8_fu_311_p2, ap_CS_fsm_state4, exitcond7_fu_352_p2, ap_CS_fsm_state6, exitcond6_fu_383_p2, ap_CS_fsm_state7, exitcond5_fu_447_p2, ap_CS_fsm_state8, exitcond4_fu_488_p2, ap_CS_fsm_state9, exitcond3_fu_514_p2, ap_CS_fsm_state28, exitcond2_fu_615_p2, ap_CS_fsm_state29, exitcond1_fu_657_p2, ap_CS_fsm_state30, exitcond_fu_698_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_264_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond8_fu_311_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_352_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond6_fu_383_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond5_fu_447_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond4_fu_488_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond3_fu_514_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = exitcond2_fu_615_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_lv1_1 = exitcond1_fu_657_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_1 = exitcond_fu_698_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ShuffleConvs_1_Downs_7_fu_724_p1 <= reg_258;

    ShuffleConvs_1_Downs_address0_assign_proc : process(ShuffleConvs_1_Downs_2_reg_852, ap_CS_fsm_state9, ShuffleConvs_1_Downs_4_reg_944, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state5, ap_CS_fsm_state27, tmp_350_cast_fu_379_p1, tmp_356_cast_fu_713_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ShuffleConvs_1_Downs_address0 <= ShuffleConvs_1_Downs_4_reg_944;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ShuffleConvs_1_Downs_address0 <= tmp_356_cast_fu_713_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ShuffleConvs_1_Downs_address0 <= ShuffleConvs_1_Downs_2_reg_852;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ShuffleConvs_1_Downs_address0 <= tmp_350_cast_fu_379_p1(14 - 1 downto 0);
        else 
            ShuffleConvs_1_Downs_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    ShuffleConvs_1_Downs_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state5, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ShuffleConvs_1_Downs_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ShuffleConvs_1_Downs_d0_assign_proc : process(bias_q0, tmp_116_reg_915, ap_CS_fsm_state33, ap_CS_fsm_state5, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ShuffleConvs_1_Downs_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            ShuffleConvs_1_Downs_d0 <= tmp_116_reg_915;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ShuffleConvs_1_Downs_d0 <= bias_q0;
        else 
            ShuffleConvs_1_Downs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ShuffleConvs_1_Downs_we0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state5, ap_CS_fsm_state27, tmp_25_fu_758_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_1 = tmp_25_fu_758_p2)))) then 
            ShuffleConvs_1_Downs_we0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state28, exitcond2_fu_615_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = exitcond2_fu_615_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state28, exitcond2_fu_615_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = exitcond2_fu_615_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_782;

    bias_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ci_5_fu_520_p2 <= std_logic_vector(unsigned(ci_reg_197) + unsigned(ap_const_lv6_1));
    co_25_fu_270_p2 <= std_logic_vector(unsigned(co_reg_116) + unsigned(ap_const_lv6_1));
    co_26_fu_389_p2 <= std_logic_vector(unsigned(co1_reg_150) + unsigned(ap_const_lv6_1));
    co_27_fu_621_p2 <= std_logic_vector(unsigned(co4_reg_208) + unsigned(ap_const_lv6_1));
    exitcond1_fu_657_p2 <= "1" when (h5_reg_219 = ap_const_lv5_11) else "0";
    exitcond2_fu_615_p2 <= "1" when (co4_reg_208 = ap_const_lv6_30) else "0";
    exitcond3_fu_514_p2 <= "1" when (ci_reg_197 = ap_const_lv6_30) else "0";
    exitcond4_fu_488_p2 <= "1" when (w3_reg_173 = ap_const_lv5_11) else "0";
    exitcond5_fu_447_p2 <= "1" when (h2_reg_161 = ap_const_lv5_11) else "0";
    exitcond6_fu_383_p2 <= "1" when (co1_reg_150 = ap_const_lv6_30) else "0";
    exitcond7_fu_352_p2 <= "1" when (w_reg_139 = ap_const_lv5_11) else "0";
    exitcond8_fu_311_p2 <= "1" when (h_reg_127 = ap_const_lv5_11) else "0";
    exitcond9_fu_264_p2 <= "1" when (co_reg_116 = ap_const_lv6_30) else "0";
    exitcond_fu_698_p2 <= "1" when (w6_reg_231 = ap_const_lv5_11) else "0";

    grp_fu_243_p0_assign_proc : process(reg_258, sum_reg_185, ap_CS_fsm_state16, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_243_p0 <= reg_258;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_243_p0 <= sum_reg_185;
        else 
            grp_fu_243_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_243_p1_assign_proc : process(tmp_118_reg_905, sum_reg_185, ap_CS_fsm_state16, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_243_p1 <= sum_reg_185;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_243_p1 <= tmp_118_reg_905;
        else 
            grp_fu_243_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_25_fu_373_p2 <= std_logic_vector(unsigned(h_reg_127) + unsigned(ap_const_lv5_1));
    h_26_fu_508_p2 <= std_logic_vector(unsigned(h2_reg_161) + unsigned(ap_const_lv5_1));
    h_27_fu_718_p2 <= std_logic_vector(unsigned(h5_reg_219) + unsigned(ap_const_lv5_1));
    notlhs_fu_742_p2 <= "0" when (tmp_21_fu_728_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_748_p2 <= "1" when (tmp_285_fu_738_p1 = ap_const_lv23_0) else "0";
    p_shl10_cast_fu_570_p3 <= (tmp_290_fu_565_p2 & ap_const_lv4_0);
    p_shl11_cast_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_291_fu_578_p3),15));
    p_shl12_cast_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_287_fu_535_p3),11));
    p_shl13_cast_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_288_fu_547_p3),11));
    p_shl14_cast_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_274_fu_627_p3),11));
    p_shl15_cast_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_275_fu_639_p3),11));
    p_shl16_cast_fu_672_p3 <= (tmp_280_fu_667_p2 & ap_const_lv4_0);
    p_shl17_cast_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_281_fu_680_p3),15));
    p_shl1_cast_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_265_fu_293_p3),11));
    p_shl2_cast_fu_326_p3 <= (tmp_272_fu_321_p2 & ap_const_lv4_0);
    p_shl3_cast_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_263_fu_334_p3),15));
    p_shl5_cast_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_270_fu_429_p3),11));
    p_shl6_cast_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_267_fu_395_p3),13));
    p_shl7_cast1_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_268_fu_407_p3),11));
    p_shl7_cast_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_268_fu_407_p3),13));
    p_shl8_cast_fu_462_p3 <= (tmp_277_fu_457_p2 & ap_const_lv4_0);
    p_shl9_cast_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_264_fu_470_p3),15));
    p_shl_cast_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_281_p3),11));
    shuffleunit0_2_outpu_address0 <= tmp_365_cast_fu_611_p1(14 - 1 downto 0);

    shuffleunit0_2_outpu_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            shuffleunit0_2_outpu_ce0 <= ap_const_logic_1;
        else 
            shuffleunit0_2_outpu_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_111_cast_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h2_reg_161),11));
    tmp_112_cast_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_139),15));
    tmp_113_cast_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h5_reg_219),11));
    tmp_114_cast_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w3_reg_173),15));
    tmp_115_cast_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w6_reg_231),15));
    tmp_117_cast_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_197),13));
    tmp_21_fu_728_p4 <= ShuffleConvs_1_Downs_7_fu_724_p1(30 downto 23);
    tmp_23_fu_754_p2 <= (notrhs_reg_959 or notlhs_reg_954);
    tmp_25_fu_758_p2 <= (tmp_23_fu_754_p2 and tmp_24_reg_964);
    tmp_263_fu_334_p3 <= (tmp_272_fu_321_p2 & ap_const_lv1_0);
    tmp_264_fu_470_p3 <= (tmp_277_fu_457_p2 & ap_const_lv1_0);
    tmp_265_fu_293_p3 <= (co_reg_116 & ap_const_lv1_0);
    tmp_266_fu_305_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_301_p1) + unsigned(p_shl_cast_fu_289_p1));
    tmp_267_fu_395_p3 <= (co1_reg_150 & ap_const_lv6_0);
    tmp_268_fu_407_p3 <= (co1_reg_150 & ap_const_lv4_0);
    tmp_269_fu_423_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_403_p1) - unsigned(p_shl7_cast_fu_419_p1));
    tmp_270_fu_429_p3 <= (co1_reg_150 & ap_const_lv1_0);
    tmp_271_fu_441_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_437_p1) + unsigned(p_shl7_cast1_fu_415_p1));
    tmp_272_fu_321_p2 <= std_logic_vector(unsigned(tmp_cast_fu_317_p1) + unsigned(tmp_266_reg_777));
    tmp_273_fu_346_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_326_p3) + unsigned(p_shl3_cast_fu_342_p1));
    tmp_274_fu_627_p3 <= (co4_reg_208 & ap_const_lv4_0);
    tmp_275_fu_639_p3 <= (co4_reg_208 & ap_const_lv1_0);
    tmp_276_fu_651_p2 <= std_logic_vector(unsigned(p_shl15_cast_fu_647_p1) + unsigned(p_shl14_cast_fu_635_p1));
    tmp_277_fu_457_p2 <= std_logic_vector(unsigned(tmp_111_cast_fu_453_p1) + unsigned(tmp_271_reg_826));
    tmp_278_fu_482_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_462_p3) + unsigned(p_shl9_cast_fu_478_p1));
    tmp_279_fu_362_p2 <= std_logic_vector(unsigned(tmp_273_reg_790) + unsigned(tmp_112_cast_fu_358_p1));
    tmp_280_fu_667_p2 <= std_logic_vector(unsigned(tmp_113_cast_fu_663_p1) + unsigned(tmp_276_reg_928));
    tmp_281_fu_680_p3 <= (tmp_280_fu_667_p2 & ap_const_lv1_0);
    tmp_282_fu_692_p2 <= std_logic_vector(unsigned(p_shl16_cast_fu_672_p3) + unsigned(p_shl17_cast_fu_688_p1));
    tmp_283_fu_498_p2 <= std_logic_vector(unsigned(tmp_278_reg_839) + unsigned(tmp_114_cast_fu_494_p1));
    tmp_284_fu_708_p2 <= std_logic_vector(unsigned(tmp_282_reg_936) + unsigned(tmp_115_cast_fu_704_p1));
    tmp_285_fu_738_p1 <= ShuffleConvs_1_Downs_7_fu_724_p1(23 - 1 downto 0);
    tmp_286_fu_530_p2 <= std_logic_vector(unsigned(tmp_117_cast_fu_526_p1) + unsigned(tmp_269_reg_821));
    tmp_287_fu_535_p3 <= (ci_reg_197 & ap_const_lv4_0);
    tmp_288_fu_547_p3 <= (ci_reg_197 & ap_const_lv1_0);
    tmp_289_fu_559_p2 <= std_logic_vector(unsigned(p_shl12_cast_fu_543_p1) + unsigned(p_shl13_cast_fu_555_p1));
    tmp_290_fu_565_p2 <= std_logic_vector(unsigned(tmp_111_cast_reg_834) + unsigned(tmp_289_fu_559_p2));
    tmp_291_fu_578_p3 <= (tmp_290_fu_565_p2 & ap_const_lv1_0);
    tmp_292_fu_590_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_570_p3) + unsigned(p_shl11_cast_fu_586_p1));
    tmp_293_fu_596_p2 <= std_logic_vector(unsigned(tmp_114_cast_reg_847) + unsigned(tmp_292_fu_590_p2));
    tmp_350_cast_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_279_reg_798),64));
    tmp_355_cast_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_283_fu_498_p2),64));
    tmp_356_cast_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_284_fu_708_p2),64));
        tmp_357_cast_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_286_reg_870),64));

    tmp_365_cast_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_293_reg_875),64));
    tmp_cast_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_127),11));
    tmp_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_116),64));
    tmp_s_fu_281_p3 <= (co_reg_116 & ap_const_lv4_0);
    w_25_fu_367_p2 <= std_logic_vector(unsigned(w_reg_139) + unsigned(ap_const_lv5_1));
    w_26_fu_601_p2 <= std_logic_vector(unsigned(w3_reg_173) + unsigned(ap_const_lv5_1));
    w_27_fu_763_p2 <= std_logic_vector(unsigned(w6_reg_231) + unsigned(ap_const_lv5_1));
    weight_address0 <= tmp_357_cast_fu_607_p1(12 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
