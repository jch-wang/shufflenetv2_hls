-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_1x1_8p_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ShuffleConvs_2_Downs_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ShuffleConvs_2_Downs_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_we0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ShuffleConvs_2_Downs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shuffleunit1_7_outpu_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    shuffleunit1_7_outpu_ce0 : OUT STD_LOGIC;
    shuffleunit1_7_outpu_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of subconv_1x1_8p_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal co_13_fu_274_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_13_reg_800 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_142_fu_309_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_142_reg_805 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond9_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_addr_reg_810 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_150_fu_354_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_150_reg_818 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond8_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_157_fu_370_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_157_reg_826 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond7_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_13_fu_375_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_13_reg_831 : STD_LOGIC_VECTOR (3 downto 0);
    signal h_13_fu_381_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal co_14_fu_397_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_14_reg_844 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_145_fu_427_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_145_reg_849 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond6_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_148_fu_457_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_148_reg_854 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_79_cast_fu_469_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_79_cast_reg_862 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond5_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_156_fu_502_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_156_reg_867 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_82_cast_fu_514_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_82_cast_reg_875 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond4_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ShuffleConvs_2_Downs_2_reg_880 : STD_LOGIC_VECTOR (13 downto 0);
    signal h_14_fu_528_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ci_1_fu_540_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ci_1_reg_893 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_165_fu_550_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_165_reg_898 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond3_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_173_fu_620_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_173_reg_903 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_14_fu_625_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_14_reg_908 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal weight_load_reg_923 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal shuffleunit1_7_outpu_1_reg_928 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_reg_933 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_84_reg_943 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal co_15_fu_645_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_15_reg_951 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_153_fu_675_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_153_reg_956 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond2_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_161_fu_720_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_161_reg_964 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal exitcond1_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ShuffleConvs_2_Downs_4_reg_972 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal exitcond_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_15_fu_746_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal notlhs_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_982 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal notrhs_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_992 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_15_fu_791_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal co_reg_120 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_reg_131 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_143 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal co1_reg_154 : STD_LOGIC_VECTOR (6 downto 0);
    signal h2_reg_165 : STD_LOGIC_VECTOR (3 downto 0);
    signal w3_reg_177 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal sum_reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal ci_reg_201 : STD_LOGIC_VECTOR (6 downto 0);
    signal co4_reg_212 : STD_LOGIC_VECTOR (6 downto 0);
    signal h5_reg_223 : STD_LOGIC_VECTOR (3 downto 0);
    signal w6_reg_235 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_206_cast_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_211_cast_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_213_cast_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_221_cast_fu_635_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_212_cast_fu_741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_247_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_247_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_s_fu_285_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_141_fu_297_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_cast_fu_305_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_293_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_cast_fu_321_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_149_fu_325_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_138_fu_330_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_139_fu_342_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl2_cast_fu_338_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl3_cast_fu_350_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_80_cast_fu_366_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_143_fu_403_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_144_fu_415_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl6_cast_fu_411_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl7_cast_fu_423_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_146_fu_433_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_147_fu_445_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl5_cast_fu_453_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_441_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_154_fu_473_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_140_fu_478_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_155_fu_490_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl8_cast_fu_486_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl9_cast_fu_498_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_162_fu_518_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_85_cast_fu_546_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_166_fu_555_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_167_fu_567_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl12_cast_fu_563_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl13_cast_fu_575_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_168_fu_579_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_169_fu_585_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_170_fu_590_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_171_fu_602_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl10_cast_fu_598_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl11_cast_fu_610_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_172_fu_614_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_151_fu_651_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_152_fu_663_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl15_cast_fu_671_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl14_cast_fu_659_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_81_cast_fu_687_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_158_fu_691_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_159_fu_696_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_160_fu_708_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl16_cast_fu_704_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl17_cast_fu_716_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_83_cast_fu_732_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_163_fu_736_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ShuffleConvs_2_Downs_7_fu_752_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_756_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_164_fu_766_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_3_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);

    component ShuffleNetV2_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fcmpdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    ShuffleNetV2_faddbkb_x_U74 : component ShuffleNetV2_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_247_p0,
        din1 => grp_fu_247_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_247_p2);

    ShuffleNetV2_fmulcud_x_U75 : component ShuffleNetV2_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_load_reg_923,
        din1 => shuffleunit1_7_outpu_1_reg_928,
        ce => ap_const_logic_1,
        dout => grp_fu_253_p2);

    ShuffleNetV2_fcmpdEe_x_U76 : component ShuffleNetV2_fcmpdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_262,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_4,
        dout => tmp_4_fu_257_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ci_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond4_fu_508_p2))) then 
                ci_reg_201 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                ci_reg_201 <= ci_1_reg_893;
            end if; 
        end if;
    end process;

    co1_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_268_p2 = ap_const_lv1_1))) then 
                co1_reg_154 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond5_fu_463_p2))) then 
                co1_reg_154 <= co_14_reg_844;
            end if; 
        end if;
    end process;

    co4_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond6_fu_391_p2))) then 
                co4_reg_212 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_lv1_1 = exitcond1_fu_681_p2))) then 
                co4_reg_212 <= co_15_reg_951;
            end if; 
        end if;
    end process;

    co_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond8_fu_315_p2 = ap_const_lv1_1))) then 
                co_reg_120 <= co_13_reg_800;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_120 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    h2_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond6_fu_391_p2))) then 
                h2_reg_165 <= ap_const_lv4_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond4_fu_508_p2))) then 
                h2_reg_165 <= h_14_fu_528_p2;
            end if; 
        end if;
    end process;

    h5_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = exitcond2_fu_639_p2))) then 
                h5_reg_223 <= ap_const_lv4_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_1 = exitcond_fu_726_p2))) then 
                h5_reg_223 <= h_15_fu_746_p2;
            end if; 
        end if;
    end process;

    h_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_268_p2 = ap_const_lv1_0))) then 
                h_reg_131 <= ap_const_lv4_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_360_p2 = ap_const_lv1_1))) then 
                h_reg_131 <= h_13_fu_381_p2;
            end if; 
        end if;
    end process;

    sum_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond4_fu_508_p2))) then 
                sum_reg_189 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                sum_reg_189 <= grp_fu_247_p2;
            end if; 
        end if;
    end process;

    w3_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond5_fu_463_p2))) then 
                w3_reg_177 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                w3_reg_177 <= w_14_reg_908;
            end if; 
        end if;
    end process;

    w6_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_lv1_0 = exitcond1_fu_681_p2))) then 
                w6_reg_235 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                w6_reg_235 <= w_15_fu_791_p2;
            end if; 
        end if;
    end process;

    w_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond8_fu_315_p2))) then 
                w_reg_143 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                w_reg_143 <= w_13_reg_831;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond4_fu_508_p2))) then
                ShuffleConvs_2_Downs_2_reg_880 <= tmp_211_cast_fu_523_p1(14 - 1 downto 0);
                    tmp_82_cast_reg_875(3 downto 0) <= tmp_82_cast_fu_514_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = exitcond_fu_726_p2))) then
                ShuffleConvs_2_Downs_4_reg_972 <= tmp_212_cast_fu_741_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_268_p2 = ap_const_lv1_0))) then
                bias_addr_reg_810 <= tmp_fu_280_p1(7 - 1 downto 0);
                    tmp_142_reg_805(10 downto 1) <= tmp_142_fu_309_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                ci_1_reg_893 <= ci_1_fu_540_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_13_reg_800 <= co_13_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                co_14_reg_844 <= co_14_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                co_15_reg_951 <= co_15_fu_645_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                notlhs_reg_982 <= notlhs_fu_770_p2;
                notrhs_reg_987 <= notrhs_fu_776_p2;
                tmp_4_reg_992 <= tmp_4_fu_257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state31))) then
                reg_262 <= ShuffleConvs_2_Downs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                shuffleunit1_7_outpu_1_reg_928 <= shuffleunit1_7_outpu_q0;
                weight_load_reg_923 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond6_fu_391_p2))) then
                    tmp_145_reg_849(14 downto 5) <= tmp_145_fu_427_p2(14 downto 5);
                    tmp_148_reg_854(10 downto 1) <= tmp_148_fu_457_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond8_fu_315_p2))) then
                    tmp_150_reg_818(14 downto 1) <= tmp_150_fu_354_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = exitcond2_fu_639_p2))) then
                    tmp_153_reg_956(10 downto 1) <= tmp_153_fu_675_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond5_fu_463_p2))) then
                    tmp_156_reg_867(14 downto 1) <= tmp_156_fu_502_p2(14 downto 1);
                    tmp_79_cast_reg_862(3 downto 0) <= tmp_79_cast_fu_469_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond7_fu_360_p2))) then
                tmp_157_reg_826 <= tmp_157_fu_370_p2;
                w_13_reg_831 <= w_13_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_lv1_0 = exitcond1_fu_681_p2))) then
                    tmp_161_reg_964(14 downto 1) <= tmp_161_fu_720_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond3_fu_534_p2))) then
                tmp_165_reg_898 <= tmp_165_fu_550_p2;
                tmp_173_reg_903 <= tmp_173_fu_620_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp_84_reg_943 <= grp_fu_247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_86_reg_933 <= grp_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond3_fu_534_p2))) then
                w_14_reg_908 <= w_14_fu_625_p2;
            end if;
        end if;
    end process;
    tmp_142_reg_805(0) <= '0';
    tmp_150_reg_818(0) <= '0';
    tmp_145_reg_849(4 downto 0) <= "00000";
    tmp_148_reg_854(0) <= '0';
    tmp_79_cast_reg_862(10 downto 4) <= "0000000";
    tmp_156_reg_867(0) <= '0';
    tmp_82_cast_reg_875(14 downto 4) <= "00000000000";
    tmp_153_reg_956(0) <= '0';
    tmp_161_reg_964(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond9_fu_268_p2, ap_CS_fsm_state3, exitcond8_fu_315_p2, ap_CS_fsm_state4, exitcond7_fu_360_p2, ap_CS_fsm_state6, exitcond6_fu_391_p2, ap_CS_fsm_state7, exitcond5_fu_463_p2, ap_CS_fsm_state8, exitcond4_fu_508_p2, ap_CS_fsm_state9, exitcond3_fu_534_p2, ap_CS_fsm_state28, exitcond2_fu_639_p2, ap_CS_fsm_state29, exitcond1_fu_681_p2, ap_CS_fsm_state30, exitcond_fu_726_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_268_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond8_fu_315_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_360_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond6_fu_391_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond5_fu_463_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond4_fu_508_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond3_fu_534_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = exitcond2_fu_639_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_lv1_1 = exitcond1_fu_681_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_1 = exitcond_fu_726_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ShuffleConvs_2_Downs_7_fu_752_p1 <= reg_262;

    ShuffleConvs_2_Downs_address0_assign_proc : process(ShuffleConvs_2_Downs_2_reg_880, ap_CS_fsm_state9, ShuffleConvs_2_Downs_4_reg_972, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state5, ap_CS_fsm_state27, tmp_206_cast_fu_387_p1, tmp_212_cast_fu_741_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ShuffleConvs_2_Downs_address0 <= ShuffleConvs_2_Downs_4_reg_972;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ShuffleConvs_2_Downs_address0 <= tmp_212_cast_fu_741_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ShuffleConvs_2_Downs_address0 <= ShuffleConvs_2_Downs_2_reg_880;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ShuffleConvs_2_Downs_address0 <= tmp_206_cast_fu_387_p1(14 - 1 downto 0);
        else 
            ShuffleConvs_2_Downs_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    ShuffleConvs_2_Downs_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state5, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ShuffleConvs_2_Downs_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ShuffleConvs_2_Downs_d0_assign_proc : process(bias_q0, tmp_84_reg_943, ap_CS_fsm_state33, ap_CS_fsm_state5, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ShuffleConvs_2_Downs_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            ShuffleConvs_2_Downs_d0 <= tmp_84_reg_943;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ShuffleConvs_2_Downs_d0 <= bias_q0;
        else 
            ShuffleConvs_2_Downs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ShuffleConvs_2_Downs_we0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state5, ap_CS_fsm_state27, tmp_5_fu_786_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_1 = tmp_5_fu_786_p2)))) then 
            ShuffleConvs_2_Downs_we0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state28, exitcond2_fu_639_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = exitcond2_fu_639_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state28, exitcond2_fu_639_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = exitcond2_fu_639_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_810;

    bias_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ci_1_fu_540_p2 <= std_logic_vector(unsigned(ci_reg_201) + unsigned(ap_const_lv7_1));
    co_13_fu_274_p2 <= std_logic_vector(unsigned(co_reg_120) + unsigned(ap_const_lv7_1));
    co_14_fu_397_p2 <= std_logic_vector(unsigned(co1_reg_154) + unsigned(ap_const_lv7_1));
    co_15_fu_645_p2 <= std_logic_vector(unsigned(co4_reg_212) + unsigned(ap_const_lv7_1));
    exitcond1_fu_681_p2 <= "1" when (h5_reg_223 = ap_const_lv4_9) else "0";
    exitcond2_fu_639_p2 <= "1" when (co4_reg_212 = ap_const_lv7_60) else "0";
    exitcond3_fu_534_p2 <= "1" when (ci_reg_201 = ap_const_lv7_60) else "0";
    exitcond4_fu_508_p2 <= "1" when (w3_reg_177 = ap_const_lv4_9) else "0";
    exitcond5_fu_463_p2 <= "1" when (h2_reg_165 = ap_const_lv4_9) else "0";
    exitcond6_fu_391_p2 <= "1" when (co1_reg_154 = ap_const_lv7_60) else "0";
    exitcond7_fu_360_p2 <= "1" when (w_reg_143 = ap_const_lv4_9) else "0";
    exitcond8_fu_315_p2 <= "1" when (h_reg_131 = ap_const_lv4_9) else "0";
    exitcond9_fu_268_p2 <= "1" when (co_reg_120 = ap_const_lv7_60) else "0";
    exitcond_fu_726_p2 <= "1" when (w6_reg_235 = ap_const_lv4_9) else "0";

    grp_fu_247_p0_assign_proc : process(reg_262, sum_reg_189, ap_CS_fsm_state16, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_247_p0 <= reg_262;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_247_p0 <= sum_reg_189;
        else 
            grp_fu_247_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_247_p1_assign_proc : process(tmp_86_reg_933, sum_reg_189, ap_CS_fsm_state16, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_247_p1 <= sum_reg_189;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_247_p1 <= tmp_86_reg_933;
        else 
            grp_fu_247_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_13_fu_381_p2 <= std_logic_vector(unsigned(h_reg_131) + unsigned(ap_const_lv4_1));
    h_14_fu_528_p2 <= std_logic_vector(unsigned(h2_reg_165) + unsigned(ap_const_lv4_1));
    h_15_fu_746_p2 <= std_logic_vector(unsigned(h5_reg_223) + unsigned(ap_const_lv4_1));
    notlhs_fu_770_p2 <= "0" when (tmp_1_fu_756_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_776_p2 <= "1" when (tmp_164_fu_766_p1 = ap_const_lv23_0) else "0";
    p_shl10_cast_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_170_fu_590_p3),15));
    p_shl11_cast_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_171_fu_602_p3),15));
    p_shl12_cast_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_166_fu_555_p3),11));
    p_shl13_cast_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_167_fu_567_p3),11));
    p_shl14_cast_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_151_fu_651_p3),11));
    p_shl15_cast_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_152_fu_663_p3),11));
    p_shl16_cast_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_159_fu_696_p3),15));
    p_shl17_cast_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_160_fu_708_p3),15));
    p_shl1_cast_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_141_fu_297_p3),11));
    p_shl2_cast_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_138_fu_330_p3),15));
    p_shl3_cast_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_139_fu_342_p3),15));
    p_shl4_cast_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_146_fu_433_p3),11));
    p_shl5_cast_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_147_fu_445_p3),11));
    p_shl6_cast_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_143_fu_403_p3),15));
    p_shl7_cast_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_144_fu_415_p3),15));
    p_shl8_cast_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_140_fu_478_p3),15));
    p_shl9_cast_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_155_fu_490_p3),15));
    p_shl_cast_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_285_p3),11));
    shuffleunit1_7_outpu_address0 <= tmp_221_cast_fu_635_p1(14 - 1 downto 0);

    shuffleunit1_7_outpu_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            shuffleunit1_7_outpu_ce0 <= ap_const_logic_1;
        else 
            shuffleunit1_7_outpu_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_138_fu_330_p3 <= (tmp_149_fu_325_p2 & ap_const_lv3_0);
    tmp_139_fu_342_p3 <= (tmp_149_fu_325_p2 & ap_const_lv1_0);
    tmp_140_fu_478_p3 <= (tmp_154_fu_473_p2 & ap_const_lv3_0);
    tmp_141_fu_297_p3 <= (co_reg_120 & ap_const_lv1_0);
    tmp_142_fu_309_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_305_p1) + unsigned(p_shl_cast_fu_293_p1));
    tmp_143_fu_403_p3 <= (co1_reg_154 & ap_const_lv7_0);
    tmp_144_fu_415_p3 <= (co1_reg_154 & ap_const_lv5_0);
    tmp_145_fu_427_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_411_p1) - unsigned(p_shl7_cast_fu_423_p1));
    tmp_146_fu_433_p3 <= (co1_reg_154 & ap_const_lv3_0);
    tmp_147_fu_445_p3 <= (co1_reg_154 & ap_const_lv1_0);
    tmp_148_fu_457_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_453_p1) + unsigned(p_shl4_cast_fu_441_p1));
    tmp_149_fu_325_p2 <= std_logic_vector(unsigned(tmp_cast_fu_321_p1) + unsigned(tmp_142_reg_805));
    tmp_150_fu_354_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_338_p1) + unsigned(p_shl3_cast_fu_350_p1));
    tmp_151_fu_651_p3 <= (co4_reg_212 & ap_const_lv3_0);
    tmp_152_fu_663_p3 <= (co4_reg_212 & ap_const_lv1_0);
    tmp_153_fu_675_p2 <= std_logic_vector(unsigned(p_shl15_cast_fu_671_p1) + unsigned(p_shl14_cast_fu_659_p1));
    tmp_154_fu_473_p2 <= std_logic_vector(unsigned(tmp_79_cast_fu_469_p1) + unsigned(tmp_148_reg_854));
    tmp_155_fu_490_p3 <= (tmp_154_fu_473_p2 & ap_const_lv1_0);
    tmp_156_fu_502_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_486_p1) + unsigned(p_shl9_cast_fu_498_p1));
    tmp_157_fu_370_p2 <= std_logic_vector(unsigned(tmp_150_reg_818) + unsigned(tmp_80_cast_fu_366_p1));
    tmp_158_fu_691_p2 <= std_logic_vector(unsigned(tmp_81_cast_fu_687_p1) + unsigned(tmp_153_reg_956));
    tmp_159_fu_696_p3 <= (tmp_158_fu_691_p2 & ap_const_lv3_0);
    tmp_160_fu_708_p3 <= (tmp_158_fu_691_p2 & ap_const_lv1_0);
    tmp_161_fu_720_p2 <= std_logic_vector(unsigned(p_shl16_cast_fu_704_p1) + unsigned(p_shl17_cast_fu_716_p1));
    tmp_162_fu_518_p2 <= std_logic_vector(unsigned(tmp_156_reg_867) + unsigned(tmp_82_cast_fu_514_p1));
    tmp_163_fu_736_p2 <= std_logic_vector(unsigned(tmp_161_reg_964) + unsigned(tmp_83_cast_fu_732_p1));
    tmp_164_fu_766_p1 <= ShuffleConvs_2_Downs_7_fu_752_p1(23 - 1 downto 0);
    tmp_165_fu_550_p2 <= std_logic_vector(unsigned(tmp_85_cast_fu_546_p1) + unsigned(tmp_145_reg_849));
    tmp_166_fu_555_p3 <= (ci_reg_201 & ap_const_lv3_0);
    tmp_167_fu_567_p3 <= (ci_reg_201 & ap_const_lv1_0);
    tmp_168_fu_579_p2 <= std_logic_vector(unsigned(p_shl12_cast_fu_563_p1) + unsigned(p_shl13_cast_fu_575_p1));
    tmp_169_fu_585_p2 <= std_logic_vector(unsigned(tmp_79_cast_reg_862) + unsigned(tmp_168_fu_579_p2));
    tmp_170_fu_590_p3 <= (tmp_169_fu_585_p2 & ap_const_lv3_0);
    tmp_171_fu_602_p3 <= (tmp_169_fu_585_p2 & ap_const_lv1_0);
    tmp_172_fu_614_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_598_p1) + unsigned(p_shl11_cast_fu_610_p1));
    tmp_173_fu_620_p2 <= std_logic_vector(unsigned(tmp_82_cast_reg_875) + unsigned(tmp_172_fu_614_p2));
    tmp_1_fu_756_p4 <= ShuffleConvs_2_Downs_7_fu_752_p1(30 downto 23);
    tmp_206_cast_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_157_reg_826),64));
    tmp_211_cast_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_162_fu_518_p2),64));
    tmp_212_cast_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_163_fu_736_p2),64));
        tmp_213_cast_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_165_reg_898),64));

    tmp_221_cast_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_173_reg_903),64));
    tmp_3_fu_782_p2 <= (notrhs_reg_987 or notlhs_reg_982);
    tmp_5_fu_786_p2 <= (tmp_3_fu_782_p2 and tmp_4_reg_992);
    tmp_79_cast_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h2_reg_165),11));
    tmp_80_cast_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_143),15));
    tmp_81_cast_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h5_reg_223),11));
    tmp_82_cast_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w3_reg_177),15));
    tmp_83_cast_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w6_reg_235),15));
    tmp_85_cast_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_201),15));
    tmp_cast_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_131),11));
    tmp_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_120),64));
    tmp_s_fu_285_p3 <= (co_reg_120 & ap_const_lv3_0);
    w_13_fu_375_p2 <= std_logic_vector(unsigned(w_reg_143) + unsigned(ap_const_lv4_1));
    w_14_fu_625_p2 <= std_logic_vector(unsigned(w3_reg_177) + unsigned(ap_const_lv4_1));
    w_15_fu_791_p2 <= std_logic_vector(unsigned(w6_reg_235) + unsigned(ap_const_lv4_1));
    weight_address0 <= tmp_213_cast_fu_631_p1(14 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
