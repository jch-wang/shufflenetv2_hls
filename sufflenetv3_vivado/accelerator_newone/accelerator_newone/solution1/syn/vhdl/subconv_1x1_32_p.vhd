-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_1x1_32_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ShuffleConvs_0_Downs_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    ShuffleConvs_0_Downs_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_we0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ShuffleConvs_0_Downs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_output_p_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv1_output_p_ce0 : OUT STD_LOGIC;
    conv1_output_p_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of subconv_1x1_32_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal co_22_fu_270_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_22_reg_768 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_238_fu_305_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_238_reg_773 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond9_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_addr_reg_778 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_245_fu_346_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_245_reg_786 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond8_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_251_fu_362_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_251_reg_794 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond7_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_22_fu_367_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_22_reg_799 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_22_fu_373_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal co_23_fu_389_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_23_reg_812 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_241_fu_419_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_241_reg_817 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond6_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_243_fu_437_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_243_reg_822 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_103_cast_fu_449_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_103_cast_reg_830 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond5_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_250_fu_478_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_250_reg_835 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_106_cast_fu_490_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_106_cast_reg_843 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond4_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ShuffleConvs_0_Downs_2_reg_848 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_23_fu_504_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ci_4_fu_516_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ci_4_reg_861 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_257_fu_526_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_257_reg_866 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond3_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_264_fu_592_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_264_reg_871 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_23_fu_597_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_23_reg_876 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal weight_load_reg_891 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal conv1_output_p_load_reg_896 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_110_reg_901 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_108_reg_911 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal co_24_fu_617_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_24_reg_919 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_248_fu_647_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_248_reg_924 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond2_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_253_fu_688_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_253_reg_932 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal exitcond1_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ShuffleConvs_0_Downs_4_reg_940 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal exitcond_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_24_fu_714_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal notlhs_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_950 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal notrhs_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_955 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_960 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_24_fu_759_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal co_reg_116 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_127 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_reg_139 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal co1_reg_150 : STD_LOGIC_VECTOR (4 downto 0);
    signal h2_reg_161 : STD_LOGIC_VECTOR (5 downto 0);
    signal w3_reg_173 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal sum_reg_185 : STD_LOGIC_VECTOR (31 downto 0);
    signal ci_reg_197 : STD_LOGIC_VECTOR (4 downto 0);
    signal co4_reg_208 : STD_LOGIC_VECTOR (4 downto 0);
    signal h5_reg_219 : STD_LOGIC_VECTOR (5 downto 0);
    signal w6_reg_231 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_314_cast_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_319_cast_fu_499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_321_cast_fu_603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_329_cast_fu_607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_320_cast_fu_709_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_243_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_243_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_s_fu_281_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_237_fu_293_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_301_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_289_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_cast_fu_317_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_244_fu_321_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_234_fu_334_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl2_cast_fu_326_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl3_cast_fu_342_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_104_cast_fu_358_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_239_fu_395_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_240_fu_407_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl6_cast_fu_403_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_cast_fu_415_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_242_fu_425_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl5_cast_fu_433_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_249_fu_453_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_235_fu_466_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl8_cast_fu_458_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl9_cast_fu_474_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_254_fu_494_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_109_cast_fu_522_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_258_fu_531_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_259_fu_543_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl12_cast_fu_539_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl13_cast_fu_551_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_260_fu_555_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_261_fu_561_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_262_fu_574_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl10_cast_fu_566_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl11_cast_fu_582_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_263_fu_586_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_246_fu_623_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_247_fu_635_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl15_cast_fu_643_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl14_cast_fu_631_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_105_cast_fu_659_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_252_fu_663_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_236_fu_676_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl16_cast_fu_668_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl17_cast_fu_684_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_107_cast_fu_700_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_255_fu_704_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ShuffleConvs_0_Downs_7_fu_720_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_724_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_256_fu_734_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_18_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);

    component ShuffleNetV2_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fcmpdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    ShuffleNetV2_faddbkb_x_U8 : component ShuffleNetV2_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_243_p0,
        din1 => grp_fu_243_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_243_p2);

    ShuffleNetV2_fmulcud_x_U9 : component ShuffleNetV2_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_load_reg_891,
        din1 => conv1_output_p_load_reg_896,
        ce => ap_const_logic_1,
        dout => grp_fu_249_p2);

    ShuffleNetV2_fcmpdEe_x_U10 : component ShuffleNetV2_fcmpdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_258,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_4,
        dout => tmp_19_fu_253_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ci_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond4_fu_484_p2))) then 
                ci_reg_197 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                ci_reg_197 <= ci_4_reg_861;
            end if; 
        end if;
    end process;

    co1_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_264_p2 = ap_const_lv1_1))) then 
                co1_reg_150 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond5_fu_443_p2))) then 
                co1_reg_150 <= co_23_reg_812;
            end if; 
        end if;
    end process;

    co4_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond6_fu_383_p2))) then 
                co4_reg_208 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_lv1_1 = exitcond1_fu_653_p2))) then 
                co4_reg_208 <= co_24_reg_919;
            end if; 
        end if;
    end process;

    co_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond8_fu_311_p2 = ap_const_lv1_1))) then 
                co_reg_116 <= co_22_reg_768;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_116 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h2_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond6_fu_383_p2))) then 
                h2_reg_161 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond4_fu_484_p2))) then 
                h2_reg_161 <= h_23_fu_504_p2;
            end if; 
        end if;
    end process;

    h5_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = exitcond2_fu_611_p2))) then 
                h5_reg_219 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_1 = exitcond_fu_694_p2))) then 
                h5_reg_219 <= h_24_fu_714_p2;
            end if; 
        end if;
    end process;

    h_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_264_p2 = ap_const_lv1_0))) then 
                h_reg_127 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_352_p2 = ap_const_lv1_1))) then 
                h_reg_127 <= h_22_fu_373_p2;
            end if; 
        end if;
    end process;

    sum_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond4_fu_484_p2))) then 
                sum_reg_185 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                sum_reg_185 <= grp_fu_243_p2;
            end if; 
        end if;
    end process;

    w3_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond5_fu_443_p2))) then 
                w3_reg_173 <= ap_const_lv6_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                w3_reg_173 <= w_23_reg_876;
            end if; 
        end if;
    end process;

    w6_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_lv1_0 = exitcond1_fu_653_p2))) then 
                w6_reg_231 <= ap_const_lv6_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                w6_reg_231 <= w_24_fu_759_p2;
            end if; 
        end if;
    end process;

    w_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond8_fu_311_p2))) then 
                w_reg_139 <= ap_const_lv6_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                w_reg_139 <= w_22_reg_799;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond4_fu_484_p2))) then
                ShuffleConvs_0_Downs_2_reg_848 <= tmp_319_cast_fu_499_p1(15 - 1 downto 0);
                    tmp_106_cast_reg_843(5 downto 0) <= tmp_106_cast_fu_490_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = exitcond_fu_694_p2))) then
                ShuffleConvs_0_Downs_4_reg_940 <= tmp_320_cast_fu_709_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_264_p2 = ap_const_lv1_0))) then
                bias_addr_reg_778 <= tmp_fu_276_p1(5 - 1 downto 0);
                    tmp_238_reg_773(10 downto 1) <= tmp_238_fu_305_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                ci_4_reg_861 <= ci_4_fu_516_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_22_reg_768 <= co_22_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                co_23_reg_812 <= co_23_fu_389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                co_24_reg_919 <= co_24_fu_617_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                conv1_output_p_load_reg_896 <= conv1_output_p_q0;
                weight_load_reg_891 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                notlhs_reg_950 <= notlhs_fu_738_p2;
                notrhs_reg_955 <= notrhs_fu_744_p2;
                tmp_19_reg_960 <= tmp_19_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state31))) then
                reg_258 <= ShuffleConvs_0_Downs_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond5_fu_443_p2))) then
                    tmp_103_cast_reg_830(5 downto 0) <= tmp_103_cast_fu_449_p1(5 downto 0);
                    tmp_250_reg_835(15 downto 1) <= tmp_250_fu_478_p2(15 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp_108_reg_911 <= grp_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_110_reg_901 <= grp_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond6_fu_383_p2))) then
                    tmp_241_reg_817(10 downto 3) <= tmp_241_fu_419_p2(10 downto 3);
                    tmp_243_reg_822(10 downto 1) <= tmp_243_fu_437_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond8_fu_311_p2))) then
                    tmp_245_reg_786(15 downto 1) <= tmp_245_fu_346_p2(15 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = exitcond2_fu_611_p2))) then
                    tmp_248_reg_924(10 downto 1) <= tmp_248_fu_647_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond7_fu_352_p2))) then
                tmp_251_reg_794 <= tmp_251_fu_362_p2;
                w_22_reg_799 <= w_22_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_lv1_0 = exitcond1_fu_653_p2))) then
                    tmp_253_reg_932(15 downto 1) <= tmp_253_fu_688_p2(15 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond3_fu_510_p2))) then
                tmp_257_reg_866 <= tmp_257_fu_526_p2;
                tmp_264_reg_871 <= tmp_264_fu_592_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond3_fu_510_p2))) then
                w_23_reg_876 <= w_23_fu_597_p2;
            end if;
        end if;
    end process;
    tmp_238_reg_773(0) <= '0';
    tmp_245_reg_786(0) <= '0';
    tmp_241_reg_817(2 downto 0) <= "000";
    tmp_243_reg_822(0) <= '0';
    tmp_103_cast_reg_830(10 downto 6) <= "00000";
    tmp_250_reg_835(0) <= '0';
    tmp_106_cast_reg_843(15 downto 6) <= "0000000000";
    tmp_248_reg_924(0) <= '0';
    tmp_253_reg_932(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond9_fu_264_p2, ap_CS_fsm_state3, exitcond8_fu_311_p2, ap_CS_fsm_state4, exitcond7_fu_352_p2, ap_CS_fsm_state6, exitcond6_fu_383_p2, ap_CS_fsm_state7, exitcond5_fu_443_p2, ap_CS_fsm_state8, exitcond4_fu_484_p2, ap_CS_fsm_state9, exitcond3_fu_510_p2, ap_CS_fsm_state28, exitcond2_fu_611_p2, ap_CS_fsm_state29, exitcond1_fu_653_p2, ap_CS_fsm_state30, exitcond_fu_694_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_264_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond8_fu_311_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_352_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond6_fu_383_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond5_fu_443_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond4_fu_484_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond3_fu_510_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = exitcond2_fu_611_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_lv1_1 = exitcond1_fu_653_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_1 = exitcond_fu_694_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ShuffleConvs_0_Downs_7_fu_720_p1 <= reg_258;

    ShuffleConvs_0_Downs_address0_assign_proc : process(ShuffleConvs_0_Downs_2_reg_848, ap_CS_fsm_state9, ShuffleConvs_0_Downs_4_reg_940, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state5, ap_CS_fsm_state27, tmp_314_cast_fu_379_p1, tmp_320_cast_fu_709_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ShuffleConvs_0_Downs_address0 <= ShuffleConvs_0_Downs_4_reg_940;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ShuffleConvs_0_Downs_address0 <= tmp_320_cast_fu_709_p1(15 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ShuffleConvs_0_Downs_address0 <= ShuffleConvs_0_Downs_2_reg_848;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ShuffleConvs_0_Downs_address0 <= tmp_314_cast_fu_379_p1(15 - 1 downto 0);
        else 
            ShuffleConvs_0_Downs_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    ShuffleConvs_0_Downs_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state5, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ShuffleConvs_0_Downs_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ShuffleConvs_0_Downs_d0_assign_proc : process(bias_q0, tmp_108_reg_911, ap_CS_fsm_state33, ap_CS_fsm_state5, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ShuffleConvs_0_Downs_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            ShuffleConvs_0_Downs_d0 <= tmp_108_reg_911;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ShuffleConvs_0_Downs_d0 <= bias_q0;
        else 
            ShuffleConvs_0_Downs_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ShuffleConvs_0_Downs_we0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state5, ap_CS_fsm_state27, tmp_20_fu_754_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_1 = tmp_20_fu_754_p2)))) then 
            ShuffleConvs_0_Downs_we0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state28, exitcond2_fu_611_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = exitcond2_fu_611_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state28, exitcond2_fu_611_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = exitcond2_fu_611_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_778;

    bias_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ci_4_fu_516_p2 <= std_logic_vector(unsigned(ci_reg_197) + unsigned(ap_const_lv5_1));
    co_22_fu_270_p2 <= std_logic_vector(unsigned(co_reg_116) + unsigned(ap_const_lv5_1));
    co_23_fu_389_p2 <= std_logic_vector(unsigned(co1_reg_150) + unsigned(ap_const_lv5_1));
    co_24_fu_617_p2 <= std_logic_vector(unsigned(co4_reg_208) + unsigned(ap_const_lv5_1));
    conv1_output_p_address0 <= tmp_329_cast_fu_607_p1(15 - 1 downto 0);

    conv1_output_p_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv1_output_p_ce0 <= ap_const_logic_1;
        else 
            conv1_output_p_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_653_p2 <= "1" when (h5_reg_219 = ap_const_lv6_21) else "0";
    exitcond2_fu_611_p2 <= "1" when (co4_reg_208 = ap_const_lv5_18) else "0";
    exitcond3_fu_510_p2 <= "1" when (ci_reg_197 = ap_const_lv5_18) else "0";
    exitcond4_fu_484_p2 <= "1" when (w3_reg_173 = ap_const_lv6_21) else "0";
    exitcond5_fu_443_p2 <= "1" when (h2_reg_161 = ap_const_lv6_21) else "0";
    exitcond6_fu_383_p2 <= "1" when (co1_reg_150 = ap_const_lv5_18) else "0";
    exitcond7_fu_352_p2 <= "1" when (w_reg_139 = ap_const_lv6_21) else "0";
    exitcond8_fu_311_p2 <= "1" when (h_reg_127 = ap_const_lv6_21) else "0";
    exitcond9_fu_264_p2 <= "1" when (co_reg_116 = ap_const_lv5_18) else "0";
    exitcond_fu_694_p2 <= "1" when (w6_reg_231 = ap_const_lv6_21) else "0";

    grp_fu_243_p0_assign_proc : process(reg_258, sum_reg_185, ap_CS_fsm_state16, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_243_p0 <= reg_258;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_243_p0 <= sum_reg_185;
        else 
            grp_fu_243_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_243_p1_assign_proc : process(tmp_110_reg_901, sum_reg_185, ap_CS_fsm_state16, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_243_p1 <= sum_reg_185;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_243_p1 <= tmp_110_reg_901;
        else 
            grp_fu_243_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_22_fu_373_p2 <= std_logic_vector(unsigned(h_reg_127) + unsigned(ap_const_lv6_1));
    h_23_fu_504_p2 <= std_logic_vector(unsigned(h2_reg_161) + unsigned(ap_const_lv6_1));
    h_24_fu_714_p2 <= std_logic_vector(unsigned(h5_reg_219) + unsigned(ap_const_lv6_1));
    notlhs_fu_738_p2 <= "0" when (tmp_16_fu_724_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_744_p2 <= "1" when (tmp_256_fu_734_p1 = ap_const_lv23_0) else "0";
    p_shl10_cast_fu_566_p3 <= (tmp_261_fu_561_p2 & ap_const_lv5_0);
    p_shl11_cast_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_262_fu_574_p3),16));
    p_shl12_cast_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_258_fu_531_p3),11));
    p_shl13_cast_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_259_fu_543_p3),11));
    p_shl14_cast_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_246_fu_623_p3),11));
    p_shl15_cast_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_247_fu_635_p3),11));
    p_shl16_cast_fu_668_p3 <= (tmp_252_fu_663_p2 & ap_const_lv5_0);
    p_shl17_cast_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_236_fu_676_p3),16));
    p_shl1_cast_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_237_fu_293_p3),11));
    p_shl2_cast_fu_326_p3 <= (tmp_244_fu_321_p2 & ap_const_lv5_0);
    p_shl3_cast_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_234_fu_334_p3),16));
    p_shl5_cast_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_242_fu_425_p3),11));
    p_shl6_cast_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_239_fu_395_p3),11));
    p_shl7_cast_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_240_fu_407_p3),11));
    p_shl8_cast_fu_458_p3 <= (tmp_249_fu_453_p2 & ap_const_lv5_0);
    p_shl9_cast_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_235_fu_466_p3),16));
    p_shl_cast_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_281_p3),11));
    tmp_103_cast_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h2_reg_161),11));
    tmp_104_cast_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_139),16));
    tmp_105_cast_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h5_reg_219),11));
    tmp_106_cast_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w3_reg_173),16));
    tmp_107_cast_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w6_reg_231),16));
    tmp_109_cast_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_197),11));
    tmp_16_fu_724_p4 <= ShuffleConvs_0_Downs_7_fu_720_p1(30 downto 23);
    tmp_18_fu_750_p2 <= (notrhs_reg_955 or notlhs_reg_950);
    tmp_20_fu_754_p2 <= (tmp_18_fu_750_p2 and tmp_19_reg_960);
    tmp_234_fu_334_p3 <= (tmp_244_fu_321_p2 & ap_const_lv1_0);
    tmp_235_fu_466_p3 <= (tmp_249_fu_453_p2 & ap_const_lv1_0);
    tmp_236_fu_676_p3 <= (tmp_252_fu_663_p2 & ap_const_lv1_0);
    tmp_237_fu_293_p3 <= (co_reg_116 & ap_const_lv1_0);
    tmp_238_fu_305_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_301_p1) + unsigned(p_shl_cast_fu_289_p1));
    tmp_239_fu_395_p3 <= (co1_reg_150 & ap_const_lv5_0);
    tmp_240_fu_407_p3 <= (co1_reg_150 & ap_const_lv3_0);
    tmp_241_fu_419_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_403_p1) - unsigned(p_shl7_cast_fu_415_p1));
    tmp_242_fu_425_p3 <= (co1_reg_150 & ap_const_lv1_0);
    tmp_243_fu_437_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_433_p1) + unsigned(p_shl6_cast_fu_403_p1));
    tmp_244_fu_321_p2 <= std_logic_vector(unsigned(tmp_cast_fu_317_p1) + unsigned(tmp_238_reg_773));
    tmp_245_fu_346_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_326_p3) + unsigned(p_shl3_cast_fu_342_p1));
    tmp_246_fu_623_p3 <= (co4_reg_208 & ap_const_lv5_0);
    tmp_247_fu_635_p3 <= (co4_reg_208 & ap_const_lv1_0);
    tmp_248_fu_647_p2 <= std_logic_vector(unsigned(p_shl15_cast_fu_643_p1) + unsigned(p_shl14_cast_fu_631_p1));
    tmp_249_fu_453_p2 <= std_logic_vector(unsigned(tmp_103_cast_fu_449_p1) + unsigned(tmp_243_reg_822));
    tmp_250_fu_478_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_458_p3) + unsigned(p_shl9_cast_fu_474_p1));
    tmp_251_fu_362_p2 <= std_logic_vector(unsigned(tmp_245_reg_786) + unsigned(tmp_104_cast_fu_358_p1));
    tmp_252_fu_663_p2 <= std_logic_vector(unsigned(tmp_105_cast_fu_659_p1) + unsigned(tmp_248_reg_924));
    tmp_253_fu_688_p2 <= std_logic_vector(unsigned(p_shl16_cast_fu_668_p3) + unsigned(p_shl17_cast_fu_684_p1));
    tmp_254_fu_494_p2 <= std_logic_vector(unsigned(tmp_250_reg_835) + unsigned(tmp_106_cast_fu_490_p1));
    tmp_255_fu_704_p2 <= std_logic_vector(unsigned(tmp_253_reg_932) + unsigned(tmp_107_cast_fu_700_p1));
    tmp_256_fu_734_p1 <= ShuffleConvs_0_Downs_7_fu_720_p1(23 - 1 downto 0);
    tmp_257_fu_526_p2 <= std_logic_vector(unsigned(tmp_109_cast_fu_522_p1) + unsigned(tmp_241_reg_817));
    tmp_258_fu_531_p3 <= (ci_reg_197 & ap_const_lv5_0);
    tmp_259_fu_543_p3 <= (ci_reg_197 & ap_const_lv1_0);
    tmp_260_fu_555_p2 <= std_logic_vector(unsigned(p_shl12_cast_fu_539_p1) + unsigned(p_shl13_cast_fu_551_p1));
    tmp_261_fu_561_p2 <= std_logic_vector(unsigned(tmp_103_cast_reg_830) + unsigned(tmp_260_fu_555_p2));
    tmp_262_fu_574_p3 <= (tmp_261_fu_561_p2 & ap_const_lv1_0);
    tmp_263_fu_586_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_566_p3) + unsigned(p_shl11_cast_fu_582_p1));
    tmp_264_fu_592_p2 <= std_logic_vector(unsigned(tmp_106_cast_reg_843) + unsigned(tmp_263_fu_586_p2));
    tmp_314_cast_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_251_reg_794),64));
    tmp_319_cast_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_254_fu_494_p2),64));
    tmp_320_cast_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_255_fu_704_p2),64));
        tmp_321_cast_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_257_reg_866),64));

    tmp_329_cast_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_264_reg_871),64));
    tmp_cast_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_127),11));
    tmp_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_116),64));
    tmp_s_fu_281_p3 <= (co_reg_116 & ap_const_lv5_0);
    w_22_fu_367_p2 <= std_logic_vector(unsigned(w_reg_139) + unsigned(ap_const_lv6_1));
    w_23_fu_597_p2 <= std_logic_vector(unsigned(w3_reg_173) + unsigned(ap_const_lv6_1));
    w_24_fu_759_p2 <= std_logic_vector(unsigned(w6_reg_231) + unsigned(ap_const_lv6_1));
    weight_address0 <= tmp_321_cast_fu_603_p1(10 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
