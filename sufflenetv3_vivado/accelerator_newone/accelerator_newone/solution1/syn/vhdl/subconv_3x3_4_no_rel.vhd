-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_4_no_rel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of subconv_3x3_4_no_rel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_5_fu_239_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_5_reg_639 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_74_cast_fu_280_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_74_cast_reg_644 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond7_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_addr_reg_649 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_63_fu_319_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_63_reg_657 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond6_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_fu_335_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_66_reg_665 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond5_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_5_fu_340_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_5_reg_670 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_5_fu_346_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal co_6_fu_362_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_6_reg_683 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_77_cast_fu_402_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_77_cast_reg_688 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond4_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_cast_fu_424_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_79_cast_reg_694 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_65_fu_463_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_65_reg_702 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond3_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_6_fu_475_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond2_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_3_fu_487_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_3_reg_718 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_68_fu_497_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_68_reg_723 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond1_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_512_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_33_reg_729 : STD_LOGIC_VECTOR (2 downto 0);
    signal output_addr_3_reg_734 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_69_fu_537_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_69_reg_739 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_72_fu_570_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_72_reg_744 : STD_LOGIC_VECTOR (12 downto 0);
    signal n_3_fu_582_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_3_reg_752 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_73_fu_592_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_73_reg_757 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_fu_617_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_74_reg_762 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal weight_load_reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal input_load_reg_782 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_reg_787 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal output_load_reg_797 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal w_6_fu_630_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_6_reg_802 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_31_reg_807 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal co_reg_108 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_reg_119 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_131 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal co1_reg_142 : STD_LOGIC_VECTOR (6 downto 0);
    signal h2_reg_153 : STD_LOGIC_VECTOR (2 downto 0);
    signal w3_reg_165 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal sum_reg_177 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_189 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_212 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_88_cast_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_89_cast_fu_527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_97_cast_fu_622_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_98_cast_fu_626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_223_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_s_fu_250_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_55_fu_262_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_258_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_270_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_56_fu_274_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_27_cast_fu_290_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_62_fu_294_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_52_fu_299_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_303_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl3_cast_fu_311_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_29_cast_fu_331_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_57_fu_372_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_58_fu_384_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl5_cast_fu_380_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_fu_392_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_59_fu_396_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_60_fu_406_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_cast_fu_414_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_fu_368_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_61_fu_418_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_28_cast_fu_434_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_64_fu_438_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_53_fu_443_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl7_cast_fu_447_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl8_cast_fu_455_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_32_cast_fu_493_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp1_fu_502_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_cast_fu_508_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_30_cast_fu_518_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_67_fu_522_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_54_fu_532_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_34_cast_fu_542_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_70_fu_545_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_71_fu_550_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl9_cast_fu_554_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl10_cast_fu_562_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_35_cast_fu_588_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_fu_597_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_603_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_36_fu_607_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_37_cast_fu_613_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);

    component ShuffleNetV2_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ShuffleNetV2_faddbkb_x_U98 : component ShuffleNetV2_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_223_p0,
        din1 => grp_fu_223_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_223_p2);

    ShuffleNetV2_fmulcud_x_U99 : component ShuffleNetV2_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_load_reg_777,
        din1 => input_load_reg_782,
        ce => ap_const_logic_1,
        dout => grp_fu_229_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co1_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_233_p2 = ap_const_lv1_1))) then 
                co1_reg_142 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond3_fu_428_p2))) then 
                co1_reg_142 <= co_6_reg_683;
            end if; 
        end if;
    end process;

    co_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond6_fu_284_p2 = ap_const_lv1_1))) then 
                co_reg_108 <= co_5_reg_639;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_108 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    h2_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond4_fu_356_p2))) then 
                h2_reg_153 <= ap_const_lv3_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond2_fu_469_p2))) then 
                h2_reg_153 <= h_6_fu_475_p2;
            end if; 
        end if;
    end process;

    h_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_233_p2 = ap_const_lv1_0))) then 
                h_reg_119 <= ap_const_lv3_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_fu_325_p2 = ap_const_lv1_1))) then 
                h_reg_119 <= h_5_fu_346_p2;
            end if; 
        end if;
    end process;

    m_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond2_fu_469_p2))) then 
                m_reg_189 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = exitcond_fu_576_p2))) then 
                m_reg_189 <= m_3_reg_718;
            end if; 
        end if;
    end process;

    n_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                n_reg_212 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                n_reg_212 <= n_3_reg_752;
            end if; 
        end if;
    end process;

    sum_1_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                sum_1_reg_200 <= sum_reg_177;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                sum_1_reg_200 <= grp_fu_223_p2;
            end if; 
        end if;
    end process;

    sum_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond2_fu_469_p2))) then 
                sum_reg_177 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = exitcond_fu_576_p2))) then 
                sum_reg_177 <= sum_1_reg_200;
            end if; 
        end if;
    end process;

    w3_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond3_fu_428_p2))) then 
                w3_reg_165 <= ap_const_lv3_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                w3_reg_165 <= w_6_reg_802;
            end if; 
        end if;
    end process;

    w_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_284_p2))) then 
                w_reg_131 <= ap_const_lv3_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                w_reg_131 <= w_5_reg_670;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_233_p2 = ap_const_lv1_0))) then
                bias_addr_reg_649 <= tmp_fu_245_p1(7 - 1 downto 0);
                    tmp_74_cast_reg_644(11 downto 1) <= tmp_74_cast_fu_280_p1(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_5_reg_639 <= co_5_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                co_6_reg_683 <= co_6_fu_362_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                input_load_reg_782 <= input_r_q0;
                weight_load_reg_777 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                m_3_reg_718 <= m_3_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                n_3_reg_752 <= n_3_fu_582_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond1_fu_481_p2))) then
                output_addr_3_reg_734 <= tmp_89_cast_fu_527_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                output_load_reg_797 <= output_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_31_reg_807 <= grp_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond1_fu_481_p2))) then
                tmp_33_reg_729 <= tmp_33_fu_512_p2;
                tmp_68_reg_723 <= tmp_68_fu_497_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_38_reg_787 <= grp_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_284_p2))) then
                    tmp_63_reg_657(12 downto 1) <= tmp_63_fu_319_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond3_fu_428_p2))) then
                    tmp_65_reg_702(12 downto 1) <= tmp_65_fu_463_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond5_fu_325_p2))) then
                tmp_66_reg_665 <= tmp_66_fu_335_p2;
                w_5_reg_670 <= w_5_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_69_reg_739 <= tmp_69_fu_537_p2;
                    tmp_72_reg_744(12 downto 1) <= tmp_72_fu_570_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = exitcond_fu_576_p2))) then
                tmp_73_reg_757 <= tmp_73_fu_592_p2;
                tmp_74_reg_762 <= tmp_74_fu_617_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond4_fu_356_p2))) then
                    tmp_77_cast_reg_688(11 downto 1) <= tmp_77_cast_fu_402_p1(11 downto 1);
                tmp_79_cast_reg_694 <= tmp_79_cast_fu_424_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                w_6_reg_802 <= w_6_fu_630_p2;
            end if;
        end if;
    end process;
    tmp_74_cast_reg_644(0) <= '0';
    tmp_63_reg_657(0) <= '0';
    tmp_77_cast_reg_688(0) <= '0';
    tmp_65_reg_702(0) <= '0';
    tmp_72_reg_744(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond7_fu_233_p2, ap_CS_fsm_state3, exitcond6_fu_284_p2, ap_CS_fsm_state4, exitcond5_fu_325_p2, ap_CS_fsm_state6, exitcond4_fu_356_p2, ap_CS_fsm_state7, exitcond3_fu_428_p2, ap_CS_fsm_state8, exitcond2_fu_469_p2, ap_CS_fsm_state9, exitcond1_fu_481_p2, ap_CS_fsm_state11, exitcond_fu_576_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_233_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond6_fu_284_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_fu_325_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond4_fu_356_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond3_fu_428_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond2_fu_469_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond1_fu_481_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = exitcond_fu_576_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, exitcond4_fu_356_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond4_fu_356_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, exitcond4_fu_356_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond4_fu_356_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_649;

    bias_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_5_fu_239_p2 <= std_logic_vector(unsigned(co_reg_108) + unsigned(ap_const_lv7_1));
    co_6_fu_362_p2 <= std_logic_vector(unsigned(co1_reg_142) + unsigned(ap_const_lv7_1));
    exitcond1_fu_481_p2 <= "1" when (m_reg_189 = ap_const_lv2_3) else "0";
    exitcond2_fu_469_p2 <= "1" when (w3_reg_165 = ap_const_lv3_5) else "0";
    exitcond3_fu_428_p2 <= "1" when (h2_reg_153 = ap_const_lv3_5) else "0";
    exitcond4_fu_356_p2 <= "1" when (co1_reg_142 = ap_const_lv7_60) else "0";
    exitcond5_fu_325_p2 <= "1" when (w_reg_131 = ap_const_lv3_5) else "0";
    exitcond6_fu_284_p2 <= "1" when (h_reg_119 = ap_const_lv3_5) else "0";
    exitcond7_fu_233_p2 <= "1" when (co_reg_108 = ap_const_lv7_60) else "0";
    exitcond_fu_576_p2 <= "1" when (n_reg_212 = ap_const_lv2_3) else "0";

    grp_fu_223_p0_assign_proc : process(output_load_reg_797, ap_CS_fsm_state24, sum_1_reg_200, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_223_p0 <= output_load_reg_797;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_223_p0 <= sum_1_reg_200;
        else 
            grp_fu_223_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_223_p1_assign_proc : process(tmp_38_reg_787, ap_CS_fsm_state24, sum_reg_177, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_223_p1 <= sum_reg_177;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_223_p1 <= tmp_38_reg_787;
        else 
            grp_fu_223_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_5_fu_346_p2 <= std_logic_vector(unsigned(h_reg_119) + unsigned(ap_const_lv3_1));
    h_6_fu_475_p2 <= std_logic_vector(unsigned(h2_reg_153) + unsigned(ap_const_lv3_1));
    input_r_address0 <= tmp_98_cast_fu_626_p1(12 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_3_fu_487_p2 <= std_logic_vector(unsigned(m_reg_189) + unsigned(ap_const_lv2_1));
    n_3_fu_582_p2 <= std_logic_vector(unsigned(n_reg_212) + unsigned(ap_const_lv2_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state9, output_addr_3_reg_734, ap_CS_fsm_state5, ap_CS_fsm_state29, tmp_88_cast_fu_352_p1, tmp_89_cast_fu_527_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_r_address0 <= output_addr_3_reg_734;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_address0 <= tmp_89_cast_fu_527_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_address0 <= tmp_88_cast_fu_352_p1(12 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(bias_q0, tmp_31_reg_807, ap_CS_fsm_state5, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_r_d0 <= tmp_31_reg_807;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_d0 <= bias_q0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl10_cast_fu_562_p3 <= (tmp_70_fu_545_p2 & ap_const_lv1_0);
    p_shl1_cast_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_262_p3),11));
    p_shl2_cast_fu_303_p3 <= (tmp_52_fu_299_p1 & ap_const_lv3_0);
    p_shl3_cast_fu_311_p3 <= (tmp_62_fu_294_p2 & ap_const_lv1_0);
    p_shl4_cast_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_fu_406_p3),10));
    p_shl5_cast_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_372_p3),11));
    p_shl6_cast_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_fu_384_p3),11));
    p_shl7_cast_fu_447_p3 <= (tmp_53_fu_443_p1 & ap_const_lv3_0);
    p_shl8_cast_fu_455_p3 <= (tmp_64_fu_438_p2 & ap_const_lv1_0);
    p_shl9_cast_fu_554_p3 <= (tmp_71_fu_550_p1 & ap_const_lv3_0);
    p_shl_cast_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_250_p3),11));
        tmp1_cast_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_502_p2),3));

    tmp1_fu_502_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(m_reg_189));
        tmp2_cast_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_597_p2),3));

    tmp2_fu_597_p2 <= std_logic_vector(unsigned(n_reg_212) + unsigned(ap_const_lv2_3));
    tmp_27_cast_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_119),12));
    tmp_28_cast_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h2_reg_153),12));
    tmp_29_cast_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_131),13));
    tmp_30_cast_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w3_reg_165),13));
    tmp_32_cast_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_189),11));
    tmp_33_fu_512_p2 <= std_logic_vector(signed(tmp1_cast_fu_508_p1) + signed(h2_reg_153));
    tmp_34_cast_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_reg_729),12));
    tmp_35_cast_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_212),11));
    tmp_36_fu_607_p2 <= std_logic_vector(unsigned(w3_reg_165) + unsigned(tmp2_cast_fu_603_p1));
    tmp_37_cast_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_607_p2),13));
    tmp_52_fu_299_p1 <= tmp_62_fu_294_p2(10 - 1 downto 0);
    tmp_53_fu_443_p1 <= tmp_64_fu_438_p2(10 - 1 downto 0);
    tmp_54_fu_532_p2 <= std_logic_vector(shift_left(unsigned(tmp_68_reg_723),to_integer(unsigned('0' & ap_const_lv11_2(11-1 downto 0)))));
    tmp_55_fu_262_p3 <= (co_reg_108 & ap_const_lv1_0);
    tmp_56_fu_274_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_258_p1) - unsigned(p_shl1_cast_fu_270_p1));
    tmp_57_fu_372_p3 <= (co1_reg_142 & ap_const_lv3_0);
    tmp_58_fu_384_p3 <= (co1_reg_142 & ap_const_lv1_0);
    tmp_59_fu_396_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_380_p1) - unsigned(p_shl6_cast_fu_392_p1));
    tmp_60_fu_406_p3 <= (co1_reg_142 & ap_const_lv2_0);
    tmp_61_fu_418_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_414_p1) - unsigned(tmp_cast_fu_368_p1));
    tmp_62_fu_294_p2 <= std_logic_vector(unsigned(tmp_27_cast_fu_290_p1) + unsigned(tmp_74_cast_reg_644));
    tmp_63_fu_319_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_303_p3) - unsigned(p_shl3_cast_fu_311_p3));
    tmp_64_fu_438_p2 <= std_logic_vector(unsigned(tmp_28_cast_fu_434_p1) + unsigned(tmp_77_cast_reg_688));
    tmp_65_fu_463_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_447_p3) - unsigned(p_shl8_cast_fu_455_p3));
    tmp_66_fu_335_p2 <= std_logic_vector(unsigned(tmp_63_reg_657) + unsigned(tmp_29_cast_fu_331_p1));
    tmp_67_fu_522_p2 <= std_logic_vector(unsigned(tmp_65_reg_702) + unsigned(tmp_30_cast_fu_518_p1));
    tmp_68_fu_497_p2 <= std_logic_vector(unsigned(tmp_32_cast_fu_493_p1) + unsigned(tmp_79_cast_reg_694));
    tmp_69_fu_537_p2 <= std_logic_vector(unsigned(tmp_54_fu_532_p2) - unsigned(tmp_68_reg_723));
    tmp_70_fu_545_p2 <= std_logic_vector(unsigned(tmp_34_cast_fu_542_p1) + unsigned(tmp_77_cast_reg_688));
    tmp_71_fu_550_p1 <= tmp_70_fu_545_p2(10 - 1 downto 0);
    tmp_72_fu_570_p2 <= std_logic_vector(unsigned(p_shl9_cast_fu_554_p3) - unsigned(p_shl10_cast_fu_562_p3));
    tmp_73_fu_592_p2 <= std_logic_vector(unsigned(tmp_69_reg_739) + unsigned(tmp_35_cast_fu_588_p1));
        tmp_74_cast_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_56_fu_274_p2),12));

    tmp_74_fu_617_p2 <= std_logic_vector(unsigned(tmp_72_reg_744) + unsigned(tmp_37_cast_fu_613_p1));
        tmp_77_cast_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_59_fu_396_p2),12));

        tmp_79_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_61_fu_418_p2),11));

    tmp_88_cast_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_reg_665),64));
    tmp_89_cast_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_fu_522_p2),64));
    tmp_97_cast_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_73_reg_757),64));
    tmp_98_cast_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_74_reg_762),64));
    tmp_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co1_reg_142),10));
    tmp_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_108),64));
    tmp_s_fu_250_p3 <= (co_reg_108 & ap_const_lv3_0);
    w_5_fu_340_p2 <= std_logic_vector(unsigned(w_reg_131) + unsigned(ap_const_lv3_1));
    w_6_fu_630_p2 <= std_logic_vector(unsigned(w3_reg_165) + unsigned(ap_const_lv3_1));
    weight_address0 <= tmp_97_cast_fu_622_p1(10 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
