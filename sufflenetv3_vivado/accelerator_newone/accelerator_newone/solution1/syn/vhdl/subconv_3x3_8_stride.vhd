-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_8_stride is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of subconv_3x3_8_stride is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_1_fu_247_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_1_reg_676 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_17_cast_fu_288_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_17_cast_reg_681 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond7_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_addr_reg_686 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_17_fu_327_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_17_reg_694 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond6_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_343_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_21_reg_702 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond5_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_1_fu_348_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_1_reg_707 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_1_fu_354_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal co_2_fu_370_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_2_reg_720 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_8_fu_404_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_reg_725 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond4_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_cast_fu_428_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_22_cast_reg_730 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_25_cast_fu_438_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_25_cast_reg_735 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_fu_448_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_reg_743 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond3_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_485_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_20_reg_748 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_s_fu_497_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_reg_756 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond2_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_2_fu_505_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_1_fu_517_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_1_reg_769 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_25_fu_538_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_25_reg_774 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond1_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_592_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_29_reg_779 : STD_LOGIC_VECTOR (14 downto 0);
    signal output_addr_1_reg_784 : STD_LOGIC_VECTOR (11 downto 0);
    signal w_2_fu_612_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_2_reg_789 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_1_fu_624_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_1_reg_797 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_load_reg_812 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal input_load_reg_817 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_822 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal output_load_reg_832 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_4_reg_837 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal co_reg_116 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_reg_127 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_139 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal co1_reg_150 : STD_LOGIC_VECTOR (6 downto 0);
    signal h2_reg_161 : STD_LOGIC_VECTOR (2 downto 0);
    signal w3_reg_173 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal sum_reg_185 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_197 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_220 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_cast_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_cast_fu_607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_cast_fu_639_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_cast_fu_668_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_231_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_1_fu_258_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_270_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_266_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_278_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_fu_282_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_cast_fu_298_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_fu_302_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_16_fu_307_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_311_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl3_cast_fu_319_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_8_cast_fu_339_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_fu_380_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_392_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl8_cast_fu_400_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_cast_fu_388_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_fu_410_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl6_cast_fu_418_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_cast_fu_376_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_422_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_13_fu_432_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_cast_fu_456_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_18_fu_460_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_19_fu_465_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl9_cast_fu_469_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl10_cast_fu_477_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_7_cast_fu_523_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_23_fu_527_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_24_fu_532_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp1_fu_544_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_cast_fu_550_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_554_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_cast_fu_559_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_26_fu_563_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_27_fu_568_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_28_fu_580_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl12_cast_fu_588_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl11_cast_fu_576_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_cast_fu_598_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_22_fu_602_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_11_cast_fu_630_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_30_fu_634_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_fu_644_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_650_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_fu_654_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_cast_fu_659_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_31_fu_663_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);

    component ShuffleNetV2_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ShuffleNetV2_faddbkb_x_U81 : component ShuffleNetV2_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_231_p0,
        din1 => grp_fu_231_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_231_p2);

    ShuffleNetV2_fmulcud_x_U82 : component ShuffleNetV2_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_load_reg_812,
        din1 => input_load_reg_817,
        ce => ap_const_logic_1,
        dout => grp_fu_237_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co1_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_241_p2 = ap_const_lv1_1))) then 
                co1_reg_150 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond3_fu_442_p2))) then 
                co1_reg_150 <= co_2_reg_720;
            end if; 
        end if;
    end process;

    co_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond6_fu_292_p2 = ap_const_lv1_1))) then 
                co_reg_116 <= co_1_reg_676;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_116 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    h2_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond4_fu_364_p2))) then 
                h2_reg_161 <= ap_const_lv3_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond2_fu_491_p2))) then 
                h2_reg_161 <= h_2_fu_505_p2;
            end if; 
        end if;
    end process;

    h_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_241_p2 = ap_const_lv1_0))) then 
                h_reg_127 <= ap_const_lv3_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_fu_333_p2 = ap_const_lv1_1))) then 
                h_reg_127 <= h_1_fu_354_p2;
            end if; 
        end if;
    end process;

    m_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond_fu_618_p2))) then 
                m_reg_197 <= m_1_reg_769;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond2_fu_491_p2))) then 
                m_reg_197 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond1_fu_511_p2))) then 
                n_reg_220 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                n_reg_220 <= n_1_reg_797;
            end if; 
        end if;
    end process;

    sum_1_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond1_fu_511_p2))) then 
                sum_1_reg_208 <= sum_reg_185;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                sum_1_reg_208 <= grp_fu_231_p2;
            end if; 
        end if;
    end process;

    sum_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond_fu_618_p2))) then 
                sum_reg_185 <= sum_1_reg_208;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond2_fu_491_p2))) then 
                sum_reg_185 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w3_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond3_fu_442_p2))) then 
                w3_reg_173 <= ap_const_lv3_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                w3_reg_173 <= w_2_reg_789;
            end if; 
        end if;
    end process;

    w_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_292_p2))) then 
                w_reg_139 <= ap_const_lv3_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                w_reg_139 <= w_1_reg_707;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_241_p2 = ap_const_lv1_0))) then
                bias_addr_reg_686 <= tmp_fu_253_p1(7 - 1 downto 0);
                    tmp_17_cast_reg_681(11 downto 1) <= tmp_17_cast_fu_288_p1(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_1_reg_676 <= co_1_fu_247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                co_2_reg_720 <= co_2_fu_370_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                input_load_reg_817 <= input_r_q0;
                weight_load_reg_812 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                m_1_reg_769 <= m_1_fu_517_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                n_1_reg_797 <= n_1_fu_624_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond1_fu_511_p2))) then
                output_addr_1_reg_784 <= tmp_35_cast_fu_607_p1(12 - 1 downto 0);
                w_2_reg_789 <= w_2_fu_612_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                output_load_reg_832 <= output_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_14_reg_822 <= grp_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_292_p2))) then
                    tmp_17_reg_694(12 downto 1) <= tmp_17_fu_327_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond3_fu_442_p2))) then
                    tmp_20_reg_748(12 downto 1) <= tmp_20_fu_485_p2(12 downto 1);
                    tmp_5_reg_743(3 downto 1) <= tmp_5_fu_448_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond5_fu_333_p2))) then
                tmp_21_reg_702 <= tmp_21_fu_343_p2;
                w_1_reg_707 <= w_1_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond4_fu_364_p2))) then
                tmp_22_cast_reg_730 <= tmp_22_cast_fu_428_p1;
                    tmp_25_cast_reg_735(11 downto 1) <= tmp_25_cast_fu_438_p1(11 downto 1);
                    tmp_8_reg_725(10 downto 1) <= tmp_8_fu_404_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond1_fu_511_p2))) then
                tmp_25_reg_774 <= tmp_25_fu_538_p2;
                    tmp_29_reg_779(14 downto 1) <= tmp_29_fu_592_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp_4_reg_837 <= grp_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond2_fu_491_p2))) then
                    tmp_s_reg_756(3 downto 1) <= tmp_s_fu_497_p3(3 downto 1);
            end if;
        end if;
    end process;
    tmp_17_cast_reg_681(0) <= '0';
    tmp_17_reg_694(0) <= '0';
    tmp_8_reg_725(0) <= '0';
    tmp_25_cast_reg_735(0) <= '0';
    tmp_5_reg_743(0) <= '0';
    tmp_20_reg_748(0) <= '0';
    tmp_s_reg_756(0) <= '0';
    tmp_29_reg_779(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond7_fu_241_p2, ap_CS_fsm_state3, exitcond6_fu_292_p2, ap_CS_fsm_state4, exitcond5_fu_333_p2, ap_CS_fsm_state6, exitcond4_fu_364_p2, ap_CS_fsm_state7, exitcond3_fu_442_p2, ap_CS_fsm_state8, exitcond2_fu_491_p2, ap_CS_fsm_state9, exitcond1_fu_511_p2, ap_CS_fsm_state10, exitcond_fu_618_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_241_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond6_fu_292_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_fu_333_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond4_fu_364_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond3_fu_442_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond2_fu_491_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond1_fu_511_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond_fu_618_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, exitcond4_fu_364_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond4_fu_364_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, exitcond4_fu_364_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond4_fu_364_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_686;

    bias_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_1_fu_247_p2 <= std_logic_vector(unsigned(co_reg_116) + unsigned(ap_const_lv7_1));
    co_2_fu_370_p2 <= std_logic_vector(unsigned(co1_reg_150) + unsigned(ap_const_lv7_1));
    exitcond1_fu_511_p2 <= "1" when (m_reg_197 = ap_const_lv2_3) else "0";
    exitcond2_fu_491_p2 <= "1" when (w3_reg_173 = ap_const_lv3_5) else "0";
    exitcond3_fu_442_p2 <= "1" when (h2_reg_161 = ap_const_lv3_5) else "0";
    exitcond4_fu_364_p2 <= "1" when (co1_reg_150 = ap_const_lv7_60) else "0";
    exitcond5_fu_333_p2 <= "1" when (w_reg_139 = ap_const_lv3_5) else "0";
    exitcond6_fu_292_p2 <= "1" when (h_reg_127 = ap_const_lv3_5) else "0";
    exitcond7_fu_241_p2 <= "1" when (co_reg_116 = ap_const_lv7_60) else "0";
    exitcond_fu_618_p2 <= "1" when (n_reg_220 = ap_const_lv2_3) else "0";

    grp_fu_231_p0_assign_proc : process(output_load_reg_832, sum_1_reg_208, ap_CS_fsm_state16, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_231_p0 <= output_load_reg_832;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_231_p0 <= sum_1_reg_208;
        else 
            grp_fu_231_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_231_p1_assign_proc : process(tmp_14_reg_822, sum_reg_185, ap_CS_fsm_state16, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_231_p1 <= sum_reg_185;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_231_p1 <= tmp_14_reg_822;
        else 
            grp_fu_231_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_1_fu_354_p2 <= std_logic_vector(unsigned(h_reg_127) + unsigned(ap_const_lv3_1));
    h_2_fu_505_p2 <= std_logic_vector(unsigned(h2_reg_161) + unsigned(ap_const_lv3_1));
    input_r_address0 <= tmp_44_cast_fu_668_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_1_fu_517_p2 <= std_logic_vector(unsigned(m_reg_197) + unsigned(ap_const_lv2_1));
    n_1_fu_624_p2 <= std_logic_vector(unsigned(n_reg_220) + unsigned(ap_const_lv2_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state9, output_addr_1_reg_784, ap_CS_fsm_state5, ap_CS_fsm_state27, tmp_34_cast_fu_360_p1, tmp_35_cast_fu_607_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_r_address0 <= output_addr_1_reg_784;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_address0 <= tmp_35_cast_fu_607_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_address0 <= tmp_34_cast_fu_360_p1(12 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(bias_q0, tmp_4_reg_837, ap_CS_fsm_state5, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_r_d0 <= tmp_4_reg_837;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_d0 <= bias_q0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl10_cast_fu_477_p3 <= (tmp_18_fu_460_p2 & ap_const_lv1_0);
    p_shl11_cast_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_568_p3),15));
    p_shl12_cast_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_580_p3),15));
    p_shl1_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_270_p3),11));
    p_shl2_cast_fu_311_p3 <= (tmp_16_fu_307_p1 & ap_const_lv3_0);
    p_shl3_cast_fu_319_p3 <= (tmp_15_fu_302_p2 & ap_const_lv1_0);
    p_shl6_cast_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_410_p3),10));
    p_shl7_cast_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_380_p3),11));
    p_shl8_cast_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_392_p3),11));
    p_shl9_cast_fu_469_p3 <= (tmp_19_fu_465_p1 & ap_const_lv3_0);
    p_shl_cast_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_258_p3),11));
        tmp1_cast_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_544_p2),4));

    tmp1_fu_544_p2 <= (m_reg_197 xor ap_const_lv2_2);
        tmp2_cast_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_644_p2),4));

    tmp2_fu_644_p2 <= (n_reg_220 xor ap_const_lv2_2);
    tmp_10_cast_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_554_p2),11));
    tmp_10_fu_410_p3 <= (co1_reg_150 & ap_const_lv2_0);
    tmp_11_cast_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_220),11));
    tmp_11_fu_422_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_418_p1) - unsigned(tmp_1_cast_fu_376_p1));
    tmp_12_fu_654_p2 <= std_logic_vector(unsigned(tmp_s_reg_756) + unsigned(tmp2_cast_fu_650_p1));
    tmp_13_cast_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_654_p2),15));
    tmp_13_fu_432_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_388_p1) - unsigned(p_shl8_cast_fu_400_p1));
    tmp_15_fu_302_p2 <= std_logic_vector(unsigned(tmp_3_cast_fu_298_p1) + unsigned(tmp_17_cast_reg_681));
    tmp_16_fu_307_p1 <= tmp_15_fu_302_p2(10 - 1 downto 0);
        tmp_17_cast_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_282_p2),12));

    tmp_17_fu_327_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_311_p3) - unsigned(p_shl3_cast_fu_319_p3));
    tmp_18_fu_460_p2 <= std_logic_vector(signed(tmp_25_cast_reg_735) + signed(tmp_6_cast_fu_456_p1));
    tmp_19_fu_465_p1 <= tmp_18_fu_460_p2(10 - 1 downto 0);
    tmp_1_cast_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co1_reg_150),10));
    tmp_1_fu_258_p3 <= (co_reg_116 & ap_const_lv3_0);
    tmp_20_fu_485_p2 <= std_logic_vector(unsigned(p_shl9_cast_fu_469_p3) - unsigned(p_shl10_cast_fu_477_p3));
    tmp_21_fu_343_p2 <= std_logic_vector(unsigned(tmp_17_reg_694) + unsigned(tmp_8_cast_fu_339_p1));
        tmp_22_cast_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_fu_422_p2),11));

    tmp_22_fu_602_p2 <= std_logic_vector(unsigned(tmp_20_reg_748) + unsigned(tmp_2_cast_fu_598_p1));
    tmp_23_fu_527_p2 <= std_logic_vector(signed(tmp_22_cast_reg_730) + signed(tmp_7_cast_fu_523_p1));
    tmp_24_fu_532_p2 <= std_logic_vector(shift_left(unsigned(tmp_23_fu_527_p2),to_integer(unsigned('0' & ap_const_lv11_2(11-1 downto 0)))));
        tmp_25_cast_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_432_p2),12));

    tmp_25_fu_538_p2 <= std_logic_vector(unsigned(tmp_24_fu_532_p2) - unsigned(tmp_23_fu_527_p2));
    tmp_26_fu_563_p2 <= std_logic_vector(unsigned(tmp_8_reg_725) + unsigned(tmp_10_cast_fu_559_p1));
    tmp_27_fu_568_p3 <= (tmp_26_fu_563_p2 & ap_const_lv3_0);
    tmp_28_fu_580_p3 <= (tmp_26_fu_563_p2 & ap_const_lv1_0);
    tmp_29_fu_592_p2 <= std_logic_vector(unsigned(p_shl12_cast_fu_588_p1) + unsigned(p_shl11_cast_fu_576_p1));
    tmp_2_cast_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w3_reg_173),13));
    tmp_2_fu_270_p3 <= (co_reg_116 & ap_const_lv1_0);
    tmp_30_fu_634_p2 <= std_logic_vector(unsigned(tmp_25_reg_774) + unsigned(tmp_11_cast_fu_630_p1));
    tmp_31_fu_663_p2 <= std_logic_vector(unsigned(tmp_29_reg_779) + unsigned(tmp_13_cast_fu_659_p1));
    tmp_34_cast_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_reg_702),64));
    tmp_35_cast_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_602_p2),64));
    tmp_3_cast_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_127),12));
    tmp_3_fu_282_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_266_p1) - unsigned(p_shl1_cast_fu_278_p1));
    tmp_43_cast_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_634_p2),64));
    tmp_44_cast_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_663_p2),64));
    tmp_5_fu_448_p3 <= (h2_reg_161 & ap_const_lv1_0);
    tmp_6_cast_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h2_reg_161),12));
    tmp_6_fu_380_p3 <= (co1_reg_150 & ap_const_lv3_0);
    tmp_7_cast_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_197),11));
    tmp_7_fu_392_p3 <= (co1_reg_150 & ap_const_lv1_0);
    tmp_8_cast_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_139),13));
    tmp_8_fu_404_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_400_p1) + unsigned(p_shl7_cast_fu_388_p1));
    tmp_9_fu_554_p2 <= std_logic_vector(unsigned(tmp_5_reg_743) + unsigned(tmp1_cast_fu_550_p1));
    tmp_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_116),64));
    tmp_s_fu_497_p3 <= (w3_reg_173 & ap_const_lv1_0);
    w_1_fu_348_p2 <= std_logic_vector(unsigned(w_reg_139) + unsigned(ap_const_lv3_1));
    w_2_fu_612_p2 <= std_logic_vector(unsigned(w3_reg_173) + unsigned(ap_const_lv3_1));
    weight_address0 <= tmp_43_cast_fu_639_p1(10 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
