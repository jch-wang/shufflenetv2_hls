-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_last is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_last is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal co_40_fu_277_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_40_reg_649 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_556_cast_fu_296_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_556_cast_reg_654 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond9_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_addr_reg_659 : STD_LOGIC_VECTOR (8 downto 0);
    signal h_40_fu_306_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_40_reg_667 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_564_cast_fu_321_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_564_cast_reg_672 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond8_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_40_fu_335_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_40_reg_680 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_430_fu_345_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_430_reg_685 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond7_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal co_41_fu_360_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_41_reg_693 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_425_fu_386_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_425_reg_698 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond6_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_561_cast_fu_400_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_561_cast_reg_703 : STD_LOGIC_VECTOR (12 downto 0);
    signal h_41_fu_410_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_41_reg_711 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_136_cast3_fu_416_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_136_cast3_reg_716 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond5_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_569_cast_fu_429_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_569_cast_reg_721 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_41_fu_443_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_41_reg_729 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_139_cast2_fu_449_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_139_cast2_reg_734 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond4_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_13_reg_739 : STD_LOGIC_VECTOR (12 downto 0);
    signal ci_7_fu_473_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ci_7_reg_747 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond3_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_load_reg_762 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal input_load_reg_767 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_143_reg_772 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_141_reg_782 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal co_42_fu_534_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_42_reg_790 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp_566_cast_fu_548_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_566_cast_reg_795 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond2_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_42_fu_558_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_42_reg_803 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_573_cast_fu_573_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_573_cast_reg_808 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond1_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_1_fu_587_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_1_reg_816 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal output_addr_14_reg_821 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_826 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal notrhs_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_831 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_reg_836 : STD_LOGIC_VECTOR (0 downto 0);
    signal co_reg_128 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_reg_139 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_150 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal co1_reg_161 : STD_LOGIC_VECTOR (9 downto 0);
    signal h2_reg_172 : STD_LOGIC_VECTOR (2 downto 0);
    signal w3_reg_183 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal sum_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal ci_reg_206 : STD_LOGIC_VECTOR (7 downto 0);
    signal co4_reg_217 : STD_LOGIC_VECTOR (9 downto 0);
    signal h5_reg_228 : STD_LOGIC_VECTOR (2 downto 0);
    signal w6_reg_239 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_570_cast_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_574_cast_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_581_cast_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_582_cast_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_575_cast_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_250_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_s_fu_288_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_fu_312_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_427_fu_316_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_137_cast_fu_341_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_424_fu_374_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_423_fu_366_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl1_cast_fu_382_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_426_fu_392_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_136_cast_fu_420_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_429_fu_424_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_139_cast_fu_453_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_432_fu_457_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_434_fu_483_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_577_cast_fu_491_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_435_fu_495_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_580_cast_fu_500_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_436_fu_508_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_142_cast_fu_479_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_437_fu_518_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_428_fu_540_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_138_cast_fu_564_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_431_fu_568_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_140_cast_fu_593_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_433_fu_597_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal output_load_to_int_fu_607_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_611_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_354_fu_621_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_33_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);

    component ShuffleNetV2_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fcmpdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    ShuffleNetV2_faddbkb_x_U107 : component ShuffleNetV2_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_250_p0,
        din1 => grp_fu_250_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_250_p2);

    ShuffleNetV2_fmulcud_x_U108 : component ShuffleNetV2_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_load_reg_762,
        din1 => input_load_reg_767,
        ce => ap_const_logic_1,
        dout => grp_fu_256_p2);

    ShuffleNetV2_fcmpdEe_x_U109 : component ShuffleNetV2_fcmpdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_265,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_4,
        dout => tmp_34_fu_260_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ci_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond4_fu_437_p2))) then 
                ci_reg_206 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                ci_reg_206 <= ci_7_reg_747;
            end if; 
        end if;
    end process;

    co1_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_271_p2 = ap_const_lv1_1))) then 
                co1_reg_161 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond5_fu_404_p2 = ap_const_lv1_1))) then 
                co1_reg_161 <= co_41_reg_693;
            end if; 
        end if;
    end process;

    co4_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond6_fu_354_p2 = ap_const_lv1_1))) then 
                co4_reg_217 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (exitcond1_fu_552_p2 = ap_const_lv1_1))) then 
                co4_reg_217 <= co_42_reg_790;
            end if; 
        end if;
    end process;

    co_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond8_fu_300_p2 = ap_const_lv1_1))) then 
                co_reg_128 <= co_40_reg_649;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_128 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    h2_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond4_fu_437_p2 = ap_const_lv1_1))) then 
                h2_reg_172 <= h_41_reg_711;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond6_fu_354_p2))) then 
                h2_reg_172 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    h5_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond_fu_581_p2 = ap_const_lv1_1))) then 
                h5_reg_228 <= h_42_reg_803;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_0 = exitcond2_fu_528_p2))) then 
                h5_reg_228 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    h_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_329_p2 = ap_const_lv1_1))) then 
                h_reg_139 <= h_40_reg_667;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_271_p2 = ap_const_lv1_0))) then 
                h_reg_139 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    sum_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond4_fu_437_p2))) then 
                sum_reg_194 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                sum_reg_194 <= grp_fu_250_p2;
            end if; 
        end if;
    end process;

    w3_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond5_fu_404_p2))) then 
                w3_reg_183 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                w3_reg_183 <= w_41_reg_729;
            end if; 
        end if;
    end process;

    w6_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = exitcond1_fu_552_p2))) then 
                w6_reg_239 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                w6_reg_239 <= w_1_reg_816;
            end if; 
        end if;
    end process;

    w_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond8_fu_300_p2))) then 
                w_reg_150 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                w_reg_150 <= w_40_reg_680;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_271_p2 = ap_const_lv1_0))) then
                bias_addr_reg_659 <= tmp_fu_283_p1(9 - 1 downto 0);
                    tmp_556_cast_reg_654(11 downto 2) <= tmp_556_cast_fu_296_p1(11 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                ci_7_reg_747 <= ci_7_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_40_reg_649 <= co_40_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                co_41_reg_693 <= co_41_fu_360_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                co_42_reg_790 <= co_42_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_40_reg_667 <= h_40_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                h_41_reg_711 <= h_41_fu_410_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                h_42_reg_803 <= h_42_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                input_load_reg_767 <= input_r_q0;
                weight_load_reg_762 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                notlhs_reg_826 <= notlhs_fu_625_p2;
                notrhs_reg_831 <= notrhs_fu_631_p2;
                tmp_34_reg_836 <= tmp_34_fu_260_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond4_fu_437_p2))) then
                output_addr_13_reg_739 <= tmp_574_cast_fu_462_p1(13 - 1 downto 0);
                    tmp_139_cast2_reg_734(2 downto 0) <= tmp_139_cast2_fu_449_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_lv1_0 = exitcond_fu_581_p2))) then
                output_addr_14_reg_821 <= tmp_575_cast_fu_602_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state30))) then
                reg_265 <= output_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond5_fu_404_p2))) then
                    tmp_136_cast3_reg_716(2 downto 0) <= tmp_136_cast3_fu_416_p1(2 downto 0);
                    tmp_569_cast_reg_721(14 downto 2) <= tmp_569_cast_fu_429_p3(14 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp_141_reg_782 <= grp_fu_250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_143_reg_772 <= grp_fu_256_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond6_fu_354_p2))) then
                    tmp_425_reg_698(17 downto 6) <= tmp_425_fu_386_p2(17 downto 6);
                    tmp_561_cast_reg_703(11 downto 2) <= tmp_561_cast_fu_400_p1(11 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond7_fu_329_p2))) then
                tmp_430_reg_685 <= tmp_430_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond8_fu_300_p2))) then
                    tmp_564_cast_reg_672(14 downto 2) <= tmp_564_cast_fu_321_p3(14 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_0 = exitcond2_fu_528_p2))) then
                    tmp_566_cast_reg_795(11 downto 2) <= tmp_566_cast_fu_548_p1(11 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = exitcond1_fu_552_p2))) then
                    tmp_573_cast_reg_808(14 downto 2) <= tmp_573_cast_fu_573_p3(14 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                w_1_reg_816 <= w_1_fu_587_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                w_40_reg_680 <= w_40_fu_335_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                w_41_reg_729 <= w_41_fu_443_p2;
            end if;
        end if;
    end process;
    tmp_556_cast_reg_654(1 downto 0) <= "00";
    tmp_556_cast_reg_654(12) <= '0';
    tmp_564_cast_reg_672(1 downto 0) <= "00";
    tmp_425_reg_698(5 downto 0) <= "000000";
    tmp_561_cast_reg_703(1 downto 0) <= "00";
    tmp_561_cast_reg_703(12) <= '0';
    tmp_136_cast3_reg_716(10 downto 3) <= "00000000";
    tmp_569_cast_reg_721(1 downto 0) <= "00";
    tmp_139_cast2_reg_734(12 downto 3) <= "0000000000";
    tmp_566_cast_reg_795(1 downto 0) <= "00";
    tmp_566_cast_reg_795(12) <= '0';
    tmp_573_cast_reg_808(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond9_fu_271_p2, ap_CS_fsm_state3, exitcond8_fu_300_p2, ap_CS_fsm_state4, exitcond7_fu_329_p2, ap_CS_fsm_state6, exitcond6_fu_354_p2, ap_CS_fsm_state7, exitcond5_fu_404_p2, ap_CS_fsm_state8, exitcond4_fu_437_p2, ap_CS_fsm_state9, exitcond3_fu_467_p2, ap_CS_fsm_state27, exitcond2_fu_528_p2, ap_CS_fsm_state28, exitcond1_fu_552_p2, ap_CS_fsm_state29, exitcond_fu_581_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_271_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond8_fu_300_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_329_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond6_fu_354_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond5_fu_404_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond4_fu_437_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond3_fu_467_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (exitcond2_fu_528_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (exitcond1_fu_552_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (exitcond_fu_581_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state27, exitcond2_fu_528_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (exitcond2_fu_528_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state27, exitcond2_fu_528_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (exitcond2_fu_528_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_659;

    bias_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ci_7_fu_473_p2 <= std_logic_vector(unsigned(ci_reg_206) + unsigned(ap_const_lv8_1));
    co_40_fu_277_p2 <= std_logic_vector(unsigned(co_reg_128) + unsigned(ap_const_lv10_1));
    co_41_fu_360_p2 <= std_logic_vector(unsigned(co1_reg_161) + unsigned(ap_const_lv10_1));
    co_42_fu_534_p2 <= std_logic_vector(unsigned(co4_reg_217) + unsigned(ap_const_lv10_1));
    exitcond1_fu_552_p2 <= "1" when (h5_reg_228 = ap_const_lv3_4) else "0";
    exitcond2_fu_528_p2 <= "1" when (co4_reg_217 = ap_const_lv10_200) else "0";
    exitcond3_fu_467_p2 <= "1" when (ci_reg_206 = ap_const_lv8_C0) else "0";
    exitcond4_fu_437_p2 <= "1" when (w3_reg_183 = ap_const_lv3_4) else "0";
    exitcond5_fu_404_p2 <= "1" when (h2_reg_172 = ap_const_lv3_4) else "0";
    exitcond6_fu_354_p2 <= "1" when (co1_reg_161 = ap_const_lv10_200) else "0";
    exitcond7_fu_329_p2 <= "1" when (w_reg_150 = ap_const_lv3_4) else "0";
    exitcond8_fu_300_p2 <= "1" when (h_reg_139 = ap_const_lv3_4) else "0";
    exitcond9_fu_271_p2 <= "1" when (co_reg_128 = ap_const_lv10_200) else "0";
    exitcond_fu_581_p2 <= "1" when (w6_reg_239 = ap_const_lv3_4) else "0";

    grp_fu_250_p0_assign_proc : process(reg_265, sum_reg_194, ap_CS_fsm_state15, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_250_p0 <= reg_265;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_250_p0 <= sum_reg_194;
        else 
            grp_fu_250_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_250_p1_assign_proc : process(tmp_143_reg_772, sum_reg_194, ap_CS_fsm_state15, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_250_p1 <= sum_reg_194;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_250_p1 <= tmp_143_reg_772;
        else 
            grp_fu_250_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_40_fu_306_p2 <= std_logic_vector(unsigned(h_reg_139) + unsigned(ap_const_lv3_1));
    h_41_fu_410_p2 <= std_logic_vector(unsigned(h2_reg_172) + unsigned(ap_const_lv3_1));
    h_42_fu_558_p2 <= std_logic_vector(unsigned(h5_reg_228) + unsigned(ap_const_lv3_1));
    input_r_address0 <= tmp_581_cast_fu_513_p1(12 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    notlhs_fu_625_p2 <= "0" when (tmp_31_fu_611_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_631_p2 <= "1" when (tmp_354_fu_621_p1 = ap_const_lv23_0) else "0";
    output_load_to_int_fu_607_p1 <= reg_265;

    output_r_address0_assign_proc : process(output_addr_13_reg_739, ap_CS_fsm_state9, ap_CS_fsm_state29, output_addr_14_reg_821, ap_CS_fsm_state5, ap_CS_fsm_state26, ap_CS_fsm_state32, tmp_570_cast_fu_350_p1, tmp_575_cast_fu_602_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            output_r_address0 <= output_addr_14_reg_821;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_r_address0 <= tmp_575_cast_fu_602_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            output_r_address0 <= output_addr_13_reg_739;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_address0 <= tmp_570_cast_fu_350_p1(13 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state29, ap_CS_fsm_state5, ap_CS_fsm_state26, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(bias_q0, tmp_141_reg_782, ap_CS_fsm_state5, ap_CS_fsm_state26, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            output_r_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            output_r_d0 <= tmp_141_reg_782;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_d0 <= bias_q0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state26, ap_CS_fsm_state32, tmp_35_fu_641_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_lv1_1 = tmp_35_fu_641_p2)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_424_fu_374_p3),18));
    tmp_136_cast3_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h2_reg_172),11));
    tmp_136_cast_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h2_reg_172),13));
    tmp_137_cast_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_150),15));
    tmp_138_cast_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h5_reg_228),13));
    tmp_139_cast2_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w3_reg_183),13));
    tmp_139_cast_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w3_reg_183),15));
    tmp_140_cast_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w6_reg_239),15));
    tmp_142_cast_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_206),18));
    tmp_31_fu_611_p4 <= output_load_to_int_fu_607_p1(30 downto 23);
    tmp_33_fu_637_p2 <= (notrhs_reg_831 or notlhs_reg_826);
    tmp_354_fu_621_p1 <= output_load_to_int_fu_607_p1(23 - 1 downto 0);
    tmp_35_fu_641_p2 <= (tmp_33_fu_637_p2 and tmp_34_reg_836);
    tmp_423_fu_366_p3 <= (co1_reg_161 & ap_const_lv8_0);
    tmp_424_fu_374_p3 <= (co1_reg_161 & ap_const_lv6_0);
    tmp_425_fu_386_p2 <= std_logic_vector(unsigned(tmp_423_fu_366_p3) - unsigned(p_shl1_cast_fu_382_p1));
    tmp_426_fu_392_p3 <= (co1_reg_161 & ap_const_lv2_0);
    tmp_427_fu_316_p2 <= std_logic_vector(unsigned(tmp_cast_fu_312_p1) + unsigned(tmp_556_cast_reg_654));
    tmp_428_fu_540_p3 <= (co4_reg_217 & ap_const_lv2_0);
    tmp_429_fu_424_p2 <= std_logic_vector(unsigned(tmp_136_cast_fu_420_p1) + unsigned(tmp_561_cast_reg_703));
    tmp_430_fu_345_p2 <= std_logic_vector(unsigned(tmp_564_cast_reg_672) + unsigned(tmp_137_cast_fu_341_p1));
    tmp_431_fu_568_p2 <= std_logic_vector(unsigned(tmp_138_cast_fu_564_p1) + unsigned(tmp_566_cast_reg_795));
    tmp_432_fu_457_p2 <= std_logic_vector(unsigned(tmp_569_cast_reg_721) + unsigned(tmp_139_cast_fu_453_p1));
    tmp_433_fu_597_p2 <= std_logic_vector(unsigned(tmp_573_cast_reg_808) + unsigned(tmp_140_cast_fu_593_p1));
    tmp_434_fu_483_p3 <= (ci_reg_206 & ap_const_lv2_0);
    tmp_435_fu_495_p2 <= std_logic_vector(unsigned(tmp_136_cast3_reg_716) + unsigned(tmp_577_cast_fu_491_p1));
    tmp_436_fu_508_p2 <= std_logic_vector(unsigned(tmp_139_cast2_reg_734) + unsigned(tmp_580_cast_fu_500_p3));
    tmp_437_fu_518_p2 <= std_logic_vector(unsigned(tmp_142_cast_fu_479_p1) + unsigned(tmp_425_reg_698));
    tmp_556_cast_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_288_p3),13));
    tmp_561_cast_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_426_fu_392_p3),13));
    tmp_564_cast_fu_321_p3 <= (tmp_427_fu_316_p2 & ap_const_lv2_0);
    tmp_566_cast_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_428_fu_540_p3),13));
    tmp_569_cast_fu_429_p3 <= (tmp_429_fu_424_p2 & ap_const_lv2_0);
    tmp_570_cast_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_430_reg_685),64));
    tmp_573_cast_fu_573_p3 <= (tmp_431_fu_568_p2 & ap_const_lv2_0);
    tmp_574_cast_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_432_fu_457_p2),64));
    tmp_575_cast_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_433_fu_597_p2),64));
    tmp_577_cast_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_434_fu_483_p3),11));
    tmp_580_cast_fu_500_p3 <= (tmp_435_fu_495_p2 & ap_const_lv2_0);
    tmp_581_cast_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_436_fu_508_p2),64));
        tmp_582_cast_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_437_fu_518_p2),64));

    tmp_cast_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_139),13));
    tmp_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_128),64));
    tmp_s_fu_288_p3 <= (co_reg_128 & ap_const_lv2_0);
    w_1_fu_587_p2 <= std_logic_vector(unsigned(w6_reg_239) + unsigned(ap_const_lv3_1));
    w_40_fu_335_p2 <= std_logic_vector(unsigned(w_reg_150) + unsigned(ap_const_lv3_1));
    w_41_fu_443_p2 <= std_logic_vector(unsigned(w3_reg_183) + unsigned(ap_const_lv3_1));
    weight_address0 <= tmp_582_cast_fu_523_p1(17 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
