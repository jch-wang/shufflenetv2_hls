-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_1x1_16_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of subconv_1x1_16_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal co_28_fu_272_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_28_reg_782 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_295_fu_307_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_295_reg_787 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond9_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_addr_reg_792 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_303_fu_348_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_303_reg_800 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond8_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_309_fu_364_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_309_reg_808 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond7_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_28_fu_369_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_28_reg_813 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_28_fu_375_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_29_fu_391_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_29_reg_826 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_298_fu_421_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_298_reg_831 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond6_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_301_fu_451_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_301_reg_836 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_119_cast_fu_463_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_119_cast_reg_844 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond5_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_308_fu_492_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_308_reg_849 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_122_cast_fu_504_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_122_cast_reg_857 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond4_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_12_reg_862 : STD_LOGIC_VECTOR (12 downto 0);
    signal h_29_fu_518_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ci_6_fu_530_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ci_6_reg_875 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_322_fu_601_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_322_reg_880 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond3_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_323_fu_606_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_323_reg_885 : STD_LOGIC_VECTOR (10 downto 0);
    signal w_29_fu_611_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_29_reg_890 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal weight_load_reg_905 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal input_load_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_251_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_126_reg_915 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_245_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_124_reg_925 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal co_30_fu_631_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_30_reg_933 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_306_fu_661_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_306_reg_938 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond2_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_312_fu_702_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_312_reg_946 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal exitcond1_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_11_reg_954 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal exitcond_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_30_fu_728_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal notlhs_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_964 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal notrhs_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_969 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_reg_974 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_30_fu_773_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal co_reg_118 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_129 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_141 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal co1_reg_152 : STD_LOGIC_VECTOR (4 downto 0);
    signal h2_reg_163 : STD_LOGIC_VECTOR (4 downto 0);
    signal w3_reg_175 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal sum_reg_187 : STD_LOGIC_VECTOR (31 downto 0);
    signal ci_reg_199 : STD_LOGIC_VECTOR (4 downto 0);
    signal co4_reg_210 : STD_LOGIC_VECTOR (4 downto 0);
    signal h5_reg_221 : STD_LOGIC_VECTOR (4 downto 0);
    signal w6_reg_233 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_386_cast_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_391_cast_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_400_cast_fu_617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_401_cast_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_392_cast_fu_723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_245_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_245_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_s_fu_283_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_294_fu_295_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_303_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_291_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_fu_319_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_302_fu_323_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_292_fu_336_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_328_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl3_cast_fu_344_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_120_cast_fu_360_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_296_fu_397_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_297_fu_409_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl6_cast_fu_405_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_cast_fu_417_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_299_fu_427_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_300_fu_439_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl5_cast_fu_447_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_cast_fu_435_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_307_fu_467_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_293_fu_480_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl8_cast_fu_472_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl9_cast_fu_488_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_313_fu_508_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_316_fu_540_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_317_fu_552_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl12_cast_fu_548_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl13_cast_fu_560_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_318_fu_564_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_319_fu_570_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_320_fu_583_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl10_cast_fu_575_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl11_cast_fu_591_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_321_fu_595_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_125_cast_fu_536_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_304_fu_637_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_305_fu_649_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl15_cast_fu_657_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl14_cast_fu_645_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_121_cast_fu_673_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_310_fu_677_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_311_fu_690_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl16_cast_fu_682_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl17_cast_fu_698_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_123_cast_fu_714_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_314_fu_718_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal output_load_to_int_fu_734_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_738_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_315_fu_748_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_28_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);

    component ShuffleNetV2_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fcmpdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    ShuffleNetV2_faddbkb_x_U21 : component ShuffleNetV2_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_245_p0,
        din1 => grp_fu_245_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_245_p2);

    ShuffleNetV2_fmulcud_x_U22 : component ShuffleNetV2_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_load_reg_905,
        din1 => input_load_reg_910,
        ce => ap_const_logic_1,
        dout => grp_fu_251_p2);

    ShuffleNetV2_fcmpdEe_x_U23 : component ShuffleNetV2_fcmpdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_260,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_4,
        dout => tmp_29_fu_255_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ci_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond4_fu_498_p2))) then 
                ci_reg_199 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                ci_reg_199 <= ci_6_reg_875;
            end if; 
        end if;
    end process;

    co1_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_266_p2 = ap_const_lv1_1))) then 
                co1_reg_152 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond5_fu_457_p2))) then 
                co1_reg_152 <= co_29_reg_826;
            end if; 
        end if;
    end process;

    co4_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond6_fu_385_p2))) then 
                co4_reg_210 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_lv1_1 = exitcond1_fu_667_p2))) then 
                co4_reg_210 <= co_30_reg_933;
            end if; 
        end if;
    end process;

    co_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond8_fu_313_p2 = ap_const_lv1_1))) then 
                co_reg_118 <= co_28_reg_782;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_118 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h2_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond6_fu_385_p2))) then 
                h2_reg_163 <= ap_const_lv5_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond4_fu_498_p2))) then 
                h2_reg_163 <= h_29_fu_518_p2;
            end if; 
        end if;
    end process;

    h5_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = exitcond2_fu_625_p2))) then 
                h5_reg_221 <= ap_const_lv5_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_1 = exitcond_fu_708_p2))) then 
                h5_reg_221 <= h_30_fu_728_p2;
            end if; 
        end if;
    end process;

    h_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_266_p2 = ap_const_lv1_0))) then 
                h_reg_129 <= ap_const_lv5_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_354_p2 = ap_const_lv1_1))) then 
                h_reg_129 <= h_28_fu_375_p2;
            end if; 
        end if;
    end process;

    sum_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond4_fu_498_p2))) then 
                sum_reg_187 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                sum_reg_187 <= grp_fu_245_p2;
            end if; 
        end if;
    end process;

    w3_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond5_fu_457_p2))) then 
                w3_reg_175 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                w3_reg_175 <= w_29_reg_890;
            end if; 
        end if;
    end process;

    w6_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_lv1_0 = exitcond1_fu_667_p2))) then 
                w6_reg_233 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                w6_reg_233 <= w_30_fu_773_p2;
            end if; 
        end if;
    end process;

    w_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond8_fu_313_p2))) then 
                w_reg_141 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                w_reg_141 <= w_28_reg_813;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_266_p2 = ap_const_lv1_0))) then
                bias_addr_reg_792 <= tmp_fu_278_p1(5 - 1 downto 0);
                    tmp_295_reg_787(9 downto 1) <= tmp_295_fu_307_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                ci_6_reg_875 <= ci_6_fu_530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_28_reg_782 <= co_28_fu_272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                co_29_reg_826 <= co_29_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                co_30_reg_933 <= co_30_fu_631_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                input_load_reg_910 <= input_r_q0;
                weight_load_reg_905 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                notlhs_reg_964 <= notlhs_fu_752_p2;
                notrhs_reg_969 <= notrhs_fu_758_p2;
                tmp_29_reg_974 <= tmp_29_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = exitcond_fu_708_p2))) then
                output_addr_11_reg_954 <= tmp_392_cast_fu_723_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond4_fu_498_p2))) then
                output_addr_12_reg_862 <= tmp_391_cast_fu_513_p1(13 - 1 downto 0);
                    tmp_122_cast_reg_857(4 downto 0) <= tmp_122_cast_fu_504_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state31))) then
                reg_260 <= output_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond5_fu_457_p2))) then
                    tmp_119_cast_reg_844(4 downto 0) <= tmp_119_cast_fu_463_p1(4 downto 0);
                    tmp_308_reg_849(13 downto 1) <= tmp_308_fu_492_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp_124_reg_925 <= grp_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_126_reg_915 <= grp_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond6_fu_385_p2))) then
                    tmp_298_reg_831(10 downto 3) <= tmp_298_fu_421_p2(10 downto 3);
                    tmp_301_reg_836(9 downto 1) <= tmp_301_fu_451_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond8_fu_313_p2))) then
                    tmp_303_reg_800(13 downto 1) <= tmp_303_fu_348_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = exitcond2_fu_625_p2))) then
                    tmp_306_reg_938(9 downto 1) <= tmp_306_fu_661_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond7_fu_354_p2))) then
                tmp_309_reg_808 <= tmp_309_fu_364_p2;
                w_28_reg_813 <= w_28_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_lv1_0 = exitcond1_fu_667_p2))) then
                    tmp_312_reg_946(13 downto 1) <= tmp_312_fu_702_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond3_fu_524_p2))) then
                tmp_322_reg_880 <= tmp_322_fu_601_p2;
                tmp_323_reg_885 <= tmp_323_fu_606_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond3_fu_524_p2))) then
                w_29_reg_890 <= w_29_fu_611_p2;
            end if;
        end if;
    end process;
    tmp_295_reg_787(0) <= '0';
    tmp_303_reg_800(0) <= '0';
    tmp_298_reg_831(2 downto 0) <= "000";
    tmp_301_reg_836(0) <= '0';
    tmp_119_cast_reg_844(9 downto 5) <= "00000";
    tmp_308_reg_849(0) <= '0';
    tmp_122_cast_reg_857(13 downto 5) <= "000000000";
    tmp_306_reg_938(0) <= '0';
    tmp_312_reg_946(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond9_fu_266_p2, ap_CS_fsm_state3, exitcond8_fu_313_p2, ap_CS_fsm_state4, exitcond7_fu_354_p2, ap_CS_fsm_state6, exitcond6_fu_385_p2, ap_CS_fsm_state7, exitcond5_fu_457_p2, ap_CS_fsm_state8, exitcond4_fu_498_p2, ap_CS_fsm_state9, exitcond3_fu_524_p2, ap_CS_fsm_state28, exitcond2_fu_625_p2, ap_CS_fsm_state29, exitcond1_fu_667_p2, ap_CS_fsm_state30, exitcond_fu_708_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_266_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond8_fu_313_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_354_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond6_fu_385_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond5_fu_457_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond4_fu_498_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond3_fu_524_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = exitcond2_fu_625_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_lv1_1 = exitcond1_fu_667_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_1 = exitcond_fu_708_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state28, exitcond2_fu_625_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = exitcond2_fu_625_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state28, exitcond2_fu_625_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_lv1_1 = exitcond2_fu_625_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_792;

    bias_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ci_6_fu_530_p2 <= std_logic_vector(unsigned(ci_reg_199) + unsigned(ap_const_lv5_1));
    co_28_fu_272_p2 <= std_logic_vector(unsigned(co_reg_118) + unsigned(ap_const_lv5_1));
    co_29_fu_391_p2 <= std_logic_vector(unsigned(co1_reg_152) + unsigned(ap_const_lv5_1));
    co_30_fu_631_p2 <= std_logic_vector(unsigned(co4_reg_210) + unsigned(ap_const_lv5_1));
    exitcond1_fu_667_p2 <= "1" when (h5_reg_221 = ap_const_lv5_11) else "0";
    exitcond2_fu_625_p2 <= "1" when (co4_reg_210 = ap_const_lv5_18) else "0";
    exitcond3_fu_524_p2 <= "1" when (ci_reg_199 = ap_const_lv5_18) else "0";
    exitcond4_fu_498_p2 <= "1" when (w3_reg_175 = ap_const_lv5_11) else "0";
    exitcond5_fu_457_p2 <= "1" when (h2_reg_163 = ap_const_lv5_11) else "0";
    exitcond6_fu_385_p2 <= "1" when (co1_reg_152 = ap_const_lv5_18) else "0";
    exitcond7_fu_354_p2 <= "1" when (w_reg_141 = ap_const_lv5_11) else "0";
    exitcond8_fu_313_p2 <= "1" when (h_reg_129 = ap_const_lv5_11) else "0";
    exitcond9_fu_266_p2 <= "1" when (co_reg_118 = ap_const_lv5_18) else "0";
    exitcond_fu_708_p2 <= "1" when (w6_reg_233 = ap_const_lv5_11) else "0";

    grp_fu_245_p0_assign_proc : process(reg_260, sum_reg_187, ap_CS_fsm_state16, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_245_p0 <= reg_260;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_245_p0 <= sum_reg_187;
        else 
            grp_fu_245_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_245_p1_assign_proc : process(tmp_126_reg_915, sum_reg_187, ap_CS_fsm_state16, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_245_p1 <= sum_reg_187;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_245_p1 <= tmp_126_reg_915;
        else 
            grp_fu_245_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_28_fu_375_p2 <= std_logic_vector(unsigned(h_reg_129) + unsigned(ap_const_lv5_1));
    h_29_fu_518_p2 <= std_logic_vector(unsigned(h2_reg_163) + unsigned(ap_const_lv5_1));
    h_30_fu_728_p2 <= std_logic_vector(unsigned(h5_reg_221) + unsigned(ap_const_lv5_1));
    input_r_address0 <= tmp_400_cast_fu_617_p1(13 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    notlhs_fu_752_p2 <= "0" when (tmp_26_fu_738_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_758_p2 <= "1" when (tmp_315_fu_748_p1 = ap_const_lv23_0) else "0";
    output_load_to_int_fu_734_p1 <= reg_260;

    output_r_address0_assign_proc : process(output_addr_12_reg_862, ap_CS_fsm_state9, output_addr_11_reg_954, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state5, ap_CS_fsm_state27, tmp_386_cast_fu_381_p1, tmp_392_cast_fu_723_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            output_r_address0 <= output_addr_11_reg_954;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            output_r_address0 <= tmp_392_cast_fu_723_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            output_r_address0 <= output_addr_12_reg_862;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_address0 <= tmp_386_cast_fu_381_p1(13 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_CS_fsm_state5, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(bias_q0, tmp_124_reg_925, ap_CS_fsm_state33, ap_CS_fsm_state5, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            output_r_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_r_d0 <= tmp_124_reg_925;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_d0 <= bias_q0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state5, ap_CS_fsm_state27, tmp_30_fu_768_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_lv1_1 = tmp_30_fu_768_p2)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl10_cast_fu_575_p3 <= (tmp_319_fu_570_p2 & ap_const_lv4_0);
    p_shl11_cast_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_320_fu_583_p3),14));
    p_shl12_cast_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_316_fu_540_p3),10));
    p_shl13_cast_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_317_fu_552_p3),10));
    p_shl14_cast_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_304_fu_637_p3),10));
    p_shl15_cast_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_305_fu_649_p3),10));
    p_shl16_cast_fu_682_p3 <= (tmp_310_fu_677_p2 & ap_const_lv4_0);
    p_shl17_cast_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_311_fu_690_p3),14));
    p_shl1_cast_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_294_fu_295_p3),10));
    p_shl2_cast_fu_328_p3 <= (tmp_302_fu_323_p2 & ap_const_lv4_0);
    p_shl3_cast_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_292_fu_336_p3),14));
    p_shl4_cast_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_299_fu_427_p3),10));
    p_shl5_cast_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_300_fu_439_p3),10));
    p_shl6_cast_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_296_fu_397_p3),11));
    p_shl7_cast_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_297_fu_409_p3),11));
    p_shl8_cast_fu_472_p3 <= (tmp_307_fu_467_p2 & ap_const_lv4_0);
    p_shl9_cast_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_293_fu_480_p3),14));
    p_shl_cast_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_283_p3),10));
    tmp_119_cast_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h2_reg_163),10));
    tmp_120_cast_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_141),14));
    tmp_121_cast_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h5_reg_221),10));
    tmp_122_cast_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w3_reg_175),14));
    tmp_123_cast_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w6_reg_233),14));
    tmp_125_cast_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_199),11));
    tmp_26_fu_738_p4 <= output_load_to_int_fu_734_p1(30 downto 23);
    tmp_28_fu_764_p2 <= (notrhs_reg_969 or notlhs_reg_964);
    tmp_292_fu_336_p3 <= (tmp_302_fu_323_p2 & ap_const_lv1_0);
    tmp_293_fu_480_p3 <= (tmp_307_fu_467_p2 & ap_const_lv1_0);
    tmp_294_fu_295_p3 <= (co_reg_118 & ap_const_lv1_0);
    tmp_295_fu_307_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_303_p1) + unsigned(p_shl_cast_fu_291_p1));
    tmp_296_fu_397_p3 <= (co1_reg_152 & ap_const_lv5_0);
    tmp_297_fu_409_p3 <= (co1_reg_152 & ap_const_lv3_0);
    tmp_298_fu_421_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_405_p1) - unsigned(p_shl7_cast_fu_417_p1));
    tmp_299_fu_427_p3 <= (co1_reg_152 & ap_const_lv4_0);
    tmp_300_fu_439_p3 <= (co1_reg_152 & ap_const_lv1_0);
    tmp_301_fu_451_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_447_p1) + unsigned(p_shl4_cast_fu_435_p1));
    tmp_302_fu_323_p2 <= std_logic_vector(unsigned(tmp_cast_fu_319_p1) + unsigned(tmp_295_reg_787));
    tmp_303_fu_348_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_328_p3) + unsigned(p_shl3_cast_fu_344_p1));
    tmp_304_fu_637_p3 <= (co4_reg_210 & ap_const_lv4_0);
    tmp_305_fu_649_p3 <= (co4_reg_210 & ap_const_lv1_0);
    tmp_306_fu_661_p2 <= std_logic_vector(unsigned(p_shl15_cast_fu_657_p1) + unsigned(p_shl14_cast_fu_645_p1));
    tmp_307_fu_467_p2 <= std_logic_vector(unsigned(tmp_119_cast_fu_463_p1) + unsigned(tmp_301_reg_836));
    tmp_308_fu_492_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_472_p3) + unsigned(p_shl9_cast_fu_488_p1));
    tmp_309_fu_364_p2 <= std_logic_vector(unsigned(tmp_303_reg_800) + unsigned(tmp_120_cast_fu_360_p1));
    tmp_30_fu_768_p2 <= (tmp_28_fu_764_p2 and tmp_29_reg_974);
    tmp_310_fu_677_p2 <= std_logic_vector(unsigned(tmp_121_cast_fu_673_p1) + unsigned(tmp_306_reg_938));
    tmp_311_fu_690_p3 <= (tmp_310_fu_677_p2 & ap_const_lv1_0);
    tmp_312_fu_702_p2 <= std_logic_vector(unsigned(p_shl16_cast_fu_682_p3) + unsigned(p_shl17_cast_fu_698_p1));
    tmp_313_fu_508_p2 <= std_logic_vector(unsigned(tmp_308_reg_849) + unsigned(tmp_122_cast_fu_504_p1));
    tmp_314_fu_718_p2 <= std_logic_vector(unsigned(tmp_312_reg_946) + unsigned(tmp_123_cast_fu_714_p1));
    tmp_315_fu_748_p1 <= output_load_to_int_fu_734_p1(23 - 1 downto 0);
    tmp_316_fu_540_p3 <= (ci_reg_199 & ap_const_lv4_0);
    tmp_317_fu_552_p3 <= (ci_reg_199 & ap_const_lv1_0);
    tmp_318_fu_564_p2 <= std_logic_vector(unsigned(p_shl12_cast_fu_548_p1) + unsigned(p_shl13_cast_fu_560_p1));
    tmp_319_fu_570_p2 <= std_logic_vector(unsigned(tmp_119_cast_reg_844) + unsigned(tmp_318_fu_564_p2));
    tmp_320_fu_583_p3 <= (tmp_319_fu_570_p2 & ap_const_lv1_0);
    tmp_321_fu_595_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_575_p3) + unsigned(p_shl11_cast_fu_591_p1));
    tmp_322_fu_601_p2 <= std_logic_vector(unsigned(tmp_122_cast_reg_857) + unsigned(tmp_321_fu_595_p2));
    tmp_323_fu_606_p2 <= std_logic_vector(unsigned(tmp_125_cast_fu_536_p1) + unsigned(tmp_298_reg_831));
    tmp_386_cast_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_309_reg_808),64));
    tmp_391_cast_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_313_fu_508_p2),64));
    tmp_392_cast_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_314_fu_718_p2),64));
    tmp_400_cast_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_322_reg_880),64));
        tmp_401_cast_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_323_reg_885),64));

    tmp_cast_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_129),10));
    tmp_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_118),64));
    tmp_s_fu_283_p3 <= (co_reg_118 & ap_const_lv4_0);
    w_28_fu_369_p2 <= std_logic_vector(unsigned(w_reg_141) + unsigned(ap_const_lv5_1));
    w_29_fu_611_p2 <= std_logic_vector(unsigned(w3_reg_175) + unsigned(ap_const_lv5_1));
    w_30_fu_773_p2 <= std_logic_vector(unsigned(w6_reg_233) + unsigned(ap_const_lv5_1));
    weight_address0 <= tmp_401_cast_fu_621_p1(10 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
