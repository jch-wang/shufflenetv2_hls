-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_32_strid is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of subconv_3x3_32_strid is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_7_fu_245_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_7_reg_678 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_76_fu_280_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_76_reg_683 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond7_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_addr_reg_688 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_85_fu_321_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_85_reg_696 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond6_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_88_fu_337_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_88_reg_704 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond5_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_7_fu_342_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_7_reg_709 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_7_fu_348_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_8_fu_364_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_8_reg_722 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_79_fu_402_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_79_reg_727 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond4_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_106_cast_fu_426_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_106_cast_reg_732 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_83_fu_442_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_83_reg_737 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_40_fu_454_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_40_reg_745 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond3_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_87_fu_491_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_87_reg_750 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_43_fu_503_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_43_reg_758 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond2_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_8_fu_511_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_4_fu_523_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_4_reg_771 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_91_fu_544_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_91_reg_776 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond1_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_fu_594_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_94_reg_781 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_addr_4_reg_786 : STD_LOGIC_VECTOR (12 downto 0);
    signal w_8_fu_614_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_8_reg_791 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_4_fu_626_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_4_reg_799 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_load_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal input_load_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal output_load_reg_834 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_45_reg_839 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal co_reg_114 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_125 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_137 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal co1_reg_148 : STD_LOGIC_VECTOR (4 downto 0);
    signal h2_reg_159 : STD_LOGIC_VECTOR (4 downto 0);
    signal w3_reg_171 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal sum_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_195 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_218 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_118_cast_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_119_cast_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_127_cast_fu_641_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_128_cast_fu_670_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_229_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_229_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_s_fu_256_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_75_fu_268_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_276_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_264_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_39_cast_fu_292_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_84_fu_296_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_72_fu_309_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_301_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl3_cast_fu_317_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_42_cast_fu_333_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_77_fu_374_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_78_fu_386_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl8_cast_fu_398_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_cast_fu_382_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_80_fu_408_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl6_cast_fu_416_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_fu_370_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_81_fu_420_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_82_fu_430_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl8_cast1_fu_394_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_cast_fu_438_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_41_cast_fu_462_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_86_fu_466_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_73_fu_479_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl10_cast_fu_487_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl9_cast_fu_471_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_46_cast_fu_529_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_90_fu_533_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_74_fu_538_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_550_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_cast_fu_556_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_47_fu_560_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_48_cast_fu_565_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_92_fu_569_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_93_fu_582_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl12_cast_fu_590_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl11_cast_fu_574_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_44_cast_fu_600_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_89_fu_604_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_49_cast_fu_632_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_95_fu_636_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_646_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_652_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_50_fu_656_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_51_cast_fu_661_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_96_fu_665_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);

    component ShuffleNetV2_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ShuffleNetV2_faddbkb_x_U15 : component ShuffleNetV2_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_229_p0,
        din1 => grp_fu_229_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_229_p2);

    ShuffleNetV2_fmulcud_x_U16 : component ShuffleNetV2_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_load_reg_814,
        din1 => input_load_reg_819,
        ce => ap_const_logic_1,
        dout => grp_fu_235_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co1_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_239_p2 = ap_const_lv1_1))) then 
                co1_reg_148 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond3_fu_448_p2))) then 
                co1_reg_148 <= co_8_reg_722;
            end if; 
        end if;
    end process;

    co_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond6_fu_286_p2 = ap_const_lv1_1))) then 
                co_reg_114 <= co_7_reg_678;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_114 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h2_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond4_fu_358_p2))) then 
                h2_reg_159 <= ap_const_lv5_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond2_fu_497_p2))) then 
                h2_reg_159 <= h_8_fu_511_p2;
            end if; 
        end if;
    end process;

    h_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_239_p2 = ap_const_lv1_0))) then 
                h_reg_125 <= ap_const_lv5_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_fu_327_p2 = ap_const_lv1_1))) then 
                h_reg_125 <= h_7_fu_348_p2;
            end if; 
        end if;
    end process;

    m_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond_fu_620_p2))) then 
                m_reg_195 <= m_4_reg_771;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond2_fu_497_p2))) then 
                m_reg_195 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond1_fu_517_p2))) then 
                n_reg_218 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                n_reg_218 <= n_4_reg_799;
            end if; 
        end if;
    end process;

    sum_1_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond1_fu_517_p2))) then 
                sum_1_reg_206 <= sum_reg_183;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                sum_1_reg_206 <= grp_fu_229_p2;
            end if; 
        end if;
    end process;

    sum_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond_fu_620_p2))) then 
                sum_reg_183 <= sum_1_reg_206;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond2_fu_497_p2))) then 
                sum_reg_183 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w3_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond3_fu_448_p2))) then 
                w3_reg_171 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                w3_reg_171 <= w_8_reg_791;
            end if; 
        end if;
    end process;

    w_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_286_p2))) then 
                w_reg_137 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                w_reg_137 <= w_7_reg_709;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_239_p2 = ap_const_lv1_0))) then
                bias_addr_reg_688 <= tmp_fu_251_p1(5 - 1 downto 0);
                    tmp_76_reg_683(9 downto 1) <= tmp_76_fu_280_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_7_reg_678 <= co_7_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                co_8_reg_722 <= co_8_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                input_load_reg_819 <= input_r_q0;
                weight_load_reg_814 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                m_4_reg_771 <= m_4_fu_523_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                n_4_reg_799 <= n_4_fu_626_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond1_fu_517_p2))) then
                output_addr_4_reg_786 <= tmp_119_cast_fu_609_p1(13 - 1 downto 0);
                w_8_reg_791 <= w_8_fu_614_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                output_load_reg_834 <= output_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond4_fu_358_p2))) then
                tmp_106_cast_reg_732 <= tmp_106_cast_fu_426_p1;
                    tmp_79_reg_727(10 downto 1) <= tmp_79_fu_402_p2(10 downto 1);
                    tmp_83_reg_737(9 downto 1) <= tmp_83_fu_442_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond3_fu_448_p2))) then
                    tmp_40_reg_745(5 downto 1) <= tmp_40_fu_454_p3(5 downto 1);
                    tmp_87_reg_750(13 downto 1) <= tmp_87_fu_491_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond2_fu_497_p2))) then
                    tmp_43_reg_758(5 downto 1) <= tmp_43_fu_503_p3(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp_45_reg_839 <= grp_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_52_reg_824 <= grp_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_286_p2))) then
                    tmp_85_reg_696(13 downto 1) <= tmp_85_fu_321_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond5_fu_327_p2))) then
                tmp_88_reg_704 <= tmp_88_fu_337_p2;
                w_7_reg_709 <= w_7_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond1_fu_517_p2))) then
                tmp_91_reg_776 <= tmp_91_fu_544_p2;
                    tmp_94_reg_781(15 downto 1) <= tmp_94_fu_594_p2(15 downto 1);
            end if;
        end if;
    end process;
    tmp_76_reg_683(0) <= '0';
    tmp_85_reg_696(0) <= '0';
    tmp_79_reg_727(0) <= '0';
    tmp_83_reg_737(0) <= '0';
    tmp_40_reg_745(0) <= '0';
    tmp_87_reg_750(0) <= '0';
    tmp_43_reg_758(0) <= '0';
    tmp_94_reg_781(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond7_fu_239_p2, ap_CS_fsm_state3, exitcond6_fu_286_p2, ap_CS_fsm_state4, exitcond5_fu_327_p2, ap_CS_fsm_state6, exitcond4_fu_358_p2, ap_CS_fsm_state7, exitcond3_fu_448_p2, ap_CS_fsm_state8, exitcond2_fu_497_p2, ap_CS_fsm_state9, exitcond1_fu_517_p2, ap_CS_fsm_state10, exitcond_fu_620_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_239_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond6_fu_286_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_fu_327_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond4_fu_358_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond3_fu_448_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond2_fu_497_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond1_fu_517_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond_fu_620_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, exitcond4_fu_358_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond4_fu_358_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, exitcond4_fu_358_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond4_fu_358_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_688;

    bias_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_7_fu_245_p2 <= std_logic_vector(unsigned(co_reg_114) + unsigned(ap_const_lv5_1));
    co_8_fu_364_p2 <= std_logic_vector(unsigned(co1_reg_148) + unsigned(ap_const_lv5_1));
    exitcond1_fu_517_p2 <= "1" when (m_reg_195 = ap_const_lv2_3) else "0";
    exitcond2_fu_497_p2 <= "1" when (w3_reg_171 = ap_const_lv5_11) else "0";
    exitcond3_fu_448_p2 <= "1" when (h2_reg_159 = ap_const_lv5_11) else "0";
    exitcond4_fu_358_p2 <= "1" when (co1_reg_148 = ap_const_lv5_18) else "0";
    exitcond5_fu_327_p2 <= "1" when (w_reg_137 = ap_const_lv5_11) else "0";
    exitcond6_fu_286_p2 <= "1" when (h_reg_125 = ap_const_lv5_11) else "0";
    exitcond7_fu_239_p2 <= "1" when (co_reg_114 = ap_const_lv5_18) else "0";
    exitcond_fu_620_p2 <= "1" when (n_reg_218 = ap_const_lv2_3) else "0";

    grp_fu_229_p0_assign_proc : process(output_load_reg_834, sum_1_reg_206, ap_CS_fsm_state16, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_229_p0 <= output_load_reg_834;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_229_p0 <= sum_1_reg_206;
        else 
            grp_fu_229_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_229_p1_assign_proc : process(tmp_52_reg_824, sum_reg_183, ap_CS_fsm_state16, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_229_p1 <= sum_reg_183;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_229_p1 <= tmp_52_reg_824;
        else 
            grp_fu_229_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_7_fu_348_p2 <= std_logic_vector(unsigned(h_reg_125) + unsigned(ap_const_lv5_1));
    h_8_fu_511_p2 <= std_logic_vector(unsigned(h2_reg_159) + unsigned(ap_const_lv5_1));
    input_r_address0 <= tmp_128_cast_fu_670_p1(15 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_4_fu_523_p2 <= std_logic_vector(unsigned(m_reg_195) + unsigned(ap_const_lv2_1));
    n_4_fu_626_p2 <= std_logic_vector(unsigned(n_reg_218) + unsigned(ap_const_lv2_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state9, output_addr_4_reg_786, ap_CS_fsm_state5, ap_CS_fsm_state27, tmp_118_cast_fu_354_p1, tmp_119_cast_fu_609_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_r_address0 <= output_addr_4_reg_786;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_address0 <= tmp_119_cast_fu_609_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_address0 <= tmp_118_cast_fu_354_p1(13 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(bias_q0, tmp_45_reg_839, ap_CS_fsm_state5, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_r_d0 <= tmp_45_reg_839;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_d0 <= bias_q0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl10_cast_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_73_fu_479_p3),14));
    p_shl11_cast_fu_574_p3 <= (tmp_92_fu_569_p2 & ap_const_lv5_0);
    p_shl12_cast_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_93_fu_582_p3),16));
    p_shl1_cast_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_75_fu_268_p3),10));
    p_shl2_cast_fu_301_p3 <= (tmp_84_fu_296_p2 & ap_const_lv4_0);
    p_shl3_cast_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_72_fu_309_p3),14));
    p_shl4_cast_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_82_fu_430_p3),10));
    p_shl6_cast_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_80_fu_408_p3),8));
    p_shl7_cast_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_77_fu_374_p3),11));
    p_shl8_cast1_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_78_fu_386_p3),10));
    p_shl8_cast_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_78_fu_386_p3),11));
    p_shl9_cast_fu_471_p3 <= (tmp_86_fu_466_p2 & ap_const_lv4_0);
    p_shl_cast_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_256_p3),10));
        tmp1_cast_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_550_p2),6));

    tmp1_fu_550_p2 <= (m_reg_195 xor ap_const_lv2_2);
        tmp2_cast_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_646_p2),6));

    tmp2_fu_646_p2 <= (n_reg_218 xor ap_const_lv2_2);
        tmp_106_cast_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_81_fu_420_p2),9));

    tmp_118_cast_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_88_reg_704),64));
    tmp_119_cast_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_89_fu_604_p2),64));
    tmp_127_cast_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_95_fu_636_p2),64));
    tmp_128_cast_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_96_fu_665_p2),64));
    tmp_39_cast_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_125),10));
    tmp_40_fu_454_p3 <= (h2_reg_159 & ap_const_lv1_0);
    tmp_41_cast_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h2_reg_159),10));
    tmp_42_cast_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_137),14));
    tmp_43_fu_503_p3 <= (w3_reg_171 & ap_const_lv1_0);
    tmp_44_cast_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w3_reg_171),14));
    tmp_46_cast_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_195),9));
    tmp_47_fu_560_p2 <= std_logic_vector(unsigned(tmp_40_reg_745) + unsigned(tmp1_cast_fu_556_p1));
    tmp_48_cast_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_fu_560_p2),11));
    tmp_49_cast_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_218),9));
    tmp_50_fu_656_p2 <= std_logic_vector(unsigned(tmp_43_reg_758) + unsigned(tmp2_cast_fu_652_p1));
    tmp_51_cast_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_656_p2),16));
    tmp_72_fu_309_p3 <= (tmp_84_fu_296_p2 & ap_const_lv1_0);
    tmp_73_fu_479_p3 <= (tmp_86_fu_466_p2 & ap_const_lv1_0);
    tmp_74_fu_538_p2 <= std_logic_vector(shift_left(unsigned(tmp_90_fu_533_p2),to_integer(unsigned('0' & ap_const_lv9_2(9-1 downto 0)))));
    tmp_75_fu_268_p3 <= (co_reg_114 & ap_const_lv1_0);
    tmp_76_fu_280_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_276_p1) + unsigned(p_shl_cast_fu_264_p1));
    tmp_77_fu_374_p3 <= (co1_reg_148 & ap_const_lv5_0);
    tmp_78_fu_386_p3 <= (co1_reg_148 & ap_const_lv1_0);
    tmp_79_fu_402_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_398_p1) + unsigned(p_shl7_cast_fu_382_p1));
    tmp_80_fu_408_p3 <= (co1_reg_148 & ap_const_lv2_0);
    tmp_81_fu_420_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_416_p1) - unsigned(tmp_cast_fu_370_p1));
    tmp_82_fu_430_p3 <= (co1_reg_148 & ap_const_lv4_0);
    tmp_83_fu_442_p2 <= std_logic_vector(unsigned(p_shl8_cast1_fu_394_p1) + unsigned(p_shl4_cast_fu_438_p1));
    tmp_84_fu_296_p2 <= std_logic_vector(unsigned(tmp_39_cast_fu_292_p1) + unsigned(tmp_76_reg_683));
    tmp_85_fu_321_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_301_p3) + unsigned(p_shl3_cast_fu_317_p1));
    tmp_86_fu_466_p2 <= std_logic_vector(unsigned(tmp_83_reg_737) + unsigned(tmp_41_cast_fu_462_p1));
    tmp_87_fu_491_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_487_p1) + unsigned(p_shl9_cast_fu_471_p3));
    tmp_88_fu_337_p2 <= std_logic_vector(unsigned(tmp_85_reg_696) + unsigned(tmp_42_cast_fu_333_p1));
    tmp_89_fu_604_p2 <= std_logic_vector(unsigned(tmp_87_reg_750) + unsigned(tmp_44_cast_fu_600_p1));
    tmp_90_fu_533_p2 <= std_logic_vector(signed(tmp_106_cast_reg_732) + signed(tmp_46_cast_fu_529_p1));
    tmp_91_fu_544_p2 <= std_logic_vector(unsigned(tmp_74_fu_538_p2) - unsigned(tmp_90_fu_533_p2));
    tmp_92_fu_569_p2 <= std_logic_vector(unsigned(tmp_79_reg_727) + unsigned(tmp_48_cast_fu_565_p1));
    tmp_93_fu_582_p3 <= (tmp_92_fu_569_p2 & ap_const_lv1_0);
    tmp_94_fu_594_p2 <= std_logic_vector(unsigned(p_shl12_cast_fu_590_p1) + unsigned(p_shl11_cast_fu_574_p3));
    tmp_95_fu_636_p2 <= std_logic_vector(unsigned(tmp_91_reg_776) + unsigned(tmp_49_cast_fu_632_p1));
    tmp_96_fu_665_p2 <= std_logic_vector(unsigned(tmp_94_reg_781) + unsigned(tmp_51_cast_fu_661_p1));
    tmp_cast_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co1_reg_148),8));
    tmp_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_114),64));
    tmp_s_fu_256_p3 <= (co_reg_114 & ap_const_lv4_0);
    w_7_fu_342_p2 <= std_logic_vector(unsigned(w_reg_137) + unsigned(ap_const_lv5_1));
    w_8_fu_614_p2 <= std_logic_vector(unsigned(w3_reg_171) + unsigned(ap_const_lv5_1));
    weight_address0 <= tmp_127_cast_fu_641_p1(8 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
