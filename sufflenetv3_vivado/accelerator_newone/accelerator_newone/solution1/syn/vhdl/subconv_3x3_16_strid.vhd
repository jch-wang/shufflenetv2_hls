-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_16_strid is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of subconv_3x3_16_strid is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_9_fu_251_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal co_9_reg_692 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_98_fu_286_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_98_reg_697 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond7_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_addr_reg_702 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_107_fu_331_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_107_reg_710 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond6_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_111_fu_347_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_111_reg_718 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond5_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_9_fu_352_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_9_reg_723 : STD_LOGIC_VECTOR (3 downto 0);
    signal h_9_fu_358_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal co_10_fu_374_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal co_10_reg_736 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_101_fu_412_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_101_reg_741 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond4_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_136_cast_fu_436_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_136_cast_reg_746 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_105_fu_452_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_105_reg_751 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_54_fu_464_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_54_reg_759 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond3_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_fu_505_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_110_reg_764 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_57_fu_517_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_57_reg_772 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond2_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_10_fu_525_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_5_fu_537_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_5_reg_785 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_115_fu_558_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_115_reg_790 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond1_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_118_fu_608_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_118_reg_795 : STD_LOGIC_VECTOR (14 downto 0);
    signal output_addr_5_reg_800 : STD_LOGIC_VECTOR (12 downto 0);
    signal w_10_fu_628_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_10_reg_805 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_5_fu_640_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_5_reg_813 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_load_reg_828 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal input_load_reg_833 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal output_load_reg_848 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_59_reg_853 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal co_reg_120 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_reg_131 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_143 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal co1_reg_154 : STD_LOGIC_VECTOR (5 downto 0);
    signal h2_reg_165 : STD_LOGIC_VECTOR (3 downto 0);
    signal w3_reg_177 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal sum_reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_201 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_224 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_148_cast_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_149_cast_fu_623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_157_cast_fu_655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_158_cast_fu_684_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_235_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_235_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_s_fu_262_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_97_fu_274_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_282_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_270_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_53_cast_fu_298_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_106_fu_302_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_94_fu_307_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_95_fu_319_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_315_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl3_cast_fu_327_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_56_cast_fu_343_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_99_fu_384_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_100_fu_396_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl8_cast_fu_408_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_cast_fu_392_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_102_fu_418_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl6_cast_fu_426_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_fu_380_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_103_fu_430_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_104_fu_440_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl8_cast2_fu_404_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_cast_fu_448_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_55_cast_fu_472_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_108_fu_476_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_96_fu_481_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_109_fu_493_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl10_cast_fu_501_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl9_cast_fu_489_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_60_cast_fu_543_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_113_fu_547_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_114_fu_552_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_fu_564_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_cast_fu_570_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_61_fu_574_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_62_cast_fu_579_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_116_fu_583_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_117_fu_596_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl12_cast_fu_604_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl11_cast_fu_588_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_58_cast_fu_614_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_112_fu_618_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_63_cast_fu_646_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_119_fu_650_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp2_fu_660_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_666_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_64_fu_670_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_65_cast_fu_675_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_120_fu_679_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);

    component ShuffleNetV2_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ShuffleNetV2_faddbkb_x_U48 : component ShuffleNetV2_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_235_p0,
        din1 => grp_fu_235_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_235_p2);

    ShuffleNetV2_fmulcud_x_U49 : component ShuffleNetV2_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_load_reg_828,
        din1 => input_load_reg_833,
        ce => ap_const_logic_1,
        dout => grp_fu_241_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co1_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_245_p2 = ap_const_lv1_1))) then 
                co1_reg_154 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond3_fu_458_p2))) then 
                co1_reg_154 <= co_10_reg_736;
            end if; 
        end if;
    end process;

    co_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond6_fu_292_p2 = ap_const_lv1_1))) then 
                co_reg_120 <= co_9_reg_692;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_120 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    h2_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond4_fu_368_p2))) then 
                h2_reg_165 <= ap_const_lv4_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond2_fu_511_p2))) then 
                h2_reg_165 <= h_10_fu_525_p2;
            end if; 
        end if;
    end process;

    h_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_245_p2 = ap_const_lv1_0))) then 
                h_reg_131 <= ap_const_lv4_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_fu_337_p2 = ap_const_lv1_1))) then 
                h_reg_131 <= h_9_fu_358_p2;
            end if; 
        end if;
    end process;

    m_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond_fu_634_p2))) then 
                m_reg_201 <= m_5_reg_785;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond2_fu_511_p2))) then 
                m_reg_201 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond1_fu_531_p2))) then 
                n_reg_224 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                n_reg_224 <= n_5_reg_813;
            end if; 
        end if;
    end process;

    sum_1_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond1_fu_531_p2))) then 
                sum_1_reg_212 <= sum_reg_189;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                sum_1_reg_212 <= grp_fu_235_p2;
            end if; 
        end if;
    end process;

    sum_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond_fu_634_p2))) then 
                sum_reg_189 <= sum_1_reg_212;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond2_fu_511_p2))) then 
                sum_reg_189 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w3_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond3_fu_458_p2))) then 
                w3_reg_177 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                w3_reg_177 <= w_10_reg_805;
            end if; 
        end if;
    end process;

    w_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_292_p2))) then 
                w_reg_143 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                w_reg_143 <= w_9_reg_723;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_245_p2 = ap_const_lv1_0))) then
                bias_addr_reg_702 <= tmp_fu_257_p1(6 - 1 downto 0);
                    tmp_98_reg_697(9 downto 1) <= tmp_98_fu_286_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                co_10_reg_736 <= co_10_fu_374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_9_reg_692 <= co_9_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                input_load_reg_833 <= input_r_q0;
                weight_load_reg_828 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                m_5_reg_785 <= m_5_fu_537_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                n_5_reg_813 <= n_5_fu_640_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond1_fu_531_p2))) then
                output_addr_5_reg_800 <= tmp_149_cast_fu_623_p1(13 - 1 downto 0);
                w_10_reg_805 <= w_10_fu_628_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                output_load_reg_848 <= output_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond4_fu_368_p2))) then
                    tmp_101_reg_741(10 downto 1) <= tmp_101_fu_412_p2(10 downto 1);
                    tmp_105_reg_751(9 downto 1) <= tmp_105_fu_452_p2(9 downto 1);
                tmp_136_cast_reg_746 <= tmp_136_cast_fu_436_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_292_p2))) then
                    tmp_107_reg_710(13 downto 1) <= tmp_107_fu_331_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond3_fu_458_p2))) then
                    tmp_110_reg_764(13 downto 1) <= tmp_110_fu_505_p2(13 downto 1);
                    tmp_54_reg_759(4 downto 1) <= tmp_54_fu_464_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond5_fu_337_p2))) then
                tmp_111_reg_718 <= tmp_111_fu_347_p2;
                w_9_reg_723 <= w_9_fu_352_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond1_fu_531_p2))) then
                tmp_115_reg_790 <= tmp_115_fu_558_p2;
                    tmp_118_reg_795(14 downto 1) <= tmp_118_fu_608_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond2_fu_511_p2))) then
                    tmp_57_reg_772(4 downto 1) <= tmp_57_fu_517_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp_59_reg_853 <= grp_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_66_reg_838 <= grp_fu_241_p2;
            end if;
        end if;
    end process;
    tmp_98_reg_697(0) <= '0';
    tmp_107_reg_710(0) <= '0';
    tmp_101_reg_741(0) <= '0';
    tmp_105_reg_751(0) <= '0';
    tmp_54_reg_759(0) <= '0';
    tmp_110_reg_764(0) <= '0';
    tmp_57_reg_772(0) <= '0';
    tmp_118_reg_795(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond7_fu_245_p2, ap_CS_fsm_state3, exitcond6_fu_292_p2, ap_CS_fsm_state4, exitcond5_fu_337_p2, ap_CS_fsm_state6, exitcond4_fu_368_p2, ap_CS_fsm_state7, exitcond3_fu_458_p2, ap_CS_fsm_state8, exitcond2_fu_511_p2, ap_CS_fsm_state9, exitcond1_fu_531_p2, ap_CS_fsm_state10, exitcond_fu_634_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_245_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond6_fu_292_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_fu_337_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond4_fu_368_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond3_fu_458_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond2_fu_511_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond1_fu_531_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond_fu_634_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, exitcond4_fu_368_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond4_fu_368_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, exitcond4_fu_368_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond4_fu_368_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_702;

    bias_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_10_fu_374_p2 <= std_logic_vector(unsigned(co1_reg_154) + unsigned(ap_const_lv6_1));
    co_9_fu_251_p2 <= std_logic_vector(unsigned(co_reg_120) + unsigned(ap_const_lv6_1));
    exitcond1_fu_531_p2 <= "1" when (m_reg_201 = ap_const_lv2_3) else "0";
    exitcond2_fu_511_p2 <= "1" when (w3_reg_177 = ap_const_lv4_9) else "0";
    exitcond3_fu_458_p2 <= "1" when (h2_reg_165 = ap_const_lv4_9) else "0";
    exitcond4_fu_368_p2 <= "1" when (co1_reg_154 = ap_const_lv6_30) else "0";
    exitcond5_fu_337_p2 <= "1" when (w_reg_143 = ap_const_lv4_9) else "0";
    exitcond6_fu_292_p2 <= "1" when (h_reg_131 = ap_const_lv4_9) else "0";
    exitcond7_fu_245_p2 <= "1" when (co_reg_120 = ap_const_lv6_30) else "0";
    exitcond_fu_634_p2 <= "1" when (n_reg_224 = ap_const_lv2_3) else "0";

    grp_fu_235_p0_assign_proc : process(output_load_reg_848, sum_1_reg_212, ap_CS_fsm_state16, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_235_p0 <= output_load_reg_848;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_235_p0 <= sum_1_reg_212;
        else 
            grp_fu_235_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_235_p1_assign_proc : process(tmp_66_reg_838, sum_reg_189, ap_CS_fsm_state16, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_235_p1 <= sum_reg_189;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_235_p1 <= tmp_66_reg_838;
        else 
            grp_fu_235_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_10_fu_525_p2 <= std_logic_vector(unsigned(h2_reg_165) + unsigned(ap_const_lv4_1));
    h_9_fu_358_p2 <= std_logic_vector(unsigned(h_reg_131) + unsigned(ap_const_lv4_1));
    input_r_address0 <= tmp_158_cast_fu_684_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_5_fu_537_p2 <= std_logic_vector(unsigned(m_reg_201) + unsigned(ap_const_lv2_1));
    n_5_fu_640_p2 <= std_logic_vector(unsigned(n_reg_224) + unsigned(ap_const_lv2_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state9, output_addr_5_reg_800, ap_CS_fsm_state5, ap_CS_fsm_state27, tmp_148_cast_fu_364_p1, tmp_149_cast_fu_623_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_r_address0 <= output_addr_5_reg_800;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_address0 <= tmp_149_cast_fu_623_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_address0 <= tmp_148_cast_fu_364_p1(13 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(bias_q0, tmp_59_reg_853, ap_CS_fsm_state5, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_r_d0 <= tmp_59_reg_853;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_d0 <= bias_q0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl10_cast_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_109_fu_493_p3),14));
    p_shl11_cast_fu_588_p3 <= (tmp_116_fu_583_p2 & ap_const_lv4_0);
    p_shl12_cast_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_117_fu_596_p3),15));
    p_shl1_cast_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_97_fu_274_p3),10));
    p_shl2_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_94_fu_307_p3),14));
    p_shl3_cast_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_95_fu_319_p3),14));
    p_shl4_cast_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_104_fu_440_p3),10));
    p_shl6_cast_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_102_fu_418_p3),9));
    p_shl7_cast_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_99_fu_384_p3),11));
    p_shl8_cast2_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_100_fu_396_p3),10));
    p_shl8_cast_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_100_fu_396_p3),11));
    p_shl9_cast_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_96_fu_481_p3),14));
    p_shl_cast_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_262_p3),10));
        tmp1_cast_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_564_p2),5));

    tmp1_fu_564_p2 <= (m_reg_201 xor ap_const_lv2_2);
        tmp2_cast_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_660_p2),5));

    tmp2_fu_660_p2 <= (n_reg_224 xor ap_const_lv2_2);
    tmp_100_fu_396_p3 <= (co1_reg_154 & ap_const_lv1_0);
    tmp_101_fu_412_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_408_p1) + unsigned(p_shl7_cast_fu_392_p1));
    tmp_102_fu_418_p3 <= (co1_reg_154 & ap_const_lv2_0);
    tmp_103_fu_430_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_426_p1) - unsigned(tmp_cast_fu_380_p1));
    tmp_104_fu_440_p3 <= (co1_reg_154 & ap_const_lv3_0);
    tmp_105_fu_452_p2 <= std_logic_vector(unsigned(p_shl8_cast2_fu_404_p1) + unsigned(p_shl4_cast_fu_448_p1));
    tmp_106_fu_302_p2 <= std_logic_vector(unsigned(tmp_53_cast_fu_298_p1) + unsigned(tmp_98_reg_697));
    tmp_107_fu_331_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_315_p1) + unsigned(p_shl3_cast_fu_327_p1));
    tmp_108_fu_476_p2 <= std_logic_vector(unsigned(tmp_105_reg_751) + unsigned(tmp_55_cast_fu_472_p1));
    tmp_109_fu_493_p3 <= (tmp_108_fu_476_p2 & ap_const_lv1_0);
    tmp_110_fu_505_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_501_p1) + unsigned(p_shl9_cast_fu_489_p1));
    tmp_111_fu_347_p2 <= std_logic_vector(unsigned(tmp_107_reg_710) + unsigned(tmp_56_cast_fu_343_p1));
    tmp_112_fu_618_p2 <= std_logic_vector(unsigned(tmp_110_reg_764) + unsigned(tmp_58_cast_fu_614_p1));
    tmp_113_fu_547_p2 <= std_logic_vector(signed(tmp_136_cast_reg_746) + signed(tmp_60_cast_fu_543_p1));
    tmp_114_fu_552_p2 <= std_logic_vector(shift_left(unsigned(tmp_113_fu_547_p2),to_integer(unsigned('0' & ap_const_lv10_2(10-1 downto 0)))));
    tmp_115_fu_558_p2 <= std_logic_vector(unsigned(tmp_114_fu_552_p2) - unsigned(tmp_113_fu_547_p2));
    tmp_116_fu_583_p2 <= std_logic_vector(unsigned(tmp_101_reg_741) + unsigned(tmp_62_cast_fu_579_p1));
    tmp_117_fu_596_p3 <= (tmp_116_fu_583_p2 & ap_const_lv1_0);
    tmp_118_fu_608_p2 <= std_logic_vector(unsigned(p_shl12_cast_fu_604_p1) + unsigned(p_shl11_cast_fu_588_p3));
    tmp_119_fu_650_p2 <= std_logic_vector(unsigned(tmp_115_reg_790) + unsigned(tmp_63_cast_fu_646_p1));
    tmp_120_fu_679_p2 <= std_logic_vector(unsigned(tmp_118_reg_795) + unsigned(tmp_65_cast_fu_675_p1));
        tmp_136_cast_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_103_fu_430_p2),10));

    tmp_148_cast_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_111_reg_718),64));
    tmp_149_cast_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_fu_618_p2),64));
    tmp_157_cast_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_119_fu_650_p2),64));
    tmp_158_cast_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_120_fu_679_p2),64));
    tmp_53_cast_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_131),10));
    tmp_54_fu_464_p3 <= (h2_reg_165 & ap_const_lv1_0);
    tmp_55_cast_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h2_reg_165),10));
    tmp_56_cast_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_143),14));
    tmp_57_fu_517_p3 <= (w3_reg_177 & ap_const_lv1_0);
    tmp_58_cast_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w3_reg_177),14));
    tmp_60_cast_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_201),10));
    tmp_61_fu_574_p2 <= std_logic_vector(unsigned(tmp_54_reg_759) + unsigned(tmp1_cast_fu_570_p1));
    tmp_62_cast_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_61_fu_574_p2),11));
    tmp_63_cast_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_224),10));
    tmp_64_fu_670_p2 <= std_logic_vector(unsigned(tmp_57_reg_772) + unsigned(tmp2_cast_fu_666_p1));
    tmp_65_cast_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_fu_670_p2),15));
    tmp_94_fu_307_p3 <= (tmp_106_fu_302_p2 & ap_const_lv3_0);
    tmp_95_fu_319_p3 <= (tmp_106_fu_302_p2 & ap_const_lv1_0);
    tmp_96_fu_481_p3 <= (tmp_108_fu_476_p2 & ap_const_lv3_0);
    tmp_97_fu_274_p3 <= (co_reg_120 & ap_const_lv1_0);
    tmp_98_fu_286_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_282_p1) + unsigned(p_shl_cast_fu_270_p1));
    tmp_99_fu_384_p3 <= (co1_reg_154 & ap_const_lv4_0);
    tmp_cast_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co1_reg_154),9));
    tmp_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_120),64));
    tmp_s_fu_262_p3 <= (co_reg_120 & ap_const_lv3_0);
    w_10_fu_628_p2 <= std_logic_vector(unsigned(w3_reg_177) + unsigned(ap_const_lv4_1));
    w_9_fu_352_p2 <= std_logic_vector(unsigned(w_reg_143) + unsigned(ap_const_lv4_1));
    weight_address0 <= tmp_157_cast_fu_655_p1(9 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
