// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_1x1_16p_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        ShuffleConvs_1_Downs_address0,
        ShuffleConvs_1_Downs_ce0,
        ShuffleConvs_1_Downs_we0,
        ShuffleConvs_1_Downs_d0,
        ShuffleConvs_1_Downs_q0,
        shuffleunit0_2_outpu_address0,
        shuffleunit0_2_outpu_ce0,
        shuffleunit0_2_outpu_q0
);

parameter    ap_ST_fsm_state1 = 33'd1;
parameter    ap_ST_fsm_state2 = 33'd2;
parameter    ap_ST_fsm_state3 = 33'd4;
parameter    ap_ST_fsm_state4 = 33'd8;
parameter    ap_ST_fsm_state5 = 33'd16;
parameter    ap_ST_fsm_state6 = 33'd32;
parameter    ap_ST_fsm_state7 = 33'd64;
parameter    ap_ST_fsm_state8 = 33'd128;
parameter    ap_ST_fsm_state9 = 33'd256;
parameter    ap_ST_fsm_state10 = 33'd512;
parameter    ap_ST_fsm_state11 = 33'd1024;
parameter    ap_ST_fsm_state12 = 33'd2048;
parameter    ap_ST_fsm_state13 = 33'd4096;
parameter    ap_ST_fsm_state14 = 33'd8192;
parameter    ap_ST_fsm_state15 = 33'd16384;
parameter    ap_ST_fsm_state16 = 33'd32768;
parameter    ap_ST_fsm_state17 = 33'd65536;
parameter    ap_ST_fsm_state18 = 33'd131072;
parameter    ap_ST_fsm_state19 = 33'd262144;
parameter    ap_ST_fsm_state20 = 33'd524288;
parameter    ap_ST_fsm_state21 = 33'd1048576;
parameter    ap_ST_fsm_state22 = 33'd2097152;
parameter    ap_ST_fsm_state23 = 33'd4194304;
parameter    ap_ST_fsm_state24 = 33'd8388608;
parameter    ap_ST_fsm_state25 = 33'd16777216;
parameter    ap_ST_fsm_state26 = 33'd33554432;
parameter    ap_ST_fsm_state27 = 33'd67108864;
parameter    ap_ST_fsm_state28 = 33'd134217728;
parameter    ap_ST_fsm_state29 = 33'd268435456;
parameter    ap_ST_fsm_state30 = 33'd536870912;
parameter    ap_ST_fsm_state31 = 33'd1073741824;
parameter    ap_ST_fsm_state32 = 33'd2147483648;
parameter    ap_ST_fsm_state33 = 33'd4294967296;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [5:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [13:0] ShuffleConvs_1_Downs_address0;
output   ShuffleConvs_1_Downs_ce0;
output   ShuffleConvs_1_Downs_we0;
output  [31:0] ShuffleConvs_1_Downs_d0;
input  [31:0] ShuffleConvs_1_Downs_q0;
output  [13:0] shuffleunit0_2_outpu_address0;
output   shuffleunit0_2_outpu_ce0;
input  [31:0] shuffleunit0_2_outpu_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_ce0;
reg bias_ce0;
reg[13:0] ShuffleConvs_1_Downs_address0;
reg ShuffleConvs_1_Downs_ce0;
reg ShuffleConvs_1_Downs_we0;
reg[31:0] ShuffleConvs_1_Downs_d0;
reg shuffleunit0_2_outpu_ce0;

(* fsm_encoding = "none" *) reg   [32:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_258;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state31;
wire   [5:0] co_25_fu_270_p2;
reg   [5:0] co_25_reg_772;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_266_fu_305_p2;
reg   [10:0] tmp_266_reg_777;
wire   [0:0] exitcond9_fu_264_p2;
reg   [5:0] bias_addr_reg_782;
wire   [14:0] tmp_273_fu_346_p2;
reg   [14:0] tmp_273_reg_790;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond8_fu_311_p2;
wire   [14:0] tmp_279_fu_362_p2;
reg   [14:0] tmp_279_reg_798;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond7_fu_352_p2;
wire   [4:0] w_25_fu_367_p2;
reg   [4:0] w_25_reg_803;
wire   [4:0] h_25_fu_373_p2;
wire   [5:0] co_26_fu_389_p2;
reg   [5:0] co_26_reg_816;
wire    ap_CS_fsm_state6;
wire   [12:0] tmp_269_fu_423_p2;
reg   [12:0] tmp_269_reg_821;
wire   [0:0] exitcond6_fu_383_p2;
wire   [10:0] tmp_271_fu_441_p2;
reg   [10:0] tmp_271_reg_826;
wire   [10:0] tmp_111_cast_fu_453_p1;
reg   [10:0] tmp_111_cast_reg_834;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond5_fu_447_p2;
wire   [14:0] tmp_278_fu_482_p2;
reg   [14:0] tmp_278_reg_839;
wire   [14:0] tmp_114_cast_fu_494_p1;
reg   [14:0] tmp_114_cast_reg_847;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond4_fu_488_p2;
reg   [13:0] ShuffleConvs_1_Downs_2_reg_852;
wire   [4:0] h_26_fu_508_p2;
wire   [5:0] ci_5_fu_520_p2;
reg   [5:0] ci_5_reg_865;
wire    ap_CS_fsm_state9;
wire   [12:0] tmp_286_fu_530_p2;
reg   [12:0] tmp_286_reg_870;
wire   [0:0] exitcond3_fu_514_p2;
wire   [14:0] tmp_293_fu_596_p2;
reg   [14:0] tmp_293_reg_875;
wire   [4:0] w_26_fu_601_p2;
reg   [4:0] w_26_reg_880;
wire    ap_CS_fsm_state10;
reg   [31:0] weight_load_reg_895;
wire    ap_CS_fsm_state11;
reg   [31:0] shuffleunit0_2_outpu_1_reg_900;
wire   [31:0] grp_fu_249_p2;
reg   [31:0] tmp_118_reg_905;
wire    ap_CS_fsm_state15;
wire   [31:0] grp_fu_243_p2;
wire    ap_CS_fsm_state20;
reg   [31:0] tmp_116_reg_915;
wire    ap_CS_fsm_state26;
wire   [5:0] co_27_fu_621_p2;
reg   [5:0] co_27_reg_923;
wire    ap_CS_fsm_state28;
wire   [10:0] tmp_276_fu_651_p2;
reg   [10:0] tmp_276_reg_928;
wire   [0:0] exitcond2_fu_615_p2;
wire   [14:0] tmp_282_fu_692_p2;
reg   [14:0] tmp_282_reg_936;
wire    ap_CS_fsm_state29;
wire   [0:0] exitcond1_fu_657_p2;
reg   [13:0] ShuffleConvs_1_Downs_4_reg_944;
wire    ap_CS_fsm_state30;
wire   [0:0] exitcond_fu_698_p2;
wire   [4:0] h_27_fu_718_p2;
wire   [0:0] notlhs_fu_742_p2;
reg   [0:0] notlhs_reg_954;
wire    ap_CS_fsm_state32;
wire   [0:0] notrhs_fu_748_p2;
reg   [0:0] notrhs_reg_959;
wire   [0:0] tmp_24_fu_253_p2;
reg   [0:0] tmp_24_reg_964;
wire   [4:0] w_27_fu_763_p2;
wire    ap_CS_fsm_state33;
reg   [5:0] co_reg_116;
reg   [4:0] h_reg_127;
reg   [4:0] w_reg_139;
wire    ap_CS_fsm_state5;
reg   [5:0] co1_reg_150;
reg   [4:0] h2_reg_161;
reg   [4:0] w3_reg_173;
wire    ap_CS_fsm_state27;
reg   [31:0] sum_reg_185;
reg   [5:0] ci_reg_197;
reg   [5:0] co4_reg_208;
reg   [4:0] h5_reg_219;
reg   [4:0] w6_reg_231;
wire   [63:0] tmp_fu_276_p1;
wire   [63:0] tmp_350_cast_fu_379_p1;
wire   [63:0] tmp_355_cast_fu_503_p1;
wire  signed [63:0] tmp_357_cast_fu_607_p1;
wire   [63:0] tmp_365_cast_fu_611_p1;
wire   [63:0] tmp_356_cast_fu_713_p1;
wire   [0:0] tmp_25_fu_758_p2;
reg   [31:0] grp_fu_243_p0;
reg   [31:0] grp_fu_243_p1;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state12;
wire   [9:0] tmp_s_fu_281_p3;
wire   [6:0] tmp_265_fu_293_p3;
wire   [10:0] p_shl1_cast_fu_301_p1;
wire   [10:0] p_shl_cast_fu_289_p1;
wire   [10:0] tmp_cast_fu_317_p1;
wire   [10:0] tmp_272_fu_321_p2;
wire   [11:0] tmp_263_fu_334_p3;
wire   [14:0] p_shl2_cast_fu_326_p3;
wire   [14:0] p_shl3_cast_fu_342_p1;
wire   [14:0] tmp_112_cast_fu_358_p1;
wire   [11:0] tmp_267_fu_395_p3;
wire   [9:0] tmp_268_fu_407_p3;
wire   [12:0] p_shl6_cast_fu_403_p1;
wire   [12:0] p_shl7_cast_fu_419_p1;
wire   [6:0] tmp_270_fu_429_p3;
wire   [10:0] p_shl5_cast_fu_437_p1;
wire   [10:0] p_shl7_cast1_fu_415_p1;
wire   [10:0] tmp_277_fu_457_p2;
wire   [11:0] tmp_264_fu_470_p3;
wire   [14:0] p_shl8_cast_fu_462_p3;
wire   [14:0] p_shl9_cast_fu_478_p1;
wire   [14:0] tmp_283_fu_498_p2;
wire   [12:0] tmp_117_cast_fu_526_p1;
wire   [9:0] tmp_287_fu_535_p3;
wire   [6:0] tmp_288_fu_547_p3;
wire   [10:0] p_shl12_cast_fu_543_p1;
wire   [10:0] p_shl13_cast_fu_555_p1;
wire   [10:0] tmp_289_fu_559_p2;
wire   [10:0] tmp_290_fu_565_p2;
wire   [11:0] tmp_291_fu_578_p3;
wire   [14:0] p_shl10_cast_fu_570_p3;
wire   [14:0] p_shl11_cast_fu_586_p1;
wire   [14:0] tmp_292_fu_590_p2;
wire   [9:0] tmp_274_fu_627_p3;
wire   [6:0] tmp_275_fu_639_p3;
wire   [10:0] p_shl15_cast_fu_647_p1;
wire   [10:0] p_shl14_cast_fu_635_p1;
wire   [10:0] tmp_113_cast_fu_663_p1;
wire   [10:0] tmp_280_fu_667_p2;
wire   [11:0] tmp_281_fu_680_p3;
wire   [14:0] p_shl16_cast_fu_672_p3;
wire   [14:0] p_shl17_cast_fu_688_p1;
wire   [14:0] tmp_115_cast_fu_704_p1;
wire   [14:0] tmp_284_fu_708_p2;
wire   [31:0] ShuffleConvs_1_Downs_7_fu_724_p1;
wire   [7:0] tmp_21_fu_728_p4;
wire   [22:0] tmp_285_fu_738_p1;
wire   [0:0] tmp_23_fu_754_p2;
reg   [32:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 33'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_x_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_243_p0),
    .din1(grp_fu_243_p1),
    .ce(1'b1),
    .dout(grp_fu_243_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_x_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_895),
    .din1(shuffleunit0_2_outpu_1_reg_900),
    .ce(1'b1),
    .dout(grp_fu_249_p2)
);

ShuffleNetV2_fcmpdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
ShuffleNetV2_fcmpdEe_x_U43(
    .din0(reg_258),
    .din1(32'd0),
    .opcode(5'd4),
    .dout(tmp_24_fu_253_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond4_fu_488_p2))) begin
        ci_reg_197 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        ci_reg_197 <= ci_5_reg_865;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_264_p2 == 1'd1))) begin
        co1_reg_150 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond5_fu_447_p2))) begin
        co1_reg_150 <= co_26_reg_816;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond6_fu_383_p2))) begin
        co4_reg_208 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state29) & (1'd1 == exitcond1_fu_657_p2))) begin
        co4_reg_208 <= co_27_reg_923;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond8_fu_311_p2 == 1'd1))) begin
        co_reg_116 <= co_25_reg_772;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_116 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond6_fu_383_p2))) begin
        h2_reg_161 <= 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond4_fu_488_p2))) begin
        h2_reg_161 <= h_26_fu_508_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (1'd0 == exitcond2_fu_615_p2))) begin
        h5_reg_219 <= 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state30) & (1'd1 == exitcond_fu_698_p2))) begin
        h5_reg_219 <= h_27_fu_718_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_264_p2 == 1'd0))) begin
        h_reg_127 <= 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond7_fu_352_p2 == 1'd1))) begin
        h_reg_127 <= h_25_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond4_fu_488_p2))) begin
        sum_reg_185 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        sum_reg_185 <= grp_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond5_fu_447_p2))) begin
        w3_reg_173 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        w3_reg_173 <= w_26_reg_880;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) & (1'd0 == exitcond1_fu_657_p2))) begin
        w6_reg_231 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        w6_reg_231 <= w_27_fu_763_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond8_fu_311_p2))) begin
        w_reg_139 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_reg_139 <= w_25_reg_803;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond4_fu_488_p2))) begin
        ShuffleConvs_1_Downs_2_reg_852 <= tmp_355_cast_fu_503_p1;
        tmp_114_cast_reg_847[4 : 0] <= tmp_114_cast_fu_494_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & (1'd0 == exitcond_fu_698_p2))) begin
        ShuffleConvs_1_Downs_4_reg_944 <= tmp_356_cast_fu_713_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_264_p2 == 1'd0))) begin
        bias_addr_reg_782 <= tmp_fu_276_p1;
        tmp_266_reg_777[10 : 1] <= tmp_266_fu_305_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ci_5_reg_865 <= ci_5_fu_520_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_25_reg_772 <= co_25_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        co_26_reg_816 <= co_26_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        co_27_reg_923 <= co_27_fu_621_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        notlhs_reg_954 <= notlhs_fu_742_p2;
        notrhs_reg_959 <= notrhs_fu_748_p2;
        tmp_24_reg_964 <= tmp_24_fu_253_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state31))) begin
        reg_258 <= ShuffleConvs_1_Downs_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        shuffleunit0_2_outpu_1_reg_900 <= shuffleunit0_2_outpu_q0;
        weight_load_reg_895 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond5_fu_447_p2))) begin
        tmp_111_cast_reg_834[4 : 0] <= tmp_111_cast_fu_453_p1[4 : 0];
        tmp_278_reg_839[14 : 1] <= tmp_278_fu_482_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_116_reg_915 <= grp_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_118_reg_905 <= grp_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond6_fu_383_p2))) begin
        tmp_269_reg_821[12 : 4] <= tmp_269_fu_423_p2[12 : 4];
        tmp_271_reg_826[10 : 1] <= tmp_271_fu_441_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond8_fu_311_p2))) begin
        tmp_273_reg_790[14 : 1] <= tmp_273_fu_346_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (1'd0 == exitcond2_fu_615_p2))) begin
        tmp_276_reg_928[10 : 1] <= tmp_276_fu_651_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond7_fu_352_p2))) begin
        tmp_279_reg_798 <= tmp_279_fu_362_p2;
        w_25_reg_803 <= w_25_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) & (1'd0 == exitcond1_fu_657_p2))) begin
        tmp_282_reg_936[14 : 1] <= tmp_282_fu_692_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond3_fu_514_p2))) begin
        tmp_286_reg_870 <= tmp_286_fu_530_p2;
        tmp_293_reg_875 <= tmp_293_fu_596_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond3_fu_514_p2))) begin
        w_26_reg_880 <= w_26_fu_601_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        ShuffleConvs_1_Downs_address0 = ShuffleConvs_1_Downs_4_reg_944;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        ShuffleConvs_1_Downs_address0 = tmp_356_cast_fu_713_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state27))) begin
        ShuffleConvs_1_Downs_address0 = ShuffleConvs_1_Downs_2_reg_852;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ShuffleConvs_1_Downs_address0 = tmp_350_cast_fu_379_p1;
    end else begin
        ShuffleConvs_1_Downs_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state27))) begin
        ShuffleConvs_1_Downs_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        ShuffleConvs_1_Downs_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        ShuffleConvs_1_Downs_d0 = tmp_116_reg_915;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ShuffleConvs_1_Downs_d0 = bias_q0;
    end else begin
        ShuffleConvs_1_Downs_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state33) & (1'd1 == tmp_25_fu_758_p2)))) begin
        ShuffleConvs_1_Downs_we0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state28) & (1'd1 == exitcond2_fu_615_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (1'd1 == exitcond2_fu_615_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_243_p0 = reg_258;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_243_p0 = sum_reg_185;
    end else begin
        grp_fu_243_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_243_p1 = sum_reg_185;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_243_p1 = tmp_118_reg_905;
    end else begin
        grp_fu_243_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        shuffleunit0_2_outpu_ce0 = 1'b1;
    end else begin
        shuffleunit0_2_outpu_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_264_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond8_fu_311_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond7_fu_352_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond6_fu_383_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond5_fu_447_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond4_fu_488_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond3_fu_514_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (1'd1 == exitcond2_fu_615_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (1'd1 == exitcond1_fu_657_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (1'd1 == exitcond_fu_698_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ShuffleConvs_1_Downs_7_fu_724_p1 = reg_258;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_782;

assign ci_5_fu_520_p2 = (ci_reg_197 + 6'd1);

assign co_25_fu_270_p2 = (co_reg_116 + 6'd1);

assign co_26_fu_389_p2 = (co1_reg_150 + 6'd1);

assign co_27_fu_621_p2 = (co4_reg_208 + 6'd1);

assign exitcond1_fu_657_p2 = ((h5_reg_219 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond2_fu_615_p2 = ((co4_reg_208 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond3_fu_514_p2 = ((ci_reg_197 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond4_fu_488_p2 = ((w3_reg_173 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond5_fu_447_p2 = ((h2_reg_161 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond6_fu_383_p2 = ((co1_reg_150 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond7_fu_352_p2 = ((w_reg_139 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond8_fu_311_p2 = ((h_reg_127 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond9_fu_264_p2 = ((co_reg_116 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond_fu_698_p2 = ((w6_reg_231 == 5'd17) ? 1'b1 : 1'b0);

assign h_25_fu_373_p2 = (h_reg_127 + 5'd1);

assign h_26_fu_508_p2 = (h2_reg_161 + 5'd1);

assign h_27_fu_718_p2 = (h5_reg_219 + 5'd1);

assign notlhs_fu_742_p2 = ((tmp_21_fu_728_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_748_p2 = ((tmp_285_fu_738_p1 == 23'd0) ? 1'b1 : 1'b0);

assign p_shl10_cast_fu_570_p3 = {{tmp_290_fu_565_p2}, {4'd0}};

assign p_shl11_cast_fu_586_p1 = tmp_291_fu_578_p3;

assign p_shl12_cast_fu_543_p1 = tmp_287_fu_535_p3;

assign p_shl13_cast_fu_555_p1 = tmp_288_fu_547_p3;

assign p_shl14_cast_fu_635_p1 = tmp_274_fu_627_p3;

assign p_shl15_cast_fu_647_p1 = tmp_275_fu_639_p3;

assign p_shl16_cast_fu_672_p3 = {{tmp_280_fu_667_p2}, {4'd0}};

assign p_shl17_cast_fu_688_p1 = tmp_281_fu_680_p3;

assign p_shl1_cast_fu_301_p1 = tmp_265_fu_293_p3;

assign p_shl2_cast_fu_326_p3 = {{tmp_272_fu_321_p2}, {4'd0}};

assign p_shl3_cast_fu_342_p1 = tmp_263_fu_334_p3;

assign p_shl5_cast_fu_437_p1 = tmp_270_fu_429_p3;

assign p_shl6_cast_fu_403_p1 = tmp_267_fu_395_p3;

assign p_shl7_cast1_fu_415_p1 = tmp_268_fu_407_p3;

assign p_shl7_cast_fu_419_p1 = tmp_268_fu_407_p3;

assign p_shl8_cast_fu_462_p3 = {{tmp_277_fu_457_p2}, {4'd0}};

assign p_shl9_cast_fu_478_p1 = tmp_264_fu_470_p3;

assign p_shl_cast_fu_289_p1 = tmp_s_fu_281_p3;

assign shuffleunit0_2_outpu_address0 = tmp_365_cast_fu_611_p1;

assign tmp_111_cast_fu_453_p1 = h2_reg_161;

assign tmp_112_cast_fu_358_p1 = w_reg_139;

assign tmp_113_cast_fu_663_p1 = h5_reg_219;

assign tmp_114_cast_fu_494_p1 = w3_reg_173;

assign tmp_115_cast_fu_704_p1 = w6_reg_231;

assign tmp_117_cast_fu_526_p1 = ci_reg_197;

assign tmp_21_fu_728_p4 = {{ShuffleConvs_1_Downs_7_fu_724_p1[30:23]}};

assign tmp_23_fu_754_p2 = (notrhs_reg_959 | notlhs_reg_954);

assign tmp_25_fu_758_p2 = (tmp_23_fu_754_p2 & tmp_24_reg_964);

assign tmp_263_fu_334_p3 = {{tmp_272_fu_321_p2}, {1'd0}};

assign tmp_264_fu_470_p3 = {{tmp_277_fu_457_p2}, {1'd0}};

assign tmp_265_fu_293_p3 = {{co_reg_116}, {1'd0}};

assign tmp_266_fu_305_p2 = (p_shl1_cast_fu_301_p1 + p_shl_cast_fu_289_p1);

assign tmp_267_fu_395_p3 = {{co1_reg_150}, {6'd0}};

assign tmp_268_fu_407_p3 = {{co1_reg_150}, {4'd0}};

assign tmp_269_fu_423_p2 = (p_shl6_cast_fu_403_p1 - p_shl7_cast_fu_419_p1);

assign tmp_270_fu_429_p3 = {{co1_reg_150}, {1'd0}};

assign tmp_271_fu_441_p2 = (p_shl5_cast_fu_437_p1 + p_shl7_cast1_fu_415_p1);

assign tmp_272_fu_321_p2 = (tmp_cast_fu_317_p1 + tmp_266_reg_777);

assign tmp_273_fu_346_p2 = (p_shl2_cast_fu_326_p3 + p_shl3_cast_fu_342_p1);

assign tmp_274_fu_627_p3 = {{co4_reg_208}, {4'd0}};

assign tmp_275_fu_639_p3 = {{co4_reg_208}, {1'd0}};

assign tmp_276_fu_651_p2 = (p_shl15_cast_fu_647_p1 + p_shl14_cast_fu_635_p1);

assign tmp_277_fu_457_p2 = (tmp_111_cast_fu_453_p1 + tmp_271_reg_826);

assign tmp_278_fu_482_p2 = (p_shl8_cast_fu_462_p3 + p_shl9_cast_fu_478_p1);

assign tmp_279_fu_362_p2 = (tmp_273_reg_790 + tmp_112_cast_fu_358_p1);

assign tmp_280_fu_667_p2 = (tmp_113_cast_fu_663_p1 + tmp_276_reg_928);

assign tmp_281_fu_680_p3 = {{tmp_280_fu_667_p2}, {1'd0}};

assign tmp_282_fu_692_p2 = (p_shl16_cast_fu_672_p3 + p_shl17_cast_fu_688_p1);

assign tmp_283_fu_498_p2 = (tmp_278_reg_839 + tmp_114_cast_fu_494_p1);

assign tmp_284_fu_708_p2 = (tmp_282_reg_936 + tmp_115_cast_fu_704_p1);

assign tmp_285_fu_738_p1 = ShuffleConvs_1_Downs_7_fu_724_p1[22:0];

assign tmp_286_fu_530_p2 = (tmp_117_cast_fu_526_p1 + tmp_269_reg_821);

assign tmp_287_fu_535_p3 = {{ci_reg_197}, {4'd0}};

assign tmp_288_fu_547_p3 = {{ci_reg_197}, {1'd0}};

assign tmp_289_fu_559_p2 = (p_shl12_cast_fu_543_p1 + p_shl13_cast_fu_555_p1);

assign tmp_290_fu_565_p2 = (tmp_111_cast_reg_834 + tmp_289_fu_559_p2);

assign tmp_291_fu_578_p3 = {{tmp_290_fu_565_p2}, {1'd0}};

assign tmp_292_fu_590_p2 = (p_shl10_cast_fu_570_p3 + p_shl11_cast_fu_586_p1);

assign tmp_293_fu_596_p2 = (tmp_114_cast_reg_847 + tmp_292_fu_590_p2);

assign tmp_350_cast_fu_379_p1 = tmp_279_reg_798;

assign tmp_355_cast_fu_503_p1 = tmp_283_fu_498_p2;

assign tmp_356_cast_fu_713_p1 = tmp_284_fu_708_p2;

assign tmp_357_cast_fu_607_p1 = $signed(tmp_286_reg_870);

assign tmp_365_cast_fu_611_p1 = tmp_293_reg_875;

assign tmp_cast_fu_317_p1 = h_reg_127;

assign tmp_fu_276_p1 = co_reg_116;

assign tmp_s_fu_281_p3 = {{co_reg_116}, {4'd0}};

assign w_25_fu_367_p2 = (w_reg_139 + 5'd1);

assign w_26_fu_601_p2 = (w3_reg_173 + 5'd1);

assign w_27_fu_763_p2 = (w6_reg_231 + 5'd1);

assign weight_address0 = tmp_357_cast_fu_607_p1;

always @ (posedge ap_clk) begin
    tmp_266_reg_777[0] <= 1'b0;
    tmp_273_reg_790[0] <= 1'b0;
    tmp_269_reg_821[3:0] <= 4'b0000;
    tmp_271_reg_826[0] <= 1'b0;
    tmp_111_cast_reg_834[10:5] <= 6'b000000;
    tmp_278_reg_839[0] <= 1'b0;
    tmp_114_cast_reg_847[14:5] <= 10'b0000000000;
    tmp_276_reg_928[0] <= 1'b0;
    tmp_282_reg_936[0] <= 1'b0;
end

endmodule //subconv_1x1_16p_p
