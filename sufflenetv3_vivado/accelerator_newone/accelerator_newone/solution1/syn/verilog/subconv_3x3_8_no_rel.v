// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_8_no_rel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_state6 = 29'd32;
parameter    ap_ST_fsm_state7 = 29'd64;
parameter    ap_ST_fsm_state8 = 29'd128;
parameter    ap_ST_fsm_state9 = 29'd256;
parameter    ap_ST_fsm_state10 = 29'd512;
parameter    ap_ST_fsm_state11 = 29'd1024;
parameter    ap_ST_fsm_state12 = 29'd2048;
parameter    ap_ST_fsm_state13 = 29'd4096;
parameter    ap_ST_fsm_state14 = 29'd8192;
parameter    ap_ST_fsm_state15 = 29'd16384;
parameter    ap_ST_fsm_state16 = 29'd32768;
parameter    ap_ST_fsm_state17 = 29'd65536;
parameter    ap_ST_fsm_state18 = 29'd131072;
parameter    ap_ST_fsm_state19 = 29'd262144;
parameter    ap_ST_fsm_state20 = 29'd524288;
parameter    ap_ST_fsm_state21 = 29'd1048576;
parameter    ap_ST_fsm_state22 = 29'd2097152;
parameter    ap_ST_fsm_state23 = 29'd4194304;
parameter    ap_ST_fsm_state24 = 29'd8388608;
parameter    ap_ST_fsm_state25 = 29'd16777216;
parameter    ap_ST_fsm_state26 = 29'd33554432;
parameter    ap_ST_fsm_state27 = 29'd67108864;
parameter    ap_ST_fsm_state28 = 29'd134217728;
parameter    ap_ST_fsm_state29 = 29'd268435456;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [8:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [5:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg weight_ce0;
reg bias_ce0;
reg[12:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] co_3_fu_239_p2;
reg   [5:0] co_3_reg_642;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_33_fu_274_p2;
reg   [9:0] tmp_33_reg_647;
wire   [0:0] exitcond7_fu_233_p2;
reg   [5:0] bias_addr_reg_652;
wire   [13:0] tmp_40_fu_319_p2;
reg   [13:0] tmp_40_reg_660;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond6_fu_280_p2;
wire   [13:0] tmp_44_fu_335_p2;
reg   [13:0] tmp_44_reg_668;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond5_fu_325_p2;
wire   [3:0] w_3_fu_340_p2;
reg   [3:0] w_3_reg_673;
wire   [3:0] h_3_fu_346_p2;
wire   [5:0] co_4_fu_362_p2;
reg   [5:0] co_4_reg_686;
wire    ap_CS_fsm_state6;
wire   [9:0] tmp_36_fu_396_p2;
reg   [9:0] tmp_36_reg_691;
wire   [0:0] exitcond4_fu_356_p2;
wire  signed [9:0] tmp_52_cast_fu_420_p1;
reg  signed [9:0] tmp_52_cast_reg_697;
wire   [13:0] tmp_43_fu_463_p2;
reg   [13:0] tmp_43_reg_705;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond3_fu_424_p2;
wire   [3:0] h_4_fu_475_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond2_fu_469_p2;
wire   [1:0] m_2_fu_487_p2;
reg   [1:0] m_2_reg_721;
wire    ap_CS_fsm_state9;
wire   [9:0] tmp_46_fu_497_p2;
reg   [9:0] tmp_46_reg_726;
wire   [0:0] exitcond1_fu_481_p2;
wire   [9:0] tmp_49_fu_522_p2;
reg   [9:0] tmp_49_reg_732;
reg   [12:0] output_addr_2_reg_738;
wire   [9:0] tmp_48_fu_546_p2;
reg   [9:0] tmp_48_reg_743;
wire    ap_CS_fsm_state10;
wire   [13:0] tmp_52_fu_573_p2;
reg   [13:0] tmp_52_reg_748;
wire   [1:0] n_2_fu_585_p2;
reg   [1:0] n_2_reg_756;
wire    ap_CS_fsm_state11;
wire   [9:0] tmp_53_fu_595_p2;
reg   [9:0] tmp_53_reg_761;
wire   [0:0] exitcond_fu_579_p2;
wire   [13:0] tmp_54_fu_620_p2;
reg   [13:0] tmp_54_reg_766;
wire    ap_CS_fsm_state12;
reg   [31:0] weight_load_reg_781;
wire    ap_CS_fsm_state13;
reg   [31:0] input_load_reg_786;
wire   [31:0] grp_fu_229_p2;
reg   [31:0] tmp_26_reg_791;
wire    ap_CS_fsm_state17;
wire   [31:0] grp_fu_223_p2;
wire    ap_CS_fsm_state22;
reg   [31:0] output_load_reg_801;
wire    ap_CS_fsm_state23;
wire   [3:0] w_4_fu_633_p2;
reg   [3:0] w_4_reg_806;
wire    ap_CS_fsm_state24;
reg   [31:0] tmp_19_reg_811;
wire    ap_CS_fsm_state28;
reg   [5:0] co_reg_108;
reg   [3:0] h_reg_119;
reg   [3:0] w_reg_131;
wire    ap_CS_fsm_state5;
reg   [5:0] co1_reg_142;
reg   [3:0] h2_reg_153;
reg   [3:0] w3_reg_165;
wire    ap_CS_fsm_state29;
reg   [31:0] sum_reg_177;
reg   [1:0] m_reg_189;
reg   [31:0] sum_1_reg_200;
reg   [1:0] n_reg_212;
wire   [63:0] tmp_fu_245_p1;
wire   [63:0] tmp_61_cast_fu_352_p1;
wire   [63:0] tmp_62_cast_fu_536_p1;
wire   [63:0] tmp_70_cast_fu_625_p1;
wire   [63:0] tmp_71_cast_fu_629_p1;
reg   [31:0] grp_fu_223_p0;
reg   [31:0] grp_fu_223_p1;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state14;
wire   [8:0] tmp_s_fu_250_p3;
wire   [6:0] tmp_32_fu_262_p3;
wire   [9:0] p_shl1_cast_fu_270_p1;
wire   [9:0] p_shl_cast_fu_258_p1;
wire   [9:0] tmp_15_cast_fu_286_p1;
wire   [9:0] tmp_39_fu_290_p2;
wire   [12:0] tmp_29_fu_295_p3;
wire   [10:0] tmp_30_fu_307_p3;
wire   [13:0] p_shl2_cast_fu_303_p1;
wire   [13:0] p_shl3_cast_fu_315_p1;
wire   [13:0] tmp_17_cast_fu_331_p1;
wire   [8:0] tmp_34_fu_372_p3;
wire   [6:0] tmp_35_fu_384_p3;
wire   [9:0] p_shl6_cast_fu_392_p1;
wire   [9:0] p_shl5_cast_fu_380_p1;
wire   [7:0] tmp_37_fu_402_p3;
wire   [8:0] p_shl4_cast_fu_410_p1;
wire   [8:0] tmp_cast_fu_368_p1;
wire   [8:0] tmp_38_fu_414_p2;
wire   [9:0] tmp_16_cast_fu_430_p1;
wire   [9:0] tmp_41_fu_434_p2;
wire   [12:0] tmp_31_fu_439_p3;
wire   [10:0] tmp_42_fu_451_p3;
wire   [13:0] p_shl7_cast_fu_447_p1;
wire   [13:0] p_shl8_cast_fu_459_p1;
wire   [9:0] tmp_20_cast_fu_493_p1;
wire   [1:0] tmp1_fu_502_p2;
wire  signed [3:0] tmp1_cast_fu_508_p1;
wire   [3:0] tmp_21_fu_512_p2;
wire   [9:0] tmp_22_cast_fu_518_p1;
wire   [13:0] tmp_18_cast_fu_527_p1;
wire   [13:0] tmp_45_fu_531_p2;
wire   [9:0] tmp_47_fu_541_p2;
wire   [12:0] tmp_50_fu_551_p3;
wire   [10:0] tmp_51_fu_562_p3;
wire   [13:0] p_shl10_cast_fu_569_p1;
wire   [13:0] p_shl9_cast_fu_558_p1;
wire   [9:0] tmp_23_cast_fu_591_p1;
wire   [1:0] tmp2_fu_600_p2;
wire  signed [3:0] tmp2_cast_fu_606_p1;
wire   [3:0] tmp_24_fu_610_p2;
wire   [13:0] tmp_25_cast_fu_616_p1;
reg   [28:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 29'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_x_U65(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_223_p0),
    .din1(grp_fu_223_p1),
    .ce(1'b1),
    .dout(grp_fu_223_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_x_U66(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_781),
    .din1(input_load_reg_786),
    .ce(1'b1),
    .dout(grp_fu_229_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_233_p2 == 1'd1))) begin
        co1_reg_142 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond3_fu_424_p2))) begin
        co1_reg_142 <= co_4_reg_686;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond6_fu_280_p2 == 1'd1))) begin
        co_reg_108 <= co_3_reg_642;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_108 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond4_fu_356_p2))) begin
        h2_reg_153 <= 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond2_fu_469_p2))) begin
        h2_reg_153 <= h_4_fu_475_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_233_p2 == 1'd0))) begin
        h_reg_119 <= 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond5_fu_325_p2 == 1'd1))) begin
        h_reg_119 <= h_3_fu_346_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond2_fu_469_p2))) begin
        m_reg_189 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == exitcond_fu_579_p2))) begin
        m_reg_189 <= m_2_reg_721;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        n_reg_212 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        n_reg_212 <= n_2_reg_756;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sum_1_reg_200 <= sum_reg_177;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        sum_1_reg_200 <= grp_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond2_fu_469_p2))) begin
        sum_reg_177 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == exitcond_fu_579_p2))) begin
        sum_reg_177 <= sum_1_reg_200;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond3_fu_424_p2))) begin
        w3_reg_165 <= 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        w3_reg_165 <= w_4_reg_806;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond6_fu_280_p2))) begin
        w_reg_131 <= 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_reg_131 <= w_3_reg_673;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_233_p2 == 1'd0))) begin
        bias_addr_reg_652 <= tmp_fu_245_p1;
        tmp_33_reg_647[9 : 1] <= tmp_33_fu_274_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_3_reg_642 <= co_3_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        co_4_reg_686 <= co_4_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        input_load_reg_786 <= input_r_q0;
        weight_load_reg_781 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        m_2_reg_721 <= m_2_fu_487_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        n_2_reg_756 <= n_2_fu_585_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond1_fu_481_p2))) begin
        output_addr_2_reg_738 <= tmp_62_cast_fu_536_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        output_load_reg_801 <= output_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_19_reg_811 <= grp_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_26_reg_791 <= grp_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond4_fu_356_p2))) begin
        tmp_36_reg_691[9 : 1] <= tmp_36_fu_396_p2[9 : 1];
        tmp_52_cast_reg_697 <= tmp_52_cast_fu_420_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond6_fu_280_p2))) begin
        tmp_40_reg_660[13 : 1] <= tmp_40_fu_319_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond3_fu_424_p2))) begin
        tmp_43_reg_705[13 : 1] <= tmp_43_fu_463_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond5_fu_325_p2))) begin
        tmp_44_reg_668 <= tmp_44_fu_335_p2;
        w_3_reg_673 <= w_3_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond1_fu_481_p2))) begin
        tmp_46_reg_726 <= tmp_46_fu_497_p2;
        tmp_49_reg_732 <= tmp_49_fu_522_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_48_reg_743 <= tmp_48_fu_546_p2;
        tmp_52_reg_748[13 : 1] <= tmp_52_fu_573_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'd0 == exitcond_fu_579_p2))) begin
        tmp_53_reg_761 <= tmp_53_fu_595_p2;
        tmp_54_reg_766 <= tmp_54_fu_620_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        w_4_reg_806 <= w_4_fu_633_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond4_fu_356_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond4_fu_356_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_223_p0 = output_load_reg_801;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_223_p0 = sum_1_reg_200;
    end else begin
        grp_fu_223_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_223_p1 = sum_reg_177;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_223_p1 = tmp_26_reg_791;
    end else begin
        grp_fu_223_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        output_r_address0 = output_addr_2_reg_738;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_address0 = tmp_62_cast_fu_536_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_address0 = tmp_61_cast_fu_352_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state29))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        output_r_d0 = tmp_19_reg_811;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_d0 = bias_q0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state29))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_233_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond6_fu_280_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond5_fu_325_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond4_fu_356_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond3_fu_424_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond2_fu_469_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond1_fu_481_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == exitcond_fu_579_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_652;

assign co_3_fu_239_p2 = (co_reg_108 + 6'd1);

assign co_4_fu_362_p2 = (co1_reg_142 + 6'd1);

assign exitcond1_fu_481_p2 = ((m_reg_189 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_469_p2 = ((w3_reg_165 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond3_fu_424_p2 = ((h2_reg_153 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond4_fu_356_p2 = ((co1_reg_142 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond5_fu_325_p2 = ((w_reg_131 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond6_fu_280_p2 = ((h_reg_119 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond7_fu_233_p2 = ((co_reg_108 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond_fu_579_p2 = ((n_reg_212 == 2'd3) ? 1'b1 : 1'b0);

assign h_3_fu_346_p2 = (h_reg_119 + 4'd1);

assign h_4_fu_475_p2 = (h2_reg_153 + 4'd1);

assign input_r_address0 = tmp_71_cast_fu_629_p1;

assign m_2_fu_487_p2 = (m_reg_189 + 2'd1);

assign n_2_fu_585_p2 = (n_reg_212 + 2'd1);

assign p_shl10_cast_fu_569_p1 = tmp_51_fu_562_p3;

assign p_shl1_cast_fu_270_p1 = tmp_32_fu_262_p3;

assign p_shl2_cast_fu_303_p1 = tmp_29_fu_295_p3;

assign p_shl3_cast_fu_315_p1 = tmp_30_fu_307_p3;

assign p_shl4_cast_fu_410_p1 = tmp_37_fu_402_p3;

assign p_shl5_cast_fu_380_p1 = tmp_34_fu_372_p3;

assign p_shl6_cast_fu_392_p1 = tmp_35_fu_384_p3;

assign p_shl7_cast_fu_447_p1 = tmp_31_fu_439_p3;

assign p_shl8_cast_fu_459_p1 = tmp_42_fu_451_p3;

assign p_shl9_cast_fu_558_p1 = tmp_50_fu_551_p3;

assign p_shl_cast_fu_258_p1 = tmp_s_fu_250_p3;

assign tmp1_cast_fu_508_p1 = $signed(tmp1_fu_502_p2);

assign tmp1_fu_502_p2 = ($signed(2'd3) + $signed(m_reg_189));

assign tmp2_cast_fu_606_p1 = $signed(tmp2_fu_600_p2);

assign tmp2_fu_600_p2 = ($signed(n_reg_212) + $signed(2'd3));

assign tmp_15_cast_fu_286_p1 = h_reg_119;

assign tmp_16_cast_fu_430_p1 = h2_reg_153;

assign tmp_17_cast_fu_331_p1 = w_reg_131;

assign tmp_18_cast_fu_527_p1 = w3_reg_165;

assign tmp_20_cast_fu_493_p1 = m_reg_189;

assign tmp_21_fu_512_p2 = ($signed(h2_reg_153) + $signed(tmp1_cast_fu_508_p1));

assign tmp_22_cast_fu_518_p1 = tmp_21_fu_512_p2;

assign tmp_23_cast_fu_591_p1 = n_reg_212;

assign tmp_24_fu_610_p2 = ($signed(w3_reg_165) + $signed(tmp2_cast_fu_606_p1));

assign tmp_25_cast_fu_616_p1 = tmp_24_fu_610_p2;

assign tmp_29_fu_295_p3 = {{tmp_39_fu_290_p2}, {3'd0}};

assign tmp_30_fu_307_p3 = {{tmp_39_fu_290_p2}, {1'd0}};

assign tmp_31_fu_439_p3 = {{tmp_41_fu_434_p2}, {3'd0}};

assign tmp_32_fu_262_p3 = {{co_reg_108}, {1'd0}};

assign tmp_33_fu_274_p2 = (p_shl1_cast_fu_270_p1 + p_shl_cast_fu_258_p1);

assign tmp_34_fu_372_p3 = {{co1_reg_142}, {3'd0}};

assign tmp_35_fu_384_p3 = {{co1_reg_142}, {1'd0}};

assign tmp_36_fu_396_p2 = (p_shl6_cast_fu_392_p1 + p_shl5_cast_fu_380_p1);

assign tmp_37_fu_402_p3 = {{co1_reg_142}, {2'd0}};

assign tmp_38_fu_414_p2 = (p_shl4_cast_fu_410_p1 - tmp_cast_fu_368_p1);

assign tmp_39_fu_290_p2 = (tmp_15_cast_fu_286_p1 + tmp_33_reg_647);

assign tmp_40_fu_319_p2 = (p_shl2_cast_fu_303_p1 + p_shl3_cast_fu_315_p1);

assign tmp_41_fu_434_p2 = (tmp_16_cast_fu_430_p1 + tmp_36_reg_691);

assign tmp_42_fu_451_p3 = {{tmp_41_fu_434_p2}, {1'd0}};

assign tmp_43_fu_463_p2 = (p_shl7_cast_fu_447_p1 + p_shl8_cast_fu_459_p1);

assign tmp_44_fu_335_p2 = (tmp_40_reg_660 + tmp_17_cast_fu_331_p1);

assign tmp_45_fu_531_p2 = (tmp_43_reg_705 + tmp_18_cast_fu_527_p1);

assign tmp_46_fu_497_p2 = ($signed(tmp_52_cast_reg_697) + $signed(tmp_20_cast_fu_493_p1));

assign tmp_47_fu_541_p2 = tmp_46_reg_726 << 10'd2;

assign tmp_48_fu_546_p2 = (tmp_47_fu_541_p2 - tmp_46_reg_726);

assign tmp_49_fu_522_p2 = (tmp_36_reg_691 + tmp_22_cast_fu_518_p1);

assign tmp_50_fu_551_p3 = {{tmp_49_reg_732}, {3'd0}};

assign tmp_51_fu_562_p3 = {{tmp_49_reg_732}, {1'd0}};

assign tmp_52_cast_fu_420_p1 = $signed(tmp_38_fu_414_p2);

assign tmp_52_fu_573_p2 = (p_shl10_cast_fu_569_p1 + p_shl9_cast_fu_558_p1);

assign tmp_53_fu_595_p2 = (tmp_48_reg_743 + tmp_23_cast_fu_591_p1);

assign tmp_54_fu_620_p2 = (tmp_52_reg_748 + tmp_25_cast_fu_616_p1);

assign tmp_61_cast_fu_352_p1 = tmp_44_reg_668;

assign tmp_62_cast_fu_536_p1 = tmp_45_fu_531_p2;

assign tmp_70_cast_fu_625_p1 = tmp_53_reg_761;

assign tmp_71_cast_fu_629_p1 = tmp_54_reg_766;

assign tmp_cast_fu_368_p1 = co1_reg_142;

assign tmp_fu_245_p1 = co_reg_108;

assign tmp_s_fu_250_p3 = {{co_reg_108}, {3'd0}};

assign w_3_fu_340_p2 = (w_reg_131 + 4'd1);

assign w_4_fu_633_p2 = (w3_reg_165 + 4'd1);

assign weight_address0 = tmp_70_cast_fu_625_p1;

always @ (posedge ap_clk) begin
    tmp_33_reg_647[0] <= 1'b0;
    tmp_40_reg_660[0] <= 1'b0;
    tmp_36_reg_691[0] <= 1'b0;
    tmp_43_reg_705[0] <= 1'b0;
    tmp_52_reg_748[0] <= 1'b0;
end

endmodule //subconv_3x3_8_no_rel
