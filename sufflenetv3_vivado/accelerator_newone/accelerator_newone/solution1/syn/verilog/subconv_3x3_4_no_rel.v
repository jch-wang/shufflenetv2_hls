// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_4_no_rel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_state6 = 29'd32;
parameter    ap_ST_fsm_state7 = 29'd64;
parameter    ap_ST_fsm_state8 = 29'd128;
parameter    ap_ST_fsm_state9 = 29'd256;
parameter    ap_ST_fsm_state10 = 29'd512;
parameter    ap_ST_fsm_state11 = 29'd1024;
parameter    ap_ST_fsm_state12 = 29'd2048;
parameter    ap_ST_fsm_state13 = 29'd4096;
parameter    ap_ST_fsm_state14 = 29'd8192;
parameter    ap_ST_fsm_state15 = 29'd16384;
parameter    ap_ST_fsm_state16 = 29'd32768;
parameter    ap_ST_fsm_state17 = 29'd65536;
parameter    ap_ST_fsm_state18 = 29'd131072;
parameter    ap_ST_fsm_state19 = 29'd262144;
parameter    ap_ST_fsm_state20 = 29'd524288;
parameter    ap_ST_fsm_state21 = 29'd1048576;
parameter    ap_ST_fsm_state22 = 29'd2097152;
parameter    ap_ST_fsm_state23 = 29'd4194304;
parameter    ap_ST_fsm_state24 = 29'd8388608;
parameter    ap_ST_fsm_state25 = 29'd16777216;
parameter    ap_ST_fsm_state26 = 29'd33554432;
parameter    ap_ST_fsm_state27 = 29'd67108864;
parameter    ap_ST_fsm_state28 = 29'd134217728;
parameter    ap_ST_fsm_state29 = 29'd268435456;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [9:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [6:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [11:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg weight_ce0;
reg bias_ce0;
reg[11:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] co_5_fu_239_p2;
reg   [6:0] co_5_reg_639;
wire    ap_CS_fsm_state2;
wire  signed [11:0] tmp_74_cast_fu_280_p1;
reg  signed [11:0] tmp_74_cast_reg_644;
wire   [0:0] exitcond7_fu_233_p2;
reg   [6:0] bias_addr_reg_649;
wire   [12:0] tmp_63_fu_319_p2;
reg   [12:0] tmp_63_reg_657;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond6_fu_284_p2;
wire   [12:0] tmp_66_fu_335_p2;
reg   [12:0] tmp_66_reg_665;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond5_fu_325_p2;
wire   [2:0] w_5_fu_340_p2;
reg   [2:0] w_5_reg_670;
wire   [2:0] h_5_fu_346_p2;
wire   [6:0] co_6_fu_362_p2;
reg   [6:0] co_6_reg_683;
wire    ap_CS_fsm_state6;
wire  signed [11:0] tmp_77_cast_fu_402_p1;
reg  signed [11:0] tmp_77_cast_reg_688;
wire   [0:0] exitcond4_fu_356_p2;
wire  signed [10:0] tmp_79_cast_fu_424_p1;
reg  signed [10:0] tmp_79_cast_reg_694;
wire   [12:0] tmp_65_fu_463_p2;
reg   [12:0] tmp_65_reg_702;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond3_fu_428_p2;
wire   [2:0] h_6_fu_475_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond2_fu_469_p2;
wire   [1:0] m_3_fu_487_p2;
reg   [1:0] m_3_reg_718;
wire    ap_CS_fsm_state9;
wire   [10:0] tmp_68_fu_497_p2;
reg   [10:0] tmp_68_reg_723;
wire   [0:0] exitcond1_fu_481_p2;
wire   [2:0] tmp_33_fu_512_p2;
reg   [2:0] tmp_33_reg_729;
reg   [11:0] output_addr_3_reg_734;
wire   [10:0] tmp_69_fu_537_p2;
reg   [10:0] tmp_69_reg_739;
wire    ap_CS_fsm_state10;
wire   [12:0] tmp_72_fu_570_p2;
reg   [12:0] tmp_72_reg_744;
wire   [1:0] n_3_fu_582_p2;
reg   [1:0] n_3_reg_752;
wire    ap_CS_fsm_state11;
wire   [10:0] tmp_73_fu_592_p2;
reg   [10:0] tmp_73_reg_757;
wire   [0:0] exitcond_fu_576_p2;
wire   [12:0] tmp_74_fu_617_p2;
reg   [12:0] tmp_74_reg_762;
wire    ap_CS_fsm_state12;
reg   [31:0] weight_load_reg_777;
wire    ap_CS_fsm_state13;
reg   [31:0] input_load_reg_782;
wire   [31:0] grp_fu_229_p2;
reg   [31:0] tmp_38_reg_787;
wire    ap_CS_fsm_state17;
wire   [31:0] grp_fu_223_p2;
wire    ap_CS_fsm_state22;
reg   [31:0] output_load_reg_797;
wire    ap_CS_fsm_state23;
wire   [2:0] w_6_fu_630_p2;
reg   [2:0] w_6_reg_802;
wire    ap_CS_fsm_state24;
reg   [31:0] tmp_31_reg_807;
wire    ap_CS_fsm_state28;
reg   [6:0] co_reg_108;
reg   [2:0] h_reg_119;
reg   [2:0] w_reg_131;
wire    ap_CS_fsm_state5;
reg   [6:0] co1_reg_142;
reg   [2:0] h2_reg_153;
reg   [2:0] w3_reg_165;
wire    ap_CS_fsm_state29;
reg   [31:0] sum_reg_177;
reg   [1:0] m_reg_189;
reg   [31:0] sum_1_reg_200;
reg   [1:0] n_reg_212;
wire   [63:0] tmp_fu_245_p1;
wire   [63:0] tmp_88_cast_fu_352_p1;
wire   [63:0] tmp_89_cast_fu_527_p1;
wire   [63:0] tmp_97_cast_fu_622_p1;
wire   [63:0] tmp_98_cast_fu_626_p1;
reg   [31:0] grp_fu_223_p0;
reg   [31:0] grp_fu_223_p1;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state14;
wire   [9:0] tmp_s_fu_250_p3;
wire   [7:0] tmp_55_fu_262_p3;
wire   [10:0] p_shl_cast_fu_258_p1;
wire   [10:0] p_shl1_cast_fu_270_p1;
wire   [10:0] tmp_56_fu_274_p2;
wire   [11:0] tmp_27_cast_fu_290_p1;
wire   [11:0] tmp_62_fu_294_p2;
wire   [9:0] tmp_52_fu_299_p1;
wire   [12:0] p_shl2_cast_fu_303_p3;
wire   [12:0] p_shl3_cast_fu_311_p3;
wire   [12:0] tmp_29_cast_fu_331_p1;
wire   [9:0] tmp_57_fu_372_p3;
wire   [7:0] tmp_58_fu_384_p3;
wire   [10:0] p_shl5_cast_fu_380_p1;
wire   [10:0] p_shl6_cast_fu_392_p1;
wire   [10:0] tmp_59_fu_396_p2;
wire   [8:0] tmp_60_fu_406_p3;
wire   [9:0] p_shl4_cast_fu_414_p1;
wire   [9:0] tmp_cast_fu_368_p1;
wire   [9:0] tmp_61_fu_418_p2;
wire   [11:0] tmp_28_cast_fu_434_p1;
wire   [11:0] tmp_64_fu_438_p2;
wire   [9:0] tmp_53_fu_443_p1;
wire   [12:0] p_shl7_cast_fu_447_p3;
wire   [12:0] p_shl8_cast_fu_455_p3;
wire   [10:0] tmp_32_cast_fu_493_p1;
wire   [1:0] tmp1_fu_502_p2;
wire  signed [2:0] tmp1_cast_fu_508_p1;
wire   [12:0] tmp_30_cast_fu_518_p1;
wire   [12:0] tmp_67_fu_522_p2;
wire   [10:0] tmp_54_fu_532_p2;
wire   [11:0] tmp_34_cast_fu_542_p1;
wire   [11:0] tmp_70_fu_545_p2;
wire   [9:0] tmp_71_fu_550_p1;
wire   [12:0] p_shl9_cast_fu_554_p3;
wire   [12:0] p_shl10_cast_fu_562_p3;
wire   [10:0] tmp_35_cast_fu_588_p1;
wire   [1:0] tmp2_fu_597_p2;
wire  signed [2:0] tmp2_cast_fu_603_p1;
wire   [2:0] tmp_36_fu_607_p2;
wire   [12:0] tmp_37_cast_fu_613_p1;
reg   [28:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 29'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_x_U98(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_223_p0),
    .din1(grp_fu_223_p1),
    .ce(1'b1),
    .dout(grp_fu_223_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_x_U99(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_777),
    .din1(input_load_reg_782),
    .ce(1'b1),
    .dout(grp_fu_229_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_233_p2 == 1'd1))) begin
        co1_reg_142 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond3_fu_428_p2))) begin
        co1_reg_142 <= co_6_reg_683;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond6_fu_284_p2 == 1'd1))) begin
        co_reg_108 <= co_5_reg_639;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_108 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond4_fu_356_p2))) begin
        h2_reg_153 <= 3'd1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond2_fu_469_p2))) begin
        h2_reg_153 <= h_6_fu_475_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_233_p2 == 1'd0))) begin
        h_reg_119 <= 3'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond5_fu_325_p2 == 1'd1))) begin
        h_reg_119 <= h_5_fu_346_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond2_fu_469_p2))) begin
        m_reg_189 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == exitcond_fu_576_p2))) begin
        m_reg_189 <= m_3_reg_718;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        n_reg_212 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        n_reg_212 <= n_3_reg_752;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sum_1_reg_200 <= sum_reg_177;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        sum_1_reg_200 <= grp_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond2_fu_469_p2))) begin
        sum_reg_177 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == exitcond_fu_576_p2))) begin
        sum_reg_177 <= sum_1_reg_200;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond3_fu_428_p2))) begin
        w3_reg_165 <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        w3_reg_165 <= w_6_reg_802;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond6_fu_284_p2))) begin
        w_reg_131 <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_reg_131 <= w_5_reg_670;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_233_p2 == 1'd0))) begin
        bias_addr_reg_649 <= tmp_fu_245_p1;
        tmp_74_cast_reg_644[11 : 1] <= tmp_74_cast_fu_280_p1[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_5_reg_639 <= co_5_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        co_6_reg_683 <= co_6_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        input_load_reg_782 <= input_r_q0;
        weight_load_reg_777 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        m_3_reg_718 <= m_3_fu_487_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        n_3_reg_752 <= n_3_fu_582_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond1_fu_481_p2))) begin
        output_addr_3_reg_734 <= tmp_89_cast_fu_527_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        output_load_reg_797 <= output_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_31_reg_807 <= grp_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond1_fu_481_p2))) begin
        tmp_33_reg_729 <= tmp_33_fu_512_p2;
        tmp_68_reg_723 <= tmp_68_fu_497_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_38_reg_787 <= grp_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond6_fu_284_p2))) begin
        tmp_63_reg_657[12 : 1] <= tmp_63_fu_319_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond3_fu_428_p2))) begin
        tmp_65_reg_702[12 : 1] <= tmp_65_fu_463_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond5_fu_325_p2))) begin
        tmp_66_reg_665 <= tmp_66_fu_335_p2;
        w_5_reg_670 <= w_5_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_69_reg_739 <= tmp_69_fu_537_p2;
        tmp_72_reg_744[12 : 1] <= tmp_72_fu_570_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'd0 == exitcond_fu_576_p2))) begin
        tmp_73_reg_757 <= tmp_73_fu_592_p2;
        tmp_74_reg_762 <= tmp_74_fu_617_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond4_fu_356_p2))) begin
        tmp_77_cast_reg_688[11 : 1] <= tmp_77_cast_fu_402_p1[11 : 1];
        tmp_79_cast_reg_694 <= tmp_79_cast_fu_424_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        w_6_reg_802 <= w_6_fu_630_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond4_fu_356_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond4_fu_356_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_223_p0 = output_load_reg_797;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_223_p0 = sum_1_reg_200;
    end else begin
        grp_fu_223_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_223_p1 = sum_reg_177;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_223_p1 = tmp_38_reg_787;
    end else begin
        grp_fu_223_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        output_r_address0 = output_addr_3_reg_734;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_address0 = tmp_89_cast_fu_527_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_address0 = tmp_88_cast_fu_352_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state29))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        output_r_d0 = tmp_31_reg_807;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_d0 = bias_q0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state29))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_233_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond6_fu_284_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond5_fu_325_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond4_fu_356_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond3_fu_428_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond2_fu_469_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond1_fu_481_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == exitcond_fu_576_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_649;

assign co_5_fu_239_p2 = (co_reg_108 + 7'd1);

assign co_6_fu_362_p2 = (co1_reg_142 + 7'd1);

assign exitcond1_fu_481_p2 = ((m_reg_189 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_469_p2 = ((w3_reg_165 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond3_fu_428_p2 = ((h2_reg_153 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond4_fu_356_p2 = ((co1_reg_142 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond5_fu_325_p2 = ((w_reg_131 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond6_fu_284_p2 = ((h_reg_119 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond7_fu_233_p2 = ((co_reg_108 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond_fu_576_p2 = ((n_reg_212 == 2'd3) ? 1'b1 : 1'b0);

assign h_5_fu_346_p2 = (h_reg_119 + 3'd1);

assign h_6_fu_475_p2 = (h2_reg_153 + 3'd1);

assign input_r_address0 = tmp_98_cast_fu_626_p1;

assign m_3_fu_487_p2 = (m_reg_189 + 2'd1);

assign n_3_fu_582_p2 = (n_reg_212 + 2'd1);

assign p_shl10_cast_fu_562_p3 = {{tmp_70_fu_545_p2}, {1'd0}};

assign p_shl1_cast_fu_270_p1 = tmp_55_fu_262_p3;

assign p_shl2_cast_fu_303_p3 = {{tmp_52_fu_299_p1}, {3'd0}};

assign p_shl3_cast_fu_311_p3 = {{tmp_62_fu_294_p2}, {1'd0}};

assign p_shl4_cast_fu_414_p1 = tmp_60_fu_406_p3;

assign p_shl5_cast_fu_380_p1 = tmp_57_fu_372_p3;

assign p_shl6_cast_fu_392_p1 = tmp_58_fu_384_p3;

assign p_shl7_cast_fu_447_p3 = {{tmp_53_fu_443_p1}, {3'd0}};

assign p_shl8_cast_fu_455_p3 = {{tmp_64_fu_438_p2}, {1'd0}};

assign p_shl9_cast_fu_554_p3 = {{tmp_71_fu_550_p1}, {3'd0}};

assign p_shl_cast_fu_258_p1 = tmp_s_fu_250_p3;

assign tmp1_cast_fu_508_p1 = $signed(tmp1_fu_502_p2);

assign tmp1_fu_502_p2 = ($signed(2'd3) + $signed(m_reg_189));

assign tmp2_cast_fu_603_p1 = $signed(tmp2_fu_597_p2);

assign tmp2_fu_597_p2 = ($signed(n_reg_212) + $signed(2'd3));

assign tmp_27_cast_fu_290_p1 = h_reg_119;

assign tmp_28_cast_fu_434_p1 = h2_reg_153;

assign tmp_29_cast_fu_331_p1 = w_reg_131;

assign tmp_30_cast_fu_518_p1 = w3_reg_165;

assign tmp_32_cast_fu_493_p1 = m_reg_189;

assign tmp_33_fu_512_p2 = ($signed(tmp1_cast_fu_508_p1) + $signed(h2_reg_153));

assign tmp_34_cast_fu_542_p1 = tmp_33_reg_729;

assign tmp_35_cast_fu_588_p1 = n_reg_212;

assign tmp_36_fu_607_p2 = ($signed(w3_reg_165) + $signed(tmp2_cast_fu_603_p1));

assign tmp_37_cast_fu_613_p1 = tmp_36_fu_607_p2;

assign tmp_52_fu_299_p1 = tmp_62_fu_294_p2[9:0];

assign tmp_53_fu_443_p1 = tmp_64_fu_438_p2[9:0];

assign tmp_54_fu_532_p2 = tmp_68_reg_723 << 11'd2;

assign tmp_55_fu_262_p3 = {{co_reg_108}, {1'd0}};

assign tmp_56_fu_274_p2 = (p_shl_cast_fu_258_p1 - p_shl1_cast_fu_270_p1);

assign tmp_57_fu_372_p3 = {{co1_reg_142}, {3'd0}};

assign tmp_58_fu_384_p3 = {{co1_reg_142}, {1'd0}};

assign tmp_59_fu_396_p2 = (p_shl5_cast_fu_380_p1 - p_shl6_cast_fu_392_p1);

assign tmp_60_fu_406_p3 = {{co1_reg_142}, {2'd0}};

assign tmp_61_fu_418_p2 = (p_shl4_cast_fu_414_p1 - tmp_cast_fu_368_p1);

assign tmp_62_fu_294_p2 = ($signed(tmp_27_cast_fu_290_p1) + $signed(tmp_74_cast_reg_644));

assign tmp_63_fu_319_p2 = (p_shl2_cast_fu_303_p3 - p_shl3_cast_fu_311_p3);

assign tmp_64_fu_438_p2 = ($signed(tmp_28_cast_fu_434_p1) + $signed(tmp_77_cast_reg_688));

assign tmp_65_fu_463_p2 = (p_shl7_cast_fu_447_p3 - p_shl8_cast_fu_455_p3);

assign tmp_66_fu_335_p2 = (tmp_63_reg_657 + tmp_29_cast_fu_331_p1);

assign tmp_67_fu_522_p2 = (tmp_65_reg_702 + tmp_30_cast_fu_518_p1);

assign tmp_68_fu_497_p2 = ($signed(tmp_32_cast_fu_493_p1) + $signed(tmp_79_cast_reg_694));

assign tmp_69_fu_537_p2 = (tmp_54_fu_532_p2 - tmp_68_reg_723);

assign tmp_70_fu_545_p2 = ($signed(tmp_34_cast_fu_542_p1) + $signed(tmp_77_cast_reg_688));

assign tmp_71_fu_550_p1 = tmp_70_fu_545_p2[9:0];

assign tmp_72_fu_570_p2 = (p_shl9_cast_fu_554_p3 - p_shl10_cast_fu_562_p3);

assign tmp_73_fu_592_p2 = (tmp_69_reg_739 + tmp_35_cast_fu_588_p1);

assign tmp_74_cast_fu_280_p1 = $signed(tmp_56_fu_274_p2);

assign tmp_74_fu_617_p2 = (tmp_72_reg_744 + tmp_37_cast_fu_613_p1);

assign tmp_77_cast_fu_402_p1 = $signed(tmp_59_fu_396_p2);

assign tmp_79_cast_fu_424_p1 = $signed(tmp_61_fu_418_p2);

assign tmp_88_cast_fu_352_p1 = tmp_66_reg_665;

assign tmp_89_cast_fu_527_p1 = tmp_67_fu_522_p2;

assign tmp_97_cast_fu_622_p1 = tmp_73_reg_757;

assign tmp_98_cast_fu_626_p1 = tmp_74_reg_762;

assign tmp_cast_fu_368_p1 = co1_reg_142;

assign tmp_fu_245_p1 = co_reg_108;

assign tmp_s_fu_250_p3 = {{co_reg_108}, {3'd0}};

assign w_5_fu_340_p2 = (w_reg_131 + 3'd1);

assign w_6_fu_630_p2 = (w3_reg_165 + 3'd1);

assign weight_address0 = tmp_97_cast_fu_622_p1;

always @ (posedge ap_clk) begin
    tmp_74_cast_reg_644[0] <= 1'b0;
    tmp_63_reg_657[0] <= 1'b0;
    tmp_77_cast_reg_688[0] <= 1'b0;
    tmp_65_reg_702[0] <= 1'b0;
    tmp_72_reg_744[0] <= 1'b0;
end

endmodule //subconv_3x3_4_no_rel
