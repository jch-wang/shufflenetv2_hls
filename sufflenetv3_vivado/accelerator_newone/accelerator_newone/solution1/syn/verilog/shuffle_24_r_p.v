// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shuffle_24_r_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        right_r_address0,
        right_r_ce0,
        right_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] right_r_address0;
output   right_r_ce0;
input  [31:0] right_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg right_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_345_fu_108_p1;
reg   [0:0] tmp_345_reg_315;
wire    ap_CS_fsm_state2;
wire   [5:0] co_37_fu_118_p2;
reg   [5:0] co_37_reg_322;
wire   [9:0] tmp_391_fu_158_p2;
reg   [9:0] tmp_391_reg_327;
wire   [0:0] exitcond2_fu_112_p2;
wire   [10:0] tmp_394_fu_188_p2;
reg   [10:0] tmp_394_reg_332;
wire   [4:0] h_37_fu_200_p2;
reg   [4:0] h_37_reg_340;
wire    ap_CS_fsm_state3;
wire   [13:0] tmp_396_fu_239_p2;
reg   [13:0] tmp_396_reg_345;
wire   [0:0] exitcond1_fu_194_p2;
wire   [14:0] tmp_398_fu_270_p2;
reg   [14:0] tmp_398_reg_350;
wire   [4:0] w_37_fu_282_p2;
reg   [4:0] w_37_reg_358;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_276_p2;
wire   [14:0] tmp_400_fu_306_p2;
reg   [14:0] tmp_400_reg_368;
reg   [5:0] co_reg_75;
reg   [4:0] h_reg_86;
reg   [4:0] w_reg_97;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_519_cast_fu_301_p1;
wire   [63:0] tmp_520_cast_fu_311_p1;
wire   [4:0] tmp_fu_124_p4;
wire   [8:0] tmp_s_fu_134_p3;
wire   [5:0] tmp_390_fu_146_p3;
wire   [9:0] p_shl3_cast_fu_154_p1;
wire   [9:0] p_shl2_cast_fu_142_p1;
wire   [9:0] tmp_392_fu_164_p3;
wire   [6:0] tmp_393_fu_176_p3;
wire   [10:0] p_shl1_cast_fu_184_p1;
wire   [10:0] p_shl_cast_fu_172_p1;
wire   [9:0] tmp_cast_fu_210_p1;
wire   [9:0] tmp_395_fu_214_p2;
wire   [10:0] tmp_346_fu_227_p3;
wire   [13:0] p_shl6_cast_fu_219_p3;
wire   [13:0] p_shl7_cast_fu_235_p1;
wire   [10:0] tmp_cast9_fu_206_p1;
wire   [10:0] tmp_397_fu_245_p2;
wire   [11:0] tmp_347_fu_258_p3;
wire   [14:0] p_shl4_cast_fu_250_p3;
wire   [14:0] p_shl5_cast_fu_266_p1;
wire   [13:0] tmp_133_cast_fu_292_p1;
wire   [13:0] tmp_399_fu_296_p2;
wire   [14:0] tmp_133_cast8_fu_288_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_194_p2 == 1'd1))) begin
        co_reg_75 <= co_37_reg_322;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_75 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_276_p2 == 1'd1))) begin
        h_reg_86 <= h_37_reg_340;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_112_p2 == 1'd0))) begin
        h_reg_86 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond1_fu_194_p2))) begin
        w_reg_97 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_reg_97 <= w_37_reg_358;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_37_reg_322 <= co_37_fu_118_p2;
        tmp_345_reg_315 <= tmp_345_fu_108_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_37_reg_340 <= h_37_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_112_p2 == 1'd0))) begin
        tmp_391_reg_327[9 : 1] <= tmp_391_fu_158_p2[9 : 1];
        tmp_394_reg_332[10 : 1] <= tmp_394_fu_188_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond1_fu_194_p2))) begin
        tmp_396_reg_345[13 : 1] <= tmp_396_fu_239_p2[13 : 1];
        tmp_398_reg_350[14 : 1] <= tmp_398_fu_270_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_276_p2) & (tmp_345_reg_315 == 1'd1))) begin
        tmp_400_reg_368 <= tmp_400_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_37_reg_358 <= w_37_fu_282_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_112_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_112_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_345_reg_315 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        right_r_ce0 = 1'b1;
    end else begin
        right_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_112_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_194_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_276_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign co_37_fu_118_p2 = (6'd1 + co_reg_75);

assign exitcond1_fu_194_p2 = ((h_reg_86 == 5'd18) ? 1'b1 : 1'b0);

assign exitcond2_fu_112_p2 = ((co_reg_75 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond_fu_276_p2 = ((w_reg_97 == 5'd18) ? 1'b1 : 1'b0);

assign h_37_fu_200_p2 = (h_reg_86 + 5'd1);

assign output_r_address0 = tmp_520_cast_fu_311_p1;

assign output_r_d0 = right_r_q0;

assign p_shl1_cast_fu_184_p1 = tmp_393_fu_176_p3;

assign p_shl2_cast_fu_142_p1 = tmp_s_fu_134_p3;

assign p_shl3_cast_fu_154_p1 = tmp_390_fu_146_p3;

assign p_shl4_cast_fu_250_p3 = {{tmp_397_fu_245_p2}, {4'd0}};

assign p_shl5_cast_fu_266_p1 = tmp_347_fu_258_p3;

assign p_shl6_cast_fu_219_p3 = {{tmp_395_fu_214_p2}, {4'd0}};

assign p_shl7_cast_fu_235_p1 = tmp_346_fu_227_p3;

assign p_shl_cast_fu_172_p1 = tmp_392_fu_164_p3;

assign right_r_address0 = tmp_519_cast_fu_301_p1;

assign tmp_133_cast8_fu_288_p1 = w_reg_97;

assign tmp_133_cast_fu_292_p1 = w_reg_97;

assign tmp_345_fu_108_p1 = co_reg_75[0:0];

assign tmp_346_fu_227_p3 = {{tmp_395_fu_214_p2}, {1'd0}};

assign tmp_347_fu_258_p3 = {{tmp_397_fu_245_p2}, {1'd0}};

assign tmp_390_fu_146_p3 = {{tmp_fu_124_p4}, {1'd0}};

assign tmp_391_fu_158_p2 = (p_shl3_cast_fu_154_p1 + p_shl2_cast_fu_142_p1);

assign tmp_392_fu_164_p3 = {{co_reg_75}, {4'd0}};

assign tmp_393_fu_176_p3 = {{co_reg_75}, {1'd0}};

assign tmp_394_fu_188_p2 = (p_shl1_cast_fu_184_p1 + p_shl_cast_fu_172_p1);

assign tmp_395_fu_214_p2 = (tmp_cast_fu_210_p1 + tmp_391_reg_327);

assign tmp_396_fu_239_p2 = (p_shl6_cast_fu_219_p3 + p_shl7_cast_fu_235_p1);

assign tmp_397_fu_245_p2 = (tmp_cast9_fu_206_p1 + tmp_394_reg_332);

assign tmp_398_fu_270_p2 = (p_shl4_cast_fu_250_p3 + p_shl5_cast_fu_266_p1);

assign tmp_399_fu_296_p2 = (tmp_396_reg_345 + tmp_133_cast_fu_292_p1);

assign tmp_400_fu_306_p2 = (tmp_398_reg_350 + tmp_133_cast8_fu_288_p1);

assign tmp_519_cast_fu_301_p1 = tmp_399_fu_296_p2;

assign tmp_520_cast_fu_311_p1 = tmp_400_reg_368;

assign tmp_cast9_fu_206_p1 = h_reg_86;

assign tmp_cast_fu_210_p1 = h_reg_86;

assign tmp_fu_124_p4 = {{co_reg_75[5:1]}};

assign tmp_s_fu_134_p3 = {{tmp_fu_124_p4}, {4'd0}};

assign w_37_fu_282_p2 = (w_reg_97 + 5'd1);

always @ (posedge ap_clk) begin
    tmp_391_reg_327[0] <= 1'b0;
    tmp_394_reg_332[0] <= 1'b0;
    tmp_396_reg_345[0] <= 1'b0;
    tmp_398_reg_350[0] <= 1'b0;
end

endmodule //shuffle_24_r_p
