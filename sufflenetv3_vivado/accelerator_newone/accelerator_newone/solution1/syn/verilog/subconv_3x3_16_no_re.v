// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_16_no_re (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_state6 = 29'd32;
parameter    ap_ST_fsm_state7 = 29'd64;
parameter    ap_ST_fsm_state8 = 29'd128;
parameter    ap_ST_fsm_state9 = 29'd256;
parameter    ap_ST_fsm_state10 = 29'd512;
parameter    ap_ST_fsm_state11 = 29'd1024;
parameter    ap_ST_fsm_state12 = 29'd2048;
parameter    ap_ST_fsm_state13 = 29'd4096;
parameter    ap_ST_fsm_state14 = 29'd8192;
parameter    ap_ST_fsm_state15 = 29'd16384;
parameter    ap_ST_fsm_state16 = 29'd32768;
parameter    ap_ST_fsm_state17 = 29'd65536;
parameter    ap_ST_fsm_state18 = 29'd131072;
parameter    ap_ST_fsm_state19 = 29'd262144;
parameter    ap_ST_fsm_state20 = 29'd524288;
parameter    ap_ST_fsm_state21 = 29'd1048576;
parameter    ap_ST_fsm_state22 = 29'd2097152;
parameter    ap_ST_fsm_state23 = 29'd4194304;
parameter    ap_ST_fsm_state24 = 29'd8388608;
parameter    ap_ST_fsm_state25 = 29'd16777216;
parameter    ap_ST_fsm_state26 = 29'd33554432;
parameter    ap_ST_fsm_state27 = 29'd67108864;
parameter    ap_ST_fsm_state28 = 29'd134217728;
parameter    ap_ST_fsm_state29 = 29'd268435456;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [7:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [4:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg weight_ce0;
reg bias_ce0;
reg[12:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] co_11_fu_237_p2;
reg   [4:0] co_11_reg_628;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_122_fu_272_p2;
reg   [9:0] tmp_122_reg_633;
wire   [0:0] exitcond7_fu_231_p2;
reg   [4:0] bias_addr_reg_638;
wire   [13:0] tmp_129_fu_313_p2;
reg   [13:0] tmp_129_reg_646;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond6_fu_278_p2;
wire   [13:0] tmp_132_fu_329_p2;
reg   [13:0] tmp_132_reg_654;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond5_fu_319_p2;
wire   [4:0] w_11_fu_334_p2;
reg   [4:0] w_11_reg_659;
wire   [4:0] h_11_fu_340_p2;
wire   [4:0] co_12_fu_356_p2;
reg   [4:0] co_12_reg_672;
wire    ap_CS_fsm_state6;
wire   [9:0] tmp_125_fu_390_p2;
reg   [9:0] tmp_125_reg_677;
wire   [0:0] exitcond4_fu_350_p2;
wire  signed [8:0] tmp_166_cast_fu_414_p1;
reg  signed [8:0] tmp_166_cast_reg_683;
wire   [13:0] tmp_131_fu_453_p2;
reg   [13:0] tmp_131_reg_691;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond3_fu_418_p2;
wire   [4:0] h_12_fu_465_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond2_fu_459_p2;
wire   [1:0] m_6_fu_477_p2;
reg   [1:0] m_6_reg_707;
wire    ap_CS_fsm_state9;
wire   [8:0] tmp_134_fu_487_p2;
reg   [8:0] tmp_134_reg_712;
wire   [0:0] exitcond1_fu_471_p2;
wire   [9:0] tmp_136_fu_512_p2;
reg   [9:0] tmp_136_reg_718;
reg   [12:0] output_addr_6_reg_724;
wire   [8:0] tmp_135_fu_536_p2;
reg   [8:0] tmp_135_reg_729;
wire    ap_CS_fsm_state10;
wire   [13:0] tmp_138_fu_559_p2;
reg   [13:0] tmp_138_reg_734;
wire   [1:0] n_6_fu_571_p2;
reg   [1:0] n_6_reg_742;
wire    ap_CS_fsm_state11;
wire   [8:0] tmp_139_fu_581_p2;
reg   [8:0] tmp_139_reg_747;
wire   [0:0] exitcond_fu_565_p2;
wire   [13:0] tmp_140_fu_606_p2;
reg   [13:0] tmp_140_reg_752;
wire    ap_CS_fsm_state12;
reg   [31:0] weight_load_reg_767;
wire    ap_CS_fsm_state13;
reg   [31:0] input_load_reg_772;
wire   [31:0] grp_fu_227_p2;
reg   [31:0] tmp_78_reg_777;
wire    ap_CS_fsm_state17;
wire   [31:0] grp_fu_221_p2;
wire    ap_CS_fsm_state22;
reg   [31:0] output_load_reg_787;
wire    ap_CS_fsm_state23;
wire   [4:0] w_12_fu_619_p2;
reg   [4:0] w_12_reg_792;
wire    ap_CS_fsm_state24;
reg   [31:0] tmp_71_reg_797;
wire    ap_CS_fsm_state28;
reg   [4:0] co_reg_106;
reg   [4:0] h_reg_117;
reg   [4:0] w_reg_129;
wire    ap_CS_fsm_state5;
reg   [4:0] co1_reg_140;
reg   [4:0] h2_reg_151;
reg   [4:0] w3_reg_163;
wire    ap_CS_fsm_state29;
reg   [31:0] sum_reg_175;
reg   [1:0] m_reg_187;
reg   [31:0] sum_1_reg_198;
reg   [1:0] n_reg_210;
wire   [63:0] tmp_fu_243_p1;
wire   [63:0] tmp_175_cast_fu_346_p1;
wire   [63:0] tmp_176_cast_fu_526_p1;
wire   [63:0] tmp_184_cast_fu_611_p1;
wire   [63:0] tmp_185_cast_fu_615_p1;
reg   [31:0] grp_fu_221_p0;
reg   [31:0] grp_fu_221_p1;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state14;
wire   [8:0] tmp_s_fu_248_p3;
wire   [5:0] tmp_121_fu_260_p3;
wire   [9:0] p_shl1_cast_fu_268_p1;
wire   [9:0] p_shl_cast_fu_256_p1;
wire   [9:0] tmp_67_cast_fu_284_p1;
wire   [9:0] tmp_128_fu_288_p2;
wire   [10:0] tmp_118_fu_301_p3;
wire   [13:0] p_shl2_cast_fu_293_p3;
wire   [13:0] p_shl3_cast_fu_309_p1;
wire   [13:0] tmp_69_cast_fu_325_p1;
wire   [8:0] tmp_123_fu_366_p3;
wire   [5:0] tmp_124_fu_378_p3;
wire   [9:0] p_shl6_cast_fu_386_p1;
wire   [9:0] p_shl5_cast_fu_374_p1;
wire   [6:0] tmp_126_fu_396_p3;
wire   [7:0] p_shl4_cast_fu_404_p1;
wire   [7:0] tmp_cast_fu_362_p1;
wire   [7:0] tmp_127_fu_408_p2;
wire   [9:0] tmp_68_cast_fu_424_p1;
wire   [9:0] tmp_130_fu_428_p2;
wire   [10:0] tmp_119_fu_441_p3;
wire   [13:0] p_shl7_cast_fu_433_p3;
wire   [13:0] p_shl8_cast_fu_449_p1;
wire   [8:0] tmp_72_cast_fu_483_p1;
wire   [1:0] tmp1_fu_492_p2;
wire  signed [4:0] tmp1_cast_fu_498_p1;
wire   [4:0] tmp_73_fu_502_p2;
wire   [9:0] tmp_74_cast_fu_508_p1;
wire   [13:0] tmp_70_cast_fu_517_p1;
wire   [13:0] tmp_133_fu_521_p2;
wire   [8:0] tmp_120_fu_531_p2;
wire   [10:0] tmp_137_fu_548_p3;
wire   [13:0] p_shl10_cast_fu_555_p1;
wire   [13:0] p_shl9_cast_fu_541_p3;
wire   [8:0] tmp_75_cast_fu_577_p1;
wire   [1:0] tmp2_fu_586_p2;
wire  signed [4:0] tmp2_cast_fu_592_p1;
wire   [4:0] tmp_76_fu_596_p2;
wire   [13:0] tmp_77_cast_fu_602_p1;
reg   [28:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 29'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_x_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_221_p0),
    .din1(grp_fu_221_p1),
    .ce(1'b1),
    .dout(grp_fu_221_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_x_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_767),
    .din1(input_load_reg_772),
    .ce(1'b1),
    .dout(grp_fu_227_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_231_p2 == 1'd1))) begin
        co1_reg_140 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond3_fu_418_p2))) begin
        co1_reg_140 <= co_12_reg_672;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond6_fu_278_p2 == 1'd1))) begin
        co_reg_106 <= co_11_reg_628;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_106 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond4_fu_350_p2))) begin
        h2_reg_151 <= 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond2_fu_459_p2))) begin
        h2_reg_151 <= h_12_fu_465_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_231_p2 == 1'd0))) begin
        h_reg_117 <= 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond5_fu_319_p2 == 1'd1))) begin
        h_reg_117 <= h_11_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond2_fu_459_p2))) begin
        m_reg_187 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == exitcond_fu_565_p2))) begin
        m_reg_187 <= m_6_reg_707;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        n_reg_210 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        n_reg_210 <= n_6_reg_742;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sum_1_reg_198 <= sum_reg_175;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        sum_1_reg_198 <= grp_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond2_fu_459_p2))) begin
        sum_reg_175 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == exitcond_fu_565_p2))) begin
        sum_reg_175 <= sum_1_reg_198;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond3_fu_418_p2))) begin
        w3_reg_163 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        w3_reg_163 <= w_12_reg_792;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond6_fu_278_p2))) begin
        w_reg_129 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_reg_129 <= w_11_reg_659;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_231_p2 == 1'd0))) begin
        bias_addr_reg_638 <= tmp_fu_243_p1;
        tmp_122_reg_633[9 : 1] <= tmp_122_fu_272_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_11_reg_628 <= co_11_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        co_12_reg_672 <= co_12_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        input_load_reg_772 <= input_r_q0;
        weight_load_reg_767 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        m_6_reg_707 <= m_6_fu_477_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        n_6_reg_742 <= n_6_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond1_fu_471_p2))) begin
        output_addr_6_reg_724 <= tmp_176_cast_fu_526_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        output_load_reg_787 <= output_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond4_fu_350_p2))) begin
        tmp_125_reg_677[9 : 1] <= tmp_125_fu_390_p2[9 : 1];
        tmp_166_cast_reg_683 <= tmp_166_cast_fu_414_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond6_fu_278_p2))) begin
        tmp_129_reg_646[13 : 1] <= tmp_129_fu_313_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond3_fu_418_p2))) begin
        tmp_131_reg_691[13 : 1] <= tmp_131_fu_453_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond5_fu_319_p2))) begin
        tmp_132_reg_654 <= tmp_132_fu_329_p2;
        w_11_reg_659 <= w_11_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond1_fu_471_p2))) begin
        tmp_134_reg_712 <= tmp_134_fu_487_p2;
        tmp_136_reg_718 <= tmp_136_fu_512_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_135_reg_729 <= tmp_135_fu_536_p2;
        tmp_138_reg_734[13 : 1] <= tmp_138_fu_559_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'd0 == exitcond_fu_565_p2))) begin
        tmp_139_reg_747 <= tmp_139_fu_581_p2;
        tmp_140_reg_752 <= tmp_140_fu_606_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_71_reg_797 <= grp_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_78_reg_777 <= grp_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        w_12_reg_792 <= w_12_fu_619_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond4_fu_350_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond4_fu_350_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_221_p0 = output_load_reg_787;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_221_p0 = sum_1_reg_198;
    end else begin
        grp_fu_221_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_221_p1 = sum_reg_175;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_221_p1 = tmp_78_reg_777;
    end else begin
        grp_fu_221_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        output_r_address0 = output_addr_6_reg_724;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_address0 = tmp_176_cast_fu_526_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_address0 = tmp_175_cast_fu_346_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state29))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        output_r_d0 = tmp_71_reg_797;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_d0 = bias_q0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state29))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_231_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond6_fu_278_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond5_fu_319_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond4_fu_350_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond3_fu_418_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond2_fu_459_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond1_fu_471_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == exitcond_fu_565_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_638;

assign co_11_fu_237_p2 = (co_reg_106 + 5'd1);

assign co_12_fu_356_p2 = (co1_reg_140 + 5'd1);

assign exitcond1_fu_471_p2 = ((m_reg_187 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_459_p2 = ((w3_reg_163 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond3_fu_418_p2 = ((h2_reg_151 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond4_fu_350_p2 = ((co1_reg_140 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond5_fu_319_p2 = ((w_reg_129 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond6_fu_278_p2 = ((h_reg_117 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond7_fu_231_p2 = ((co_reg_106 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond_fu_565_p2 = ((n_reg_210 == 2'd3) ? 1'b1 : 1'b0);

assign h_11_fu_340_p2 = (h_reg_117 + 5'd1);

assign h_12_fu_465_p2 = (h2_reg_151 + 5'd1);

assign input_r_address0 = tmp_185_cast_fu_615_p1;

assign m_6_fu_477_p2 = (m_reg_187 + 2'd1);

assign n_6_fu_571_p2 = (n_reg_210 + 2'd1);

assign p_shl10_cast_fu_555_p1 = tmp_137_fu_548_p3;

assign p_shl1_cast_fu_268_p1 = tmp_121_fu_260_p3;

assign p_shl2_cast_fu_293_p3 = {{tmp_128_fu_288_p2}, {4'd0}};

assign p_shl3_cast_fu_309_p1 = tmp_118_fu_301_p3;

assign p_shl4_cast_fu_404_p1 = tmp_126_fu_396_p3;

assign p_shl5_cast_fu_374_p1 = tmp_123_fu_366_p3;

assign p_shl6_cast_fu_386_p1 = tmp_124_fu_378_p3;

assign p_shl7_cast_fu_433_p3 = {{tmp_130_fu_428_p2}, {4'd0}};

assign p_shl8_cast_fu_449_p1 = tmp_119_fu_441_p3;

assign p_shl9_cast_fu_541_p3 = {{tmp_136_reg_718}, {4'd0}};

assign p_shl_cast_fu_256_p1 = tmp_s_fu_248_p3;

assign tmp1_cast_fu_498_p1 = $signed(tmp1_fu_492_p2);

assign tmp1_fu_492_p2 = ($signed(2'd3) + $signed(m_reg_187));

assign tmp2_cast_fu_592_p1 = $signed(tmp2_fu_586_p2);

assign tmp2_fu_586_p2 = ($signed(n_reg_210) + $signed(2'd3));

assign tmp_118_fu_301_p3 = {{tmp_128_fu_288_p2}, {1'd0}};

assign tmp_119_fu_441_p3 = {{tmp_130_fu_428_p2}, {1'd0}};

assign tmp_120_fu_531_p2 = tmp_134_reg_712 << 9'd2;

assign tmp_121_fu_260_p3 = {{co_reg_106}, {1'd0}};

assign tmp_122_fu_272_p2 = (p_shl1_cast_fu_268_p1 + p_shl_cast_fu_256_p1);

assign tmp_123_fu_366_p3 = {{co1_reg_140}, {4'd0}};

assign tmp_124_fu_378_p3 = {{co1_reg_140}, {1'd0}};

assign tmp_125_fu_390_p2 = (p_shl6_cast_fu_386_p1 + p_shl5_cast_fu_374_p1);

assign tmp_126_fu_396_p3 = {{co1_reg_140}, {2'd0}};

assign tmp_127_fu_408_p2 = (p_shl4_cast_fu_404_p1 - tmp_cast_fu_362_p1);

assign tmp_128_fu_288_p2 = (tmp_67_cast_fu_284_p1 + tmp_122_reg_633);

assign tmp_129_fu_313_p2 = (p_shl2_cast_fu_293_p3 + p_shl3_cast_fu_309_p1);

assign tmp_130_fu_428_p2 = (tmp_68_cast_fu_424_p1 + tmp_125_reg_677);

assign tmp_131_fu_453_p2 = (p_shl7_cast_fu_433_p3 + p_shl8_cast_fu_449_p1);

assign tmp_132_fu_329_p2 = (tmp_129_reg_646 + tmp_69_cast_fu_325_p1);

assign tmp_133_fu_521_p2 = (tmp_131_reg_691 + tmp_70_cast_fu_517_p1);

assign tmp_134_fu_487_p2 = ($signed(tmp_166_cast_reg_683) + $signed(tmp_72_cast_fu_483_p1));

assign tmp_135_fu_536_p2 = (tmp_120_fu_531_p2 - tmp_134_reg_712);

assign tmp_136_fu_512_p2 = (tmp_125_reg_677 + tmp_74_cast_fu_508_p1);

assign tmp_137_fu_548_p3 = {{tmp_136_reg_718}, {1'd0}};

assign tmp_138_fu_559_p2 = (p_shl10_cast_fu_555_p1 + p_shl9_cast_fu_541_p3);

assign tmp_139_fu_581_p2 = (tmp_135_reg_729 + tmp_75_cast_fu_577_p1);

assign tmp_140_fu_606_p2 = (tmp_138_reg_734 + tmp_77_cast_fu_602_p1);

assign tmp_166_cast_fu_414_p1 = $signed(tmp_127_fu_408_p2);

assign tmp_175_cast_fu_346_p1 = tmp_132_reg_654;

assign tmp_176_cast_fu_526_p1 = tmp_133_fu_521_p2;

assign tmp_184_cast_fu_611_p1 = tmp_139_reg_747;

assign tmp_185_cast_fu_615_p1 = tmp_140_reg_752;

assign tmp_67_cast_fu_284_p1 = h_reg_117;

assign tmp_68_cast_fu_424_p1 = h2_reg_151;

assign tmp_69_cast_fu_325_p1 = w_reg_129;

assign tmp_70_cast_fu_517_p1 = w3_reg_163;

assign tmp_72_cast_fu_483_p1 = m_reg_187;

assign tmp_73_fu_502_p2 = ($signed(h2_reg_151) + $signed(tmp1_cast_fu_498_p1));

assign tmp_74_cast_fu_508_p1 = tmp_73_fu_502_p2;

assign tmp_75_cast_fu_577_p1 = n_reg_210;

assign tmp_76_fu_596_p2 = ($signed(w3_reg_163) + $signed(tmp2_cast_fu_592_p1));

assign tmp_77_cast_fu_602_p1 = tmp_76_fu_596_p2;

assign tmp_cast_fu_362_p1 = co1_reg_140;

assign tmp_fu_243_p1 = co_reg_106;

assign tmp_s_fu_248_p3 = {{co_reg_106}, {4'd0}};

assign w_11_fu_334_p2 = (w_reg_129 + 5'd1);

assign w_12_fu_619_p2 = (w3_reg_163 + 5'd1);

assign weight_address0 = tmp_184_cast_fu_611_p1;

always @ (posedge ap_clk) begin
    tmp_122_reg_633[0] <= 1'b0;
    tmp_129_reg_646[0] <= 1'b0;
    tmp_125_reg_677[0] <= 1'b0;
    tmp_131_reg_691[0] <= 1'b0;
    tmp_138_reg_734[0] <= 1'b0;
end

endmodule //subconv_3x3_16_no_re
