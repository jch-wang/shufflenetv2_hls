// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv1_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0
);

parameter    ap_ST_fsm_state1 = 36'd1;
parameter    ap_ST_fsm_state2 = 36'd2;
parameter    ap_ST_fsm_state3 = 36'd4;
parameter    ap_ST_fsm_state4 = 36'd8;
parameter    ap_ST_fsm_state5 = 36'd16;
parameter    ap_ST_fsm_state6 = 36'd32;
parameter    ap_ST_fsm_state7 = 36'd64;
parameter    ap_ST_fsm_state8 = 36'd128;
parameter    ap_ST_fsm_state9 = 36'd256;
parameter    ap_ST_fsm_state10 = 36'd512;
parameter    ap_ST_fsm_state11 = 36'd1024;
parameter    ap_ST_fsm_state12 = 36'd2048;
parameter    ap_ST_fsm_state13 = 36'd4096;
parameter    ap_ST_fsm_state14 = 36'd8192;
parameter    ap_ST_fsm_state15 = 36'd16384;
parameter    ap_ST_fsm_state16 = 36'd32768;
parameter    ap_ST_fsm_state17 = 36'd65536;
parameter    ap_ST_fsm_state18 = 36'd131072;
parameter    ap_ST_fsm_state19 = 36'd262144;
parameter    ap_ST_fsm_state20 = 36'd524288;
parameter    ap_ST_fsm_state21 = 36'd1048576;
parameter    ap_ST_fsm_state22 = 36'd2097152;
parameter    ap_ST_fsm_state23 = 36'd4194304;
parameter    ap_ST_fsm_state24 = 36'd8388608;
parameter    ap_ST_fsm_state25 = 36'd16777216;
parameter    ap_ST_fsm_state26 = 36'd33554432;
parameter    ap_ST_fsm_state27 = 36'd67108864;
parameter    ap_ST_fsm_state28 = 36'd134217728;
parameter    ap_ST_fsm_state29 = 36'd268435456;
parameter    ap_ST_fsm_state30 = 36'd536870912;
parameter    ap_ST_fsm_state31 = 36'd1073741824;
parameter    ap_ST_fsm_state32 = 36'd2147483648;
parameter    ap_ST_fsm_state33 = 36'd4294967296;
parameter    ap_ST_fsm_state34 = 36'd8589934592;
parameter    ap_ST_fsm_state35 = 36'd17179869184;
parameter    ap_ST_fsm_state36 = 36'd34359738368;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [9:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [4:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [14:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg weight_ce0;
reg bias_ce0;
reg[14:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [35:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_321;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state34;
wire   [4:0] co_43_fu_333_p2;
reg   [4:0] co_43_reg_963;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_439_fu_368_p2;
reg   [10:0] tmp_439_reg_968;
wire   [0:0] exitcond11_fu_327_p2;
reg   [4:0] bias_addr_reg_973;
wire   [15:0] tmp_446_fu_409_p2;
reg   [15:0] tmp_446_reg_981;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond10_fu_374_p2;
wire   [15:0] tmp_452_fu_425_p2;
reg   [15:0] tmp_452_reg_989;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond9_fu_415_p2;
wire   [5:0] w_42_fu_430_p2;
reg   [5:0] w_42_reg_994;
wire   [5:0] h_43_fu_436_p2;
wire   [4:0] co_44_fu_452_p2;
reg   [4:0] co_44_reg_1007;
wire    ap_CS_fsm_state6;
wire  signed [8:0] tmp_587_cast_fu_480_p1;
reg  signed [8:0] tmp_587_cast_reg_1012;
wire   [0:0] exitcond8_fu_446_p2;
wire   [10:0] tmp_444_fu_508_p2;
reg   [10:0] tmp_444_reg_1017;
wire   [15:0] tmp_451_fu_549_p2;
reg   [15:0] tmp_451_reg_1025;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond7_fu_514_p2;
wire   [5:0] h_44_fu_561_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond6_fu_555_p2;
wire   [1:0] ci_8_fu_573_p2;
reg   [1:0] ci_8_reg_1041;
wire    ap_CS_fsm_state9;
wire   [7:0] tmp_459_fu_607_p2;
reg   [7:0] tmp_459_reg_1046;
wire   [0:0] exitcond5_fu_567_p2;
wire   [63:0] tmp_461_fu_634_p2;
reg   [63:0] tmp_461_reg_1051;
reg   [14:0] output_addr_16_reg_1056;
wire   [1:0] m_7_fu_660_p2;
reg   [1:0] m_7_reg_1064;
wire    ap_CS_fsm_state10;
wire   [10:0] tmp_463_fu_691_p2;
reg   [10:0] tmp_463_reg_1069;
wire   [0:0] exitcond4_fu_654_p2;
wire   [7:0] tmp_464_fu_717_p2;
reg   [7:0] tmp_464_reg_1074;
wire   [12:0] tmp_465_fu_740_p2;
reg   [12:0] tmp_465_reg_1080;
wire    ap_CS_fsm_state11;
wire   [1:0] n_7_fu_752_p2;
reg   [1:0] n_7_reg_1088;
wire    ap_CS_fsm_state12;
wire   [10:0] tmp_466_fu_762_p2;
reg   [10:0] tmp_466_reg_1093;
wire   [0:0] exitcond3_fu_746_p2;
wire   [12:0] tmp_467_fu_787_p2;
reg   [12:0] tmp_467_reg_1098;
wire    ap_CS_fsm_state13;
reg   [31:0] weight_load_reg_1113;
wire    ap_CS_fsm_state14;
reg   [31:0] input_load_reg_1118;
wire   [31:0] grp_fu_312_p2;
reg   [31:0] tmp_158_reg_1123;
wire    ap_CS_fsm_state18;
wire   [31:0] grp_fu_306_p2;
wire    ap_CS_fsm_state23;
wire   [5:0] w_43_fu_800_p2;
reg   [5:0] w_43_reg_1133;
wire    ap_CS_fsm_state26;
reg   [31:0] tmp_150_reg_1138;
wire    ap_CS_fsm_state29;
wire   [4:0] co_45_fu_812_p2;
reg   [4:0] co_45_reg_1146;
wire    ap_CS_fsm_state31;
wire   [10:0] tmp_449_fu_842_p2;
reg   [10:0] tmp_449_reg_1151;
wire   [0:0] exitcond2_fu_806_p2;
wire   [15:0] tmp_454_fu_883_p2;
reg   [15:0] tmp_454_reg_1159;
wire    ap_CS_fsm_state32;
wire   [0:0] exitcond1_fu_848_p2;
reg   [14:0] output_addr_15_reg_1167;
wire    ap_CS_fsm_state33;
wire   [0:0] exitcond_fu_889_p2;
wire   [5:0] h_45_fu_909_p2;
wire   [0:0] notlhs_fu_933_p2;
reg   [0:0] notlhs_reg_1177;
wire    ap_CS_fsm_state35;
wire   [0:0] notrhs_fu_939_p2;
reg   [0:0] notrhs_reg_1182;
wire   [0:0] tmp_39_fu_316_p2;
reg   [0:0] tmp_39_reg_1187;
wire   [5:0] w_44_fu_954_p2;
wire    ap_CS_fsm_state36;
reg   [4:0] co_reg_133;
reg   [5:0] h_reg_144;
reg   [5:0] w_reg_156;
wire    ap_CS_fsm_state5;
reg   [4:0] co1_reg_167;
reg   [5:0] h2_reg_178;
reg   [5:0] w3_reg_190;
wire    ap_CS_fsm_state30;
reg   [1:0] ci_reg_202;
reg   [31:0] sum_reg_213;
reg   [1:0] m_reg_225;
reg   [31:0] sum_1_reg_236;
reg   [31:0] sum_2_reg_248;
reg   [1:0] n_reg_260;
reg   [4:0] co4_reg_271;
reg   [5:0] h5_reg_282;
reg   [5:0] w6_reg_294;
wire   [63:0] tmp_fu_339_p1;
wire   [63:0] tmp_602_cast_fu_442_p1;
wire   [63:0] tmp_608_cast_fu_649_p1;
wire   [63:0] tmp_622_cast_fu_792_p1;
wire   [63:0] tmp_623_cast_fu_796_p1;
wire   [63:0] tmp_607_cast_fu_904_p1;
wire   [0:0] tmp_40_fu_949_p2;
reg   [31:0] grp_fu_306_p0;
reg   [31:0] grp_fu_306_p1;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state15;
wire   [9:0] tmp_s_fu_344_p3;
wire   [5:0] tmp_438_fu_356_p3;
wire   [10:0] p_shl1_cast_fu_364_p1;
wire   [10:0] p_shl_cast_fu_352_p1;
wire   [10:0] tmp_144_cast_fu_380_p1;
wire   [10:0] tmp_445_fu_384_p2;
wire   [11:0] tmp_355_fu_397_p3;
wire   [15:0] p_shl2_cast_fu_389_p3;
wire   [15:0] p_shl3_cast_fu_405_p1;
wire   [15:0] tmp_146_cast_fu_421_p1;
wire   [6:0] tmp_440_fu_462_p3;
wire   [7:0] p_shl6_cast_fu_470_p1;
wire   [7:0] tmp_cast_fu_458_p1;
wire   [7:0] tmp_441_fu_474_p2;
wire   [9:0] tmp_442_fu_484_p3;
wire   [5:0] tmp_443_fu_496_p3;
wire   [10:0] p_shl5_cast_fu_504_p1;
wire   [10:0] p_shl4_cast_fu_492_p1;
wire   [10:0] tmp_145_cast_fu_520_p1;
wire   [10:0] tmp_450_fu_524_p2;
wire   [11:0] tmp_356_fu_537_p3;
wire   [15:0] p_shl7_cast_fu_529_p3;
wire   [15:0] p_shl8_cast_fu_545_p1;
wire   [6:0] tmp_457_fu_583_p3;
wire   [2:0] tmp_458_fu_595_p3;
wire   [7:0] p_shl11_cast_fu_603_p1;
wire   [7:0] p_shl10_cast_fu_591_p1;
wire   [8:0] tmp_151_cast_fu_579_p1;
wire   [8:0] tmp_460_fu_613_p2;
wire   [10:0] tmp_359_fu_622_p3;
wire  signed [63:0] p_shl9_fu_630_p1;
wire  signed [63:0] tmp_612_cast_fu_618_p1;
wire   [15:0] tmp_149_cast_fu_640_p1;
wire   [15:0] tmp_456_fu_644_p2;
wire   [63:0] tmp_152_fu_666_p1;
wire   [63:0] tmp_462_fu_670_p2;
wire   [8:0] tmp_361_fu_679_p1;
wire   [10:0] p_shl14_cast_fu_683_p3;
wire   [10:0] tmp_360_fu_675_p1;
wire   [1:0] tmp1_fu_697_p2;
wire  signed [5:0] tmp1_cast_fu_703_p1;
wire   [5:0] tmp_153_fu_707_p2;
wire   [7:0] tmp_154_cast_fu_713_p1;
wire   [8:0] tmp_362_fu_729_p3;
wire   [12:0] p_shl13_cast_fu_736_p1;
wire   [12:0] p_shl12_cast_fu_722_p3;
wire   [10:0] tmp_155_cast_fu_758_p1;
wire   [1:0] tmp2_fu_767_p2;
wire  signed [5:0] tmp2_cast_fu_773_p1;
wire   [5:0] tmp_156_fu_777_p2;
wire   [12:0] tmp_157_cast_fu_783_p1;
wire   [9:0] tmp_447_fu_818_p3;
wire   [5:0] tmp_448_fu_830_p3;
wire   [10:0] p_shl16_cast_fu_838_p1;
wire   [10:0] p_shl15_cast_fu_826_p1;
wire   [10:0] tmp_147_cast_fu_854_p1;
wire   [10:0] tmp_453_fu_858_p2;
wire   [11:0] tmp_357_fu_871_p3;
wire   [15:0] p_shl17_cast_fu_863_p3;
wire   [15:0] p_shl18_cast_fu_879_p1;
wire   [15:0] tmp_148_cast_fu_895_p1;
wire   [15:0] tmp_455_fu_899_p2;
wire   [31:0] output_load_to_int_fu_915_p1;
wire   [7:0] tmp_36_fu_919_p4;
wire   [22:0] tmp_358_fu_929_p1;
wire   [0:0] tmp_38_fu_945_p2;
reg   [35:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 36'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_306_p0),
    .din1(grp_fu_306_p1),
    .ce(1'b1),
    .dout(grp_fu_306_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_1113),
    .din1(input_load_reg_1118),
    .ce(1'b1),
    .dout(grp_fu_312_p2)
);

ShuffleNetV2_fcmpdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
ShuffleNetV2_fcmpdEe_U3(
    .din0(reg_321),
    .din1(32'd0),
    .opcode(5'd4),
    .dout(tmp_39_fu_316_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond6_fu_555_p2))) begin
        ci_reg_202 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond4_fu_654_p2))) begin
        ci_reg_202 <= ci_8_reg_1041;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond11_fu_327_p2 == 1'd1))) begin
        co1_reg_167 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond7_fu_514_p2))) begin
        co1_reg_167 <= co_44_reg_1007;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond8_fu_446_p2))) begin
        co4_reg_271 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state32) & (1'd1 == exitcond1_fu_848_p2))) begin
        co4_reg_271 <= co_45_reg_1146;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond10_fu_374_p2 == 1'd1))) begin
        co_reg_133 <= co_43_reg_963;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_133 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond8_fu_446_p2))) begin
        h2_reg_178 <= 6'd1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond6_fu_555_p2))) begin
        h2_reg_178 <= h_44_fu_561_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (1'd0 == exitcond2_fu_806_p2))) begin
        h5_reg_282 <= 6'd1;
    end else if (((1'b1 == ap_CS_fsm_state33) & (1'd1 == exitcond_fu_889_p2))) begin
        h5_reg_282 <= h_45_fu_909_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond11_fu_327_p2 == 1'd0))) begin
        h_reg_144 <= 6'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond9_fu_415_p2 == 1'd1))) begin
        h_reg_144 <= h_43_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == exitcond3_fu_746_p2))) begin
        m_reg_225 <= m_7_reg_1064;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond5_fu_567_p2))) begin
        m_reg_225 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        n_reg_260 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        n_reg_260 <= n_7_reg_1088;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == exitcond3_fu_746_p2))) begin
        sum_1_reg_236 <= sum_2_reg_248;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond5_fu_567_p2))) begin
        sum_1_reg_236 <= sum_reg_213;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sum_2_reg_248 <= sum_1_reg_236;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        sum_2_reg_248 <= grp_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond6_fu_555_p2))) begin
        sum_reg_213 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond4_fu_654_p2))) begin
        sum_reg_213 <= sum_1_reg_236;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond7_fu_514_p2))) begin
        w3_reg_190 <= 6'd1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        w3_reg_190 <= w_43_reg_1133;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) & (1'd0 == exitcond1_fu_848_p2))) begin
        w6_reg_294 <= 6'd1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        w6_reg_294 <= w_44_fu_954_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond10_fu_374_p2))) begin
        w_reg_156 <= 6'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_reg_156 <= w_42_reg_994;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond11_fu_327_p2 == 1'd0))) begin
        bias_addr_reg_973 <= tmp_fu_339_p1;
        tmp_439_reg_968[10 : 1] <= tmp_439_fu_368_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ci_8_reg_1041 <= ci_8_fu_573_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_43_reg_963 <= co_43_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        co_44_reg_1007 <= co_44_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        co_45_reg_1146 <= co_45_fu_812_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        input_load_reg_1118 <= input_r_q0;
        weight_load_reg_1113 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        m_7_reg_1064 <= m_7_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        n_7_reg_1088 <= n_7_fu_752_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        notlhs_reg_1177 <= notlhs_fu_933_p2;
        notrhs_reg_1182 <= notrhs_fu_939_p2;
        tmp_39_reg_1187 <= tmp_39_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (1'd0 == exitcond_fu_889_p2))) begin
        output_addr_15_reg_1167 <= tmp_607_cast_fu_904_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond5_fu_567_p2))) begin
        output_addr_16_reg_1056 <= tmp_608_cast_fu_649_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state34))) begin
        reg_321 <= output_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        tmp_150_reg_1138 <= grp_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_158_reg_1123 <= grp_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond8_fu_446_p2))) begin
        tmp_444_reg_1017[10 : 1] <= tmp_444_fu_508_p2[10 : 1];
        tmp_587_cast_reg_1012 <= tmp_587_cast_fu_480_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond10_fu_374_p2))) begin
        tmp_446_reg_981[15 : 1] <= tmp_446_fu_409_p2[15 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (1'd0 == exitcond2_fu_806_p2))) begin
        tmp_449_reg_1151[10 : 1] <= tmp_449_fu_842_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond7_fu_514_p2))) begin
        tmp_451_reg_1025[15 : 1] <= tmp_451_fu_549_p2[15 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond9_fu_415_p2))) begin
        tmp_452_reg_989 <= tmp_452_fu_425_p2;
        w_42_reg_994 <= w_42_fu_430_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) & (1'd0 == exitcond1_fu_848_p2))) begin
        tmp_454_reg_1159[15 : 1] <= tmp_454_fu_883_p2[15 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond5_fu_567_p2))) begin
        tmp_459_reg_1046[7 : 1] <= tmp_459_fu_607_p2[7 : 1];
        tmp_461_reg_1051 <= tmp_461_fu_634_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd0 == exitcond4_fu_654_p2))) begin
        tmp_463_reg_1069 <= tmp_463_fu_691_p2;
        tmp_464_reg_1074 <= tmp_464_fu_717_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_465_reg_1080[12 : 1] <= tmp_465_fu_740_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd0 == exitcond3_fu_746_p2))) begin
        tmp_466_reg_1093 <= tmp_466_fu_762_p2;
        tmp_467_reg_1098 <= tmp_467_fu_787_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        w_43_reg_1133 <= w_43_fu_800_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state31) & (1'd1 == exitcond2_fu_806_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) & (1'd1 == exitcond2_fu_806_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_306_p0 = reg_321;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_306_p0 = sum_2_reg_248;
    end else begin
        grp_fu_306_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_306_p1 = sum_reg_213;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_306_p1 = tmp_158_reg_1123;
    end else begin
        grp_fu_306_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        output_r_address0 = output_addr_15_reg_1167;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        output_r_address0 = tmp_607_cast_fu_904_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        output_r_address0 = output_addr_16_reg_1056;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_address0 = tmp_608_cast_fu_649_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_address0 = tmp_602_cast_fu_442_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state30))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        output_r_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        output_r_d0 = tmp_150_reg_1138;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_d0 = bias_q0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state30) | ((1'b1 == ap_CS_fsm_state36) & (1'd1 == tmp_40_fu_949_p2)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond11_fu_327_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond10_fu_374_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond9_fu_415_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond8_fu_446_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond7_fu_514_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond6_fu_555_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond5_fu_567_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond4_fu_654_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == exitcond3_fu_746_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (1'd1 == exitcond2_fu_806_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (1'd1 == exitcond1_fu_848_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (1'd1 == exitcond_fu_889_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_973;

assign ci_8_fu_573_p2 = (ci_reg_202 + 2'd1);

assign co_43_fu_333_p2 = (co_reg_133 + 5'd1);

assign co_44_fu_452_p2 = (co1_reg_167 + 5'd1);

assign co_45_fu_812_p2 = (co4_reg_271 + 5'd1);

assign exitcond10_fu_374_p2 = ((h_reg_144 == 6'd33) ? 1'b1 : 1'b0);

assign exitcond11_fu_327_p2 = ((co_reg_133 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond1_fu_848_p2 = ((h5_reg_282 == 6'd33) ? 1'b1 : 1'b0);

assign exitcond2_fu_806_p2 = ((co4_reg_271 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond3_fu_746_p2 = ((n_reg_260 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond4_fu_654_p2 = ((m_reg_225 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond5_fu_567_p2 = ((ci_reg_202 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond6_fu_555_p2 = ((w3_reg_190 == 6'd33) ? 1'b1 : 1'b0);

assign exitcond7_fu_514_p2 = ((h2_reg_178 == 6'd33) ? 1'b1 : 1'b0);

assign exitcond8_fu_446_p2 = ((co1_reg_167 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond9_fu_415_p2 = ((w_reg_156 == 6'd33) ? 1'b1 : 1'b0);

assign exitcond_fu_889_p2 = ((w6_reg_294 == 6'd33) ? 1'b1 : 1'b0);

assign h_43_fu_436_p2 = (h_reg_144 + 6'd1);

assign h_44_fu_561_p2 = (h2_reg_178 + 6'd1);

assign h_45_fu_909_p2 = (h5_reg_282 + 6'd1);

assign input_r_address0 = tmp_623_cast_fu_796_p1;

assign m_7_fu_660_p2 = (m_reg_225 + 2'd1);

assign n_7_fu_752_p2 = (n_reg_260 + 2'd1);

assign notlhs_fu_933_p2 = ((tmp_36_fu_919_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_939_p2 = ((tmp_358_fu_929_p1 == 23'd0) ? 1'b1 : 1'b0);

assign output_load_to_int_fu_915_p1 = reg_321;

assign p_shl10_cast_fu_591_p1 = tmp_457_fu_583_p3;

assign p_shl11_cast_fu_603_p1 = tmp_458_fu_595_p3;

assign p_shl12_cast_fu_722_p3 = {{tmp_464_reg_1074}, {5'd0}};

assign p_shl13_cast_fu_736_p1 = tmp_362_fu_729_p3;

assign p_shl14_cast_fu_683_p3 = {{tmp_361_fu_679_p1}, {2'd0}};

assign p_shl15_cast_fu_826_p1 = tmp_447_fu_818_p3;

assign p_shl16_cast_fu_838_p1 = tmp_448_fu_830_p3;

assign p_shl17_cast_fu_863_p3 = {{tmp_453_fu_858_p2}, {5'd0}};

assign p_shl18_cast_fu_879_p1 = tmp_357_fu_871_p3;

assign p_shl1_cast_fu_364_p1 = tmp_438_fu_356_p3;

assign p_shl2_cast_fu_389_p3 = {{tmp_445_fu_384_p2}, {5'd0}};

assign p_shl3_cast_fu_405_p1 = tmp_355_fu_397_p3;

assign p_shl4_cast_fu_492_p1 = tmp_442_fu_484_p3;

assign p_shl5_cast_fu_504_p1 = tmp_443_fu_496_p3;

assign p_shl6_cast_fu_470_p1 = tmp_440_fu_462_p3;

assign p_shl7_cast_fu_529_p3 = {{tmp_450_fu_524_p2}, {5'd0}};

assign p_shl8_cast_fu_545_p1 = tmp_356_fu_537_p3;

assign p_shl9_fu_630_p1 = $signed(tmp_359_fu_622_p3);

assign p_shl_cast_fu_352_p1 = tmp_s_fu_344_p3;

assign tmp1_cast_fu_703_p1 = $signed(tmp1_fu_697_p2);

assign tmp1_fu_697_p2 = ($signed(2'd3) + $signed(m_reg_225));

assign tmp2_cast_fu_773_p1 = $signed(tmp2_fu_767_p2);

assign tmp2_fu_767_p2 = ($signed(n_reg_260) + $signed(2'd3));

assign tmp_144_cast_fu_380_p1 = h_reg_144;

assign tmp_145_cast_fu_520_p1 = h2_reg_178;

assign tmp_146_cast_fu_421_p1 = w_reg_156;

assign tmp_147_cast_fu_854_p1 = h5_reg_282;

assign tmp_148_cast_fu_895_p1 = w6_reg_294;

assign tmp_149_cast_fu_640_p1 = w3_reg_190;

assign tmp_151_cast_fu_579_p1 = ci_reg_202;

assign tmp_152_fu_666_p1 = m_reg_225;

assign tmp_153_fu_707_p2 = ($signed(h2_reg_178) + $signed(tmp1_cast_fu_703_p1));

assign tmp_154_cast_fu_713_p1 = tmp_153_fu_707_p2;

assign tmp_155_cast_fu_758_p1 = n_reg_260;

assign tmp_156_fu_777_p2 = ($signed(w3_reg_190) + $signed(tmp2_cast_fu_773_p1));

assign tmp_157_cast_fu_783_p1 = tmp_156_fu_777_p2;

assign tmp_355_fu_397_p3 = {{tmp_445_fu_384_p2}, {1'd0}};

assign tmp_356_fu_537_p3 = {{tmp_450_fu_524_p2}, {1'd0}};

assign tmp_357_fu_871_p3 = {{tmp_453_fu_858_p2}, {1'd0}};

assign tmp_358_fu_929_p1 = output_load_to_int_fu_915_p1[22:0];

assign tmp_359_fu_622_p3 = {{tmp_460_fu_613_p2}, {2'd0}};

assign tmp_360_fu_675_p1 = tmp_462_fu_670_p2[10:0];

assign tmp_361_fu_679_p1 = tmp_462_fu_670_p2[8:0];

assign tmp_362_fu_729_p3 = {{tmp_464_reg_1074}, {1'd0}};

assign tmp_36_fu_919_p4 = {{output_load_to_int_fu_915_p1[30:23]}};

assign tmp_38_fu_945_p2 = (notrhs_reg_1182 | notlhs_reg_1177);

assign tmp_40_fu_949_p2 = (tmp_38_fu_945_p2 & tmp_39_reg_1187);

assign tmp_438_fu_356_p3 = {{co_reg_133}, {1'd0}};

assign tmp_439_fu_368_p2 = (p_shl1_cast_fu_364_p1 + p_shl_cast_fu_352_p1);

assign tmp_440_fu_462_p3 = {{co1_reg_167}, {2'd0}};

assign tmp_441_fu_474_p2 = (p_shl6_cast_fu_470_p1 - tmp_cast_fu_458_p1);

assign tmp_442_fu_484_p3 = {{co1_reg_167}, {5'd0}};

assign tmp_443_fu_496_p3 = {{co1_reg_167}, {1'd0}};

assign tmp_444_fu_508_p2 = (p_shl5_cast_fu_504_p1 + p_shl4_cast_fu_492_p1);

assign tmp_445_fu_384_p2 = (tmp_144_cast_fu_380_p1 + tmp_439_reg_968);

assign tmp_446_fu_409_p2 = (p_shl2_cast_fu_389_p3 + p_shl3_cast_fu_405_p1);

assign tmp_447_fu_818_p3 = {{co4_reg_271}, {5'd0}};

assign tmp_448_fu_830_p3 = {{co4_reg_271}, {1'd0}};

assign tmp_449_fu_842_p2 = (p_shl16_cast_fu_838_p1 + p_shl15_cast_fu_826_p1);

assign tmp_450_fu_524_p2 = (tmp_145_cast_fu_520_p1 + tmp_444_reg_1017);

assign tmp_451_fu_549_p2 = (p_shl7_cast_fu_529_p3 + p_shl8_cast_fu_545_p1);

assign tmp_452_fu_425_p2 = (tmp_446_reg_981 + tmp_146_cast_fu_421_p1);

assign tmp_453_fu_858_p2 = (tmp_147_cast_fu_854_p1 + tmp_449_reg_1151);

assign tmp_454_fu_883_p2 = (p_shl17_cast_fu_863_p3 + p_shl18_cast_fu_879_p1);

assign tmp_455_fu_899_p2 = (tmp_454_reg_1159 + tmp_148_cast_fu_895_p1);

assign tmp_456_fu_644_p2 = (tmp_451_reg_1025 + tmp_149_cast_fu_640_p1);

assign tmp_457_fu_583_p3 = {{ci_reg_202}, {5'd0}};

assign tmp_458_fu_595_p3 = {{ci_reg_202}, {1'd0}};

assign tmp_459_fu_607_p2 = (p_shl11_cast_fu_603_p1 + p_shl10_cast_fu_591_p1);

assign tmp_460_fu_613_p2 = ($signed(tmp_587_cast_reg_1012) + $signed(tmp_151_cast_fu_579_p1));

assign tmp_461_fu_634_p2 = ($signed(p_shl9_fu_630_p1) - $signed(tmp_612_cast_fu_618_p1));

assign tmp_462_fu_670_p2 = (tmp_461_reg_1051 + tmp_152_fu_666_p1);

assign tmp_463_fu_691_p2 = (p_shl14_cast_fu_683_p3 - tmp_360_fu_675_p1);

assign tmp_464_fu_717_p2 = (tmp_459_reg_1046 + tmp_154_cast_fu_713_p1);

assign tmp_465_fu_740_p2 = (p_shl13_cast_fu_736_p1 + p_shl12_cast_fu_722_p3);

assign tmp_466_fu_762_p2 = (tmp_463_reg_1069 + tmp_155_cast_fu_758_p1);

assign tmp_467_fu_787_p2 = (tmp_465_reg_1080 + tmp_157_cast_fu_783_p1);

assign tmp_587_cast_fu_480_p1 = $signed(tmp_441_fu_474_p2);

assign tmp_602_cast_fu_442_p1 = tmp_452_reg_989;

assign tmp_607_cast_fu_904_p1 = tmp_455_fu_899_p2;

assign tmp_608_cast_fu_649_p1 = tmp_456_fu_644_p2;

assign tmp_612_cast_fu_618_p1 = $signed(tmp_460_fu_613_p2);

assign tmp_622_cast_fu_792_p1 = tmp_466_reg_1093;

assign tmp_623_cast_fu_796_p1 = tmp_467_reg_1098;

assign tmp_cast_fu_458_p1 = co1_reg_167;

assign tmp_fu_339_p1 = co_reg_133;

assign tmp_s_fu_344_p3 = {{co_reg_133}, {5'd0}};

assign w_42_fu_430_p2 = (w_reg_156 + 6'd1);

assign w_43_fu_800_p2 = (w3_reg_190 + 6'd1);

assign w_44_fu_954_p2 = (w6_reg_294 + 6'd1);

assign weight_address0 = tmp_622_cast_fu_792_p1;

always @ (posedge ap_clk) begin
    tmp_439_reg_968[0] <= 1'b0;
    tmp_446_reg_981[0] <= 1'b0;
    tmp_444_reg_1017[0] <= 1'b0;
    tmp_451_reg_1025[0] <= 1'b0;
    tmp_459_reg_1046[0] <= 1'b0;
    tmp_465_reg_1080[0] <= 1'b0;
    tmp_449_reg_1151[0] <= 1'b0;
    tmp_454_reg_1159[0] <= 1'b0;
end

endmodule //conv1_p
