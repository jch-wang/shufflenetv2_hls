// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_16_strid (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_state9 = 27'd256;
parameter    ap_ST_fsm_state10 = 27'd512;
parameter    ap_ST_fsm_state11 = 27'd1024;
parameter    ap_ST_fsm_state12 = 27'd2048;
parameter    ap_ST_fsm_state13 = 27'd4096;
parameter    ap_ST_fsm_state14 = 27'd8192;
parameter    ap_ST_fsm_state15 = 27'd16384;
parameter    ap_ST_fsm_state16 = 27'd32768;
parameter    ap_ST_fsm_state17 = 27'd65536;
parameter    ap_ST_fsm_state18 = 27'd131072;
parameter    ap_ST_fsm_state19 = 27'd262144;
parameter    ap_ST_fsm_state20 = 27'd524288;
parameter    ap_ST_fsm_state21 = 27'd1048576;
parameter    ap_ST_fsm_state22 = 27'd2097152;
parameter    ap_ST_fsm_state23 = 27'd4194304;
parameter    ap_ST_fsm_state24 = 27'd8388608;
parameter    ap_ST_fsm_state25 = 27'd16777216;
parameter    ap_ST_fsm_state26 = 27'd33554432;
parameter    ap_ST_fsm_state27 = 27'd67108864;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [8:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [5:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg weight_ce0;
reg bias_ce0;
reg[12:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] co_9_fu_251_p2;
reg   [5:0] co_9_reg_692;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_98_fu_286_p2;
reg   [9:0] tmp_98_reg_697;
wire   [0:0] exitcond7_fu_245_p2;
reg   [5:0] bias_addr_reg_702;
wire   [13:0] tmp_107_fu_331_p2;
reg   [13:0] tmp_107_reg_710;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond6_fu_292_p2;
wire   [13:0] tmp_111_fu_347_p2;
reg   [13:0] tmp_111_reg_718;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond5_fu_337_p2;
wire   [3:0] w_9_fu_352_p2;
reg   [3:0] w_9_reg_723;
wire   [3:0] h_9_fu_358_p2;
wire   [5:0] co_10_fu_374_p2;
reg   [5:0] co_10_reg_736;
wire    ap_CS_fsm_state6;
wire   [10:0] tmp_101_fu_412_p2;
reg   [10:0] tmp_101_reg_741;
wire   [0:0] exitcond4_fu_368_p2;
wire  signed [9:0] tmp_136_cast_fu_436_p1;
reg  signed [9:0] tmp_136_cast_reg_746;
wire   [9:0] tmp_105_fu_452_p2;
reg   [9:0] tmp_105_reg_751;
wire   [4:0] tmp_54_fu_464_p3;
reg   [4:0] tmp_54_reg_759;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond3_fu_458_p2;
wire   [13:0] tmp_110_fu_505_p2;
reg   [13:0] tmp_110_reg_764;
wire   [4:0] tmp_57_fu_517_p3;
reg   [4:0] tmp_57_reg_772;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond2_fu_511_p2;
wire   [3:0] h_10_fu_525_p2;
wire   [1:0] m_5_fu_537_p2;
reg   [1:0] m_5_reg_785;
wire    ap_CS_fsm_state9;
wire   [9:0] tmp_115_fu_558_p2;
reg   [9:0] tmp_115_reg_790;
wire   [0:0] exitcond1_fu_531_p2;
wire   [14:0] tmp_118_fu_608_p2;
reg   [14:0] tmp_118_reg_795;
reg   [12:0] output_addr_5_reg_800;
wire   [3:0] w_10_fu_628_p2;
reg   [3:0] w_10_reg_805;
wire   [1:0] n_5_fu_640_p2;
reg   [1:0] n_5_reg_813;
wire    ap_CS_fsm_state10;
wire   [0:0] exitcond_fu_634_p2;
reg   [31:0] weight_load_reg_828;
wire    ap_CS_fsm_state11;
reg   [31:0] input_load_reg_833;
wire   [31:0] grp_fu_241_p2;
reg   [31:0] tmp_66_reg_838;
wire    ap_CS_fsm_state15;
wire   [31:0] grp_fu_235_p2;
wire    ap_CS_fsm_state20;
reg   [31:0] output_load_reg_848;
wire    ap_CS_fsm_state21;
reg   [31:0] tmp_59_reg_853;
wire    ap_CS_fsm_state26;
reg   [5:0] co_reg_120;
reg   [3:0] h_reg_131;
reg   [3:0] w_reg_143;
wire    ap_CS_fsm_state5;
reg   [5:0] co1_reg_154;
reg   [3:0] h2_reg_165;
reg   [3:0] w3_reg_177;
wire    ap_CS_fsm_state27;
reg   [31:0] sum_reg_189;
reg   [1:0] m_reg_201;
reg   [31:0] sum_1_reg_212;
reg   [1:0] n_reg_224;
wire   [63:0] tmp_fu_257_p1;
wire   [63:0] tmp_148_cast_fu_364_p1;
wire   [63:0] tmp_149_cast_fu_623_p1;
wire   [63:0] tmp_157_cast_fu_655_p1;
wire   [63:0] tmp_158_cast_fu_684_p1;
reg   [31:0] grp_fu_235_p0;
reg   [31:0] grp_fu_235_p1;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state12;
wire   [8:0] tmp_s_fu_262_p3;
wire   [6:0] tmp_97_fu_274_p3;
wire   [9:0] p_shl1_cast_fu_282_p1;
wire   [9:0] p_shl_cast_fu_270_p1;
wire   [9:0] tmp_53_cast_fu_298_p1;
wire   [9:0] tmp_106_fu_302_p2;
wire   [12:0] tmp_94_fu_307_p3;
wire   [10:0] tmp_95_fu_319_p3;
wire   [13:0] p_shl2_cast_fu_315_p1;
wire   [13:0] p_shl3_cast_fu_327_p1;
wire   [13:0] tmp_56_cast_fu_343_p1;
wire   [9:0] tmp_99_fu_384_p3;
wire   [6:0] tmp_100_fu_396_p3;
wire   [10:0] p_shl8_cast_fu_408_p1;
wire   [10:0] p_shl7_cast_fu_392_p1;
wire   [7:0] tmp_102_fu_418_p3;
wire   [8:0] p_shl6_cast_fu_426_p1;
wire   [8:0] tmp_cast_fu_380_p1;
wire   [8:0] tmp_103_fu_430_p2;
wire   [8:0] tmp_104_fu_440_p3;
wire   [9:0] p_shl8_cast2_fu_404_p1;
wire   [9:0] p_shl4_cast_fu_448_p1;
wire   [9:0] tmp_55_cast_fu_472_p1;
wire   [9:0] tmp_108_fu_476_p2;
wire   [12:0] tmp_96_fu_481_p3;
wire   [10:0] tmp_109_fu_493_p3;
wire   [13:0] p_shl10_cast_fu_501_p1;
wire   [13:0] p_shl9_cast_fu_489_p1;
wire   [9:0] tmp_60_cast_fu_543_p1;
wire   [9:0] tmp_113_fu_547_p2;
wire   [9:0] tmp_114_fu_552_p2;
wire   [1:0] tmp1_fu_564_p2;
wire  signed [4:0] tmp1_cast_fu_570_p1;
wire   [4:0] tmp_61_fu_574_p2;
wire   [10:0] tmp_62_cast_fu_579_p1;
wire   [10:0] tmp_116_fu_583_p2;
wire   [11:0] tmp_117_fu_596_p3;
wire   [14:0] p_shl12_cast_fu_604_p1;
wire   [14:0] p_shl11_cast_fu_588_p3;
wire   [13:0] tmp_58_cast_fu_614_p1;
wire   [13:0] tmp_112_fu_618_p2;
wire   [9:0] tmp_63_cast_fu_646_p1;
wire   [9:0] tmp_119_fu_650_p2;
wire   [1:0] tmp2_fu_660_p2;
wire  signed [4:0] tmp2_cast_fu_666_p1;
wire   [4:0] tmp_64_fu_670_p2;
wire   [14:0] tmp_65_cast_fu_675_p1;
wire   [14:0] tmp_120_fu_679_p2;
reg   [26:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_x_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_235_p0),
    .din1(grp_fu_235_p1),
    .ce(1'b1),
    .dout(grp_fu_235_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_x_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_828),
    .din1(input_load_reg_833),
    .ce(1'b1),
    .dout(grp_fu_241_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_245_p2 == 1'd1))) begin
        co1_reg_154 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond3_fu_458_p2))) begin
        co1_reg_154 <= co_10_reg_736;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond6_fu_292_p2 == 1'd1))) begin
        co_reg_120 <= co_9_reg_692;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_120 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond4_fu_368_p2))) begin
        h2_reg_165 <= 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond2_fu_511_p2))) begin
        h2_reg_165 <= h_10_fu_525_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_245_p2 == 1'd0))) begin
        h_reg_131 <= 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond5_fu_337_p2 == 1'd1))) begin
        h_reg_131 <= h_9_fu_358_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond_fu_634_p2))) begin
        m_reg_201 <= m_5_reg_785;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond2_fu_511_p2))) begin
        m_reg_201 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond1_fu_531_p2))) begin
        n_reg_224 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        n_reg_224 <= n_5_reg_813;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond1_fu_531_p2))) begin
        sum_1_reg_212 <= sum_reg_189;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        sum_1_reg_212 <= grp_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond_fu_634_p2))) begin
        sum_reg_189 <= sum_1_reg_212;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond2_fu_511_p2))) begin
        sum_reg_189 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond3_fu_458_p2))) begin
        w3_reg_177 <= 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        w3_reg_177 <= w_10_reg_805;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond6_fu_292_p2))) begin
        w_reg_143 <= 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_reg_143 <= w_9_reg_723;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_245_p2 == 1'd0))) begin
        bias_addr_reg_702 <= tmp_fu_257_p1;
        tmp_98_reg_697[9 : 1] <= tmp_98_fu_286_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        co_10_reg_736 <= co_10_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_9_reg_692 <= co_9_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_load_reg_833 <= input_r_q0;
        weight_load_reg_828 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        m_5_reg_785 <= m_5_fu_537_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        n_5_reg_813 <= n_5_fu_640_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond1_fu_531_p2))) begin
        output_addr_5_reg_800 <= tmp_149_cast_fu_623_p1;
        w_10_reg_805 <= w_10_fu_628_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        output_load_reg_848 <= output_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond4_fu_368_p2))) begin
        tmp_101_reg_741[10 : 1] <= tmp_101_fu_412_p2[10 : 1];
        tmp_105_reg_751[9 : 1] <= tmp_105_fu_452_p2[9 : 1];
        tmp_136_cast_reg_746 <= tmp_136_cast_fu_436_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond6_fu_292_p2))) begin
        tmp_107_reg_710[13 : 1] <= tmp_107_fu_331_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond3_fu_458_p2))) begin
        tmp_110_reg_764[13 : 1] <= tmp_110_fu_505_p2[13 : 1];
        tmp_54_reg_759[4 : 1] <= tmp_54_fu_464_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond5_fu_337_p2))) begin
        tmp_111_reg_718 <= tmp_111_fu_347_p2;
        w_9_reg_723 <= w_9_fu_352_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond1_fu_531_p2))) begin
        tmp_115_reg_790 <= tmp_115_fu_558_p2;
        tmp_118_reg_795[14 : 1] <= tmp_118_fu_608_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond2_fu_511_p2))) begin
        tmp_57_reg_772[4 : 1] <= tmp_57_fu_517_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_59_reg_853 <= grp_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_66_reg_838 <= grp_fu_241_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond4_fu_368_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond4_fu_368_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_235_p0 = output_load_reg_848;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_235_p0 = sum_1_reg_212;
    end else begin
        grp_fu_235_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_235_p1 = sum_reg_189;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_235_p1 = tmp_66_reg_838;
    end else begin
        grp_fu_235_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        output_r_address0 = output_addr_5_reg_800;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_address0 = tmp_149_cast_fu_623_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_address0 = tmp_148_cast_fu_364_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state27))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        output_r_d0 = tmp_59_reg_853;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_d0 = bias_q0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state27))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_245_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond6_fu_292_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond5_fu_337_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond4_fu_368_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond3_fu_458_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond2_fu_511_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond1_fu_531_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond_fu_634_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_702;

assign co_10_fu_374_p2 = (co1_reg_154 + 6'd1);

assign co_9_fu_251_p2 = (co_reg_120 + 6'd1);

assign exitcond1_fu_531_p2 = ((m_reg_201 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_511_p2 = ((w3_reg_177 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond3_fu_458_p2 = ((h2_reg_165 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond4_fu_368_p2 = ((co1_reg_154 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond5_fu_337_p2 = ((w_reg_143 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond6_fu_292_p2 = ((h_reg_131 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond7_fu_245_p2 = ((co_reg_120 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond_fu_634_p2 = ((n_reg_224 == 2'd3) ? 1'b1 : 1'b0);

assign h_10_fu_525_p2 = (h2_reg_165 + 4'd1);

assign h_9_fu_358_p2 = (h_reg_131 + 4'd1);

assign input_r_address0 = tmp_158_cast_fu_684_p1;

assign m_5_fu_537_p2 = (m_reg_201 + 2'd1);

assign n_5_fu_640_p2 = (n_reg_224 + 2'd1);

assign p_shl10_cast_fu_501_p1 = tmp_109_fu_493_p3;

assign p_shl11_cast_fu_588_p3 = {{tmp_116_fu_583_p2}, {4'd0}};

assign p_shl12_cast_fu_604_p1 = tmp_117_fu_596_p3;

assign p_shl1_cast_fu_282_p1 = tmp_97_fu_274_p3;

assign p_shl2_cast_fu_315_p1 = tmp_94_fu_307_p3;

assign p_shl3_cast_fu_327_p1 = tmp_95_fu_319_p3;

assign p_shl4_cast_fu_448_p1 = tmp_104_fu_440_p3;

assign p_shl6_cast_fu_426_p1 = tmp_102_fu_418_p3;

assign p_shl7_cast_fu_392_p1 = tmp_99_fu_384_p3;

assign p_shl8_cast2_fu_404_p1 = tmp_100_fu_396_p3;

assign p_shl8_cast_fu_408_p1 = tmp_100_fu_396_p3;

assign p_shl9_cast_fu_489_p1 = tmp_96_fu_481_p3;

assign p_shl_cast_fu_270_p1 = tmp_s_fu_262_p3;

assign tmp1_cast_fu_570_p1 = $signed(tmp1_fu_564_p2);

assign tmp1_fu_564_p2 = (m_reg_201 ^ 2'd2);

assign tmp2_cast_fu_666_p1 = $signed(tmp2_fu_660_p2);

assign tmp2_fu_660_p2 = (n_reg_224 ^ 2'd2);

assign tmp_100_fu_396_p3 = {{co1_reg_154}, {1'd0}};

assign tmp_101_fu_412_p2 = (p_shl8_cast_fu_408_p1 + p_shl7_cast_fu_392_p1);

assign tmp_102_fu_418_p3 = {{co1_reg_154}, {2'd0}};

assign tmp_103_fu_430_p2 = (p_shl6_cast_fu_426_p1 - tmp_cast_fu_380_p1);

assign tmp_104_fu_440_p3 = {{co1_reg_154}, {3'd0}};

assign tmp_105_fu_452_p2 = (p_shl8_cast2_fu_404_p1 + p_shl4_cast_fu_448_p1);

assign tmp_106_fu_302_p2 = (tmp_53_cast_fu_298_p1 + tmp_98_reg_697);

assign tmp_107_fu_331_p2 = (p_shl2_cast_fu_315_p1 + p_shl3_cast_fu_327_p1);

assign tmp_108_fu_476_p2 = (tmp_105_reg_751 + tmp_55_cast_fu_472_p1);

assign tmp_109_fu_493_p3 = {{tmp_108_fu_476_p2}, {1'd0}};

assign tmp_110_fu_505_p2 = (p_shl10_cast_fu_501_p1 + p_shl9_cast_fu_489_p1);

assign tmp_111_fu_347_p2 = (tmp_107_reg_710 + tmp_56_cast_fu_343_p1);

assign tmp_112_fu_618_p2 = (tmp_110_reg_764 + tmp_58_cast_fu_614_p1);

assign tmp_113_fu_547_p2 = ($signed(tmp_136_cast_reg_746) + $signed(tmp_60_cast_fu_543_p1));

assign tmp_114_fu_552_p2 = tmp_113_fu_547_p2 << 10'd2;

assign tmp_115_fu_558_p2 = (tmp_114_fu_552_p2 - tmp_113_fu_547_p2);

assign tmp_116_fu_583_p2 = (tmp_101_reg_741 + tmp_62_cast_fu_579_p1);

assign tmp_117_fu_596_p3 = {{tmp_116_fu_583_p2}, {1'd0}};

assign tmp_118_fu_608_p2 = (p_shl12_cast_fu_604_p1 + p_shl11_cast_fu_588_p3);

assign tmp_119_fu_650_p2 = (tmp_115_reg_790 + tmp_63_cast_fu_646_p1);

assign tmp_120_fu_679_p2 = (tmp_118_reg_795 + tmp_65_cast_fu_675_p1);

assign tmp_136_cast_fu_436_p1 = $signed(tmp_103_fu_430_p2);

assign tmp_148_cast_fu_364_p1 = tmp_111_reg_718;

assign tmp_149_cast_fu_623_p1 = tmp_112_fu_618_p2;

assign tmp_157_cast_fu_655_p1 = tmp_119_fu_650_p2;

assign tmp_158_cast_fu_684_p1 = tmp_120_fu_679_p2;

assign tmp_53_cast_fu_298_p1 = h_reg_131;

assign tmp_54_fu_464_p3 = {{h2_reg_165}, {1'd0}};

assign tmp_55_cast_fu_472_p1 = h2_reg_165;

assign tmp_56_cast_fu_343_p1 = w_reg_143;

assign tmp_57_fu_517_p3 = {{w3_reg_177}, {1'd0}};

assign tmp_58_cast_fu_614_p1 = w3_reg_177;

assign tmp_60_cast_fu_543_p1 = m_reg_201;

assign tmp_61_fu_574_p2 = ($signed(tmp_54_reg_759) + $signed(tmp1_cast_fu_570_p1));

assign tmp_62_cast_fu_579_p1 = tmp_61_fu_574_p2;

assign tmp_63_cast_fu_646_p1 = n_reg_224;

assign tmp_64_fu_670_p2 = ($signed(tmp_57_reg_772) + $signed(tmp2_cast_fu_666_p1));

assign tmp_65_cast_fu_675_p1 = tmp_64_fu_670_p2;

assign tmp_94_fu_307_p3 = {{tmp_106_fu_302_p2}, {3'd0}};

assign tmp_95_fu_319_p3 = {{tmp_106_fu_302_p2}, {1'd0}};

assign tmp_96_fu_481_p3 = {{tmp_108_fu_476_p2}, {3'd0}};

assign tmp_97_fu_274_p3 = {{co_reg_120}, {1'd0}};

assign tmp_98_fu_286_p2 = (p_shl1_cast_fu_282_p1 + p_shl_cast_fu_270_p1);

assign tmp_99_fu_384_p3 = {{co1_reg_154}, {4'd0}};

assign tmp_cast_fu_380_p1 = co1_reg_154;

assign tmp_fu_257_p1 = co_reg_120;

assign tmp_s_fu_262_p3 = {{co_reg_120}, {3'd0}};

assign w_10_fu_628_p2 = (w3_reg_177 + 4'd1);

assign w_9_fu_352_p2 = (w_reg_143 + 4'd1);

assign weight_address0 = tmp_157_cast_fu_655_p1;

always @ (posedge ap_clk) begin
    tmp_98_reg_697[0] <= 1'b0;
    tmp_107_reg_710[0] <= 1'b0;
    tmp_101_reg_741[0] <= 1'b0;
    tmp_105_reg_751[0] <= 1'b0;
    tmp_54_reg_759[0] <= 1'b0;
    tmp_110_reg_764[0] <= 1'b0;
    tmp_57_reg_772[0] <= 1'b0;
    tmp_118_reg_795[0] <= 1'b0;
end

endmodule //subconv_3x3_16_strid
