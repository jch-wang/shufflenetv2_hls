// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_1x1_16_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0
);

parameter    ap_ST_fsm_state1 = 33'd1;
parameter    ap_ST_fsm_state2 = 33'd2;
parameter    ap_ST_fsm_state3 = 33'd4;
parameter    ap_ST_fsm_state4 = 33'd8;
parameter    ap_ST_fsm_state5 = 33'd16;
parameter    ap_ST_fsm_state6 = 33'd32;
parameter    ap_ST_fsm_state7 = 33'd64;
parameter    ap_ST_fsm_state8 = 33'd128;
parameter    ap_ST_fsm_state9 = 33'd256;
parameter    ap_ST_fsm_state10 = 33'd512;
parameter    ap_ST_fsm_state11 = 33'd1024;
parameter    ap_ST_fsm_state12 = 33'd2048;
parameter    ap_ST_fsm_state13 = 33'd4096;
parameter    ap_ST_fsm_state14 = 33'd8192;
parameter    ap_ST_fsm_state15 = 33'd16384;
parameter    ap_ST_fsm_state16 = 33'd32768;
parameter    ap_ST_fsm_state17 = 33'd65536;
parameter    ap_ST_fsm_state18 = 33'd131072;
parameter    ap_ST_fsm_state19 = 33'd262144;
parameter    ap_ST_fsm_state20 = 33'd524288;
parameter    ap_ST_fsm_state21 = 33'd1048576;
parameter    ap_ST_fsm_state22 = 33'd2097152;
parameter    ap_ST_fsm_state23 = 33'd4194304;
parameter    ap_ST_fsm_state24 = 33'd8388608;
parameter    ap_ST_fsm_state25 = 33'd16777216;
parameter    ap_ST_fsm_state26 = 33'd33554432;
parameter    ap_ST_fsm_state27 = 33'd67108864;
parameter    ap_ST_fsm_state28 = 33'd134217728;
parameter    ap_ST_fsm_state29 = 33'd268435456;
parameter    ap_ST_fsm_state30 = 33'd536870912;
parameter    ap_ST_fsm_state31 = 33'd1073741824;
parameter    ap_ST_fsm_state32 = 33'd2147483648;
parameter    ap_ST_fsm_state33 = 33'd4294967296;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [9:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [4:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg weight_ce0;
reg bias_ce0;
reg[12:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [32:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_260;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state31;
wire   [4:0] co_28_fu_272_p2;
reg   [4:0] co_28_reg_782;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_295_fu_307_p2;
reg   [9:0] tmp_295_reg_787;
wire   [0:0] exitcond9_fu_266_p2;
reg   [4:0] bias_addr_reg_792;
wire   [13:0] tmp_303_fu_348_p2;
reg   [13:0] tmp_303_reg_800;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond8_fu_313_p2;
wire   [13:0] tmp_309_fu_364_p2;
reg   [13:0] tmp_309_reg_808;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond7_fu_354_p2;
wire   [4:0] w_28_fu_369_p2;
reg   [4:0] w_28_reg_813;
wire   [4:0] h_28_fu_375_p2;
wire   [4:0] co_29_fu_391_p2;
reg   [4:0] co_29_reg_826;
wire    ap_CS_fsm_state6;
wire   [10:0] tmp_298_fu_421_p2;
reg   [10:0] tmp_298_reg_831;
wire   [0:0] exitcond6_fu_385_p2;
wire   [9:0] tmp_301_fu_451_p2;
reg   [9:0] tmp_301_reg_836;
wire   [9:0] tmp_119_cast_fu_463_p1;
reg   [9:0] tmp_119_cast_reg_844;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond5_fu_457_p2;
wire   [13:0] tmp_308_fu_492_p2;
reg   [13:0] tmp_308_reg_849;
wire   [13:0] tmp_122_cast_fu_504_p1;
reg   [13:0] tmp_122_cast_reg_857;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond4_fu_498_p2;
reg   [12:0] output_addr_12_reg_862;
wire   [4:0] h_29_fu_518_p2;
wire   [4:0] ci_6_fu_530_p2;
reg   [4:0] ci_6_reg_875;
wire    ap_CS_fsm_state9;
wire   [13:0] tmp_322_fu_601_p2;
reg   [13:0] tmp_322_reg_880;
wire   [0:0] exitcond3_fu_524_p2;
wire   [10:0] tmp_323_fu_606_p2;
reg   [10:0] tmp_323_reg_885;
wire   [4:0] w_29_fu_611_p2;
reg   [4:0] w_29_reg_890;
wire    ap_CS_fsm_state10;
reg   [31:0] weight_load_reg_905;
wire    ap_CS_fsm_state11;
reg   [31:0] input_load_reg_910;
wire   [31:0] grp_fu_251_p2;
reg   [31:0] tmp_126_reg_915;
wire    ap_CS_fsm_state15;
wire   [31:0] grp_fu_245_p2;
wire    ap_CS_fsm_state20;
reg   [31:0] tmp_124_reg_925;
wire    ap_CS_fsm_state26;
wire   [4:0] co_30_fu_631_p2;
reg   [4:0] co_30_reg_933;
wire    ap_CS_fsm_state28;
wire   [9:0] tmp_306_fu_661_p2;
reg   [9:0] tmp_306_reg_938;
wire   [0:0] exitcond2_fu_625_p2;
wire   [13:0] tmp_312_fu_702_p2;
reg   [13:0] tmp_312_reg_946;
wire    ap_CS_fsm_state29;
wire   [0:0] exitcond1_fu_667_p2;
reg   [12:0] output_addr_11_reg_954;
wire    ap_CS_fsm_state30;
wire   [0:0] exitcond_fu_708_p2;
wire   [4:0] h_30_fu_728_p2;
wire   [0:0] notlhs_fu_752_p2;
reg   [0:0] notlhs_reg_964;
wire    ap_CS_fsm_state32;
wire   [0:0] notrhs_fu_758_p2;
reg   [0:0] notrhs_reg_969;
wire   [0:0] tmp_29_fu_255_p2;
reg   [0:0] tmp_29_reg_974;
wire   [4:0] w_30_fu_773_p2;
wire    ap_CS_fsm_state33;
reg   [4:0] co_reg_118;
reg   [4:0] h_reg_129;
reg   [4:0] w_reg_141;
wire    ap_CS_fsm_state5;
reg   [4:0] co1_reg_152;
reg   [4:0] h2_reg_163;
reg   [4:0] w3_reg_175;
wire    ap_CS_fsm_state27;
reg   [31:0] sum_reg_187;
reg   [4:0] ci_reg_199;
reg   [4:0] co4_reg_210;
reg   [4:0] h5_reg_221;
reg   [4:0] w6_reg_233;
wire   [63:0] tmp_fu_278_p1;
wire   [63:0] tmp_386_cast_fu_381_p1;
wire   [63:0] tmp_391_cast_fu_513_p1;
wire   [63:0] tmp_400_cast_fu_617_p1;
wire  signed [63:0] tmp_401_cast_fu_621_p1;
wire   [63:0] tmp_392_cast_fu_723_p1;
wire   [0:0] tmp_30_fu_768_p2;
reg   [31:0] grp_fu_245_p0;
reg   [31:0] grp_fu_245_p1;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state12;
wire   [8:0] tmp_s_fu_283_p3;
wire   [5:0] tmp_294_fu_295_p3;
wire   [9:0] p_shl1_cast_fu_303_p1;
wire   [9:0] p_shl_cast_fu_291_p1;
wire   [9:0] tmp_cast_fu_319_p1;
wire   [9:0] tmp_302_fu_323_p2;
wire   [10:0] tmp_292_fu_336_p3;
wire   [13:0] p_shl2_cast_fu_328_p3;
wire   [13:0] p_shl3_cast_fu_344_p1;
wire   [13:0] tmp_120_cast_fu_360_p1;
wire   [9:0] tmp_296_fu_397_p3;
wire   [7:0] tmp_297_fu_409_p3;
wire   [10:0] p_shl6_cast_fu_405_p1;
wire   [10:0] p_shl7_cast_fu_417_p1;
wire   [8:0] tmp_299_fu_427_p3;
wire   [5:0] tmp_300_fu_439_p3;
wire   [9:0] p_shl5_cast_fu_447_p1;
wire   [9:0] p_shl4_cast_fu_435_p1;
wire   [9:0] tmp_307_fu_467_p2;
wire   [10:0] tmp_293_fu_480_p3;
wire   [13:0] p_shl8_cast_fu_472_p3;
wire   [13:0] p_shl9_cast_fu_488_p1;
wire   [13:0] tmp_313_fu_508_p2;
wire   [8:0] tmp_316_fu_540_p3;
wire   [5:0] tmp_317_fu_552_p3;
wire   [9:0] p_shl12_cast_fu_548_p1;
wire   [9:0] p_shl13_cast_fu_560_p1;
wire   [9:0] tmp_318_fu_564_p2;
wire   [9:0] tmp_319_fu_570_p2;
wire   [10:0] tmp_320_fu_583_p3;
wire   [13:0] p_shl10_cast_fu_575_p3;
wire   [13:0] p_shl11_cast_fu_591_p1;
wire   [13:0] tmp_321_fu_595_p2;
wire   [10:0] tmp_125_cast_fu_536_p1;
wire   [8:0] tmp_304_fu_637_p3;
wire   [5:0] tmp_305_fu_649_p3;
wire   [9:0] p_shl15_cast_fu_657_p1;
wire   [9:0] p_shl14_cast_fu_645_p1;
wire   [9:0] tmp_121_cast_fu_673_p1;
wire   [9:0] tmp_310_fu_677_p2;
wire   [10:0] tmp_311_fu_690_p3;
wire   [13:0] p_shl16_cast_fu_682_p3;
wire   [13:0] p_shl17_cast_fu_698_p1;
wire   [13:0] tmp_123_cast_fu_714_p1;
wire   [13:0] tmp_314_fu_718_p2;
wire   [31:0] output_load_to_int_fu_734_p1;
wire   [7:0] tmp_26_fu_738_p4;
wire   [22:0] tmp_315_fu_748_p1;
wire   [0:0] tmp_28_fu_764_p2;
reg   [32:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 33'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_x_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_245_p0),
    .din1(grp_fu_245_p1),
    .ce(1'b1),
    .dout(grp_fu_245_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_x_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_905),
    .din1(input_load_reg_910),
    .ce(1'b1),
    .dout(grp_fu_251_p2)
);

ShuffleNetV2_fcmpdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
ShuffleNetV2_fcmpdEe_x_U23(
    .din0(reg_260),
    .din1(32'd0),
    .opcode(5'd4),
    .dout(tmp_29_fu_255_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond4_fu_498_p2))) begin
        ci_reg_199 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        ci_reg_199 <= ci_6_reg_875;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_266_p2 == 1'd1))) begin
        co1_reg_152 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond5_fu_457_p2))) begin
        co1_reg_152 <= co_29_reg_826;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond6_fu_385_p2))) begin
        co4_reg_210 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state29) & (1'd1 == exitcond1_fu_667_p2))) begin
        co4_reg_210 <= co_30_reg_933;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond8_fu_313_p2 == 1'd1))) begin
        co_reg_118 <= co_28_reg_782;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_118 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond6_fu_385_p2))) begin
        h2_reg_163 <= 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond4_fu_498_p2))) begin
        h2_reg_163 <= h_29_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (1'd0 == exitcond2_fu_625_p2))) begin
        h5_reg_221 <= 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state30) & (1'd1 == exitcond_fu_708_p2))) begin
        h5_reg_221 <= h_30_fu_728_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_266_p2 == 1'd0))) begin
        h_reg_129 <= 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond7_fu_354_p2 == 1'd1))) begin
        h_reg_129 <= h_28_fu_375_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond4_fu_498_p2))) begin
        sum_reg_187 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        sum_reg_187 <= grp_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond5_fu_457_p2))) begin
        w3_reg_175 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        w3_reg_175 <= w_29_reg_890;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) & (1'd0 == exitcond1_fu_667_p2))) begin
        w6_reg_233 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        w6_reg_233 <= w_30_fu_773_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond8_fu_313_p2))) begin
        w_reg_141 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_reg_141 <= w_28_reg_813;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_266_p2 == 1'd0))) begin
        bias_addr_reg_792 <= tmp_fu_278_p1;
        tmp_295_reg_787[9 : 1] <= tmp_295_fu_307_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ci_6_reg_875 <= ci_6_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_28_reg_782 <= co_28_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        co_29_reg_826 <= co_29_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        co_30_reg_933 <= co_30_fu_631_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_load_reg_910 <= input_r_q0;
        weight_load_reg_905 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        notlhs_reg_964 <= notlhs_fu_752_p2;
        notrhs_reg_969 <= notrhs_fu_758_p2;
        tmp_29_reg_974 <= tmp_29_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & (1'd0 == exitcond_fu_708_p2))) begin
        output_addr_11_reg_954 <= tmp_392_cast_fu_723_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond4_fu_498_p2))) begin
        output_addr_12_reg_862 <= tmp_391_cast_fu_513_p1;
        tmp_122_cast_reg_857[4 : 0] <= tmp_122_cast_fu_504_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state31))) begin
        reg_260 <= output_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond5_fu_457_p2))) begin
        tmp_119_cast_reg_844[4 : 0] <= tmp_119_cast_fu_463_p1[4 : 0];
        tmp_308_reg_849[13 : 1] <= tmp_308_fu_492_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_124_reg_925 <= grp_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_126_reg_915 <= grp_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond6_fu_385_p2))) begin
        tmp_298_reg_831[10 : 3] <= tmp_298_fu_421_p2[10 : 3];
        tmp_301_reg_836[9 : 1] <= tmp_301_fu_451_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond8_fu_313_p2))) begin
        tmp_303_reg_800[13 : 1] <= tmp_303_fu_348_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (1'd0 == exitcond2_fu_625_p2))) begin
        tmp_306_reg_938[9 : 1] <= tmp_306_fu_661_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond7_fu_354_p2))) begin
        tmp_309_reg_808 <= tmp_309_fu_364_p2;
        w_28_reg_813 <= w_28_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) & (1'd0 == exitcond1_fu_667_p2))) begin
        tmp_312_reg_946[13 : 1] <= tmp_312_fu_702_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond3_fu_524_p2))) begin
        tmp_322_reg_880 <= tmp_322_fu_601_p2;
        tmp_323_reg_885 <= tmp_323_fu_606_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond3_fu_524_p2))) begin
        w_29_reg_890 <= w_29_fu_611_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state28) & (1'd1 == exitcond2_fu_625_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (1'd1 == exitcond2_fu_625_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_245_p0 = reg_260;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_245_p0 = sum_reg_187;
    end else begin
        grp_fu_245_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_245_p1 = sum_reg_187;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_245_p1 = tmp_126_reg_915;
    end else begin
        grp_fu_245_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        output_r_address0 = output_addr_11_reg_954;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        output_r_address0 = tmp_392_cast_fu_723_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state27))) begin
        output_r_address0 = output_addr_12_reg_862;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_address0 = tmp_386_cast_fu_381_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state27))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        output_r_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        output_r_d0 = tmp_124_reg_925;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_d0 = bias_q0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state33) & (1'd1 == tmp_30_fu_768_p2)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_266_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond8_fu_313_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond7_fu_354_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond6_fu_385_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond5_fu_457_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond4_fu_498_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond3_fu_524_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (1'd1 == exitcond2_fu_625_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (1'd1 == exitcond1_fu_667_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (1'd1 == exitcond_fu_708_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_792;

assign ci_6_fu_530_p2 = (ci_reg_199 + 5'd1);

assign co_28_fu_272_p2 = (co_reg_118 + 5'd1);

assign co_29_fu_391_p2 = (co1_reg_152 + 5'd1);

assign co_30_fu_631_p2 = (co4_reg_210 + 5'd1);

assign exitcond1_fu_667_p2 = ((h5_reg_221 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond2_fu_625_p2 = ((co4_reg_210 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond3_fu_524_p2 = ((ci_reg_199 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond4_fu_498_p2 = ((w3_reg_175 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond5_fu_457_p2 = ((h2_reg_163 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond6_fu_385_p2 = ((co1_reg_152 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond7_fu_354_p2 = ((w_reg_141 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond8_fu_313_p2 = ((h_reg_129 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond9_fu_266_p2 = ((co_reg_118 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond_fu_708_p2 = ((w6_reg_233 == 5'd17) ? 1'b1 : 1'b0);

assign h_28_fu_375_p2 = (h_reg_129 + 5'd1);

assign h_29_fu_518_p2 = (h2_reg_163 + 5'd1);

assign h_30_fu_728_p2 = (h5_reg_221 + 5'd1);

assign input_r_address0 = tmp_400_cast_fu_617_p1;

assign notlhs_fu_752_p2 = ((tmp_26_fu_738_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_758_p2 = ((tmp_315_fu_748_p1 == 23'd0) ? 1'b1 : 1'b0);

assign output_load_to_int_fu_734_p1 = reg_260;

assign p_shl10_cast_fu_575_p3 = {{tmp_319_fu_570_p2}, {4'd0}};

assign p_shl11_cast_fu_591_p1 = tmp_320_fu_583_p3;

assign p_shl12_cast_fu_548_p1 = tmp_316_fu_540_p3;

assign p_shl13_cast_fu_560_p1 = tmp_317_fu_552_p3;

assign p_shl14_cast_fu_645_p1 = tmp_304_fu_637_p3;

assign p_shl15_cast_fu_657_p1 = tmp_305_fu_649_p3;

assign p_shl16_cast_fu_682_p3 = {{tmp_310_fu_677_p2}, {4'd0}};

assign p_shl17_cast_fu_698_p1 = tmp_311_fu_690_p3;

assign p_shl1_cast_fu_303_p1 = tmp_294_fu_295_p3;

assign p_shl2_cast_fu_328_p3 = {{tmp_302_fu_323_p2}, {4'd0}};

assign p_shl3_cast_fu_344_p1 = tmp_292_fu_336_p3;

assign p_shl4_cast_fu_435_p1 = tmp_299_fu_427_p3;

assign p_shl5_cast_fu_447_p1 = tmp_300_fu_439_p3;

assign p_shl6_cast_fu_405_p1 = tmp_296_fu_397_p3;

assign p_shl7_cast_fu_417_p1 = tmp_297_fu_409_p3;

assign p_shl8_cast_fu_472_p3 = {{tmp_307_fu_467_p2}, {4'd0}};

assign p_shl9_cast_fu_488_p1 = tmp_293_fu_480_p3;

assign p_shl_cast_fu_291_p1 = tmp_s_fu_283_p3;

assign tmp_119_cast_fu_463_p1 = h2_reg_163;

assign tmp_120_cast_fu_360_p1 = w_reg_141;

assign tmp_121_cast_fu_673_p1 = h5_reg_221;

assign tmp_122_cast_fu_504_p1 = w3_reg_175;

assign tmp_123_cast_fu_714_p1 = w6_reg_233;

assign tmp_125_cast_fu_536_p1 = ci_reg_199;

assign tmp_26_fu_738_p4 = {{output_load_to_int_fu_734_p1[30:23]}};

assign tmp_28_fu_764_p2 = (notrhs_reg_969 | notlhs_reg_964);

assign tmp_292_fu_336_p3 = {{tmp_302_fu_323_p2}, {1'd0}};

assign tmp_293_fu_480_p3 = {{tmp_307_fu_467_p2}, {1'd0}};

assign tmp_294_fu_295_p3 = {{co_reg_118}, {1'd0}};

assign tmp_295_fu_307_p2 = (p_shl1_cast_fu_303_p1 + p_shl_cast_fu_291_p1);

assign tmp_296_fu_397_p3 = {{co1_reg_152}, {5'd0}};

assign tmp_297_fu_409_p3 = {{co1_reg_152}, {3'd0}};

assign tmp_298_fu_421_p2 = (p_shl6_cast_fu_405_p1 - p_shl7_cast_fu_417_p1);

assign tmp_299_fu_427_p3 = {{co1_reg_152}, {4'd0}};

assign tmp_300_fu_439_p3 = {{co1_reg_152}, {1'd0}};

assign tmp_301_fu_451_p2 = (p_shl5_cast_fu_447_p1 + p_shl4_cast_fu_435_p1);

assign tmp_302_fu_323_p2 = (tmp_cast_fu_319_p1 + tmp_295_reg_787);

assign tmp_303_fu_348_p2 = (p_shl2_cast_fu_328_p3 + p_shl3_cast_fu_344_p1);

assign tmp_304_fu_637_p3 = {{co4_reg_210}, {4'd0}};

assign tmp_305_fu_649_p3 = {{co4_reg_210}, {1'd0}};

assign tmp_306_fu_661_p2 = (p_shl15_cast_fu_657_p1 + p_shl14_cast_fu_645_p1);

assign tmp_307_fu_467_p2 = (tmp_119_cast_fu_463_p1 + tmp_301_reg_836);

assign tmp_308_fu_492_p2 = (p_shl8_cast_fu_472_p3 + p_shl9_cast_fu_488_p1);

assign tmp_309_fu_364_p2 = (tmp_303_reg_800 + tmp_120_cast_fu_360_p1);

assign tmp_30_fu_768_p2 = (tmp_28_fu_764_p2 & tmp_29_reg_974);

assign tmp_310_fu_677_p2 = (tmp_121_cast_fu_673_p1 + tmp_306_reg_938);

assign tmp_311_fu_690_p3 = {{tmp_310_fu_677_p2}, {1'd0}};

assign tmp_312_fu_702_p2 = (p_shl16_cast_fu_682_p3 + p_shl17_cast_fu_698_p1);

assign tmp_313_fu_508_p2 = (tmp_308_reg_849 + tmp_122_cast_fu_504_p1);

assign tmp_314_fu_718_p2 = (tmp_312_reg_946 + tmp_123_cast_fu_714_p1);

assign tmp_315_fu_748_p1 = output_load_to_int_fu_734_p1[22:0];

assign tmp_316_fu_540_p3 = {{ci_reg_199}, {4'd0}};

assign tmp_317_fu_552_p3 = {{ci_reg_199}, {1'd0}};

assign tmp_318_fu_564_p2 = (p_shl12_cast_fu_548_p1 + p_shl13_cast_fu_560_p1);

assign tmp_319_fu_570_p2 = (tmp_119_cast_reg_844 + tmp_318_fu_564_p2);

assign tmp_320_fu_583_p3 = {{tmp_319_fu_570_p2}, {1'd0}};

assign tmp_321_fu_595_p2 = (p_shl10_cast_fu_575_p3 + p_shl11_cast_fu_591_p1);

assign tmp_322_fu_601_p2 = (tmp_122_cast_reg_857 + tmp_321_fu_595_p2);

assign tmp_323_fu_606_p2 = (tmp_125_cast_fu_536_p1 + tmp_298_reg_831);

assign tmp_386_cast_fu_381_p1 = tmp_309_reg_808;

assign tmp_391_cast_fu_513_p1 = tmp_313_fu_508_p2;

assign tmp_392_cast_fu_723_p1 = tmp_314_fu_718_p2;

assign tmp_400_cast_fu_617_p1 = tmp_322_reg_880;

assign tmp_401_cast_fu_621_p1 = $signed(tmp_323_reg_885);

assign tmp_cast_fu_319_p1 = h_reg_129;

assign tmp_fu_278_p1 = co_reg_118;

assign tmp_s_fu_283_p3 = {{co_reg_118}, {4'd0}};

assign w_28_fu_369_p2 = (w_reg_141 + 5'd1);

assign w_29_fu_611_p2 = (w3_reg_175 + 5'd1);

assign w_30_fu_773_p2 = (w6_reg_233 + 5'd1);

assign weight_address0 = tmp_401_cast_fu_621_p1;

always @ (posedge ap_clk) begin
    tmp_295_reg_787[0] <= 1'b0;
    tmp_303_reg_800[0] <= 1'b0;
    tmp_298_reg_831[2:0] <= 3'b000;
    tmp_301_reg_836[0] <= 1'b0;
    tmp_119_cast_reg_844[9:5] <= 5'b00000;
    tmp_308_reg_849[0] <= 1'b0;
    tmp_122_cast_reg_857[13:5] <= 9'b000000000;
    tmp_306_reg_938[0] <= 1'b0;
    tmp_312_reg_946[0] <= 1'b0;
end

endmodule //subconv_1x1_16_p
