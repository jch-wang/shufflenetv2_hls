// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_last (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0
);

parameter    ap_ST_fsm_state1 = 32'd1;
parameter    ap_ST_fsm_state2 = 32'd2;
parameter    ap_ST_fsm_state3 = 32'd4;
parameter    ap_ST_fsm_state4 = 32'd8;
parameter    ap_ST_fsm_state5 = 32'd16;
parameter    ap_ST_fsm_state6 = 32'd32;
parameter    ap_ST_fsm_state7 = 32'd64;
parameter    ap_ST_fsm_state8 = 32'd128;
parameter    ap_ST_fsm_state9 = 32'd256;
parameter    ap_ST_fsm_state10 = 32'd512;
parameter    ap_ST_fsm_state11 = 32'd1024;
parameter    ap_ST_fsm_state12 = 32'd2048;
parameter    ap_ST_fsm_state13 = 32'd4096;
parameter    ap_ST_fsm_state14 = 32'd8192;
parameter    ap_ST_fsm_state15 = 32'd16384;
parameter    ap_ST_fsm_state16 = 32'd32768;
parameter    ap_ST_fsm_state17 = 32'd65536;
parameter    ap_ST_fsm_state18 = 32'd131072;
parameter    ap_ST_fsm_state19 = 32'd262144;
parameter    ap_ST_fsm_state20 = 32'd524288;
parameter    ap_ST_fsm_state21 = 32'd1048576;
parameter    ap_ST_fsm_state22 = 32'd2097152;
parameter    ap_ST_fsm_state23 = 32'd4194304;
parameter    ap_ST_fsm_state24 = 32'd8388608;
parameter    ap_ST_fsm_state25 = 32'd16777216;
parameter    ap_ST_fsm_state26 = 32'd33554432;
parameter    ap_ST_fsm_state27 = 32'd67108864;
parameter    ap_ST_fsm_state28 = 32'd134217728;
parameter    ap_ST_fsm_state29 = 32'd268435456;
parameter    ap_ST_fsm_state30 = 32'd536870912;
parameter    ap_ST_fsm_state31 = 32'd1073741824;
parameter    ap_ST_fsm_state32 = 32'd2147483648;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [16:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [8:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg weight_ce0;
reg bias_ce0;
reg[12:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [31:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_265;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state30;
wire   [9:0] co_40_fu_277_p2;
reg   [9:0] co_40_reg_649;
wire    ap_CS_fsm_state2;
wire   [12:0] tmp_556_cast_fu_296_p1;
reg   [12:0] tmp_556_cast_reg_654;
wire   [0:0] exitcond9_fu_271_p2;
reg   [8:0] bias_addr_reg_659;
wire   [2:0] h_40_fu_306_p2;
reg   [2:0] h_40_reg_667;
wire    ap_CS_fsm_state3;
wire   [14:0] tmp_564_cast_fu_321_p3;
reg   [14:0] tmp_564_cast_reg_672;
wire   [0:0] exitcond8_fu_300_p2;
wire   [2:0] w_40_fu_335_p2;
reg   [2:0] w_40_reg_680;
wire    ap_CS_fsm_state4;
wire   [14:0] tmp_430_fu_345_p2;
reg   [14:0] tmp_430_reg_685;
wire   [0:0] exitcond7_fu_329_p2;
wire   [9:0] co_41_fu_360_p2;
reg   [9:0] co_41_reg_693;
wire    ap_CS_fsm_state6;
wire   [17:0] tmp_425_fu_386_p2;
reg   [17:0] tmp_425_reg_698;
wire   [0:0] exitcond6_fu_354_p2;
wire   [12:0] tmp_561_cast_fu_400_p1;
reg   [12:0] tmp_561_cast_reg_703;
wire   [2:0] h_41_fu_410_p2;
reg   [2:0] h_41_reg_711;
wire    ap_CS_fsm_state7;
wire   [10:0] tmp_136_cast3_fu_416_p1;
reg   [10:0] tmp_136_cast3_reg_716;
wire   [0:0] exitcond5_fu_404_p2;
wire   [14:0] tmp_569_cast_fu_429_p3;
reg   [14:0] tmp_569_cast_reg_721;
wire   [2:0] w_41_fu_443_p2;
reg   [2:0] w_41_reg_729;
wire    ap_CS_fsm_state8;
wire   [12:0] tmp_139_cast2_fu_449_p1;
reg   [12:0] tmp_139_cast2_reg_734;
wire   [0:0] exitcond4_fu_437_p2;
reg   [12:0] output_addr_13_reg_739;
wire   [7:0] ci_7_fu_473_p2;
reg   [7:0] ci_7_reg_747;
wire    ap_CS_fsm_state9;
wire   [0:0] exitcond3_fu_467_p2;
reg   [31:0] weight_load_reg_762;
wire    ap_CS_fsm_state10;
reg   [31:0] input_load_reg_767;
wire   [31:0] grp_fu_256_p2;
reg   [31:0] tmp_143_reg_772;
wire    ap_CS_fsm_state14;
wire   [31:0] grp_fu_250_p2;
wire    ap_CS_fsm_state19;
reg   [31:0] tmp_141_reg_782;
wire    ap_CS_fsm_state25;
wire   [9:0] co_42_fu_534_p2;
reg   [9:0] co_42_reg_790;
wire    ap_CS_fsm_state27;
wire   [12:0] tmp_566_cast_fu_548_p1;
reg   [12:0] tmp_566_cast_reg_795;
wire   [0:0] exitcond2_fu_528_p2;
wire   [2:0] h_42_fu_558_p2;
reg   [2:0] h_42_reg_803;
wire    ap_CS_fsm_state28;
wire   [14:0] tmp_573_cast_fu_573_p3;
reg   [14:0] tmp_573_cast_reg_808;
wire   [0:0] exitcond1_fu_552_p2;
wire   [2:0] w_1_fu_587_p2;
reg   [2:0] w_1_reg_816;
wire    ap_CS_fsm_state29;
reg   [12:0] output_addr_14_reg_821;
wire   [0:0] exitcond_fu_581_p2;
wire   [0:0] notlhs_fu_625_p2;
reg   [0:0] notlhs_reg_826;
wire    ap_CS_fsm_state31;
wire   [0:0] notrhs_fu_631_p2;
reg   [0:0] notrhs_reg_831;
wire   [0:0] tmp_34_fu_260_p2;
reg   [0:0] tmp_34_reg_836;
reg   [9:0] co_reg_128;
reg   [2:0] h_reg_139;
reg   [2:0] w_reg_150;
wire    ap_CS_fsm_state5;
reg   [9:0] co1_reg_161;
reg   [2:0] h2_reg_172;
reg   [2:0] w3_reg_183;
wire    ap_CS_fsm_state26;
reg   [31:0] sum_reg_194;
reg   [7:0] ci_reg_206;
reg   [9:0] co4_reg_217;
reg   [2:0] h5_reg_228;
reg   [2:0] w6_reg_239;
wire    ap_CS_fsm_state32;
wire   [63:0] tmp_fu_283_p1;
wire   [63:0] tmp_570_cast_fu_350_p1;
wire   [63:0] tmp_574_cast_fu_462_p1;
wire   [63:0] tmp_581_cast_fu_513_p1;
wire  signed [63:0] tmp_582_cast_fu_523_p1;
wire   [63:0] tmp_575_cast_fu_602_p1;
wire   [0:0] tmp_35_fu_641_p2;
reg   [31:0] grp_fu_250_p0;
reg   [31:0] grp_fu_250_p1;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state11;
wire   [11:0] tmp_s_fu_288_p3;
wire   [12:0] tmp_cast_fu_312_p1;
wire   [12:0] tmp_427_fu_316_p2;
wire   [14:0] tmp_137_cast_fu_341_p1;
wire   [15:0] tmp_424_fu_374_p3;
wire   [17:0] tmp_423_fu_366_p3;
wire   [17:0] p_shl1_cast_fu_382_p1;
wire   [11:0] tmp_426_fu_392_p3;
wire   [12:0] tmp_136_cast_fu_420_p1;
wire   [12:0] tmp_429_fu_424_p2;
wire   [14:0] tmp_139_cast_fu_453_p1;
wire   [14:0] tmp_432_fu_457_p2;
wire   [9:0] tmp_434_fu_483_p3;
wire   [10:0] tmp_577_cast_fu_491_p1;
wire   [10:0] tmp_435_fu_495_p2;
wire   [12:0] tmp_580_cast_fu_500_p3;
wire   [12:0] tmp_436_fu_508_p2;
wire   [17:0] tmp_142_cast_fu_479_p1;
wire   [17:0] tmp_437_fu_518_p2;
wire   [11:0] tmp_428_fu_540_p3;
wire   [12:0] tmp_138_cast_fu_564_p1;
wire   [12:0] tmp_431_fu_568_p2;
wire   [14:0] tmp_140_cast_fu_593_p1;
wire   [14:0] tmp_433_fu_597_p2;
wire   [31:0] output_load_to_int_fu_607_p1;
wire   [7:0] tmp_31_fu_611_p4;
wire   [22:0] tmp_354_fu_621_p1;
wire   [0:0] tmp_33_fu_637_p2;
reg   [31:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 32'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_x_U107(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_250_p0),
    .din1(grp_fu_250_p1),
    .ce(1'b1),
    .dout(grp_fu_250_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_x_U108(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_762),
    .din1(input_load_reg_767),
    .ce(1'b1),
    .dout(grp_fu_256_p2)
);

ShuffleNetV2_fcmpdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
ShuffleNetV2_fcmpdEe_x_U109(
    .din0(reg_265),
    .din1(32'd0),
    .opcode(5'd4),
    .dout(tmp_34_fu_260_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond4_fu_437_p2))) begin
        ci_reg_206 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        ci_reg_206 <= ci_7_reg_747;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_271_p2 == 1'd1))) begin
        co1_reg_161 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond5_fu_404_p2 == 1'd1))) begin
        co1_reg_161 <= co_41_reg_693;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond6_fu_354_p2 == 1'd1))) begin
        co4_reg_217 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state28) & (exitcond1_fu_552_p2 == 1'd1))) begin
        co4_reg_217 <= co_42_reg_790;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond8_fu_300_p2 == 1'd1))) begin
        co_reg_128 <= co_40_reg_649;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_128 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond4_fu_437_p2 == 1'd1))) begin
        h2_reg_172 <= h_41_reg_711;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond6_fu_354_p2))) begin
        h2_reg_172 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) & (exitcond_fu_581_p2 == 1'd1))) begin
        h5_reg_228 <= h_42_reg_803;
    end else if (((1'b1 == ap_CS_fsm_state27) & (1'd0 == exitcond2_fu_528_p2))) begin
        h5_reg_228 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond7_fu_329_p2 == 1'd1))) begin
        h_reg_139 <= h_40_reg_667;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_271_p2 == 1'd0))) begin
        h_reg_139 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond4_fu_437_p2))) begin
        sum_reg_194 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        sum_reg_194 <= grp_fu_250_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond5_fu_404_p2))) begin
        w3_reg_183 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        w3_reg_183 <= w_41_reg_729;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (1'd0 == exitcond1_fu_552_p2))) begin
        w6_reg_239 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        w6_reg_239 <= w_1_reg_816;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond8_fu_300_p2))) begin
        w_reg_150 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_reg_150 <= w_40_reg_680;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_271_p2 == 1'd0))) begin
        bias_addr_reg_659 <= tmp_fu_283_p1;
        tmp_556_cast_reg_654[11 : 2] <= tmp_556_cast_fu_296_p1[11 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ci_7_reg_747 <= ci_7_fu_473_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_40_reg_649 <= co_40_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        co_41_reg_693 <= co_41_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        co_42_reg_790 <= co_42_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_40_reg_667 <= h_40_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        h_41_reg_711 <= h_41_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        h_42_reg_803 <= h_42_fu_558_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_load_reg_767 <= input_r_q0;
        weight_load_reg_762 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        notlhs_reg_826 <= notlhs_fu_625_p2;
        notrhs_reg_831 <= notrhs_fu_631_p2;
        tmp_34_reg_836 <= tmp_34_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond4_fu_437_p2))) begin
        output_addr_13_reg_739 <= tmp_574_cast_fu_462_p1;
        tmp_139_cast2_reg_734[2 : 0] <= tmp_139_cast2_fu_449_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) & (1'd0 == exitcond_fu_581_p2))) begin
        output_addr_14_reg_821 <= tmp_575_cast_fu_602_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state30))) begin
        reg_265 <= output_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond5_fu_404_p2))) begin
        tmp_136_cast3_reg_716[2 : 0] <= tmp_136_cast3_fu_416_p1[2 : 0];
        tmp_569_cast_reg_721[14 : 2] <= tmp_569_cast_fu_429_p3[14 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp_141_reg_782 <= grp_fu_250_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_143_reg_772 <= grp_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond6_fu_354_p2))) begin
        tmp_425_reg_698[17 : 6] <= tmp_425_fu_386_p2[17 : 6];
        tmp_561_cast_reg_703[11 : 2] <= tmp_561_cast_fu_400_p1[11 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond7_fu_329_p2))) begin
        tmp_430_reg_685 <= tmp_430_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond8_fu_300_p2))) begin
        tmp_564_cast_reg_672[14 : 2] <= tmp_564_cast_fu_321_p3[14 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & (1'd0 == exitcond2_fu_528_p2))) begin
        tmp_566_cast_reg_795[11 : 2] <= tmp_566_cast_fu_548_p1[11 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (1'd0 == exitcond1_fu_552_p2))) begin
        tmp_573_cast_reg_808[14 : 2] <= tmp_573_cast_fu_573_p3[14 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        w_1_reg_816 <= w_1_fu_587_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_40_reg_680 <= w_40_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        w_41_reg_729 <= w_41_fu_443_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state27) & (exitcond2_fu_528_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) & (exitcond2_fu_528_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_250_p0 = reg_265;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_250_p0 = sum_reg_194;
    end else begin
        grp_fu_250_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_250_p1 = sum_reg_194;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_250_p1 = tmp_143_reg_772;
    end else begin
        grp_fu_250_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        output_r_address0 = output_addr_14_reg_821;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        output_r_address0 = tmp_575_cast_fu_602_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state26))) begin
        output_r_address0 = output_addr_13_reg_739;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_address0 = tmp_570_cast_fu_350_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state32))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        output_r_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        output_r_d0 = tmp_141_reg_782;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_d0 = bias_q0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state32) & (1'd1 == tmp_35_fu_641_p2)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_271_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond8_fu_300_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond7_fu_329_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond6_fu_354_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond5_fu_404_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond4_fu_437_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond3_fu_467_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (exitcond2_fu_528_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (exitcond1_fu_552_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (exitcond_fu_581_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_659;

assign ci_7_fu_473_p2 = (ci_reg_206 + 8'd1);

assign co_40_fu_277_p2 = (co_reg_128 + 10'd1);

assign co_41_fu_360_p2 = (co1_reg_161 + 10'd1);

assign co_42_fu_534_p2 = (co4_reg_217 + 10'd1);

assign exitcond1_fu_552_p2 = ((h5_reg_228 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond2_fu_528_p2 = ((co4_reg_217 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond3_fu_467_p2 = ((ci_reg_206 == 8'd192) ? 1'b1 : 1'b0);

assign exitcond4_fu_437_p2 = ((w3_reg_183 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond5_fu_404_p2 = ((h2_reg_172 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond6_fu_354_p2 = ((co1_reg_161 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond7_fu_329_p2 = ((w_reg_150 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond8_fu_300_p2 = ((h_reg_139 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond9_fu_271_p2 = ((co_reg_128 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond_fu_581_p2 = ((w6_reg_239 == 3'd4) ? 1'b1 : 1'b0);

assign h_40_fu_306_p2 = (h_reg_139 + 3'd1);

assign h_41_fu_410_p2 = (h2_reg_172 + 3'd1);

assign h_42_fu_558_p2 = (h5_reg_228 + 3'd1);

assign input_r_address0 = tmp_581_cast_fu_513_p1;

assign notlhs_fu_625_p2 = ((tmp_31_fu_611_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_631_p2 = ((tmp_354_fu_621_p1 == 23'd0) ? 1'b1 : 1'b0);

assign output_load_to_int_fu_607_p1 = reg_265;

assign p_shl1_cast_fu_382_p1 = tmp_424_fu_374_p3;

assign tmp_136_cast3_fu_416_p1 = h2_reg_172;

assign tmp_136_cast_fu_420_p1 = h2_reg_172;

assign tmp_137_cast_fu_341_p1 = w_reg_150;

assign tmp_138_cast_fu_564_p1 = h5_reg_228;

assign tmp_139_cast2_fu_449_p1 = w3_reg_183;

assign tmp_139_cast_fu_453_p1 = w3_reg_183;

assign tmp_140_cast_fu_593_p1 = w6_reg_239;

assign tmp_142_cast_fu_479_p1 = ci_reg_206;

assign tmp_31_fu_611_p4 = {{output_load_to_int_fu_607_p1[30:23]}};

assign tmp_33_fu_637_p2 = (notrhs_reg_831 | notlhs_reg_826);

assign tmp_354_fu_621_p1 = output_load_to_int_fu_607_p1[22:0];

assign tmp_35_fu_641_p2 = (tmp_33_fu_637_p2 & tmp_34_reg_836);

assign tmp_423_fu_366_p3 = {{co1_reg_161}, {8'd0}};

assign tmp_424_fu_374_p3 = {{co1_reg_161}, {6'd0}};

assign tmp_425_fu_386_p2 = (tmp_423_fu_366_p3 - p_shl1_cast_fu_382_p1);

assign tmp_426_fu_392_p3 = {{co1_reg_161}, {2'd0}};

assign tmp_427_fu_316_p2 = (tmp_cast_fu_312_p1 + tmp_556_cast_reg_654);

assign tmp_428_fu_540_p3 = {{co4_reg_217}, {2'd0}};

assign tmp_429_fu_424_p2 = (tmp_136_cast_fu_420_p1 + tmp_561_cast_reg_703);

assign tmp_430_fu_345_p2 = (tmp_564_cast_reg_672 + tmp_137_cast_fu_341_p1);

assign tmp_431_fu_568_p2 = (tmp_138_cast_fu_564_p1 + tmp_566_cast_reg_795);

assign tmp_432_fu_457_p2 = (tmp_569_cast_reg_721 + tmp_139_cast_fu_453_p1);

assign tmp_433_fu_597_p2 = (tmp_573_cast_reg_808 + tmp_140_cast_fu_593_p1);

assign tmp_434_fu_483_p3 = {{ci_reg_206}, {2'd0}};

assign tmp_435_fu_495_p2 = (tmp_136_cast3_reg_716 + tmp_577_cast_fu_491_p1);

assign tmp_436_fu_508_p2 = (tmp_139_cast2_reg_734 + tmp_580_cast_fu_500_p3);

assign tmp_437_fu_518_p2 = (tmp_142_cast_fu_479_p1 + tmp_425_reg_698);

assign tmp_556_cast_fu_296_p1 = tmp_s_fu_288_p3;

assign tmp_561_cast_fu_400_p1 = tmp_426_fu_392_p3;

assign tmp_564_cast_fu_321_p3 = {{tmp_427_fu_316_p2}, {2'd0}};

assign tmp_566_cast_fu_548_p1 = tmp_428_fu_540_p3;

assign tmp_569_cast_fu_429_p3 = {{tmp_429_fu_424_p2}, {2'd0}};

assign tmp_570_cast_fu_350_p1 = tmp_430_reg_685;

assign tmp_573_cast_fu_573_p3 = {{tmp_431_fu_568_p2}, {2'd0}};

assign tmp_574_cast_fu_462_p1 = tmp_432_fu_457_p2;

assign tmp_575_cast_fu_602_p1 = tmp_433_fu_597_p2;

assign tmp_577_cast_fu_491_p1 = tmp_434_fu_483_p3;

assign tmp_580_cast_fu_500_p3 = {{tmp_435_fu_495_p2}, {2'd0}};

assign tmp_581_cast_fu_513_p1 = tmp_436_fu_508_p2;

assign tmp_582_cast_fu_523_p1 = $signed(tmp_437_fu_518_p2);

assign tmp_cast_fu_312_p1 = h_reg_139;

assign tmp_fu_283_p1 = co_reg_128;

assign tmp_s_fu_288_p3 = {{co_reg_128}, {2'd0}};

assign w_1_fu_587_p2 = (w6_reg_239 + 3'd1);

assign w_40_fu_335_p2 = (w_reg_150 + 3'd1);

assign w_41_fu_443_p2 = (w3_reg_183 + 3'd1);

assign weight_address0 = tmp_582_cast_fu_523_p1;

always @ (posedge ap_clk) begin
    tmp_556_cast_reg_654[1:0] <= 2'b00;
    tmp_556_cast_reg_654[12] <= 1'b0;
    tmp_564_cast_reg_672[1:0] <= 2'b00;
    tmp_425_reg_698[5:0] <= 6'b000000;
    tmp_561_cast_reg_703[1:0] <= 2'b00;
    tmp_561_cast_reg_703[12] <= 1'b0;
    tmp_136_cast3_reg_716[10:3] <= 8'b00000000;
    tmp_569_cast_reg_721[1:0] <= 2'b00;
    tmp_139_cast2_reg_734[12:3] <= 10'b0000000000;
    tmp_566_cast_reg_795[1:0] <= 2'b00;
    tmp_566_cast_reg_795[12] <= 1'b0;
    tmp_573_cast_reg_808[1:0] <= 2'b00;
end

endmodule //conv_last
