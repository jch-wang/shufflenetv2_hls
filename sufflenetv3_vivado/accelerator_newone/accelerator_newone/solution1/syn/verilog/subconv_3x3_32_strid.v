// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_32_strid (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_state9 = 27'd256;
parameter    ap_ST_fsm_state10 = 27'd512;
parameter    ap_ST_fsm_state11 = 27'd1024;
parameter    ap_ST_fsm_state12 = 27'd2048;
parameter    ap_ST_fsm_state13 = 27'd4096;
parameter    ap_ST_fsm_state14 = 27'd8192;
parameter    ap_ST_fsm_state15 = 27'd16384;
parameter    ap_ST_fsm_state16 = 27'd32768;
parameter    ap_ST_fsm_state17 = 27'd65536;
parameter    ap_ST_fsm_state18 = 27'd131072;
parameter    ap_ST_fsm_state19 = 27'd262144;
parameter    ap_ST_fsm_state20 = 27'd524288;
parameter    ap_ST_fsm_state21 = 27'd1048576;
parameter    ap_ST_fsm_state22 = 27'd2097152;
parameter    ap_ST_fsm_state23 = 27'd4194304;
parameter    ap_ST_fsm_state24 = 27'd8388608;
parameter    ap_ST_fsm_state25 = 27'd16777216;
parameter    ap_ST_fsm_state26 = 27'd33554432;
parameter    ap_ST_fsm_state27 = 27'd67108864;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [7:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [4:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg weight_ce0;
reg bias_ce0;
reg[12:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] co_7_fu_245_p2;
reg   [4:0] co_7_reg_678;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_76_fu_280_p2;
reg   [9:0] tmp_76_reg_683;
wire   [0:0] exitcond7_fu_239_p2;
reg   [4:0] bias_addr_reg_688;
wire   [13:0] tmp_85_fu_321_p2;
reg   [13:0] tmp_85_reg_696;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond6_fu_286_p2;
wire   [13:0] tmp_88_fu_337_p2;
reg   [13:0] tmp_88_reg_704;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond5_fu_327_p2;
wire   [4:0] w_7_fu_342_p2;
reg   [4:0] w_7_reg_709;
wire   [4:0] h_7_fu_348_p2;
wire   [4:0] co_8_fu_364_p2;
reg   [4:0] co_8_reg_722;
wire    ap_CS_fsm_state6;
wire   [10:0] tmp_79_fu_402_p2;
reg   [10:0] tmp_79_reg_727;
wire   [0:0] exitcond4_fu_358_p2;
wire  signed [8:0] tmp_106_cast_fu_426_p1;
reg  signed [8:0] tmp_106_cast_reg_732;
wire   [9:0] tmp_83_fu_442_p2;
reg   [9:0] tmp_83_reg_737;
wire   [5:0] tmp_40_fu_454_p3;
reg   [5:0] tmp_40_reg_745;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond3_fu_448_p2;
wire   [13:0] tmp_87_fu_491_p2;
reg   [13:0] tmp_87_reg_750;
wire   [5:0] tmp_43_fu_503_p3;
reg   [5:0] tmp_43_reg_758;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond2_fu_497_p2;
wire   [4:0] h_8_fu_511_p2;
wire   [1:0] m_4_fu_523_p2;
reg   [1:0] m_4_reg_771;
wire    ap_CS_fsm_state9;
wire   [8:0] tmp_91_fu_544_p2;
reg   [8:0] tmp_91_reg_776;
wire   [0:0] exitcond1_fu_517_p2;
wire   [15:0] tmp_94_fu_594_p2;
reg   [15:0] tmp_94_reg_781;
reg   [12:0] output_addr_4_reg_786;
wire   [4:0] w_8_fu_614_p2;
reg   [4:0] w_8_reg_791;
wire   [1:0] n_4_fu_626_p2;
reg   [1:0] n_4_reg_799;
wire    ap_CS_fsm_state10;
wire   [0:0] exitcond_fu_620_p2;
reg   [31:0] weight_load_reg_814;
wire    ap_CS_fsm_state11;
reg   [31:0] input_load_reg_819;
wire   [31:0] grp_fu_235_p2;
reg   [31:0] tmp_52_reg_824;
wire    ap_CS_fsm_state15;
wire   [31:0] grp_fu_229_p2;
wire    ap_CS_fsm_state20;
reg   [31:0] output_load_reg_834;
wire    ap_CS_fsm_state21;
reg   [31:0] tmp_45_reg_839;
wire    ap_CS_fsm_state26;
reg   [4:0] co_reg_114;
reg   [4:0] h_reg_125;
reg   [4:0] w_reg_137;
wire    ap_CS_fsm_state5;
reg   [4:0] co1_reg_148;
reg   [4:0] h2_reg_159;
reg   [4:0] w3_reg_171;
wire    ap_CS_fsm_state27;
reg   [31:0] sum_reg_183;
reg   [1:0] m_reg_195;
reg   [31:0] sum_1_reg_206;
reg   [1:0] n_reg_218;
wire   [63:0] tmp_fu_251_p1;
wire   [63:0] tmp_118_cast_fu_354_p1;
wire   [63:0] tmp_119_cast_fu_609_p1;
wire   [63:0] tmp_127_cast_fu_641_p1;
wire   [63:0] tmp_128_cast_fu_670_p1;
reg   [31:0] grp_fu_229_p0;
reg   [31:0] grp_fu_229_p1;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state12;
wire   [8:0] tmp_s_fu_256_p3;
wire   [5:0] tmp_75_fu_268_p3;
wire   [9:0] p_shl1_cast_fu_276_p1;
wire   [9:0] p_shl_cast_fu_264_p1;
wire   [9:0] tmp_39_cast_fu_292_p1;
wire   [9:0] tmp_84_fu_296_p2;
wire   [10:0] tmp_72_fu_309_p3;
wire   [13:0] p_shl2_cast_fu_301_p3;
wire   [13:0] p_shl3_cast_fu_317_p1;
wire   [13:0] tmp_42_cast_fu_333_p1;
wire   [9:0] tmp_77_fu_374_p3;
wire   [5:0] tmp_78_fu_386_p3;
wire   [10:0] p_shl8_cast_fu_398_p1;
wire   [10:0] p_shl7_cast_fu_382_p1;
wire   [6:0] tmp_80_fu_408_p3;
wire   [7:0] p_shl6_cast_fu_416_p1;
wire   [7:0] tmp_cast_fu_370_p1;
wire   [7:0] tmp_81_fu_420_p2;
wire   [8:0] tmp_82_fu_430_p3;
wire   [9:0] p_shl8_cast1_fu_394_p1;
wire   [9:0] p_shl4_cast_fu_438_p1;
wire   [9:0] tmp_41_cast_fu_462_p1;
wire   [9:0] tmp_86_fu_466_p2;
wire   [10:0] tmp_73_fu_479_p3;
wire   [13:0] p_shl10_cast_fu_487_p1;
wire   [13:0] p_shl9_cast_fu_471_p3;
wire   [8:0] tmp_46_cast_fu_529_p1;
wire   [8:0] tmp_90_fu_533_p2;
wire   [8:0] tmp_74_fu_538_p2;
wire   [1:0] tmp1_fu_550_p2;
wire  signed [5:0] tmp1_cast_fu_556_p1;
wire   [5:0] tmp_47_fu_560_p2;
wire   [10:0] tmp_48_cast_fu_565_p1;
wire   [10:0] tmp_92_fu_569_p2;
wire   [11:0] tmp_93_fu_582_p3;
wire   [15:0] p_shl12_cast_fu_590_p1;
wire   [15:0] p_shl11_cast_fu_574_p3;
wire   [13:0] tmp_44_cast_fu_600_p1;
wire   [13:0] tmp_89_fu_604_p2;
wire   [8:0] tmp_49_cast_fu_632_p1;
wire   [8:0] tmp_95_fu_636_p2;
wire   [1:0] tmp2_fu_646_p2;
wire  signed [5:0] tmp2_cast_fu_652_p1;
wire   [5:0] tmp_50_fu_656_p2;
wire   [15:0] tmp_51_cast_fu_661_p1;
wire   [15:0] tmp_96_fu_665_p2;
reg   [26:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_x_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_229_p0),
    .din1(grp_fu_229_p1),
    .ce(1'b1),
    .dout(grp_fu_229_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_x_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_814),
    .din1(input_load_reg_819),
    .ce(1'b1),
    .dout(grp_fu_235_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_239_p2 == 1'd1))) begin
        co1_reg_148 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond3_fu_448_p2))) begin
        co1_reg_148 <= co_8_reg_722;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond6_fu_286_p2 == 1'd1))) begin
        co_reg_114 <= co_7_reg_678;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_114 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond4_fu_358_p2))) begin
        h2_reg_159 <= 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond2_fu_497_p2))) begin
        h2_reg_159 <= h_8_fu_511_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_239_p2 == 1'd0))) begin
        h_reg_125 <= 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond5_fu_327_p2 == 1'd1))) begin
        h_reg_125 <= h_7_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond_fu_620_p2))) begin
        m_reg_195 <= m_4_reg_771;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond2_fu_497_p2))) begin
        m_reg_195 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond1_fu_517_p2))) begin
        n_reg_218 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        n_reg_218 <= n_4_reg_799;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond1_fu_517_p2))) begin
        sum_1_reg_206 <= sum_reg_183;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        sum_1_reg_206 <= grp_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond_fu_620_p2))) begin
        sum_reg_183 <= sum_1_reg_206;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond2_fu_497_p2))) begin
        sum_reg_183 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond3_fu_448_p2))) begin
        w3_reg_171 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        w3_reg_171 <= w_8_reg_791;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond6_fu_286_p2))) begin
        w_reg_137 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_reg_137 <= w_7_reg_709;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_239_p2 == 1'd0))) begin
        bias_addr_reg_688 <= tmp_fu_251_p1;
        tmp_76_reg_683[9 : 1] <= tmp_76_fu_280_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_7_reg_678 <= co_7_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        co_8_reg_722 <= co_8_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_load_reg_819 <= input_r_q0;
        weight_load_reg_814 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        m_4_reg_771 <= m_4_fu_523_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        n_4_reg_799 <= n_4_fu_626_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond1_fu_517_p2))) begin
        output_addr_4_reg_786 <= tmp_119_cast_fu_609_p1;
        w_8_reg_791 <= w_8_fu_614_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        output_load_reg_834 <= output_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond4_fu_358_p2))) begin
        tmp_106_cast_reg_732 <= tmp_106_cast_fu_426_p1;
        tmp_79_reg_727[10 : 1] <= tmp_79_fu_402_p2[10 : 1];
        tmp_83_reg_737[9 : 1] <= tmp_83_fu_442_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond3_fu_448_p2))) begin
        tmp_40_reg_745[5 : 1] <= tmp_40_fu_454_p3[5 : 1];
        tmp_87_reg_750[13 : 1] <= tmp_87_fu_491_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond2_fu_497_p2))) begin
        tmp_43_reg_758[5 : 1] <= tmp_43_fu_503_p3[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_45_reg_839 <= grp_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_52_reg_824 <= grp_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond6_fu_286_p2))) begin
        tmp_85_reg_696[13 : 1] <= tmp_85_fu_321_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond5_fu_327_p2))) begin
        tmp_88_reg_704 <= tmp_88_fu_337_p2;
        w_7_reg_709 <= w_7_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond1_fu_517_p2))) begin
        tmp_91_reg_776 <= tmp_91_fu_544_p2;
        tmp_94_reg_781[15 : 1] <= tmp_94_fu_594_p2[15 : 1];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond4_fu_358_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond4_fu_358_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_229_p0 = output_load_reg_834;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_229_p0 = sum_1_reg_206;
    end else begin
        grp_fu_229_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_229_p1 = sum_reg_183;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_229_p1 = tmp_52_reg_824;
    end else begin
        grp_fu_229_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        output_r_address0 = output_addr_4_reg_786;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_address0 = tmp_119_cast_fu_609_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_address0 = tmp_118_cast_fu_354_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state27))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        output_r_d0 = tmp_45_reg_839;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_d0 = bias_q0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state27))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_239_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond6_fu_286_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond5_fu_327_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond4_fu_358_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond3_fu_448_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond2_fu_497_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond1_fu_517_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond_fu_620_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_688;

assign co_7_fu_245_p2 = (co_reg_114 + 5'd1);

assign co_8_fu_364_p2 = (co1_reg_148 + 5'd1);

assign exitcond1_fu_517_p2 = ((m_reg_195 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_497_p2 = ((w3_reg_171 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond3_fu_448_p2 = ((h2_reg_159 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond4_fu_358_p2 = ((co1_reg_148 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond5_fu_327_p2 = ((w_reg_137 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond6_fu_286_p2 = ((h_reg_125 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond7_fu_239_p2 = ((co_reg_114 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond_fu_620_p2 = ((n_reg_218 == 2'd3) ? 1'b1 : 1'b0);

assign h_7_fu_348_p2 = (h_reg_125 + 5'd1);

assign h_8_fu_511_p2 = (h2_reg_159 + 5'd1);

assign input_r_address0 = tmp_128_cast_fu_670_p1;

assign m_4_fu_523_p2 = (m_reg_195 + 2'd1);

assign n_4_fu_626_p2 = (n_reg_218 + 2'd1);

assign p_shl10_cast_fu_487_p1 = tmp_73_fu_479_p3;

assign p_shl11_cast_fu_574_p3 = {{tmp_92_fu_569_p2}, {5'd0}};

assign p_shl12_cast_fu_590_p1 = tmp_93_fu_582_p3;

assign p_shl1_cast_fu_276_p1 = tmp_75_fu_268_p3;

assign p_shl2_cast_fu_301_p3 = {{tmp_84_fu_296_p2}, {4'd0}};

assign p_shl3_cast_fu_317_p1 = tmp_72_fu_309_p3;

assign p_shl4_cast_fu_438_p1 = tmp_82_fu_430_p3;

assign p_shl6_cast_fu_416_p1 = tmp_80_fu_408_p3;

assign p_shl7_cast_fu_382_p1 = tmp_77_fu_374_p3;

assign p_shl8_cast1_fu_394_p1 = tmp_78_fu_386_p3;

assign p_shl8_cast_fu_398_p1 = tmp_78_fu_386_p3;

assign p_shl9_cast_fu_471_p3 = {{tmp_86_fu_466_p2}, {4'd0}};

assign p_shl_cast_fu_264_p1 = tmp_s_fu_256_p3;

assign tmp1_cast_fu_556_p1 = $signed(tmp1_fu_550_p2);

assign tmp1_fu_550_p2 = (m_reg_195 ^ 2'd2);

assign tmp2_cast_fu_652_p1 = $signed(tmp2_fu_646_p2);

assign tmp2_fu_646_p2 = (n_reg_218 ^ 2'd2);

assign tmp_106_cast_fu_426_p1 = $signed(tmp_81_fu_420_p2);

assign tmp_118_cast_fu_354_p1 = tmp_88_reg_704;

assign tmp_119_cast_fu_609_p1 = tmp_89_fu_604_p2;

assign tmp_127_cast_fu_641_p1 = tmp_95_fu_636_p2;

assign tmp_128_cast_fu_670_p1 = tmp_96_fu_665_p2;

assign tmp_39_cast_fu_292_p1 = h_reg_125;

assign tmp_40_fu_454_p3 = {{h2_reg_159}, {1'd0}};

assign tmp_41_cast_fu_462_p1 = h2_reg_159;

assign tmp_42_cast_fu_333_p1 = w_reg_137;

assign tmp_43_fu_503_p3 = {{w3_reg_171}, {1'd0}};

assign tmp_44_cast_fu_600_p1 = w3_reg_171;

assign tmp_46_cast_fu_529_p1 = m_reg_195;

assign tmp_47_fu_560_p2 = ($signed(tmp_40_reg_745) + $signed(tmp1_cast_fu_556_p1));

assign tmp_48_cast_fu_565_p1 = tmp_47_fu_560_p2;

assign tmp_49_cast_fu_632_p1 = n_reg_218;

assign tmp_50_fu_656_p2 = ($signed(tmp_43_reg_758) + $signed(tmp2_cast_fu_652_p1));

assign tmp_51_cast_fu_661_p1 = tmp_50_fu_656_p2;

assign tmp_72_fu_309_p3 = {{tmp_84_fu_296_p2}, {1'd0}};

assign tmp_73_fu_479_p3 = {{tmp_86_fu_466_p2}, {1'd0}};

assign tmp_74_fu_538_p2 = tmp_90_fu_533_p2 << 9'd2;

assign tmp_75_fu_268_p3 = {{co_reg_114}, {1'd0}};

assign tmp_76_fu_280_p2 = (p_shl1_cast_fu_276_p1 + p_shl_cast_fu_264_p1);

assign tmp_77_fu_374_p3 = {{co1_reg_148}, {5'd0}};

assign tmp_78_fu_386_p3 = {{co1_reg_148}, {1'd0}};

assign tmp_79_fu_402_p2 = (p_shl8_cast_fu_398_p1 + p_shl7_cast_fu_382_p1);

assign tmp_80_fu_408_p3 = {{co1_reg_148}, {2'd0}};

assign tmp_81_fu_420_p2 = (p_shl6_cast_fu_416_p1 - tmp_cast_fu_370_p1);

assign tmp_82_fu_430_p3 = {{co1_reg_148}, {4'd0}};

assign tmp_83_fu_442_p2 = (p_shl8_cast1_fu_394_p1 + p_shl4_cast_fu_438_p1);

assign tmp_84_fu_296_p2 = (tmp_39_cast_fu_292_p1 + tmp_76_reg_683);

assign tmp_85_fu_321_p2 = (p_shl2_cast_fu_301_p3 + p_shl3_cast_fu_317_p1);

assign tmp_86_fu_466_p2 = (tmp_83_reg_737 + tmp_41_cast_fu_462_p1);

assign tmp_87_fu_491_p2 = (p_shl10_cast_fu_487_p1 + p_shl9_cast_fu_471_p3);

assign tmp_88_fu_337_p2 = (tmp_85_reg_696 + tmp_42_cast_fu_333_p1);

assign tmp_89_fu_604_p2 = (tmp_87_reg_750 + tmp_44_cast_fu_600_p1);

assign tmp_90_fu_533_p2 = ($signed(tmp_106_cast_reg_732) + $signed(tmp_46_cast_fu_529_p1));

assign tmp_91_fu_544_p2 = (tmp_74_fu_538_p2 - tmp_90_fu_533_p2);

assign tmp_92_fu_569_p2 = (tmp_79_reg_727 + tmp_48_cast_fu_565_p1);

assign tmp_93_fu_582_p3 = {{tmp_92_fu_569_p2}, {1'd0}};

assign tmp_94_fu_594_p2 = (p_shl12_cast_fu_590_p1 + p_shl11_cast_fu_574_p3);

assign tmp_95_fu_636_p2 = (tmp_91_reg_776 + tmp_49_cast_fu_632_p1);

assign tmp_96_fu_665_p2 = (tmp_94_reg_781 + tmp_51_cast_fu_661_p1);

assign tmp_cast_fu_370_p1 = co1_reg_148;

assign tmp_fu_251_p1 = co_reg_114;

assign tmp_s_fu_256_p3 = {{co_reg_114}, {4'd0}};

assign w_7_fu_342_p2 = (w_reg_137 + 5'd1);

assign w_8_fu_614_p2 = (w3_reg_171 + 5'd1);

assign weight_address0 = tmp_127_cast_fu_641_p1;

always @ (posedge ap_clk) begin
    tmp_76_reg_683[0] <= 1'b0;
    tmp_85_reg_696[0] <= 1'b0;
    tmp_79_reg_727[0] <= 1'b0;
    tmp_83_reg_737[0] <= 1'b0;
    tmp_40_reg_745[0] <= 1'b0;
    tmp_87_reg_750[0] <= 1'b0;
    tmp_43_reg_758[0] <= 1'b0;
    tmp_94_reg_781[0] <= 1'b0;
end

endmodule //subconv_3x3_32_strid
