// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_8_stride (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_state9 = 27'd256;
parameter    ap_ST_fsm_state10 = 27'd512;
parameter    ap_ST_fsm_state11 = 27'd1024;
parameter    ap_ST_fsm_state12 = 27'd2048;
parameter    ap_ST_fsm_state13 = 27'd4096;
parameter    ap_ST_fsm_state14 = 27'd8192;
parameter    ap_ST_fsm_state15 = 27'd16384;
parameter    ap_ST_fsm_state16 = 27'd32768;
parameter    ap_ST_fsm_state17 = 27'd65536;
parameter    ap_ST_fsm_state18 = 27'd131072;
parameter    ap_ST_fsm_state19 = 27'd262144;
parameter    ap_ST_fsm_state20 = 27'd524288;
parameter    ap_ST_fsm_state21 = 27'd1048576;
parameter    ap_ST_fsm_state22 = 27'd2097152;
parameter    ap_ST_fsm_state23 = 27'd4194304;
parameter    ap_ST_fsm_state24 = 27'd8388608;
parameter    ap_ST_fsm_state25 = 27'd16777216;
parameter    ap_ST_fsm_state26 = 27'd33554432;
parameter    ap_ST_fsm_state27 = 27'd67108864;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [9:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [6:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [11:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg weight_ce0;
reg bias_ce0;
reg[11:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] co_1_fu_247_p2;
reg   [6:0] co_1_reg_676;
wire    ap_CS_fsm_state2;
wire  signed [11:0] tmp_17_cast_fu_288_p1;
reg  signed [11:0] tmp_17_cast_reg_681;
wire   [0:0] exitcond7_fu_241_p2;
reg   [6:0] bias_addr_reg_686;
wire   [12:0] tmp_17_fu_327_p2;
reg   [12:0] tmp_17_reg_694;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond6_fu_292_p2;
wire   [12:0] tmp_21_fu_343_p2;
reg   [12:0] tmp_21_reg_702;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond5_fu_333_p2;
wire   [2:0] w_1_fu_348_p2;
reg   [2:0] w_1_reg_707;
wire   [2:0] h_1_fu_354_p2;
wire   [6:0] co_2_fu_370_p2;
reg   [6:0] co_2_reg_720;
wire    ap_CS_fsm_state6;
wire   [10:0] tmp_8_fu_404_p2;
reg   [10:0] tmp_8_reg_725;
wire   [0:0] exitcond4_fu_364_p2;
wire  signed [10:0] tmp_22_cast_fu_428_p1;
reg  signed [10:0] tmp_22_cast_reg_730;
wire  signed [11:0] tmp_25_cast_fu_438_p1;
reg  signed [11:0] tmp_25_cast_reg_735;
wire   [3:0] tmp_5_fu_448_p3;
reg   [3:0] tmp_5_reg_743;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond3_fu_442_p2;
wire   [12:0] tmp_20_fu_485_p2;
reg   [12:0] tmp_20_reg_748;
wire   [3:0] tmp_s_fu_497_p3;
reg   [3:0] tmp_s_reg_756;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond2_fu_491_p2;
wire   [2:0] h_2_fu_505_p2;
wire   [1:0] m_1_fu_517_p2;
reg   [1:0] m_1_reg_769;
wire    ap_CS_fsm_state9;
wire   [10:0] tmp_25_fu_538_p2;
reg   [10:0] tmp_25_reg_774;
wire   [0:0] exitcond1_fu_511_p2;
wire   [14:0] tmp_29_fu_592_p2;
reg   [14:0] tmp_29_reg_779;
reg   [11:0] output_addr_1_reg_784;
wire   [2:0] w_2_fu_612_p2;
reg   [2:0] w_2_reg_789;
wire   [1:0] n_1_fu_624_p2;
reg   [1:0] n_1_reg_797;
wire    ap_CS_fsm_state10;
wire   [0:0] exitcond_fu_618_p2;
reg   [31:0] weight_load_reg_812;
wire    ap_CS_fsm_state11;
reg   [31:0] input_load_reg_817;
wire   [31:0] grp_fu_237_p2;
reg   [31:0] tmp_14_reg_822;
wire    ap_CS_fsm_state15;
wire   [31:0] grp_fu_231_p2;
wire    ap_CS_fsm_state20;
reg   [31:0] output_load_reg_832;
wire    ap_CS_fsm_state21;
reg   [31:0] tmp_4_reg_837;
wire    ap_CS_fsm_state26;
reg   [6:0] co_reg_116;
reg   [2:0] h_reg_127;
reg   [2:0] w_reg_139;
wire    ap_CS_fsm_state5;
reg   [6:0] co1_reg_150;
reg   [2:0] h2_reg_161;
reg   [2:0] w3_reg_173;
wire    ap_CS_fsm_state27;
reg   [31:0] sum_reg_185;
reg   [1:0] m_reg_197;
reg   [31:0] sum_1_reg_208;
reg   [1:0] n_reg_220;
wire   [63:0] tmp_fu_253_p1;
wire   [63:0] tmp_34_cast_fu_360_p1;
wire   [63:0] tmp_35_cast_fu_607_p1;
wire   [63:0] tmp_43_cast_fu_639_p1;
wire   [63:0] tmp_44_cast_fu_668_p1;
reg   [31:0] grp_fu_231_p0;
reg   [31:0] grp_fu_231_p1;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state12;
wire   [9:0] tmp_1_fu_258_p3;
wire   [7:0] tmp_2_fu_270_p3;
wire   [10:0] p_shl_cast_fu_266_p1;
wire   [10:0] p_shl1_cast_fu_278_p1;
wire   [10:0] tmp_3_fu_282_p2;
wire   [11:0] tmp_3_cast_fu_298_p1;
wire   [11:0] tmp_15_fu_302_p2;
wire   [9:0] tmp_16_fu_307_p1;
wire   [12:0] p_shl2_cast_fu_311_p3;
wire   [12:0] p_shl3_cast_fu_319_p3;
wire   [12:0] tmp_8_cast_fu_339_p1;
wire   [9:0] tmp_6_fu_380_p3;
wire   [7:0] tmp_7_fu_392_p3;
wire   [10:0] p_shl8_cast_fu_400_p1;
wire   [10:0] p_shl7_cast_fu_388_p1;
wire   [8:0] tmp_10_fu_410_p3;
wire   [9:0] p_shl6_cast_fu_418_p1;
wire   [9:0] tmp_1_cast_fu_376_p1;
wire   [9:0] tmp_11_fu_422_p2;
wire   [10:0] tmp_13_fu_432_p2;
wire   [11:0] tmp_6_cast_fu_456_p1;
wire   [11:0] tmp_18_fu_460_p2;
wire   [9:0] tmp_19_fu_465_p1;
wire   [12:0] p_shl9_cast_fu_469_p3;
wire   [12:0] p_shl10_cast_fu_477_p3;
wire   [10:0] tmp_7_cast_fu_523_p1;
wire   [10:0] tmp_23_fu_527_p2;
wire   [10:0] tmp_24_fu_532_p2;
wire   [1:0] tmp1_fu_544_p2;
wire  signed [3:0] tmp1_cast_fu_550_p1;
wire   [3:0] tmp_9_fu_554_p2;
wire   [10:0] tmp_10_cast_fu_559_p1;
wire   [10:0] tmp_26_fu_563_p2;
wire   [13:0] tmp_27_fu_568_p3;
wire   [11:0] tmp_28_fu_580_p3;
wire   [14:0] p_shl12_cast_fu_588_p1;
wire   [14:0] p_shl11_cast_fu_576_p1;
wire   [12:0] tmp_2_cast_fu_598_p1;
wire   [12:0] tmp_22_fu_602_p2;
wire   [10:0] tmp_11_cast_fu_630_p1;
wire   [10:0] tmp_30_fu_634_p2;
wire   [1:0] tmp2_fu_644_p2;
wire  signed [3:0] tmp2_cast_fu_650_p1;
wire   [3:0] tmp_12_fu_654_p2;
wire   [14:0] tmp_13_cast_fu_659_p1;
wire   [14:0] tmp_31_fu_663_p2;
reg   [26:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_x_U81(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_231_p0),
    .din1(grp_fu_231_p1),
    .ce(1'b1),
    .dout(grp_fu_231_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_x_U82(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_812),
    .din1(input_load_reg_817),
    .ce(1'b1),
    .dout(grp_fu_237_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_241_p2 == 1'd1))) begin
        co1_reg_150 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond3_fu_442_p2))) begin
        co1_reg_150 <= co_2_reg_720;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond6_fu_292_p2 == 1'd1))) begin
        co_reg_116 <= co_1_reg_676;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_116 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond4_fu_364_p2))) begin
        h2_reg_161 <= 3'd1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond2_fu_491_p2))) begin
        h2_reg_161 <= h_2_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_241_p2 == 1'd0))) begin
        h_reg_127 <= 3'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond5_fu_333_p2 == 1'd1))) begin
        h_reg_127 <= h_1_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond_fu_618_p2))) begin
        m_reg_197 <= m_1_reg_769;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond2_fu_491_p2))) begin
        m_reg_197 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond1_fu_511_p2))) begin
        n_reg_220 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        n_reg_220 <= n_1_reg_797;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond1_fu_511_p2))) begin
        sum_1_reg_208 <= sum_reg_185;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        sum_1_reg_208 <= grp_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond_fu_618_p2))) begin
        sum_reg_185 <= sum_1_reg_208;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond2_fu_491_p2))) begin
        sum_reg_185 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond3_fu_442_p2))) begin
        w3_reg_173 <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        w3_reg_173 <= w_2_reg_789;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond6_fu_292_p2))) begin
        w_reg_139 <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_reg_139 <= w_1_reg_707;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_241_p2 == 1'd0))) begin
        bias_addr_reg_686 <= tmp_fu_253_p1;
        tmp_17_cast_reg_681[11 : 1] <= tmp_17_cast_fu_288_p1[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_1_reg_676 <= co_1_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        co_2_reg_720 <= co_2_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_load_reg_817 <= input_r_q0;
        weight_load_reg_812 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        m_1_reg_769 <= m_1_fu_517_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        n_1_reg_797 <= n_1_fu_624_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond1_fu_511_p2))) begin
        output_addr_1_reg_784 <= tmp_35_cast_fu_607_p1;
        w_2_reg_789 <= w_2_fu_612_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        output_load_reg_832 <= output_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_14_reg_822 <= grp_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond6_fu_292_p2))) begin
        tmp_17_reg_694[12 : 1] <= tmp_17_fu_327_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond3_fu_442_p2))) begin
        tmp_20_reg_748[12 : 1] <= tmp_20_fu_485_p2[12 : 1];
        tmp_5_reg_743[3 : 1] <= tmp_5_fu_448_p3[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond5_fu_333_p2))) begin
        tmp_21_reg_702 <= tmp_21_fu_343_p2;
        w_1_reg_707 <= w_1_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond4_fu_364_p2))) begin
        tmp_22_cast_reg_730 <= tmp_22_cast_fu_428_p1;
        tmp_25_cast_reg_735[11 : 1] <= tmp_25_cast_fu_438_p1[11 : 1];
        tmp_8_reg_725[10 : 1] <= tmp_8_fu_404_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond1_fu_511_p2))) begin
        tmp_25_reg_774 <= tmp_25_fu_538_p2;
        tmp_29_reg_779[14 : 1] <= tmp_29_fu_592_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_4_reg_837 <= grp_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond2_fu_491_p2))) begin
        tmp_s_reg_756[3 : 1] <= tmp_s_fu_497_p3[3 : 1];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond4_fu_364_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond4_fu_364_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_231_p0 = output_load_reg_832;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_231_p0 = sum_1_reg_208;
    end else begin
        grp_fu_231_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_231_p1 = sum_reg_185;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_231_p1 = tmp_14_reg_822;
    end else begin
        grp_fu_231_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        output_r_address0 = output_addr_1_reg_784;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_address0 = tmp_35_cast_fu_607_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_address0 = tmp_34_cast_fu_360_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state27))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        output_r_d0 = tmp_4_reg_837;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_d0 = bias_q0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state27))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_241_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond6_fu_292_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond5_fu_333_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond4_fu_364_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond3_fu_442_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond2_fu_491_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond1_fu_511_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond_fu_618_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_686;

assign co_1_fu_247_p2 = (co_reg_116 + 7'd1);

assign co_2_fu_370_p2 = (co1_reg_150 + 7'd1);

assign exitcond1_fu_511_p2 = ((m_reg_197 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_491_p2 = ((w3_reg_173 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond3_fu_442_p2 = ((h2_reg_161 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond4_fu_364_p2 = ((co1_reg_150 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond5_fu_333_p2 = ((w_reg_139 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond6_fu_292_p2 = ((h_reg_127 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond7_fu_241_p2 = ((co_reg_116 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond_fu_618_p2 = ((n_reg_220 == 2'd3) ? 1'b1 : 1'b0);

assign h_1_fu_354_p2 = (h_reg_127 + 3'd1);

assign h_2_fu_505_p2 = (h2_reg_161 + 3'd1);

assign input_r_address0 = tmp_44_cast_fu_668_p1;

assign m_1_fu_517_p2 = (m_reg_197 + 2'd1);

assign n_1_fu_624_p2 = (n_reg_220 + 2'd1);

assign p_shl10_cast_fu_477_p3 = {{tmp_18_fu_460_p2}, {1'd0}};

assign p_shl11_cast_fu_576_p1 = tmp_27_fu_568_p3;

assign p_shl12_cast_fu_588_p1 = tmp_28_fu_580_p3;

assign p_shl1_cast_fu_278_p1 = tmp_2_fu_270_p3;

assign p_shl2_cast_fu_311_p3 = {{tmp_16_fu_307_p1}, {3'd0}};

assign p_shl3_cast_fu_319_p3 = {{tmp_15_fu_302_p2}, {1'd0}};

assign p_shl6_cast_fu_418_p1 = tmp_10_fu_410_p3;

assign p_shl7_cast_fu_388_p1 = tmp_6_fu_380_p3;

assign p_shl8_cast_fu_400_p1 = tmp_7_fu_392_p3;

assign p_shl9_cast_fu_469_p3 = {{tmp_19_fu_465_p1}, {3'd0}};

assign p_shl_cast_fu_266_p1 = tmp_1_fu_258_p3;

assign tmp1_cast_fu_550_p1 = $signed(tmp1_fu_544_p2);

assign tmp1_fu_544_p2 = (m_reg_197 ^ 2'd2);

assign tmp2_cast_fu_650_p1 = $signed(tmp2_fu_644_p2);

assign tmp2_fu_644_p2 = (n_reg_220 ^ 2'd2);

assign tmp_10_cast_fu_559_p1 = tmp_9_fu_554_p2;

assign tmp_10_fu_410_p3 = {{co1_reg_150}, {2'd0}};

assign tmp_11_cast_fu_630_p1 = n_reg_220;

assign tmp_11_fu_422_p2 = (p_shl6_cast_fu_418_p1 - tmp_1_cast_fu_376_p1);

assign tmp_12_fu_654_p2 = ($signed(tmp_s_reg_756) + $signed(tmp2_cast_fu_650_p1));

assign tmp_13_cast_fu_659_p1 = tmp_12_fu_654_p2;

assign tmp_13_fu_432_p2 = (p_shl7_cast_fu_388_p1 - p_shl8_cast_fu_400_p1);

assign tmp_15_fu_302_p2 = ($signed(tmp_3_cast_fu_298_p1) + $signed(tmp_17_cast_reg_681));

assign tmp_16_fu_307_p1 = tmp_15_fu_302_p2[9:0];

assign tmp_17_cast_fu_288_p1 = $signed(tmp_3_fu_282_p2);

assign tmp_17_fu_327_p2 = (p_shl2_cast_fu_311_p3 - p_shl3_cast_fu_319_p3);

assign tmp_18_fu_460_p2 = ($signed(tmp_25_cast_reg_735) + $signed(tmp_6_cast_fu_456_p1));

assign tmp_19_fu_465_p1 = tmp_18_fu_460_p2[9:0];

assign tmp_1_cast_fu_376_p1 = co1_reg_150;

assign tmp_1_fu_258_p3 = {{co_reg_116}, {3'd0}};

assign tmp_20_fu_485_p2 = (p_shl9_cast_fu_469_p3 - p_shl10_cast_fu_477_p3);

assign tmp_21_fu_343_p2 = (tmp_17_reg_694 + tmp_8_cast_fu_339_p1);

assign tmp_22_cast_fu_428_p1 = $signed(tmp_11_fu_422_p2);

assign tmp_22_fu_602_p2 = (tmp_20_reg_748 + tmp_2_cast_fu_598_p1);

assign tmp_23_fu_527_p2 = ($signed(tmp_22_cast_reg_730) + $signed(tmp_7_cast_fu_523_p1));

assign tmp_24_fu_532_p2 = tmp_23_fu_527_p2 << 11'd2;

assign tmp_25_cast_fu_438_p1 = $signed(tmp_13_fu_432_p2);

assign tmp_25_fu_538_p2 = (tmp_24_fu_532_p2 - tmp_23_fu_527_p2);

assign tmp_26_fu_563_p2 = (tmp_8_reg_725 + tmp_10_cast_fu_559_p1);

assign tmp_27_fu_568_p3 = {{tmp_26_fu_563_p2}, {3'd0}};

assign tmp_28_fu_580_p3 = {{tmp_26_fu_563_p2}, {1'd0}};

assign tmp_29_fu_592_p2 = (p_shl12_cast_fu_588_p1 + p_shl11_cast_fu_576_p1);

assign tmp_2_cast_fu_598_p1 = w3_reg_173;

assign tmp_2_fu_270_p3 = {{co_reg_116}, {1'd0}};

assign tmp_30_fu_634_p2 = (tmp_25_reg_774 + tmp_11_cast_fu_630_p1);

assign tmp_31_fu_663_p2 = (tmp_29_reg_779 + tmp_13_cast_fu_659_p1);

assign tmp_34_cast_fu_360_p1 = tmp_21_reg_702;

assign tmp_35_cast_fu_607_p1 = tmp_22_fu_602_p2;

assign tmp_3_cast_fu_298_p1 = h_reg_127;

assign tmp_3_fu_282_p2 = (p_shl_cast_fu_266_p1 - p_shl1_cast_fu_278_p1);

assign tmp_43_cast_fu_639_p1 = tmp_30_fu_634_p2;

assign tmp_44_cast_fu_668_p1 = tmp_31_fu_663_p2;

assign tmp_5_fu_448_p3 = {{h2_reg_161}, {1'd0}};

assign tmp_6_cast_fu_456_p1 = h2_reg_161;

assign tmp_6_fu_380_p3 = {{co1_reg_150}, {3'd0}};

assign tmp_7_cast_fu_523_p1 = m_reg_197;

assign tmp_7_fu_392_p3 = {{co1_reg_150}, {1'd0}};

assign tmp_8_cast_fu_339_p1 = w_reg_139;

assign tmp_8_fu_404_p2 = (p_shl8_cast_fu_400_p1 + p_shl7_cast_fu_388_p1);

assign tmp_9_fu_554_p2 = ($signed(tmp_5_reg_743) + $signed(tmp1_cast_fu_550_p1));

assign tmp_fu_253_p1 = co_reg_116;

assign tmp_s_fu_497_p3 = {{w3_reg_173}, {1'd0}};

assign w_1_fu_348_p2 = (w_reg_139 + 3'd1);

assign w_2_fu_612_p2 = (w3_reg_173 + 3'd1);

assign weight_address0 = tmp_43_cast_fu_639_p1;

always @ (posedge ap_clk) begin
    tmp_17_cast_reg_681[0] <= 1'b0;
    tmp_17_reg_694[0] <= 1'b0;
    tmp_8_reg_725[0] <= 1'b0;
    tmp_25_cast_reg_735[0] <= 1'b0;
    tmp_5_reg_743[0] <= 1'b0;
    tmp_20_reg_748[0] <= 1'b0;
    tmp_s_reg_756[0] <= 1'b0;
    tmp_29_reg_779[0] <= 1'b0;
end

endmodule //subconv_3x3_8_stride
