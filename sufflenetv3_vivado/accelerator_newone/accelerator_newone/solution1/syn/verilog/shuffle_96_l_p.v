// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shuffle_96_l_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        left_r_address0,
        left_r_ce0,
        left_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] left_r_address0;
output   left_r_ce0;
input  [31:0] left_r_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg left_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_327_fu_106_p1;
reg   [0:0] tmp_327_reg_321;
wire    ap_CS_fsm_state2;
wire   [7:0] co_33_fu_116_p2;
reg   [7:0] co_33_reg_328;
wire  signed [11:0] tmp_439_cast_fu_162_p1;
reg  signed [11:0] tmp_439_cast_reg_333;
wire   [0:0] exitcond2_fu_110_p2;
wire  signed [12:0] tmp_442_cast_fu_196_p1;
reg  signed [12:0] tmp_442_cast_reg_338;
wire   [2:0] h_33_fu_206_p2;
reg   [2:0] h_33_reg_346;
wire    ap_CS_fsm_state3;
wire   [12:0] tmp_352_fu_245_p2;
reg   [12:0] tmp_352_reg_351;
wire   [0:0] exitcond1_fu_200_p2;
wire   [13:0] tmp_354_fu_276_p2;
reg   [13:0] tmp_354_reg_356;
wire   [2:0] w_33_fu_288_p2;
reg   [2:0] w_33_reg_364;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_282_p2;
wire   [13:0] tmp_356_fu_312_p2;
reg   [13:0] tmp_356_reg_374;
reg   [7:0] co_reg_73;
reg   [2:0] h_reg_84;
reg   [2:0] w_reg_95;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_451_cast_fu_307_p1;
wire   [63:0] tmp_452_cast_fu_317_p1;
wire   [6:0] tmp_fu_122_p4;
wire   [9:0] tmp_s_fu_132_p3;
wire   [7:0] tmp_346_fu_144_p3;
wire   [10:0] p_shl2_cast_fu_140_p1;
wire   [10:0] p_shl3_cast_fu_152_p1;
wire   [10:0] tmp_347_fu_156_p2;
wire   [10:0] tmp_348_fu_166_p3;
wire   [8:0] tmp_349_fu_178_p3;
wire   [11:0] p_shl_cast_fu_174_p1;
wire   [11:0] p_shl1_cast_fu_186_p1;
wire   [11:0] tmp_350_fu_190_p2;
wire   [11:0] tmp_cast_fu_216_p1;
wire   [11:0] tmp_351_fu_220_p2;
wire   [9:0] tmp_328_fu_225_p1;
wire   [12:0] p_shl6_cast_fu_229_p3;
wire   [12:0] p_shl7_cast_fu_237_p3;
wire   [12:0] tmp_cast9_fu_212_p1;
wire   [12:0] tmp_353_fu_251_p2;
wire   [10:0] tmp_329_fu_256_p1;
wire   [13:0] p_shl4_cast_fu_260_p3;
wire   [13:0] p_shl5_cast_fu_268_p3;
wire   [12:0] tmp_129_cast_fu_298_p1;
wire   [12:0] tmp_355_fu_302_p2;
wire   [13:0] tmp_129_cast8_fu_294_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_200_p2 == 1'd1))) begin
        co_reg_73 <= co_33_reg_328;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_73 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_282_p2 == 1'd1))) begin
        h_reg_84 <= h_33_reg_346;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_110_p2 == 1'd0))) begin
        h_reg_84 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond1_fu_200_p2))) begin
        w_reg_95 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_reg_95 <= w_33_reg_364;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_33_reg_328 <= co_33_fu_116_p2;
        tmp_327_reg_321 <= tmp_327_fu_106_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_33_reg_346 <= h_33_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond1_fu_200_p2))) begin
        tmp_352_reg_351[12 : 1] <= tmp_352_fu_245_p2[12 : 1];
        tmp_354_reg_356[13 : 1] <= tmp_354_fu_276_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_282_p2) & (tmp_327_reg_321 == 1'd0))) begin
        tmp_356_reg_374 <= tmp_356_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_110_p2 == 1'd0))) begin
        tmp_439_cast_reg_333[11 : 1] <= tmp_439_cast_fu_162_p1[11 : 1];
        tmp_442_cast_reg_338[12 : 1] <= tmp_442_cast_fu_196_p1[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_33_reg_364 <= w_33_fu_288_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_110_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_110_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        left_r_ce0 = 1'b1;
    end else begin
        left_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_327_reg_321 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_110_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_200_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_282_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign co_33_fu_116_p2 = (8'd1 + co_reg_73);

assign exitcond1_fu_200_p2 = ((h_reg_84 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond2_fu_110_p2 = ((co_reg_73 == 8'd192) ? 1'b1 : 1'b0);

assign exitcond_fu_282_p2 = ((w_reg_95 == 3'd6) ? 1'b1 : 1'b0);

assign h_33_fu_206_p2 = (h_reg_84 + 3'd1);

assign left_r_address0 = tmp_451_cast_fu_307_p1;

assign output_r_address0 = tmp_452_cast_fu_317_p1;

assign output_r_d0 = left_r_q0;

assign p_shl1_cast_fu_186_p1 = tmp_349_fu_178_p3;

assign p_shl2_cast_fu_140_p1 = tmp_s_fu_132_p3;

assign p_shl3_cast_fu_152_p1 = tmp_346_fu_144_p3;

assign p_shl4_cast_fu_260_p3 = {{tmp_329_fu_256_p1}, {3'd0}};

assign p_shl5_cast_fu_268_p3 = {{tmp_353_fu_251_p2}, {1'd0}};

assign p_shl6_cast_fu_229_p3 = {{tmp_328_fu_225_p1}, {3'd0}};

assign p_shl7_cast_fu_237_p3 = {{tmp_351_fu_220_p2}, {1'd0}};

assign p_shl_cast_fu_174_p1 = tmp_348_fu_166_p3;

assign tmp_129_cast8_fu_294_p1 = w_reg_95;

assign tmp_129_cast_fu_298_p1 = w_reg_95;

assign tmp_327_fu_106_p1 = co_reg_73[0:0];

assign tmp_328_fu_225_p1 = tmp_351_fu_220_p2[9:0];

assign tmp_329_fu_256_p1 = tmp_353_fu_251_p2[10:0];

assign tmp_346_fu_144_p3 = {{tmp_fu_122_p4}, {1'd0}};

assign tmp_347_fu_156_p2 = (p_shl2_cast_fu_140_p1 - p_shl3_cast_fu_152_p1);

assign tmp_348_fu_166_p3 = {{co_reg_73}, {3'd0}};

assign tmp_349_fu_178_p3 = {{co_reg_73}, {1'd0}};

assign tmp_350_fu_190_p2 = (p_shl_cast_fu_174_p1 - p_shl1_cast_fu_186_p1);

assign tmp_351_fu_220_p2 = ($signed(tmp_cast_fu_216_p1) + $signed(tmp_439_cast_reg_333));

assign tmp_352_fu_245_p2 = (p_shl6_cast_fu_229_p3 - p_shl7_cast_fu_237_p3);

assign tmp_353_fu_251_p2 = ($signed(tmp_cast9_fu_212_p1) + $signed(tmp_442_cast_reg_338));

assign tmp_354_fu_276_p2 = (p_shl4_cast_fu_260_p3 - p_shl5_cast_fu_268_p3);

assign tmp_355_fu_302_p2 = (tmp_352_reg_351 + tmp_129_cast_fu_298_p1);

assign tmp_356_fu_312_p2 = (tmp_354_reg_356 + tmp_129_cast8_fu_294_p1);

assign tmp_439_cast_fu_162_p1 = $signed(tmp_347_fu_156_p2);

assign tmp_442_cast_fu_196_p1 = $signed(tmp_350_fu_190_p2);

assign tmp_451_cast_fu_307_p1 = tmp_355_fu_302_p2;

assign tmp_452_cast_fu_317_p1 = tmp_356_reg_374;

assign tmp_cast9_fu_212_p1 = h_reg_84;

assign tmp_cast_fu_216_p1 = h_reg_84;

assign tmp_fu_122_p4 = {{co_reg_73[7:1]}};

assign tmp_s_fu_132_p3 = {{tmp_fu_122_p4}, {3'd0}};

assign w_33_fu_288_p2 = (w_reg_95 + 3'd1);

always @ (posedge ap_clk) begin
    tmp_439_cast_reg_333[0] <= 1'b0;
    tmp_442_cast_reg_338[0] <= 1'b0;
    tmp_352_reg_351[0] <= 1'b0;
    tmp_354_reg_356[0] <= 1'b0;
end

endmodule //shuffle_96_l_p
