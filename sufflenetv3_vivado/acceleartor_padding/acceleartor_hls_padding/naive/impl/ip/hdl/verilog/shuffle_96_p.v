// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shuffle_96_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        left_V_address0,
        left_V_ce0,
        left_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        buffer1_1_96_4x4_p_V_address0,
        buffer1_1_96_4x4_p_V_ce0,
        buffer1_1_96_4x4_p_V_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] left_V_address0;
output   left_V_ce0;
input  [7:0] left_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [11:0] buffer1_1_96_4x4_p_V_address0;
output   buffer1_1_96_4x4_p_V_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg left_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg buffer1_1_96_4x4_p_V_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_246_fu_130_p1;
reg   [0:0] tmp_246_reg_347;
wire    ap_CS_fsm_state2;
wire   [7:0] co_14_fu_140_p2;
reg   [7:0] co_14_reg_354;
wire  signed [12:0] tmp_280_cast_fu_176_p1;
reg  signed [12:0] tmp_280_cast_reg_359;
wire   [0:0] exitcond5_fu_134_p2;
wire  signed [11:0] tmp_285_cast_fu_220_p1;
reg  signed [11:0] tmp_285_cast_reg_364;
wire   [2:0] h_14_fu_230_p2;
reg   [2:0] h_14_reg_372;
wire    ap_CS_fsm_state3;
wire   [12:0] tmp_255_fu_269_p2;
reg   [12:0] tmp_255_reg_377;
wire   [0:0] exitcond4_fu_224_p2;
wire   [13:0] tmp_257_fu_300_p2;
reg   [13:0] tmp_257_reg_382;
wire   [2:0] w_14_fu_312_p2;
reg   [2:0] w_14_reg_390;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_306_p2;
reg   [12:0] output_V_addr_reg_400;
reg   [7:0] co_reg_85;
reg   [2:0] h_reg_96;
reg   [2:0] w_reg_107;
wire    ap_CS_fsm_state5;
reg   [7:0] storemerge_phi_fu_121_p4;
wire   [63:0] tmp_294_cast_fu_331_p1;
wire   [63:0] tmp_295_cast_fu_342_p1;
wire   [10:0] tmp_fu_146_p3;
wire   [8:0] tmp_s_fu_158_p3;
wire   [11:0] p_shl2_cast_fu_154_p1;
wire   [11:0] p_shl3_cast_fu_166_p1;
wire   [11:0] tmp_249_fu_170_p2;
wire   [6:0] tmp_250_fu_180_p4;
wire   [9:0] tmp_251_fu_190_p3;
wire   [7:0] tmp_252_fu_202_p3;
wire   [10:0] p_shl_cast_fu_198_p1;
wire   [10:0] p_shl1_cast_fu_210_p1;
wire   [10:0] tmp_253_fu_214_p2;
wire   [11:0] tmp_cast_fu_240_p1;
wire   [11:0] tmp_254_fu_244_p2;
wire   [9:0] tmp_247_fu_249_p1;
wire   [12:0] p_shl6_cast_fu_253_p3;
wire   [12:0] p_shl7_cast_fu_261_p3;
wire   [12:0] tmp_cast9_fu_236_p1;
wire   [12:0] tmp_256_fu_275_p2;
wire   [10:0] tmp_248_fu_280_p1;
wire   [13:0] p_shl4_cast_fu_284_p3;
wire   [13:0] p_shl5_cast_fu_292_p3;
wire   [12:0] tmp_177_cast_fu_322_p1;
wire   [12:0] tmp_258_fu_326_p2;
wire   [13:0] tmp_177_cast8_fu_318_p1;
wire   [13:0] tmp_259_fu_337_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_224_p2 == 1'd1))) begin
        co_reg_85 <= co_14_reg_354;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_85 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_306_p2 == 1'd1))) begin
        h_reg_96 <= h_14_reg_372;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_134_p2 == 1'd0))) begin
        h_reg_96 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond4_fu_224_p2))) begin
        w_reg_107 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_reg_107 <= w_14_reg_390;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_14_reg_354 <= co_14_fu_140_p2;
        tmp_246_reg_347 <= tmp_246_fu_130_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_14_reg_372 <= h_14_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_306_p2))) begin
        output_V_addr_reg_400 <= tmp_295_cast_fu_342_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond4_fu_224_p2))) begin
        tmp_255_reg_377[12 : 1] <= tmp_255_fu_269_p2[12 : 1];
        tmp_257_reg_382[13 : 1] <= tmp_257_fu_300_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_134_p2 == 1'd0))) begin
        tmp_280_cast_reg_359[12 : 1] <= tmp_280_cast_fu_176_p1[12 : 1];
        tmp_285_cast_reg_364[11 : 1] <= tmp_285_cast_fu_220_p1[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_14_reg_390 <= w_14_fu_312_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_134_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_134_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_96_4x4_p_V_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        left_V_ce0 = 1'b1;
    end else begin
        left_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((tmp_246_reg_347 == 1'd1)) begin
            storemerge_phi_fu_121_p4 = buffer1_1_96_4x4_p_V_q0;
        end else if ((tmp_246_reg_347 == 1'd0)) begin
            storemerge_phi_fu_121_p4 = left_V_q0;
        end else begin
            storemerge_phi_fu_121_p4 = 'bx;
        end
    end else begin
        storemerge_phi_fu_121_p4 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_134_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_224_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_306_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign buffer1_1_96_4x4_p_V_address0 = tmp_294_cast_fu_331_p1;

assign co_14_fu_140_p2 = (8'd1 + co_reg_85);

assign exitcond4_fu_224_p2 = ((h_reg_96 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond5_fu_134_p2 = ((co_reg_85 == 8'd192) ? 1'b1 : 1'b0);

assign exitcond_fu_306_p2 = ((w_reg_107 == 3'd6) ? 1'b1 : 1'b0);

assign h_14_fu_230_p2 = (h_reg_96 + 3'd1);

assign left_V_address0 = tmp_294_cast_fu_331_p1;

assign output_V_address0 = output_V_addr_reg_400;

assign output_V_d0 = storemerge_phi_fu_121_p4;

assign p_shl1_cast_fu_210_p1 = tmp_252_fu_202_p3;

assign p_shl2_cast_fu_154_p1 = tmp_fu_146_p3;

assign p_shl3_cast_fu_166_p1 = tmp_s_fu_158_p3;

assign p_shl4_cast_fu_284_p3 = {{tmp_248_fu_280_p1}, {3'd0}};

assign p_shl5_cast_fu_292_p3 = {{tmp_256_fu_275_p2}, {1'd0}};

assign p_shl6_cast_fu_253_p3 = {{tmp_247_fu_249_p1}, {3'd0}};

assign p_shl7_cast_fu_261_p3 = {{tmp_254_fu_244_p2}, {1'd0}};

assign p_shl_cast_fu_198_p1 = tmp_251_fu_190_p3;

assign tmp_177_cast8_fu_318_p1 = w_reg_107;

assign tmp_177_cast_fu_322_p1 = w_reg_107;

assign tmp_246_fu_130_p1 = co_reg_85[0:0];

assign tmp_247_fu_249_p1 = tmp_254_fu_244_p2[9:0];

assign tmp_248_fu_280_p1 = tmp_256_fu_275_p2[10:0];

assign tmp_249_fu_170_p2 = (p_shl2_cast_fu_154_p1 - p_shl3_cast_fu_166_p1);

assign tmp_250_fu_180_p4 = {{co_reg_85[7:1]}};

assign tmp_251_fu_190_p3 = {{tmp_250_fu_180_p4}, {3'd0}};

assign tmp_252_fu_202_p3 = {{tmp_250_fu_180_p4}, {1'd0}};

assign tmp_253_fu_214_p2 = (p_shl_cast_fu_198_p1 - p_shl1_cast_fu_210_p1);

assign tmp_254_fu_244_p2 = ($signed(tmp_cast_fu_240_p1) + $signed(tmp_285_cast_reg_364));

assign tmp_255_fu_269_p2 = (p_shl6_cast_fu_253_p3 - p_shl7_cast_fu_261_p3);

assign tmp_256_fu_275_p2 = ($signed(tmp_cast9_fu_236_p1) + $signed(tmp_280_cast_reg_359));

assign tmp_257_fu_300_p2 = (p_shl4_cast_fu_284_p3 - p_shl5_cast_fu_292_p3);

assign tmp_258_fu_326_p2 = (tmp_255_reg_377 + tmp_177_cast_fu_322_p1);

assign tmp_259_fu_337_p2 = (tmp_257_reg_382 + tmp_177_cast8_fu_318_p1);

assign tmp_280_cast_fu_176_p1 = $signed(tmp_249_fu_170_p2);

assign tmp_285_cast_fu_220_p1 = $signed(tmp_253_fu_214_p2);

assign tmp_294_cast_fu_331_p1 = tmp_258_fu_326_p2;

assign tmp_295_cast_fu_342_p1 = tmp_259_fu_337_p2;

assign tmp_cast9_fu_236_p1 = h_reg_96;

assign tmp_cast_fu_240_p1 = h_reg_96;

assign tmp_fu_146_p3 = {{co_reg_85}, {3'd0}};

assign tmp_s_fu_158_p3 = {{co_reg_85}, {1'd0}};

assign w_14_fu_312_p2 = (w_reg_107 + 3'd1);

always @ (posedge ap_clk) begin
    tmp_280_cast_reg_359[0] <= 1'b0;
    tmp_285_cast_reg_364[0] <= 1'b0;
    tmp_255_reg_377[0] <= 1'b0;
    tmp_257_reg_382[0] <= 1'b0;
end

endmodule //shuffle_96_p
