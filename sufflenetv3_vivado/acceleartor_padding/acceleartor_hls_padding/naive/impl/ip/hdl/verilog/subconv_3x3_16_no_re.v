// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_16_no_re (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_V_address0;
output   input_V_ce0;
input  [7:0] input_V_q0;
output  [7:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [4:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] co_6_fu_218_p2;
reg   [4:0] co_6_reg_807;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_110_fu_257_p2;
reg   [9:0] tmp_110_reg_812;
wire   [0:0] exitcond3_fu_212_p2;
wire  signed [8:0] tmp_127_cast_fu_281_p1;
reg  signed [8:0] tmp_127_cast_reg_818;
reg   [4:0] bias_V_addr_reg_823;
wire   [13:0] tmp_115_fu_320_p2;
reg   [13:0] tmp_115_reg_831;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond4_fu_285_p2;
wire   [4:0] h_6_fu_332_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond5_fu_326_p2;
wire   [1:0] m_6_fu_344_p2;
reg   [1:0] m_6_reg_847;
wire    ap_CS_fsm_state5;
wire   [8:0] tmp_117_fu_354_p2;
reg   [8:0] tmp_117_reg_852;
wire   [0:0] exitcond6_fu_338_p2;
wire   [9:0] tmp_120_fu_379_p2;
reg   [9:0] tmp_120_reg_858;
wire   [8:0] tmp_119_fu_389_p2;
reg   [8:0] tmp_119_reg_864;
wire    ap_CS_fsm_state6;
wire   [13:0] tmp_122_fu_412_p2;
reg   [13:0] tmp_122_reg_869;
wire   [1:0] n_6_fu_424_p2;
reg   [1:0] n_6_reg_877;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond_fu_418_p2;
wire   [13:0] tmp_124_fu_464_p2;
reg   [13:0] tmp_124_reg_887;
wire    ap_CS_fsm_state8;
reg   [7:0] weight_V_load_reg_897;
reg   [7:0] input_V_load_reg_902;
wire    ap_CS_fsm_state9;
wire   [15:0] p_Val2_5_fu_479_p2;
reg   [15:0] p_Val2_5_reg_907;
wire    ap_CS_fsm_state10;
reg   [0:0] tmp_126_reg_912;
wire   [15:0] p_Val2_41_fu_505_p2;
reg   [15:0] p_Val2_41_reg_917;
wire    ap_CS_fsm_state11;
reg   [0:0] signbit_reg_922;
wire   [7:0] p_Val2_43_fu_539_p2;
reg   [7:0] p_Val2_43_reg_929;
wire   [0:0] newsignbit_fu_545_p3;
reg   [0:0] newsignbit_reg_935;
wire   [0:0] carry_fu_559_p2;
reg   [0:0] carry_reg_941;
reg   [1:0] tmp_102_reg_948;
wire   [0:0] p_38_i_i_fu_617_p2;
reg   [0:0] p_38_i_i_reg_954;
wire    ap_CS_fsm_state12;
wire   [0:0] tmp_103_fu_633_p2;
reg   [0:0] tmp_103_reg_959;
wire   [0:0] brmerge40_demorgan_i_fu_644_p2;
reg   [0:0] brmerge40_demorgan_i_reg_964;
wire   [0:0] underflow_fu_661_p2;
reg   [0:0] underflow_reg_969;
wire   [0:0] brmerge_i_i_i_fu_666_p2;
reg   [0:0] brmerge_i_i_i_reg_974;
wire   [7:0] sum_V_fu_693_p3;
wire    ap_CS_fsm_state13;
reg   [0:0] isneg_reg_984;
wire    ap_CS_fsm_state14;
wire   [7:0] result_V_fu_723_p2;
reg   [7:0] result_V_reg_991;
reg   [0:0] newsignbit_6_reg_997;
wire   [4:0] w_6_fu_798_p2;
wire    ap_CS_fsm_state15;
reg   [4:0] co_reg_131;
reg   [4:0] h_reg_142;
reg   [4:0] w_reg_154;
reg   [7:0] p_Val2_s_reg_166;
reg   [1:0] m_reg_178;
reg   [7:0] p_Val2_40_reg_189;
reg   [1:0] n_reg_201;
wire   [63:0] tmp_fu_224_p1;
wire   [63:0] tmp_140_cast_fu_439_p1;
wire   [63:0] tmp_141_cast_fu_469_p1;
wire   [63:0] tmp_132_cast_fu_793_p1;
wire   [8:0] tmp_s_fu_233_p3;
wire   [5:0] tmp_109_fu_245_p3;
wire   [9:0] p_shl2_cast_fu_253_p1;
wire   [9:0] p_shl1_cast_fu_241_p1;
wire   [6:0] tmp_111_fu_263_p3;
wire   [7:0] p_shl_cast_fu_271_p1;
wire   [7:0] tmp_cast_fu_229_p1;
wire   [7:0] tmp_112_fu_275_p2;
wire   [9:0] tmp_cast_43_fu_291_p1;
wire   [9:0] tmp_113_fu_295_p2;
wire   [10:0] tmp_114_fu_308_p3;
wire   [13:0] p_shl3_cast_fu_300_p3;
wire   [13:0] p_shl4_cast_fu_316_p1;
wire   [8:0] tmp_92_cast_fu_350_p1;
wire   [1:0] tmp2_fu_359_p2;
wire  signed [4:0] tmp2_cast_fu_365_p1;
wire   [4:0] tmp_93_fu_369_p2;
wire   [9:0] tmp_94_cast_fu_375_p1;
wire   [8:0] tmp_118_fu_384_p2;
wire   [10:0] tmp_121_fu_401_p3;
wire   [13:0] p_shl6_cast_fu_408_p1;
wire   [13:0] p_shl5_cast_fu_394_p3;
wire   [8:0] tmp_95_cast_fu_430_p1;
wire   [8:0] tmp_123_fu_434_p2;
wire   [1:0] tmp3_fu_444_p2;
wire  signed [4:0] tmp3_cast_fu_450_p1;
wire   [4:0] tmp_96_fu_454_p2;
wire   [13:0] tmp_97_cast_fu_460_p1;
wire  signed [7:0] p_Val2_5_fu_479_p0;
wire  signed [7:0] p_Val2_5_fu_479_p1;
wire   [13:0] tmp_98_fu_493_p3;
wire  signed [15:0] tmp_130_cast_fu_501_p1;
wire   [7:0] p_Val2_42_fu_518_p4;
wire   [7:0] tmp_99_fu_528_p1;
wire   [0:0] tmp_127_fu_531_p3;
wire   [0:0] tmp_100_fu_553_p2;
wire   [0:0] Range1_all_ones_fu_582_p2;
wire   [0:0] Range1_all_zeros_fu_587_p2;
wire   [0:0] tmp_129_fu_575_p3;
wire   [0:0] tmp_101_fu_599_p2;
wire   [0:0] p_41_i_i_fu_605_p2;
wire   [0:0] deleted_zeros_fu_592_p3;
wire   [0:0] p_not_i_i_fu_622_p2;
wire   [0:0] brmerge_i_i6_fu_628_p2;
wire   [0:0] deleted_ones_fu_610_p3;
wire   [0:0] tmp4_demorgan_fu_649_p2;
wire   [0:0] tmp4_fu_655_p2;
wire   [0:0] overflow_fu_638_p2;
wire   [0:0] tmp5_fu_672_p2;
wire   [0:0] underflow_not_fu_676_p2;
wire   [7:0] p_Val2_48_mux_fu_681_p3;
wire   [7:0] p_Val2_s_47_fu_687_p3;
wire  signed [8:0] tmp_88_fu_701_p1;
wire  signed [8:0] tmp_89_fu_705_p1;
wire   [8:0] p_Val2_38_fu_709_p2;
wire   [0:0] tmp_90_fu_737_p2;
wire   [0:0] isneg_not_fu_751_p2;
wire   [0:0] brmerge_i_i_fu_747_p2;
wire   [0:0] underflow_6_fu_742_p2;
wire   [0:0] brmerge9_fu_756_p2;
wire   [7:0] result_V_mux_fu_761_p3;
wire   [7:0] p_result_V_fu_768_p3;
wire   [13:0] tmp_91_cast_fu_784_p1;
wire   [13:0] tmp_116_fu_788_p2;
reg   [14:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_285_p2 == 1'd1))) begin
        co_reg_131 <= co_6_reg_807;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_131 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_212_p2 == 1'd0))) begin
        h_reg_142 <= 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond5_fu_326_p2 == 1'd1))) begin
        h_reg_142 <= h_6_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond5_fu_326_p2))) begin
        m_reg_178 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_418_p2))) begin
        m_reg_178 <= m_6_reg_847;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        n_reg_201 <= n_6_reg_877;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        n_reg_201 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        p_Val2_40_reg_189 <= sum_V_fu_693_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_40_reg_189 <= p_Val2_s_reg_166;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond5_fu_326_p2))) begin
        p_Val2_s_reg_166 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_418_p2))) begin
        p_Val2_s_reg_166 <= p_Val2_40_reg_189;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond4_fu_285_p2))) begin
        w_reg_154 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        w_reg_154 <= w_6_fu_798_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_212_p2 == 1'd0))) begin
        bias_V_addr_reg_823 <= tmp_fu_224_p1;
        tmp_110_reg_812[9 : 1] <= tmp_110_fu_257_p2[9 : 1];
        tmp_127_cast_reg_818 <= tmp_127_cast_fu_281_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        brmerge40_demorgan_i_reg_964 <= brmerge40_demorgan_i_fu_644_p2;
        brmerge_i_i_i_reg_974 <= brmerge_i_i_i_fu_666_p2;
        p_38_i_i_reg_954 <= p_38_i_i_fu_617_p2;
        tmp_103_reg_959 <= tmp_103_fu_633_p2;
        underflow_reg_969 <= underflow_fu_661_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        carry_reg_941 <= carry_fu_559_p2;
        newsignbit_reg_935 <= p_Val2_43_fu_539_p2[32'd7];
        p_Val2_41_reg_917 <= p_Val2_41_fu_505_p2;
        p_Val2_43_reg_929 <= p_Val2_43_fu_539_p2;
        signbit_reg_922 <= p_Val2_41_fu_505_p2[32'd15];
        tmp_102_reg_948 <= {{p_Val2_41_fu_505_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_6_reg_807 <= co_6_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_V_load_reg_902 <= input_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        isneg_reg_984 <= p_Val2_38_fu_709_p2[32'd8];
        newsignbit_6_reg_997 <= result_V_fu_723_p2[32'd7];
        result_V_reg_991 <= result_V_fu_723_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_6_reg_847 <= m_6_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        n_6_reg_877 <= n_6_fu_424_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Val2_5_reg_907 <= p_Val2_5_fu_479_p2;
        tmp_126_reg_912 <= p_Val2_5_fu_479_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond4_fu_285_p2))) begin
        tmp_115_reg_831[13 : 1] <= tmp_115_fu_320_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond6_fu_338_p2))) begin
        tmp_117_reg_852 <= tmp_117_fu_354_p2;
        tmp_120_reg_858 <= tmp_120_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_119_reg_864 <= tmp_119_fu_389_p2;
        tmp_122_reg_869[13 : 1] <= tmp_122_fu_412_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond_fu_418_p2))) begin
        tmp_124_reg_887 <= tmp_124_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        weight_V_load_reg_897 <= weight_V_q0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_212_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_212_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_212_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_285_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond5_fu_326_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond6_fu_338_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_418_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_582_p2 = ((tmp_102_reg_948 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_587_p2 = ((tmp_102_reg_948 == 2'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_823;

assign brmerge40_demorgan_i_fu_644_p2 = (newsignbit_reg_935 & deleted_ones_fu_610_p3);

assign brmerge9_fu_756_p2 = (newsignbit_6_reg_997 | isneg_not_fu_751_p2);

assign brmerge_i_i6_fu_628_p2 = (newsignbit_reg_935 | p_not_i_i_fu_622_p2);

assign brmerge_i_i_fu_747_p2 = (isneg_reg_984 ^ newsignbit_6_reg_997);

assign brmerge_i_i_i_fu_666_p2 = (underflow_fu_661_p2 | overflow_fu_638_p2);

assign carry_fu_559_p2 = (tmp_127_fu_531_p3 & tmp_100_fu_553_p2);

assign co_6_fu_218_p2 = (co_reg_131 + 5'd1);

assign deleted_ones_fu_610_p3 = ((carry_reg_941[0:0] === 1'b1) ? p_41_i_i_fu_605_p2 : Range1_all_ones_fu_582_p2);

assign deleted_zeros_fu_592_p3 = ((carry_reg_941[0:0] === 1'b1) ? Range1_all_ones_fu_582_p2 : Range1_all_zeros_fu_587_p2);

assign exitcond3_fu_212_p2 = ((co_reg_131 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond4_fu_285_p2 = ((h_reg_142 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond5_fu_326_p2 = ((w_reg_154 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond6_fu_338_p2 = ((m_reg_178 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_418_p2 = ((n_reg_201 == 2'd3) ? 1'b1 : 1'b0);

assign h_6_fu_332_p2 = (h_reg_142 + 5'd1);

assign input_V_address0 = tmp_141_cast_fu_469_p1;

assign isneg_not_fu_751_p2 = (isneg_reg_984 ^ 1'd1);

assign m_6_fu_344_p2 = (m_reg_178 + 2'd1);

assign n_6_fu_424_p2 = (n_reg_201 + 2'd1);

assign newsignbit_fu_545_p3 = p_Val2_43_fu_539_p2[32'd7];

assign output_V_address0 = tmp_132_cast_fu_793_p1;

assign output_V_d0 = ((brmerge9_fu_756_p2[0:0] === 1'b1) ? result_V_mux_fu_761_p3 : p_result_V_fu_768_p3);

assign overflow_fu_638_p2 = (brmerge_i_i6_fu_628_p2 & tmp_103_fu_633_p2);

assign p_38_i_i_fu_617_p2 = (carry_reg_941 & Range1_all_ones_fu_582_p2);

assign p_41_i_i_fu_605_p2 = (signbit_reg_922 & tmp_101_fu_599_p2);

assign p_Val2_38_fu_709_p2 = ($signed(tmp_88_fu_701_p1) + $signed(tmp_89_fu_705_p1));

assign p_Val2_41_fu_505_p2 = ($signed(tmp_130_cast_fu_501_p1) + $signed(p_Val2_5_reg_907));

assign p_Val2_42_fu_518_p4 = {{p_Val2_41_fu_505_p2[13:6]}};

assign p_Val2_43_fu_539_p2 = (p_Val2_42_fu_518_p4 + tmp_99_fu_528_p1);

assign p_Val2_48_mux_fu_681_p3 = ((brmerge_i_i_i_reg_974[0:0] === 1'b1) ? 8'd127 : p_Val2_43_reg_929);

assign p_Val2_5_fu_479_p0 = weight_V_load_reg_897;

assign p_Val2_5_fu_479_p1 = input_V_load_reg_902;

assign p_Val2_5_fu_479_p2 = ($signed(p_Val2_5_fu_479_p0) * $signed(p_Val2_5_fu_479_p1));

assign p_Val2_s_47_fu_687_p3 = ((underflow_reg_969[0:0] === 1'b1) ? 8'd128 : p_Val2_43_reg_929);

assign p_not_i_i_fu_622_p2 = (deleted_zeros_fu_592_p3 ^ 1'd1);

assign p_result_V_fu_768_p3 = ((underflow_6_fu_742_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_991);

assign p_shl1_cast_fu_241_p1 = tmp_s_fu_233_p3;

assign p_shl2_cast_fu_253_p1 = tmp_109_fu_245_p3;

assign p_shl3_cast_fu_300_p3 = {{tmp_113_fu_295_p2}, {4'd0}};

assign p_shl4_cast_fu_316_p1 = tmp_114_fu_308_p3;

assign p_shl5_cast_fu_394_p3 = {{tmp_120_reg_858}, {4'd0}};

assign p_shl6_cast_fu_408_p1 = tmp_121_fu_401_p3;

assign p_shl_cast_fu_271_p1 = tmp_111_fu_263_p3;

assign result_V_fu_723_p2 = (p_Val2_s_reg_166 + bias_V_q0);

assign result_V_mux_fu_761_p3 = ((brmerge_i_i_fu_747_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_991);

assign sum_V_fu_693_p3 = ((underflow_not_fu_676_p2[0:0] === 1'b1) ? p_Val2_48_mux_fu_681_p3 : p_Val2_s_47_fu_687_p3);

assign tmp2_cast_fu_365_p1 = $signed(tmp2_fu_359_p2);

assign tmp2_fu_359_p2 = ($signed(2'd3) + $signed(m_reg_178));

assign tmp3_cast_fu_450_p1 = $signed(tmp3_fu_444_p2);

assign tmp3_fu_444_p2 = ($signed(n_reg_201) + $signed(2'd3));

assign tmp4_demorgan_fu_649_p2 = (p_38_i_i_fu_617_p2 | brmerge40_demorgan_i_fu_644_p2);

assign tmp4_fu_655_p2 = (tmp4_demorgan_fu_649_p2 ^ 1'd1);

assign tmp5_fu_672_p2 = (brmerge40_demorgan_i_reg_964 | tmp_103_reg_959);

assign tmp_100_fu_553_p2 = (newsignbit_fu_545_p3 ^ 1'd1);

assign tmp_101_fu_599_p2 = (tmp_129_fu_575_p3 ^ 1'd1);

assign tmp_103_fu_633_p2 = (signbit_reg_922 ^ 1'd1);

assign tmp_109_fu_245_p3 = {{co_reg_131}, {1'd0}};

assign tmp_110_fu_257_p2 = (p_shl2_cast_fu_253_p1 + p_shl1_cast_fu_241_p1);

assign tmp_111_fu_263_p3 = {{co_reg_131}, {2'd0}};

assign tmp_112_fu_275_p2 = (p_shl_cast_fu_271_p1 - tmp_cast_fu_229_p1);

assign tmp_113_fu_295_p2 = (tmp_cast_43_fu_291_p1 + tmp_110_reg_812);

assign tmp_114_fu_308_p3 = {{tmp_113_fu_295_p2}, {1'd0}};

assign tmp_115_fu_320_p2 = (p_shl3_cast_fu_300_p3 + p_shl4_cast_fu_316_p1);

assign tmp_116_fu_788_p2 = (tmp_115_reg_831 + tmp_91_cast_fu_784_p1);

assign tmp_117_fu_354_p2 = ($signed(tmp_127_cast_reg_818) + $signed(tmp_92_cast_fu_350_p1));

assign tmp_118_fu_384_p2 = tmp_117_reg_852 << 9'd2;

assign tmp_119_fu_389_p2 = (tmp_118_fu_384_p2 - tmp_117_reg_852);

assign tmp_120_fu_379_p2 = (tmp_110_reg_812 + tmp_94_cast_fu_375_p1);

assign tmp_121_fu_401_p3 = {{tmp_120_reg_858}, {1'd0}};

assign tmp_122_fu_412_p2 = (p_shl6_cast_fu_408_p1 + p_shl5_cast_fu_394_p3);

assign tmp_123_fu_434_p2 = (tmp_95_cast_fu_430_p1 + tmp_119_reg_864);

assign tmp_124_fu_464_p2 = (tmp_97_cast_fu_460_p1 + tmp_122_reg_869);

assign tmp_127_cast_fu_281_p1 = $signed(tmp_112_fu_275_p2);

assign tmp_127_fu_531_p3 = p_Val2_41_fu_505_p2[32'd13];

assign tmp_129_fu_575_p3 = p_Val2_41_reg_917[32'd14];

assign tmp_130_cast_fu_501_p1 = $signed(tmp_98_fu_493_p3);

assign tmp_132_cast_fu_793_p1 = tmp_116_fu_788_p2;

assign tmp_140_cast_fu_439_p1 = tmp_123_fu_434_p2;

assign tmp_141_cast_fu_469_p1 = tmp_124_reg_887;

assign tmp_88_fu_701_p1 = $signed(p_Val2_s_reg_166);

assign tmp_89_fu_705_p1 = $signed(bias_V_q0);

assign tmp_90_fu_737_p2 = (newsignbit_6_reg_997 ^ 1'd1);

assign tmp_91_cast_fu_784_p1 = w_reg_154;

assign tmp_92_cast_fu_350_p1 = m_reg_178;

assign tmp_93_fu_369_p2 = ($signed(h_reg_142) + $signed(tmp2_cast_fu_365_p1));

assign tmp_94_cast_fu_375_p1 = tmp_93_fu_369_p2;

assign tmp_95_cast_fu_430_p1 = n_reg_201;

assign tmp_96_fu_454_p2 = ($signed(tmp3_cast_fu_450_p1) + $signed(w_reg_154));

assign tmp_97_cast_fu_460_p1 = tmp_96_fu_454_p2;

assign tmp_98_fu_493_p3 = {{p_Val2_40_reg_189}, {6'd0}};

assign tmp_99_fu_528_p1 = tmp_126_reg_912;

assign tmp_cast_43_fu_291_p1 = h_reg_142;

assign tmp_cast_fu_229_p1 = co_reg_131;

assign tmp_fu_224_p1 = co_reg_131;

assign tmp_s_fu_233_p3 = {{co_reg_131}, {4'd0}};

assign underflow_6_fu_742_p2 = (isneg_reg_984 & tmp_90_fu_737_p2);

assign underflow_fu_661_p2 = (signbit_reg_922 & tmp4_fu_655_p2);

assign underflow_not_fu_676_p2 = (tmp5_fu_672_p2 | p_38_i_i_reg_954);

assign w_6_fu_798_p2 = (w_reg_154 + 5'd1);

assign weight_V_address0 = tmp_140_cast_fu_439_p1;

always @ (posedge ap_clk) begin
    tmp_110_reg_812[0] <= 1'b0;
    tmp_115_reg_831[0] <= 1'b0;
    tmp_122_reg_869[0] <= 1'b0;
end

endmodule //subconv_3x3_16_no_re
