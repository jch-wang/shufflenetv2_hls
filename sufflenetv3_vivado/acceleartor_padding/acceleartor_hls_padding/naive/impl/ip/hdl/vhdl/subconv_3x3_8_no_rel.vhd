-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_8_no_rel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_8_no_rel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_2_fu_218_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal co_2_reg_815 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_37_fu_257_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_37_reg_820 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond5_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_cast_fu_281_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_45_cast_reg_826 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_V_addr_reg_831 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_43_fu_324_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_43_reg_839 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond6_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_2_fu_336_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond7_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_2_fu_348_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_2_reg_855 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_45_fu_358_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_45_reg_860 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond8_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_383_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_48_reg_866 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_47_fu_393_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_47_reg_872 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_51_fu_420_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_51_reg_877 : STD_LOGIC_VECTOR (13 downto 0);
    signal n_2_fu_432_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_2_reg_885 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_472_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_53_reg_895 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal weight_V_load_reg_905 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_V_load_reg_910 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_Val2_1_fu_487_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_reg_915 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_55_reg_920 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_13_fu_513_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_13_reg_925 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal signbit_reg_930 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_15_fu_547_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_15_reg_937 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_553_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_943 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_949 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_reg_956 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_962 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_35_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_reg_967 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_972 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_977 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_982 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_701_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal isneg_reg_992 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal result_V_fu_731_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_999 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_2_reg_1005 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_2_fu_806_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal co_reg_131 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_reg_142 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_154 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_s_reg_166 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_178 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_12_reg_189 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_201 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_cast_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_cast_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_cast_fu_801_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_233_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_36_fu_245_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_fu_253_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_cast_fu_241_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_38_fu_263_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_271_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_fu_229_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_39_fu_275_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_21_fu_291_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_40_fu_295_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_41_fu_300_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_42_fu_312_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_308_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl4_cast_fu_320_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_24_cast_fu_354_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp2_fu_363_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_369_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_25_fu_373_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_26_cast_fu_379_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_46_fu_388_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_49_fu_398_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_50_fu_409_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_fu_416_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl5_cast_fu_405_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_cast_fu_438_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_52_fu_442_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp3_fu_452_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_458_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_28_fu_462_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_29_cast_fu_468_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_1_fu_487_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_fu_487_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_501_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_38_cast_fu_509_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_14_fu_526_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_536_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_56_fu_539_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_583_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_600_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i2_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_618_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_16_mux_fu_689_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_25_fu_695_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_709_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_21_fu_713_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_10_fu_717_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_22_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_769_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_776_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_cast_fu_792_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_44_fu_796_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond6_fu_285_p2 = ap_const_lv1_1))) then 
                co_reg_131 <= co_2_reg_815;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_131 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    h_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_212_p2 = ap_const_lv1_0))) then 
                h_reg_142 <= ap_const_lv4_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_330_p2 = ap_const_lv1_1))) then 
                h_reg_142 <= h_2_fu_336_p2;
            end if; 
        end if;
    end process;

    m_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond7_fu_330_p2))) then 
                m_reg_178 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_426_p2))) then 
                m_reg_178 <= m_2_reg_855;
            end if; 
        end if;
    end process;

    n_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                n_reg_201 <= n_2_reg_885;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                n_reg_201 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_12_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                p_Val2_12_reg_189 <= sum_V_fu_701_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_12_reg_189 <= p_Val2_s_reg_166;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond7_fu_330_p2))) then 
                p_Val2_s_reg_166 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_426_p2))) then 
                p_Val2_s_reg_166 <= p_Val2_12_reg_189;
            end if; 
        end if;
    end process;

    w_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_285_p2))) then 
                w_reg_154 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                w_reg_154 <= w_2_fu_806_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_212_p2 = ap_const_lv1_0))) then
                bias_V_addr_reg_831 <= tmp_fu_224_p1(6 - 1 downto 0);
                    tmp_37_reg_820(9 downto 1) <= tmp_37_fu_257_p2(9 downto 1);
                tmp_45_cast_reg_826 <= tmp_45_cast_fu_281_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                brmerge40_demorgan_i_reg_972 <= brmerge40_demorgan_i_fu_652_p2;
                brmerge_i_i_i_reg_982 <= brmerge_i_i_i_fu_674_p2;
                p_38_i_i_reg_962 <= p_38_i_i_fu_625_p2;
                tmp_35_reg_967 <= tmp_35_fu_641_p2;
                underflow_reg_977 <= underflow_fu_669_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                carry_reg_949 <= carry_fu_567_p2;
                newsignbit_reg_943 <= p_Val2_15_fu_547_p2(7 downto 7);
                p_Val2_13_reg_925 <= p_Val2_13_fu_513_p2;
                p_Val2_15_reg_937 <= p_Val2_15_fu_547_p2;
                signbit_reg_930 <= p_Val2_13_fu_513_p2(15 downto 15);
                tmp_34_reg_956 <= p_Val2_13_fu_513_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_2_reg_815 <= co_2_fu_218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                input_V_load_reg_910 <= input_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                isneg_reg_992 <= p_Val2_10_fu_717_p2(8 downto 8);
                newsignbit_2_reg_1005 <= result_V_fu_731_p2(7 downto 7);
                result_V_reg_999 <= result_V_fu_731_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_2_reg_855 <= m_2_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                n_2_reg_885 <= n_2_fu_432_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_Val2_1_reg_915 <= p_Val2_1_fu_487_p2;
                tmp_55_reg_920 <= p_Val2_1_fu_487_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_285_p2))) then
                    tmp_43_reg_839(13 downto 1) <= tmp_43_fu_324_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond8_fu_342_p2))) then
                tmp_45_reg_860 <= tmp_45_fu_358_p2;
                tmp_48_reg_866 <= tmp_48_fu_383_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_47_reg_872 <= tmp_47_fu_393_p2;
                    tmp_51_reg_877(13 downto 1) <= tmp_51_fu_420_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond_fu_426_p2))) then
                tmp_53_reg_895 <= tmp_53_fu_472_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                weight_V_load_reg_905 <= weight_V_q0;
            end if;
        end if;
    end process;
    tmp_37_reg_820(0) <= '0';
    tmp_43_reg_839(0) <= '0';
    tmp_51_reg_877(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_212_p2, ap_CS_fsm_state3, exitcond6_fu_285_p2, ap_CS_fsm_state4, exitcond7_fu_330_p2, ap_CS_fsm_state5, exitcond8_fu_342_p2, ap_CS_fsm_state7, exitcond_fu_426_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_212_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond6_fu_285_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_330_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond8_fu_342_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_426_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_590_p2 <= "1" when (tmp_34_reg_956 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_595_p2 <= "1" when (tmp_34_reg_956 = ap_const_lv2_0) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_212_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_212_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_212_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_212_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_831;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_652_p2 <= (newsignbit_reg_943 and deleted_ones_fu_618_p3);
    brmerge9_fu_764_p2 <= (newsignbit_2_reg_1005 or isneg_not_fu_759_p2);
    brmerge_i_i2_fu_636_p2 <= (newsignbit_reg_943 or p_not_i_i_fu_630_p2);
    brmerge_i_i_fu_755_p2 <= (isneg_reg_992 xor newsignbit_2_reg_1005);
    brmerge_i_i_i_fu_674_p2 <= (underflow_fu_669_p2 or overflow_fu_646_p2);
    carry_fu_567_p2 <= (tmp_56_fu_539_p3 and tmp_32_fu_561_p2);
    co_2_fu_218_p2 <= std_logic_vector(unsigned(co_reg_131) + unsigned(ap_const_lv6_1));
    deleted_ones_fu_618_p3 <= 
        p_41_i_i_fu_613_p2 when (carry_reg_949(0) = '1') else 
        Range1_all_ones_fu_590_p2;
    deleted_zeros_fu_600_p3 <= 
        Range1_all_ones_fu_590_p2 when (carry_reg_949(0) = '1') else 
        Range1_all_zeros_fu_595_p2;
    exitcond5_fu_212_p2 <= "1" when (co_reg_131 = ap_const_lv6_30) else "0";
    exitcond6_fu_285_p2 <= "1" when (h_reg_142 = ap_const_lv4_9) else "0";
    exitcond7_fu_330_p2 <= "1" when (w_reg_154 = ap_const_lv4_9) else "0";
    exitcond8_fu_342_p2 <= "1" when (m_reg_178 = ap_const_lv2_3) else "0";
    exitcond_fu_426_p2 <= "1" when (n_reg_201 = ap_const_lv2_3) else "0";
    h_2_fu_336_p2 <= std_logic_vector(unsigned(h_reg_142) + unsigned(ap_const_lv4_1));
    input_V_address0 <= tmp_59_cast_fu_477_p1(13 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isneg_not_fu_759_p2 <= (isneg_reg_992 xor ap_const_lv1_1);
    m_2_fu_348_p2 <= std_logic_vector(unsigned(m_reg_178) + unsigned(ap_const_lv2_1));
    n_2_fu_432_p2 <= std_logic_vector(unsigned(n_reg_201) + unsigned(ap_const_lv2_1));
    newsignbit_fu_553_p3 <= p_Val2_15_fu_547_p2(7 downto 7);
    output_V_address0 <= tmp_50_cast_fu_801_p1(13 - 1 downto 0);

    output_V_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= 
        result_V_mux_fu_769_p3 when (brmerge9_fu_764_p2(0) = '1') else 
        p_result_V_fu_776_p3;

    output_V_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_646_p2 <= (brmerge_i_i2_fu_636_p2 and tmp_35_fu_641_p2);
    p_38_i_i_fu_625_p2 <= (carry_reg_949 and Range1_all_ones_fu_590_p2);
    p_41_i_i_fu_613_p2 <= (signbit_reg_930 and tmp_33_fu_607_p2);
    p_Val2_10_fu_717_p2 <= std_logic_vector(signed(tmp_20_fu_709_p1) + signed(tmp_21_fu_713_p1));
    p_Val2_13_fu_513_p2 <= std_logic_vector(signed(tmp_38_cast_fu_509_p1) + signed(p_Val2_1_reg_915));
    p_Val2_14_fu_526_p4 <= p_Val2_13_fu_513_p2(13 downto 6);
    p_Val2_15_fu_547_p2 <= std_logic_vector(unsigned(p_Val2_14_fu_526_p4) + unsigned(tmp_31_fu_536_p1));
    p_Val2_16_mux_fu_689_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_982(0) = '1') else 
        p_Val2_15_reg_937;
    p_Val2_1_fu_487_p0 <= weight_V_load_reg_905;
    p_Val2_1_fu_487_p1 <= input_V_load_reg_910;
    p_Val2_1_fu_487_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_1_fu_487_p0) * signed(p_Val2_1_fu_487_p1))), 16));
    p_Val2_s_25_fu_695_p3 <= 
        ap_const_lv8_80 when (underflow_reg_977(0) = '1') else 
        p_Val2_15_reg_937;
    p_not_i_i_fu_630_p2 <= (deleted_zeros_fu_600_p3 xor ap_const_lv1_1);
    p_result_V_fu_776_p3 <= 
        ap_const_lv8_80 when (underflow_2_fu_750_p2(0) = '1') else 
        result_V_reg_999;
    p_shl1_cast_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_233_p3),10));
    p_shl2_cast_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_245_p3),10));
    p_shl3_cast_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_300_p3),14));
    p_shl4_cast_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_312_p3),14));
    p_shl5_cast_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_398_p3),14));
    p_shl6_cast_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_409_p3),14));
    p_shl_cast_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_263_p3),9));
    result_V_fu_731_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_166) + unsigned(bias_V_q0));
    result_V_mux_fu_769_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_755_p2(0) = '1') else 
        result_V_reg_999;
    sum_V_fu_701_p3 <= 
        p_Val2_16_mux_fu_689_p3 when (underflow_not_fu_684_p2(0) = '1') else 
        p_Val2_s_25_fu_695_p3;
        tmp2_cast_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_363_p2),4));

    tmp2_fu_363_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(m_reg_178));
        tmp3_cast_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_452_p2),4));

    tmp3_fu_452_p2 <= std_logic_vector(unsigned(n_reg_201) + unsigned(ap_const_lv2_3));
    tmp4_demorgan_fu_657_p2 <= (p_38_i_i_fu_625_p2 or brmerge40_demorgan_i_fu_652_p2);
    tmp4_fu_663_p2 <= (tmp4_demorgan_fu_657_p2 xor ap_const_lv1_1);
    tmp5_fu_680_p2 <= (brmerge40_demorgan_i_reg_972 or tmp_35_reg_967);
        tmp_20_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_166),9));

        tmp_21_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    tmp_22_fu_745_p2 <= (newsignbit_2_reg_1005 xor ap_const_lv1_1);
    tmp_23_cast_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_154),14));
    tmp_24_cast_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_178),10));
    tmp_25_fu_373_p2 <= std_logic_vector(unsigned(h_reg_142) + unsigned(tmp2_cast_fu_369_p1));
    tmp_26_cast_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_373_p2),10));
    tmp_27_cast_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_201),10));
    tmp_28_fu_462_p2 <= std_logic_vector(signed(tmp3_cast_fu_458_p1) + signed(w_reg_154));
    tmp_29_cast_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_462_p2),14));
    tmp_30_fu_501_p3 <= (p_Val2_12_reg_189 & ap_const_lv6_0);
    tmp_31_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_reg_920),8));
    tmp_32_fu_561_p2 <= (newsignbit_fu_553_p3 xor ap_const_lv1_1);
    tmp_33_fu_607_p2 <= (tmp_58_fu_583_p3 xor ap_const_lv1_1);
    tmp_35_fu_641_p2 <= (signbit_reg_930 xor ap_const_lv1_1);
    tmp_36_fu_245_p3 <= (co_reg_131 & ap_const_lv1_0);
    tmp_37_fu_257_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_253_p1) + unsigned(p_shl1_cast_fu_241_p1));
        tmp_38_cast_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_30_fu_501_p3),16));

    tmp_38_fu_263_p3 <= (co_reg_131 & ap_const_lv2_0);
    tmp_39_fu_275_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_271_p1) - unsigned(tmp_cast_fu_229_p1));
    tmp_40_fu_295_p2 <= std_logic_vector(unsigned(tmp_cast_21_fu_291_p1) + unsigned(tmp_37_reg_820));
    tmp_41_fu_300_p3 <= (tmp_40_fu_295_p2 & ap_const_lv3_0);
    tmp_42_fu_312_p3 <= (tmp_40_fu_295_p2 & ap_const_lv1_0);
    tmp_43_fu_324_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_308_p1) + unsigned(p_shl4_cast_fu_320_p1));
    tmp_44_fu_796_p2 <= std_logic_vector(unsigned(tmp_43_reg_839) + unsigned(tmp_23_cast_fu_792_p1));
        tmp_45_cast_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_39_fu_275_p2),10));

    tmp_45_fu_358_p2 <= std_logic_vector(signed(tmp_45_cast_reg_826) + signed(tmp_24_cast_fu_354_p1));
    tmp_46_fu_388_p2 <= std_logic_vector(shift_left(unsigned(tmp_45_reg_860),to_integer(unsigned('0' & ap_const_lv10_2(10-1 downto 0)))));
    tmp_47_fu_393_p2 <= std_logic_vector(unsigned(tmp_46_fu_388_p2) - unsigned(tmp_45_reg_860));
    tmp_48_fu_383_p2 <= std_logic_vector(unsigned(tmp_37_reg_820) + unsigned(tmp_26_cast_fu_379_p1));
    tmp_49_fu_398_p3 <= (tmp_48_reg_866 & ap_const_lv3_0);
    tmp_50_cast_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_fu_796_p2),64));
    tmp_50_fu_409_p3 <= (tmp_48_reg_866 & ap_const_lv1_0);
    tmp_51_fu_420_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_416_p1) + unsigned(p_shl5_cast_fu_405_p1));
    tmp_52_fu_442_p2 <= std_logic_vector(unsigned(tmp_27_cast_fu_438_p1) + unsigned(tmp_47_reg_872));
    tmp_53_fu_472_p2 <= std_logic_vector(unsigned(tmp_29_cast_fu_468_p1) + unsigned(tmp_51_reg_877));
    tmp_56_fu_539_p3 <= p_Val2_13_fu_513_p2(13 downto 13);
    tmp_58_cast_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_442_p2),64));
    tmp_58_fu_583_p3 <= p_Val2_13_reg_925(14 downto 14);
    tmp_59_cast_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_reg_895),64));
    tmp_cast_21_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_142),10));
    tmp_cast_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_131),9));
    tmp_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_131),64));
    tmp_s_fu_233_p3 <= (co_reg_131 & ap_const_lv3_0);
    underflow_2_fu_750_p2 <= (isneg_reg_992 and tmp_22_fu_745_p2);
    underflow_fu_669_p2 <= (signbit_reg_930 and tmp4_fu_663_p2);
    underflow_not_fu_684_p2 <= (tmp5_fu_680_p2 or p_38_i_i_reg_962);
    w_2_fu_806_p2 <= std_logic_vector(unsigned(w_reg_154) + unsigned(ap_const_lv4_1));
    weight_V_address0 <= tmp_58_cast_fu_447_p1(9 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
