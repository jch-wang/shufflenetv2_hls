-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_4_no_rel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_4_no_rel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_3_fu_220_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_3_reg_814 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_62_cast_fu_265_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_62_cast_reg_819 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond9_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_cast_fu_287_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_64_cast_reg_825 : STD_LOGIC_VECTOR (10 downto 0);
    signal bias_V_addr_reg_830 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_60_fu_326_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_60_reg_838 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond1_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_3_fu_338_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond2_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_3_fu_350_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_3_reg_854 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_62_fu_360_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_62_reg_859 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond3_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_375_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_41_reg_865 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_64_fu_386_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_64_reg_870 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_67_fu_419_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_67_reg_875 : STD_LOGIC_VECTOR (12 downto 0);
    signal n_3_fu_431_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_3_reg_883 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_fu_471_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_69_reg_893 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal weight_V_load_reg_903 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_V_load_reg_908 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_Val2_2_fu_486_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_2_reg_913 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_71_reg_918 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_20_fu_512_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_20_reg_923 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal signbit_reg_928 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_22_fu_546_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_22_reg_935 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_552_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_941 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_947 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_reg_954 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_960 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_51_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_reg_965 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_970 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_975 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_980 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_700_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal isneg_reg_990 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal result_V_fu_730_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_997 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_3_reg_1003 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_3_fu_805_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal co_reg_133 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_reg_144 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_156 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_s_reg_168 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_180 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_19_reg_191 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_203 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_77_cast_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_78_cast_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_cast_fu_800_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_235_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_54_fu_247_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_cast_fu_243_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_255_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_55_fu_259_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_56_fu_269_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_277_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_fu_231_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_57_fu_281_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_27_fu_297_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_58_fu_301_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_59_fu_306_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_cast_fu_310_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl4_cast_fu_318_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_40_cast_fu_356_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_fu_365_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_371_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_63_fu_381_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_42_cast_fu_391_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_65_fu_394_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_66_fu_399_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_cast_fu_403_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl6_cast_fu_411_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_43_cast_fu_437_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_68_fu_441_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp3_fu_451_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_457_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_44_fu_461_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_45_cast_fu_467_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_2_fu_486_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_fu_486_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_46_fu_500_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_60_cast_fu_508_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_21_fu_525_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_47_fu_535_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_72_fu_538_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_fu_582_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_599_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i3_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_617_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_24_mux_fu_688_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_31_fu_694_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_fu_708_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_37_fu_712_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_17_fu_716_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_38_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_3_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_768_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_775_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_cast_fu_791_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_61_fu_795_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_291_p2 = ap_const_lv1_1))) then 
                co_reg_133 <= co_3_reg_814;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_133 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    h_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_214_p2 = ap_const_lv1_0))) then 
                h_reg_144 <= ap_const_lv3_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_332_p2 = ap_const_lv1_1))) then 
                h_reg_144 <= h_3_fu_338_p2;
            end if; 
        end if;
    end process;

    m_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_332_p2))) then 
                m_reg_180 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_425_p2))) then 
                m_reg_180 <= m_3_reg_854;
            end if; 
        end if;
    end process;

    n_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                n_reg_203 <= n_3_reg_883;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                n_reg_203 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_19_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                p_Val2_19_reg_191 <= sum_V_fu_700_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_19_reg_191 <= p_Val2_s_reg_168;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_332_p2))) then 
                p_Val2_s_reg_168 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_425_p2))) then 
                p_Val2_s_reg_168 <= p_Val2_19_reg_191;
            end if; 
        end if;
    end process;

    w_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond1_fu_291_p2))) then 
                w_reg_156 <= ap_const_lv3_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                w_reg_156 <= w_3_fu_805_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_214_p2 = ap_const_lv1_0))) then
                bias_V_addr_reg_830 <= tmp_fu_226_p1(7 - 1 downto 0);
                    tmp_62_cast_reg_819(11 downto 1) <= tmp_62_cast_fu_265_p1(11 downto 1);
                tmp_64_cast_reg_825 <= tmp_64_cast_fu_287_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                brmerge40_demorgan_i_reg_970 <= brmerge40_demorgan_i_fu_651_p2;
                brmerge_i_i_i_reg_980 <= brmerge_i_i_i_fu_673_p2;
                p_38_i_i_reg_960 <= p_38_i_i_fu_624_p2;
                tmp_51_reg_965 <= tmp_51_fu_640_p2;
                underflow_reg_975 <= underflow_fu_668_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                carry_reg_947 <= carry_fu_566_p2;
                newsignbit_reg_941 <= p_Val2_22_fu_546_p2(7 downto 7);
                p_Val2_20_reg_923 <= p_Val2_20_fu_512_p2;
                p_Val2_22_reg_935 <= p_Val2_22_fu_546_p2;
                signbit_reg_928 <= p_Val2_20_fu_512_p2(15 downto 15);
                tmp_50_reg_954 <= p_Val2_20_fu_512_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_3_reg_814 <= co_3_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                input_V_load_reg_908 <= input_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                isneg_reg_990 <= p_Val2_17_fu_716_p2(8 downto 8);
                newsignbit_3_reg_1003 <= result_V_fu_730_p2(7 downto 7);
                result_V_reg_997 <= result_V_fu_730_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_3_reg_854 <= m_3_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                n_3_reg_883 <= n_3_fu_431_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_Val2_2_reg_913 <= p_Val2_2_fu_486_p2;
                tmp_71_reg_918 <= p_Val2_2_fu_486_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond3_fu_344_p2))) then
                tmp_41_reg_865 <= tmp_41_fu_375_p2;
                tmp_62_reg_859 <= tmp_62_fu_360_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond1_fu_291_p2))) then
                    tmp_60_reg_838(12 downto 1) <= tmp_60_fu_326_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_64_reg_870 <= tmp_64_fu_386_p2;
                    tmp_67_reg_875(12 downto 1) <= tmp_67_fu_419_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond_fu_425_p2))) then
                tmp_69_reg_893 <= tmp_69_fu_471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                weight_V_load_reg_903 <= weight_V_q0;
            end if;
        end if;
    end process;
    tmp_62_cast_reg_819(0) <= '0';
    tmp_60_reg_838(0) <= '0';
    tmp_67_reg_875(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond9_fu_214_p2, ap_CS_fsm_state3, exitcond1_fu_291_p2, ap_CS_fsm_state4, exitcond2_fu_332_p2, ap_CS_fsm_state5, exitcond3_fu_344_p2, ap_CS_fsm_state7, exitcond_fu_425_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_214_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_291_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_332_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond3_fu_344_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_425_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_589_p2 <= "1" when (tmp_50_reg_954 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_594_p2 <= "1" when (tmp_50_reg_954 = ap_const_lv2_0) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond9_fu_214_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_214_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond9_fu_214_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_214_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_830;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_651_p2 <= (newsignbit_reg_941 and deleted_ones_fu_617_p3);
    brmerge9_fu_763_p2 <= (newsignbit_3_reg_1003 or isneg_not_fu_758_p2);
    brmerge_i_i3_fu_635_p2 <= (newsignbit_reg_941 or p_not_i_i_fu_629_p2);
    brmerge_i_i_fu_754_p2 <= (isneg_reg_990 xor newsignbit_3_reg_1003);
    brmerge_i_i_i_fu_673_p2 <= (underflow_fu_668_p2 or overflow_fu_645_p2);
    carry_fu_566_p2 <= (tmp_72_fu_538_p3 and tmp_48_fu_560_p2);
    co_3_fu_220_p2 <= std_logic_vector(unsigned(co_reg_133) + unsigned(ap_const_lv7_1));
    deleted_ones_fu_617_p3 <= 
        p_41_i_i_fu_612_p2 when (carry_reg_947(0) = '1') else 
        Range1_all_ones_fu_589_p2;
    deleted_zeros_fu_599_p3 <= 
        Range1_all_ones_fu_589_p2 when (carry_reg_947(0) = '1') else 
        Range1_all_zeros_fu_594_p2;
    exitcond1_fu_291_p2 <= "1" when (h_reg_144 = ap_const_lv3_5) else "0";
    exitcond2_fu_332_p2 <= "1" when (w_reg_156 = ap_const_lv3_5) else "0";
    exitcond3_fu_344_p2 <= "1" when (m_reg_180 = ap_const_lv2_3) else "0";
    exitcond9_fu_214_p2 <= "1" when (co_reg_133 = ap_const_lv7_60) else "0";
    exitcond_fu_425_p2 <= "1" when (n_reg_203 = ap_const_lv2_3) else "0";
    h_3_fu_338_p2 <= std_logic_vector(unsigned(h_reg_144) + unsigned(ap_const_lv3_1));
    input_V_address0 <= tmp_78_cast_fu_476_p1(12 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isneg_not_fu_758_p2 <= (isneg_reg_990 xor ap_const_lv1_1);
    m_3_fu_350_p2 <= std_logic_vector(unsigned(m_reg_180) + unsigned(ap_const_lv2_1));
    n_3_fu_431_p2 <= std_logic_vector(unsigned(n_reg_203) + unsigned(ap_const_lv2_1));
    newsignbit_fu_552_p3 <= p_Val2_22_fu_546_p2(7 downto 7);
    output_V_address0 <= tmp_69_cast_fu_800_p1(12 - 1 downto 0);

    output_V_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= 
        result_V_mux_fu_768_p3 when (brmerge9_fu_763_p2(0) = '1') else 
        p_result_V_fu_775_p3;

    output_V_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_645_p2 <= (brmerge_i_i3_fu_635_p2 and tmp_51_fu_640_p2);
    p_38_i_i_fu_624_p2 <= (carry_reg_947 and Range1_all_ones_fu_589_p2);
    p_41_i_i_fu_612_p2 <= (signbit_reg_928 and tmp_49_fu_606_p2);
    p_Val2_17_fu_716_p2 <= std_logic_vector(signed(tmp_36_fu_708_p1) + signed(tmp_37_fu_712_p1));
    p_Val2_20_fu_512_p2 <= std_logic_vector(signed(tmp_60_cast_fu_508_p1) + signed(p_Val2_2_reg_913));
    p_Val2_21_fu_525_p4 <= p_Val2_20_fu_512_p2(13 downto 6);
    p_Val2_22_fu_546_p2 <= std_logic_vector(unsigned(p_Val2_21_fu_525_p4) + unsigned(tmp_47_fu_535_p1));
    p_Val2_24_mux_fu_688_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_980(0) = '1') else 
        p_Val2_22_reg_935;
    p_Val2_2_fu_486_p0 <= weight_V_load_reg_903;
    p_Val2_2_fu_486_p1 <= input_V_load_reg_908;
    p_Val2_2_fu_486_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_2_fu_486_p0) * signed(p_Val2_2_fu_486_p1))), 16));
    p_Val2_s_31_fu_694_p3 <= 
        ap_const_lv8_80 when (underflow_reg_975(0) = '1') else 
        p_Val2_22_reg_935;
    p_not_i_i_fu_629_p2 <= (deleted_zeros_fu_599_p3 xor ap_const_lv1_1);
    p_result_V_fu_775_p3 <= 
        ap_const_lv8_80 when (underflow_3_fu_749_p2(0) = '1') else 
        result_V_reg_997;
    p_shl1_cast_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_235_p3),11));
    p_shl2_cast_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_247_p3),11));
    p_shl3_cast_fu_310_p3 <= (tmp_59_fu_306_p1 & ap_const_lv3_0);
    p_shl4_cast_fu_318_p3 <= (tmp_58_fu_301_p2 & ap_const_lv1_0);
    p_shl5_cast_fu_403_p3 <= (tmp_66_fu_399_p1 & ap_const_lv3_0);
    p_shl6_cast_fu_411_p3 <= (tmp_65_fu_394_p2 & ap_const_lv1_0);
    p_shl_cast_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_269_p3),10));
    result_V_fu_730_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_168) + unsigned(bias_V_q0));
    result_V_mux_fu_768_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_754_p2(0) = '1') else 
        result_V_reg_997;
    sum_V_fu_700_p3 <= 
        p_Val2_24_mux_fu_688_p3 when (underflow_not_fu_683_p2(0) = '1') else 
        p_Val2_s_31_fu_694_p3;
        tmp2_cast_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_365_p2),3));

    tmp2_fu_365_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(m_reg_180));
        tmp3_cast_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_451_p2),3));

    tmp3_fu_451_p2 <= std_logic_vector(unsigned(n_reg_203) + unsigned(ap_const_lv2_3));
    tmp4_demorgan_fu_656_p2 <= (p_38_i_i_fu_624_p2 or brmerge40_demorgan_i_fu_651_p2);
    tmp4_fu_662_p2 <= (tmp4_demorgan_fu_656_p2 xor ap_const_lv1_1);
    tmp5_fu_679_p2 <= (brmerge40_demorgan_i_reg_970 or tmp_51_reg_965);
        tmp_36_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_168),9));

        tmp_37_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    tmp_38_fu_744_p2 <= (newsignbit_3_reg_1003 xor ap_const_lv1_1);
    tmp_39_cast_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_156),13));
    tmp_40_cast_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_180),11));
    tmp_41_fu_375_p2 <= std_logic_vector(signed(tmp2_cast_fu_371_p1) + signed(h_reg_144));
    tmp_42_cast_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_reg_865),12));
    tmp_43_cast_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_203),11));
    tmp_44_fu_461_p2 <= std_logic_vector(signed(tmp3_cast_fu_457_p1) + signed(w_reg_156));
    tmp_45_cast_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_fu_461_p2),13));
    tmp_46_fu_500_p3 <= (p_Val2_19_reg_191 & ap_const_lv6_0);
    tmp_47_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_71_reg_918),8));
    tmp_48_fu_560_p2 <= (newsignbit_fu_552_p3 xor ap_const_lv1_1);
    tmp_49_fu_606_p2 <= (tmp_74_fu_582_p3 xor ap_const_lv1_1);
    tmp_51_fu_640_p2 <= (signbit_reg_928 xor ap_const_lv1_1);
    tmp_54_fu_247_p3 <= (co_reg_133 & ap_const_lv1_0);
    tmp_55_fu_259_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_243_p1) - unsigned(p_shl2_cast_fu_255_p1));
    tmp_56_fu_269_p3 <= (co_reg_133 & ap_const_lv2_0);
    tmp_57_fu_281_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_277_p1) - unsigned(tmp_cast_fu_231_p1));
    tmp_58_fu_301_p2 <= std_logic_vector(unsigned(tmp_cast_27_fu_297_p1) + unsigned(tmp_62_cast_reg_819));
    tmp_59_fu_306_p1 <= tmp_58_fu_301_p2(10 - 1 downto 0);
        tmp_60_cast_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_46_fu_500_p3),16));

    tmp_60_fu_326_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_310_p3) - unsigned(p_shl4_cast_fu_318_p3));
    tmp_61_fu_795_p2 <= std_logic_vector(unsigned(tmp_60_reg_838) + unsigned(tmp_39_cast_fu_791_p1));
        tmp_62_cast_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_55_fu_259_p2),12));

    tmp_62_fu_360_p2 <= std_logic_vector(unsigned(tmp_40_cast_fu_356_p1) + unsigned(tmp_64_cast_reg_825));
    tmp_63_fu_381_p2 <= std_logic_vector(shift_left(unsigned(tmp_62_reg_859),to_integer(unsigned('0' & ap_const_lv11_2(11-1 downto 0)))));
        tmp_64_cast_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_57_fu_281_p2),11));

    tmp_64_fu_386_p2 <= std_logic_vector(unsigned(tmp_63_fu_381_p2) - unsigned(tmp_62_reg_859));
    tmp_65_fu_394_p2 <= std_logic_vector(unsigned(tmp_42_cast_fu_391_p1) + unsigned(tmp_62_cast_reg_819));
    tmp_66_fu_399_p1 <= tmp_65_fu_394_p2(10 - 1 downto 0);
    tmp_67_fu_419_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_403_p3) - unsigned(p_shl6_cast_fu_411_p3));
    tmp_68_fu_441_p2 <= std_logic_vector(unsigned(tmp_43_cast_fu_437_p1) + unsigned(tmp_64_reg_870));
    tmp_69_cast_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_61_fu_795_p2),64));
    tmp_69_fu_471_p2 <= std_logic_vector(unsigned(tmp_45_cast_fu_467_p1) + unsigned(tmp_67_reg_875));
    tmp_72_fu_538_p3 <= p_Val2_20_fu_512_p2(13 downto 13);
    tmp_74_fu_582_p3 <= p_Val2_20_reg_923(14 downto 14);
    tmp_77_cast_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_68_fu_441_p2),64));
    tmp_78_cast_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_reg_893),64));
    tmp_cast_27_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_144),12));
    tmp_cast_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_133),10));
    tmp_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_133),64));
    tmp_s_fu_235_p3 <= (co_reg_133 & ap_const_lv3_0);
    underflow_3_fu_749_p2 <= (isneg_reg_990 and tmp_38_fu_744_p2);
    underflow_fu_668_p2 <= (signbit_reg_928 and tmp4_fu_662_p2);
    underflow_not_fu_683_p2 <= (tmp5_fu_679_p2 or p_38_i_i_reg_960);
    w_3_fu_805_p2 <= std_logic_vector(unsigned(w_reg_156) + unsigned(ap_const_lv3_1));
    weight_V_address0 <= tmp_77_cast_fu_446_p1(10 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
