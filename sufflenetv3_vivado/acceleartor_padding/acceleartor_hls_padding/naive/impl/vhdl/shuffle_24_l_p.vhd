-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shuffle_24_l_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    left_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    left_V_ce0 : OUT STD_LOGIC;
    left_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of shuffle_24_l_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_273_fu_108_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_273_reg_315 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal co_21_fu_118_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal co_21_reg_322 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_326_fu_148_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_326_reg_327 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond3_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_330_fu_188_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_330_reg_332 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_21_fu_200_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_21_reg_340 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_332_fu_239_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_332_reg_345 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond2_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_334_fu_270_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_334_reg_350 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_21_fu_282_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_21_reg_358 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_336_fu_306_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_336_reg_368 : STD_LOGIC_VECTOR (14 downto 0);
    signal co_reg_75 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_reg_86 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_97 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_413_cast_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_414_cast_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_124_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_136_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl3_cast_fu_144_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_132_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_327_fu_154_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_328_fu_164_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_329_fu_176_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_184_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_172_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_fu_210_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_331_fu_214_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_274_fu_227_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_fu_219_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl7_cast_fu_235_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_cast9_fu_206_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_333_fu_245_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_275_fu_258_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl4_cast_fu_250_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl5_cast_fu_266_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_184_cast_fu_292_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_335_fu_296_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_184_cast8_fu_288_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_75_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_194_p2 = ap_const_lv1_1))) then 
                co_reg_75 <= co_21_reg_322;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_75 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    h_reg_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_276_p2 = ap_const_lv1_1))) then 
                h_reg_86 <= h_21_reg_340;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_112_p2 = ap_const_lv1_0))) then 
                h_reg_86 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    w_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_194_p2))) then 
                w_reg_97 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                w_reg_97 <= w_21_reg_358;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_21_reg_322 <= co_21_fu_118_p2;
                tmp_273_reg_315 <= tmp_273_fu_108_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_21_reg_340 <= h_21_fu_200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_112_p2 = ap_const_lv1_0))) then
                    tmp_326_reg_327(10 downto 1) <= tmp_326_fu_148_p2(10 downto 1);
                    tmp_330_reg_332(9 downto 1) <= tmp_330_fu_188_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_194_p2))) then
                    tmp_332_reg_345(13 downto 1) <= tmp_332_fu_239_p2(13 downto 1);
                    tmp_334_reg_350(14 downto 1) <= tmp_334_fu_270_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond_fu_276_p2) and (tmp_273_reg_315 = ap_const_lv1_0))) then
                tmp_336_reg_368 <= tmp_336_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                w_21_reg_358 <= w_21_fu_282_p2;
            end if;
        end if;
    end process;
    tmp_326_reg_327(0) <= '0';
    tmp_330_reg_332(0) <= '0';
    tmp_332_reg_345(0) <= '0';
    tmp_334_reg_350(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_112_p2, ap_CS_fsm_state3, exitcond2_fu_194_p2, ap_CS_fsm_state4, exitcond_fu_276_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_112_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_194_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_276_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_112_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_112_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_112_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_112_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    co_21_fu_118_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(co_reg_75));
    exitcond2_fu_194_p2 <= "1" when (h_reg_86 = ap_const_lv5_12) else "0";
    exitcond3_fu_112_p2 <= "1" when (co_reg_75 = ap_const_lv6_30) else "0";
    exitcond_fu_276_p2 <= "1" when (w_reg_97 = ap_const_lv5_12) else "0";
    h_21_fu_200_p2 <= std_logic_vector(unsigned(h_reg_86) + unsigned(ap_const_lv5_1));
    left_V_address0 <= tmp_413_cast_fu_301_p1(13 - 1 downto 0);

    left_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            left_V_ce0 <= ap_const_logic_1;
        else 
            left_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_address0 <= tmp_414_cast_fu_311_p1(14 - 1 downto 0);

    output_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= left_V_q0;

    output_V_we0_assign_proc : process(tmp_273_reg_315, ap_CS_fsm_state5)
    begin
        if (((tmp_273_reg_315 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_329_fu_176_p3),10));
    p_shl2_cast_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_124_p3),11));
    p_shl3_cast_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_136_p3),11));
    p_shl4_cast_fu_250_p3 <= (tmp_333_fu_245_p2 & ap_const_lv4_0);
    p_shl5_cast_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_275_fu_258_p3),15));
    p_shl6_cast_fu_219_p3 <= (tmp_331_fu_214_p2 & ap_const_lv4_0);
    p_shl7_cast_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_274_fu_227_p3),14));
    p_shl_cast_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_328_fu_164_p3),10));
    tmp_184_cast8_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_97),15));
    tmp_184_cast_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_97),14));
    tmp_273_fu_108_p1 <= co_reg_75(1 - 1 downto 0);
    tmp_274_fu_227_p3 <= (tmp_331_fu_214_p2 & ap_const_lv1_0);
    tmp_275_fu_258_p3 <= (tmp_333_fu_245_p2 & ap_const_lv1_0);
    tmp_326_fu_148_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_144_p1) + unsigned(p_shl2_cast_fu_132_p1));
    tmp_327_fu_154_p4 <= co_reg_75(5 downto 1);
    tmp_328_fu_164_p3 <= (tmp_327_fu_154_p4 & ap_const_lv4_0);
    tmp_329_fu_176_p3 <= (tmp_327_fu_154_p4 & ap_const_lv1_0);
    tmp_330_fu_188_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_184_p1) + unsigned(p_shl_cast_fu_172_p1));
    tmp_331_fu_214_p2 <= std_logic_vector(unsigned(tmp_cast_fu_210_p1) + unsigned(tmp_330_reg_332));
    tmp_332_fu_239_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_219_p3) + unsigned(p_shl7_cast_fu_235_p1));
    tmp_333_fu_245_p2 <= std_logic_vector(unsigned(tmp_cast9_fu_206_p1) + unsigned(tmp_326_reg_327));
    tmp_334_fu_270_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_250_p3) + unsigned(p_shl5_cast_fu_266_p1));
    tmp_335_fu_296_p2 <= std_logic_vector(unsigned(tmp_332_reg_345) + unsigned(tmp_184_cast_fu_292_p1));
    tmp_336_fu_306_p2 <= std_logic_vector(unsigned(tmp_334_reg_350) + unsigned(tmp_184_cast8_fu_288_p1));
    tmp_413_cast_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_335_fu_296_p2),64));
    tmp_414_cast_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_336_reg_368),64));
    tmp_cast9_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_86),11));
    tmp_cast_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_86),10));
    tmp_fu_124_p3 <= (co_reg_75 & ap_const_lv4_0);
    tmp_s_fu_136_p3 <= (co_reg_75 & ap_const_lv1_0);
    w_21_fu_282_p2 <= std_logic_vector(unsigned(w_reg_97) + unsigned(ap_const_lv5_1));
end behav;
