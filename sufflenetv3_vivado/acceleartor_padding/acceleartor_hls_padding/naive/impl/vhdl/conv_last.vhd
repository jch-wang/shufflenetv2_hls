-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_last is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_weight_V_AWVALID : OUT STD_LOGIC;
    m_axi_weight_V_AWREADY : IN STD_LOGIC;
    m_axi_weight_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_WVALID : OUT STD_LOGIC;
    m_axi_weight_V_WREADY : IN STD_LOGIC;
    m_axi_weight_V_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_weight_V_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_WLAST : OUT STD_LOGIC;
    m_axi_weight_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_ARVALID : OUT STD_LOGIC;
    m_axi_weight_V_ARREADY : IN STD_LOGIC;
    m_axi_weight_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_RVALID : IN STD_LOGIC;
    m_axi_weight_V_RREADY : OUT STD_LOGIC;
    m_axi_weight_V_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_weight_V_RLAST : IN STD_LOGIC;
    m_axi_weight_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_BVALID : IN STD_LOGIC;
    m_axi_weight_V_BREADY : OUT STD_LOGIC;
    m_axi_weight_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_last_weight_V9 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of conv_last is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weight_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal weight_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sext_cast_fu_223_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_cast_reg_745 : STD_LOGIC_VECTOR (32 downto 0);
    signal co_23_fu_233_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_23_reg_753 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_339_fu_268_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_339_reg_758 : STD_LOGIC_VECTOR (18 downto 0);
    signal exitcond8_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_422_cast_fu_282_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_422_cast_reg_763 : STD_LOGIC_VECTOR (12 downto 0);
    signal bias_V_addr_reg_768 : STD_LOGIC_VECTOR (8 downto 0);
    signal h_22_fu_292_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_22_reg_776 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_cast1_fu_298_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_cast1_reg_781 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond9_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_425_cast_fu_311_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_425_cast_reg_786 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_22_fu_325_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_22_reg_794 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal output_V_addr_reg_799 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond1_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_addr_reg_804 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_193_cast1_fu_363_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_193_cast1_reg_810 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ci_8_fu_373_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ci_8_reg_818 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal exitcond_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_addr_read_reg_828 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_V_load_reg_833 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_96_fu_420_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_96_reg_838 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_293_reg_843 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_97_fu_446_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_97_reg_848 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal signbit_reg_853 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_99_fu_480_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_99_reg_860 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_486_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_866 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_872 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_182_reg_879 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_885 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_203_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_203_reg_890 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_895 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_900 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_905 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_634_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal isneg_reg_915 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal result_V_fu_664_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_922 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_14_reg_928 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_291_fu_724_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_291_reg_935 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_197_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_197_reg_940 : STD_LOGIC_VECTOR (0 downto 0);
    signal co_reg_166 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_reg_177 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_188 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal p_Val2_s_reg_200 : STD_LOGIC_VECTOR (7 downto 0);
    signal ci_reg_212 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_426_cast_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_432_cast_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_288_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_weight_V_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_weight_V_ARREADY : STD_LOGIC;
    signal tmp_s_fu_244_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_338_fu_256_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_cast_fu_252_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl1_cast_fu_264_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_340_fu_274_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_fu_302_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_341_fu_306_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_193_cast_fu_331_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_342_fu_335_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_286_fu_345_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_287_fu_348_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_343_fu_379_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_428_cast_fu_387_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_344_fu_391_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_431_cast_fu_396_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_345_fu_404_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_96_fu_420_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_96_fu_420_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_199_fu_434_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_289_cast_fu_442_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_98_fu_459_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_200_fu_469_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_294_fu_472_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_201_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_296_fu_516_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_202_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_533_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i5_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_551_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_demorgan_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_104_mux_fu_622_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_95_fu_628_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_195_fu_646_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_194_fu_642_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_94_fu_650_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_196_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_14_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_702_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_709_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_1_fu_716_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_s_fu_734_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_weight_V_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_weight_V_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    if ((ap_sig_ioackin_m_axi_weight_V_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_weight_V_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_weight_V_ARREADY)) then 
                        ap_reg_ioackin_m_axi_weight_V_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ci_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                ci_reg_212 <= ci_8_reg_818;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                ci_reg_212 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    co_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_286_p2 = ap_const_lv1_1))) then 
                co_reg_166 <= co_23_reg_753;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_166 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    h_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_319_p2 = ap_const_lv1_1))) then 
                h_reg_177 <= h_22_reg_776;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond8_fu_227_p2))) then 
                h_reg_177 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                p_Val2_s_reg_200 <= sum_V_fu_634_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_Val2_s_reg_200 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    w_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond9_fu_286_p2))) then 
                w_reg_188 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                w_reg_188 <= w_22_reg_794;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond8_fu_227_p2))) then
                bias_V_addr_reg_768 <= tmp_fu_239_p1(9 - 1 downto 0);
                    tmp_339_reg_758(18 downto 6) <= tmp_339_fu_268_p2(18 downto 6);
                    tmp_422_cast_reg_763(11 downto 2) <= tmp_422_cast_fu_282_p1(11 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                brmerge40_demorgan_i_reg_895 <= brmerge40_demorgan_i_fu_585_p2;
                brmerge_i_i_i_reg_905 <= brmerge_i_i_i_fu_607_p2;
                p_38_i_i_reg_885 <= p_38_i_i_fu_558_p2;
                tmp_203_reg_890 <= tmp_203_fu_574_p2;
                underflow_reg_900 <= underflow_fu_602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                carry_reg_872 <= carry_fu_500_p2;
                newsignbit_reg_866 <= p_Val2_99_fu_480_p2(7 downto 7);
                p_Val2_97_reg_848 <= p_Val2_97_fu_446_p2;
                p_Val2_99_reg_860 <= p_Val2_99_fu_480_p2;
                signbit_reg_853 <= p_Val2_97_fu_446_p2(15 downto 15);
                tmp_182_reg_879 <= p_Val2_97_fu_446_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                ci_8_reg_818 <= ci_8_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_23_reg_753 <= co_23_fu_233_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_22_reg_776 <= h_22_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_weight_V_RVALID = ap_const_logic_1))) then
                input_V_load_reg_833 <= input_V_q0;
                weight_V_addr_read_reg_828 <= m_axi_weight_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                isneg_reg_915 <= p_Val2_94_fu_650_p2(8 downto 8);
                newsignbit_14_reg_928 <= result_V_fu_664_p2(7 downto 7);
                result_V_reg_922 <= result_V_fu_664_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_319_p2))) then
                output_V_addr_reg_799 <= tmp_426_cast_fu_340_p1(13 - 1 downto 0);
                weight_V_addr_reg_804 <= tmp_288_fu_353_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                p_Val2_96_reg_838 <= p_Val2_96_fu_420_p2;
                tmp_293_reg_843 <= p_Val2_96_fu_420_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                sext_cast_reg_745 <= sext_cast_fu_223_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                    tmp_193_cast1_reg_810(2 downto 0) <= tmp_193_cast1_fu_363_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                tmp_197_reg_940 <= tmp_197_fu_728_p2;
                tmp_291_reg_935 <= tmp_291_fu_724_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond9_fu_286_p2))) then
                    tmp_425_cast_reg_786(14 downto 2) <= tmp_425_cast_fu_311_p3(14 downto 2);
                    tmp_cast1_reg_781(2 downto 0) <= tmp_cast1_fu_298_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                w_22_reg_794 <= w_22_fu_325_p2;
            end if;
        end if;
    end process;
    tmp_339_reg_758(5 downto 0) <= "000000";
    tmp_422_cast_reg_763(1 downto 0) <= "00";
    tmp_422_cast_reg_763(12) <= '0';
    tmp_cast1_reg_781(10 downto 3) <= "00000000";
    tmp_425_cast_reg_786(1 downto 0) <= "00";
    tmp_193_cast1_reg_810(12 downto 3) <= "0000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_weight_V_RVALID, ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state2, exitcond8_fu_227_p2, ap_CS_fsm_state3, exitcond9_fu_286_p2, ap_CS_fsm_state4, exitcond1_fu_319_p2, ap_CS_fsm_state12, exitcond_fu_367_p2, ap_sig_ioackin_m_axi_weight_V_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_227_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_286_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_319_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_sig_ioackin_m_axi_weight_V_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_367_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_weight_V_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_523_p2 <= "1" when (tmp_182_reg_879 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_528_p2 <= "1" when (tmp_182_reg_879 = ap_const_lv2_0) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond8_fu_227_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_227_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond8_fu_227_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_227_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_weight_V_ARREADY_assign_proc : process(m_axi_weight_V_ARREADY, ap_reg_ioackin_m_axi_weight_V_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_weight_V_ARREADY)) then 
            ap_sig_ioackin_m_axi_weight_V_ARREADY <= m_axi_weight_V_ARREADY;
        else 
            ap_sig_ioackin_m_axi_weight_V_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_768;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_585_p2 <= (newsignbit_reg_866 and deleted_ones_fu_551_p3);
    brmerge9_fu_697_p2 <= (newsignbit_14_reg_928 or isneg_not_fu_692_p2);
    brmerge_i_i5_fu_569_p2 <= (newsignbit_reg_866 or p_not_i_i_fu_563_p2);
    brmerge_i_i_fu_688_p2 <= (isneg_reg_915 xor newsignbit_14_reg_928);
    brmerge_i_i_i_fu_607_p2 <= (underflow_fu_602_p2 or overflow_fu_579_p2);
    carry_fu_500_p2 <= (tmp_294_fu_472_p3 and tmp_201_fu_494_p2);
    ci_8_fu_373_p2 <= std_logic_vector(unsigned(ci_reg_212) + unsigned(ap_const_lv8_1));
    co_23_fu_233_p2 <= std_logic_vector(unsigned(co_reg_166) + unsigned(ap_const_lv10_1));
    deleted_ones_fu_551_p3 <= 
        p_41_i_i_fu_546_p2 when (carry_reg_872(0) = '1') else 
        Range1_all_ones_fu_523_p2;
    deleted_zeros_fu_533_p3 <= 
        Range1_all_ones_fu_523_p2 when (carry_reg_872(0) = '1') else 
        Range1_all_zeros_fu_528_p2;
    exitcond1_fu_319_p2 <= "1" when (w_reg_188 = ap_const_lv3_4) else "0";
    exitcond8_fu_227_p2 <= "1" when (co_reg_166 = ap_const_lv10_200) else "0";
    exitcond9_fu_286_p2 <= "1" when (h_reg_177 = ap_const_lv3_4) else "0";
    exitcond_fu_367_p2 <= "1" when (ci_reg_212 = ap_const_lv8_C0) else "0";
    h_22_fu_292_p2 <= std_logic_vector(unsigned(h_reg_177) + unsigned(ap_const_lv3_1));
    input_V_address0 <= tmp_432_cast_fu_409_p1(12 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isneg_not_fu_692_p2 <= (isneg_reg_915 xor ap_const_lv1_1);
    m_axi_weight_V_ARADDR <= weight_V_addr_reg_804;
    m_axi_weight_V_ARBURST <= ap_const_lv2_0;
    m_axi_weight_V_ARCACHE <= ap_const_lv4_0;
    m_axi_weight_V_ARID <= ap_const_lv1_0;
    m_axi_weight_V_ARLEN <= ap_const_lv32_C0;
    m_axi_weight_V_ARLOCK <= ap_const_lv2_0;
    m_axi_weight_V_ARPROT <= ap_const_lv3_0;
    m_axi_weight_V_ARQOS <= ap_const_lv4_0;
    m_axi_weight_V_ARREGION <= ap_const_lv4_0;
    m_axi_weight_V_ARSIZE <= ap_const_lv3_0;
    m_axi_weight_V_ARUSER <= ap_const_lv1_0;

    m_axi_weight_V_ARVALID_assign_proc : process(ap_CS_fsm_state5, ap_reg_ioackin_m_axi_weight_V_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_weight_V_ARREADY))) then 
            m_axi_weight_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_weight_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weight_V_AWADDR <= ap_const_lv32_0;
    m_axi_weight_V_AWBURST <= ap_const_lv2_0;
    m_axi_weight_V_AWCACHE <= ap_const_lv4_0;
    m_axi_weight_V_AWID <= ap_const_lv1_0;
    m_axi_weight_V_AWLEN <= ap_const_lv32_0;
    m_axi_weight_V_AWLOCK <= ap_const_lv2_0;
    m_axi_weight_V_AWPROT <= ap_const_lv3_0;
    m_axi_weight_V_AWQOS <= ap_const_lv4_0;
    m_axi_weight_V_AWREGION <= ap_const_lv4_0;
    m_axi_weight_V_AWSIZE <= ap_const_lv3_0;
    m_axi_weight_V_AWUSER <= ap_const_lv1_0;
    m_axi_weight_V_AWVALID <= ap_const_logic_0;
    m_axi_weight_V_BREADY <= ap_const_logic_0;

    m_axi_weight_V_RREADY_assign_proc : process(m_axi_weight_V_RVALID, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_weight_V_RVALID = ap_const_logic_1))) then 
            m_axi_weight_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_weight_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weight_V_WDATA <= ap_const_lv8_0;
    m_axi_weight_V_WID <= ap_const_lv1_0;
    m_axi_weight_V_WLAST <= ap_const_logic_0;
    m_axi_weight_V_WSTRB <= ap_const_lv1_0;
    m_axi_weight_V_WUSER <= ap_const_lv1_0;
    m_axi_weight_V_WVALID <= ap_const_logic_0;
    newsignbit_fu_486_p3 <= p_Val2_99_fu_480_p2(7 downto 7);
    output_V_address0 <= output_V_addr_reg_799;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_s_fu_734_p3),8));

    output_V_we0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_579_p2 <= (brmerge_i_i5_fu_569_p2 and tmp_203_fu_574_p2);
    p_38_i_i_fu_558_p2 <= (carry_reg_872 and Range1_all_ones_fu_523_p2);
    p_41_i_i_fu_546_p2 <= (signbit_reg_853 and tmp_202_fu_540_p2);
    p_Val2_104_mux_fu_622_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_905(0) = '1') else 
        p_Val2_99_reg_860;
    p_Val2_94_fu_650_p2 <= std_logic_vector(signed(tmp_195_fu_646_p1) + signed(tmp_194_fu_642_p1));
    p_Val2_96_fu_420_p0 <= weight_V_addr_read_reg_828;
    p_Val2_96_fu_420_p1 <= input_V_load_reg_833;
    p_Val2_96_fu_420_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_96_fu_420_p0) * signed(p_Val2_96_fu_420_p1))), 16));
    p_Val2_97_fu_446_p2 <= std_logic_vector(signed(tmp_289_cast_fu_442_p1) + signed(p_Val2_96_reg_838));
    p_Val2_98_fu_459_p4 <= p_Val2_97_fu_446_p2(13 downto 6);
    p_Val2_99_fu_480_p2 <= std_logic_vector(unsigned(p_Val2_98_fu_459_p4) + unsigned(tmp_200_fu_469_p1));
    p_Val2_s_95_fu_628_p3 <= 
        ap_const_lv8_80 when (underflow_reg_900(0) = '1') else 
        p_Val2_99_reg_860;
    p_not_i_i_fu_563_p2 <= (deleted_zeros_fu_533_p3 xor ap_const_lv1_1);
    p_result_V_fu_709_p3 <= 
        ap_const_lv8_80 when (underflow_14_fu_683_p2(0) = '1') else 
        result_V_reg_922;
    p_s_fu_734_p3 <= 
        tmp_291_reg_935 when (tmp_197_reg_940(0) = '1') else 
        ap_const_lv7_0;
    p_shl1_cast_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_338_fu_256_p3),19));
    p_shl_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_244_p3),19));
    result_1_fu_716_p3 <= 
        result_V_mux_fu_702_p3 when (brmerge9_fu_697_p2(0) = '1') else 
        p_result_V_fu_709_p3;
    result_V_fu_664_p2 <= std_logic_vector(unsigned(bias_V_q0) + unsigned(p_Val2_s_reg_200));
    result_V_mux_fu_702_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_688_p2(0) = '1') else 
        result_V_reg_922;
        sext_cast_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv_last_weight_V9),33));

    sum_V_fu_634_p3 <= 
        p_Val2_104_mux_fu_622_p3 when (underflow_not_fu_617_p2(0) = '1') else 
        p_Val2_s_95_fu_628_p3;
    tmp2_demorgan_fu_590_p2 <= (p_38_i_i_fu_558_p2 or brmerge40_demorgan_i_fu_585_p2);
    tmp2_fu_596_p2 <= (tmp2_demorgan_fu_590_p2 xor ap_const_lv1_1);
    tmp3_fu_613_p2 <= (brmerge40_demorgan_i_reg_895 or tmp_203_reg_890);
    tmp_193_cast1_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_188),13));
    tmp_193_cast_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_188),15));
        tmp_194_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_200),9));

        tmp_195_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    tmp_196_fu_678_p2 <= (newsignbit_14_reg_928 xor ap_const_lv1_1);
    tmp_197_fu_728_p2 <= "1" when (signed(result_1_fu_716_p3) > signed(ap_const_lv8_0)) else "0";
    tmp_199_fu_434_p3 <= (p_Val2_s_reg_200 & ap_const_lv6_0);
    tmp_200_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_293_reg_843),8));
    tmp_201_fu_494_p2 <= (newsignbit_fu_486_p3 xor ap_const_lv1_1);
    tmp_202_fu_540_p2 <= (tmp_296_fu_516_p3 xor ap_const_lv1_1);
    tmp_203_fu_574_p2 <= (signbit_reg_853 xor ap_const_lv1_1);
        tmp_286_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_339_reg_758),33));

    tmp_287_fu_348_p2 <= std_logic_vector(signed(tmp_286_fu_345_p1) + signed(sext_cast_reg_745));
        tmp_288_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_287_fu_348_p2),64));

        tmp_289_cast_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_199_fu_434_p3),16));

    tmp_291_fu_724_p1 <= result_1_fu_716_p3(7 - 1 downto 0);
    tmp_294_fu_472_p3 <= p_Val2_97_fu_446_p2(13 downto 13);
    tmp_296_fu_516_p3 <= p_Val2_97_reg_848(14 downto 14);
    tmp_338_fu_256_p3 <= (co_reg_166 & ap_const_lv6_0);
    tmp_339_fu_268_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_252_p1) - unsigned(p_shl1_cast_fu_264_p1));
    tmp_340_fu_274_p3 <= (co_reg_166 & ap_const_lv2_0);
    tmp_341_fu_306_p2 <= std_logic_vector(unsigned(tmp_cast_fu_302_p1) + unsigned(tmp_422_cast_reg_763));
    tmp_342_fu_335_p2 <= std_logic_vector(unsigned(tmp_425_cast_reg_786) + unsigned(tmp_193_cast_fu_331_p1));
    tmp_343_fu_379_p3 <= (ci_reg_212 & ap_const_lv2_0);
    tmp_344_fu_391_p2 <= std_logic_vector(unsigned(tmp_cast1_reg_781) + unsigned(tmp_428_cast_fu_387_p1));
    tmp_345_fu_404_p2 <= std_logic_vector(unsigned(tmp_193_cast1_reg_810) + unsigned(tmp_431_cast_fu_396_p3));
    tmp_422_cast_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_340_fu_274_p3),13));
    tmp_425_cast_fu_311_p3 <= (tmp_341_fu_306_p2 & ap_const_lv2_0);
    tmp_426_cast_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_342_fu_335_p2),64));
    tmp_428_cast_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_343_fu_379_p3),11));
    tmp_431_cast_fu_396_p3 <= (tmp_344_fu_391_p2 & ap_const_lv2_0);
    tmp_432_cast_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_345_fu_404_p2),64));
    tmp_cast1_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_177),11));
    tmp_cast_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_177),13));
    tmp_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_166),64));
    tmp_s_fu_244_p3 <= (co_reg_166 & ap_const_lv8_0);
    underflow_14_fu_683_p2 <= (isneg_reg_915 and tmp_196_fu_678_p2);
    underflow_fu_602_p2 <= (signbit_reg_853 and tmp2_fu_596_p2);
    underflow_not_fu_617_p2 <= (tmp3_fu_613_p2 or p_38_i_i_reg_885);
    w_22_fu_325_p2 <= std_logic_vector(unsigned(w_reg_188) + unsigned(ap_const_lv3_1));

    weight_V_blk_n_AR_assign_proc : process(m_axi_weight_V_ARREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weight_V_blk_n_AR <= m_axi_weight_V_ARREADY;
        else 
            weight_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    weight_V_blk_n_R_assign_proc : process(m_axi_weight_V_RVALID, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            weight_V_blk_n_R <= m_axi_weight_V_RVALID;
        else 
            weight_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

end behav;
