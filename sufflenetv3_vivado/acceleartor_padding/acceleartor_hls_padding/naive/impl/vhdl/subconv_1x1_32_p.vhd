-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_1x1_32_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    conv1_output_p_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv1_output_p_V_ce0 : OUT STD_LOGIC;
    conv1_output_p_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    ShuffleConvs_0_Downs_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_we0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_1x1_32_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_10_fu_192_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_10_reg_754 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_184_fu_227_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_184_reg_759 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond7_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_186_fu_245_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_186_reg_764 : STD_LOGIC_VECTOR (10 downto 0);
    signal bias_V_addr_reg_769 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_257_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_cast_reg_777 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond8_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_189_fu_286_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_189_reg_782 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_140_cast_fu_298_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_140_cast_reg_790 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond9_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ShuffleConvs_0_Downs_reg_795 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_10_fu_312_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ci_4_fu_324_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ci_4_reg_808 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_199_fu_405_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_199_reg_818 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_10_fu_410_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_10_reg_823 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal weight_V_load_reg_833 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv1_output_p_V_loa_reg_838 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_Val2_68_fu_426_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_68_reg_843 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_201_reg_848 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_69_fu_452_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_69_reg_853 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal signbit_reg_858 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_71_fu_486_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_71_reg_865 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_492_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_871 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_877 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_150_reg_884 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_890 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_151_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_151_reg_895 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_900 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_905 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_910 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_640_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal isneg_reg_920 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal result_V_fu_670_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_927 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_10_reg_933 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_193_fu_730_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_193_reg_940 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_144_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_144_reg_945 : STD_LOGIC_VECTOR (0 downto 0);
    signal co_reg_128 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_139 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_reg_151 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal p_Val2_s_reg_163 : STD_LOGIC_VECTOR (7 downto 0);
    signal ci_reg_175 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_198_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_212_cast_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_213_cast_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_221_cast_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_203_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_183_fu_215_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_fu_211_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_223_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_185_fu_233_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_241_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_187_fu_261_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_188_fu_274_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl4_cast_fu_266_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl5_cast_fu_282_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_190_fu_302_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_145_cast_fu_330_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_191_fu_334_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_192_fu_344_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_194_fu_356_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl8_cast_fu_352_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl9_cast_fu_364_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_195_fu_368_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_196_fu_374_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_197_fu_387_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl6_cast_fu_379_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl7_cast_fu_395_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_198_fu_399_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_68_fu_426_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_68_fu_426_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_146_fu_440_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_192_cast_fu_448_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_70_fu_465_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_147_fu_475_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_202_fu_478_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_148_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_204_fu_522_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_149_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_539_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i1_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_557_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_demorgan_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_76_mux_fu_628_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_63_fu_634_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_142_fu_652_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_141_fu_648_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_66_fu_656_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_143_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_10_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_708_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_715_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_1_fu_722_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_s_fu_740_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ci_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                ci_reg_175 <= ci_4_reg_808;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond9_fu_292_p2))) then 
                ci_reg_175 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    co_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond8_fu_251_p2 = ap_const_lv1_1))) then 
                co_reg_128 <= co_10_reg_754;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_128 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_186_p2 = ap_const_lv1_0))) then 
                h_reg_139 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond9_fu_292_p2 = ap_const_lv1_1))) then 
                h_reg_139 <= h_10_fu_312_p2;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_Val2_s_reg_163 <= sum_V_fu_640_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond9_fu_292_p2))) then 
                p_Val2_s_reg_163 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    w_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond8_fu_251_p2))) then 
                w_reg_151 <= ap_const_lv6_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                w_reg_151 <= w_10_reg_823;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond9_fu_292_p2))) then
                ShuffleConvs_0_Downs_reg_795 <= tmp_212_cast_fu_307_p1(15 - 1 downto 0);
                    tmp_140_cast_reg_790(5 downto 0) <= tmp_140_cast_fu_298_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_186_p2 = ap_const_lv1_0))) then
                bias_V_addr_reg_769 <= tmp_fu_198_p1(5 - 1 downto 0);
                    tmp_184_reg_759(10 downto 3) <= tmp_184_fu_227_p2(10 downto 3);
                    tmp_186_reg_764(10 downto 1) <= tmp_186_fu_245_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                brmerge40_demorgan_i_reg_900 <= brmerge40_demorgan_i_fu_591_p2;
                brmerge_i_i_i_reg_910 <= brmerge_i_i_i_fu_613_p2;
                p_38_i_i_reg_890 <= p_38_i_i_fu_564_p2;
                tmp_151_reg_895 <= tmp_151_fu_580_p2;
                underflow_reg_905 <= underflow_fu_608_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                carry_reg_877 <= carry_fu_506_p2;
                newsignbit_reg_871 <= p_Val2_71_fu_486_p2(7 downto 7);
                p_Val2_69_reg_853 <= p_Val2_69_fu_452_p2;
                p_Val2_71_reg_865 <= p_Val2_71_fu_486_p2;
                signbit_reg_858 <= p_Val2_69_fu_452_p2(15 downto 15);
                tmp_150_reg_884 <= p_Val2_69_fu_452_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                ci_4_reg_808 <= ci_4_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_10_reg_754 <= co_10_fu_192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                conv1_output_p_V_loa_reg_838 <= conv1_output_p_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                isneg_reg_920 <= p_Val2_66_fu_656_p2(8 downto 8);
                newsignbit_10_reg_933 <= result_V_fu_670_p2(7 downto 7);
                result_V_reg_927 <= result_V_fu_670_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_68_reg_843 <= p_Val2_68_fu_426_p2;
                tmp_201_reg_848 <= p_Val2_68_fu_426_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_144_reg_945 <= tmp_144_fu_734_p2;
                tmp_193_reg_940 <= tmp_193_fu_730_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond8_fu_251_p2))) then
                    tmp_189_reg_782(15 downto 1) <= tmp_189_fu_286_p2(15 downto 1);
                    tmp_cast_reg_777(5 downto 0) <= tmp_cast_fu_257_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond_fu_318_p2))) then
                tmp_199_reg_818 <= tmp_199_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_fu_318_p2))) then
                w_10_reg_823 <= w_10_fu_410_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                weight_V_load_reg_833 <= weight_V_q0;
            end if;
        end if;
    end process;
    tmp_184_reg_759(2 downto 0) <= "000";
    tmp_186_reg_764(0) <= '0';
    tmp_cast_reg_777(10 downto 6) <= "00000";
    tmp_189_reg_782(0) <= '0';
    tmp_140_cast_reg_790(15 downto 6) <= "0000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond7_fu_186_p2, ap_CS_fsm_state3, exitcond8_fu_251_p2, ap_CS_fsm_state4, exitcond9_fu_292_p2, ap_CS_fsm_state5, exitcond_fu_318_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_186_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond8_fu_251_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond9_fu_292_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_fu_318_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_529_p2 <= "1" when (tmp_150_reg_884 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_534_p2 <= "1" when (tmp_150_reg_884 = ap_const_lv2_0) else "0";
    ShuffleConvs_0_Downs_address0 <= ShuffleConvs_0_Downs_reg_795;

    ShuffleConvs_0_Downs_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ShuffleConvs_0_Downs_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_s_fu_740_p3),8));

    ShuffleConvs_0_Downs_we0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ShuffleConvs_0_Downs_we0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond7_fu_186_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_186_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond7_fu_186_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_186_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_769;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_591_p2 <= (newsignbit_reg_871 and deleted_ones_fu_557_p3);
    brmerge9_fu_703_p2 <= (newsignbit_10_reg_933 or isneg_not_fu_698_p2);
    brmerge_i_i1_fu_575_p2 <= (newsignbit_reg_871 or p_not_i_i_fu_569_p2);
    brmerge_i_i_fu_694_p2 <= (isneg_reg_920 xor newsignbit_10_reg_933);
    brmerge_i_i_i_fu_613_p2 <= (underflow_fu_608_p2 or overflow_fu_585_p2);
    carry_fu_506_p2 <= (tmp_202_fu_478_p3 and tmp_148_fu_500_p2);
    ci_4_fu_324_p2 <= std_logic_vector(unsigned(ci_reg_175) + unsigned(ap_const_lv5_1));
    co_10_fu_192_p2 <= std_logic_vector(unsigned(co_reg_128) + unsigned(ap_const_lv5_1));
    conv1_output_p_V_address0 <= tmp_221_cast_fu_416_p1(15 - 1 downto 0);

    conv1_output_p_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv1_output_p_V_ce0 <= ap_const_logic_1;
        else 
            conv1_output_p_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    deleted_ones_fu_557_p3 <= 
        p_41_i_i_fu_552_p2 when (carry_reg_877(0) = '1') else 
        Range1_all_ones_fu_529_p2;
    deleted_zeros_fu_539_p3 <= 
        Range1_all_ones_fu_529_p2 when (carry_reg_877(0) = '1') else 
        Range1_all_zeros_fu_534_p2;
    exitcond7_fu_186_p2 <= "1" when (co_reg_128 = ap_const_lv5_18) else "0";
    exitcond8_fu_251_p2 <= "1" when (h_reg_139 = ap_const_lv6_21) else "0";
    exitcond9_fu_292_p2 <= "1" when (w_reg_151 = ap_const_lv6_21) else "0";
    exitcond_fu_318_p2 <= "1" when (ci_reg_175 = ap_const_lv5_18) else "0";
    h_10_fu_312_p2 <= std_logic_vector(unsigned(h_reg_139) + unsigned(ap_const_lv6_1));
    isneg_not_fu_698_p2 <= (isneg_reg_920 xor ap_const_lv1_1);
    newsignbit_fu_492_p3 <= p_Val2_71_fu_486_p2(7 downto 7);
    overflow_fu_585_p2 <= (brmerge_i_i1_fu_575_p2 and tmp_151_fu_580_p2);
    p_38_i_i_fu_564_p2 <= (carry_reg_877 and Range1_all_ones_fu_529_p2);
    p_41_i_i_fu_552_p2 <= (signbit_reg_858 and tmp_149_fu_546_p2);
    p_Val2_66_fu_656_p2 <= std_logic_vector(signed(tmp_142_fu_652_p1) + signed(tmp_141_fu_648_p1));
    p_Val2_68_fu_426_p0 <= weight_V_load_reg_833;
    p_Val2_68_fu_426_p1 <= conv1_output_p_V_loa_reg_838;
    p_Val2_68_fu_426_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_68_fu_426_p0) * signed(p_Val2_68_fu_426_p1))), 16));
    p_Val2_69_fu_452_p2 <= std_logic_vector(signed(tmp_192_cast_fu_448_p1) + signed(p_Val2_68_reg_843));
    p_Val2_70_fu_465_p4 <= p_Val2_69_fu_452_p2(13 downto 6);
    p_Val2_71_fu_486_p2 <= std_logic_vector(unsigned(p_Val2_70_fu_465_p4) + unsigned(tmp_147_fu_475_p1));
    p_Val2_76_mux_fu_628_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_910(0) = '1') else 
        p_Val2_71_reg_865;
    p_Val2_s_63_fu_634_p3 <= 
        ap_const_lv8_80 when (underflow_reg_905(0) = '1') else 
        p_Val2_71_reg_865;
    p_not_i_i_fu_569_p2 <= (deleted_zeros_fu_539_p3 xor ap_const_lv1_1);
    p_result_V_fu_715_p3 <= 
        ap_const_lv8_80 when (underflow_10_fu_689_p2(0) = '1') else 
        result_V_reg_927;
    p_s_fu_740_p3 <= 
        tmp_193_reg_940 when (tmp_144_reg_945(0) = '1') else 
        ap_const_lv7_0;
    p_shl1_cast_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_185_fu_233_p3),11));
    p_shl2_cast_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_203_p3),11));
    p_shl3_cast_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_183_fu_215_p3),11));
    p_shl4_cast_fu_266_p3 <= (tmp_187_fu_261_p2 & ap_const_lv5_0);
    p_shl5_cast_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_188_fu_274_p3),16));
    p_shl6_cast_fu_379_p3 <= (tmp_196_fu_374_p2 & ap_const_lv5_0);
    p_shl7_cast_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_197_fu_387_p3),16));
    p_shl8_cast_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_192_fu_344_p3),11));
    p_shl9_cast_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_194_fu_356_p3),11));
    result_1_fu_722_p3 <= 
        result_V_mux_fu_708_p3 when (brmerge9_fu_703_p2(0) = '1') else 
        p_result_V_fu_715_p3;
    result_V_fu_670_p2 <= std_logic_vector(unsigned(bias_V_q0) + unsigned(p_Val2_s_reg_163));
    result_V_mux_fu_708_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_694_p2(0) = '1') else 
        result_V_reg_927;
    sum_V_fu_640_p3 <= 
        p_Val2_76_mux_fu_628_p3 when (underflow_not_fu_623_p2(0) = '1') else 
        p_Val2_s_63_fu_634_p3;
    tmp2_demorgan_fu_596_p2 <= (p_38_i_i_fu_564_p2 or brmerge40_demorgan_i_fu_591_p2);
    tmp2_fu_602_p2 <= (tmp2_demorgan_fu_596_p2 xor ap_const_lv1_1);
    tmp3_fu_619_p2 <= (brmerge40_demorgan_i_reg_900 or tmp_151_reg_895);
    tmp_140_cast_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_151),16));
        tmp_141_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_163),9));

        tmp_142_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    tmp_143_fu_684_p2 <= (newsignbit_10_reg_933 xor ap_const_lv1_1);
    tmp_144_fu_734_p2 <= "1" when (signed(result_1_fu_722_p3) > signed(ap_const_lv8_0)) else "0";
    tmp_145_cast_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_175),11));
    tmp_146_fu_440_p3 <= (p_Val2_s_reg_163 & ap_const_lv6_0);
    tmp_147_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_201_reg_848),8));
    tmp_148_fu_500_p2 <= (newsignbit_fu_492_p3 xor ap_const_lv1_1);
    tmp_149_fu_546_p2 <= (tmp_204_fu_522_p3 xor ap_const_lv1_1);
    tmp_151_fu_580_p2 <= (signbit_reg_858 xor ap_const_lv1_1);
    tmp_183_fu_215_p3 <= (co_reg_128 & ap_const_lv3_0);
    tmp_184_fu_227_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_211_p1) - unsigned(p_shl3_cast_fu_223_p1));
    tmp_185_fu_233_p3 <= (co_reg_128 & ap_const_lv1_0);
    tmp_186_fu_245_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_241_p1) + unsigned(p_shl2_cast_fu_211_p1));
    tmp_187_fu_261_p2 <= std_logic_vector(unsigned(tmp_cast_fu_257_p1) + unsigned(tmp_186_reg_764));
    tmp_188_fu_274_p3 <= (tmp_187_fu_261_p2 & ap_const_lv1_0);
    tmp_189_fu_286_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_266_p3) + unsigned(p_shl5_cast_fu_282_p1));
    tmp_190_fu_302_p2 <= std_logic_vector(unsigned(tmp_189_reg_782) + unsigned(tmp_140_cast_fu_298_p1));
    tmp_191_fu_334_p2 <= std_logic_vector(unsigned(tmp_145_cast_fu_330_p1) + unsigned(tmp_184_reg_759));
        tmp_192_cast_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_146_fu_440_p3),16));

    tmp_192_fu_344_p3 <= (ci_reg_175 & ap_const_lv5_0);
    tmp_193_fu_730_p1 <= result_1_fu_722_p3(7 - 1 downto 0);
    tmp_194_fu_356_p3 <= (ci_reg_175 & ap_const_lv1_0);
    tmp_195_fu_368_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_352_p1) + unsigned(p_shl9_cast_fu_364_p1));
    tmp_196_fu_374_p2 <= std_logic_vector(unsigned(tmp_cast_reg_777) + unsigned(tmp_195_fu_368_p2));
    tmp_197_fu_387_p3 <= (tmp_196_fu_374_p2 & ap_const_lv1_0);
    tmp_198_fu_399_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_379_p3) + unsigned(p_shl7_cast_fu_395_p1));
    tmp_199_fu_405_p2 <= std_logic_vector(unsigned(tmp_140_cast_reg_790) + unsigned(tmp_198_fu_399_p2));
    tmp_202_fu_478_p3 <= p_Val2_69_fu_452_p2(13 downto 13);
    tmp_204_fu_522_p3 <= p_Val2_69_reg_853(14 downto 14);
    tmp_212_cast_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_190_fu_302_p2),64));
        tmp_213_cast_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_191_fu_334_p2),64));

    tmp_221_cast_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_199_reg_818),64));
    tmp_cast_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_139),11));
    tmp_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_128),64));
    tmp_s_fu_203_p3 <= (co_reg_128 & ap_const_lv5_0);
    underflow_10_fu_689_p2 <= (isneg_reg_920 and tmp_143_fu_684_p2);
    underflow_fu_608_p2 <= (signbit_reg_858 and tmp2_fu_602_p2);
    underflow_not_fu_623_p2 <= (tmp3_fu_619_p2 or p_38_i_i_reg_890);
    w_10_fu_410_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(w_reg_151));
    weight_V_address0 <= tmp_213_cast_fu_339_p1(10 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
