-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_8_stride is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of subconv_3x3_8_stride is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_1_fu_204_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_1_reg_514 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_4_fu_243_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_reg_519 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond4_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_cast_fu_267_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_15_cast_reg_524 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_18_cast_fu_277_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_18_cast_reg_529 : STD_LOGIC_VECTOR (11 downto 0);
    signal bias_addr_reg_534 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_287_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_reg_542 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond3_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_324_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_13_reg_547 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_5_fu_336_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_reg_555 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond2_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_1_fu_344_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_1_fu_356_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_1_reg_568 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_17_fu_377_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_17_reg_573 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond1_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_431_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_21_reg_578 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_14_fu_441_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_14_reg_583 : STD_LOGIC_VECTOR (12 downto 0);
    signal w_1_fu_446_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_1_reg_588 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_1_fu_458_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_1_reg_596 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_load_reg_611 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal input_load_reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal bias_load_reg_631 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal result_reg_636 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal co_reg_107 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_reg_118 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_130 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal sum_reg_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_154 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_165 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_177 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_cast_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_cast_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_cast_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_188_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_1_fu_219_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_231_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_cast_fu_239_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_227_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_249_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_257_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_fu_215_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_261_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_271_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_cast_fu_295_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_11_fu_299_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_fu_304_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_cast_fu_308_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl6_cast_fu_316_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_8_cast_fu_362_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_15_fu_366_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_fu_371_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp1_fu_383_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_cast_fu_389_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_393_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_cast_fu_398_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_18_fu_402_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_19_fu_407_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_20_fu_419_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl8_cast_fu_427_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl7_cast_fu_415_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_6_cast_fu_437_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_4_cast_fu_464_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_22_fu_468_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_fu_478_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_484_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_488_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_cast_fu_493_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_23_fu_497_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);

    component ShuffleNetV2_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ShuffleNetV2_faddbkb_x_U81 : component ShuffleNetV2_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_188_p0,
        din1 => grp_fu_188_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_188_p2);

    ShuffleNetV2_fmulcud_x_U82 : component ShuffleNetV2_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_load_reg_611,
        din1 => input_load_reg_616,
        ce => ap_const_logic_1,
        dout => grp_fu_194_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_281_p2 = ap_const_lv1_1))) then 
                co_reg_107 <= co_1_reg_514;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_107 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    h_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_198_p2 = ap_const_lv1_0))) then 
                h_reg_118 <= ap_const_lv3_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_330_p2 = ap_const_lv1_1))) then 
                h_reg_118 <= h_1_fu_344_p2;
            end if; 
        end if;
    end process;

    m_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_452_p2))) then 
                m_reg_154 <= m_1_reg_568;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_330_p2))) then 
                m_reg_154 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_350_p2))) then 
                n_reg_177 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                n_reg_177 <= n_1_reg_596;
            end if; 
        end if;
    end process;

    sum_1_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_350_p2))) then 
                sum_1_reg_165 <= sum_reg_142;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                sum_1_reg_165 <= grp_fu_188_p2;
            end if; 
        end if;
    end process;

    sum_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_452_p2))) then 
                sum_reg_142 <= sum_1_reg_165;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_330_p2))) then 
                sum_reg_142 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_281_p2))) then 
                w_reg_130 <= ap_const_lv3_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                w_reg_130 <= w_1_reg_588;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_198_p2 = ap_const_lv1_0))) then
                bias_addr_reg_534 <= tmp_fu_210_p1(7 - 1 downto 0);
                tmp_15_cast_reg_524 <= tmp_15_cast_fu_267_p1;
                    tmp_18_cast_reg_529(11 downto 1) <= tmp_18_cast_fu_277_p1(11 downto 1);
                    tmp_4_reg_519(10 downto 1) <= tmp_4_fu_243_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                bias_load_reg_631 <= bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_1_reg_514 <= co_1_fu_204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                input_load_reg_616 <= input_r_q0;
                weight_load_reg_611 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_1_reg_568 <= m_1_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_1_reg_596 <= n_1_fu_458_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                result_reg_636 <= grp_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_10_reg_621 <= grp_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_281_p2))) then
                    tmp_13_reg_547(12 downto 1) <= tmp_13_fu_324_p2(12 downto 1);
                    tmp_2_reg_542(3 downto 1) <= tmp_2_fu_287_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond1_fu_350_p2))) then
                tmp_14_reg_583 <= tmp_14_fu_441_p2;
                w_1_reg_588 <= w_1_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_350_p2))) then
                tmp_17_reg_573 <= tmp_17_fu_377_p2;
                    tmp_21_reg_578(14 downto 1) <= tmp_21_fu_431_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_330_p2))) then
                    tmp_5_reg_555(3 downto 1) <= tmp_5_fu_336_p3(3 downto 1);
            end if;
        end if;
    end process;
    tmp_4_reg_519(0) <= '0';
    tmp_18_cast_reg_529(0) <= '0';
    tmp_2_reg_542(0) <= '0';
    tmp_13_reg_547(0) <= '0';
    tmp_5_reg_555(0) <= '0';
    tmp_21_reg_578(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_198_p2, ap_CS_fsm_state3, exitcond3_fu_281_p2, ap_CS_fsm_state4, exitcond2_fu_330_p2, ap_CS_fsm_state5, exitcond1_fu_350_p2, ap_CS_fsm_state6, exitcond_fu_452_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_198_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_281_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_330_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_350_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_452_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_198_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_198_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_198_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_198_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_534;

    bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_1_fu_204_p2 <= std_logic_vector(unsigned(co_reg_107) + unsigned(ap_const_lv7_1));
    exitcond1_fu_350_p2 <= "1" when (m_reg_154 = ap_const_lv2_3) else "0";
    exitcond2_fu_330_p2 <= "1" when (w_reg_130 = ap_const_lv3_5) else "0";
    exitcond3_fu_281_p2 <= "1" when (h_reg_118 = ap_const_lv3_5) else "0";
    exitcond4_fu_198_p2 <= "1" when (co_reg_107 = ap_const_lv7_60) else "0";
    exitcond_fu_452_p2 <= "1" when (n_reg_177 = ap_const_lv2_3) else "0";

    grp_fu_188_p0_assign_proc : process(sum_reg_142, sum_1_reg_165, ap_CS_fsm_state12, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_188_p0 <= sum_reg_142;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_188_p0 <= sum_1_reg_165;
        else 
            grp_fu_188_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_188_p1_assign_proc : process(tmp_10_reg_621, bias_load_reg_631, ap_CS_fsm_state12, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_188_p1 <= bias_load_reg_631;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_188_p1 <= tmp_10_reg_621;
        else 
            grp_fu_188_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_1_fu_344_p2 <= std_logic_vector(unsigned(h_reg_118) + unsigned(ap_const_lv3_1));
    input_r_address0 <= tmp_32_cast_fu_502_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_1_fu_356_p2 <= std_logic_vector(unsigned(m_reg_154) + unsigned(ap_const_lv2_1));
    n_1_fu_458_p2 <= std_logic_vector(unsigned(n_reg_177) + unsigned(ap_const_lv2_1));
    output_r_address0 <= tmp_23_cast_fu_507_p1(12 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= result_reg_636;

    output_r_we0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl2_cast_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_249_p3),10));
    p_shl3_cast_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_219_p3),11));
    p_shl4_cast_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_231_p3),11));
    p_shl5_cast_fu_308_p3 <= (tmp_12_fu_304_p1 & ap_const_lv3_0);
    p_shl6_cast_fu_316_p3 <= (tmp_11_fu_299_p2 & ap_const_lv1_0);
    p_shl7_cast_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_407_p3),15));
    p_shl8_cast_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_419_p3),15));
        tmp1_cast_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_383_p2),4));

    tmp1_fu_383_p2 <= (m_reg_154 xor ap_const_lv2_2);
        tmp2_cast_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_478_p2),4));

    tmp2_fu_478_p2 <= (n_reg_177 xor ap_const_lv2_2);
    tmp_11_fu_299_p2 <= std_logic_vector(signed(tmp_18_cast_reg_529) + signed(tmp_3_cast_fu_295_p1));
    tmp_12_fu_304_p1 <= tmp_11_fu_299_p2(10 - 1 downto 0);
    tmp_13_fu_324_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_308_p3) - unsigned(p_shl6_cast_fu_316_p3));
    tmp_14_fu_441_p2 <= std_logic_vector(unsigned(tmp_13_reg_547) + unsigned(tmp_6_cast_fu_437_p1));
        tmp_15_cast_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_261_p2),11));

    tmp_15_fu_366_p2 <= std_logic_vector(signed(tmp_15_cast_reg_524) + signed(tmp_8_cast_fu_362_p1));
    tmp_16_fu_371_p2 <= std_logic_vector(shift_left(unsigned(tmp_15_fu_366_p2),to_integer(unsigned('0' & ap_const_lv11_2(11-1 downto 0)))));
    tmp_17_fu_377_p2 <= std_logic_vector(unsigned(tmp_16_fu_371_p2) - unsigned(tmp_15_fu_366_p2));
        tmp_18_cast_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_fu_271_p2),12));

    tmp_18_fu_402_p2 <= std_logic_vector(unsigned(tmp_4_reg_519) + unsigned(tmp_1_cast_fu_398_p1));
    tmp_19_fu_407_p3 <= (tmp_18_fu_402_p2 & ap_const_lv3_0);
    tmp_1_cast_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_393_p2),11));
    tmp_1_fu_219_p3 <= (co_reg_107 & ap_const_lv3_0);
    tmp_20_fu_419_p3 <= (tmp_18_fu_402_p2 & ap_const_lv1_0);
    tmp_21_fu_431_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_427_p1) + unsigned(p_shl7_cast_fu_415_p1));
    tmp_22_fu_468_p2 <= std_logic_vector(unsigned(tmp_17_reg_573) + unsigned(tmp_4_cast_fu_464_p1));
    tmp_23_cast_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_reg_583),64));
    tmp_23_fu_497_p2 <= std_logic_vector(unsigned(tmp_21_reg_578) + unsigned(tmp_9_cast_fu_493_p1));
    tmp_2_fu_287_p3 <= (h_reg_118 & ap_const_lv1_0);
    tmp_31_cast_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_468_p2),64));
    tmp_32_cast_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_497_p2),64));
    tmp_3_cast_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_118),12));
    tmp_3_fu_231_p3 <= (co_reg_107 & ap_const_lv1_0);
    tmp_4_cast_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_177),11));
    tmp_4_fu_243_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_239_p1) + unsigned(p_shl3_cast_fu_227_p1));
    tmp_5_fu_336_p3 <= (w_reg_130 & ap_const_lv1_0);
    tmp_6_cast_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_130),13));
    tmp_6_fu_249_p3 <= (co_reg_107 & ap_const_lv2_0);
    tmp_7_fu_488_p2 <= std_logic_vector(unsigned(tmp_5_reg_555) + unsigned(tmp2_cast_fu_484_p1));
    tmp_8_cast_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_154),11));
    tmp_8_fu_261_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_257_p1) - unsigned(tmp_cast_fu_215_p1));
    tmp_9_cast_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_488_p2),15));
    tmp_9_fu_271_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_227_p1) - unsigned(p_shl4_cast_fu_239_p1));
    tmp_cast_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_107),10));
    tmp_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_107),64));
    tmp_s_fu_393_p2 <= std_logic_vector(unsigned(tmp_2_reg_542) + unsigned(tmp1_cast_fu_389_p1));
    w_1_fu_446_p2 <= std_logic_vector(unsigned(w_reg_130) + unsigned(ap_const_lv3_1));
    weight_address0 <= tmp_31_cast_fu_473_p1(10 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
