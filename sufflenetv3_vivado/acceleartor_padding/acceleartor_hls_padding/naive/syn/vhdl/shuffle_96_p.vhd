-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shuffle_96_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    left_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    left_r_ce0 : OUT STD_LOGIC;
    left_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer1_1_96_4x4_p_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    buffer1_1_96_4x4_p_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of shuffle_96_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_79_fu_130_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_reg_347 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal co_14_fu_140_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal co_14_reg_354 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_274_cast_fu_186_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_274_cast_reg_359 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond2_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_277_cast_fu_220_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_277_cast_reg_364 : STD_LOGIC_VECTOR (12 downto 0);
    signal h_14_fu_230_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_14_reg_372 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_202_fu_269_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_202_reg_377 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond1_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_204_fu_300_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_204_reg_382 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_14_fu_312_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_14_reg_390 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_reg_400 : STD_LOGIC_VECTOR (12 downto 0);
    signal co_reg_85 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_reg_96 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_107 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal storemerge_phi_fu_121_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_286_cast_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_287_cast_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_146_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_156_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_196_fu_168_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_fu_164_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_176_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_197_fu_180_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_198_fu_190_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_199_fu_202_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_198_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_cast_fu_210_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_200_fu_214_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_fu_240_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_201_fu_244_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_80_fu_249_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl6_cast_fu_253_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl7_cast_fu_261_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_cast9_fu_236_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_203_fu_275_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_81_fu_280_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_284_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl5_cast_fu_292_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_74_cast_fu_322_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_205_fu_326_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_74_cast8_fu_318_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_206_fu_337_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_85_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_224_p2 = ap_const_lv1_1))) then 
                co_reg_85 <= co_14_reg_354;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_85 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    h_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_306_p2 = ap_const_lv1_1))) then 
                h_reg_96 <= h_14_reg_372;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_134_p2 = ap_const_lv1_0))) then 
                h_reg_96 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    w_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond1_fu_224_p2))) then 
                w_reg_107 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                w_reg_107 <= w_14_reg_390;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_14_reg_354 <= co_14_fu_140_p2;
                tmp_79_reg_347 <= tmp_79_fu_130_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_14_reg_372 <= h_14_fu_230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond_fu_306_p2))) then
                output_addr_reg_400 <= tmp_287_cast_fu_342_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond1_fu_224_p2))) then
                    tmp_202_reg_377(12 downto 1) <= tmp_202_fu_269_p2(12 downto 1);
                    tmp_204_reg_382(13 downto 1) <= tmp_204_fu_300_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_134_p2 = ap_const_lv1_0))) then
                    tmp_274_cast_reg_359(11 downto 1) <= tmp_274_cast_fu_186_p1(11 downto 1);
                    tmp_277_cast_reg_364(12 downto 1) <= tmp_277_cast_fu_220_p1(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                w_14_reg_390 <= w_14_fu_312_p2;
            end if;
        end if;
    end process;
    tmp_274_cast_reg_359(0) <= '0';
    tmp_277_cast_reg_364(0) <= '0';
    tmp_202_reg_377(0) <= '0';
    tmp_204_reg_382(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_134_p2, ap_CS_fsm_state3, exitcond1_fu_224_p2, ap_CS_fsm_state4, exitcond_fu_306_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_134_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_224_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_306_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_134_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_134_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_134_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_134_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_address0 <= tmp_286_cast_fu_331_p1(12 - 1 downto 0);

    buffer1_1_96_4x4_p_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_96_4x4_p_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_14_fu_140_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(co_reg_85));
    exitcond1_fu_224_p2 <= "1" when (h_reg_96 = ap_const_lv3_6) else "0";
    exitcond2_fu_134_p2 <= "1" when (co_reg_85 = ap_const_lv8_C0) else "0";
    exitcond_fu_306_p2 <= "1" when (w_reg_107 = ap_const_lv3_6) else "0";
    h_14_fu_230_p2 <= std_logic_vector(unsigned(h_reg_96) + unsigned(ap_const_lv3_1));
    left_r_address0 <= tmp_286_cast_fu_331_p1(12 - 1 downto 0);

    left_r_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            left_r_ce0 <= ap_const_logic_1;
        else 
            left_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_address0 <= output_addr_reg_400;

    output_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= storemerge_phi_fu_121_p4;

    output_r_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_199_fu_202_p3),12));
    p_shl2_cast_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_156_p3),11));
    p_shl3_cast_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_196_fu_168_p3),11));
    p_shl4_cast_fu_284_p3 <= (tmp_81_fu_280_p1 & ap_const_lv3_0);
    p_shl5_cast_fu_292_p3 <= (tmp_203_fu_275_p2 & ap_const_lv1_0);
    p_shl6_cast_fu_253_p3 <= (tmp_80_fu_249_p1 & ap_const_lv3_0);
    p_shl7_cast_fu_261_p3 <= (tmp_201_fu_244_p2 & ap_const_lv1_0);
    p_shl_cast_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_198_fu_190_p3),12));

    storemerge_phi_fu_121_p4_assign_proc : process(left_r_q0, buffer1_1_96_4x4_p_q0, tmp_79_reg_347, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((tmp_79_reg_347 = ap_const_lv1_1)) then 
                storemerge_phi_fu_121_p4 <= buffer1_1_96_4x4_p_q0;
            elsif ((tmp_79_reg_347 = ap_const_lv1_0)) then 
                storemerge_phi_fu_121_p4 <= left_r_q0;
            else 
                storemerge_phi_fu_121_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            storemerge_phi_fu_121_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    tmp_196_fu_168_p3 <= (tmp_fu_146_p4 & ap_const_lv1_0);
    tmp_197_fu_180_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_164_p1) - unsigned(p_shl3_cast_fu_176_p1));
    tmp_198_fu_190_p3 <= (co_reg_85 & ap_const_lv3_0);
    tmp_199_fu_202_p3 <= (co_reg_85 & ap_const_lv1_0);
    tmp_200_fu_214_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_198_p1) - unsigned(p_shl1_cast_fu_210_p1));
    tmp_201_fu_244_p2 <= std_logic_vector(unsigned(tmp_cast_fu_240_p1) + unsigned(tmp_274_cast_reg_359));
    tmp_202_fu_269_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_253_p3) - unsigned(p_shl7_cast_fu_261_p3));
    tmp_203_fu_275_p2 <= std_logic_vector(unsigned(tmp_cast9_fu_236_p1) + unsigned(tmp_277_cast_reg_364));
    tmp_204_fu_300_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_284_p3) - unsigned(p_shl5_cast_fu_292_p3));
    tmp_205_fu_326_p2 <= std_logic_vector(unsigned(tmp_202_reg_377) + unsigned(tmp_74_cast_fu_322_p1));
    tmp_206_fu_337_p2 <= std_logic_vector(unsigned(tmp_204_reg_382) + unsigned(tmp_74_cast8_fu_318_p1));
        tmp_274_cast_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_197_fu_180_p2),12));

        tmp_277_cast_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_200_fu_214_p2),13));

    tmp_286_cast_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_205_fu_326_p2),64));
    tmp_287_cast_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_206_fu_337_p2),64));
    tmp_74_cast8_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_107),14));
    tmp_74_cast_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_107),13));
    tmp_79_fu_130_p1 <= co_reg_85(1 - 1 downto 0);
    tmp_80_fu_249_p1 <= tmp_201_fu_244_p2(10 - 1 downto 0);
    tmp_81_fu_280_p1 <= tmp_203_fu_275_p2(11 - 1 downto 0);
    tmp_cast9_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_96),13));
    tmp_cast_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_96),12));
    tmp_fu_146_p4 <= co_reg_85(7 downto 1);
    tmp_s_fu_156_p3 <= (tmp_fu_146_p4 & ap_const_lv3_0);
    w_14_fu_312_p2 <= std_logic_vector(unsigned(w_reg_107) + unsigned(ap_const_lv3_1));
end behav;
