-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_1x1_32_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_output_p_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv1_output_p_ce0 : OUT STD_LOGIC;
    conv1_output_p_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ShuffleConvs_0_Downs_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    ShuffleConvs_0_Downs_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_we0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of subconv_1x1_32_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_10_fu_176_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_10_reg_454 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_143_fu_211_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_143_reg_459 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond3_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_145_fu_229_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_145_reg_464 : STD_LOGIC_VECTOR (10 downto 0);
    signal bias_addr_reg_469 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_241_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_cast_reg_477 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond2_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_147_fu_270_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_147_reg_482 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_64_cast_fu_282_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_64_cast_reg_490 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond1_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ShuffleConvs_0_Downs_reg_495 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_10_fu_296_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ci_4_fu_308_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ci_4_reg_508 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_149_fu_318_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_149_reg_513 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_155_fu_384_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_155_reg_518 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_10_fu_389_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_10_reg_523 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal weight_load_reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal conv1_output_p_load_reg_543 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_reg_548 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal bias_load_reg_558 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal result_reg_563 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_19_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal co_reg_98 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_109 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_reg_121 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal sum_reg_133 : STD_LOGIC_VECTOR (31 downto 0);
    signal ci_reg_145 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_182_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_204_cast_fu_291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_205_cast_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_213_cast_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_s_fu_187_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_142_fu_199_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_fu_195_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_207_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_144_fu_217_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_225_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_146_fu_245_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_67_fu_258_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl4_cast_fu_250_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl5_cast_fu_266_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_148_fu_286_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_65_cast_fu_314_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_150_fu_323_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_151_fu_335_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl8_cast_fu_331_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl9_cast_fu_343_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_152_fu_347_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_153_fu_353_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_69_fu_366_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl6_cast_fu_358_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl7_cast_fu_374_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_154_fu_378_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_to_int_fu_403_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_406_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_68_fu_416_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);

    component ShuffleNetV2_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fcmpdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    ShuffleNetV2_faddbkb_x_U8 : component ShuffleNetV2_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_reg_133,
        din1 => grp_fu_156_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_156_p2);

    ShuffleNetV2_fmulcud_x_U9 : component ShuffleNetV2_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_load_reg_538,
        din1 => conv1_output_p_load_reg_543,
        ce => ap_const_logic_1,
        dout => grp_fu_161_p2);

    ShuffleNetV2_fcmpdEe_x_U10 : component ShuffleNetV2_fcmpdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => result_reg_563,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_19_fu_165_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ci_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_276_p2))) then 
                ci_reg_145 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                ci_reg_145 <= ci_4_reg_508;
            end if; 
        end if;
    end process;

    co_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_235_p2 = ap_const_lv1_1))) then 
                co_reg_98 <= co_10_reg_454;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_98 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_170_p2 = ap_const_lv1_0))) then 
                h_reg_109 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_276_p2 = ap_const_lv1_1))) then 
                h_reg_109 <= h_10_fu_296_p2;
            end if; 
        end if;
    end process;

    sum_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_276_p2))) then 
                sum_reg_133 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                sum_reg_133 <= grp_fu_156_p2;
            end if; 
        end if;
    end process;

    w_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_235_p2))) then 
                w_reg_121 <= ap_const_lv6_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                w_reg_121 <= w_10_reg_523;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_276_p2))) then
                ShuffleConvs_0_Downs_reg_495 <= tmp_204_cast_fu_291_p1(15 - 1 downto 0);
                    tmp_64_cast_reg_490(5 downto 0) <= tmp_64_cast_fu_282_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_170_p2 = ap_const_lv1_0))) then
                bias_addr_reg_469 <= tmp_fu_182_p1(5 - 1 downto 0);
                    tmp_143_reg_459(10 downto 3) <= tmp_143_fu_211_p2(10 downto 3);
                    tmp_145_reg_464(10 downto 1) <= tmp_145_fu_229_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                bias_load_reg_558 <= bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                ci_4_reg_508 <= ci_4_fu_308_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_10_reg_454 <= co_10_fu_176_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                conv1_output_p_load_reg_543 <= conv1_output_p_q0;
                weight_load_reg_538 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                result_reg_563 <= grp_fu_156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_235_p2))) then
                    tmp_147_reg_482(15 downto 1) <= tmp_147_fu_270_p2(15 downto 1);
                    tmp_cast_reg_477(5 downto 0) <= tmp_cast_fu_241_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond_fu_302_p2))) then
                tmp_149_reg_513 <= tmp_149_fu_318_p2;
                tmp_155_reg_518 <= tmp_155_fu_384_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_19_reg_570 <= tmp_19_fu_165_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_66_reg_548 <= grp_fu_161_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_fu_302_p2))) then
                w_10_reg_523 <= w_10_fu_389_p2;
            end if;
        end if;
    end process;
    tmp_143_reg_459(2 downto 0) <= "000";
    tmp_145_reg_464(0) <= '0';
    tmp_cast_reg_477(10 downto 6) <= "00000";
    tmp_147_reg_482(0) <= '0';
    tmp_64_cast_reg_490(15 downto 6) <= "0000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_170_p2, ap_CS_fsm_state3, exitcond2_fu_235_p2, ap_CS_fsm_state4, exitcond1_fu_276_p2, ap_CS_fsm_state5, exitcond_fu_302_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_170_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_235_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_276_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_fu_302_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ShuffleConvs_0_Downs_address0 <= ShuffleConvs_0_Downs_reg_495;

    ShuffleConvs_0_Downs_ce0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ShuffleConvs_0_Downs_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_d0 <= 
        result_reg_563 when (tmp_20_fu_438_p2(0) = '1') else 
        ap_const_lv32_0;

    ShuffleConvs_0_Downs_we0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ShuffleConvs_0_Downs_we0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_170_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_170_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_170_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_170_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_469;

    bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ci_4_fu_308_p2 <= std_logic_vector(unsigned(ci_reg_145) + unsigned(ap_const_lv5_1));
    co_10_fu_176_p2 <= std_logic_vector(unsigned(co_reg_98) + unsigned(ap_const_lv5_1));
    conv1_output_p_address0 <= tmp_213_cast_fu_399_p1(15 - 1 downto 0);

    conv1_output_p_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv1_output_p_ce0 <= ap_const_logic_1;
        else 
            conv1_output_p_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_276_p2 <= "1" when (w_reg_121 = ap_const_lv6_21) else "0";
    exitcond2_fu_235_p2 <= "1" when (h_reg_109 = ap_const_lv6_21) else "0";
    exitcond3_fu_170_p2 <= "1" when (co_reg_98 = ap_const_lv5_18) else "0";
    exitcond_fu_302_p2 <= "1" when (ci_reg_145 = ap_const_lv5_18) else "0";

    grp_fu_156_p1_assign_proc : process(tmp_66_reg_548, bias_load_reg_558, ap_CS_fsm_state12, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_156_p1 <= bias_load_reg_558;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_156_p1 <= tmp_66_reg_548;
        else 
            grp_fu_156_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_10_fu_296_p2 <= std_logic_vector(unsigned(h_reg_109) + unsigned(ap_const_lv6_1));
    notlhs_fu_420_p2 <= "0" when (tmp_16_fu_406_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_426_p2 <= "1" when (tmp_68_fu_416_p1 = ap_const_lv23_0) else "0";
    p_shl1_cast_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_144_fu_217_p3),11));
    p_shl2_cast_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_187_p3),11));
    p_shl3_cast_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_142_fu_199_p3),11));
    p_shl4_cast_fu_250_p3 <= (tmp_146_fu_245_p2 & ap_const_lv5_0);
    p_shl5_cast_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_fu_258_p3),16));
    p_shl6_cast_fu_358_p3 <= (tmp_153_fu_353_p2 & ap_const_lv5_0);
    p_shl7_cast_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_fu_366_p3),16));
    p_shl8_cast_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_150_fu_323_p3),11));
    p_shl9_cast_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_151_fu_335_p3),11));
    result_to_int_fu_403_p1 <= result_reg_563;
    tmp_142_fu_199_p3 <= (co_reg_98 & ap_const_lv3_0);
    tmp_143_fu_211_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_195_p1) - unsigned(p_shl3_cast_fu_207_p1));
    tmp_144_fu_217_p3 <= (co_reg_98 & ap_const_lv1_0);
    tmp_145_fu_229_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_225_p1) + unsigned(p_shl2_cast_fu_195_p1));
    tmp_146_fu_245_p2 <= std_logic_vector(unsigned(tmp_cast_fu_241_p1) + unsigned(tmp_145_reg_464));
    tmp_147_fu_270_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_250_p3) + unsigned(p_shl5_cast_fu_266_p1));
    tmp_148_fu_286_p2 <= std_logic_vector(unsigned(tmp_147_reg_482) + unsigned(tmp_64_cast_fu_282_p1));
    tmp_149_fu_318_p2 <= std_logic_vector(unsigned(tmp_65_cast_fu_314_p1) + unsigned(tmp_143_reg_459));
    tmp_150_fu_323_p3 <= (ci_reg_145 & ap_const_lv5_0);
    tmp_151_fu_335_p3 <= (ci_reg_145 & ap_const_lv1_0);
    tmp_152_fu_347_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_331_p1) + unsigned(p_shl9_cast_fu_343_p1));
    tmp_153_fu_353_p2 <= std_logic_vector(unsigned(tmp_cast_reg_477) + unsigned(tmp_152_fu_347_p2));
    tmp_154_fu_378_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_358_p3) + unsigned(p_shl7_cast_fu_374_p1));
    tmp_155_fu_384_p2 <= std_logic_vector(unsigned(tmp_64_cast_reg_490) + unsigned(tmp_154_fu_378_p2));
    tmp_16_fu_406_p4 <= result_to_int_fu_403_p1(30 downto 23);
    tmp_18_fu_432_p2 <= (notrhs_fu_426_p2 or notlhs_fu_420_p2);
    tmp_204_cast_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_148_fu_286_p2),64));
        tmp_205_cast_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_149_reg_513),64));

    tmp_20_fu_438_p2 <= (tmp_18_fu_432_p2 and tmp_19_reg_570);
    tmp_213_cast_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_155_reg_518),64));
    tmp_64_cast_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_121),16));
    tmp_65_cast_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_145),11));
    tmp_67_fu_258_p3 <= (tmp_146_fu_245_p2 & ap_const_lv1_0);
    tmp_68_fu_416_p1 <= result_to_int_fu_403_p1(23 - 1 downto 0);
    tmp_69_fu_366_p3 <= (tmp_153_fu_353_p2 & ap_const_lv1_0);
    tmp_cast_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_109),11));
    tmp_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_98),64));
    tmp_s_fu_187_p3 <= (co_reg_98 & ap_const_lv5_0);
    w_10_fu_389_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(w_reg_121));
    weight_address0 <= tmp_205_cast_fu_395_p1(10 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
