-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_16_no_re is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of subconv_3x3_16_no_re is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_6_fu_194_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_6_reg_470 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_85_fu_233_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_85_reg_475 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond4_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_119_cast_fu_257_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_119_cast_reg_481 : STD_LOGIC_VECTOR (8 downto 0);
    signal bias_addr_reg_486 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_89_fu_296_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_89_reg_494 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond3_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_6_fu_308_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond2_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_6_fu_320_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_6_reg_510 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_91_fu_330_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_91_reg_515 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond1_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_fu_355_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_93_reg_521 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_92_fu_365_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_92_reg_527 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_94_fu_388_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_94_reg_532 : STD_LOGIC_VECTOR (13 downto 0);
    signal n_6_fu_400_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_6_reg_540 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_95_fu_410_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_95_reg_545 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_96_fu_435_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_96_reg_550 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal weight_load_reg_565 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal input_load_reg_570 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_reg_575 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal bias_load_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_90_fu_452_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_90_reg_590 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal w_6_fu_457_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_6_reg_595 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_reg_600 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal co_reg_97 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_108 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_120 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal sum_reg_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_144 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_155 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_167 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_132_cast_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_cast_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_124_cast_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_178_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_178_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_s_fu_209_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_84_fu_221_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_cast_fu_229_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_cast_fu_217_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_86_fu_239_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_247_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_fu_205_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_87_fu_251_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_35_fu_267_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_88_fu_271_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_48_fu_284_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_276_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl4_cast_fu_292_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_48_cast_fu_326_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_335_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_cast_fu_341_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_49_fu_345_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_50_cast_fu_351_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_50_fu_360_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_51_fu_377_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_fu_384_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl5_cast_fu_370_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_51_cast_fu_406_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_415_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_421_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_52_fu_425_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_53_cast_fu_431_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_47_cast_fu_448_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);

    component ShuffleNetV2_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ShuffleNetV2_faddbkb_x_U32 : component ShuffleNetV2_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_178_p0,
        din1 => grp_fu_178_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_178_p2);

    ShuffleNetV2_fmulcud_x_U33 : component ShuffleNetV2_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_load_reg_565,
        din1 => input_load_reg_570,
        ce => ap_const_logic_1,
        dout => grp_fu_184_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_261_p2 = ap_const_lv1_1))) then 
                co_reg_97 <= co_6_reg_470;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_97 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_188_p2 = ap_const_lv1_0))) then 
                h_reg_108 <= ap_const_lv5_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_302_p2 = ap_const_lv1_1))) then 
                h_reg_108 <= h_6_fu_308_p2;
            end if; 
        end if;
    end process;

    m_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_302_p2))) then 
                m_reg_144 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_394_p2))) then 
                m_reg_144 <= m_6_reg_510;
            end if; 
        end if;
    end process;

    n_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                n_reg_167 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                n_reg_167 <= n_6_reg_540;
            end if; 
        end if;
    end process;

    sum_1_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                sum_1_reg_155 <= sum_reg_132;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                sum_1_reg_155 <= grp_fu_178_p2;
            end if; 
        end if;
    end process;

    sum_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_302_p2))) then 
                sum_reg_132 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_394_p2))) then 
                sum_reg_132 <= sum_1_reg_155;
            end if; 
        end if;
    end process;

    w_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_261_p2))) then 
                w_reg_120 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                w_reg_120 <= w_6_reg_595;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_188_p2 = ap_const_lv1_0))) then
                bias_addr_reg_486 <= tmp_fu_200_p1(5 - 1 downto 0);
                tmp_119_cast_reg_481 <= tmp_119_cast_fu_257_p1;
                    tmp_85_reg_475(9 downto 1) <= tmp_85_fu_233_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                bias_load_reg_585 <= bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_6_reg_470 <= co_6_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                input_load_reg_570 <= input_r_q0;
                weight_load_reg_565 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_6_reg_510 <= m_6_fu_320_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                n_6_reg_540 <= n_6_fu_400_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                result_reg_600 <= grp_fu_178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_54_reg_575 <= grp_fu_184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_261_p2))) then
                    tmp_89_reg_494(13 downto 1) <= tmp_89_fu_296_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_90_reg_590 <= tmp_90_fu_452_p2;
                w_6_reg_595 <= w_6_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_314_p2))) then
                tmp_91_reg_515 <= tmp_91_fu_330_p2;
                tmp_93_reg_521 <= tmp_93_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_92_reg_527 <= tmp_92_fu_365_p2;
                    tmp_94_reg_532(13 downto 1) <= tmp_94_fu_388_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond_fu_394_p2))) then
                tmp_95_reg_545 <= tmp_95_fu_410_p2;
                tmp_96_reg_550 <= tmp_96_fu_435_p2;
            end if;
        end if;
    end process;
    tmp_85_reg_475(0) <= '0';
    tmp_89_reg_494(0) <= '0';
    tmp_94_reg_532(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_188_p2, ap_CS_fsm_state3, exitcond3_fu_261_p2, ap_CS_fsm_state4, exitcond2_fu_302_p2, ap_CS_fsm_state5, exitcond1_fu_314_p2, ap_CS_fsm_state7, exitcond_fu_394_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_188_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_261_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_302_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond1_fu_314_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_394_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_188_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_188_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_188_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_188_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_486;

    bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_6_fu_194_p2 <= std_logic_vector(unsigned(co_reg_97) + unsigned(ap_const_lv5_1));
    exitcond1_fu_314_p2 <= "1" when (m_reg_144 = ap_const_lv2_3) else "0";
    exitcond2_fu_302_p2 <= "1" when (w_reg_120 = ap_const_lv5_11) else "0";
    exitcond3_fu_261_p2 <= "1" when (h_reg_108 = ap_const_lv5_11) else "0";
    exitcond4_fu_188_p2 <= "1" when (co_reg_97 = ap_const_lv5_18) else "0";
    exitcond_fu_394_p2 <= "1" when (n_reg_167 = ap_const_lv2_3) else "0";

    grp_fu_178_p0_assign_proc : process(ap_CS_fsm_state20, sum_reg_132, sum_1_reg_155, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_178_p0 <= sum_reg_132;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_178_p0 <= sum_1_reg_155;
        else 
            grp_fu_178_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_178_p1_assign_proc : process(tmp_54_reg_575, bias_load_reg_585, ap_CS_fsm_state20, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_178_p1 <= bias_load_reg_585;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_178_p1 <= tmp_54_reg_575;
        else 
            grp_fu_178_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_6_fu_308_p2 <= std_logic_vector(unsigned(h_reg_108) + unsigned(ap_const_lv5_1));
    input_r_address0 <= tmp_133_cast_fu_444_p1(13 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_6_fu_320_p2 <= std_logic_vector(unsigned(m_reg_144) + unsigned(ap_const_lv2_1));
    n_6_fu_400_p2 <= std_logic_vector(unsigned(n_reg_167) + unsigned(ap_const_lv2_1));
    output_r_address0 <= tmp_124_cast_fu_463_p1(13 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= result_reg_600;

    output_r_we0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_209_p3),10));
    p_shl2_cast_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_84_fu_221_p3),10));
    p_shl3_cast_fu_276_p3 <= (tmp_88_fu_271_p2 & ap_const_lv4_0);
    p_shl4_cast_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_284_p3),14));
    p_shl5_cast_fu_370_p3 <= (tmp_93_reg_521 & ap_const_lv4_0);
    p_shl6_cast_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_377_p3),14));
    p_shl_cast_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_86_fu_239_p3),8));
        tmp1_cast_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_335_p2),5));

    tmp1_fu_335_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(m_reg_144));
        tmp2_cast_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_415_p2),5));

    tmp2_fu_415_p2 <= std_logic_vector(unsigned(n_reg_167) + unsigned(ap_const_lv2_3));
        tmp_119_cast_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_87_fu_251_p2),9));

    tmp_124_cast_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_90_reg_590),64));
    tmp_132_cast_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_95_reg_545),64));
    tmp_133_cast_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_96_reg_550),64));
    tmp_47_cast_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_120),14));
    tmp_48_cast_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_144),9));
    tmp_48_fu_284_p3 <= (tmp_88_fu_271_p2 & ap_const_lv1_0);
    tmp_49_fu_345_p2 <= std_logic_vector(unsigned(h_reg_108) + unsigned(tmp1_cast_fu_341_p1));
    tmp_50_cast_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_345_p2),10));
    tmp_50_fu_360_p2 <= std_logic_vector(shift_left(unsigned(tmp_91_reg_515),to_integer(unsigned('0' & ap_const_lv9_2(9-1 downto 0)))));
    tmp_51_cast_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_167),9));
    tmp_51_fu_377_p3 <= (tmp_93_reg_521 & ap_const_lv1_0);
    tmp_52_fu_425_p2 <= std_logic_vector(unsigned(w_reg_120) + unsigned(tmp2_cast_fu_421_p1));
    tmp_53_cast_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_425_p2),14));
    tmp_84_fu_221_p3 <= (co_reg_97 & ap_const_lv1_0);
    tmp_85_fu_233_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_229_p1) + unsigned(p_shl1_cast_fu_217_p1));
    tmp_86_fu_239_p3 <= (co_reg_97 & ap_const_lv2_0);
    tmp_87_fu_251_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_247_p1) - unsigned(tmp_cast_fu_205_p1));
    tmp_88_fu_271_p2 <= std_logic_vector(unsigned(tmp_cast_35_fu_267_p1) + unsigned(tmp_85_reg_475));
    tmp_89_fu_296_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_276_p3) + unsigned(p_shl4_cast_fu_292_p1));
    tmp_90_fu_452_p2 <= std_logic_vector(unsigned(tmp_89_reg_494) + unsigned(tmp_47_cast_fu_448_p1));
    tmp_91_fu_330_p2 <= std_logic_vector(signed(tmp_119_cast_reg_481) + signed(tmp_48_cast_fu_326_p1));
    tmp_92_fu_365_p2 <= std_logic_vector(unsigned(tmp_50_fu_360_p2) - unsigned(tmp_91_reg_515));
    tmp_93_fu_355_p2 <= std_logic_vector(unsigned(tmp_85_reg_475) + unsigned(tmp_50_cast_fu_351_p1));
    tmp_94_fu_388_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_384_p1) + unsigned(p_shl5_cast_fu_370_p3));
    tmp_95_fu_410_p2 <= std_logic_vector(unsigned(tmp_92_reg_527) + unsigned(tmp_51_cast_fu_406_p1));
    tmp_96_fu_435_p2 <= std_logic_vector(unsigned(tmp_94_reg_532) + unsigned(tmp_53_cast_fu_431_p1));
    tmp_cast_35_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_108),10));
    tmp_cast_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_97),8));
    tmp_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_97),64));
    tmp_s_fu_209_p3 <= (co_reg_97 & ap_const_lv4_0);
    w_6_fu_457_p2 <= std_logic_vector(unsigned(w_reg_120) + unsigned(ap_const_lv5_1));
    weight_address0 <= tmp_132_cast_fu_440_p1(8 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
