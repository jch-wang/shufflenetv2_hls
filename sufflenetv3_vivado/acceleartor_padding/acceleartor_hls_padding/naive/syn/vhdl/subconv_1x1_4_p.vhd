-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_1x1_4_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of subconv_1x1_4_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_9_fu_180_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_9_reg_478 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_128_fu_215_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_128_reg_483 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond3_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_179_cast_fu_251_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_179_cast_reg_488 : STD_LOGIC_VECTOR (11 downto 0);
    signal bias_addr_reg_493 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_fu_261_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_reg_501 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond2_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_133_fu_290_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_133_reg_506 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_61_cast_fu_302_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_61_cast_reg_514 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond1_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_reg_519 : STD_LOGIC_VECTOR (11 downto 0);
    signal h_9_fu_316_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ci_3_fu_328_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ci_3_reg_532 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_140_fu_403_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_140_reg_537 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_141_fu_408_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_141_reg_542 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_9_fu_413_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_9_reg_547 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal weight_load_reg_562 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal input_load_reg_567 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_165_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_reg_572 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal bias_load_reg_582 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal result_reg_587 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_14_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_594 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal co_reg_102 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_reg_113 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_125 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal sum_reg_137 : STD_LOGIC_VECTOR (31 downto 0);
    signal ci_reg_149 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_184_cast_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_192_cast_fu_419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_193_cast_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_s_fu_191_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_127_fu_203_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl2_cast_fu_199_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl3_cast_fu_211_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_129_fu_221_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_130_fu_233_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_229_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_241_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_131_fu_245_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_132_fu_265_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_64_fu_270_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_cast_fu_274_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl5_cast_fu_282_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_134_fu_306_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_135_fu_338_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_136_fu_350_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl8_cast_fu_346_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl9_cast_fu_358_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_137_fu_362_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_187_cast_fu_368_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_138_fu_372_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_66_fu_377_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl6_cast_fu_381_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl7_cast_fu_389_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_139_fu_397_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_62_cast_fu_334_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal result_to_int_fu_427_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_430_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_fu_440_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);

    component ShuffleNetV2_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fcmpdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    ShuffleNetV2_faddbkb_x_U87 : component ShuffleNetV2_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_reg_137,
        din1 => grp_fu_160_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_160_p2);

    ShuffleNetV2_fmulcud_x_U88 : component ShuffleNetV2_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_load_reg_562,
        din1 => input_load_reg_567,
        ce => ap_const_logic_1,
        dout => grp_fu_165_p2);

    ShuffleNetV2_fcmpdEe_x_U89 : component ShuffleNetV2_fcmpdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => result_reg_587,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_14_fu_169_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ci_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_296_p2))) then 
                ci_reg_149 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                ci_reg_149 <= ci_3_reg_532;
            end if; 
        end if;
    end process;

    co_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_255_p2 = ap_const_lv1_1))) then 
                co_reg_102 <= co_9_reg_478;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_102 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    h_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_174_p2 = ap_const_lv1_0))) then 
                h_reg_113 <= ap_const_lv3_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_296_p2 = ap_const_lv1_1))) then 
                h_reg_113 <= h_9_fu_316_p2;
            end if; 
        end if;
    end process;

    sum_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_296_p2))) then 
                sum_reg_137 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                sum_reg_137 <= grp_fu_160_p2;
            end if; 
        end if;
    end process;

    w_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_255_p2))) then 
                w_reg_125 <= ap_const_lv3_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                w_reg_125 <= w_9_reg_547;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_174_p2 = ap_const_lv1_0))) then
                bias_addr_reg_493 <= tmp_fu_186_p1(7 - 1 downto 0);
                    tmp_128_reg_483(14 downto 5) <= tmp_128_fu_215_p2(14 downto 5);
                    tmp_179_cast_reg_488(11 downto 1) <= tmp_179_cast_fu_251_p1(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                bias_load_reg_582 <= bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                ci_3_reg_532 <= ci_3_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_9_reg_478 <= co_9_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                input_load_reg_567 <= input_r_q0;
                weight_load_reg_562 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_296_p2))) then
                output_addr_reg_519 <= tmp_184_cast_fu_311_p1(12 - 1 downto 0);
                    tmp_61_cast_reg_514(2 downto 0) <= tmp_61_cast_fu_302_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                result_reg_587 <= grp_fu_160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_255_p2))) then
                    tmp_133_reg_506(12 downto 1) <= tmp_133_fu_290_p2(12 downto 1);
                    tmp_cast_reg_501(2 downto 0) <= tmp_cast_fu_261_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond_fu_322_p2))) then
                tmp_140_reg_537 <= tmp_140_fu_403_p2;
                tmp_141_reg_542 <= tmp_141_fu_408_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_14_reg_594 <= tmp_14_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_63_reg_572 <= grp_fu_165_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_fu_322_p2))) then
                w_9_reg_547 <= w_9_fu_413_p2;
            end if;
        end if;
    end process;
    tmp_128_reg_483(4 downto 0) <= "00000";
    tmp_179_cast_reg_488(0) <= '0';
    tmp_cast_reg_501(11 downto 3) <= "000000000";
    tmp_133_reg_506(0) <= '0';
    tmp_61_cast_reg_514(12 downto 3) <= "0000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_174_p2, ap_CS_fsm_state3, exitcond2_fu_255_p2, ap_CS_fsm_state4, exitcond1_fu_296_p2, ap_CS_fsm_state5, exitcond_fu_322_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_174_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_255_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_296_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_fu_322_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_174_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_174_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_174_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_174_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_493;

    bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ci_3_fu_328_p2 <= std_logic_vector(unsigned(ci_reg_149) + unsigned(ap_const_lv7_1));
    co_9_fu_180_p2 <= std_logic_vector(unsigned(co_reg_102) + unsigned(ap_const_lv7_1));
    exitcond1_fu_296_p2 <= "1" when (w_reg_125 = ap_const_lv3_5) else "0";
    exitcond2_fu_255_p2 <= "1" when (h_reg_113 = ap_const_lv3_5) else "0";
    exitcond3_fu_174_p2 <= "1" when (co_reg_102 = ap_const_lv7_60) else "0";
    exitcond_fu_322_p2 <= "1" when (ci_reg_149 = ap_const_lv7_60) else "0";

    grp_fu_160_p1_assign_proc : process(tmp_63_reg_572, bias_load_reg_582, ap_CS_fsm_state12, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_160_p1 <= bias_load_reg_582;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_160_p1 <= tmp_63_reg_572;
        else 
            grp_fu_160_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_9_fu_316_p2 <= std_logic_vector(unsigned(h_reg_113) + unsigned(ap_const_lv3_1));
    input_r_address0 <= tmp_192_cast_fu_419_p1(12 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    notlhs_fu_444_p2 <= "0" when (tmp_11_fu_430_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_450_p2 <= "1" when (tmp_65_fu_440_p1 = ap_const_lv23_0) else "0";
    output_r_address0 <= output_addr_reg_519;

    output_r_ce0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= 
        result_reg_587 when (tmp_15_fu_462_p2(0) = '1') else 
        ap_const_lv32_0;

    output_r_we0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_130_fu_233_p3),11));
    p_shl2_cast_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_191_p3),15));
    p_shl3_cast_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_127_fu_203_p3),15));
    p_shl4_cast_fu_274_p3 <= (tmp_64_fu_270_p1 & ap_const_lv3_0);
    p_shl5_cast_fu_282_p3 <= (tmp_132_fu_265_p2 & ap_const_lv1_0);
    p_shl6_cast_fu_381_p3 <= (tmp_66_fu_377_p1 & ap_const_lv3_0);
    p_shl7_cast_fu_389_p3 <= (tmp_138_fu_372_p2 & ap_const_lv1_0);
    p_shl8_cast_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_135_fu_338_p3),11));
    p_shl9_cast_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_136_fu_350_p3),11));
    p_shl_cast_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_129_fu_221_p3),11));
    result_to_int_fu_427_p1 <= result_reg_587;
    tmp_11_fu_430_p4 <= result_to_int_fu_427_p1(30 downto 23);
    tmp_127_fu_203_p3 <= (co_reg_102 & ap_const_lv5_0);
    tmp_128_fu_215_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_199_p1) - unsigned(p_shl3_cast_fu_211_p1));
    tmp_129_fu_221_p3 <= (co_reg_102 & ap_const_lv3_0);
    tmp_130_fu_233_p3 <= (co_reg_102 & ap_const_lv1_0);
    tmp_131_fu_245_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_229_p1) - unsigned(p_shl1_cast_fu_241_p1));
    tmp_132_fu_265_p2 <= std_logic_vector(unsigned(tmp_cast_fu_261_p1) + unsigned(tmp_179_cast_reg_488));
    tmp_133_fu_290_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_274_p3) - unsigned(p_shl5_cast_fu_282_p3));
    tmp_134_fu_306_p2 <= std_logic_vector(unsigned(tmp_133_reg_506) + unsigned(tmp_61_cast_fu_302_p1));
    tmp_135_fu_338_p3 <= (ci_reg_149 & ap_const_lv3_0);
    tmp_136_fu_350_p3 <= (ci_reg_149 & ap_const_lv1_0);
    tmp_137_fu_362_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_346_p1) - unsigned(p_shl9_cast_fu_358_p1));
    tmp_138_fu_372_p2 <= std_logic_vector(unsigned(tmp_cast_reg_501) + unsigned(tmp_187_cast_fu_368_p1));
    tmp_139_fu_397_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_381_p3) - unsigned(p_shl7_cast_fu_389_p3));
    tmp_13_fu_456_p2 <= (notrhs_fu_450_p2 or notlhs_fu_444_p2);
    tmp_140_fu_403_p2 <= std_logic_vector(unsigned(tmp_61_cast_reg_514) + unsigned(tmp_139_fu_397_p2));
    tmp_141_fu_408_p2 <= std_logic_vector(unsigned(tmp_62_cast_fu_334_p1) + unsigned(tmp_128_reg_483));
    tmp_15_fu_462_p2 <= (tmp_13_fu_456_p2 and tmp_14_reg_594);
        tmp_179_cast_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_131_fu_245_p2),12));

    tmp_184_cast_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_134_fu_306_p2),64));
        tmp_187_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_137_fu_362_p2),12));

    tmp_192_cast_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_140_reg_537),64));
        tmp_193_cast_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_141_reg_542),64));

    tmp_61_cast_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_125),13));
    tmp_62_cast_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_149),15));
    tmp_64_fu_270_p1 <= tmp_132_fu_265_p2(10 - 1 downto 0);
    tmp_65_fu_440_p1 <= result_to_int_fu_427_p1(23 - 1 downto 0);
    tmp_66_fu_377_p1 <= tmp_138_fu_372_p2(10 - 1 downto 0);
    tmp_cast_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_113),12));
    tmp_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_102),64));
    tmp_s_fu_191_p3 <= (co_reg_102 & ap_const_lv7_0);
    w_9_fu_413_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(w_reg_125));
    weight_address0 <= tmp_193_cast_fu_423_p1(14 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
