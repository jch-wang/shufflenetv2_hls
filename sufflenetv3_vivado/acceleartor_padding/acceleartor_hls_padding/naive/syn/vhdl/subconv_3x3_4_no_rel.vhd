-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_4_no_rel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of subconv_3x3_4_no_rel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_3_fu_196_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_3_reg_477 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_54_cast_fu_241_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_54_cast_reg_482 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond4_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_cast_fu_263_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_56_cast_reg_488 : STD_LOGIC_VECTOR (10 downto 0);
    signal bias_addr_reg_493 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_44_fu_302_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_44_reg_501 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond3_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_3_fu_314_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond2_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_3_fu_326_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_3_reg_517 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_46_fu_336_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_46_reg_522 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond1_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_351_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_21_reg_528 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_47_fu_362_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_47_reg_533 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_49_fu_395_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_49_reg_538 : STD_LOGIC_VECTOR (12 downto 0);
    signal n_3_fu_407_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_3_reg_546 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_50_fu_417_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_50_reg_551 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_442_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_51_reg_556 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal weight_load_reg_571 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal input_load_reg_576 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_reg_581 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal bias_load_reg_591 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_45_fu_459_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_45_reg_596 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal w_3_fu_464_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_3_reg_601 : STD_LOGIC_VECTOR (2 downto 0);
    signal result_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal co_reg_99 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_reg_110 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_122 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal sum_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_146 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_157 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_169 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_cast_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_70_cast_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_cast_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_180_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_s_fu_211_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_39_fu_223_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_cast_fu_219_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_231_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_40_fu_235_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_41_fu_245_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_253_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_fu_207_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_42_fu_257_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_22_fu_273_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_43_fu_277_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_36_fu_282_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_cast_fu_286_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl4_cast_fu_294_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_20_cast_fu_332_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp1_fu_341_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_cast_fu_347_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_37_fu_357_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_22_cast_fu_367_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_48_fu_370_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_38_fu_375_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_cast_fu_379_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl6_cast_fu_387_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_23_cast_fu_413_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_fu_422_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_428_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_24_fu_432_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_25_cast_fu_438_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_19_cast_fu_455_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);

    component ShuffleNetV2_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ShuffleNetV2_faddbkb_x_U98 : component ShuffleNetV2_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_180_p0,
        din1 => grp_fu_180_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_180_p2);

    ShuffleNetV2_fmulcud_x_U99 : component ShuffleNetV2_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_load_reg_571,
        din1 => input_load_reg_576,
        ce => ap_const_logic_1,
        dout => grp_fu_186_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_267_p2 = ap_const_lv1_1))) then 
                co_reg_99 <= co_3_reg_477;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_99 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    h_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_190_p2 = ap_const_lv1_0))) then 
                h_reg_110 <= ap_const_lv3_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_308_p2 = ap_const_lv1_1))) then 
                h_reg_110 <= h_3_fu_314_p2;
            end if; 
        end if;
    end process;

    m_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_308_p2))) then 
                m_reg_146 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_401_p2))) then 
                m_reg_146 <= m_3_reg_517;
            end if; 
        end if;
    end process;

    n_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                n_reg_169 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                n_reg_169 <= n_3_reg_546;
            end if; 
        end if;
    end process;

    sum_1_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                sum_1_reg_157 <= sum_reg_134;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                sum_1_reg_157 <= grp_fu_180_p2;
            end if; 
        end if;
    end process;

    sum_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_308_p2))) then 
                sum_reg_134 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_401_p2))) then 
                sum_reg_134 <= sum_1_reg_157;
            end if; 
        end if;
    end process;

    w_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_267_p2))) then 
                w_reg_122 <= ap_const_lv3_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                w_reg_122 <= w_3_reg_601;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_190_p2 = ap_const_lv1_0))) then
                bias_addr_reg_493 <= tmp_fu_202_p1(7 - 1 downto 0);
                    tmp_54_cast_reg_482(11 downto 1) <= tmp_54_cast_fu_241_p1(11 downto 1);
                tmp_56_cast_reg_488 <= tmp_56_cast_fu_263_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                bias_load_reg_591 <= bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_3_reg_477 <= co_3_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                input_load_reg_576 <= input_r_q0;
                weight_load_reg_571 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_3_reg_517 <= m_3_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                n_3_reg_546 <= n_3_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                result_reg_606 <= grp_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_320_p2))) then
                tmp_21_reg_528 <= tmp_21_fu_351_p2;
                tmp_46_reg_522 <= tmp_46_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_26_reg_581 <= grp_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_267_p2))) then
                    tmp_44_reg_501(12 downto 1) <= tmp_44_fu_302_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_45_reg_596 <= tmp_45_fu_459_p2;
                w_3_reg_601 <= w_3_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_47_reg_533 <= tmp_47_fu_362_p2;
                    tmp_49_reg_538(12 downto 1) <= tmp_49_fu_395_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond_fu_401_p2))) then
                tmp_50_reg_551 <= tmp_50_fu_417_p2;
                tmp_51_reg_556 <= tmp_51_fu_442_p2;
            end if;
        end if;
    end process;
    tmp_54_cast_reg_482(0) <= '0';
    tmp_44_reg_501(0) <= '0';
    tmp_49_reg_538(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_190_p2, ap_CS_fsm_state3, exitcond3_fu_267_p2, ap_CS_fsm_state4, exitcond2_fu_308_p2, ap_CS_fsm_state5, exitcond1_fu_320_p2, ap_CS_fsm_state7, exitcond_fu_401_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_190_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_267_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_308_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond1_fu_320_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_401_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_190_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_190_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_190_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_190_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_493;

    bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_3_fu_196_p2 <= std_logic_vector(unsigned(co_reg_99) + unsigned(ap_const_lv7_1));
    exitcond1_fu_320_p2 <= "1" when (m_reg_146 = ap_const_lv2_3) else "0";
    exitcond2_fu_308_p2 <= "1" when (w_reg_122 = ap_const_lv3_5) else "0";
    exitcond3_fu_267_p2 <= "1" when (h_reg_110 = ap_const_lv3_5) else "0";
    exitcond4_fu_190_p2 <= "1" when (co_reg_99 = ap_const_lv7_60) else "0";
    exitcond_fu_401_p2 <= "1" when (n_reg_169 = ap_const_lv2_3) else "0";

    grp_fu_180_p0_assign_proc : process(ap_CS_fsm_state20, sum_reg_134, sum_1_reg_157, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_180_p0 <= sum_reg_134;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_180_p0 <= sum_1_reg_157;
        else 
            grp_fu_180_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_180_p1_assign_proc : process(tmp_26_reg_581, bias_load_reg_591, ap_CS_fsm_state20, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_180_p1 <= bias_load_reg_591;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_180_p1 <= tmp_26_reg_581;
        else 
            grp_fu_180_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_3_fu_314_p2 <= std_logic_vector(unsigned(h_reg_110) + unsigned(ap_const_lv3_1));
    input_r_address0 <= tmp_70_cast_fu_451_p1(12 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_3_fu_326_p2 <= std_logic_vector(unsigned(m_reg_146) + unsigned(ap_const_lv2_1));
    n_3_fu_407_p2 <= std_logic_vector(unsigned(n_reg_169) + unsigned(ap_const_lv2_1));
    output_r_address0 <= tmp_61_cast_fu_470_p1(12 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= result_reg_606;

    output_r_we0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_211_p3),11));
    p_shl2_cast_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_223_p3),11));
    p_shl3_cast_fu_286_p3 <= (tmp_36_fu_282_p1 & ap_const_lv3_0);
    p_shl4_cast_fu_294_p3 <= (tmp_43_fu_277_p2 & ap_const_lv1_0);
    p_shl5_cast_fu_379_p3 <= (tmp_38_fu_375_p1 & ap_const_lv3_0);
    p_shl6_cast_fu_387_p3 <= (tmp_48_fu_370_p2 & ap_const_lv1_0);
    p_shl_cast_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_245_p3),10));
        tmp1_cast_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_341_p2),3));

    tmp1_fu_341_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(m_reg_146));
        tmp2_cast_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_422_p2),3));

    tmp2_fu_422_p2 <= std_logic_vector(unsigned(n_reg_169) + unsigned(ap_const_lv2_3));
    tmp_19_cast_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_122),13));
    tmp_20_cast_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_146),11));
    tmp_21_fu_351_p2 <= std_logic_vector(signed(tmp1_cast_fu_347_p1) + signed(h_reg_110));
    tmp_22_cast_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_reg_528),12));
    tmp_23_cast_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_169),11));
    tmp_24_fu_432_p2 <= std_logic_vector(unsigned(w_reg_122) + unsigned(tmp2_cast_fu_428_p1));
    tmp_25_cast_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_432_p2),13));
    tmp_36_fu_282_p1 <= tmp_43_fu_277_p2(10 - 1 downto 0);
    tmp_37_fu_357_p2 <= std_logic_vector(shift_left(unsigned(tmp_46_reg_522),to_integer(unsigned('0' & ap_const_lv11_2(11-1 downto 0)))));
    tmp_38_fu_375_p1 <= tmp_48_fu_370_p2(10 - 1 downto 0);
    tmp_39_fu_223_p3 <= (co_reg_99 & ap_const_lv1_0);
    tmp_40_fu_235_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_219_p1) - unsigned(p_shl2_cast_fu_231_p1));
    tmp_41_fu_245_p3 <= (co_reg_99 & ap_const_lv2_0);
    tmp_42_fu_257_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_253_p1) - unsigned(tmp_cast_fu_207_p1));
    tmp_43_fu_277_p2 <= std_logic_vector(unsigned(tmp_cast_22_fu_273_p1) + unsigned(tmp_54_cast_reg_482));
    tmp_44_fu_302_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_286_p3) - unsigned(p_shl4_cast_fu_294_p3));
    tmp_45_fu_459_p2 <= std_logic_vector(unsigned(tmp_44_reg_501) + unsigned(tmp_19_cast_fu_455_p1));
    tmp_46_fu_336_p2 <= std_logic_vector(unsigned(tmp_20_cast_fu_332_p1) + unsigned(tmp_56_cast_reg_488));
    tmp_47_fu_362_p2 <= std_logic_vector(unsigned(tmp_37_fu_357_p2) - unsigned(tmp_46_reg_522));
    tmp_48_fu_370_p2 <= std_logic_vector(unsigned(tmp_22_cast_fu_367_p1) + unsigned(tmp_54_cast_reg_482));
    tmp_49_fu_395_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_379_p3) - unsigned(p_shl6_cast_fu_387_p3));
    tmp_50_fu_417_p2 <= std_logic_vector(unsigned(tmp_47_reg_533) + unsigned(tmp_23_cast_fu_413_p1));
    tmp_51_fu_442_p2 <= std_logic_vector(unsigned(tmp_49_reg_538) + unsigned(tmp_25_cast_fu_438_p1));
        tmp_54_cast_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_40_fu_235_p2),12));

        tmp_56_cast_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_42_fu_257_p2),11));

    tmp_61_cast_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_reg_596),64));
    tmp_69_cast_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_reg_551),64));
    tmp_70_cast_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_reg_556),64));
    tmp_cast_22_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_110),12));
    tmp_cast_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_99),10));
    tmp_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_99),64));
    tmp_s_fu_211_p3 <= (co_reg_99 & ap_const_lv3_0);
    w_3_fu_464_p2 <= std_logic_vector(unsigned(w_reg_122) + unsigned(ap_const_lv3_1));
    weight_address0 <= tmp_69_cast_fu_447_p1(10 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
