-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_1x1_16p_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shuffleunit0_2_outpu_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    shuffleunit0_2_outpu_ce0 : OUT STD_LOGIC;
    shuffleunit0_2_outpu_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ShuffleConvs_1_Downs_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ShuffleConvs_1_Downs_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_we0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of subconv_1x1_16p_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_11_fu_176_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal co_11_reg_458 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_157_fu_215_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_157_reg_463 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond3_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_159_fu_233_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_159_reg_468 : STD_LOGIC_VECTOR (10 downto 0);
    signal bias_addr_reg_473 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_245_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_cast_reg_481 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond2_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_161_fu_274_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_161_reg_486 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_67_cast_fu_286_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_67_cast_reg_494 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond1_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ShuffleConvs_1_Downs_reg_499 : STD_LOGIC_VECTOR (13 downto 0);
    signal h_11_fu_300_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ci_5_fu_312_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ci_5_reg_512 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_163_fu_322_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_163_reg_517 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_169_fu_388_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_169_reg_522 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_11_fu_393_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_11_reg_527 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal weight_load_reg_542 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal shuffleunit0_2_outpu_1_reg_547 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_69_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal bias_load_reg_562 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal result_reg_567 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_24_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_574 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal co_reg_98 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_reg_109 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_121 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal sum_reg_133 : STD_LOGIC_VECTOR (31 downto 0);
    signal ci_reg_145 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_182_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_224_cast_fu_295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_225_cast_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_233_cast_fu_403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_s_fu_187_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_156_fu_199_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_195_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl3_cast_fu_211_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_158_fu_221_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_229_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast1_fu_207_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_160_fu_249_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_70_fu_262_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl4_cast_fu_254_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl5_cast_fu_270_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_162_fu_290_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_68_cast_fu_318_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_164_fu_327_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_165_fu_339_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl8_cast_fu_335_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl9_cast_fu_347_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_166_fu_351_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_167_fu_357_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_72_fu_370_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl6_cast_fu_362_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl7_cast_fu_378_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_168_fu_382_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal result_to_int_fu_407_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_410_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_71_fu_420_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);

    component ShuffleNetV2_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fcmpdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    ShuffleNetV2_faddbkb_x_U41 : component ShuffleNetV2_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_reg_133,
        din1 => grp_fu_156_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_156_p2);

    ShuffleNetV2_fmulcud_x_U42 : component ShuffleNetV2_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_load_reg_542,
        din1 => shuffleunit0_2_outpu_1_reg_547,
        ce => ap_const_logic_1,
        dout => grp_fu_161_p2);

    ShuffleNetV2_fcmpdEe_x_U43 : component ShuffleNetV2_fcmpdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => result_reg_567,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_24_fu_165_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ci_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_280_p2))) then 
                ci_reg_145 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                ci_reg_145 <= ci_5_reg_512;
            end if; 
        end if;
    end process;

    co_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_239_p2 = ap_const_lv1_1))) then 
                co_reg_98 <= co_11_reg_458;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_98 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    h_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_170_p2 = ap_const_lv1_0))) then 
                h_reg_109 <= ap_const_lv5_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_280_p2 = ap_const_lv1_1))) then 
                h_reg_109 <= h_11_fu_300_p2;
            end if; 
        end if;
    end process;

    sum_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_280_p2))) then 
                sum_reg_133 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                sum_reg_133 <= grp_fu_156_p2;
            end if; 
        end if;
    end process;

    w_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_239_p2))) then 
                w_reg_121 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                w_reg_121 <= w_11_reg_527;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_280_p2))) then
                ShuffleConvs_1_Downs_reg_499 <= tmp_224_cast_fu_295_p1(14 - 1 downto 0);
                    tmp_67_cast_reg_494(4 downto 0) <= tmp_67_cast_fu_286_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_170_p2 = ap_const_lv1_0))) then
                bias_addr_reg_473 <= tmp_fu_182_p1(6 - 1 downto 0);
                    tmp_157_reg_463(12 downto 4) <= tmp_157_fu_215_p2(12 downto 4);
                    tmp_159_reg_468(10 downto 1) <= tmp_159_fu_233_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                bias_load_reg_562 <= bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                ci_5_reg_512 <= ci_5_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_11_reg_458 <= co_11_fu_176_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                result_reg_567 <= grp_fu_156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                shuffleunit0_2_outpu_1_reg_547 <= shuffleunit0_2_outpu_q0;
                weight_load_reg_542 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_239_p2))) then
                    tmp_161_reg_486(14 downto 1) <= tmp_161_fu_274_p2(14 downto 1);
                    tmp_cast_reg_481(4 downto 0) <= tmp_cast_fu_245_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond_fu_306_p2))) then
                tmp_163_reg_517 <= tmp_163_fu_322_p2;
                tmp_169_reg_522 <= tmp_169_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_24_reg_574 <= tmp_24_fu_165_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_69_reg_552 <= grp_fu_161_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_fu_306_p2))) then
                w_11_reg_527 <= w_11_fu_393_p2;
            end if;
        end if;
    end process;
    tmp_157_reg_463(3 downto 0) <= "0000";
    tmp_159_reg_468(0) <= '0';
    tmp_cast_reg_481(10 downto 5) <= "000000";
    tmp_161_reg_486(0) <= '0';
    tmp_67_cast_reg_494(14 downto 5) <= "0000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_170_p2, ap_CS_fsm_state3, exitcond2_fu_239_p2, ap_CS_fsm_state4, exitcond1_fu_280_p2, ap_CS_fsm_state5, exitcond_fu_306_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_170_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_239_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_280_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_fu_306_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ShuffleConvs_1_Downs_address0 <= ShuffleConvs_1_Downs_reg_499;

    ShuffleConvs_1_Downs_ce0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ShuffleConvs_1_Downs_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_d0 <= 
        result_reg_567 when (tmp_25_fu_442_p2(0) = '1') else 
        ap_const_lv32_0;

    ShuffleConvs_1_Downs_we0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ShuffleConvs_1_Downs_we0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_170_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_170_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_170_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_170_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_473;

    bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ci_5_fu_312_p2 <= std_logic_vector(unsigned(ci_reg_145) + unsigned(ap_const_lv6_1));
    co_11_fu_176_p2 <= std_logic_vector(unsigned(co_reg_98) + unsigned(ap_const_lv6_1));
    exitcond1_fu_280_p2 <= "1" when (w_reg_121 = ap_const_lv5_11) else "0";
    exitcond2_fu_239_p2 <= "1" when (h_reg_109 = ap_const_lv5_11) else "0";
    exitcond3_fu_170_p2 <= "1" when (co_reg_98 = ap_const_lv6_30) else "0";
    exitcond_fu_306_p2 <= "1" when (ci_reg_145 = ap_const_lv6_30) else "0";

    grp_fu_156_p1_assign_proc : process(tmp_69_reg_552, bias_load_reg_562, ap_CS_fsm_state12, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_156_p1 <= bias_load_reg_562;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_156_p1 <= tmp_69_reg_552;
        else 
            grp_fu_156_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_11_fu_300_p2 <= std_logic_vector(unsigned(h_reg_109) + unsigned(ap_const_lv5_1));
    notlhs_fu_424_p2 <= "0" when (tmp_21_fu_410_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_430_p2 <= "1" when (tmp_71_fu_420_p1 = ap_const_lv23_0) else "0";
    p_shl1_cast_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_158_fu_221_p3),11));
    p_shl2_cast_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_187_p3),13));
    p_shl3_cast1_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_156_fu_199_p3),11));
    p_shl3_cast_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_156_fu_199_p3),13));
    p_shl4_cast_fu_254_p3 <= (tmp_160_fu_249_p2 & ap_const_lv4_0);
    p_shl5_cast_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_70_fu_262_p3),15));
    p_shl6_cast_fu_362_p3 <= (tmp_167_fu_357_p2 & ap_const_lv4_0);
    p_shl7_cast_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_72_fu_370_p3),15));
    p_shl8_cast_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_164_fu_327_p3),11));
    p_shl9_cast_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_165_fu_339_p3),11));
    result_to_int_fu_407_p1 <= result_reg_567;
    shuffleunit0_2_outpu_address0 <= tmp_233_cast_fu_403_p1(14 - 1 downto 0);

    shuffleunit0_2_outpu_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            shuffleunit0_2_outpu_ce0 <= ap_const_logic_1;
        else 
            shuffleunit0_2_outpu_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_156_fu_199_p3 <= (co_reg_98 & ap_const_lv4_0);
    tmp_157_fu_215_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_195_p1) - unsigned(p_shl3_cast_fu_211_p1));
    tmp_158_fu_221_p3 <= (co_reg_98 & ap_const_lv1_0);
    tmp_159_fu_233_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_229_p1) + unsigned(p_shl3_cast1_fu_207_p1));
    tmp_160_fu_249_p2 <= std_logic_vector(unsigned(tmp_cast_fu_245_p1) + unsigned(tmp_159_reg_468));
    tmp_161_fu_274_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_254_p3) + unsigned(p_shl5_cast_fu_270_p1));
    tmp_162_fu_290_p2 <= std_logic_vector(unsigned(tmp_161_reg_486) + unsigned(tmp_67_cast_fu_286_p1));
    tmp_163_fu_322_p2 <= std_logic_vector(unsigned(tmp_68_cast_fu_318_p1) + unsigned(tmp_157_reg_463));
    tmp_164_fu_327_p3 <= (ci_reg_145 & ap_const_lv4_0);
    tmp_165_fu_339_p3 <= (ci_reg_145 & ap_const_lv1_0);
    tmp_166_fu_351_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_335_p1) + unsigned(p_shl9_cast_fu_347_p1));
    tmp_167_fu_357_p2 <= std_logic_vector(unsigned(tmp_cast_reg_481) + unsigned(tmp_166_fu_351_p2));
    tmp_168_fu_382_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_362_p3) + unsigned(p_shl7_cast_fu_378_p1));
    tmp_169_fu_388_p2 <= std_logic_vector(unsigned(tmp_67_cast_reg_494) + unsigned(tmp_168_fu_382_p2));
    tmp_21_fu_410_p4 <= result_to_int_fu_407_p1(30 downto 23);
    tmp_224_cast_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_162_fu_290_p2),64));
        tmp_225_cast_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_163_reg_517),64));

    tmp_233_cast_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_169_reg_522),64));
    tmp_23_fu_436_p2 <= (notrhs_fu_430_p2 or notlhs_fu_424_p2);
    tmp_25_fu_442_p2 <= (tmp_23_fu_436_p2 and tmp_24_reg_574);
    tmp_67_cast_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_121),15));
    tmp_68_cast_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_145),13));
    tmp_70_fu_262_p3 <= (tmp_160_fu_249_p2 & ap_const_lv1_0);
    tmp_71_fu_420_p1 <= result_to_int_fu_407_p1(23 - 1 downto 0);
    tmp_72_fu_370_p3 <= (tmp_167_fu_357_p2 & ap_const_lv1_0);
    tmp_cast_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_109),11));
    tmp_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_98),64));
    tmp_s_fu_187_p3 <= (co_reg_98 & ap_const_lv6_0);
    w_11_fu_393_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(w_reg_121));
    weight_address0 <= tmp_225_cast_fu_399_p1(12 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
