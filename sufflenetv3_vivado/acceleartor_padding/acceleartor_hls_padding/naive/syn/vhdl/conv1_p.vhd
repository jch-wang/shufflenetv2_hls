-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv1_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv1_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_23_fu_240_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_23_reg_649 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_424_cast_fu_273_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_424_cast_reg_654 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond5_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_296_fu_301_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_296_reg_659 : STD_LOGIC_VECTOR (10 downto 0);
    signal bias_addr_reg_664 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_298_fu_342_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_298_reg_672 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond4_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_23_fu_354_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond3_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ci_8_fu_366_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ci_8_reg_688 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_302_fu_400_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_302_reg_693 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond2_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_304_fu_427_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_304_reg_698 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_7_fu_439_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_7_reg_706 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_306_fu_470_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_306_reg_711 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond1_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_307_fu_496_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_307_reg_716 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_308_fu_519_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_308_reg_722 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal n_7_fu_531_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_7_reg_730 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_309_fu_541_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_309_reg_735 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_310_fu_566_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_310_reg_740 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal weight_load_reg_755 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal input_load_reg_760 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_93_reg_765 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal bias_load_reg_775 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_299_fu_583_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_299_reg_780 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal w_23_fu_588_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_23_reg_785 : STD_LOGIC_VECTOR (5 downto 0);
    signal result_reg_790 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_39_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_reg_797 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal co_reg_115 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_126 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_reg_138 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal sum_reg_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal ci_reg_162 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_173 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_185 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_2_reg_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_208 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_446_cast_fu_571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_447_cast_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_432_cast_fu_642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_219_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_s_fu_255_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_fu_263_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_fu_251_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_293_fu_267_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_294_fu_277_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_295_fu_289_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_297_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_285_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_cast_79_fu_313_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_297_fu_317_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_110_fu_330_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl3_cast_fu_322_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl4_cast_fu_338_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_300_fu_376_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_301_fu_388_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl7_cast_fu_396_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl6_cast_fu_384_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_86_cast_fu_372_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_303_fu_406_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_112_fu_415_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_436_cast_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_87_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_305_fu_449_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_114_fu_458_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl10_cast_fu_462_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_113_fu_454_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp1_fu_476_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_cast_fu_482_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_88_fu_486_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_89_cast_fu_492_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_115_fu_508_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl9_cast_fu_515_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl8_cast_fu_501_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_90_cast_fu_537_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_fu_546_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_552_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_91_fu_556_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_92_cast_fu_562_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_85_cast_fu_579_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_to_int_fu_594_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_597_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_111_fu_607_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);

    component ShuffleNetV2_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fcmpdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    ShuffleNetV2_faddbkb_U1 : component ShuffleNetV2_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_219_p0,
        din1 => grp_fu_219_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_219_p2);

    ShuffleNetV2_fmulcud_U2 : component ShuffleNetV2_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_load_reg_755,
        din1 => input_load_reg_760,
        ce => ap_const_logic_1,
        dout => grp_fu_225_p2);

    ShuffleNetV2_fcmpdEe_U3 : component ShuffleNetV2_fcmpdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => result_reg_790,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_39_fu_229_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ci_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_348_p2))) then 
                ci_reg_162 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond1_fu_433_p2))) then 
                ci_reg_162 <= ci_8_reg_688;
            end if; 
        end if;
    end process;

    co_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_307_p2 = ap_const_lv1_1))) then 
                co_reg_115 <= co_23_reg_649;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_115 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_234_p2 = ap_const_lv1_0))) then 
                h_reg_126 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_348_p2 = ap_const_lv1_1))) then 
                h_reg_126 <= h_23_fu_354_p2;
            end if; 
        end if;
    end process;

    m_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond_fu_525_p2))) then 
                m_reg_185 <= m_7_reg_706;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_360_p2))) then 
                m_reg_185 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                n_reg_208 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                n_reg_208 <= n_7_reg_730;
            end if; 
        end if;
    end process;

    sum_1_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond_fu_525_p2))) then 
                sum_1_reg_173 <= sum_2_reg_196;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_360_p2))) then 
                sum_1_reg_173 <= sum_reg_150;
            end if; 
        end if;
    end process;

    sum_2_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sum_2_reg_196 <= sum_1_reg_173;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                sum_2_reg_196 <= grp_fu_219_p2;
            end if; 
        end if;
    end process;

    sum_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_348_p2))) then 
                sum_reg_150 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond1_fu_433_p2))) then 
                sum_reg_150 <= sum_1_reg_173;
            end if; 
        end if;
    end process;

    w_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond4_fu_307_p2))) then 
                w_reg_138 <= ap_const_lv6_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                w_reg_138 <= w_23_reg_785;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_234_p2 = ap_const_lv1_0))) then
                bias_addr_reg_664 <= tmp_fu_246_p1(5 - 1 downto 0);
                    tmp_296_reg_659(10 downto 1) <= tmp_296_fu_301_p2(10 downto 1);
                tmp_424_cast_reg_654 <= tmp_424_cast_fu_273_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                bias_load_reg_775 <= bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                ci_8_reg_688 <= ci_8_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_23_reg_649 <= co_23_fu_240_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                input_load_reg_760 <= input_r_q0;
                weight_load_reg_755 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                m_7_reg_706 <= m_7_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                n_7_reg_730 <= n_7_fu_531_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                result_reg_790 <= grp_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond4_fu_307_p2))) then
                    tmp_298_reg_672(15 downto 1) <= tmp_298_fu_342_p2(15 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_299_reg_780 <= tmp_299_fu_583_p2;
                w_23_reg_785 <= w_23_fu_588_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_360_p2))) then
                    tmp_302_reg_693(7 downto 1) <= tmp_302_fu_400_p2(7 downto 1);
                tmp_304_reg_698 <= tmp_304_fu_427_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond1_fu_433_p2))) then
                tmp_306_reg_711 <= tmp_306_fu_470_p2;
                tmp_307_reg_716 <= tmp_307_fu_496_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    tmp_308_reg_722(12 downto 1) <= tmp_308_fu_519_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond_fu_525_p2))) then
                tmp_309_reg_735 <= tmp_309_fu_541_p2;
                tmp_310_reg_740 <= tmp_310_fu_566_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp_39_reg_797 <= tmp_39_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_93_reg_765 <= grp_fu_225_p2;
            end if;
        end if;
    end process;
    tmp_296_reg_659(0) <= '0';
    tmp_298_reg_672(0) <= '0';
    tmp_302_reg_693(0) <= '0';
    tmp_308_reg_722(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_234_p2, ap_CS_fsm_state3, exitcond4_fu_307_p2, ap_CS_fsm_state4, exitcond3_fu_348_p2, ap_CS_fsm_state5, exitcond2_fu_360_p2, ap_CS_fsm_state6, exitcond1_fu_433_p2, ap_CS_fsm_state8, exitcond_fu_525_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_234_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_307_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_348_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_360_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond1_fu_433_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond_fu_525_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_234_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_234_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_234_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_234_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_664;

    bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ci_8_fu_366_p2 <= std_logic_vector(unsigned(ci_reg_162) + unsigned(ap_const_lv2_1));
    co_23_fu_240_p2 <= std_logic_vector(unsigned(co_reg_115) + unsigned(ap_const_lv5_1));
    exitcond1_fu_433_p2 <= "1" when (m_reg_185 = ap_const_lv2_3) else "0";
    exitcond2_fu_360_p2 <= "1" when (ci_reg_162 = ap_const_lv2_3) else "0";
    exitcond3_fu_348_p2 <= "1" when (w_reg_138 = ap_const_lv6_21) else "0";
    exitcond4_fu_307_p2 <= "1" when (h_reg_126 = ap_const_lv6_21) else "0";
    exitcond5_fu_234_p2 <= "1" when (co_reg_115 = ap_const_lv5_18) else "0";
    exitcond_fu_525_p2 <= "1" when (n_reg_208 = ap_const_lv2_3) else "0";

    grp_fu_219_p0_assign_proc : process(sum_reg_150, sum_2_reg_196, ap_CS_fsm_state15, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_219_p0 <= sum_reg_150;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_219_p0 <= sum_2_reg_196;
        else 
            grp_fu_219_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_219_p1_assign_proc : process(tmp_93_reg_765, bias_load_reg_775, ap_CS_fsm_state15, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_219_p1 <= bias_load_reg_775;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_219_p1 <= tmp_93_reg_765;
        else 
            grp_fu_219_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_23_fu_354_p2 <= std_logic_vector(unsigned(h_reg_126) + unsigned(ap_const_lv6_1));
    input_r_address0 <= tmp_447_cast_fu_575_p1(12 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_7_fu_439_p2 <= std_logic_vector(unsigned(m_reg_185) + unsigned(ap_const_lv2_1));
    n_7_fu_531_p2 <= std_logic_vector(unsigned(n_reg_208) + unsigned(ap_const_lv2_1));
    notlhs_fu_611_p2 <= "0" when (tmp_36_fu_597_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_617_p2 <= "1" when (tmp_111_fu_607_p1 = ap_const_lv23_0) else "0";
    output_r_address0 <= tmp_432_cast_fu_642_p1(15 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= 
        result_reg_790 when (tmp_40_fu_629_p2(0) = '1') else 
        ap_const_lv32_0;

    output_r_we0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl10_cast_fu_462_p3 <= (tmp_114_fu_458_p1 & ap_const_lv2_0);
    p_shl1_cast_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_295_fu_289_p3),11));
    p_shl2_cast_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_255_p3),8));
    p_shl3_cast_fu_322_p3 <= (tmp_297_fu_317_p2 & ap_const_lv5_0);
    p_shl4_cast_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_110_fu_330_p3),16));
        p_shl5_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_112_fu_415_p3),64));

    p_shl6_cast_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_300_fu_376_p3),8));
    p_shl7_cast_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_301_fu_388_p3),8));
    p_shl8_cast_fu_501_p3 <= (tmp_307_reg_716 & ap_const_lv5_0);
    p_shl9_cast_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_115_fu_508_p3),13));
    p_shl_cast_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_294_fu_277_p3),11));
    result_to_int_fu_594_p1 <= result_reg_790;
        tmp1_cast_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_476_p2),6));

    tmp1_fu_476_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(m_reg_185));
        tmp2_cast_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_546_p2),6));

    tmp2_fu_546_p2 <= std_logic_vector(unsigned(n_reg_208) + unsigned(ap_const_lv2_3));
    tmp_110_fu_330_p3 <= (tmp_297_fu_317_p2 & ap_const_lv1_0);
    tmp_111_fu_607_p1 <= result_to_int_fu_594_p1(23 - 1 downto 0);
    tmp_112_fu_415_p3 <= (tmp_303_fu_406_p2 & ap_const_lv2_0);
    tmp_113_fu_454_p1 <= tmp_305_fu_449_p2(11 - 1 downto 0);
    tmp_114_fu_458_p1 <= tmp_305_fu_449_p2(9 - 1 downto 0);
    tmp_115_fu_508_p3 <= (tmp_307_reg_716 & ap_const_lv1_0);
    tmp_293_fu_267_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_263_p1) - unsigned(tmp_cast_fu_251_p1));
    tmp_294_fu_277_p3 <= (co_reg_115 & ap_const_lv5_0);
    tmp_295_fu_289_p3 <= (co_reg_115 & ap_const_lv1_0);
    tmp_296_fu_301_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_297_p1) + unsigned(p_shl_cast_fu_285_p1));
    tmp_297_fu_317_p2 <= std_logic_vector(unsigned(tmp_cast_79_fu_313_p1) + unsigned(tmp_296_reg_659));
    tmp_298_fu_342_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_322_p3) + unsigned(p_shl4_cast_fu_338_p1));
    tmp_299_fu_583_p2 <= std_logic_vector(unsigned(tmp_298_reg_672) + unsigned(tmp_85_cast_fu_579_p1));
    tmp_300_fu_376_p3 <= (ci_reg_162 & ap_const_lv5_0);
    tmp_301_fu_388_p3 <= (ci_reg_162 & ap_const_lv1_0);
    tmp_302_fu_400_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_396_p1) + unsigned(p_shl6_cast_fu_384_p1));
    tmp_303_fu_406_p2 <= std_logic_vector(signed(tmp_424_cast_reg_654) + signed(tmp_86_cast_fu_372_p1));
    tmp_304_fu_427_p2 <= std_logic_vector(signed(p_shl5_fu_423_p1) - signed(tmp_436_cast_fu_411_p1));
    tmp_305_fu_449_p2 <= std_logic_vector(unsigned(tmp_304_reg_698) + unsigned(tmp_87_fu_445_p1));
    tmp_306_fu_470_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_462_p3) - unsigned(tmp_113_fu_454_p1));
    tmp_307_fu_496_p2 <= std_logic_vector(unsigned(tmp_302_reg_693) + unsigned(tmp_89_cast_fu_492_p1));
    tmp_308_fu_519_p2 <= std_logic_vector(unsigned(p_shl9_cast_fu_515_p1) + unsigned(p_shl8_cast_fu_501_p3));
    tmp_309_fu_541_p2 <= std_logic_vector(unsigned(tmp_306_reg_711) + unsigned(tmp_90_cast_fu_537_p1));
    tmp_310_fu_566_p2 <= std_logic_vector(unsigned(tmp_308_reg_722) + unsigned(tmp_92_cast_fu_562_p1));
    tmp_36_fu_597_p4 <= result_to_int_fu_594_p1(30 downto 23);
    tmp_38_fu_623_p2 <= (notrhs_fu_617_p2 or notlhs_fu_611_p2);
    tmp_40_fu_629_p2 <= (tmp_38_fu_623_p2 and tmp_39_reg_797);
        tmp_424_cast_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_293_fu_267_p2),9));

    tmp_432_cast_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_299_reg_780),64));
        tmp_436_cast_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_303_fu_406_p2),64));

    tmp_446_cast_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_309_reg_735),64));
    tmp_447_cast_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_310_reg_740),64));
    tmp_85_cast_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_138),16));
    tmp_86_cast_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_162),9));
    tmp_87_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_185),64));
    tmp_88_fu_486_p2 <= std_logic_vector(unsigned(h_reg_126) + unsigned(tmp1_cast_fu_482_p1));
    tmp_89_cast_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_88_fu_486_p2),8));
    tmp_90_cast_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_208),11));
    tmp_91_fu_556_p2 <= std_logic_vector(unsigned(w_reg_138) + unsigned(tmp2_cast_fu_552_p1));
    tmp_92_cast_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_91_fu_556_p2),13));
    tmp_cast_79_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_126),11));
    tmp_cast_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_115),8));
    tmp_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_115),64));
    tmp_s_fu_255_p3 <= (co_reg_115 & ap_const_lv2_0);
    w_23_fu_588_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(w_reg_138));
    weight_address0 <= tmp_446_cast_fu_571_p1(10 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
