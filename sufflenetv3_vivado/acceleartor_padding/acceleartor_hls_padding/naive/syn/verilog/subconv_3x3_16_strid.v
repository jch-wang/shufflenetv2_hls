// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_16_strid (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [8:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [5:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg weight_ce0;
reg bias_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] co_5_fu_208_p2;
reg   [5:0] co_5_reg_530;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_70_fu_251_p2;
reg   [10:0] tmp_70_reg_535;
wire   [0:0] exitcond4_fu_202_p2;
wire  signed [9:0] tmp_97_cast_fu_275_p1;
reg  signed [9:0] tmp_97_cast_reg_540;
wire   [9:0] tmp_74_fu_291_p2;
reg   [9:0] tmp_74_reg_545;
reg   [5:0] bias_addr_reg_550;
wire   [4:0] tmp_s_fu_303_p3;
reg   [4:0] tmp_s_reg_558;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond3_fu_297_p2;
wire   [13:0] tmp_76_fu_344_p2;
reg   [13:0] tmp_76_reg_563;
wire   [4:0] tmp_38_fu_356_p3;
reg   [4:0] tmp_38_reg_571;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond2_fu_350_p2;
wire   [3:0] h_5_fu_364_p2;
wire   [1:0] m_5_fu_376_p2;
reg   [1:0] m_5_reg_584;
wire    ap_CS_fsm_state5;
wire   [9:0] tmp_79_fu_397_p2;
reg   [9:0] tmp_79_reg_589;
wire   [0:0] exitcond1_fu_370_p2;
wire   [14:0] tmp_81_fu_447_p2;
reg   [14:0] tmp_81_reg_594;
wire   [13:0] tmp_77_fu_457_p2;
reg   [13:0] tmp_77_reg_599;
wire   [3:0] w_5_fu_462_p2;
reg   [3:0] w_5_reg_604;
wire   [1:0] n_5_fu_474_p2;
reg   [1:0] n_5_reg_612;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_468_p2;
reg   [31:0] weight_load_reg_627;
wire    ap_CS_fsm_state7;
reg   [31:0] input_load_reg_632;
wire   [31:0] grp_fu_198_p2;
reg   [31:0] tmp_46_reg_637;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_192_p2;
wire    ap_CS_fsm_state16;
reg   [31:0] bias_load_reg_647;
wire    ap_CS_fsm_state17;
reg   [31:0] result_reg_652;
wire    ap_CS_fsm_state22;
reg   [5:0] co_reg_111;
reg   [3:0] h_reg_122;
reg   [3:0] w_reg_134;
wire    ap_CS_fsm_state23;
reg   [31:0] sum_reg_146;
reg   [1:0] m_reg_158;
reg   [31:0] sum_1_reg_169;
reg   [1:0] n_reg_181;
wire   [63:0] tmp_fu_214_p1;
wire   [63:0] tmp_113_cast_fu_489_p1;
wire   [63:0] tmp_114_cast_fu_518_p1;
wire   [63:0] tmp_105_cast_fu_523_p1;
reg   [31:0] grp_fu_192_p0;
reg   [31:0] grp_fu_192_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state8;
wire   [9:0] tmp_68_fu_223_p3;
wire   [6:0] tmp_69_fu_235_p3;
wire   [10:0] p_shl4_cast_fu_247_p1;
wire   [10:0] p_shl3_cast_fu_231_p1;
wire   [7:0] tmp_71_fu_257_p3;
wire   [8:0] p_shl2_cast_fu_265_p1;
wire   [8:0] tmp_cast_fu_219_p1;
wire   [8:0] tmp_72_fu_269_p2;
wire   [8:0] tmp_73_fu_279_p3;
wire   [9:0] p_shl4_cast2_fu_243_p1;
wire   [9:0] p_shl_cast_fu_287_p1;
wire   [9:0] tmp_37_cast_fu_311_p1;
wire   [9:0] tmp_75_fu_315_p2;
wire   [12:0] tmp_42_fu_320_p3;
wire   [10:0] tmp_43_fu_332_p3;
wire   [13:0] p_shl6_cast_fu_340_p1;
wire   [13:0] p_shl5_cast_fu_328_p1;
wire   [9:0] tmp_40_cast_fu_382_p1;
wire   [9:0] tmp_78_fu_386_p2;
wire   [9:0] tmp_45_fu_391_p2;
wire   [1:0] tmp1_fu_403_p2;
wire  signed [4:0] tmp1_cast_fu_409_p1;
wire   [4:0] tmp_41_fu_413_p2;
wire   [10:0] tmp_42_cast_fu_418_p1;
wire   [10:0] tmp_80_fu_422_p2;
wire   [11:0] tmp_47_fu_435_p3;
wire   [14:0] p_shl8_cast_fu_443_p1;
wire   [14:0] p_shl7_cast_fu_427_p3;
wire   [13:0] tmp_39_cast_fu_453_p1;
wire   [9:0] tmp_43_cast_fu_480_p1;
wire   [9:0] tmp_82_fu_484_p2;
wire   [1:0] tmp2_fu_494_p2;
wire  signed [4:0] tmp2_cast_fu_500_p1;
wire   [4:0] tmp_44_fu_504_p2;
wire   [14:0] tmp_45_cast_fu_509_p1;
wire   [14:0] tmp_83_fu_513_p2;
reg   [22:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_x_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_192_p0),
    .din1(grp_fu_192_p1),
    .ce(1'b1),
    .dout(grp_fu_192_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_x_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_627),
    .din1(input_load_reg_632),
    .ce(1'b1),
    .dout(grp_fu_198_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_297_p2 == 1'd1))) begin
        co_reg_111 <= co_5_reg_530;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_111 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_202_p2 == 1'd0))) begin
        h_reg_122 <= 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_350_p2 == 1'd1))) begin
        h_reg_122 <= h_5_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_468_p2))) begin
        m_reg_158 <= m_5_reg_584;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_350_p2))) begin
        m_reg_158 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_370_p2))) begin
        n_reg_181 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        n_reg_181 <= n_5_reg_612;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_370_p2))) begin
        sum_1_reg_169 <= sum_reg_146;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        sum_1_reg_169 <= grp_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_468_p2))) begin
        sum_reg_146 <= sum_1_reg_169;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_350_p2))) begin
        sum_reg_146 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond3_fu_297_p2))) begin
        w_reg_134 <= 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        w_reg_134 <= w_5_reg_604;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_202_p2 == 1'd0))) begin
        bias_addr_reg_550 <= tmp_fu_214_p1;
        tmp_70_reg_535[10 : 1] <= tmp_70_fu_251_p2[10 : 1];
        tmp_74_reg_545[9 : 1] <= tmp_74_fu_291_p2[9 : 1];
        tmp_97_cast_reg_540 <= tmp_97_cast_fu_275_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        bias_load_reg_647 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_5_reg_530 <= co_5_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_load_reg_632 <= input_r_q0;
        weight_load_reg_627 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_5_reg_584 <= m_5_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_5_reg_612 <= n_5_fu_474_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        result_reg_652 <= grp_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_350_p2))) begin
        tmp_38_reg_571[4 : 1] <= tmp_38_fu_356_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_46_reg_637 <= grp_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond3_fu_297_p2))) begin
        tmp_76_reg_563[13 : 1] <= tmp_76_fu_344_p2[13 : 1];
        tmp_s_reg_558[4 : 1] <= tmp_s_fu_303_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond1_fu_370_p2))) begin
        tmp_77_reg_599 <= tmp_77_fu_457_p2;
        w_5_reg_604 <= w_5_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_370_p2))) begin
        tmp_79_reg_589 <= tmp_79_fu_397_p2;
        tmp_81_reg_594[14 : 1] <= tmp_81_fu_447_p2[14 : 1];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_202_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_202_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_192_p0 = sum_reg_146;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_192_p0 = sum_1_reg_169;
    end else begin
        grp_fu_192_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_192_p1 = bias_load_reg_647;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_192_p1 = tmp_46_reg_637;
    end else begin
        grp_fu_192_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_202_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_297_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_350_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_370_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_468_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bias_address0 = bias_addr_reg_550;

assign co_5_fu_208_p2 = (co_reg_111 + 6'd1);

assign exitcond1_fu_370_p2 = ((m_reg_158 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_350_p2 = ((w_reg_134 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond3_fu_297_p2 = ((h_reg_122 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond4_fu_202_p2 = ((co_reg_111 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond_fu_468_p2 = ((n_reg_181 == 2'd3) ? 1'b1 : 1'b0);

assign h_5_fu_364_p2 = (h_reg_122 + 4'd1);

assign input_r_address0 = tmp_114_cast_fu_518_p1;

assign m_5_fu_376_p2 = (m_reg_158 + 2'd1);

assign n_5_fu_474_p2 = (n_reg_181 + 2'd1);

assign output_r_address0 = tmp_105_cast_fu_523_p1;

assign output_r_d0 = result_reg_652;

assign p_shl2_cast_fu_265_p1 = tmp_71_fu_257_p3;

assign p_shl3_cast_fu_231_p1 = tmp_68_fu_223_p3;

assign p_shl4_cast2_fu_243_p1 = tmp_69_fu_235_p3;

assign p_shl4_cast_fu_247_p1 = tmp_69_fu_235_p3;

assign p_shl5_cast_fu_328_p1 = tmp_42_fu_320_p3;

assign p_shl6_cast_fu_340_p1 = tmp_43_fu_332_p3;

assign p_shl7_cast_fu_427_p3 = {{tmp_80_fu_422_p2}, {4'd0}};

assign p_shl8_cast_fu_443_p1 = tmp_47_fu_435_p3;

assign p_shl_cast_fu_287_p1 = tmp_73_fu_279_p3;

assign tmp1_cast_fu_409_p1 = $signed(tmp1_fu_403_p2);

assign tmp1_fu_403_p2 = (m_reg_158 ^ 2'd2);

assign tmp2_cast_fu_500_p1 = $signed(tmp2_fu_494_p2);

assign tmp2_fu_494_p2 = (n_reg_181 ^ 2'd2);

assign tmp_105_cast_fu_523_p1 = tmp_77_reg_599;

assign tmp_113_cast_fu_489_p1 = tmp_82_fu_484_p2;

assign tmp_114_cast_fu_518_p1 = tmp_83_fu_513_p2;

assign tmp_37_cast_fu_311_p1 = h_reg_122;

assign tmp_38_fu_356_p3 = {{w_reg_134}, {1'd0}};

assign tmp_39_cast_fu_453_p1 = w_reg_134;

assign tmp_40_cast_fu_382_p1 = m_reg_158;

assign tmp_41_fu_413_p2 = ($signed(tmp_s_reg_558) + $signed(tmp1_cast_fu_409_p1));

assign tmp_42_cast_fu_418_p1 = tmp_41_fu_413_p2;

assign tmp_42_fu_320_p3 = {{tmp_75_fu_315_p2}, {3'd0}};

assign tmp_43_cast_fu_480_p1 = n_reg_181;

assign tmp_43_fu_332_p3 = {{tmp_75_fu_315_p2}, {1'd0}};

assign tmp_44_fu_504_p2 = ($signed(tmp_38_reg_571) + $signed(tmp2_cast_fu_500_p1));

assign tmp_45_cast_fu_509_p1 = tmp_44_fu_504_p2;

assign tmp_45_fu_391_p2 = tmp_78_fu_386_p2 << 10'd2;

assign tmp_47_fu_435_p3 = {{tmp_80_fu_422_p2}, {1'd0}};

assign tmp_68_fu_223_p3 = {{co_reg_111}, {4'd0}};

assign tmp_69_fu_235_p3 = {{co_reg_111}, {1'd0}};

assign tmp_70_fu_251_p2 = (p_shl4_cast_fu_247_p1 + p_shl3_cast_fu_231_p1);

assign tmp_71_fu_257_p3 = {{co_reg_111}, {2'd0}};

assign tmp_72_fu_269_p2 = (p_shl2_cast_fu_265_p1 - tmp_cast_fu_219_p1);

assign tmp_73_fu_279_p3 = {{co_reg_111}, {3'd0}};

assign tmp_74_fu_291_p2 = (p_shl4_cast2_fu_243_p1 + p_shl_cast_fu_287_p1);

assign tmp_75_fu_315_p2 = (tmp_74_reg_545 + tmp_37_cast_fu_311_p1);

assign tmp_76_fu_344_p2 = (p_shl6_cast_fu_340_p1 + p_shl5_cast_fu_328_p1);

assign tmp_77_fu_457_p2 = (tmp_76_reg_563 + tmp_39_cast_fu_453_p1);

assign tmp_78_fu_386_p2 = ($signed(tmp_97_cast_reg_540) + $signed(tmp_40_cast_fu_382_p1));

assign tmp_79_fu_397_p2 = (tmp_45_fu_391_p2 - tmp_78_fu_386_p2);

assign tmp_80_fu_422_p2 = (tmp_70_reg_535 + tmp_42_cast_fu_418_p1);

assign tmp_81_fu_447_p2 = (p_shl8_cast_fu_443_p1 + p_shl7_cast_fu_427_p3);

assign tmp_82_fu_484_p2 = (tmp_79_reg_589 + tmp_43_cast_fu_480_p1);

assign tmp_83_fu_513_p2 = (tmp_81_reg_594 + tmp_45_cast_fu_509_p1);

assign tmp_97_cast_fu_275_p1 = $signed(tmp_72_fu_269_p2);

assign tmp_cast_fu_219_p1 = co_reg_111;

assign tmp_fu_214_p1 = co_reg_111;

assign tmp_s_fu_303_p3 = {{h_reg_122}, {1'd0}};

assign w_5_fu_462_p2 = (w_reg_134 + 4'd1);

assign weight_address0 = tmp_113_cast_fu_489_p1;

always @ (posedge ap_clk) begin
    tmp_70_reg_535[0] <= 1'b0;
    tmp_74_reg_545[0] <= 1'b0;
    tmp_s_reg_558[0] <= 1'b0;
    tmp_76_reg_563[0] <= 1'b0;
    tmp_38_reg_571[0] <= 1'b0;
    tmp_81_reg_594[0] <= 1'b0;
end

endmodule //subconv_3x3_16_strid
