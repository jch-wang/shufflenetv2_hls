// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shuffle_24_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        left_r_address0,
        left_r_ce0,
        left_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        buffer1_1_24_16x16_p_address0,
        buffer1_1_24_16x16_p_ce0,
        buffer1_1_24_16x16_p_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] left_r_address0;
output   left_r_ce0;
input  [31:0] left_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [12:0] buffer1_1_24_16x16_p_address0;
output   buffer1_1_24_16x16_p_ce0;
input  [31:0] buffer1_1_24_16x16_p_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg left_r_ce0;
reg output_r_ce0;
reg output_r_we0;
reg buffer1_1_24_16x16_p_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_103_fu_132_p1;
reg   [0:0] tmp_103_reg_341;
wire    ap_CS_fsm_state2;
wire   [5:0] co_20_fu_142_p2;
reg   [5:0] co_20_reg_348;
wire   [9:0] tmp_263_fu_182_p2;
reg   [9:0] tmp_263_reg_353;
wire   [0:0] exitcond2_fu_136_p2;
wire   [10:0] tmp_266_fu_212_p2;
reg   [10:0] tmp_266_reg_358;
wire   [4:0] h_20_fu_224_p2;
reg   [4:0] h_20_reg_366;
wire    ap_CS_fsm_state3;
wire   [13:0] tmp_268_fu_263_p2;
reg   [13:0] tmp_268_reg_371;
wire   [0:0] exitcond1_fu_218_p2;
wire   [14:0] tmp_270_fu_294_p2;
reg   [14:0] tmp_270_reg_376;
wire   [4:0] w_20_fu_306_p2;
reg   [4:0] w_20_reg_384;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_300_p2;
reg   [13:0] output_addr_reg_394;
reg   [5:0] co_reg_87;
reg   [4:0] h_reg_98;
reg   [4:0] w_reg_109;
wire    ap_CS_fsm_state5;
reg   [31:0] storemerge_phi_fu_123_p4;
wire   [63:0] tmp_388_cast_fu_325_p1;
wire   [63:0] tmp_389_cast_fu_336_p1;
wire   [4:0] tmp_fu_148_p4;
wire   [8:0] tmp_s_fu_158_p3;
wire   [5:0] tmp_262_fu_170_p3;
wire   [9:0] p_shl3_cast_fu_178_p1;
wire   [9:0] p_shl2_cast_fu_166_p1;
wire   [9:0] tmp_264_fu_188_p3;
wire   [6:0] tmp_265_fu_200_p3;
wire   [10:0] p_shl1_cast_fu_208_p1;
wire   [10:0] p_shl_cast_fu_196_p1;
wire   [9:0] tmp_cast_fu_234_p1;
wire   [9:0] tmp_267_fu_238_p2;
wire   [10:0] tmp_104_fu_251_p3;
wire   [13:0] p_shl6_cast_fu_243_p3;
wire   [13:0] p_shl7_cast_fu_259_p1;
wire   [10:0] tmp_cast9_fu_230_p1;
wire   [10:0] tmp_269_fu_269_p2;
wire   [11:0] tmp_105_fu_282_p3;
wire   [14:0] p_shl4_cast_fu_274_p3;
wire   [14:0] p_shl5_cast_fu_290_p1;
wire   [13:0] tmp_80_cast_fu_316_p1;
wire   [13:0] tmp_271_fu_320_p2;
wire   [14:0] tmp_80_cast8_fu_312_p1;
wire   [14:0] tmp_272_fu_331_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_218_p2 == 1'd1))) begin
        co_reg_87 <= co_20_reg_348;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_87 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_300_p2 == 1'd1))) begin
        h_reg_98 <= h_20_reg_366;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_136_p2 == 1'd0))) begin
        h_reg_98 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond1_fu_218_p2))) begin
        w_reg_109 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_reg_109 <= w_20_reg_384;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_20_reg_348 <= co_20_fu_142_p2;
        tmp_103_reg_341 <= tmp_103_fu_132_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_20_reg_366 <= h_20_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_300_p2))) begin
        output_addr_reg_394 <= tmp_389_cast_fu_336_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_136_p2 == 1'd0))) begin
        tmp_263_reg_353[9 : 1] <= tmp_263_fu_182_p2[9 : 1];
        tmp_266_reg_358[10 : 1] <= tmp_266_fu_212_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond1_fu_218_p2))) begin
        tmp_268_reg_371[13 : 1] <= tmp_268_fu_263_p2[13 : 1];
        tmp_270_reg_376[14 : 1] <= tmp_270_fu_294_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_20_reg_384 <= w_20_fu_306_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_136_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_136_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        left_r_ce0 = 1'b1;
    end else begin
        left_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((tmp_103_reg_341 == 1'd1)) begin
            storemerge_phi_fu_123_p4 = buffer1_1_24_16x16_p_q0;
        end else if ((tmp_103_reg_341 == 1'd0)) begin
            storemerge_phi_fu_123_p4 = left_r_q0;
        end else begin
            storemerge_phi_fu_123_p4 = 'bx;
        end
    end else begin
        storemerge_phi_fu_123_p4 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_136_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_218_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_300_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign buffer1_1_24_16x16_p_address0 = tmp_388_cast_fu_325_p1;

assign co_20_fu_142_p2 = (6'd1 + co_reg_87);

assign exitcond1_fu_218_p2 = ((h_reg_98 == 5'd18) ? 1'b1 : 1'b0);

assign exitcond2_fu_136_p2 = ((co_reg_87 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond_fu_300_p2 = ((w_reg_109 == 5'd18) ? 1'b1 : 1'b0);

assign h_20_fu_224_p2 = (h_reg_98 + 5'd1);

assign left_r_address0 = tmp_388_cast_fu_325_p1;

assign output_r_address0 = output_addr_reg_394;

assign output_r_d0 = storemerge_phi_fu_123_p4;

assign p_shl1_cast_fu_208_p1 = tmp_265_fu_200_p3;

assign p_shl2_cast_fu_166_p1 = tmp_s_fu_158_p3;

assign p_shl3_cast_fu_178_p1 = tmp_262_fu_170_p3;

assign p_shl4_cast_fu_274_p3 = {{tmp_269_fu_269_p2}, {4'd0}};

assign p_shl5_cast_fu_290_p1 = tmp_105_fu_282_p3;

assign p_shl6_cast_fu_243_p3 = {{tmp_267_fu_238_p2}, {4'd0}};

assign p_shl7_cast_fu_259_p1 = tmp_104_fu_251_p3;

assign p_shl_cast_fu_196_p1 = tmp_264_fu_188_p3;

assign tmp_103_fu_132_p1 = co_reg_87[0:0];

assign tmp_104_fu_251_p3 = {{tmp_267_fu_238_p2}, {1'd0}};

assign tmp_105_fu_282_p3 = {{tmp_269_fu_269_p2}, {1'd0}};

assign tmp_262_fu_170_p3 = {{tmp_fu_148_p4}, {1'd0}};

assign tmp_263_fu_182_p2 = (p_shl3_cast_fu_178_p1 + p_shl2_cast_fu_166_p1);

assign tmp_264_fu_188_p3 = {{co_reg_87}, {4'd0}};

assign tmp_265_fu_200_p3 = {{co_reg_87}, {1'd0}};

assign tmp_266_fu_212_p2 = (p_shl1_cast_fu_208_p1 + p_shl_cast_fu_196_p1);

assign tmp_267_fu_238_p2 = (tmp_cast_fu_234_p1 + tmp_263_reg_353);

assign tmp_268_fu_263_p2 = (p_shl6_cast_fu_243_p3 + p_shl7_cast_fu_259_p1);

assign tmp_269_fu_269_p2 = (tmp_cast9_fu_230_p1 + tmp_266_reg_358);

assign tmp_270_fu_294_p2 = (p_shl4_cast_fu_274_p3 + p_shl5_cast_fu_290_p1);

assign tmp_271_fu_320_p2 = (tmp_268_reg_371 + tmp_80_cast_fu_316_p1);

assign tmp_272_fu_331_p2 = (tmp_270_reg_376 + tmp_80_cast8_fu_312_p1);

assign tmp_388_cast_fu_325_p1 = tmp_271_fu_320_p2;

assign tmp_389_cast_fu_336_p1 = tmp_272_fu_331_p2;

assign tmp_80_cast8_fu_312_p1 = w_reg_109;

assign tmp_80_cast_fu_316_p1 = w_reg_109;

assign tmp_cast9_fu_230_p1 = h_reg_98;

assign tmp_cast_fu_234_p1 = h_reg_98;

assign tmp_fu_148_p4 = {{co_reg_87[5:1]}};

assign tmp_s_fu_158_p3 = {{tmp_fu_148_p4}, {4'd0}};

assign w_20_fu_306_p2 = (w_reg_109 + 5'd1);

always @ (posedge ap_clk) begin
    tmp_263_reg_353[0] <= 1'b0;
    tmp_266_reg_358[0] <= 1'b0;
    tmp_268_reg_371[0] <= 1'b0;
    tmp_270_reg_376[0] <= 1'b0;
end

endmodule //shuffle_24_p
