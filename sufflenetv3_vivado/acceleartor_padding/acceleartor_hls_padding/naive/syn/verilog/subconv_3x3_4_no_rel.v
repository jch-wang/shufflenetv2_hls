// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_4_no_rel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [9:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [6:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [11:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg weight_ce0;
reg bias_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] co_3_fu_196_p2;
reg   [6:0] co_3_reg_477;
wire    ap_CS_fsm_state2;
wire  signed [11:0] tmp_54_cast_fu_241_p1;
reg  signed [11:0] tmp_54_cast_reg_482;
wire   [0:0] exitcond4_fu_190_p2;
wire  signed [10:0] tmp_56_cast_fu_263_p1;
reg  signed [10:0] tmp_56_cast_reg_488;
reg   [6:0] bias_addr_reg_493;
wire   [12:0] tmp_44_fu_302_p2;
reg   [12:0] tmp_44_reg_501;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond3_fu_267_p2;
wire   [2:0] h_3_fu_314_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond2_fu_308_p2;
wire   [1:0] m_3_fu_326_p2;
reg   [1:0] m_3_reg_517;
wire    ap_CS_fsm_state5;
wire   [10:0] tmp_46_fu_336_p2;
reg   [10:0] tmp_46_reg_522;
wire   [0:0] exitcond1_fu_320_p2;
wire   [2:0] tmp_21_fu_351_p2;
reg   [2:0] tmp_21_reg_528;
wire   [10:0] tmp_47_fu_362_p2;
reg   [10:0] tmp_47_reg_533;
wire    ap_CS_fsm_state6;
wire   [12:0] tmp_49_fu_395_p2;
reg   [12:0] tmp_49_reg_538;
wire   [1:0] n_3_fu_407_p2;
reg   [1:0] n_3_reg_546;
wire    ap_CS_fsm_state7;
wire   [10:0] tmp_50_fu_417_p2;
reg   [10:0] tmp_50_reg_551;
wire   [0:0] exitcond_fu_401_p2;
wire   [12:0] tmp_51_fu_442_p2;
reg   [12:0] tmp_51_reg_556;
wire    ap_CS_fsm_state8;
reg   [31:0] weight_load_reg_571;
wire    ap_CS_fsm_state9;
reg   [31:0] input_load_reg_576;
wire   [31:0] grp_fu_186_p2;
reg   [31:0] tmp_26_reg_581;
wire    ap_CS_fsm_state13;
wire   [31:0] grp_fu_180_p2;
wire    ap_CS_fsm_state18;
reg   [31:0] bias_load_reg_591;
wire    ap_CS_fsm_state19;
wire   [12:0] tmp_45_fu_459_p2;
reg   [12:0] tmp_45_reg_596;
wire    ap_CS_fsm_state20;
wire   [2:0] w_3_fu_464_p2;
reg   [2:0] w_3_reg_601;
reg   [31:0] result_reg_606;
wire    ap_CS_fsm_state24;
reg   [6:0] co_reg_99;
reg   [2:0] h_reg_110;
reg   [2:0] w_reg_122;
wire    ap_CS_fsm_state25;
reg   [31:0] sum_reg_134;
reg   [1:0] m_reg_146;
reg   [31:0] sum_1_reg_157;
reg   [1:0] n_reg_169;
wire   [63:0] tmp_fu_202_p1;
wire   [63:0] tmp_69_cast_fu_447_p1;
wire   [63:0] tmp_70_cast_fu_451_p1;
wire   [63:0] tmp_61_cast_fu_470_p1;
reg   [31:0] grp_fu_180_p0;
reg   [31:0] grp_fu_180_p1;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state10;
wire   [9:0] tmp_s_fu_211_p3;
wire   [7:0] tmp_39_fu_223_p3;
wire   [10:0] p_shl1_cast_fu_219_p1;
wire   [10:0] p_shl2_cast_fu_231_p1;
wire   [10:0] tmp_40_fu_235_p2;
wire   [8:0] tmp_41_fu_245_p3;
wire   [9:0] p_shl_cast_fu_253_p1;
wire   [9:0] tmp_cast_fu_207_p1;
wire   [9:0] tmp_42_fu_257_p2;
wire   [11:0] tmp_cast_22_fu_273_p1;
wire   [11:0] tmp_43_fu_277_p2;
wire   [9:0] tmp_36_fu_282_p1;
wire   [12:0] p_shl3_cast_fu_286_p3;
wire   [12:0] p_shl4_cast_fu_294_p3;
wire   [10:0] tmp_20_cast_fu_332_p1;
wire   [1:0] tmp1_fu_341_p2;
wire  signed [2:0] tmp1_cast_fu_347_p1;
wire   [10:0] tmp_37_fu_357_p2;
wire   [11:0] tmp_22_cast_fu_367_p1;
wire   [11:0] tmp_48_fu_370_p2;
wire   [9:0] tmp_38_fu_375_p1;
wire   [12:0] p_shl5_cast_fu_379_p3;
wire   [12:0] p_shl6_cast_fu_387_p3;
wire   [10:0] tmp_23_cast_fu_413_p1;
wire   [1:0] tmp2_fu_422_p2;
wire  signed [2:0] tmp2_cast_fu_428_p1;
wire   [2:0] tmp_24_fu_432_p2;
wire   [12:0] tmp_25_cast_fu_438_p1;
wire   [12:0] tmp_19_cast_fu_455_p1;
reg   [24:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_x_U98(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_180_p0),
    .din1(grp_fu_180_p1),
    .ce(1'b1),
    .dout(grp_fu_180_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_x_U99(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_571),
    .din1(input_load_reg_576),
    .ce(1'b1),
    .dout(grp_fu_186_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_267_p2 == 1'd1))) begin
        co_reg_99 <= co_3_reg_477;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_99 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_190_p2 == 1'd0))) begin
        h_reg_110 <= 3'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_308_p2 == 1'd1))) begin
        h_reg_110 <= h_3_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_308_p2))) begin
        m_reg_146 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_401_p2))) begin
        m_reg_146 <= m_3_reg_517;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_reg_169 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        n_reg_169 <= n_3_reg_546;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sum_1_reg_157 <= sum_reg_134;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        sum_1_reg_157 <= grp_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_308_p2))) begin
        sum_reg_134 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_401_p2))) begin
        sum_reg_134 <= sum_1_reg_157;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond3_fu_267_p2))) begin
        w_reg_122 <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        w_reg_122 <= w_3_reg_601;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_190_p2 == 1'd0))) begin
        bias_addr_reg_493 <= tmp_fu_202_p1;
        tmp_54_cast_reg_482[11 : 1] <= tmp_54_cast_fu_241_p1[11 : 1];
        tmp_56_cast_reg_488 <= tmp_56_cast_fu_263_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        bias_load_reg_591 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_3_reg_477 <= co_3_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_load_reg_576 <= input_r_q0;
        weight_load_reg_571 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_3_reg_517 <= m_3_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        n_3_reg_546 <= n_3_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        result_reg_606 <= grp_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_320_p2))) begin
        tmp_21_reg_528 <= tmp_21_fu_351_p2;
        tmp_46_reg_522 <= tmp_46_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_26_reg_581 <= grp_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond3_fu_267_p2))) begin
        tmp_44_reg_501[12 : 1] <= tmp_44_fu_302_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_45_reg_596 <= tmp_45_fu_459_p2;
        w_3_reg_601 <= w_3_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_47_reg_533 <= tmp_47_fu_362_p2;
        tmp_49_reg_538[12 : 1] <= tmp_49_fu_395_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond_fu_401_p2))) begin
        tmp_50_reg_551 <= tmp_50_fu_417_p2;
        tmp_51_reg_556 <= tmp_51_fu_442_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_190_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_190_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_180_p0 = sum_reg_134;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_180_p0 = sum_1_reg_157;
    end else begin
        grp_fu_180_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_180_p1 = bias_load_reg_591;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_180_p1 = tmp_26_reg_581;
    end else begin
        grp_fu_180_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_190_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_267_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_308_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond1_fu_320_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_401_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_493;

assign co_3_fu_196_p2 = (co_reg_99 + 7'd1);

assign exitcond1_fu_320_p2 = ((m_reg_146 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_308_p2 = ((w_reg_122 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond3_fu_267_p2 = ((h_reg_110 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond4_fu_190_p2 = ((co_reg_99 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond_fu_401_p2 = ((n_reg_169 == 2'd3) ? 1'b1 : 1'b0);

assign h_3_fu_314_p2 = (h_reg_110 + 3'd1);

assign input_r_address0 = tmp_70_cast_fu_451_p1;

assign m_3_fu_326_p2 = (m_reg_146 + 2'd1);

assign n_3_fu_407_p2 = (n_reg_169 + 2'd1);

assign output_r_address0 = tmp_61_cast_fu_470_p1;

assign output_r_d0 = result_reg_606;

assign p_shl1_cast_fu_219_p1 = tmp_s_fu_211_p3;

assign p_shl2_cast_fu_231_p1 = tmp_39_fu_223_p3;

assign p_shl3_cast_fu_286_p3 = {{tmp_36_fu_282_p1}, {3'd0}};

assign p_shl4_cast_fu_294_p3 = {{tmp_43_fu_277_p2}, {1'd0}};

assign p_shl5_cast_fu_379_p3 = {{tmp_38_fu_375_p1}, {3'd0}};

assign p_shl6_cast_fu_387_p3 = {{tmp_48_fu_370_p2}, {1'd0}};

assign p_shl_cast_fu_253_p1 = tmp_41_fu_245_p3;

assign tmp1_cast_fu_347_p1 = $signed(tmp1_fu_341_p2);

assign tmp1_fu_341_p2 = ($signed(2'd3) + $signed(m_reg_146));

assign tmp2_cast_fu_428_p1 = $signed(tmp2_fu_422_p2);

assign tmp2_fu_422_p2 = ($signed(n_reg_169) + $signed(2'd3));

assign tmp_19_cast_fu_455_p1 = w_reg_122;

assign tmp_20_cast_fu_332_p1 = m_reg_146;

assign tmp_21_fu_351_p2 = ($signed(tmp1_cast_fu_347_p1) + $signed(h_reg_110));

assign tmp_22_cast_fu_367_p1 = tmp_21_reg_528;

assign tmp_23_cast_fu_413_p1 = n_reg_169;

assign tmp_24_fu_432_p2 = ($signed(w_reg_122) + $signed(tmp2_cast_fu_428_p1));

assign tmp_25_cast_fu_438_p1 = tmp_24_fu_432_p2;

assign tmp_36_fu_282_p1 = tmp_43_fu_277_p2[9:0];

assign tmp_37_fu_357_p2 = tmp_46_reg_522 << 11'd2;

assign tmp_38_fu_375_p1 = tmp_48_fu_370_p2[9:0];

assign tmp_39_fu_223_p3 = {{co_reg_99}, {1'd0}};

assign tmp_40_fu_235_p2 = (p_shl1_cast_fu_219_p1 - p_shl2_cast_fu_231_p1);

assign tmp_41_fu_245_p3 = {{co_reg_99}, {2'd0}};

assign tmp_42_fu_257_p2 = (p_shl_cast_fu_253_p1 - tmp_cast_fu_207_p1);

assign tmp_43_fu_277_p2 = ($signed(tmp_cast_22_fu_273_p1) + $signed(tmp_54_cast_reg_482));

assign tmp_44_fu_302_p2 = (p_shl3_cast_fu_286_p3 - p_shl4_cast_fu_294_p3);

assign tmp_45_fu_459_p2 = (tmp_44_reg_501 + tmp_19_cast_fu_455_p1);

assign tmp_46_fu_336_p2 = ($signed(tmp_20_cast_fu_332_p1) + $signed(tmp_56_cast_reg_488));

assign tmp_47_fu_362_p2 = (tmp_37_fu_357_p2 - tmp_46_reg_522);

assign tmp_48_fu_370_p2 = ($signed(tmp_22_cast_fu_367_p1) + $signed(tmp_54_cast_reg_482));

assign tmp_49_fu_395_p2 = (p_shl5_cast_fu_379_p3 - p_shl6_cast_fu_387_p3);

assign tmp_50_fu_417_p2 = (tmp_47_reg_533 + tmp_23_cast_fu_413_p1);

assign tmp_51_fu_442_p2 = (tmp_49_reg_538 + tmp_25_cast_fu_438_p1);

assign tmp_54_cast_fu_241_p1 = $signed(tmp_40_fu_235_p2);

assign tmp_56_cast_fu_263_p1 = $signed(tmp_42_fu_257_p2);

assign tmp_61_cast_fu_470_p1 = tmp_45_reg_596;

assign tmp_69_cast_fu_447_p1 = tmp_50_reg_551;

assign tmp_70_cast_fu_451_p1 = tmp_51_reg_556;

assign tmp_cast_22_fu_273_p1 = h_reg_110;

assign tmp_cast_fu_207_p1 = co_reg_99;

assign tmp_fu_202_p1 = co_reg_99;

assign tmp_s_fu_211_p3 = {{co_reg_99}, {3'd0}};

assign w_3_fu_464_p2 = (w_reg_122 + 3'd1);

assign weight_address0 = tmp_69_cast_fu_447_p1;

always @ (posedge ap_clk) begin
    tmp_54_cast_reg_482[0] <= 1'b0;
    tmp_44_reg_501[0] <= 1'b0;
    tmp_49_reg_538[0] <= 1'b0;
end

endmodule //subconv_3x3_4_no_rel
