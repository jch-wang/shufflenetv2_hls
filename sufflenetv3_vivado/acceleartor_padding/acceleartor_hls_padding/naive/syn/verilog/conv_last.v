// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_last (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [16:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [8:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg weight_ce0;
reg bias_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] co_22_fu_186_p2;
reg   [9:0] co_22_reg_410;
wire    ap_CS_fsm_state2;
wire   [17:0] tmp_285_fu_217_p2;
reg   [17:0] tmp_285_reg_415;
wire   [0:0] exitcond3_fu_180_p2;
wire   [12:0] tmp_411_cast_fu_231_p1;
reg   [12:0] tmp_411_cast_reg_420;
reg   [8:0] bias_addr_reg_425;
wire   [2:0] h_22_fu_241_p2;
reg   [2:0] h_22_reg_433;
wire    ap_CS_fsm_state3;
wire   [10:0] tmp_cast3_fu_247_p1;
reg   [10:0] tmp_cast3_reg_438;
wire   [0:0] exitcond2_fu_235_p2;
wire   [14:0] tmp_414_cast_fu_260_p3;
reg   [14:0] tmp_414_cast_reg_443;
wire   [2:0] w_22_fu_274_p2;
reg   [2:0] w_22_reg_451;
wire    ap_CS_fsm_state4;
wire   [12:0] tmp_82_cast2_fu_280_p1;
reg   [12:0] tmp_82_cast2_reg_456;
wire   [0:0] exitcond1_fu_268_p2;
reg   [12:0] output_addr_reg_461;
wire   [7:0] ci_7_fu_304_p2;
reg   [7:0] ci_7_reg_469;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_fu_298_p2;
reg   [31:0] weight_load_reg_484;
wire    ap_CS_fsm_state6;
reg   [31:0] input_load_reg_489;
wire   [31:0] grp_fu_171_p2;
reg   [31:0] tmp_84_reg_494;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_166_p2;
wire    ap_CS_fsm_state15;
reg   [31:0] bias_load_reg_504;
wire    ap_CS_fsm_state16;
reg   [31:0] result_reg_509;
wire    ap_CS_fsm_state21;
wire   [0:0] tmp_34_fu_175_p2;
reg   [0:0] tmp_34_reg_516;
wire    ap_CS_fsm_state22;
reg   [9:0] co_reg_110;
reg   [2:0] h_reg_121;
reg   [2:0] w_reg_132;
wire    ap_CS_fsm_state23;
reg   [31:0] sum_reg_143;
reg   [7:0] ci_reg_155;
wire   [63:0] tmp_fu_192_p1;
wire   [63:0] tmp_415_cast_fu_293_p1;
wire   [63:0] tmp_421_cast_fu_344_p1;
wire  signed [63:0] tmp_422_cast_fu_354_p1;
reg   [31:0] grp_fu_166_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state7;
wire   [15:0] tmp_284_fu_205_p3;
wire   [17:0] tmp_s_fu_197_p3;
wire   [17:0] p_shl1_cast_fu_213_p1;
wire   [11:0] tmp_286_fu_223_p3;
wire   [12:0] tmp_cast_fu_251_p1;
wire   [12:0] tmp_287_fu_255_p2;
wire   [14:0] tmp_82_cast_fu_284_p1;
wire   [14:0] tmp_288_fu_288_p2;
wire   [9:0] tmp_289_fu_314_p3;
wire   [10:0] tmp_417_cast_fu_322_p1;
wire   [10:0] tmp_290_fu_326_p2;
wire   [12:0] tmp_420_cast_fu_331_p3;
wire   [12:0] tmp_291_fu_339_p2;
wire   [17:0] tmp_83_cast_fu_310_p1;
wire   [17:0] tmp_292_fu_349_p2;
wire   [31:0] result_to_int_fu_359_p1;
wire   [7:0] tmp_31_fu_362_p4;
wire   [22:0] tmp_109_fu_372_p1;
wire   [0:0] notrhs_fu_382_p2;
wire   [0:0] notlhs_fu_376_p2;
wire   [0:0] tmp_33_fu_388_p2;
wire   [0:0] tmp_35_fu_394_p2;
reg   [22:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_x_U107(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_reg_143),
    .din1(grp_fu_166_p1),
    .ce(1'b1),
    .dout(grp_fu_166_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_x_U108(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_484),
    .din1(input_load_reg_489),
    .ce(1'b1),
    .dout(grp_fu_171_p2)
);

ShuffleNetV2_fcmpdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
ShuffleNetV2_fcmpdEe_x_U109(
    .din0(result_reg_509),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_34_fu_175_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_268_p2))) begin
        ci_reg_155 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        ci_reg_155 <= ci_7_reg_469;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_235_p2 == 1'd1))) begin
        co_reg_110 <= co_22_reg_410;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_110 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_268_p2 == 1'd1))) begin
        h_reg_121 <= h_22_reg_433;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_180_p2 == 1'd0))) begin
        h_reg_121 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_268_p2))) begin
        sum_reg_143 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        sum_reg_143 <= grp_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_235_p2))) begin
        w_reg_132 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        w_reg_132 <= w_22_reg_451;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_180_p2 == 1'd0))) begin
        bias_addr_reg_425 <= tmp_fu_192_p1;
        tmp_285_reg_415[17 : 6] <= tmp_285_fu_217_p2[17 : 6];
        tmp_411_cast_reg_420[11 : 2] <= tmp_411_cast_fu_231_p1[11 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        bias_load_reg_504 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ci_7_reg_469 <= ci_7_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_22_reg_410 <= co_22_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_22_reg_433 <= h_22_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_load_reg_489 <= input_r_q0;
        weight_load_reg_484 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_268_p2))) begin
        output_addr_reg_461 <= tmp_415_cast_fu_293_p1;
        tmp_82_cast2_reg_456[2 : 0] <= tmp_82_cast2_fu_280_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        result_reg_509 <= grp_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_34_reg_516 <= tmp_34_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_235_p2))) begin
        tmp_414_cast_reg_443[14 : 2] <= tmp_414_cast_fu_260_p3[14 : 2];
        tmp_cast3_reg_438[2 : 0] <= tmp_cast3_fu_247_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_84_reg_494 <= grp_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_22_reg_451 <= w_22_fu_274_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_180_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_180_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_166_p1 = bias_load_reg_504;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_166_p1 = tmp_84_reg_494;
    end else begin
        grp_fu_166_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_180_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_235_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_268_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_298_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign bias_address0 = bias_addr_reg_425;

assign ci_7_fu_304_p2 = (ci_reg_155 + 8'd1);

assign co_22_fu_186_p2 = (co_reg_110 + 10'd1);

assign exitcond1_fu_268_p2 = ((w_reg_132 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond2_fu_235_p2 = ((h_reg_121 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond3_fu_180_p2 = ((co_reg_110 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond_fu_298_p2 = ((ci_reg_155 == 8'd192) ? 1'b1 : 1'b0);

assign h_22_fu_241_p2 = (h_reg_121 + 3'd1);

assign input_r_address0 = tmp_421_cast_fu_344_p1;

assign notlhs_fu_376_p2 = ((tmp_31_fu_362_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_382_p2 = ((tmp_109_fu_372_p1 == 23'd0) ? 1'b1 : 1'b0);

assign output_r_address0 = output_addr_reg_461;

assign output_r_d0 = ((tmp_35_fu_394_p2[0:0] === 1'b1) ? result_reg_509 : 32'd0);

assign p_shl1_cast_fu_213_p1 = tmp_284_fu_205_p3;

assign result_to_int_fu_359_p1 = result_reg_509;

assign tmp_109_fu_372_p1 = result_to_int_fu_359_p1[22:0];

assign tmp_284_fu_205_p3 = {{co_reg_110}, {6'd0}};

assign tmp_285_fu_217_p2 = (tmp_s_fu_197_p3 - p_shl1_cast_fu_213_p1);

assign tmp_286_fu_223_p3 = {{co_reg_110}, {2'd0}};

assign tmp_287_fu_255_p2 = (tmp_cast_fu_251_p1 + tmp_411_cast_reg_420);

assign tmp_288_fu_288_p2 = (tmp_414_cast_reg_443 + tmp_82_cast_fu_284_p1);

assign tmp_289_fu_314_p3 = {{ci_reg_155}, {2'd0}};

assign tmp_290_fu_326_p2 = (tmp_cast3_reg_438 + tmp_417_cast_fu_322_p1);

assign tmp_291_fu_339_p2 = (tmp_82_cast2_reg_456 + tmp_420_cast_fu_331_p3);

assign tmp_292_fu_349_p2 = (tmp_83_cast_fu_310_p1 + tmp_285_reg_415);

assign tmp_31_fu_362_p4 = {{result_to_int_fu_359_p1[30:23]}};

assign tmp_33_fu_388_p2 = (notrhs_fu_382_p2 | notlhs_fu_376_p2);

assign tmp_35_fu_394_p2 = (tmp_33_fu_388_p2 & tmp_34_reg_516);

assign tmp_411_cast_fu_231_p1 = tmp_286_fu_223_p3;

assign tmp_414_cast_fu_260_p3 = {{tmp_287_fu_255_p2}, {2'd0}};

assign tmp_415_cast_fu_293_p1 = tmp_288_fu_288_p2;

assign tmp_417_cast_fu_322_p1 = tmp_289_fu_314_p3;

assign tmp_420_cast_fu_331_p3 = {{tmp_290_fu_326_p2}, {2'd0}};

assign tmp_421_cast_fu_344_p1 = tmp_291_fu_339_p2;

assign tmp_422_cast_fu_354_p1 = $signed(tmp_292_fu_349_p2);

assign tmp_82_cast2_fu_280_p1 = w_reg_132;

assign tmp_82_cast_fu_284_p1 = w_reg_132;

assign tmp_83_cast_fu_310_p1 = ci_reg_155;

assign tmp_cast3_fu_247_p1 = h_reg_121;

assign tmp_cast_fu_251_p1 = h_reg_121;

assign tmp_fu_192_p1 = co_reg_110;

assign tmp_s_fu_197_p3 = {{co_reg_110}, {8'd0}};

assign w_22_fu_274_p2 = (w_reg_132 + 3'd1);

assign weight_address0 = tmp_422_cast_fu_354_p1;

always @ (posedge ap_clk) begin
    tmp_285_reg_415[5:0] <= 6'b000000;
    tmp_411_cast_reg_420[1:0] <= 2'b00;
    tmp_411_cast_reg_420[12] <= 1'b0;
    tmp_cast3_reg_438[10:3] <= 8'b00000000;
    tmp_414_cast_reg_443[1:0] <= 2'b00;
    tmp_82_cast2_reg_456[12:3] <= 10'b0000000000;
end

endmodule //conv_last
