// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv1_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_state9 = 27'd256;
parameter    ap_ST_fsm_state10 = 27'd512;
parameter    ap_ST_fsm_state11 = 27'd1024;
parameter    ap_ST_fsm_state12 = 27'd2048;
parameter    ap_ST_fsm_state13 = 27'd4096;
parameter    ap_ST_fsm_state14 = 27'd8192;
parameter    ap_ST_fsm_state15 = 27'd16384;
parameter    ap_ST_fsm_state16 = 27'd32768;
parameter    ap_ST_fsm_state17 = 27'd65536;
parameter    ap_ST_fsm_state18 = 27'd131072;
parameter    ap_ST_fsm_state19 = 27'd262144;
parameter    ap_ST_fsm_state20 = 27'd524288;
parameter    ap_ST_fsm_state21 = 27'd1048576;
parameter    ap_ST_fsm_state22 = 27'd2097152;
parameter    ap_ST_fsm_state23 = 27'd4194304;
parameter    ap_ST_fsm_state24 = 27'd8388608;
parameter    ap_ST_fsm_state25 = 27'd16777216;
parameter    ap_ST_fsm_state26 = 27'd33554432;
parameter    ap_ST_fsm_state27 = 27'd67108864;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [9:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [4:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [14:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg weight_ce0;
reg bias_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] co_23_fu_240_p2;
reg   [4:0] co_23_reg_649;
wire    ap_CS_fsm_state2;
wire  signed [8:0] tmp_424_cast_fu_273_p1;
reg  signed [8:0] tmp_424_cast_reg_654;
wire   [0:0] exitcond5_fu_234_p2;
wire   [10:0] tmp_296_fu_301_p2;
reg   [10:0] tmp_296_reg_659;
reg   [4:0] bias_addr_reg_664;
wire   [15:0] tmp_298_fu_342_p2;
reg   [15:0] tmp_298_reg_672;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond4_fu_307_p2;
wire   [5:0] h_23_fu_354_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond3_fu_348_p2;
wire   [1:0] ci_8_fu_366_p2;
reg   [1:0] ci_8_reg_688;
wire    ap_CS_fsm_state5;
wire   [7:0] tmp_302_fu_400_p2;
reg   [7:0] tmp_302_reg_693;
wire   [0:0] exitcond2_fu_360_p2;
wire   [63:0] tmp_304_fu_427_p2;
reg   [63:0] tmp_304_reg_698;
wire   [1:0] m_7_fu_439_p2;
reg   [1:0] m_7_reg_706;
wire    ap_CS_fsm_state6;
wire   [10:0] tmp_306_fu_470_p2;
reg   [10:0] tmp_306_reg_711;
wire   [0:0] exitcond1_fu_433_p2;
wire   [7:0] tmp_307_fu_496_p2;
reg   [7:0] tmp_307_reg_716;
wire   [12:0] tmp_308_fu_519_p2;
reg   [12:0] tmp_308_reg_722;
wire    ap_CS_fsm_state7;
wire   [1:0] n_7_fu_531_p2;
reg   [1:0] n_7_reg_730;
wire    ap_CS_fsm_state8;
wire   [10:0] tmp_309_fu_541_p2;
reg   [10:0] tmp_309_reg_735;
wire   [0:0] exitcond_fu_525_p2;
wire   [12:0] tmp_310_fu_566_p2;
reg   [12:0] tmp_310_reg_740;
wire    ap_CS_fsm_state9;
reg   [31:0] weight_load_reg_755;
wire    ap_CS_fsm_state10;
reg   [31:0] input_load_reg_760;
wire   [31:0] grp_fu_225_p2;
reg   [31:0] tmp_93_reg_765;
wire    ap_CS_fsm_state14;
wire   [31:0] grp_fu_219_p2;
wire    ap_CS_fsm_state19;
reg   [31:0] bias_load_reg_775;
wire    ap_CS_fsm_state20;
wire   [15:0] tmp_299_fu_583_p2;
reg   [15:0] tmp_299_reg_780;
wire    ap_CS_fsm_state22;
wire   [5:0] w_23_fu_588_p2;
reg   [5:0] w_23_reg_785;
reg   [31:0] result_reg_790;
wire    ap_CS_fsm_state25;
wire   [0:0] tmp_39_fu_229_p2;
reg   [0:0] tmp_39_reg_797;
wire    ap_CS_fsm_state26;
reg   [4:0] co_reg_115;
reg   [5:0] h_reg_126;
reg   [5:0] w_reg_138;
wire    ap_CS_fsm_state27;
reg   [31:0] sum_reg_150;
reg   [1:0] ci_reg_162;
reg   [31:0] sum_1_reg_173;
reg   [1:0] m_reg_185;
reg   [31:0] sum_2_reg_196;
reg   [1:0] n_reg_208;
wire   [63:0] tmp_fu_246_p1;
wire   [63:0] tmp_446_cast_fu_571_p1;
wire   [63:0] tmp_447_cast_fu_575_p1;
wire   [63:0] tmp_432_cast_fu_642_p1;
reg   [31:0] grp_fu_219_p0;
reg   [31:0] grp_fu_219_p1;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state11;
wire   [6:0] tmp_s_fu_255_p3;
wire   [7:0] p_shl2_cast_fu_263_p1;
wire   [7:0] tmp_cast_fu_251_p1;
wire   [7:0] tmp_293_fu_267_p2;
wire   [9:0] tmp_294_fu_277_p3;
wire   [5:0] tmp_295_fu_289_p3;
wire   [10:0] p_shl1_cast_fu_297_p1;
wire   [10:0] p_shl_cast_fu_285_p1;
wire   [10:0] tmp_cast_79_fu_313_p1;
wire   [10:0] tmp_297_fu_317_p2;
wire   [11:0] tmp_110_fu_330_p3;
wire   [15:0] p_shl3_cast_fu_322_p3;
wire   [15:0] p_shl4_cast_fu_338_p1;
wire   [6:0] tmp_300_fu_376_p3;
wire   [2:0] tmp_301_fu_388_p3;
wire   [7:0] p_shl7_cast_fu_396_p1;
wire   [7:0] p_shl6_cast_fu_384_p1;
wire   [8:0] tmp_86_cast_fu_372_p1;
wire   [8:0] tmp_303_fu_406_p2;
wire   [10:0] tmp_112_fu_415_p3;
wire  signed [63:0] p_shl5_fu_423_p1;
wire  signed [63:0] tmp_436_cast_fu_411_p1;
wire   [63:0] tmp_87_fu_445_p1;
wire   [63:0] tmp_305_fu_449_p2;
wire   [8:0] tmp_114_fu_458_p1;
wire   [10:0] p_shl10_cast_fu_462_p3;
wire   [10:0] tmp_113_fu_454_p1;
wire   [1:0] tmp1_fu_476_p2;
wire  signed [5:0] tmp1_cast_fu_482_p1;
wire   [5:0] tmp_88_fu_486_p2;
wire   [7:0] tmp_89_cast_fu_492_p1;
wire   [8:0] tmp_115_fu_508_p3;
wire   [12:0] p_shl9_cast_fu_515_p1;
wire   [12:0] p_shl8_cast_fu_501_p3;
wire   [10:0] tmp_90_cast_fu_537_p1;
wire   [1:0] tmp2_fu_546_p2;
wire  signed [5:0] tmp2_cast_fu_552_p1;
wire   [5:0] tmp_91_fu_556_p2;
wire   [12:0] tmp_92_cast_fu_562_p1;
wire   [15:0] tmp_85_cast_fu_579_p1;
wire   [31:0] result_to_int_fu_594_p1;
wire   [7:0] tmp_36_fu_597_p4;
wire   [22:0] tmp_111_fu_607_p1;
wire   [0:0] notrhs_fu_617_p2;
wire   [0:0] notlhs_fu_611_p2;
wire   [0:0] tmp_38_fu_623_p2;
wire   [0:0] tmp_40_fu_629_p2;
reg   [26:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_219_p0),
    .din1(grp_fu_219_p1),
    .ce(1'b1),
    .dout(grp_fu_219_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_755),
    .din1(input_load_reg_760),
    .ce(1'b1),
    .dout(grp_fu_225_p2)
);

ShuffleNetV2_fcmpdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
ShuffleNetV2_fcmpdEe_U3(
    .din0(result_reg_790),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_39_fu_229_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_348_p2))) begin
        ci_reg_162 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond1_fu_433_p2))) begin
        ci_reg_162 <= ci_8_reg_688;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_307_p2 == 1'd1))) begin
        co_reg_115 <= co_23_reg_649;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_115 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_234_p2 == 1'd0))) begin
        h_reg_126 <= 6'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_348_p2 == 1'd1))) begin
        h_reg_126 <= h_23_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond_fu_525_p2))) begin
        m_reg_185 <= m_7_reg_706;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_360_p2))) begin
        m_reg_185 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        n_reg_208 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        n_reg_208 <= n_7_reg_730;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond_fu_525_p2))) begin
        sum_1_reg_173 <= sum_2_reg_196;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_360_p2))) begin
        sum_1_reg_173 <= sum_reg_150;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sum_2_reg_196 <= sum_1_reg_173;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        sum_2_reg_196 <= grp_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_348_p2))) begin
        sum_reg_150 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond1_fu_433_p2))) begin
        sum_reg_150 <= sum_1_reg_173;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond4_fu_307_p2))) begin
        w_reg_138 <= 6'd1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        w_reg_138 <= w_23_reg_785;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_234_p2 == 1'd0))) begin
        bias_addr_reg_664 <= tmp_fu_246_p1;
        tmp_296_reg_659[10 : 1] <= tmp_296_fu_301_p2[10 : 1];
        tmp_424_cast_reg_654 <= tmp_424_cast_fu_273_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        bias_load_reg_775 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ci_8_reg_688 <= ci_8_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_23_reg_649 <= co_23_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_load_reg_760 <= input_r_q0;
        weight_load_reg_755 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        m_7_reg_706 <= m_7_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        n_7_reg_730 <= n_7_fu_531_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        result_reg_790 <= grp_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond4_fu_307_p2))) begin
        tmp_298_reg_672[15 : 1] <= tmp_298_fu_342_p2[15 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_299_reg_780 <= tmp_299_fu_583_p2;
        w_23_reg_785 <= w_23_fu_588_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_360_p2))) begin
        tmp_302_reg_693[7 : 1] <= tmp_302_fu_400_p2[7 : 1];
        tmp_304_reg_698 <= tmp_304_fu_427_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond1_fu_433_p2))) begin
        tmp_306_reg_711 <= tmp_306_fu_470_p2;
        tmp_307_reg_716 <= tmp_307_fu_496_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_308_reg_722[12 : 1] <= tmp_308_fu_519_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond_fu_525_p2))) begin
        tmp_309_reg_735 <= tmp_309_fu_541_p2;
        tmp_310_reg_740 <= tmp_310_fu_566_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_39_reg_797 <= tmp_39_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_93_reg_765 <= grp_fu_225_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_234_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_234_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_219_p0 = sum_reg_150;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_219_p0 = sum_2_reg_196;
    end else begin
        grp_fu_219_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_219_p1 = bias_load_reg_775;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_219_p1 = tmp_93_reg_765;
    end else begin
        grp_fu_219_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_234_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_307_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_348_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_360_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond1_fu_433_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond_fu_525_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_664;

assign ci_8_fu_366_p2 = (ci_reg_162 + 2'd1);

assign co_23_fu_240_p2 = (co_reg_115 + 5'd1);

assign exitcond1_fu_433_p2 = ((m_reg_185 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_360_p2 = ((ci_reg_162 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond3_fu_348_p2 = ((w_reg_138 == 6'd33) ? 1'b1 : 1'b0);

assign exitcond4_fu_307_p2 = ((h_reg_126 == 6'd33) ? 1'b1 : 1'b0);

assign exitcond5_fu_234_p2 = ((co_reg_115 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond_fu_525_p2 = ((n_reg_208 == 2'd3) ? 1'b1 : 1'b0);

assign h_23_fu_354_p2 = (h_reg_126 + 6'd1);

assign input_r_address0 = tmp_447_cast_fu_575_p1;

assign m_7_fu_439_p2 = (m_reg_185 + 2'd1);

assign n_7_fu_531_p2 = (n_reg_208 + 2'd1);

assign notlhs_fu_611_p2 = ((tmp_36_fu_597_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_617_p2 = ((tmp_111_fu_607_p1 == 23'd0) ? 1'b1 : 1'b0);

assign output_r_address0 = tmp_432_cast_fu_642_p1;

assign output_r_d0 = ((tmp_40_fu_629_p2[0:0] === 1'b1) ? result_reg_790 : 32'd0);

assign p_shl10_cast_fu_462_p3 = {{tmp_114_fu_458_p1}, {2'd0}};

assign p_shl1_cast_fu_297_p1 = tmp_295_fu_289_p3;

assign p_shl2_cast_fu_263_p1 = tmp_s_fu_255_p3;

assign p_shl3_cast_fu_322_p3 = {{tmp_297_fu_317_p2}, {5'd0}};

assign p_shl4_cast_fu_338_p1 = tmp_110_fu_330_p3;

assign p_shl5_fu_423_p1 = $signed(tmp_112_fu_415_p3);

assign p_shl6_cast_fu_384_p1 = tmp_300_fu_376_p3;

assign p_shl7_cast_fu_396_p1 = tmp_301_fu_388_p3;

assign p_shl8_cast_fu_501_p3 = {{tmp_307_reg_716}, {5'd0}};

assign p_shl9_cast_fu_515_p1 = tmp_115_fu_508_p3;

assign p_shl_cast_fu_285_p1 = tmp_294_fu_277_p3;

assign result_to_int_fu_594_p1 = result_reg_790;

assign tmp1_cast_fu_482_p1 = $signed(tmp1_fu_476_p2);

assign tmp1_fu_476_p2 = ($signed(2'd3) + $signed(m_reg_185));

assign tmp2_cast_fu_552_p1 = $signed(tmp2_fu_546_p2);

assign tmp2_fu_546_p2 = ($signed(n_reg_208) + $signed(2'd3));

assign tmp_110_fu_330_p3 = {{tmp_297_fu_317_p2}, {1'd0}};

assign tmp_111_fu_607_p1 = result_to_int_fu_594_p1[22:0];

assign tmp_112_fu_415_p3 = {{tmp_303_fu_406_p2}, {2'd0}};

assign tmp_113_fu_454_p1 = tmp_305_fu_449_p2[10:0];

assign tmp_114_fu_458_p1 = tmp_305_fu_449_p2[8:0];

assign tmp_115_fu_508_p3 = {{tmp_307_reg_716}, {1'd0}};

assign tmp_293_fu_267_p2 = (p_shl2_cast_fu_263_p1 - tmp_cast_fu_251_p1);

assign tmp_294_fu_277_p3 = {{co_reg_115}, {5'd0}};

assign tmp_295_fu_289_p3 = {{co_reg_115}, {1'd0}};

assign tmp_296_fu_301_p2 = (p_shl1_cast_fu_297_p1 + p_shl_cast_fu_285_p1);

assign tmp_297_fu_317_p2 = (tmp_cast_79_fu_313_p1 + tmp_296_reg_659);

assign tmp_298_fu_342_p2 = (p_shl3_cast_fu_322_p3 + p_shl4_cast_fu_338_p1);

assign tmp_299_fu_583_p2 = (tmp_298_reg_672 + tmp_85_cast_fu_579_p1);

assign tmp_300_fu_376_p3 = {{ci_reg_162}, {5'd0}};

assign tmp_301_fu_388_p3 = {{ci_reg_162}, {1'd0}};

assign tmp_302_fu_400_p2 = (p_shl7_cast_fu_396_p1 + p_shl6_cast_fu_384_p1);

assign tmp_303_fu_406_p2 = ($signed(tmp_424_cast_reg_654) + $signed(tmp_86_cast_fu_372_p1));

assign tmp_304_fu_427_p2 = ($signed(p_shl5_fu_423_p1) - $signed(tmp_436_cast_fu_411_p1));

assign tmp_305_fu_449_p2 = (tmp_304_reg_698 + tmp_87_fu_445_p1);

assign tmp_306_fu_470_p2 = (p_shl10_cast_fu_462_p3 - tmp_113_fu_454_p1);

assign tmp_307_fu_496_p2 = (tmp_302_reg_693 + tmp_89_cast_fu_492_p1);

assign tmp_308_fu_519_p2 = (p_shl9_cast_fu_515_p1 + p_shl8_cast_fu_501_p3);

assign tmp_309_fu_541_p2 = (tmp_306_reg_711 + tmp_90_cast_fu_537_p1);

assign tmp_310_fu_566_p2 = (tmp_308_reg_722 + tmp_92_cast_fu_562_p1);

assign tmp_36_fu_597_p4 = {{result_to_int_fu_594_p1[30:23]}};

assign tmp_38_fu_623_p2 = (notrhs_fu_617_p2 | notlhs_fu_611_p2);

assign tmp_40_fu_629_p2 = (tmp_38_fu_623_p2 & tmp_39_reg_797);

assign tmp_424_cast_fu_273_p1 = $signed(tmp_293_fu_267_p2);

assign tmp_432_cast_fu_642_p1 = tmp_299_reg_780;

assign tmp_436_cast_fu_411_p1 = $signed(tmp_303_fu_406_p2);

assign tmp_446_cast_fu_571_p1 = tmp_309_reg_735;

assign tmp_447_cast_fu_575_p1 = tmp_310_reg_740;

assign tmp_85_cast_fu_579_p1 = w_reg_138;

assign tmp_86_cast_fu_372_p1 = ci_reg_162;

assign tmp_87_fu_445_p1 = m_reg_185;

assign tmp_88_fu_486_p2 = ($signed(h_reg_126) + $signed(tmp1_cast_fu_482_p1));

assign tmp_89_cast_fu_492_p1 = tmp_88_fu_486_p2;

assign tmp_90_cast_fu_537_p1 = n_reg_208;

assign tmp_91_fu_556_p2 = ($signed(w_reg_138) + $signed(tmp2_cast_fu_552_p1));

assign tmp_92_cast_fu_562_p1 = tmp_91_fu_556_p2;

assign tmp_cast_79_fu_313_p1 = h_reg_126;

assign tmp_cast_fu_251_p1 = co_reg_115;

assign tmp_fu_246_p1 = co_reg_115;

assign tmp_s_fu_255_p3 = {{co_reg_115}, {2'd0}};

assign w_23_fu_588_p2 = (6'd1 + w_reg_138);

assign weight_address0 = tmp_446_cast_fu_571_p1;

always @ (posedge ap_clk) begin
    tmp_296_reg_659[0] <= 1'b0;
    tmp_298_reg_672[0] <= 1'b0;
    tmp_302_reg_693[0] <= 1'b0;
    tmp_308_reg_722[0] <= 1'b0;
end

endmodule //conv1_p
