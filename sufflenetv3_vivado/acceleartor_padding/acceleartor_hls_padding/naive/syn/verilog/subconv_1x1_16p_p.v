// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_1x1_16p_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        shuffleunit0_2_outpu_address0,
        shuffleunit0_2_outpu_ce0,
        shuffleunit0_2_outpu_q0,
        ShuffleConvs_1_Downs_address0,
        ShuffleConvs_1_Downs_ce0,
        ShuffleConvs_1_Downs_we0,
        ShuffleConvs_1_Downs_d0
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [5:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [13:0] shuffleunit0_2_outpu_address0;
output   shuffleunit0_2_outpu_ce0;
input  [31:0] shuffleunit0_2_outpu_q0;
output  [13:0] ShuffleConvs_1_Downs_address0;
output   ShuffleConvs_1_Downs_ce0;
output   ShuffleConvs_1_Downs_we0;
output  [31:0] ShuffleConvs_1_Downs_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_ce0;
reg bias_ce0;
reg shuffleunit0_2_outpu_ce0;
reg ShuffleConvs_1_Downs_ce0;
reg ShuffleConvs_1_Downs_we0;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] co_11_fu_176_p2;
reg   [5:0] co_11_reg_458;
wire    ap_CS_fsm_state2;
wire   [12:0] tmp_157_fu_215_p2;
reg   [12:0] tmp_157_reg_463;
wire   [0:0] exitcond3_fu_170_p2;
wire   [10:0] tmp_159_fu_233_p2;
reg   [10:0] tmp_159_reg_468;
reg   [5:0] bias_addr_reg_473;
wire   [10:0] tmp_cast_fu_245_p1;
reg   [10:0] tmp_cast_reg_481;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond2_fu_239_p2;
wire   [14:0] tmp_161_fu_274_p2;
reg   [14:0] tmp_161_reg_486;
wire   [14:0] tmp_67_cast_fu_286_p1;
reg   [14:0] tmp_67_cast_reg_494;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond1_fu_280_p2;
reg   [13:0] ShuffleConvs_1_Downs_reg_499;
wire   [4:0] h_11_fu_300_p2;
wire   [5:0] ci_5_fu_312_p2;
reg   [5:0] ci_5_reg_512;
wire    ap_CS_fsm_state5;
wire   [12:0] tmp_163_fu_322_p2;
reg   [12:0] tmp_163_reg_517;
wire   [0:0] exitcond_fu_306_p2;
wire   [14:0] tmp_169_fu_388_p2;
reg   [14:0] tmp_169_reg_522;
wire   [4:0] w_11_fu_393_p2;
reg   [4:0] w_11_reg_527;
wire    ap_CS_fsm_state6;
reg   [31:0] weight_load_reg_542;
wire    ap_CS_fsm_state7;
reg   [31:0] shuffleunit0_2_outpu_1_reg_547;
wire   [31:0] grp_fu_161_p2;
reg   [31:0] tmp_69_reg_552;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_156_p2;
wire    ap_CS_fsm_state16;
reg   [31:0] bias_load_reg_562;
wire    ap_CS_fsm_state17;
reg   [31:0] result_reg_567;
wire    ap_CS_fsm_state22;
wire   [0:0] tmp_24_fu_165_p2;
reg   [0:0] tmp_24_reg_574;
wire    ap_CS_fsm_state23;
reg   [5:0] co_reg_98;
reg   [4:0] h_reg_109;
reg   [4:0] w_reg_121;
wire    ap_CS_fsm_state24;
reg   [31:0] sum_reg_133;
reg   [5:0] ci_reg_145;
wire   [63:0] tmp_fu_182_p1;
wire   [63:0] tmp_224_cast_fu_295_p1;
wire  signed [63:0] tmp_225_cast_fu_399_p1;
wire   [63:0] tmp_233_cast_fu_403_p1;
reg   [31:0] grp_fu_156_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state8;
wire   [11:0] tmp_s_fu_187_p3;
wire   [9:0] tmp_156_fu_199_p3;
wire   [12:0] p_shl2_cast_fu_195_p1;
wire   [12:0] p_shl3_cast_fu_211_p1;
wire   [6:0] tmp_158_fu_221_p3;
wire   [10:0] p_shl1_cast_fu_229_p1;
wire   [10:0] p_shl3_cast1_fu_207_p1;
wire   [10:0] tmp_160_fu_249_p2;
wire   [11:0] tmp_70_fu_262_p3;
wire   [14:0] p_shl4_cast_fu_254_p3;
wire   [14:0] p_shl5_cast_fu_270_p1;
wire   [14:0] tmp_162_fu_290_p2;
wire   [12:0] tmp_68_cast_fu_318_p1;
wire   [9:0] tmp_164_fu_327_p3;
wire   [6:0] tmp_165_fu_339_p3;
wire   [10:0] p_shl8_cast_fu_335_p1;
wire   [10:0] p_shl9_cast_fu_347_p1;
wire   [10:0] tmp_166_fu_351_p2;
wire   [10:0] tmp_167_fu_357_p2;
wire   [11:0] tmp_72_fu_370_p3;
wire   [14:0] p_shl6_cast_fu_362_p3;
wire   [14:0] p_shl7_cast_fu_378_p1;
wire   [14:0] tmp_168_fu_382_p2;
wire   [31:0] result_to_int_fu_407_p1;
wire   [7:0] tmp_21_fu_410_p4;
wire   [22:0] tmp_71_fu_420_p1;
wire   [0:0] notrhs_fu_430_p2;
wire   [0:0] notlhs_fu_424_p2;
wire   [0:0] tmp_23_fu_436_p2;
wire   [0:0] tmp_25_fu_442_p2;
reg   [23:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_x_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_reg_133),
    .din1(grp_fu_156_p1),
    .ce(1'b1),
    .dout(grp_fu_156_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_x_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_542),
    .din1(shuffleunit0_2_outpu_1_reg_547),
    .ce(1'b1),
    .dout(grp_fu_161_p2)
);

ShuffleNetV2_fcmpdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
ShuffleNetV2_fcmpdEe_x_U43(
    .din0(result_reg_567),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_24_fu_165_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_280_p2))) begin
        ci_reg_145 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        ci_reg_145 <= ci_5_reg_512;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_239_p2 == 1'd1))) begin
        co_reg_98 <= co_11_reg_458;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_98 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_170_p2 == 1'd0))) begin
        h_reg_109 <= 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_280_p2 == 1'd1))) begin
        h_reg_109 <= h_11_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_280_p2))) begin
        sum_reg_133 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        sum_reg_133 <= grp_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_239_p2))) begin
        w_reg_121 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        w_reg_121 <= w_11_reg_527;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_280_p2))) begin
        ShuffleConvs_1_Downs_reg_499 <= tmp_224_cast_fu_295_p1;
        tmp_67_cast_reg_494[4 : 0] <= tmp_67_cast_fu_286_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_170_p2 == 1'd0))) begin
        bias_addr_reg_473 <= tmp_fu_182_p1;
        tmp_157_reg_463[12 : 4] <= tmp_157_fu_215_p2[12 : 4];
        tmp_159_reg_468[10 : 1] <= tmp_159_fu_233_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        bias_load_reg_562 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ci_5_reg_512 <= ci_5_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_11_reg_458 <= co_11_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        result_reg_567 <= grp_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        shuffleunit0_2_outpu_1_reg_547 <= shuffleunit0_2_outpu_q0;
        weight_load_reg_542 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_239_p2))) begin
        tmp_161_reg_486[14 : 1] <= tmp_161_fu_274_p2[14 : 1];
        tmp_cast_reg_481[4 : 0] <= tmp_cast_fu_245_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond_fu_306_p2))) begin
        tmp_163_reg_517 <= tmp_163_fu_322_p2;
        tmp_169_reg_522 <= tmp_169_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_24_reg_574 <= tmp_24_fu_165_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_69_reg_552 <= grp_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_fu_306_p2))) begin
        w_11_reg_527 <= w_11_fu_393_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        ShuffleConvs_1_Downs_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        ShuffleConvs_1_Downs_we0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_170_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_170_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_156_p1 = bias_load_reg_562;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_156_p1 = tmp_69_reg_552;
    end else begin
        grp_fu_156_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        shuffleunit0_2_outpu_ce0 = 1'b1;
    end else begin
        shuffleunit0_2_outpu_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_170_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_239_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_280_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_fu_306_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ShuffleConvs_1_Downs_address0 = ShuffleConvs_1_Downs_reg_499;

assign ShuffleConvs_1_Downs_d0 = ((tmp_25_fu_442_p2[0:0] === 1'b1) ? result_reg_567 : 32'd0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bias_address0 = bias_addr_reg_473;

assign ci_5_fu_312_p2 = (ci_reg_145 + 6'd1);

assign co_11_fu_176_p2 = (co_reg_98 + 6'd1);

assign exitcond1_fu_280_p2 = ((w_reg_121 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond2_fu_239_p2 = ((h_reg_109 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond3_fu_170_p2 = ((co_reg_98 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond_fu_306_p2 = ((ci_reg_145 == 6'd48) ? 1'b1 : 1'b0);

assign h_11_fu_300_p2 = (h_reg_109 + 5'd1);

assign notlhs_fu_424_p2 = ((tmp_21_fu_410_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_430_p2 = ((tmp_71_fu_420_p1 == 23'd0) ? 1'b1 : 1'b0);

assign p_shl1_cast_fu_229_p1 = tmp_158_fu_221_p3;

assign p_shl2_cast_fu_195_p1 = tmp_s_fu_187_p3;

assign p_shl3_cast1_fu_207_p1 = tmp_156_fu_199_p3;

assign p_shl3_cast_fu_211_p1 = tmp_156_fu_199_p3;

assign p_shl4_cast_fu_254_p3 = {{tmp_160_fu_249_p2}, {4'd0}};

assign p_shl5_cast_fu_270_p1 = tmp_70_fu_262_p3;

assign p_shl6_cast_fu_362_p3 = {{tmp_167_fu_357_p2}, {4'd0}};

assign p_shl7_cast_fu_378_p1 = tmp_72_fu_370_p3;

assign p_shl8_cast_fu_335_p1 = tmp_164_fu_327_p3;

assign p_shl9_cast_fu_347_p1 = tmp_165_fu_339_p3;

assign result_to_int_fu_407_p1 = result_reg_567;

assign shuffleunit0_2_outpu_address0 = tmp_233_cast_fu_403_p1;

assign tmp_156_fu_199_p3 = {{co_reg_98}, {4'd0}};

assign tmp_157_fu_215_p2 = (p_shl2_cast_fu_195_p1 - p_shl3_cast_fu_211_p1);

assign tmp_158_fu_221_p3 = {{co_reg_98}, {1'd0}};

assign tmp_159_fu_233_p2 = (p_shl1_cast_fu_229_p1 + p_shl3_cast1_fu_207_p1);

assign tmp_160_fu_249_p2 = (tmp_cast_fu_245_p1 + tmp_159_reg_468);

assign tmp_161_fu_274_p2 = (p_shl4_cast_fu_254_p3 + p_shl5_cast_fu_270_p1);

assign tmp_162_fu_290_p2 = (tmp_161_reg_486 + tmp_67_cast_fu_286_p1);

assign tmp_163_fu_322_p2 = (tmp_68_cast_fu_318_p1 + tmp_157_reg_463);

assign tmp_164_fu_327_p3 = {{ci_reg_145}, {4'd0}};

assign tmp_165_fu_339_p3 = {{ci_reg_145}, {1'd0}};

assign tmp_166_fu_351_p2 = (p_shl8_cast_fu_335_p1 + p_shl9_cast_fu_347_p1);

assign tmp_167_fu_357_p2 = (tmp_cast_reg_481 + tmp_166_fu_351_p2);

assign tmp_168_fu_382_p2 = (p_shl6_cast_fu_362_p3 + p_shl7_cast_fu_378_p1);

assign tmp_169_fu_388_p2 = (tmp_67_cast_reg_494 + tmp_168_fu_382_p2);

assign tmp_21_fu_410_p4 = {{result_to_int_fu_407_p1[30:23]}};

assign tmp_224_cast_fu_295_p1 = tmp_162_fu_290_p2;

assign tmp_225_cast_fu_399_p1 = $signed(tmp_163_reg_517);

assign tmp_233_cast_fu_403_p1 = tmp_169_reg_522;

assign tmp_23_fu_436_p2 = (notrhs_fu_430_p2 | notlhs_fu_424_p2);

assign tmp_25_fu_442_p2 = (tmp_23_fu_436_p2 & tmp_24_reg_574);

assign tmp_67_cast_fu_286_p1 = w_reg_121;

assign tmp_68_cast_fu_318_p1 = ci_reg_145;

assign tmp_70_fu_262_p3 = {{tmp_160_fu_249_p2}, {1'd0}};

assign tmp_71_fu_420_p1 = result_to_int_fu_407_p1[22:0];

assign tmp_72_fu_370_p3 = {{tmp_167_fu_357_p2}, {1'd0}};

assign tmp_cast_fu_245_p1 = h_reg_109;

assign tmp_fu_182_p1 = co_reg_98;

assign tmp_s_fu_187_p3 = {{co_reg_98}, {6'd0}};

assign w_11_fu_393_p2 = (5'd1 + w_reg_121);

assign weight_address0 = tmp_225_cast_fu_399_p1;

always @ (posedge ap_clk) begin
    tmp_157_reg_463[3:0] <= 4'b0000;
    tmp_159_reg_468[0] <= 1'b0;
    tmp_cast_reg_481[10:5] <= 6'b000000;
    tmp_161_reg_486[0] <= 1'b0;
    tmp_67_cast_reg_494[14:5] <= 10'b0000000000;
end

endmodule //subconv_1x1_16p_p
