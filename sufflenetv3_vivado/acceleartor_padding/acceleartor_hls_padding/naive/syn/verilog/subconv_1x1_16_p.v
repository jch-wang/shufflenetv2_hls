// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_1x1_16_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [9:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [4:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [12:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg weight_ce0;
reg bias_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] co_12_fu_178_p2;
reg   [4:0] co_12_reg_468;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_171_fu_213_p2;
reg   [10:0] tmp_171_reg_473;
wire   [0:0] exitcond3_fu_172_p2;
wire   [9:0] tmp_174_fu_243_p2;
reg   [9:0] tmp_174_reg_478;
reg   [4:0] bias_addr_reg_483;
wire   [9:0] tmp_cast_fu_255_p1;
reg   [9:0] tmp_cast_reg_491;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond2_fu_249_p2;
wire   [13:0] tmp_176_fu_284_p2;
reg   [13:0] tmp_176_reg_496;
wire   [13:0] tmp_70_cast_fu_296_p1;
reg   [13:0] tmp_70_cast_reg_504;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond1_fu_290_p2;
reg   [12:0] output_addr_reg_509;
wire   [4:0] h_12_fu_310_p2;
wire   [4:0] ci_6_fu_322_p2;
reg   [4:0] ci_6_reg_522;
wire    ap_CS_fsm_state5;
wire   [13:0] tmp_183_fu_393_p2;
reg   [13:0] tmp_183_reg_527;
wire   [0:0] exitcond_fu_316_p2;
wire   [10:0] tmp_184_fu_398_p2;
reg   [10:0] tmp_184_reg_532;
wire   [4:0] w_12_fu_403_p2;
reg   [4:0] w_12_reg_537;
wire    ap_CS_fsm_state6;
reg   [31:0] weight_load_reg_552;
wire    ap_CS_fsm_state7;
reg   [31:0] input_load_reg_557;
wire   [31:0] grp_fu_163_p2;
reg   [31:0] tmp_72_reg_562;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_158_p2;
wire    ap_CS_fsm_state16;
reg   [31:0] bias_load_reg_572;
wire    ap_CS_fsm_state17;
reg   [31:0] result_reg_577;
wire    ap_CS_fsm_state22;
wire   [0:0] tmp_29_fu_167_p2;
reg   [0:0] tmp_29_reg_584;
wire    ap_CS_fsm_state23;
reg   [4:0] co_reg_100;
reg   [4:0] h_reg_111;
reg   [4:0] w_reg_123;
wire    ap_CS_fsm_state24;
reg   [31:0] sum_reg_135;
reg   [4:0] ci_reg_147;
wire   [63:0] tmp_fu_184_p1;
wire   [63:0] tmp_244_cast_fu_305_p1;
wire   [63:0] tmp_252_cast_fu_409_p1;
wire  signed [63:0] tmp_253_cast_fu_413_p1;
reg   [31:0] grp_fu_158_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state8;
wire   [9:0] tmp_s_fu_189_p3;
wire   [7:0] tmp_170_fu_201_p3;
wire   [10:0] p_shl2_cast_fu_197_p1;
wire   [10:0] p_shl3_cast_fu_209_p1;
wire   [8:0] tmp_172_fu_219_p3;
wire   [5:0] tmp_173_fu_231_p3;
wire   [9:0] p_shl1_cast_fu_239_p1;
wire   [9:0] p_shl_cast_fu_227_p1;
wire   [9:0] tmp_175_fu_259_p2;
wire   [10:0] tmp_73_fu_272_p3;
wire   [13:0] p_shl4_cast_fu_264_p3;
wire   [13:0] p_shl5_cast_fu_280_p1;
wire   [13:0] tmp_177_fu_300_p2;
wire   [8:0] tmp_178_fu_332_p3;
wire   [5:0] tmp_179_fu_344_p3;
wire   [9:0] p_shl8_cast_fu_340_p1;
wire   [9:0] p_shl9_cast_fu_352_p1;
wire   [9:0] tmp_180_fu_356_p2;
wire   [9:0] tmp_181_fu_362_p2;
wire   [10:0] tmp_75_fu_375_p3;
wire   [13:0] p_shl6_cast_fu_367_p3;
wire   [13:0] p_shl7_cast_fu_383_p1;
wire   [13:0] tmp_182_fu_387_p2;
wire   [10:0] tmp_71_cast_fu_328_p1;
wire   [31:0] result_to_int_fu_417_p1;
wire   [7:0] tmp_26_fu_420_p4;
wire   [22:0] tmp_74_fu_430_p1;
wire   [0:0] notrhs_fu_440_p2;
wire   [0:0] notlhs_fu_434_p2;
wire   [0:0] tmp_28_fu_446_p2;
wire   [0:0] tmp_30_fu_452_p2;
reg   [23:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_x_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_reg_135),
    .din1(grp_fu_158_p1),
    .ce(1'b1),
    .dout(grp_fu_158_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_x_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_552),
    .din1(input_load_reg_557),
    .ce(1'b1),
    .dout(grp_fu_163_p2)
);

ShuffleNetV2_fcmpdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
ShuffleNetV2_fcmpdEe_x_U23(
    .din0(result_reg_577),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_29_fu_167_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_290_p2))) begin
        ci_reg_147 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        ci_reg_147 <= ci_6_reg_522;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_249_p2 == 1'd1))) begin
        co_reg_100 <= co_12_reg_468;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_100 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_172_p2 == 1'd0))) begin
        h_reg_111 <= 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_290_p2 == 1'd1))) begin
        h_reg_111 <= h_12_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_290_p2))) begin
        sum_reg_135 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        sum_reg_135 <= grp_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_249_p2))) begin
        w_reg_123 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        w_reg_123 <= w_12_reg_537;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_172_p2 == 1'd0))) begin
        bias_addr_reg_483 <= tmp_fu_184_p1;
        tmp_171_reg_473[10 : 3] <= tmp_171_fu_213_p2[10 : 3];
        tmp_174_reg_478[9 : 1] <= tmp_174_fu_243_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        bias_load_reg_572 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ci_6_reg_522 <= ci_6_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_12_reg_468 <= co_12_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_load_reg_557 <= input_r_q0;
        weight_load_reg_552 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_290_p2))) begin
        output_addr_reg_509 <= tmp_244_cast_fu_305_p1;
        tmp_70_cast_reg_504[4 : 0] <= tmp_70_cast_fu_296_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        result_reg_577 <= grp_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_249_p2))) begin
        tmp_176_reg_496[13 : 1] <= tmp_176_fu_284_p2[13 : 1];
        tmp_cast_reg_491[4 : 0] <= tmp_cast_fu_255_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond_fu_316_p2))) begin
        tmp_183_reg_527 <= tmp_183_fu_393_p2;
        tmp_184_reg_532 <= tmp_184_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_29_reg_584 <= tmp_29_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_72_reg_562 <= grp_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_fu_316_p2))) begin
        w_12_reg_537 <= w_12_fu_403_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_172_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_172_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_158_p1 = bias_load_reg_572;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_158_p1 = tmp_72_reg_562;
    end else begin
        grp_fu_158_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_172_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_249_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_290_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_fu_316_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bias_address0 = bias_addr_reg_483;

assign ci_6_fu_322_p2 = (ci_reg_147 + 5'd1);

assign co_12_fu_178_p2 = (co_reg_100 + 5'd1);

assign exitcond1_fu_290_p2 = ((w_reg_123 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond2_fu_249_p2 = ((h_reg_111 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond3_fu_172_p2 = ((co_reg_100 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond_fu_316_p2 = ((ci_reg_147 == 5'd24) ? 1'b1 : 1'b0);

assign h_12_fu_310_p2 = (h_reg_111 + 5'd1);

assign input_r_address0 = tmp_252_cast_fu_409_p1;

assign notlhs_fu_434_p2 = ((tmp_26_fu_420_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_440_p2 = ((tmp_74_fu_430_p1 == 23'd0) ? 1'b1 : 1'b0);

assign output_r_address0 = output_addr_reg_509;

assign output_r_d0 = ((tmp_30_fu_452_p2[0:0] === 1'b1) ? result_reg_577 : 32'd0);

assign p_shl1_cast_fu_239_p1 = tmp_173_fu_231_p3;

assign p_shl2_cast_fu_197_p1 = tmp_s_fu_189_p3;

assign p_shl3_cast_fu_209_p1 = tmp_170_fu_201_p3;

assign p_shl4_cast_fu_264_p3 = {{tmp_175_fu_259_p2}, {4'd0}};

assign p_shl5_cast_fu_280_p1 = tmp_73_fu_272_p3;

assign p_shl6_cast_fu_367_p3 = {{tmp_181_fu_362_p2}, {4'd0}};

assign p_shl7_cast_fu_383_p1 = tmp_75_fu_375_p3;

assign p_shl8_cast_fu_340_p1 = tmp_178_fu_332_p3;

assign p_shl9_cast_fu_352_p1 = tmp_179_fu_344_p3;

assign p_shl_cast_fu_227_p1 = tmp_172_fu_219_p3;

assign result_to_int_fu_417_p1 = result_reg_577;

assign tmp_170_fu_201_p3 = {{co_reg_100}, {3'd0}};

assign tmp_171_fu_213_p2 = (p_shl2_cast_fu_197_p1 - p_shl3_cast_fu_209_p1);

assign tmp_172_fu_219_p3 = {{co_reg_100}, {4'd0}};

assign tmp_173_fu_231_p3 = {{co_reg_100}, {1'd0}};

assign tmp_174_fu_243_p2 = (p_shl1_cast_fu_239_p1 + p_shl_cast_fu_227_p1);

assign tmp_175_fu_259_p2 = (tmp_cast_fu_255_p1 + tmp_174_reg_478);

assign tmp_176_fu_284_p2 = (p_shl4_cast_fu_264_p3 + p_shl5_cast_fu_280_p1);

assign tmp_177_fu_300_p2 = (tmp_176_reg_496 + tmp_70_cast_fu_296_p1);

assign tmp_178_fu_332_p3 = {{ci_reg_147}, {4'd0}};

assign tmp_179_fu_344_p3 = {{ci_reg_147}, {1'd0}};

assign tmp_180_fu_356_p2 = (p_shl8_cast_fu_340_p1 + p_shl9_cast_fu_352_p1);

assign tmp_181_fu_362_p2 = (tmp_cast_reg_491 + tmp_180_fu_356_p2);

assign tmp_182_fu_387_p2 = (p_shl6_cast_fu_367_p3 + p_shl7_cast_fu_383_p1);

assign tmp_183_fu_393_p2 = (tmp_70_cast_reg_504 + tmp_182_fu_387_p2);

assign tmp_184_fu_398_p2 = (tmp_71_cast_fu_328_p1 + tmp_171_reg_473);

assign tmp_244_cast_fu_305_p1 = tmp_177_fu_300_p2;

assign tmp_252_cast_fu_409_p1 = tmp_183_reg_527;

assign tmp_253_cast_fu_413_p1 = $signed(tmp_184_reg_532);

assign tmp_26_fu_420_p4 = {{result_to_int_fu_417_p1[30:23]}};

assign tmp_28_fu_446_p2 = (notrhs_fu_440_p2 | notlhs_fu_434_p2);

assign tmp_30_fu_452_p2 = (tmp_28_fu_446_p2 & tmp_29_reg_584);

assign tmp_70_cast_fu_296_p1 = w_reg_123;

assign tmp_71_cast_fu_328_p1 = ci_reg_147;

assign tmp_73_fu_272_p3 = {{tmp_175_fu_259_p2}, {1'd0}};

assign tmp_74_fu_430_p1 = result_to_int_fu_417_p1[22:0];

assign tmp_75_fu_375_p3 = {{tmp_181_fu_362_p2}, {1'd0}};

assign tmp_cast_fu_255_p1 = h_reg_111;

assign tmp_fu_184_p1 = co_reg_100;

assign tmp_s_fu_189_p3 = {{co_reg_100}, {5'd0}};

assign w_12_fu_403_p2 = (5'd1 + w_reg_123);

assign weight_address0 = tmp_253_cast_fu_413_p1;

always @ (posedge ap_clk) begin
    tmp_171_reg_473[2:0] <= 3'b000;
    tmp_174_reg_478[0] <= 1'b0;
    tmp_cast_reg_491[9:5] <= 5'b00000;
    tmp_176_reg_496[0] <= 1'b0;
    tmp_70_cast_reg_504[13:5] <= 9'b000000000;
end

endmodule //subconv_1x1_16_p
