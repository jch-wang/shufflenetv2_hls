// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_8_stride (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [9:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [6:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [11:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg weight_ce0;
reg bias_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] co_1_fu_204_p2;
reg   [6:0] co_1_reg_514;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_4_fu_243_p2;
reg   [10:0] tmp_4_reg_519;
wire   [0:0] exitcond4_fu_198_p2;
wire  signed [10:0] tmp_15_cast_fu_267_p1;
reg  signed [10:0] tmp_15_cast_reg_524;
wire  signed [11:0] tmp_18_cast_fu_277_p1;
reg  signed [11:0] tmp_18_cast_reg_529;
reg   [6:0] bias_addr_reg_534;
wire   [3:0] tmp_2_fu_287_p3;
reg   [3:0] tmp_2_reg_542;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond3_fu_281_p2;
wire   [12:0] tmp_13_fu_324_p2;
reg   [12:0] tmp_13_reg_547;
wire   [3:0] tmp_5_fu_336_p3;
reg   [3:0] tmp_5_reg_555;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond2_fu_330_p2;
wire   [2:0] h_1_fu_344_p2;
wire   [1:0] m_1_fu_356_p2;
reg   [1:0] m_1_reg_568;
wire    ap_CS_fsm_state5;
wire   [10:0] tmp_17_fu_377_p2;
reg   [10:0] tmp_17_reg_573;
wire   [0:0] exitcond1_fu_350_p2;
wire   [14:0] tmp_21_fu_431_p2;
reg   [14:0] tmp_21_reg_578;
wire   [12:0] tmp_14_fu_441_p2;
reg   [12:0] tmp_14_reg_583;
wire   [2:0] w_1_fu_446_p2;
reg   [2:0] w_1_reg_588;
wire   [1:0] n_1_fu_458_p2;
reg   [1:0] n_1_reg_596;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_452_p2;
reg   [31:0] weight_load_reg_611;
wire    ap_CS_fsm_state7;
reg   [31:0] input_load_reg_616;
wire   [31:0] grp_fu_194_p2;
reg   [31:0] tmp_10_reg_621;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_188_p2;
wire    ap_CS_fsm_state16;
reg   [31:0] bias_load_reg_631;
wire    ap_CS_fsm_state17;
reg   [31:0] result_reg_636;
wire    ap_CS_fsm_state22;
reg   [6:0] co_reg_107;
reg   [2:0] h_reg_118;
reg   [2:0] w_reg_130;
wire    ap_CS_fsm_state23;
reg   [31:0] sum_reg_142;
reg   [1:0] m_reg_154;
reg   [31:0] sum_1_reg_165;
reg   [1:0] n_reg_177;
wire   [63:0] tmp_fu_210_p1;
wire   [63:0] tmp_31_cast_fu_473_p1;
wire   [63:0] tmp_32_cast_fu_502_p1;
wire   [63:0] tmp_23_cast_fu_507_p1;
reg   [31:0] grp_fu_188_p0;
reg   [31:0] grp_fu_188_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state8;
wire   [9:0] tmp_1_fu_219_p3;
wire   [7:0] tmp_3_fu_231_p3;
wire   [10:0] p_shl4_cast_fu_239_p1;
wire   [10:0] p_shl3_cast_fu_227_p1;
wire   [8:0] tmp_6_fu_249_p3;
wire   [9:0] p_shl2_cast_fu_257_p1;
wire   [9:0] tmp_cast_fu_215_p1;
wire   [9:0] tmp_8_fu_261_p2;
wire   [10:0] tmp_9_fu_271_p2;
wire   [11:0] tmp_3_cast_fu_295_p1;
wire   [11:0] tmp_11_fu_299_p2;
wire   [9:0] tmp_12_fu_304_p1;
wire   [12:0] p_shl5_cast_fu_308_p3;
wire   [12:0] p_shl6_cast_fu_316_p3;
wire   [10:0] tmp_8_cast_fu_362_p1;
wire   [10:0] tmp_15_fu_366_p2;
wire   [10:0] tmp_16_fu_371_p2;
wire   [1:0] tmp1_fu_383_p2;
wire  signed [3:0] tmp1_cast_fu_389_p1;
wire   [3:0] tmp_s_fu_393_p2;
wire   [10:0] tmp_1_cast_fu_398_p1;
wire   [10:0] tmp_18_fu_402_p2;
wire   [13:0] tmp_19_fu_407_p3;
wire   [11:0] tmp_20_fu_419_p3;
wire   [14:0] p_shl8_cast_fu_427_p1;
wire   [14:0] p_shl7_cast_fu_415_p1;
wire   [12:0] tmp_6_cast_fu_437_p1;
wire   [10:0] tmp_4_cast_fu_464_p1;
wire   [10:0] tmp_22_fu_468_p2;
wire   [1:0] tmp2_fu_478_p2;
wire  signed [3:0] tmp2_cast_fu_484_p1;
wire   [3:0] tmp_7_fu_488_p2;
wire   [14:0] tmp_9_cast_fu_493_p1;
wire   [14:0] tmp_23_fu_497_p2;
reg   [22:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_x_U81(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_188_p0),
    .din1(grp_fu_188_p1),
    .ce(1'b1),
    .dout(grp_fu_188_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_x_U82(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_611),
    .din1(input_load_reg_616),
    .ce(1'b1),
    .dout(grp_fu_194_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_281_p2 == 1'd1))) begin
        co_reg_107 <= co_1_reg_514;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_107 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_198_p2 == 1'd0))) begin
        h_reg_118 <= 3'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_330_p2 == 1'd1))) begin
        h_reg_118 <= h_1_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_452_p2))) begin
        m_reg_154 <= m_1_reg_568;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_330_p2))) begin
        m_reg_154 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_350_p2))) begin
        n_reg_177 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        n_reg_177 <= n_1_reg_596;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_350_p2))) begin
        sum_1_reg_165 <= sum_reg_142;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        sum_1_reg_165 <= grp_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_452_p2))) begin
        sum_reg_142 <= sum_1_reg_165;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_330_p2))) begin
        sum_reg_142 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond3_fu_281_p2))) begin
        w_reg_130 <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        w_reg_130 <= w_1_reg_588;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_198_p2 == 1'd0))) begin
        bias_addr_reg_534 <= tmp_fu_210_p1;
        tmp_15_cast_reg_524 <= tmp_15_cast_fu_267_p1;
        tmp_18_cast_reg_529[11 : 1] <= tmp_18_cast_fu_277_p1[11 : 1];
        tmp_4_reg_519[10 : 1] <= tmp_4_fu_243_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        bias_load_reg_631 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_1_reg_514 <= co_1_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_load_reg_616 <= input_r_q0;
        weight_load_reg_611 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_1_reg_568 <= m_1_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_1_reg_596 <= n_1_fu_458_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        result_reg_636 <= grp_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_10_reg_621 <= grp_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond3_fu_281_p2))) begin
        tmp_13_reg_547[12 : 1] <= tmp_13_fu_324_p2[12 : 1];
        tmp_2_reg_542[3 : 1] <= tmp_2_fu_287_p3[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond1_fu_350_p2))) begin
        tmp_14_reg_583 <= tmp_14_fu_441_p2;
        w_1_reg_588 <= w_1_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_350_p2))) begin
        tmp_17_reg_573 <= tmp_17_fu_377_p2;
        tmp_21_reg_578[14 : 1] <= tmp_21_fu_431_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_330_p2))) begin
        tmp_5_reg_555[3 : 1] <= tmp_5_fu_336_p3[3 : 1];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_198_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_198_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_188_p0 = sum_reg_142;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_188_p0 = sum_1_reg_165;
    end else begin
        grp_fu_188_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_188_p1 = bias_load_reg_631;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_188_p1 = tmp_10_reg_621;
    end else begin
        grp_fu_188_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_198_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_281_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_330_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_350_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_452_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bias_address0 = bias_addr_reg_534;

assign co_1_fu_204_p2 = (co_reg_107 + 7'd1);

assign exitcond1_fu_350_p2 = ((m_reg_154 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_330_p2 = ((w_reg_130 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond3_fu_281_p2 = ((h_reg_118 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond4_fu_198_p2 = ((co_reg_107 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond_fu_452_p2 = ((n_reg_177 == 2'd3) ? 1'b1 : 1'b0);

assign h_1_fu_344_p2 = (h_reg_118 + 3'd1);

assign input_r_address0 = tmp_32_cast_fu_502_p1;

assign m_1_fu_356_p2 = (m_reg_154 + 2'd1);

assign n_1_fu_458_p2 = (n_reg_177 + 2'd1);

assign output_r_address0 = tmp_23_cast_fu_507_p1;

assign output_r_d0 = result_reg_636;

assign p_shl2_cast_fu_257_p1 = tmp_6_fu_249_p3;

assign p_shl3_cast_fu_227_p1 = tmp_1_fu_219_p3;

assign p_shl4_cast_fu_239_p1 = tmp_3_fu_231_p3;

assign p_shl5_cast_fu_308_p3 = {{tmp_12_fu_304_p1}, {3'd0}};

assign p_shl6_cast_fu_316_p3 = {{tmp_11_fu_299_p2}, {1'd0}};

assign p_shl7_cast_fu_415_p1 = tmp_19_fu_407_p3;

assign p_shl8_cast_fu_427_p1 = tmp_20_fu_419_p3;

assign tmp1_cast_fu_389_p1 = $signed(tmp1_fu_383_p2);

assign tmp1_fu_383_p2 = (m_reg_154 ^ 2'd2);

assign tmp2_cast_fu_484_p1 = $signed(tmp2_fu_478_p2);

assign tmp2_fu_478_p2 = (n_reg_177 ^ 2'd2);

assign tmp_11_fu_299_p2 = ($signed(tmp_18_cast_reg_529) + $signed(tmp_3_cast_fu_295_p1));

assign tmp_12_fu_304_p1 = tmp_11_fu_299_p2[9:0];

assign tmp_13_fu_324_p2 = (p_shl5_cast_fu_308_p3 - p_shl6_cast_fu_316_p3);

assign tmp_14_fu_441_p2 = (tmp_13_reg_547 + tmp_6_cast_fu_437_p1);

assign tmp_15_cast_fu_267_p1 = $signed(tmp_8_fu_261_p2);

assign tmp_15_fu_366_p2 = ($signed(tmp_15_cast_reg_524) + $signed(tmp_8_cast_fu_362_p1));

assign tmp_16_fu_371_p2 = tmp_15_fu_366_p2 << 11'd2;

assign tmp_17_fu_377_p2 = (tmp_16_fu_371_p2 - tmp_15_fu_366_p2);

assign tmp_18_cast_fu_277_p1 = $signed(tmp_9_fu_271_p2);

assign tmp_18_fu_402_p2 = (tmp_4_reg_519 + tmp_1_cast_fu_398_p1);

assign tmp_19_fu_407_p3 = {{tmp_18_fu_402_p2}, {3'd0}};

assign tmp_1_cast_fu_398_p1 = tmp_s_fu_393_p2;

assign tmp_1_fu_219_p3 = {{co_reg_107}, {3'd0}};

assign tmp_20_fu_419_p3 = {{tmp_18_fu_402_p2}, {1'd0}};

assign tmp_21_fu_431_p2 = (p_shl8_cast_fu_427_p1 + p_shl7_cast_fu_415_p1);

assign tmp_22_fu_468_p2 = (tmp_17_reg_573 + tmp_4_cast_fu_464_p1);

assign tmp_23_cast_fu_507_p1 = tmp_14_reg_583;

assign tmp_23_fu_497_p2 = (tmp_21_reg_578 + tmp_9_cast_fu_493_p1);

assign tmp_2_fu_287_p3 = {{h_reg_118}, {1'd0}};

assign tmp_31_cast_fu_473_p1 = tmp_22_fu_468_p2;

assign tmp_32_cast_fu_502_p1 = tmp_23_fu_497_p2;

assign tmp_3_cast_fu_295_p1 = h_reg_118;

assign tmp_3_fu_231_p3 = {{co_reg_107}, {1'd0}};

assign tmp_4_cast_fu_464_p1 = n_reg_177;

assign tmp_4_fu_243_p2 = (p_shl4_cast_fu_239_p1 + p_shl3_cast_fu_227_p1);

assign tmp_5_fu_336_p3 = {{w_reg_130}, {1'd0}};

assign tmp_6_cast_fu_437_p1 = w_reg_130;

assign tmp_6_fu_249_p3 = {{co_reg_107}, {2'd0}};

assign tmp_7_fu_488_p2 = ($signed(tmp_5_reg_555) + $signed(tmp2_cast_fu_484_p1));

assign tmp_8_cast_fu_362_p1 = m_reg_154;

assign tmp_8_fu_261_p2 = (p_shl2_cast_fu_257_p1 - tmp_cast_fu_215_p1);

assign tmp_9_cast_fu_493_p1 = tmp_7_fu_488_p2;

assign tmp_9_fu_271_p2 = (p_shl3_cast_fu_227_p1 - p_shl4_cast_fu_239_p1);

assign tmp_cast_fu_215_p1 = co_reg_107;

assign tmp_fu_210_p1 = co_reg_107;

assign tmp_s_fu_393_p2 = ($signed(tmp_2_reg_542) + $signed(tmp1_cast_fu_389_p1));

assign w_1_fu_446_p2 = (w_reg_130 + 3'd1);

assign weight_address0 = tmp_31_cast_fu_473_p1;

always @ (posedge ap_clk) begin
    tmp_4_reg_519[0] <= 1'b0;
    tmp_18_cast_reg_529[0] <= 1'b0;
    tmp_2_reg_542[0] <= 1'b0;
    tmp_13_reg_547[0] <= 1'b0;
    tmp_5_reg_555[0] <= 1'b0;
    tmp_21_reg_578[0] <= 1'b0;
end

endmodule //subconv_3x3_8_stride
