// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_16_strid (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_0_address0,
        output_0_ce0,
        output_0_we0,
        output_0_d0
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [8:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [5:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [11:0] output_0_address0;
output   output_0_ce0;
output   output_0_we0;
output  [31:0] output_0_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg weight_ce0;
reg bias_ce0;
reg output_0_ce0;
reg output_0_we0;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] co_5_fu_197_p2;
reg   [5:0] co_5_reg_499;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_87_cast_fu_220_p1;
reg   [10:0] tmp_87_cast_reg_504;
wire   [0:0] exitcond4_fu_191_p2;
wire  signed [9:0] tmp_89_cast_fu_242_p1;
reg  signed [9:0] tmp_89_cast_reg_509;
wire   [9:0] tmp_91_cast_fu_254_p1;
reg   [9:0] tmp_91_cast_reg_514;
reg   [5:0] bias_addr_reg_519;
wire   [3:0] h_5_fu_264_p2;
reg   [3:0] h_5_reg_527;
wire    ap_CS_fsm_state3;
wire   [4:0] tmp_cast_36_fu_276_p1;
reg   [4:0] tmp_cast_36_reg_532;
wire   [0:0] exitcond3_fu_258_p2;
wire   [12:0] tmp_95_cast_fu_289_p3;
reg   [12:0] tmp_95_cast_reg_538;
wire   [3:0] w_5_fu_303_p2;
reg   [3:0] w_5_reg_546;
wire    ap_CS_fsm_state4;
wire   [4:0] tmp_64_cast_fu_315_p1;
reg   [4:0] tmp_64_cast_reg_551;
wire   [0:0] exitcond2_fu_297_p2;
wire   [4:0] tmp_60_fu_319_p2;
reg   [4:0] tmp_60_reg_556;
wire   [1:0] m_5_fu_335_p2;
reg   [1:0] m_5_reg_564;
wire    ap_CS_fsm_state5;
wire   [9:0] tmp_74_fu_356_p2;
reg   [9:0] tmp_74_reg_569;
wire   [0:0] exitcond1_fu_329_p2;
wire   [14:0] tmp_103_cast_fu_386_p3;
reg   [14:0] tmp_103_cast_reg_574;
wire   [0:0] sel_tmp_fu_404_p2;
reg   [0:0] sel_tmp_reg_579;
wire   [12:0] tmp_71_fu_413_p2;
reg   [12:0] tmp_71_reg_584;
wire   [1:0] n_5_fu_428_p2;
reg   [1:0] n_5_reg_592;
wire    ap_CS_fsm_state6;
wire   [9:0] tmp_76_fu_438_p2;
reg   [9:0] tmp_76_reg_597;
wire   [0:0] exitcond_fu_422_p2;
wire   [0:0] p_not_fu_443_p2;
reg   [0:0] p_not_reg_602;
wire   [14:0] tmp_77_fu_467_p2;
reg   [14:0] tmp_77_reg_607;
wire    ap_CS_fsm_state7;
reg   [31:0] weight_load_reg_622;
wire    ap_CS_fsm_state8;
wire   [31:0] tmp_64_fu_484_p3;
reg   [31:0] tmp_64_reg_627;
wire   [31:0] grp_fu_187_p2;
reg   [31:0] tmp_65_reg_632;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_181_p2;
wire    ap_CS_fsm_state17;
reg   [31:0] bias_load_reg_642;
wire    ap_CS_fsm_state18;
reg   [31:0] result_reg_647;
wire    ap_CS_fsm_state23;
reg   [5:0] co_reg_101;
reg   [3:0] h_reg_112;
reg   [3:0] w_reg_123;
wire    ap_CS_fsm_state24;
reg   [31:0] sum_reg_135;
reg   [1:0] m_reg_147;
reg   [31:0] sum_1_reg_158;
reg   [1:0] n_reg_170;
wire   [63:0] tmp_fu_203_p1;
wire   [63:0] tmp_104_cast_fu_472_p1;
wire   [63:0] tmp_105_cast_fu_476_p1;
wire   [63:0] tmp_97_cast_fu_492_p1;
reg   [31:0] grp_fu_181_p0;
reg   [31:0] grp_fu_181_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state9;
wire   [9:0] tmp_s_fu_212_p3;
wire   [7:0] tmp_66_fu_224_p3;
wire   [8:0] p_shl_cast_fu_232_p1;
wire   [8:0] tmp_cast_fu_208_p1;
wire   [8:0] tmp_67_fu_236_p2;
wire   [8:0] tmp_68_fu_246_p3;
wire   [3:0] tmp_62_fu_270_p2;
wire   [9:0] tmp_53_cast_fu_280_p1;
wire   [9:0] tmp_69_fu_284_p2;
wire   [3:0] tmp_70_fu_309_p2;
wire   [9:0] tmp_56_cast_fu_341_p1;
wire   [9:0] tmp_72_fu_345_p2;
wire   [9:0] tmp_73_fu_350_p2;
wire   [1:0] tmp3_fu_362_p2;
wire  signed [4:0] tmp3_cast_fu_368_p1;
wire   [4:0] tmp_57_fu_372_p2;
wire  signed [10:0] tmp_58_cast_fu_377_p1;
wire   [10:0] tmp_75_fu_381_p2;
wire   [2:0] m_cast8_cast_fu_325_p1;
wire   [2:0] tmp_63_fu_394_p2;
wire  signed [4:0] tmp_63_cast_fu_400_p1;
wire   [12:0] tmp_55_cast_fu_409_p1;
wire   [9:0] tmp_59_cast_fu_434_p1;
wire   [4:0] n_cast6_fu_418_p1;
wire   [1:0] tmp4_fu_448_p2;
wire  signed [4:0] tmp4_cast_fu_454_p1;
wire   [4:0] tmp_61_fu_458_p2;
wire  signed [14:0] tmp_62_cast_fu_463_p1;
wire   [0:0] sel_tmp1_fu_480_p2;
reg   [23:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_x_U66(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_181_p0),
    .din1(grp_fu_181_p1),
    .ce(1'b1),
    .dout(grp_fu_181_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_x_U67(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_622),
    .din1(tmp_64_reg_627),
    .ce(1'b1),
    .dout(grp_fu_187_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_258_p2 == 1'd1))) begin
        co_reg_101 <= co_5_reg_499;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_101 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_297_p2 == 1'd1))) begin
        h_reg_112 <= h_5_reg_527;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_191_p2 == 1'd0))) begin
        h_reg_112 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_422_p2))) begin
        m_reg_147 <= m_5_reg_564;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_297_p2))) begin
        m_reg_147 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_329_p2))) begin
        n_reg_170 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        n_reg_170 <= n_5_reg_592;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_329_p2))) begin
        sum_1_reg_158 <= sum_reg_135;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        sum_1_reg_158 <= grp_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_422_p2))) begin
        sum_reg_135 <= sum_1_reg_158;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_297_p2))) begin
        sum_reg_135 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond3_fu_258_p2))) begin
        w_reg_123 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        w_reg_123 <= w_5_reg_546;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_191_p2 == 1'd0))) begin
        bias_addr_reg_519 <= tmp_fu_203_p1;
        tmp_87_cast_reg_504[9 : 4] <= tmp_87_cast_fu_220_p1[9 : 4];
        tmp_89_cast_reg_509 <= tmp_89_cast_fu_242_p1;
        tmp_91_cast_reg_514[8 : 3] <= tmp_91_cast_fu_254_p1[8 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        bias_load_reg_642 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_5_reg_499 <= co_5_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_5_reg_527 <= h_5_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_5_reg_564 <= m_5_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_5_reg_592 <= n_5_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond_fu_422_p2))) begin
        p_not_reg_602 <= p_not_fu_443_p2;
        tmp_76_reg_597 <= tmp_76_fu_438_p2;
        tmp_77_reg_607 <= tmp_77_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        result_reg_647 <= grp_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_329_p2))) begin
        sel_tmp_reg_579 <= sel_tmp_fu_404_p2;
        tmp_103_cast_reg_574[14 : 4] <= tmp_103_cast_fu_386_p3[14 : 4];
        tmp_74_reg_569 <= tmp_74_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_297_p2))) begin
        tmp_60_reg_556[4 : 1] <= tmp_60_fu_319_p2[4 : 1];
        tmp_64_cast_reg_551[3 : 1] <= tmp_64_cast_fu_315_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_64_reg_627 <= tmp_64_fu_484_p3;
        weight_load_reg_622 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_65_reg_632 <= grp_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_329_p2 == 1'd1))) begin
        tmp_71_reg_584 <= tmp_71_fu_413_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond3_fu_258_p2))) begin
        tmp_95_cast_reg_538[12 : 3] <= tmp_95_cast_fu_289_p3[12 : 3];
        tmp_cast_36_reg_532[3 : 1] <= tmp_cast_36_fu_276_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_5_reg_546 <= w_5_fu_303_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_191_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_191_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_181_p0 = sum_reg_135;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_181_p0 = sum_1_reg_158;
    end else begin
        grp_fu_181_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_181_p1 = bias_load_reg_642;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_181_p1 = tmp_65_reg_632;
    end else begin
        grp_fu_181_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        output_0_we0 = 1'b1;
    end else begin
        output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_191_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_258_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_297_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_329_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_422_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_519;

assign co_5_fu_197_p2 = (co_reg_101 + 6'd1);

assign exitcond1_fu_329_p2 = ((m_reg_147 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_297_p2 = ((w_reg_123 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond3_fu_258_p2 = ((h_reg_112 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond4_fu_191_p2 = ((co_reg_101 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond_fu_422_p2 = ((n_reg_170 == 2'd3) ? 1'b1 : 1'b0);

assign h_5_fu_264_p2 = (h_reg_112 + 4'd1);

assign input_r_address0 = tmp_105_cast_fu_476_p1;

assign m_5_fu_335_p2 = (m_reg_147 + 2'd1);

assign m_cast8_cast_fu_325_p1 = m_reg_147;

assign n_5_fu_428_p2 = (n_reg_170 + 2'd1);

assign n_cast6_fu_418_p1 = n_reg_170;

assign output_0_address0 = tmp_97_cast_fu_492_p1;

assign output_0_d0 = result_reg_647;

assign p_not_fu_443_p2 = ((n_cast6_fu_418_p1 == tmp_60_reg_556) ? 1'b1 : 1'b0);

assign p_shl_cast_fu_232_p1 = tmp_66_fu_224_p3;

assign sel_tmp1_fu_480_p2 = (sel_tmp_reg_579 | p_not_reg_602);

assign sel_tmp_fu_404_p2 = ((tmp_cast_36_reg_532 == tmp_63_cast_fu_400_p1) ? 1'b1 : 1'b0);

assign tmp3_cast_fu_368_p1 = $signed(tmp3_fu_362_p2);

assign tmp3_fu_362_p2 = ($signed(2'd3) + $signed(m_reg_147));

assign tmp4_cast_fu_454_p1 = $signed(tmp4_fu_448_p2);

assign tmp4_fu_448_p2 = ($signed(n_reg_170) + $signed(2'd3));

assign tmp_103_cast_fu_386_p3 = {{tmp_75_fu_381_p2}, {4'd0}};

assign tmp_104_cast_fu_472_p1 = tmp_76_reg_597;

assign tmp_105_cast_fu_476_p1 = tmp_77_reg_607;

assign tmp_53_cast_fu_280_p1 = h_reg_112;

assign tmp_55_cast_fu_409_p1 = w_reg_123;

assign tmp_56_cast_fu_341_p1 = m_reg_147;

assign tmp_57_fu_372_p2 = ($signed(tmp3_cast_fu_368_p1) + $signed(tmp_cast_36_reg_532));

assign tmp_58_cast_fu_377_p1 = $signed(tmp_57_fu_372_p2);

assign tmp_59_cast_fu_434_p1 = n_reg_170;

assign tmp_60_fu_319_p2 = (5'd0 - tmp_64_cast_fu_315_p1);

assign tmp_61_fu_458_p2 = ($signed(tmp_64_cast_reg_551) + $signed(tmp4_cast_fu_454_p1));

assign tmp_62_cast_fu_463_p1 = $signed(tmp_61_fu_458_p2);

assign tmp_62_fu_270_p2 = h_reg_112 << 4'd1;

assign tmp_63_cast_fu_400_p1 = $signed(tmp_63_fu_394_p2);

assign tmp_63_fu_394_p2 = (3'd0 - m_cast8_cast_fu_325_p1);

assign tmp_64_cast_fu_315_p1 = tmp_70_fu_309_p2;

assign tmp_64_fu_484_p3 = ((sel_tmp1_fu_480_p2[0:0] === 1'b1) ? 32'd0 : input_r_q0);

assign tmp_66_fu_224_p3 = {{co_reg_101}, {2'd0}};

assign tmp_67_fu_236_p2 = (p_shl_cast_fu_232_p1 - tmp_cast_fu_208_p1);

assign tmp_68_fu_246_p3 = {{co_reg_101}, {3'd0}};

assign tmp_69_fu_284_p2 = (tmp_91_cast_reg_514 + tmp_53_cast_fu_280_p1);

assign tmp_70_fu_309_p2 = w_reg_123 << 4'd1;

assign tmp_71_fu_413_p2 = (tmp_95_cast_reg_538 + tmp_55_cast_fu_409_p1);

assign tmp_72_fu_345_p2 = ($signed(tmp_56_cast_fu_341_p1) + $signed(tmp_89_cast_reg_509));

assign tmp_73_fu_350_p2 = tmp_72_fu_345_p2 << 10'd2;

assign tmp_74_fu_356_p2 = (tmp_73_fu_350_p2 - tmp_72_fu_345_p2);

assign tmp_75_fu_381_p2 = ($signed(tmp_58_cast_fu_377_p1) + $signed(tmp_87_cast_reg_504));

assign tmp_76_fu_438_p2 = (tmp_74_reg_569 + tmp_59_cast_fu_434_p1);

assign tmp_77_fu_467_p2 = ($signed(tmp_103_cast_reg_574) + $signed(tmp_62_cast_fu_463_p1));

assign tmp_87_cast_fu_220_p1 = tmp_s_fu_212_p3;

assign tmp_89_cast_fu_242_p1 = $signed(tmp_67_fu_236_p2);

assign tmp_91_cast_fu_254_p1 = tmp_68_fu_246_p3;

assign tmp_95_cast_fu_289_p3 = {{tmp_69_fu_284_p2}, {3'd0}};

assign tmp_97_cast_fu_492_p1 = tmp_71_reg_584;

assign tmp_cast_36_fu_276_p1 = tmp_62_fu_270_p2;

assign tmp_cast_fu_208_p1 = co_reg_101;

assign tmp_fu_203_p1 = co_reg_101;

assign tmp_s_fu_212_p3 = {{co_reg_101}, {4'd0}};

assign w_5_fu_303_p2 = (w_reg_123 + 4'd1);

assign weight_address0 = tmp_104_cast_fu_472_p1;

always @ (posedge ap_clk) begin
    tmp_87_cast_reg_504[3:0] <= 4'b0000;
    tmp_87_cast_reg_504[10] <= 1'b0;
    tmp_91_cast_reg_514[2:0] <= 3'b000;
    tmp_91_cast_reg_514[9] <= 1'b0;
    tmp_cast_36_reg_532[0] <= 1'b0;
    tmp_cast_36_reg_532[4] <= 1'b0;
    tmp_95_cast_reg_538[2:0] <= 3'b000;
    tmp_64_cast_reg_551[0] <= 1'b0;
    tmp_64_cast_reg_551[4] <= 1'b0;
    tmp_60_reg_556[0] <= 1'b0;
    tmp_103_cast_reg_574[3:0] <= 4'b0000;
end

endmodule //subconv_3x3_16_strid
