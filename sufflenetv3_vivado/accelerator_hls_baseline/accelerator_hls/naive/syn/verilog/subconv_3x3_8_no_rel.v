// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_8_no_rel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_0_address0,
        output_0_ce0,
        output_0_we0,
        output_0_d0
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_0_address0;
output   input_0_ce0;
input  [31:0] input_0_q0;
output  [8:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [5:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [11:0] output_0_address0;
output   output_0_ce0;
output   output_0_we0;
output  [31:0] output_0_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg weight_ce0;
reg bias_ce0;
reg output_0_ce0;
reg output_0_we0;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] co_2_fu_198_p2;
reg   [5:0] co_2_reg_523;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_35_cast2_fu_221_p1;
reg   [9:0] tmp_35_cast2_reg_528;
wire   [0:0] exitcond4_fu_192_p2;
wire   [9:0] tmp_35_cast_fu_225_p1;
reg   [9:0] tmp_35_cast_reg_533;
wire  signed [9:0] tmp_37_cast_fu_247_p1;
reg  signed [9:0] tmp_37_cast_reg_538;
reg   [5:0] bias_addr_reg_543;
wire   [4:0] h_cast_fu_251_p1;
reg   [4:0] h_cast_reg_548;
wire    ap_CS_fsm_state3;
wire   [3:0] h_2_fu_261_p2;
reg   [3:0] h_2_reg_556;
wire   [12:0] tmp_40_cast_fu_276_p3;
reg   [12:0] tmp_40_cast_reg_561;
wire   [0:0] exitcond3_fu_255_p2;
wire   [4:0] w_cast_fu_284_p1;
reg   [4:0] w_cast_reg_566;
wire    ap_CS_fsm_state4;
wire   [3:0] w_2_fu_294_p2;
reg   [3:0] w_2_reg_574;
wire   [3:0] tmp_23_fu_300_p2;
reg   [3:0] tmp_23_reg_579;
wire   [0:0] exitcond2_fu_288_p2;
wire   [1:0] m_2_fu_316_p2;
reg   [1:0] m_2_reg_587;
wire    ap_CS_fsm_state5;
wire   [9:0] tmp_28_fu_337_p2;
reg   [9:0] tmp_28_reg_592;
wire   [0:0] exitcond1_fu_310_p2;
wire   [0:0] tmp_17_fu_353_p2;
reg   [0:0] tmp_17_reg_597;
wire   [12:0] tmp_47_cast_fu_383_p3;
reg   [12:0] tmp_47_cast_reg_602;
wire   [0:0] icmp_fu_401_p2;
reg   [0:0] icmp_reg_607;
wire   [12:0] tmp_24_fu_411_p2;
reg   [12:0] tmp_24_reg_612;
wire   [1:0] n_2_fu_426_p2;
reg   [1:0] n_2_reg_620;
wire    ap_CS_fsm_state6;
wire   [9:0] tmp_31_fu_436_p2;
reg   [9:0] tmp_31_reg_625;
wire   [0:0] exitcond_fu_420_p2;
wire   [0:0] icmp5_fu_466_p2;
reg   [0:0] icmp5_reg_630;
wire   [12:0] tmp_33_fu_476_p2;
reg   [12:0] tmp_33_reg_635;
wire   [0:0] notlhs_fu_481_p2;
reg   [0:0] notlhs_reg_640;
wire    ap_CS_fsm_state7;
reg   [31:0] weight_load_reg_655;
wire    ap_CS_fsm_state8;
wire   [31:0] tmp_25_fu_508_p3;
reg   [31:0] tmp_25_reg_660;
wire   [31:0] grp_fu_188_p2;
reg   [31:0] tmp_26_reg_665;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_182_p2;
wire    ap_CS_fsm_state17;
reg   [31:0] bias_load_reg_675;
wire    ap_CS_fsm_state18;
reg   [31:0] result_reg_680;
wire    ap_CS_fsm_state23;
reg   [5:0] co_reg_101;
reg   [3:0] h_reg_112;
reg   [3:0] w_reg_124;
wire    ap_CS_fsm_state24;
reg   [31:0] sum_reg_136;
reg   [1:0] m_reg_148;
reg   [31:0] sum_1_reg_159;
reg   [1:0] n_reg_171;
wire   [63:0] tmp_fu_204_p1;
wire   [63:0] tmp_48_cast_fu_486_p1;
wire   [63:0] tmp_49_cast_fu_490_p1;
wire   [63:0] tmp_41_cast_fu_516_p1;
reg   [31:0] grp_fu_182_p0;
reg   [31:0] grp_fu_182_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state9;
wire   [8:0] tmp_s_fu_213_p3;
wire   [7:0] tmp_19_fu_229_p3;
wire   [8:0] p_shl_cast_fu_237_p1;
wire   [8:0] tmp_cast_fu_209_p1;
wire   [8:0] tmp_20_fu_241_p2;
wire   [9:0] tmp_cast_21_fu_267_p1;
wire   [9:0] tmp_22_fu_271_p2;
wire   [9:0] tmp_15_cast_fu_322_p1;
wire   [9:0] tmp_27_fu_326_p2;
wire   [9:0] tmp_15_fu_331_p2;
wire   [2:0] m_cast_cast_fu_306_p1;
wire   [2:0] tmp_16_fu_343_p2;
wire  signed [3:0] tmp_16_cast_fu_349_p1;
wire   [1:0] tmp4_fu_359_p2;
wire  signed [4:0] tmp4_cast_fu_365_p1;
wire   [4:0] tmp_18_fu_369_p2;
wire  signed [9:0] tmp_19_cast_fu_374_p1;
wire   [9:0] tmp_29_fu_378_p2;
wire   [1:0] tmp_30_fu_391_p4;
wire   [12:0] tmp_14_cast_fu_407_p1;
wire   [9:0] tmp_20_cast_fu_432_p1;
wire   [1:0] tmp5_fu_441_p2;
wire  signed [4:0] tmp5_cast_fu_447_p1;
wire   [4:0] tmp_21_fu_451_p2;
wire   [1:0] tmp_32_fu_456_p4;
wire  signed [12:0] tmp_23_cast_fu_472_p1;
wire   [3:0] n_cast9_fu_416_p1;
wire   [0:0] tmp7_fu_498_p2;
wire   [0:0] tmp6_fu_494_p2;
wire   [0:0] sel_tmp2_fu_502_p2;
reg   [23:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_x_U96(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_182_p0),
    .din1(grp_fu_182_p1),
    .ce(1'b1),
    .dout(grp_fu_182_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_x_U97(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_655),
    .din1(tmp_25_reg_660),
    .ce(1'b1),
    .dout(grp_fu_188_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_255_p2 == 1'd1))) begin
        co_reg_101 <= co_2_reg_523;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_101 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_288_p2 == 1'd1))) begin
        h_reg_112 <= h_2_reg_556;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_192_p2 == 1'd0))) begin
        h_reg_112 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_420_p2))) begin
        m_reg_148 <= m_2_reg_587;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_288_p2))) begin
        m_reg_148 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_310_p2))) begin
        n_reg_171 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        n_reg_171 <= n_2_reg_620;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_310_p2))) begin
        sum_1_reg_159 <= sum_reg_136;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        sum_1_reg_159 <= grp_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_420_p2))) begin
        sum_reg_136 <= sum_1_reg_159;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_288_p2))) begin
        sum_reg_136 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond3_fu_255_p2))) begin
        w_reg_124 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        w_reg_124 <= w_2_reg_574;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_192_p2 == 1'd0))) begin
        bias_addr_reg_543 <= tmp_fu_204_p1;
        tmp_35_cast2_reg_528[8 : 3] <= tmp_35_cast2_fu_221_p1[8 : 3];
        tmp_35_cast_reg_533[8 : 3] <= tmp_35_cast_fu_225_p1[8 : 3];
        tmp_37_cast_reg_538 <= tmp_37_cast_fu_247_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        bias_load_reg_675 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_2_reg_523 <= co_2_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_2_reg_556 <= h_2_fu_261_p2;
        h_cast_reg_548[3 : 0] <= h_cast_fu_251_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond_fu_420_p2))) begin
        icmp5_reg_630 <= icmp5_fu_466_p2;
        notlhs_reg_640 <= notlhs_fu_481_p2;
        tmp_31_reg_625 <= tmp_31_fu_436_p2;
        tmp_33_reg_635 <= tmp_33_fu_476_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_310_p2))) begin
        icmp_reg_607 <= icmp_fu_401_p2;
        tmp_17_reg_597 <= tmp_17_fu_353_p2;
        tmp_28_reg_592 <= tmp_28_fu_337_p2;
        tmp_47_cast_reg_602[12 : 3] <= tmp_47_cast_fu_383_p3[12 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_2_reg_587 <= m_2_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_2_reg_620 <= n_2_fu_426_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        result_reg_680 <= grp_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_288_p2))) begin
        tmp_23_reg_579 <= tmp_23_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_310_p2 == 1'd1))) begin
        tmp_24_reg_612 <= tmp_24_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_25_reg_660 <= tmp_25_fu_508_p3;
        weight_load_reg_655 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_26_reg_665 <= grp_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond3_fu_255_p2))) begin
        tmp_40_cast_reg_561[12 : 3] <= tmp_40_cast_fu_276_p3[12 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_2_reg_574 <= w_2_fu_294_p2;
        w_cast_reg_566[3 : 0] <= w_cast_fu_284_p1[3 : 0];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_192_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_192_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_182_p0 = sum_reg_136;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_182_p0 = sum_1_reg_159;
    end else begin
        grp_fu_182_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_182_p1 = bias_load_reg_675;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_182_p1 = tmp_26_reg_665;
    end else begin
        grp_fu_182_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        output_0_we0 = 1'b1;
    end else begin
        output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_192_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_255_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_288_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_310_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_420_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_543;

assign co_2_fu_198_p2 = (co_reg_101 + 6'd1);

assign exitcond1_fu_310_p2 = ((m_reg_148 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_288_p2 = ((w_reg_124 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond3_fu_255_p2 = ((h_reg_112 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond4_fu_192_p2 = ((co_reg_101 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond_fu_420_p2 = ((n_reg_171 == 2'd3) ? 1'b1 : 1'b0);

assign h_2_fu_261_p2 = (h_reg_112 + 4'd1);

assign h_cast_fu_251_p1 = h_reg_112;

assign icmp5_fu_466_p2 = ((tmp_32_fu_456_p4 != 2'd1) ? 1'b1 : 1'b0);

assign icmp_fu_401_p2 = ((tmp_30_fu_391_p4 != 2'd1) ? 1'b1 : 1'b0);

assign input_0_address0 = tmp_49_cast_fu_490_p1;

assign m_2_fu_316_p2 = (m_reg_148 + 2'd1);

assign m_cast_cast_fu_306_p1 = m_reg_148;

assign n_2_fu_426_p2 = (n_reg_171 + 2'd1);

assign n_cast9_fu_416_p1 = n_reg_171;

assign notlhs_fu_481_p2 = ((n_cast9_fu_416_p1 != tmp_23_reg_579) ? 1'b1 : 1'b0);

assign output_0_address0 = tmp_41_cast_fu_516_p1;

assign output_0_d0 = result_reg_680;

assign p_shl_cast_fu_237_p1 = tmp_19_fu_229_p3;

assign sel_tmp2_fu_502_p2 = (tmp7_fu_498_p2 & tmp6_fu_494_p2);

assign tmp4_cast_fu_365_p1 = $signed(tmp4_fu_359_p2);

assign tmp4_fu_359_p2 = ($signed(2'd3) + $signed(m_reg_148));

assign tmp5_cast_fu_447_p1 = $signed(tmp5_fu_441_p2);

assign tmp5_fu_441_p2 = ($signed(n_reg_171) + $signed(2'd3));

assign tmp6_fu_494_p2 = (icmp_reg_607 & notlhs_reg_640);

assign tmp7_fu_498_p2 = (tmp_17_reg_597 & icmp5_reg_630);

assign tmp_14_cast_fu_407_p1 = w_reg_124;

assign tmp_15_cast_fu_322_p1 = m_reg_148;

assign tmp_15_fu_331_p2 = tmp_27_fu_326_p2 << 10'd2;

assign tmp_16_cast_fu_349_p1 = $signed(tmp_16_fu_343_p2);

assign tmp_16_fu_343_p2 = (3'd0 - m_cast_cast_fu_306_p1);

assign tmp_17_fu_353_p2 = ((h_reg_112 != tmp_16_cast_fu_349_p1) ? 1'b1 : 1'b0);

assign tmp_18_fu_369_p2 = ($signed(tmp4_cast_fu_365_p1) + $signed(h_cast_reg_548));

assign tmp_19_cast_fu_374_p1 = $signed(tmp_18_fu_369_p2);

assign tmp_19_fu_229_p3 = {{co_reg_101}, {2'd0}};

assign tmp_20_cast_fu_432_p1 = n_reg_171;

assign tmp_20_fu_241_p2 = (p_shl_cast_fu_237_p1 - tmp_cast_fu_209_p1);

assign tmp_21_fu_451_p2 = ($signed(w_cast_reg_566) + $signed(tmp5_cast_fu_447_p1));

assign tmp_22_fu_271_p2 = (tmp_cast_21_fu_267_p1 + tmp_35_cast_reg_533);

assign tmp_23_cast_fu_472_p1 = $signed(tmp_21_fu_451_p2);

assign tmp_23_fu_300_p2 = (4'd0 - w_reg_124);

assign tmp_24_fu_411_p2 = (tmp_40_cast_reg_561 + tmp_14_cast_fu_407_p1);

assign tmp_25_fu_508_p3 = ((sel_tmp2_fu_502_p2[0:0] === 1'b1) ? input_0_q0 : 32'd0);

assign tmp_27_fu_326_p2 = ($signed(tmp_15_cast_fu_322_p1) + $signed(tmp_37_cast_reg_538));

assign tmp_28_fu_337_p2 = (tmp_15_fu_331_p2 - tmp_27_fu_326_p2);

assign tmp_29_fu_378_p2 = ($signed(tmp_19_cast_fu_374_p1) + $signed(tmp_35_cast2_reg_528));

assign tmp_30_fu_391_p4 = {{tmp_18_fu_369_p2[4:3]}};

assign tmp_31_fu_436_p2 = (tmp_28_reg_592 + tmp_20_cast_fu_432_p1);

assign tmp_32_fu_456_p4 = {{tmp_21_fu_451_p2[4:3]}};

assign tmp_33_fu_476_p2 = ($signed(tmp_47_cast_reg_602) + $signed(tmp_23_cast_fu_472_p1));

assign tmp_35_cast2_fu_221_p1 = tmp_s_fu_213_p3;

assign tmp_35_cast_fu_225_p1 = tmp_s_fu_213_p3;

assign tmp_37_cast_fu_247_p1 = $signed(tmp_20_fu_241_p2);

assign tmp_40_cast_fu_276_p3 = {{tmp_22_fu_271_p2}, {3'd0}};

assign tmp_41_cast_fu_516_p1 = tmp_24_reg_612;

assign tmp_47_cast_fu_383_p3 = {{tmp_29_fu_378_p2}, {3'd0}};

assign tmp_48_cast_fu_486_p1 = tmp_31_reg_625;

assign tmp_49_cast_fu_490_p1 = tmp_33_reg_635;

assign tmp_cast_21_fu_267_p1 = h_reg_112;

assign tmp_cast_fu_209_p1 = co_reg_101;

assign tmp_fu_204_p1 = co_reg_101;

assign tmp_s_fu_213_p3 = {{co_reg_101}, {3'd0}};

assign w_2_fu_294_p2 = (w_reg_124 + 4'd1);

assign w_cast_fu_284_p1 = w_reg_124;

assign weight_address0 = tmp_48_cast_fu_486_p1;

always @ (posedge ap_clk) begin
    tmp_35_cast2_reg_528[2:0] <= 3'b000;
    tmp_35_cast2_reg_528[9] <= 1'b0;
    tmp_35_cast_reg_533[2:0] <= 3'b000;
    tmp_35_cast_reg_533[9] <= 1'b0;
    h_cast_reg_548[4] <= 1'b0;
    tmp_40_cast_reg_561[2:0] <= 3'b000;
    w_cast_reg_566[4] <= 1'b0;
    tmp_47_cast_reg_602[2:0] <= 3'b000;
end

endmodule //subconv_3x3_8_no_rel
