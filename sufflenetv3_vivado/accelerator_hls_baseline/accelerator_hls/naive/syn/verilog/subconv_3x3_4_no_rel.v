// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_4_no_rel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        weight_address0,
        weight_ce0,
        weight_q0,
        bias_address0,
        bias_ce0,
        bias_q0,
        output_0_address0,
        output_0_ce0,
        output_0_we0,
        output_0_d0
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] input_0_address0;
output   input_0_ce0;
input  [31:0] input_0_q0;
output  [9:0] weight_address0;
output   weight_ce0;
input  [31:0] weight_q0;
output  [6:0] bias_address0;
output   bias_ce0;
input  [31:0] bias_q0;
output  [10:0] output_0_address0;
output   output_0_ce0;
output   output_0_we0;
output  [31:0] output_0_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg weight_ce0;
reg bias_ce0;
reg output_0_ce0;
reg output_0_we0;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] co_3_fu_194_p2;
reg   [6:0] co_3_reg_503;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_51_cast2_fu_217_p1;
reg   [9:0] tmp_51_cast2_reg_508;
wire   [0:0] exitcond4_fu_188_p2;
wire   [9:0] tmp_51_cast_fu_221_p1;
reg   [9:0] tmp_51_cast_reg_513;
wire  signed [10:0] tmp_53_cast_fu_231_p1;
reg  signed [10:0] tmp_53_cast_reg_518;
reg   [6:0] bias_addr_reg_523;
wire   [3:0] h_cast_fu_235_p1;
reg   [3:0] h_cast_reg_528;
wire    ap_CS_fsm_state3;
wire   [2:0] h_3_fu_245_p2;
reg   [2:0] h_3_reg_536;
wire   [11:0] tmp_56_cast_fu_260_p3;
reg   [11:0] tmp_56_cast_reg_541;
wire   [0:0] exitcond3_fu_239_p2;
wire   [3:0] w_cast_fu_268_p1;
reg   [3:0] w_cast_reg_546;
wire    ap_CS_fsm_state4;
wire   [2:0] w_3_fu_278_p2;
reg   [2:0] w_3_reg_554;
wire   [2:0] tmp_37_fu_284_p2;
reg   [2:0] tmp_37_reg_559;
wire   [0:0] exitcond2_fu_272_p2;
wire   [1:0] m_3_fu_300_p2;
reg   [1:0] m_3_reg_567;
wire    ap_CS_fsm_state5;
wire   [10:0] tmp_42_fu_321_p2;
reg   [10:0] tmp_42_reg_572;
wire   [0:0] exitcond1_fu_294_p2;
wire   [0:0] tmp_30_fu_333_p2;
reg   [0:0] tmp_30_reg_577;
wire   [11:0] tmp_63_cast_fu_363_p3;
reg   [11:0] tmp_63_cast_reg_582;
wire   [0:0] icmp_fu_381_p2;
reg   [0:0] icmp_reg_587;
wire   [11:0] tmp_40_fu_391_p2;
reg   [11:0] tmp_40_reg_592;
wire   [1:0] n_3_fu_406_p2;
reg   [1:0] n_3_reg_600;
wire    ap_CS_fsm_state6;
wire   [10:0] tmp_45_fu_416_p2;
reg   [10:0] tmp_45_reg_605;
wire   [0:0] exitcond_fu_400_p2;
wire   [0:0] icmp5_fu_446_p2;
reg   [0:0] icmp5_reg_610;
wire   [11:0] tmp_47_fu_456_p2;
reg   [11:0] tmp_47_reg_615;
wire   [0:0] notlhs_fu_461_p2;
reg   [0:0] notlhs_reg_620;
wire    ap_CS_fsm_state7;
reg   [31:0] weight_load_reg_635;
wire    ap_CS_fsm_state8;
wire   [31:0] tmp_38_fu_488_p3;
reg   [31:0] tmp_38_reg_640;
wire   [31:0] grp_fu_184_p2;
reg   [31:0] tmp_39_reg_645;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_178_p2;
wire    ap_CS_fsm_state17;
reg   [31:0] bias_load_reg_655;
wire    ap_CS_fsm_state18;
reg   [31:0] result_reg_660;
wire    ap_CS_fsm_state23;
reg   [6:0] co_reg_97;
reg   [2:0] h_reg_108;
reg   [2:0] w_reg_120;
wire    ap_CS_fsm_state24;
reg   [31:0] sum_reg_132;
reg   [1:0] m_reg_144;
reg   [31:0] sum_1_reg_155;
reg   [1:0] n_reg_167;
wire   [63:0] tmp_fu_200_p1;
wire   [63:0] tmp_64_cast_fu_466_p1;
wire   [63:0] tmp_65_cast_fu_470_p1;
wire   [63:0] tmp_57_cast_fu_496_p1;
reg   [31:0] grp_fu_178_p0;
reg   [31:0] grp_fu_178_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state9;
wire   [8:0] tmp_s_fu_209_p3;
wire   [9:0] tmp_cast_fu_205_p1;
wire   [9:0] tmp_35_fu_225_p2;
wire   [9:0] tmp_cast_26_fu_251_p1;
wire   [9:0] tmp_36_fu_255_p2;
wire   [10:0] tmp_28_cast_fu_306_p1;
wire   [10:0] tmp_41_fu_310_p2;
wire   [10:0] tmp_33_fu_315_p2;
wire   [2:0] m_cast_fu_290_p1;
wire   [2:0] tmp_29_fu_327_p2;
wire   [1:0] tmp4_fu_339_p2;
wire  signed [3:0] tmp4_cast_fu_345_p1;
wire   [3:0] tmp_31_fu_349_p2;
wire  signed [9:0] tmp_32_cast_fu_354_p1;
wire   [9:0] tmp_43_fu_358_p2;
wire   [1:0] tmp_44_fu_371_p4;
wire   [11:0] tmp_27_cast_fu_387_p1;
wire   [10:0] tmp_33_cast_fu_412_p1;
wire   [1:0] tmp5_fu_421_p2;
wire  signed [3:0] tmp5_cast_fu_427_p1;
wire   [3:0] tmp_34_fu_431_p2;
wire   [1:0] tmp_46_fu_436_p4;
wire  signed [11:0] tmp_36_cast_fu_452_p1;
wire   [2:0] n_cast_fu_396_p1;
wire   [0:0] tmp7_fu_478_p2;
wire   [0:0] tmp6_fu_474_p2;
wire   [0:0] sel_tmp2_fu_482_p2;
reg   [23:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
end

ShuffleNetV2_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_faddbkb_x_U146(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_178_p0),
    .din1(grp_fu_178_p1),
    .ce(1'b1),
    .dout(grp_fu_178_p2)
);

ShuffleNetV2_fmulcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ShuffleNetV2_fmulcud_x_U147(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_load_reg_635),
    .din1(tmp_38_reg_640),
    .ce(1'b1),
    .dout(grp_fu_184_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_239_p2 == 1'd1))) begin
        co_reg_97 <= co_3_reg_503;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_97 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_272_p2 == 1'd1))) begin
        h_reg_108 <= h_3_reg_536;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_188_p2 == 1'd0))) begin
        h_reg_108 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_400_p2))) begin
        m_reg_144 <= m_3_reg_567;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_272_p2))) begin
        m_reg_144 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_294_p2))) begin
        n_reg_167 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        n_reg_167 <= n_3_reg_600;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_294_p2))) begin
        sum_1_reg_155 <= sum_reg_132;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        sum_1_reg_155 <= grp_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_400_p2))) begin
        sum_reg_132 <= sum_1_reg_155;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_272_p2))) begin
        sum_reg_132 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond3_fu_239_p2))) begin
        w_reg_120 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        w_reg_120 <= w_3_reg_554;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_188_p2 == 1'd0))) begin
        bias_addr_reg_523 <= tmp_fu_200_p1;
        tmp_51_cast2_reg_508[8 : 2] <= tmp_51_cast2_fu_217_p1[8 : 2];
        tmp_51_cast_reg_513[8 : 2] <= tmp_51_cast_fu_221_p1[8 : 2];
        tmp_53_cast_reg_518 <= tmp_53_cast_fu_231_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        bias_load_reg_655 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_3_reg_503 <= co_3_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_3_reg_536 <= h_3_fu_245_p2;
        h_cast_reg_528[2 : 0] <= h_cast_fu_235_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond_fu_400_p2))) begin
        icmp5_reg_610 <= icmp5_fu_446_p2;
        notlhs_reg_620 <= notlhs_fu_461_p2;
        tmp_45_reg_605 <= tmp_45_fu_416_p2;
        tmp_47_reg_615 <= tmp_47_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_294_p2))) begin
        icmp_reg_587 <= icmp_fu_381_p2;
        tmp_30_reg_577 <= tmp_30_fu_333_p2;
        tmp_42_reg_572 <= tmp_42_fu_321_p2;
        tmp_63_cast_reg_582[11 : 2] <= tmp_63_cast_fu_363_p3[11 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_3_reg_567 <= m_3_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_3_reg_600 <= n_3_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        result_reg_660 <= grp_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_272_p2))) begin
        tmp_37_reg_559 <= tmp_37_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_38_reg_640 <= tmp_38_fu_488_p3;
        weight_load_reg_635 <= weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_39_reg_645 <= grp_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_294_p2 == 1'd1))) begin
        tmp_40_reg_592 <= tmp_40_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond3_fu_239_p2))) begin
        tmp_56_cast_reg_541[11 : 2] <= tmp_56_cast_fu_260_p3[11 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_3_reg_554 <= w_3_fu_278_p2;
        w_cast_reg_546[2 : 0] <= w_cast_fu_268_p1[2 : 0];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_188_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_188_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_178_p0 = sum_reg_132;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_178_p0 = sum_1_reg_155;
    end else begin
        grp_fu_178_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_178_p1 = bias_load_reg_655;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_178_p1 = tmp_39_reg_645;
    end else begin
        grp_fu_178_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        output_0_ce0 = 1'b1;
    end else begin
        output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        output_0_we0 = 1'b1;
    end else begin
        output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_188_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_239_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_272_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_294_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_400_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_523;

assign co_3_fu_194_p2 = (co_reg_97 + 7'd1);

assign exitcond1_fu_294_p2 = ((m_reg_144 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_272_p2 = ((w_reg_120 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond3_fu_239_p2 = ((h_reg_108 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond4_fu_188_p2 = ((co_reg_97 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond_fu_400_p2 = ((n_reg_167 == 2'd3) ? 1'b1 : 1'b0);

assign h_3_fu_245_p2 = (h_reg_108 + 3'd1);

assign h_cast_fu_235_p1 = h_reg_108;

assign icmp5_fu_446_p2 = ((tmp_46_fu_436_p4 != 2'd1) ? 1'b1 : 1'b0);

assign icmp_fu_381_p2 = ((tmp_44_fu_371_p4 != 2'd1) ? 1'b1 : 1'b0);

assign input_0_address0 = tmp_65_cast_fu_470_p1;

assign m_3_fu_300_p2 = (m_reg_144 + 2'd1);

assign m_cast_fu_290_p1 = m_reg_144;

assign n_3_fu_406_p2 = (n_reg_167 + 2'd1);

assign n_cast_fu_396_p1 = n_reg_167;

assign notlhs_fu_461_p2 = ((n_cast_fu_396_p1 != tmp_37_reg_559) ? 1'b1 : 1'b0);

assign output_0_address0 = tmp_57_cast_fu_496_p1;

assign output_0_d0 = result_reg_660;

assign sel_tmp2_fu_482_p2 = (tmp7_fu_478_p2 & tmp6_fu_474_p2);

assign tmp4_cast_fu_345_p1 = $signed(tmp4_fu_339_p2);

assign tmp4_fu_339_p2 = ($signed(2'd3) + $signed(m_reg_144));

assign tmp5_cast_fu_427_p1 = $signed(tmp5_fu_421_p2);

assign tmp5_fu_421_p2 = ($signed(n_reg_167) + $signed(2'd3));

assign tmp6_fu_474_p2 = (icmp_reg_587 & notlhs_reg_620);

assign tmp7_fu_478_p2 = (tmp_30_reg_577 & icmp5_reg_610);

assign tmp_27_cast_fu_387_p1 = w_reg_120;

assign tmp_28_cast_fu_306_p1 = m_reg_144;

assign tmp_29_fu_327_p2 = (3'd0 - m_cast_fu_290_p1);

assign tmp_30_fu_333_p2 = ((h_reg_108 != tmp_29_fu_327_p2) ? 1'b1 : 1'b0);

assign tmp_31_fu_349_p2 = ($signed(tmp4_cast_fu_345_p1) + $signed(h_cast_reg_528));

assign tmp_32_cast_fu_354_p1 = $signed(tmp_31_fu_349_p2);

assign tmp_33_cast_fu_412_p1 = n_reg_167;

assign tmp_33_fu_315_p2 = tmp_41_fu_310_p2 << 11'd2;

assign tmp_34_fu_431_p2 = ($signed(w_cast_reg_546) + $signed(tmp5_cast_fu_427_p1));

assign tmp_35_fu_225_p2 = (tmp_51_cast_fu_221_p1 - tmp_cast_fu_205_p1);

assign tmp_36_cast_fu_452_p1 = $signed(tmp_34_fu_431_p2);

assign tmp_36_fu_255_p2 = (tmp_cast_26_fu_251_p1 + tmp_51_cast_reg_513);

assign tmp_37_fu_284_p2 = (3'd0 - w_reg_120);

assign tmp_38_fu_488_p3 = ((sel_tmp2_fu_482_p2[0:0] === 1'b1) ? input_0_q0 : 32'd0);

assign tmp_40_fu_391_p2 = (tmp_56_cast_reg_541 + tmp_27_cast_fu_387_p1);

assign tmp_41_fu_310_p2 = ($signed(tmp_28_cast_fu_306_p1) + $signed(tmp_53_cast_reg_518));

assign tmp_42_fu_321_p2 = (tmp_33_fu_315_p2 - tmp_41_fu_310_p2);

assign tmp_43_fu_358_p2 = ($signed(tmp_32_cast_fu_354_p1) + $signed(tmp_51_cast2_reg_508));

assign tmp_44_fu_371_p4 = {{tmp_31_fu_349_p2[3:2]}};

assign tmp_45_fu_416_p2 = (tmp_42_reg_572 + tmp_33_cast_fu_412_p1);

assign tmp_46_fu_436_p4 = {{tmp_34_fu_431_p2[3:2]}};

assign tmp_47_fu_456_p2 = ($signed(tmp_63_cast_reg_582) + $signed(tmp_36_cast_fu_452_p1));

assign tmp_51_cast2_fu_217_p1 = tmp_s_fu_209_p3;

assign tmp_51_cast_fu_221_p1 = tmp_s_fu_209_p3;

assign tmp_53_cast_fu_231_p1 = $signed(tmp_35_fu_225_p2);

assign tmp_56_cast_fu_260_p3 = {{tmp_36_fu_255_p2}, {2'd0}};

assign tmp_57_cast_fu_496_p1 = tmp_40_reg_592;

assign tmp_63_cast_fu_363_p3 = {{tmp_43_fu_358_p2}, {2'd0}};

assign tmp_64_cast_fu_466_p1 = tmp_45_reg_605;

assign tmp_65_cast_fu_470_p1 = tmp_47_reg_615;

assign tmp_cast_26_fu_251_p1 = h_reg_108;

assign tmp_cast_fu_205_p1 = co_reg_97;

assign tmp_fu_200_p1 = co_reg_97;

assign tmp_s_fu_209_p3 = {{co_reg_97}, {2'd0}};

assign w_3_fu_278_p2 = (w_reg_120 + 3'd1);

assign w_cast_fu_268_p1 = w_reg_120;

assign weight_address0 = tmp_64_cast_fu_466_p1;

always @ (posedge ap_clk) begin
    tmp_51_cast2_reg_508[1:0] <= 2'b00;
    tmp_51_cast2_reg_508[9] <= 1'b0;
    tmp_51_cast_reg_513[1:0] <= 2'b00;
    tmp_51_cast_reg_513[9] <= 1'b0;
    h_cast_reg_528[3] <= 1'b0;
    tmp_56_cast_reg_541[1:0] <= 2'b00;
    w_cast_reg_546[3] <= 1'b0;
    tmp_63_cast_reg_582[1:0] <= 2'b00;
end

endmodule //subconv_3x3_4_no_rel
