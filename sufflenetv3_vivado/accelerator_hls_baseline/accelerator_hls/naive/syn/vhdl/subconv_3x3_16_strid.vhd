-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_16_strid is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_0_ce0 : OUT STD_LOGIC;
    output_0_we0 : OUT STD_LOGIC;
    output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of subconv_3x3_16_strid is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_5_fu_197_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal co_5_reg_499 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_87_cast_fu_220_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_87_cast_reg_504 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond4_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_89_cast_fu_242_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_89_cast_reg_509 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_91_cast_fu_254_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_91_cast_reg_514 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_addr_reg_519 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_5_fu_264_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal h_5_reg_527 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_cast_36_fu_276_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_36_reg_532 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_95_cast_fu_289_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_95_cast_reg_538 : STD_LOGIC_VECTOR (12 downto 0);
    signal w_5_fu_303_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_5_reg_546 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_64_cast_fu_315_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_64_cast_reg_551 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_319_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_60_reg_556 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_5_fu_335_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_5_reg_564 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_74_fu_356_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_74_reg_569 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond1_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_103_cast_fu_386_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_103_cast_reg_574 : STD_LOGIC_VECTOR (14 downto 0);
    signal sel_tmp_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_579 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_fu_413_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_71_reg_584 : STD_LOGIC_VECTOR (12 downto 0);
    signal n_5_fu_428_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_5_reg_592 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_76_fu_438_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_76_reg_597 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_reg_602 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_fu_467_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_77_reg_607 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal weight_load_reg_622 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_64_fu_484_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_64_reg_627 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_reg_632 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_181_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal bias_load_reg_642 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal result_reg_647 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal co_reg_101 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_reg_112 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_123 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal sum_reg_135 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_147 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_170 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_104_cast_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_105_cast_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_97_cast_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_181_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_181_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_s_fu_212_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_66_fu_224_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_232_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_fu_208_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_67_fu_236_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_68_fu_246_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_62_fu_270_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_53_cast_fu_280_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_69_fu_284_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_70_fu_309_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_56_cast_fu_341_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_72_fu_345_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_73_fu_350_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp3_fu_362_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_368_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_57_fu_372_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_58_cast_fu_377_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_75_fu_381_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_cast8_cast_fu_325_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_63_fu_394_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_63_cast_fu_400_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_55_cast_fu_409_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_59_cast_fu_434_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_cast6_fu_418_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp4_fu_448_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp4_cast_fu_454_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_61_fu_458_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_62_cast_fu_463_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sel_tmp1_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);

    component ShuffleNetV2_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ShuffleNetV2_faddbkb_x_U66 : component ShuffleNetV2_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_181_p0,
        din1 => grp_fu_181_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_181_p2);

    ShuffleNetV2_fmulcud_x_U67 : component ShuffleNetV2_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_load_reg_622,
        din1 => tmp_64_reg_627,
        ce => ap_const_logic_1,
        dout => grp_fu_187_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_258_p2 = ap_const_lv1_1))) then 
                co_reg_101 <= co_5_reg_499;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_101 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    h_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_297_p2 = ap_const_lv1_1))) then 
                h_reg_112 <= h_5_reg_527;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_191_p2 = ap_const_lv1_0))) then 
                h_reg_112 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    m_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_422_p2))) then 
                m_reg_147 <= m_5_reg_564;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_297_p2))) then 
                m_reg_147 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_329_p2))) then 
                n_reg_170 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                n_reg_170 <= n_5_reg_592;
            end if; 
        end if;
    end process;

    sum_1_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_329_p2))) then 
                sum_1_reg_158 <= sum_reg_135;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                sum_1_reg_158 <= grp_fu_181_p2;
            end if; 
        end if;
    end process;

    sum_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_422_p2))) then 
                sum_reg_135 <= sum_1_reg_158;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_297_p2))) then 
                sum_reg_135 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_258_p2))) then 
                w_reg_123 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                w_reg_123 <= w_5_reg_546;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_191_p2 = ap_const_lv1_0))) then
                bias_addr_reg_519 <= tmp_fu_203_p1(6 - 1 downto 0);
                    tmp_87_cast_reg_504(9 downto 4) <= tmp_87_cast_fu_220_p1(9 downto 4);
                tmp_89_cast_reg_509 <= tmp_89_cast_fu_242_p1;
                    tmp_91_cast_reg_514(8 downto 3) <= tmp_91_cast_fu_254_p1(8 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                bias_load_reg_642 <= bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_5_reg_499 <= co_5_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_5_reg_527 <= h_5_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_5_reg_564 <= m_5_fu_335_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_5_reg_592 <= n_5_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond_fu_422_p2))) then
                p_not_reg_602 <= p_not_fu_443_p2;
                tmp_76_reg_597 <= tmp_76_fu_438_p2;
                tmp_77_reg_607 <= tmp_77_fu_467_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                result_reg_647 <= grp_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_329_p2))) then
                sel_tmp_reg_579 <= sel_tmp_fu_404_p2;
                    tmp_103_cast_reg_574(14 downto 4) <= tmp_103_cast_fu_386_p3(14 downto 4);
                tmp_74_reg_569 <= tmp_74_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_297_p2))) then
                    tmp_60_reg_556(4 downto 1) <= tmp_60_fu_319_p2(4 downto 1);
                    tmp_64_cast_reg_551(3 downto 1) <= tmp_64_cast_fu_315_p1(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_64_reg_627 <= tmp_64_fu_484_p3;
                weight_load_reg_622 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_65_reg_632 <= grp_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_329_p2 = ap_const_lv1_1))) then
                tmp_71_reg_584 <= tmp_71_fu_413_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_258_p2))) then
                    tmp_95_cast_reg_538(12 downto 3) <= tmp_95_cast_fu_289_p3(12 downto 3);
                    tmp_cast_36_reg_532(3 downto 1) <= tmp_cast_36_fu_276_p1(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                w_5_reg_546 <= w_5_fu_303_p2;
            end if;
        end if;
    end process;
    tmp_87_cast_reg_504(3 downto 0) <= "0000";
    tmp_87_cast_reg_504(10) <= '0';
    tmp_91_cast_reg_514(2 downto 0) <= "000";
    tmp_91_cast_reg_514(9) <= '0';
    tmp_cast_36_reg_532(0) <= '0';
    tmp_cast_36_reg_532(4) <= '0';
    tmp_95_cast_reg_538(2 downto 0) <= "000";
    tmp_64_cast_reg_551(0) <= '0';
    tmp_64_cast_reg_551(4) <= '0';
    tmp_60_reg_556(0) <= '0';
    tmp_103_cast_reg_574(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_191_p2, ap_CS_fsm_state3, exitcond3_fu_258_p2, ap_CS_fsm_state4, exitcond2_fu_297_p2, ap_CS_fsm_state5, exitcond1_fu_329_p2, ap_CS_fsm_state6, exitcond_fu_422_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_191_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_258_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_297_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_329_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_422_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_191_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_191_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_191_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_191_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_519;

    bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_5_fu_197_p2 <= std_logic_vector(unsigned(co_reg_101) + unsigned(ap_const_lv6_1));
    exitcond1_fu_329_p2 <= "1" when (m_reg_147 = ap_const_lv2_3) else "0";
    exitcond2_fu_297_p2 <= "1" when (w_reg_123 = ap_const_lv4_8) else "0";
    exitcond3_fu_258_p2 <= "1" when (h_reg_112 = ap_const_lv4_8) else "0";
    exitcond4_fu_191_p2 <= "1" when (co_reg_101 = ap_const_lv6_30) else "0";
    exitcond_fu_422_p2 <= "1" when (n_reg_170 = ap_const_lv2_3) else "0";

    grp_fu_181_p0_assign_proc : process(sum_reg_135, sum_1_reg_158, ap_CS_fsm_state13, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_181_p0 <= sum_reg_135;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_181_p0 <= sum_1_reg_158;
        else 
            grp_fu_181_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_181_p1_assign_proc : process(tmp_65_reg_632, bias_load_reg_642, ap_CS_fsm_state13, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_181_p1 <= bias_load_reg_642;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_181_p1 <= tmp_65_reg_632;
        else 
            grp_fu_181_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_5_fu_264_p2 <= std_logic_vector(unsigned(h_reg_112) + unsigned(ap_const_lv4_1));
    input_r_address0 <= tmp_105_cast_fu_476_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_5_fu_335_p2 <= std_logic_vector(unsigned(m_reg_147) + unsigned(ap_const_lv2_1));
    m_cast8_cast_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_147),3));
    n_5_fu_428_p2 <= std_logic_vector(unsigned(n_reg_170) + unsigned(ap_const_lv2_1));
    n_cast6_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_170),5));
    output_0_address0 <= tmp_97_cast_fu_492_p1(12 - 1 downto 0);

    output_0_ce0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            output_0_ce0 <= ap_const_logic_1;
        else 
            output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_d0 <= result_reg_647;

    output_0_we0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            output_0_we0 <= ap_const_logic_1;
        else 
            output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_not_fu_443_p2 <= "1" when (n_cast6_fu_418_p1 = tmp_60_reg_556) else "0";
    p_shl_cast_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_fu_224_p3),9));
    sel_tmp1_fu_480_p2 <= (sel_tmp_reg_579 or p_not_reg_602);
    sel_tmp_fu_404_p2 <= "1" when (tmp_cast_36_reg_532 = tmp_63_cast_fu_400_p1) else "0";
        tmp3_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_362_p2),5));

    tmp3_fu_362_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(m_reg_147));
        tmp4_cast_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_fu_448_p2),5));

    tmp4_fu_448_p2 <= std_logic_vector(unsigned(n_reg_170) + unsigned(ap_const_lv2_3));
    tmp_103_cast_fu_386_p3 <= (tmp_75_fu_381_p2 & ap_const_lv4_0);
    tmp_104_cast_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_76_reg_597),64));
    tmp_105_cast_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_77_reg_607),64));
    tmp_53_cast_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_112),10));
    tmp_55_cast_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_123),13));
    tmp_56_cast_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_147),10));
    tmp_57_fu_372_p2 <= std_logic_vector(signed(tmp3_cast_fu_368_p1) + signed(tmp_cast_36_reg_532));
        tmp_58_cast_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_57_fu_372_p2),11));

    tmp_59_cast_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_170),10));
    tmp_60_fu_319_p2 <= std_logic_vector(unsigned(ap_const_lv5_0) - unsigned(tmp_64_cast_fu_315_p1));
    tmp_61_fu_458_p2 <= std_logic_vector(unsigned(tmp_64_cast_reg_551) + unsigned(tmp4_cast_fu_454_p1));
        tmp_62_cast_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_61_fu_458_p2),15));

    tmp_62_fu_270_p2 <= std_logic_vector(shift_left(unsigned(h_reg_112),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
        tmp_63_cast_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_63_fu_394_p2),5));

    tmp_63_fu_394_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(m_cast8_cast_fu_325_p1));
    tmp_64_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_70_fu_309_p2),5));
    tmp_64_fu_484_p3 <= 
        ap_const_lv32_0 when (sel_tmp1_fu_480_p2(0) = '1') else 
        input_r_q0;
    tmp_66_fu_224_p3 <= (co_reg_101 & ap_const_lv2_0);
    tmp_67_fu_236_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_232_p1) - unsigned(tmp_cast_fu_208_p1));
    tmp_68_fu_246_p3 <= (co_reg_101 & ap_const_lv3_0);
    tmp_69_fu_284_p2 <= std_logic_vector(unsigned(tmp_91_cast_reg_514) + unsigned(tmp_53_cast_fu_280_p1));
    tmp_70_fu_309_p2 <= std_logic_vector(shift_left(unsigned(w_reg_123),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    tmp_71_fu_413_p2 <= std_logic_vector(unsigned(tmp_95_cast_reg_538) + unsigned(tmp_55_cast_fu_409_p1));
    tmp_72_fu_345_p2 <= std_logic_vector(unsigned(tmp_56_cast_fu_341_p1) + unsigned(tmp_89_cast_reg_509));
    tmp_73_fu_350_p2 <= std_logic_vector(shift_left(unsigned(tmp_72_fu_345_p2),to_integer(unsigned('0' & ap_const_lv10_2(10-1 downto 0)))));
    tmp_74_fu_356_p2 <= std_logic_vector(unsigned(tmp_73_fu_350_p2) - unsigned(tmp_72_fu_345_p2));
    tmp_75_fu_381_p2 <= std_logic_vector(signed(tmp_58_cast_fu_377_p1) + signed(tmp_87_cast_reg_504));
    tmp_76_fu_438_p2 <= std_logic_vector(unsigned(tmp_74_reg_569) + unsigned(tmp_59_cast_fu_434_p1));
    tmp_77_fu_467_p2 <= std_logic_vector(unsigned(tmp_103_cast_reg_574) + unsigned(tmp_62_cast_fu_463_p1));
    tmp_87_cast_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_212_p3),11));
        tmp_89_cast_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_67_fu_236_p2),10));

    tmp_91_cast_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_68_fu_246_p3),10));
    tmp_95_cast_fu_289_p3 <= (tmp_69_fu_284_p2 & ap_const_lv3_0);
    tmp_97_cast_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_71_reg_584),64));
    tmp_cast_36_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_fu_270_p2),5));
    tmp_cast_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_101),9));
    tmp_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_101),64));
    tmp_s_fu_212_p3 <= (co_reg_101 & ap_const_lv4_0);
    w_5_fu_303_p2 <= std_logic_vector(unsigned(w_reg_123) + unsigned(ap_const_lv4_1));
    weight_address0 <= tmp_104_cast_fu_472_p1(9 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
