-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_32_strid is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_0_ce0 : OUT STD_LOGIC;
    output_0_we0 : OUT STD_LOGIC;
    output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of subconv_3x3_32_strid is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_4_fu_195_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_4_reg_497 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_67_cast_fu_218_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_67_cast_reg_502 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond4_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_cast_fu_240_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_69_cast_reg_507 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_71_cast_fu_252_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_71_cast_reg_512 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_addr_reg_517 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_4_fu_262_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_4_reg_525 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_cast_31_fu_274_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_31_reg_530 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond3_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_75_cast_fu_287_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_75_cast_reg_536 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_4_fu_301_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_4_reg_544 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_48_cast_fu_313_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_48_cast_reg_549 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond2_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_317_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_47_reg_554 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_4_fu_333_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_4_reg_562 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_61_fu_354_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_61_reg_567 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond1_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_83_cast_fu_384_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_83_cast_reg_572 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_577 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_411_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_58_reg_582 : STD_LOGIC_VECTOR (13 downto 0);
    signal n_4_fu_426_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_4_reg_590 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_63_fu_436_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_63_reg_595 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_reg_600 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_fu_465_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_64_reg_605 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal weight_load_reg_620 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_51_fu_482_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_reg_625 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal bias_load_reg_640 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal result_reg_645 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal co_reg_99 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_110 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_121 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal sum_reg_133 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_145 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_168 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_84_cast_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_85_cast_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_77_cast_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_179_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_179_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_s_fu_210_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_49_fu_222_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_230_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_fu_206_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_fu_234_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_54_fu_244_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_55_fu_268_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_40_cast_fu_278_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_56_fu_282_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_57_fu_307_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_43_cast_fu_339_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_59_fu_343_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_60_fu_348_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp3_fu_360_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_366_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_44_fu_370_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_45_cast_fu_375_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_62_fu_379_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_cast8_cast_fu_323_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_50_fu_392_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_50_cast_fu_398_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_42_cast_fu_407_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_46_cast_fu_432_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_cast6_fu_416_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp4_fu_446_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp4_cast_fu_452_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_48_fu_456_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_49_cast_fu_461_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp1_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);

    component ShuffleNetV2_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ShuffleNetV2_faddbkb_x_U15 : component ShuffleNetV2_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_179_p0,
        din1 => grp_fu_179_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_179_p2);

    ShuffleNetV2_fmulcud_x_U16 : component ShuffleNetV2_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_load_reg_620,
        din1 => tmp_51_reg_625,
        ce => ap_const_logic_1,
        dout => grp_fu_185_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_256_p2 = ap_const_lv1_1))) then 
                co_reg_99 <= co_4_reg_497;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_99 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_295_p2 = ap_const_lv1_1))) then 
                h_reg_110 <= h_4_reg_525;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_189_p2 = ap_const_lv1_0))) then 
                h_reg_110 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    m_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_420_p2))) then 
                m_reg_145 <= m_4_reg_562;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_295_p2))) then 
                m_reg_145 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_327_p2))) then 
                n_reg_168 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                n_reg_168 <= n_4_reg_590;
            end if; 
        end if;
    end process;

    sum_1_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_327_p2))) then 
                sum_1_reg_156 <= sum_reg_133;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                sum_1_reg_156 <= grp_fu_179_p2;
            end if; 
        end if;
    end process;

    sum_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_420_p2))) then 
                sum_reg_133 <= sum_1_reg_156;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_295_p2))) then 
                sum_reg_133 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_256_p2))) then 
                w_reg_121 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                w_reg_121 <= w_4_reg_544;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_189_p2 = ap_const_lv1_0))) then
                bias_addr_reg_517 <= tmp_fu_201_p1(5 - 1 downto 0);
                    tmp_67_cast_reg_502(9 downto 5) <= tmp_67_cast_fu_218_p1(9 downto 5);
                tmp_69_cast_reg_507 <= tmp_69_cast_fu_240_p1;
                    tmp_71_cast_reg_512(8 downto 4) <= tmp_71_cast_fu_252_p1(8 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                bias_load_reg_640 <= bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_4_reg_497 <= co_4_fu_195_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_4_reg_525 <= h_4_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_4_reg_562 <= m_4_fu_333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_4_reg_590 <= n_4_fu_426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond_fu_420_p2))) then
                p_not_reg_600 <= p_not_fu_441_p2;
                tmp_63_reg_595 <= tmp_63_fu_436_p2;
                tmp_64_reg_605 <= tmp_64_fu_465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                result_reg_645 <= grp_fu_179_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_327_p2))) then
                sel_tmp_reg_577 <= sel_tmp_fu_402_p2;
                tmp_61_reg_567 <= tmp_61_fu_354_p2;
                    tmp_83_cast_reg_572(15 downto 5) <= tmp_83_cast_fu_384_p3(15 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_295_p2))) then
                    tmp_47_reg_554(5 downto 1) <= tmp_47_fu_317_p2(5 downto 1);
                    tmp_48_cast_reg_549(4 downto 1) <= tmp_48_cast_fu_313_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_51_reg_625 <= tmp_51_fu_482_p3;
                weight_load_reg_620 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_52_reg_630 <= grp_fu_185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_327_p2 = ap_const_lv1_1))) then
                tmp_58_reg_582 <= tmp_58_fu_411_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_256_p2))) then
                    tmp_75_cast_reg_536(13 downto 4) <= tmp_75_cast_fu_287_p3(13 downto 4);
                    tmp_cast_31_reg_530(4 downto 1) <= tmp_cast_31_fu_274_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                w_4_reg_544 <= w_4_fu_301_p2;
            end if;
        end if;
    end process;
    tmp_67_cast_reg_502(4 downto 0) <= "00000";
    tmp_67_cast_reg_502(10) <= '0';
    tmp_71_cast_reg_512(3 downto 0) <= "0000";
    tmp_71_cast_reg_512(9) <= '0';
    tmp_cast_31_reg_530(0) <= '0';
    tmp_cast_31_reg_530(5) <= '0';
    tmp_75_cast_reg_536(3 downto 0) <= "0000";
    tmp_48_cast_reg_549(0) <= '0';
    tmp_48_cast_reg_549(5) <= '0';
    tmp_47_reg_554(0) <= '0';
    tmp_83_cast_reg_572(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_189_p2, ap_CS_fsm_state3, exitcond3_fu_256_p2, ap_CS_fsm_state4, exitcond2_fu_295_p2, ap_CS_fsm_state5, exitcond1_fu_327_p2, ap_CS_fsm_state6, exitcond_fu_420_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_189_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_256_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_295_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_327_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_420_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_189_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_189_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_189_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_189_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_517;

    bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_4_fu_195_p2 <= std_logic_vector(unsigned(co_reg_99) + unsigned(ap_const_lv5_1));
    exitcond1_fu_327_p2 <= "1" when (m_reg_145 = ap_const_lv2_3) else "0";
    exitcond2_fu_295_p2 <= "1" when (w_reg_121 = ap_const_lv5_10) else "0";
    exitcond3_fu_256_p2 <= "1" when (h_reg_110 = ap_const_lv5_10) else "0";
    exitcond4_fu_189_p2 <= "1" when (co_reg_99 = ap_const_lv5_18) else "0";
    exitcond_fu_420_p2 <= "1" when (n_reg_168 = ap_const_lv2_3) else "0";

    grp_fu_179_p0_assign_proc : process(sum_reg_133, sum_1_reg_156, ap_CS_fsm_state13, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_179_p0 <= sum_reg_133;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_179_p0 <= sum_1_reg_156;
        else 
            grp_fu_179_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_179_p1_assign_proc : process(tmp_52_reg_630, bias_load_reg_640, ap_CS_fsm_state13, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_179_p1 <= bias_load_reg_640;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_179_p1 <= tmp_52_reg_630;
        else 
            grp_fu_179_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_4_fu_262_p2 <= std_logic_vector(unsigned(h_reg_110) + unsigned(ap_const_lv5_1));
    input_r_address0 <= tmp_85_cast_fu_474_p1(15 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_4_fu_333_p2 <= std_logic_vector(unsigned(m_reg_145) + unsigned(ap_const_lv2_1));
    m_cast8_cast_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_145),3));
    n_4_fu_426_p2 <= std_logic_vector(unsigned(n_reg_168) + unsigned(ap_const_lv2_1));
    n_cast6_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_168),6));
    output_0_address0 <= tmp_77_cast_fu_490_p1(13 - 1 downto 0);

    output_0_ce0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            output_0_ce0 <= ap_const_logic_1;
        else 
            output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_d0 <= result_reg_645;

    output_0_we0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            output_0_we0 <= ap_const_logic_1;
        else 
            output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_not_fu_441_p2 <= "1" when (n_cast6_fu_416_p1 = tmp_47_reg_554) else "0";
    p_shl_cast_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_222_p3),8));
    sel_tmp1_fu_478_p2 <= (sel_tmp_reg_577 or p_not_reg_600);
    sel_tmp_fu_402_p2 <= "1" when (tmp_cast_31_reg_530 = tmp_50_cast_fu_398_p1) else "0";
        tmp3_cast_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_360_p2),6));

    tmp3_fu_360_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(m_reg_145));
        tmp4_cast_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_fu_446_p2),6));

    tmp4_fu_446_p2 <= std_logic_vector(unsigned(n_reg_168) + unsigned(ap_const_lv2_3));
    tmp_40_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_110),10));
    tmp_42_cast_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_121),14));
    tmp_43_cast_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_145),9));
    tmp_44_fu_370_p2 <= std_logic_vector(signed(tmp3_cast_fu_366_p1) + signed(tmp_cast_31_reg_530));
        tmp_45_cast_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_44_fu_370_p2),11));

    tmp_46_cast_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_168),9));
    tmp_47_fu_317_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(tmp_48_cast_fu_313_p1));
    tmp_48_cast_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_307_p2),6));
    tmp_48_fu_456_p2 <= std_logic_vector(unsigned(tmp_48_cast_reg_549) + unsigned(tmp4_cast_fu_452_p1));
        tmp_49_cast_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_48_fu_456_p2),16));

    tmp_49_fu_222_p3 <= (co_reg_99 & ap_const_lv2_0);
        tmp_50_cast_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_50_fu_392_p2),6));

    tmp_50_fu_392_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(m_cast8_cast_fu_323_p1));
    tmp_51_fu_482_p3 <= 
        ap_const_lv32_0 when (sel_tmp1_fu_478_p2(0) = '1') else 
        input_r_q0;
    tmp_53_fu_234_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_230_p1) - unsigned(tmp_cast_fu_206_p1));
    tmp_54_fu_244_p3 <= (co_reg_99 & ap_const_lv4_0);
    tmp_55_fu_268_p2 <= std_logic_vector(shift_left(unsigned(h_reg_110),to_integer(unsigned('0' & ap_const_lv5_1(5-1 downto 0)))));
    tmp_56_fu_282_p2 <= std_logic_vector(unsigned(tmp_71_cast_reg_512) + unsigned(tmp_40_cast_fu_278_p1));
    tmp_57_fu_307_p2 <= std_logic_vector(shift_left(unsigned(w_reg_121),to_integer(unsigned('0' & ap_const_lv5_1(5-1 downto 0)))));
    tmp_58_fu_411_p2 <= std_logic_vector(unsigned(tmp_75_cast_reg_536) + unsigned(tmp_42_cast_fu_407_p1));
    tmp_59_fu_343_p2 <= std_logic_vector(unsigned(tmp_43_cast_fu_339_p1) + unsigned(tmp_69_cast_reg_507));
    tmp_60_fu_348_p2 <= std_logic_vector(shift_left(unsigned(tmp_59_fu_343_p2),to_integer(unsigned('0' & ap_const_lv9_2(9-1 downto 0)))));
    tmp_61_fu_354_p2 <= std_logic_vector(unsigned(tmp_60_fu_348_p2) - unsigned(tmp_59_fu_343_p2));
    tmp_62_fu_379_p2 <= std_logic_vector(signed(tmp_45_cast_fu_375_p1) + signed(tmp_67_cast_reg_502));
    tmp_63_fu_436_p2 <= std_logic_vector(unsigned(tmp_61_reg_567) + unsigned(tmp_46_cast_fu_432_p1));
    tmp_64_fu_465_p2 <= std_logic_vector(unsigned(tmp_83_cast_reg_572) + unsigned(tmp_49_cast_fu_461_p1));
    tmp_67_cast_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_210_p3),11));
        tmp_69_cast_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_53_fu_234_p2),9));

    tmp_71_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_244_p3),10));
    tmp_75_cast_fu_287_p3 <= (tmp_56_fu_282_p2 & ap_const_lv4_0);
    tmp_77_cast_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_reg_582),64));
    tmp_83_cast_fu_384_p3 <= (tmp_62_fu_379_p2 & ap_const_lv5_0);
    tmp_84_cast_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_reg_595),64));
    tmp_85_cast_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_reg_605),64));
    tmp_cast_31_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_268_p2),6));
    tmp_cast_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_99),8));
    tmp_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_99),64));
    tmp_s_fu_210_p3 <= (co_reg_99 & ap_const_lv5_0);
    w_4_fu_301_p2 <= std_logic_vector(unsigned(w_reg_121) + unsigned(ap_const_lv5_1));
    weight_address0 <= tmp_84_cast_fu_470_p1(8 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
