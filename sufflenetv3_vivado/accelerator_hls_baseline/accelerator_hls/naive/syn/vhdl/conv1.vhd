-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_output_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv1_output_ce0 : OUT STD_LOGIC;
    conv1_output_we0 : OUT STD_LOGIC;
    conv1_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_17_fu_240_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_17_reg_674 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_271_cast_fu_273_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_271_cast_reg_679 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond5_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_273_cast_fu_285_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_273_cast_reg_684 : STD_LOGIC_VECTOR (10 downto 0);
    signal bias_addr_reg_689 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_cast_fu_289_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_cast_reg_694 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal h_17_fu_299_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_17_reg_702 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_276_cast_fu_314_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_276_cast_reg_707 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond4_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_cast_fu_322_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal w_cast_reg_712 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal w_17_fu_332_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_17_reg_720 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_103_fu_338_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_103_reg_725 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond3_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ci_8_fu_350_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ci_8_reg_733 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_279_cast_fu_368_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_279_cast_reg_738 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond2_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_171_fu_393_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_171_reg_743 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_168_fu_403_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_168_reg_748 : STD_LOGIC_VECTOR (15 downto 0);
    signal m_7_fu_418_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_7_reg_756 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_173_fu_449_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_173_reg_761 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond1_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_108_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_108_reg_766 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_288_cast_fu_495_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_288_cast_reg_771 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_776 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_7_fu_529_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_7_reg_784 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_175_fu_539_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_175_reg_789 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp5_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp5_reg_794 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_176_fu_579_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_176_reg_799 : STD_LOGIC_VECTOR (12 downto 0);
    signal notlhs_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_804 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal weight_load_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_115_fu_611_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_115_reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_116_reg_829 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal bias_load_reg_839 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal result_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_39_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_reg_851 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal co_reg_115 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_126 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_reg_138 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal sum_reg_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal ci_reg_162 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_173 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_reg_185 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_2_reg_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_208 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_289_cast_fu_589_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_290_cast_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_277_cast_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_219_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_s_fu_255_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_263_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_fu_251_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_165_fu_267_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_166_fu_277_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_73_fu_305_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_167_fu_309_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_169_fu_360_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_105_cast_fu_356_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_170_fu_372_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_99_fu_381_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_280_cast_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_104_cast_fu_399_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_106_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_172_fu_428_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_101_fu_437_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_441_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_100_fu_433_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_cast8_cast_fu_408_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_107_fu_455_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_107_cast_fu_461_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_fu_471_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_cast_fu_477_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_109_fu_481_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_110_cast_fu_486_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_174_fu_490_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_102_fu_503_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_111_cast_fu_535_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_fu_544_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_550_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_112_fu_554_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_104_fu_559_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_114_cast_fu_575_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal n_cast6_fu_519_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp4_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_to_int_fu_619_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_622_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_98_fu_632_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);

    component ShuffleNetV2_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fmulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ShuffleNetV2_fcmpdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    ShuffleNetV2_faddbkb_U1 : component ShuffleNetV2_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_219_p0,
        din1 => grp_fu_219_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_219_p2);

    ShuffleNetV2_fmulcud_U2 : component ShuffleNetV2_fmulcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weight_load_reg_819,
        din1 => tmp_115_reg_824,
        ce => ap_const_logic_1,
        dout => grp_fu_225_p2);

    ShuffleNetV2_fcmpdEe_U3 : component ShuffleNetV2_fcmpdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => result_reg_844,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_39_fu_229_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ci_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond1_fu_412_p2))) then 
                ci_reg_162 <= ci_8_reg_733;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_326_p2))) then 
                ci_reg_162 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    co_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_293_p2 = ap_const_lv1_1))) then 
                co_reg_115 <= co_17_reg_674;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_115 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_326_p2 = ap_const_lv1_1))) then 
                h_reg_126 <= h_17_reg_702;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_234_p2 = ap_const_lv1_0))) then 
                h_reg_126 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    m_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_523_p2))) then 
                m_reg_185 <= m_7_reg_756;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_344_p2))) then 
                m_reg_185 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond1_fu_412_p2))) then 
                n_reg_208 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                n_reg_208 <= n_7_reg_784;
            end if; 
        end if;
    end process;

    sum_1_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_523_p2))) then 
                sum_1_reg_173 <= sum_2_reg_196;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_344_p2))) then 
                sum_1_reg_173 <= sum_reg_150;
            end if; 
        end if;
    end process;

    sum_2_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond1_fu_412_p2))) then 
                sum_2_reg_196 <= sum_1_reg_173;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                sum_2_reg_196 <= grp_fu_219_p2;
            end if; 
        end if;
    end process;

    sum_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond1_fu_412_p2))) then 
                sum_reg_150 <= sum_1_reg_173;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_326_p2))) then 
                sum_reg_150 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond4_fu_293_p2))) then 
                w_reg_138 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                w_reg_138 <= w_17_reg_720;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_234_p2 = ap_const_lv1_0))) then
                bias_addr_reg_689 <= tmp_fu_246_p1(5 - 1 downto 0);
                tmp_271_cast_reg_679 <= tmp_271_cast_fu_273_p1;
                    tmp_273_cast_reg_684(9 downto 5) <= tmp_273_cast_fu_285_p1(9 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                bias_load_reg_839 <= bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                ci_8_reg_733 <= ci_8_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_17_reg_674 <= co_17_fu_240_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_17_reg_702 <= h_17_fu_299_p2;
                    h_cast_reg_694(5 downto 0) <= h_cast_fu_289_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond_fu_523_p2))) then
                icmp5_reg_794 <= icmp5_fu_569_p2;
                notlhs_reg_804 <= notlhs_fu_584_p2;
                tmp_175_reg_789 <= tmp_175_fu_539_p2;
                tmp_176_reg_799 <= tmp_176_fu_579_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond1_fu_412_p2))) then
                icmp_reg_776 <= icmp_fu_513_p2;
                tmp_108_reg_766 <= tmp_108_fu_465_p2;
                tmp_173_reg_761 <= tmp_173_fu_449_p2;
                    tmp_288_cast_reg_771(12 downto 5) <= tmp_288_cast_fu_495_p3(12 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                m_7_reg_756 <= m_7_fu_418_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                n_7_reg_784 <= n_7_fu_529_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                result_reg_844 <= grp_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_326_p2))) then
                tmp_103_reg_725 <= tmp_103_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_115_reg_824 <= tmp_115_fu_611_p3;
                weight_load_reg_819 <= weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_116_reg_829 <= grp_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_344_p2 = ap_const_lv1_1))) then
                tmp_168_reg_748 <= tmp_168_fu_403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_344_p2))) then
                tmp_171_reg_743 <= tmp_171_fu_393_p2;
                    tmp_279_cast_reg_738(6 downto 5) <= tmp_279_cast_fu_368_p1(6 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond4_fu_293_p2))) then
                    tmp_276_cast_reg_707(15 downto 5) <= tmp_276_cast_fu_314_p3(15 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp_39_reg_851 <= tmp_39_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                w_17_reg_720 <= w_17_fu_332_p2;
                    w_cast_reg_712(5 downto 0) <= w_cast_fu_322_p1(5 downto 0);
            end if;
        end if;
    end process;
    tmp_273_cast_reg_684(4 downto 0) <= "00000";
    tmp_273_cast_reg_684(10) <= '0';
    h_cast_reg_694(6) <= '0';
    tmp_276_cast_reg_707(4 downto 0) <= "00000";
    w_cast_reg_712(6) <= '0';
    tmp_279_cast_reg_738(4 downto 0) <= "00000";
    tmp_279_cast_reg_738(7) <= '0';
    tmp_288_cast_reg_771(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_234_p2, ap_CS_fsm_state3, exitcond4_fu_293_p2, ap_CS_fsm_state4, exitcond3_fu_326_p2, ap_CS_fsm_state5, exitcond2_fu_344_p2, ap_CS_fsm_state6, exitcond1_fu_412_p2, ap_CS_fsm_state7, exitcond_fu_523_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_234_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_293_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_326_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_344_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond1_fu_412_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_523_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_234_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_234_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_234_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_234_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_689;

    bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ci_8_fu_350_p2 <= std_logic_vector(unsigned(ci_reg_162) + unsigned(ap_const_lv2_1));
    co_17_fu_240_p2 <= std_logic_vector(unsigned(co_reg_115) + unsigned(ap_const_lv5_1));
    conv1_output_address0 <= tmp_277_cast_fu_667_p1(15 - 1 downto 0);

    conv1_output_ce0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            conv1_output_ce0 <= ap_const_logic_1;
        else 
            conv1_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_output_d0 <= 
        result_reg_844 when (tmp_40_fu_654_p2(0) = '1') else 
        ap_const_lv32_0;

    conv1_output_we0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            conv1_output_we0 <= ap_const_logic_1;
        else 
            conv1_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_412_p2 <= "1" when (m_reg_185 = ap_const_lv2_3) else "0";
    exitcond2_fu_344_p2 <= "1" when (ci_reg_162 = ap_const_lv2_3) else "0";
    exitcond3_fu_326_p2 <= "1" when (w_reg_138 = ap_const_lv6_20) else "0";
    exitcond4_fu_293_p2 <= "1" when (h_reg_126 = ap_const_lv6_20) else "0";
    exitcond5_fu_234_p2 <= "1" when (co_reg_115 = ap_const_lv5_18) else "0";
    exitcond_fu_523_p2 <= "1" when (n_reg_208 = ap_const_lv2_3) else "0";

    grp_fu_219_p0_assign_proc : process(sum_reg_150, sum_2_reg_196, ap_CS_fsm_state14, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_219_p0 <= sum_reg_150;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_219_p0 <= sum_2_reg_196;
        else 
            grp_fu_219_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_219_p1_assign_proc : process(tmp_116_reg_829, bias_load_reg_839, ap_CS_fsm_state14, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_219_p1 <= bias_load_reg_839;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_219_p1 <= tmp_116_reg_829;
        else 
            grp_fu_219_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_17_fu_299_p2 <= std_logic_vector(unsigned(h_reg_126) + unsigned(ap_const_lv6_1));
    h_cast_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_126),7));
    icmp5_fu_569_p2 <= "0" when (tmp_104_fu_559_p4 = ap_const_lv2_1) else "1";
    icmp_fu_513_p2 <= "0" when (tmp_102_fu_503_p4 = ap_const_lv2_1) else "1";
    input_r_address0 <= tmp_290_cast_fu_593_p1(12 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_7_fu_418_p2 <= std_logic_vector(unsigned(m_reg_185) + unsigned(ap_const_lv2_1));
    m_cast8_cast_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_185),3));
    n_7_fu_529_p2 <= std_logic_vector(unsigned(n_reg_208) + unsigned(ap_const_lv2_1));
    n_cast6_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_208),6));
    notlhs1_fu_636_p2 <= "0" when (tmp_36_fu_622_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_584_p2 <= "0" when (n_cast6_fu_519_p1 = tmp_103_reg_725) else "1";
    notrhs1_fu_642_p2 <= "1" when (tmp_98_fu_632_p1 = ap_const_lv23_0) else "0";
        p_shl1_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_99_fu_381_p3),64));

    p_shl2_cast_fu_441_p3 <= (tmp_101_fu_437_p1 & ap_const_lv2_0);
    p_shl_cast_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_255_p3),8));
    result_to_int_fu_619_p1 <= result_reg_844;
    sel_tmp2_fu_605_p2 <= (tmp4_fu_601_p2 and tmp3_fu_597_p2);
        tmp1_cast_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_471_p2),7));

    tmp1_fu_471_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(m_reg_185));
        tmp2_cast_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_544_p2),7));

    tmp2_fu_544_p2 <= std_logic_vector(unsigned(n_reg_208) + unsigned(ap_const_lv2_3));
    tmp3_fu_597_p2 <= (icmp_reg_776 and notlhs_reg_804);
    tmp4_fu_601_p2 <= (tmp_108_reg_766 and icmp5_reg_794);
    tmp_100_fu_433_p1 <= tmp_172_fu_428_p2(11 - 1 downto 0);
    tmp_101_fu_437_p1 <= tmp_172_fu_428_p2(9 - 1 downto 0);
    tmp_102_fu_503_p4 <= tmp_109_fu_481_p2(6 downto 5);
    tmp_103_fu_338_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(w_reg_138));
    tmp_104_cast_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_138),16));
    tmp_104_fu_559_p4 <= tmp_112_fu_554_p2(6 downto 5);
    tmp_105_cast_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_162),9));
    tmp_106_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_185),64));
        tmp_107_cast_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_107_fu_455_p2),6));

    tmp_107_fu_455_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(m_cast8_cast_fu_408_p1));
    tmp_108_fu_465_p2 <= "0" when (h_reg_126 = tmp_107_cast_fu_461_p1) else "1";
    tmp_109_fu_481_p2 <= std_logic_vector(signed(tmp1_cast_fu_477_p1) + signed(h_cast_reg_694));
        tmp_110_cast_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_109_fu_481_p2),8));

    tmp_111_cast_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_208),11));
    tmp_112_fu_554_p2 <= std_logic_vector(unsigned(w_cast_reg_712) + unsigned(tmp2_cast_fu_550_p1));
        tmp_114_cast_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_112_fu_554_p2),13));

    tmp_115_fu_611_p3 <= 
        input_r_q0 when (sel_tmp2_fu_605_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_165_fu_267_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_263_p1) - unsigned(tmp_cast_fu_251_p1));
    tmp_166_fu_277_p3 <= (co_reg_115 & ap_const_lv5_0);
    tmp_167_fu_309_p2 <= std_logic_vector(unsigned(tmp_cast_73_fu_305_p1) + unsigned(tmp_273_cast_reg_684));
    tmp_168_fu_403_p2 <= std_logic_vector(unsigned(tmp_276_cast_reg_707) + unsigned(tmp_104_cast_fu_399_p1));
    tmp_169_fu_360_p3 <= (ci_reg_162 & ap_const_lv5_0);
    tmp_170_fu_372_p2 <= std_logic_vector(unsigned(tmp_105_cast_fu_356_p1) + unsigned(tmp_271_cast_reg_679));
    tmp_171_fu_393_p2 <= std_logic_vector(signed(p_shl1_fu_389_p1) - signed(tmp_280_cast_fu_377_p1));
    tmp_172_fu_428_p2 <= std_logic_vector(unsigned(tmp_106_fu_424_p1) + unsigned(tmp_171_reg_743));
    tmp_173_fu_449_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_441_p3) - unsigned(tmp_100_fu_433_p1));
    tmp_174_fu_490_p2 <= std_logic_vector(signed(tmp_110_cast_fu_486_p1) + signed(tmp_279_cast_reg_738));
    tmp_175_fu_539_p2 <= std_logic_vector(unsigned(tmp_173_reg_761) + unsigned(tmp_111_cast_fu_535_p1));
    tmp_176_fu_579_p2 <= std_logic_vector(unsigned(tmp_288_cast_reg_771) + unsigned(tmp_114_cast_fu_575_p1));
        tmp_271_cast_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_165_fu_267_p2),9));

    tmp_273_cast_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_166_fu_277_p3),11));
    tmp_276_cast_fu_314_p3 <= (tmp_167_fu_309_p2 & ap_const_lv5_0);
    tmp_277_cast_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_168_reg_748),64));
    tmp_279_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_169_fu_360_p3),8));
        tmp_280_cast_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_170_fu_372_p2),64));

    tmp_288_cast_fu_495_p3 <= (tmp_174_fu_490_p2 & ap_const_lv5_0);
    tmp_289_cast_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_175_reg_789),64));
    tmp_290_cast_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_176_reg_799),64));
    tmp_36_fu_622_p4 <= result_to_int_fu_619_p1(30 downto 23);
    tmp_38_fu_648_p2 <= (notrhs1_fu_642_p2 or notlhs1_fu_636_p2);
    tmp_40_fu_654_p2 <= (tmp_38_fu_648_p2 and tmp_39_reg_851);
    tmp_98_fu_632_p1 <= result_to_int_fu_619_p1(23 - 1 downto 0);
    tmp_99_fu_381_p3 <= (tmp_170_fu_372_p2 & ap_const_lv2_0);
    tmp_cast_73_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_126),11));
    tmp_cast_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_115),8));
    tmp_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_115),64));
    tmp_s_fu_255_p3 <= (co_reg_115 & ap_const_lv2_0);
    w_17_fu_332_p2 <= std_logic_vector(unsigned(w_reg_138) + unsigned(ap_const_lv6_1));
    w_cast_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_138),7));
    weight_address0 <= tmp_289_cast_fu_589_p1(10 - 1 downto 0);

    weight_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
