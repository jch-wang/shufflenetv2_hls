-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ShuffleUnit0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_weight_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv1_weight_ce0 : OUT STD_LOGIC;
    conv1_weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1_bias_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    conv1_bias_ce0 : OUT STD_LOGIC;
    conv1_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_weight_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    conv2_weight_ce0 : OUT STD_LOGIC;
    conv2_weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2_bias_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    conv2_bias_ce0 : OUT STD_LOGIC;
    conv2_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv3_weight_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv3_weight_ce0 : OUT STD_LOGIC;
    conv3_weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv3_bias_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    conv3_bias_ce0 : OUT STD_LOGIC;
    conv3_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ShuffleUnit0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvarinc7_fu_431_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvarinc7_reg_818 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal indvarinc11_fu_437_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvarinc11_reg_823 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal indvarinc15_fu_443_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal indvarinc22_fu_482_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvarinc22_reg_842 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal indvarinc26_fu_488_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvarinc26_reg_847 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal indvarinc_fu_494_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal indvarinc27_fu_533_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvarinc27_reg_866 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal indvarinc28_fu_539_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvarinc28_reg_871 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal indvarinc29_fu_545_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal indvarinc30_fu_584_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvarinc30_reg_890 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal indvarinc31_fu_590_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvarinc31_reg_895 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal indvarinc32_fu_596_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal indvarinc33_fu_635_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvarinc33_reg_914 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal indvarinc34_fu_641_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvarinc34_reg_919 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal indvarinc35_fu_647_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal co_21_fu_696_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_21_reg_941 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_349_cast_fu_716_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_349_cast_reg_946 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond2_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_351_cast_fu_728_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_351_cast_reg_951 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_21_fu_738_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_21_reg_959 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_354_cast_fu_757_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_354_cast_reg_964 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond1_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_357_cast_fu_778_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_357_cast_reg_969 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_21_fu_788_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_21_reg_977 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal exitcond_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_359_cast_fu_813_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_359_cast_reg_987 : STD_LOGIC_VECTOR (63 downto 0);
    signal left_part_0_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal left_part_0_ce0 : STD_LOGIC;
    signal left_part_0_we0 : STD_LOGIC;
    signal left_part_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_part_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_part_0_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal right_part_0_ce0 : STD_LOGIC;
    signal right_part_0_we0 : STD_LOGIC;
    signal right_part_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_part_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_output_0_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal conv1_output_0_ce0 : STD_LOGIC;
    signal conv1_output_0_we0 : STD_LOGIC;
    signal conv1_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_output_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_output_0_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal conv2_output_0_ce0 : STD_LOGIC;
    signal conv2_output_0_we0 : STD_LOGIC;
    signal conv2_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_output_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_output_0_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal conv3_output_0_ce0 : STD_LOGIC;
    signal conv3_output_0_we0 : STD_LOGIC;
    signal conv3_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_output_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_subconv_3x3_16_no_re_fu_401_ap_start : STD_LOGIC;
    signal grp_subconv_3x3_16_no_re_fu_401_ap_done : STD_LOGIC;
    signal grp_subconv_3x3_16_no_re_fu_401_ap_idle : STD_LOGIC;
    signal grp_subconv_3x3_16_no_re_fu_401_ap_ready : STD_LOGIC;
    signal grp_subconv_3x3_16_no_re_fu_401_input_0_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_subconv_3x3_16_no_re_fu_401_input_0_ce0 : STD_LOGIC;
    signal grp_subconv_3x3_16_no_re_fu_401_weight_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_subconv_3x3_16_no_re_fu_401_weight_ce0 : STD_LOGIC;
    signal grp_subconv_3x3_16_no_re_fu_401_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_subconv_3x3_16_no_re_fu_401_bias_ce0 : STD_LOGIC;
    signal grp_subconv_3x3_16_no_re_fu_401_output_0_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_subconv_3x3_16_no_re_fu_401_output_0_ce0 : STD_LOGIC;
    signal grp_subconv_3x3_16_no_re_fu_401_output_0_we0 : STD_LOGIC;
    signal grp_subconv_3x3_16_no_re_fu_401_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_subconv_1x1_1612_fu_411_ap_start : STD_LOGIC;
    signal grp_subconv_1x1_1612_fu_411_ap_done : STD_LOGIC;
    signal grp_subconv_1x1_1612_fu_411_ap_idle : STD_LOGIC;
    signal grp_subconv_1x1_1612_fu_411_ap_ready : STD_LOGIC;
    signal grp_subconv_1x1_1612_fu_411_input_0_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_subconv_1x1_1612_fu_411_input_0_ce0 : STD_LOGIC;
    signal grp_subconv_1x1_1612_fu_411_input_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_subconv_1x1_1612_fu_411_weight_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_subconv_1x1_1612_fu_411_weight_ce0 : STD_LOGIC;
    signal grp_subconv_1x1_1612_fu_411_weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_subconv_1x1_1612_fu_411_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_subconv_1x1_1612_fu_411_bias_ce0 : STD_LOGIC;
    signal grp_subconv_1x1_1612_fu_411_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_subconv_1x1_1612_fu_411_output_0_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_subconv_1x1_1612_fu_411_output_0_ce0 : STD_LOGIC;
    signal grp_subconv_1x1_1612_fu_411_output_0_we0 : STD_LOGIC;
    signal grp_subconv_1x1_1612_fu_411_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_shuffle_2415_fu_423_ap_start : STD_LOGIC;
    signal grp_shuffle_2415_fu_423_ap_done : STD_LOGIC;
    signal grp_shuffle_2415_fu_423_ap_idle : STD_LOGIC;
    signal grp_shuffle_2415_fu_423_ap_ready : STD_LOGIC;
    signal grp_shuffle_2415_fu_423_left_0_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_shuffle_2415_fu_423_left_0_ce0 : STD_LOGIC;
    signal grp_shuffle_2415_fu_423_right_0_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_shuffle_2415_fu_423_right_0_ce0 : STD_LOGIC;
    signal grp_shuffle_2415_fu_423_output_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_shuffle_2415_fu_423_output_r_ce0 : STD_LOGIC;
    signal grp_shuffle_2415_fu_423_output_r_we0 : STD_LOGIC;
    signal grp_shuffle_2415_fu_423_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar6_reg_193 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_154_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_153_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar10_reg_205 : STD_LOGIC_VECTOR (3 downto 0);
    signal invdar14_reg_217 : STD_LOGIC_VECTOR (3 downto 0);
    signal invdar21_reg_228 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_157_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_155_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_156_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar25_reg_240 : STD_LOGIC_VECTOR (3 downto 0);
    signal invdar_reg_252 : STD_LOGIC_VECTOR (3 downto 0);
    signal invdar26_reg_263 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_160_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_158_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_159_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar27_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal invdar28_reg_287 : STD_LOGIC_VECTOR (3 downto 0);
    signal invdar29_reg_298 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_163_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_161_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_162_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar30_reg_310 : STD_LOGIC_VECTOR (3 downto 0);
    signal invdar31_reg_322 : STD_LOGIC_VECTOR (3 downto 0);
    signal invdar32_reg_333 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_169_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_165_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_166_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar33_reg_345 : STD_LOGIC_VECTOR (3 downto 0);
    signal invdar34_reg_357 : STD_LOGIC_VECTOR (3 downto 0);
    signal co_reg_368 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_379 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_390 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_reg_grp_subconv_3x3_16_no_re_fu_401_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_reg_grp_subconv_1x1_1612_fu_411_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_reg_grp_shuffle_2415_fu_423_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp_202_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_203_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_204_fu_561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_205_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_206_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_358_cast_fu_803_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_449_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_115_fu_500_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_116_fu_551_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_117_fu_602_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_118_fu_653_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal co_cast_fu_686_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_164_fu_702_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_207_fu_708_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_208_fu_720_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_167_cast_fu_748_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_209_fu_752_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_167_cast1_fu_744_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_210_fu_765_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_119_fu_770_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_168_cast_fu_794_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_211_fu_798_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_212_fu_808_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);

    component subconv_3x3_16_no_re IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weight_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weight_ce0 : OUT STD_LOGIC;
        weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_0_ce0 : OUT STD_LOGIC;
        output_0_we0 : OUT STD_LOGIC;
        output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component subconv_1x1_1612 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weight_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        weight_ce0 : OUT STD_LOGIC;
        weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_0_ce0 : OUT STD_LOGIC;
        output_0_we0 : OUT STD_LOGIC;
        output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component shuffle_2415 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        left_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        left_0_ce0 : OUT STD_LOGIC;
        left_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        right_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        right_0_ce0 : OUT STD_LOGIC;
        right_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DownsampleUnit0_cfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    left_part_0_U : component DownsampleUnit0_cfYi
    generic map (
        DataWidth => 32,
        AddressRange => 6144,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => left_part_0_address0,
        ce0 => left_part_0_ce0,
        we0 => left_part_0_we0,
        d0 => left_part_0_d0,
        q0 => left_part_0_q0);

    right_part_0_U : component DownsampleUnit0_cfYi
    generic map (
        DataWidth => 32,
        AddressRange => 6144,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => right_part_0_address0,
        ce0 => right_part_0_ce0,
        we0 => right_part_0_we0,
        d0 => right_part_0_d0,
        q0 => right_part_0_q0);

    conv1_output_0_U : component DownsampleUnit0_cfYi
    generic map (
        DataWidth => 32,
        AddressRange => 6144,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv1_output_0_address0,
        ce0 => conv1_output_0_ce0,
        we0 => conv1_output_0_we0,
        d0 => conv1_output_0_d0,
        q0 => conv1_output_0_q0);

    conv2_output_0_U : component DownsampleUnit0_cfYi
    generic map (
        DataWidth => 32,
        AddressRange => 6144,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2_output_0_address0,
        ce0 => conv2_output_0_ce0,
        we0 => conv2_output_0_we0,
        d0 => conv2_output_0_d0,
        q0 => conv2_output_0_q0);

    conv3_output_0_U : component DownsampleUnit0_cfYi
    generic map (
        DataWidth => 32,
        AddressRange => 6144,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv3_output_0_address0,
        ce0 => conv3_output_0_ce0,
        we0 => conv3_output_0_we0,
        d0 => conv3_output_0_d0,
        q0 => conv3_output_0_q0);

    grp_subconv_3x3_16_no_re_fu_401 : component subconv_3x3_16_no_re
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_subconv_3x3_16_no_re_fu_401_ap_start,
        ap_done => grp_subconv_3x3_16_no_re_fu_401_ap_done,
        ap_idle => grp_subconv_3x3_16_no_re_fu_401_ap_idle,
        ap_ready => grp_subconv_3x3_16_no_re_fu_401_ap_ready,
        input_0_address0 => grp_subconv_3x3_16_no_re_fu_401_input_0_address0,
        input_0_ce0 => grp_subconv_3x3_16_no_re_fu_401_input_0_ce0,
        input_0_q0 => conv1_output_0_q0,
        weight_address0 => grp_subconv_3x3_16_no_re_fu_401_weight_address0,
        weight_ce0 => grp_subconv_3x3_16_no_re_fu_401_weight_ce0,
        weight_q0 => conv2_weight_q0,
        bias_address0 => grp_subconv_3x3_16_no_re_fu_401_bias_address0,
        bias_ce0 => grp_subconv_3x3_16_no_re_fu_401_bias_ce0,
        bias_q0 => conv2_bias_q0,
        output_0_address0 => grp_subconv_3x3_16_no_re_fu_401_output_0_address0,
        output_0_ce0 => grp_subconv_3x3_16_no_re_fu_401_output_0_ce0,
        output_0_we0 => grp_subconv_3x3_16_no_re_fu_401_output_0_we0,
        output_0_d0 => grp_subconv_3x3_16_no_re_fu_401_output_0_d0);

    grp_subconv_1x1_1612_fu_411 : component subconv_1x1_1612
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_subconv_1x1_1612_fu_411_ap_start,
        ap_done => grp_subconv_1x1_1612_fu_411_ap_done,
        ap_idle => grp_subconv_1x1_1612_fu_411_ap_idle,
        ap_ready => grp_subconv_1x1_1612_fu_411_ap_ready,
        input_0_address0 => grp_subconv_1x1_1612_fu_411_input_0_address0,
        input_0_ce0 => grp_subconv_1x1_1612_fu_411_input_0_ce0,
        input_0_q0 => grp_subconv_1x1_1612_fu_411_input_0_q0,
        weight_address0 => grp_subconv_1x1_1612_fu_411_weight_address0,
        weight_ce0 => grp_subconv_1x1_1612_fu_411_weight_ce0,
        weight_q0 => grp_subconv_1x1_1612_fu_411_weight_q0,
        bias_address0 => grp_subconv_1x1_1612_fu_411_bias_address0,
        bias_ce0 => grp_subconv_1x1_1612_fu_411_bias_ce0,
        bias_q0 => grp_subconv_1x1_1612_fu_411_bias_q0,
        output_0_address0 => grp_subconv_1x1_1612_fu_411_output_0_address0,
        output_0_ce0 => grp_subconv_1x1_1612_fu_411_output_0_ce0,
        output_0_we0 => grp_subconv_1x1_1612_fu_411_output_0_we0,
        output_0_d0 => grp_subconv_1x1_1612_fu_411_output_0_d0);

    grp_shuffle_2415_fu_423 : component shuffle_2415
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shuffle_2415_fu_423_ap_start,
        ap_done => grp_shuffle_2415_fu_423_ap_done,
        ap_idle => grp_shuffle_2415_fu_423_ap_idle,
        ap_ready => grp_shuffle_2415_fu_423_ap_ready,
        left_0_address0 => grp_shuffle_2415_fu_423_left_0_address0,
        left_0_ce0 => grp_shuffle_2415_fu_423_left_0_ce0,
        left_0_q0 => left_part_0_q0,
        right_0_address0 => grp_shuffle_2415_fu_423_right_0_address0,
        right_0_ce0 => grp_shuffle_2415_fu_423_right_0_ce0,
        right_0_q0 => conv3_output_0_q0,
        output_r_address0 => grp_shuffle_2415_fu_423_output_r_address0,
        output_r_ce0 => grp_shuffle_2415_fu_423_output_r_ce0,
        output_r_we0 => grp_shuffle_2415_fu_423_output_r_we0,
        output_r_d0 => grp_shuffle_2415_fu_423_output_r_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_shuffle_2415_fu_423_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_shuffle_2415_fu_423_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    ap_reg_grp_shuffle_2415_fu_423_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_shuffle_2415_fu_423_ap_ready)) then 
                    ap_reg_grp_shuffle_2415_fu_423_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_subconv_1x1_1612_fu_411_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_subconv_1x1_1612_fu_411_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond2_fu_690_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                    ap_reg_grp_subconv_1x1_1612_fu_411_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_subconv_1x1_1612_fu_411_ap_ready)) then 
                    ap_reg_grp_subconv_1x1_1612_fu_411_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_subconv_3x3_16_no_re_fu_401_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_subconv_3x3_16_no_re_fu_401_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_reg_grp_subconv_3x3_16_no_re_fu_401_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_subconv_3x3_16_no_re_fu_401_ap_ready)) then 
                    ap_reg_grp_subconv_3x3_16_no_re_fu_401_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    co_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = tmp_165_fu_668_p2) and (ap_const_lv1_1 = tmp_166_fu_674_p2) and (ap_const_lv1_1 = tmp_169_fu_680_p2))) then 
                co_reg_368 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond1_fu_732_p2 = ap_const_lv1_1))) then 
                co_reg_368 <= co_21_reg_941;
            end if; 
        end if;
    end process;

    h_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond_fu_782_p2 = ap_const_lv1_1))) then 
                h_reg_379 <= h_21_reg_959;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond2_fu_690_p2 = ap_const_lv1_0))) then 
                h_reg_379 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    invdar10_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_s_fu_464_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = tmp_153_fu_470_p2))) then 
                invdar10_reg_205 <= indvarinc11_reg_823;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                invdar10_reg_205 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    invdar14_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = tmp_s_fu_464_p2))) then 
                invdar14_reg_217 <= indvarinc15_fu_443_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                invdar14_reg_217 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    invdar21_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_s_fu_464_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_153_fu_470_p2) and (tmp_154_fu_476_p2 = ap_const_lv1_1))) then 
                invdar21_reg_228 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_157_fu_527_p2) and (ap_const_lv1_1 = tmp_155_fu_515_p2) and (ap_const_lv1_1 = tmp_156_fu_521_p2))) then 
                invdar21_reg_228 <= indvarinc22_reg_842;
            end if; 
        end if;
    end process;

    invdar25_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = tmp_155_fu_515_p2) and (ap_const_lv1_0 = tmp_156_fu_521_p2))) then 
                invdar25_reg_240 <= indvarinc26_reg_847;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                invdar25_reg_240 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    invdar26_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = tmp_155_fu_515_p2) and (ap_const_lv1_1 = tmp_156_fu_521_p2) and (ap_const_lv1_1 = tmp_157_fu_527_p2))) then 
                invdar26_reg_263 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = tmp_160_fu_578_p2) and (ap_const_lv1_1 = tmp_158_fu_566_p2) and (ap_const_lv1_1 = tmp_159_fu_572_p2))) then 
                invdar26_reg_263 <= indvarinc27_reg_866;
            end if; 
        end if;
    end process;

    invdar27_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = tmp_158_fu_566_p2) and (ap_const_lv1_0 = tmp_159_fu_572_p2))) then 
                invdar27_reg_275 <= indvarinc28_reg_871;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                invdar27_reg_275 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    invdar28_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = tmp_158_fu_566_p2))) then 
                invdar28_reg_287 <= indvarinc29_fu_545_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                invdar28_reg_287 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    invdar29_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = tmp_158_fu_566_p2) and (ap_const_lv1_1 = tmp_159_fu_572_p2) and (ap_const_lv1_1 = tmp_160_fu_578_p2))) then 
                invdar29_reg_298 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_163_fu_629_p2) and (ap_const_lv1_1 = tmp_161_fu_617_p2) and (ap_const_lv1_1 = tmp_162_fu_623_p2))) then 
                invdar29_reg_298 <= indvarinc30_reg_890;
            end if; 
        end if;
    end process;

    invdar30_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = tmp_161_fu_617_p2) and (ap_const_lv1_0 = tmp_162_fu_623_p2))) then 
                invdar30_reg_310 <= indvarinc31_reg_895;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                invdar30_reg_310 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    invdar31_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_161_fu_617_p2))) then 
                invdar31_reg_322 <= indvarinc32_fu_596_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                invdar31_reg_322 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    invdar32_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = tmp_161_fu_617_p2) and (ap_const_lv1_1 = tmp_162_fu_623_p2) and (ap_const_lv1_1 = tmp_163_fu_629_p2))) then 
                invdar32_reg_333 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = tmp_169_fu_680_p2) and (ap_const_lv1_1 = tmp_165_fu_668_p2) and (ap_const_lv1_1 = tmp_166_fu_674_p2))) then 
                invdar32_reg_333 <= indvarinc33_reg_914;
            end if; 
        end if;
    end process;

    invdar33_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = tmp_165_fu_668_p2) and (ap_const_lv1_0 = tmp_166_fu_674_p2))) then 
                invdar33_reg_345 <= indvarinc34_reg_919;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                invdar33_reg_345 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    invdar34_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = tmp_165_fu_668_p2))) then 
                invdar34_reg_357 <= indvarinc35_fu_647_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                invdar34_reg_357 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    invdar6_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = tmp_154_fu_476_p2) and (tmp_s_fu_464_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_153_fu_470_p2))) then 
                invdar6_reg_193 <= indvarinc7_reg_818;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                invdar6_reg_193 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    invdar_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_155_fu_515_p2))) then 
                invdar_reg_252 <= indvarinc_fu_494_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                invdar_reg_252 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_0 = exitcond1_fu_732_p2))) then 
                w_reg_390 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                w_reg_390 <= w_21_reg_977;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                co_21_reg_941 <= co_21_fu_696_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                h_21_reg_959 <= h_21_fu_738_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                indvarinc11_reg_823 <= indvarinc11_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                indvarinc22_reg_842 <= indvarinc22_fu_482_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                indvarinc26_reg_847 <= indvarinc26_fu_488_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                indvarinc27_reg_866 <= indvarinc27_fu_533_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                indvarinc28_reg_871 <= indvarinc28_fu_539_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                indvarinc30_reg_890 <= indvarinc30_fu_584_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                indvarinc31_reg_895 <= indvarinc31_fu_590_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                indvarinc33_reg_914 <= indvarinc33_fu_635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                indvarinc34_reg_919 <= indvarinc34_fu_641_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                indvarinc7_reg_818 <= indvarinc7_fu_431_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond2_fu_690_p2 = ap_const_lv1_0))) then
                    tmp_349_cast_reg_946(9 downto 4) <= tmp_349_cast_fu_716_p1(9 downto 4);
                    tmp_351_cast_reg_951(8 downto 4) <= tmp_351_cast_fu_728_p1(8 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_0 = exitcond1_fu_732_p2))) then
                    tmp_354_cast_reg_964(14 downto 4) <= tmp_354_cast_fu_757_p3(14 downto 4);
                    tmp_357_cast_reg_969(13 downto 4) <= tmp_357_cast_fu_778_p1(13 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_lv1_0 = exitcond_fu_782_p2))) then
                    tmp_359_cast_reg_987(14 downto 0) <= tmp_359_cast_fu_813_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                w_21_reg_977 <= w_21_fu_788_p2;
            end if;
        end if;
    end process;
    tmp_349_cast_reg_946(3 downto 0) <= "0000";
    tmp_349_cast_reg_946(10) <= '0';
    tmp_351_cast_reg_951(3 downto 0) <= "0000";
    tmp_351_cast_reg_951(9) <= '0';
    tmp_354_cast_reg_964(3 downto 0) <= "0000";
    tmp_357_cast_reg_969(3 downto 0) <= "0000";
    tmp_357_cast_reg_969(14) <= '0';
    tmp_359_cast_reg_987(63 downto 15) <= "0000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state17, exitcond2_fu_690_p2, ap_CS_fsm_state18, exitcond1_fu_732_p2, ap_CS_fsm_state19, exitcond_fu_782_p2, grp_subconv_3x3_16_no_re_fu_401_ap_done, grp_subconv_1x1_1612_fu_411_ap_done, grp_shuffle_2415_fu_423_ap_done, tmp_154_fu_476_p2, tmp_s_fu_464_p2, tmp_153_fu_470_p2, tmp_157_fu_527_p2, tmp_155_fu_515_p2, tmp_156_fu_521_p2, tmp_160_fu_578_p2, tmp_158_fu_566_p2, tmp_159_fu_572_p2, tmp_163_fu_629_p2, tmp_161_fu_617_p2, tmp_162_fu_623_p2, tmp_169_fu_680_p2, tmp_165_fu_668_p2, tmp_166_fu_674_p2, ap_CS_fsm_state23, ap_CS_fsm_state21, ap_CS_fsm_state25, ap_CS_fsm_state27)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_s_fu_464_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_153_fu_470_p2) and (tmp_154_fu_476_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = tmp_154_fu_476_p2) and (tmp_s_fu_464_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_153_fu_470_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_s_fu_464_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = tmp_153_fu_470_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = tmp_155_fu_515_p2) and (ap_const_lv1_1 = tmp_156_fu_521_p2) and (ap_const_lv1_1 = tmp_157_fu_527_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_157_fu_527_p2) and (ap_const_lv1_1 = tmp_155_fu_515_p2) and (ap_const_lv1_1 = tmp_156_fu_521_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = tmp_155_fu_515_p2) and (ap_const_lv1_0 = tmp_156_fu_521_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = tmp_158_fu_566_p2) and (ap_const_lv1_1 = tmp_159_fu_572_p2) and (ap_const_lv1_1 = tmp_160_fu_578_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = tmp_160_fu_578_p2) and (ap_const_lv1_1 = tmp_158_fu_566_p2) and (ap_const_lv1_1 = tmp_159_fu_572_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = tmp_158_fu_566_p2) and (ap_const_lv1_0 = tmp_159_fu_572_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = tmp_161_fu_617_p2) and (ap_const_lv1_1 = tmp_162_fu_623_p2) and (ap_const_lv1_1 = tmp_163_fu_629_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_163_fu_629_p2) and (ap_const_lv1_1 = tmp_161_fu_617_p2) and (ap_const_lv1_1 = tmp_162_fu_623_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = tmp_161_fu_617_p2) and (ap_const_lv1_0 = tmp_162_fu_623_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = tmp_165_fu_668_p2) and (ap_const_lv1_1 = tmp_166_fu_674_p2) and (ap_const_lv1_1 = tmp_169_fu_680_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = tmp_169_fu_680_p2) and (ap_const_lv1_1 = tmp_165_fu_668_p2) and (ap_const_lv1_1 = tmp_166_fu_674_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = tmp_165_fu_668_p2) and (ap_const_lv1_0 = tmp_166_fu_674_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond2_fu_690_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond1_fu_732_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond_fu_782_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_subconv_1x1_1612_fu_411_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (grp_subconv_3x3_16_no_re_fu_401_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (grp_subconv_1x1_1612_fu_411_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (grp_shuffle_2415_fu_423_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_shuffle_2415_fu_423_ap_done, ap_CS_fsm_state27)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (grp_shuffle_2415_fu_423_ap_done = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_shuffle_2415_fu_423_ap_done, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (grp_shuffle_2415_fu_423_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    co_21_fu_696_p2 <= std_logic_vector(unsigned(co_reg_368) + unsigned(ap_const_lv5_1));
    co_cast_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_368),6));
    conv1_bias_address0 <= grp_subconv_1x1_1612_fu_411_bias_address0;

    conv1_bias_ce0_assign_proc : process(grp_subconv_1x1_1612_fu_411_bias_ce0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv1_bias_ce0 <= grp_subconv_1x1_1612_fu_411_bias_ce0;
        else 
            conv1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_output_0_address0_assign_proc : process(ap_CS_fsm_state10, grp_subconv_3x3_16_no_re_fu_401_input_0_address0, grp_subconv_1x1_1612_fu_411_output_0_address0, ap_CS_fsm_state23, ap_CS_fsm_state21, tmp_204_fu_561_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv1_output_0_address0 <= tmp_204_fu_561_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv1_output_0_address0 <= grp_subconv_1x1_1612_fu_411_output_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv1_output_0_address0 <= grp_subconv_3x3_16_no_re_fu_401_input_0_address0;
        else 
            conv1_output_0_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    conv1_output_0_ce0_assign_proc : process(ap_CS_fsm_state10, grp_subconv_3x3_16_no_re_fu_401_input_0_ce0, grp_subconv_1x1_1612_fu_411_output_0_ce0, ap_CS_fsm_state23, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv1_output_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv1_output_0_ce0 <= grp_subconv_1x1_1612_fu_411_output_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv1_output_0_ce0 <= grp_subconv_3x3_16_no_re_fu_401_input_0_ce0;
        else 
            conv1_output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_output_0_d0_assign_proc : process(ap_CS_fsm_state10, grp_subconv_1x1_1612_fu_411_output_0_d0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv1_output_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv1_output_0_d0 <= grp_subconv_1x1_1612_fu_411_output_0_d0;
        else 
            conv1_output_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv1_output_0_we0_assign_proc : process(ap_CS_fsm_state10, grp_subconv_1x1_1612_fu_411_output_0_we0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv1_output_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv1_output_0_we0 <= grp_subconv_1x1_1612_fu_411_output_0_we0;
        else 
            conv1_output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_weight_address0 <= grp_subconv_1x1_1612_fu_411_weight_address0;

    conv1_weight_ce0_assign_proc : process(grp_subconv_1x1_1612_fu_411_weight_ce0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv1_weight_ce0 <= grp_subconv_1x1_1612_fu_411_weight_ce0;
        else 
            conv1_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_bias_address0 <= grp_subconv_3x3_16_no_re_fu_401_bias_address0;
    conv2_bias_ce0 <= grp_subconv_3x3_16_no_re_fu_401_bias_ce0;

    conv2_output_0_address0_assign_proc : process(ap_CS_fsm_state13, grp_subconv_3x3_16_no_re_fu_401_output_0_address0, grp_subconv_1x1_1612_fu_411_input_0_address0, ap_CS_fsm_state23, ap_CS_fsm_state25, tmp_205_fu_612_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv2_output_0_address0 <= tmp_205_fu_612_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv2_output_0_address0 <= grp_subconv_1x1_1612_fu_411_input_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv2_output_0_address0 <= grp_subconv_3x3_16_no_re_fu_401_output_0_address0;
        else 
            conv2_output_0_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    conv2_output_0_ce0_assign_proc : process(ap_CS_fsm_state13, grp_subconv_3x3_16_no_re_fu_401_output_0_ce0, grp_subconv_1x1_1612_fu_411_input_0_ce0, ap_CS_fsm_state23, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv2_output_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv2_output_0_ce0 <= grp_subconv_1x1_1612_fu_411_input_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv2_output_0_ce0 <= grp_subconv_3x3_16_no_re_fu_401_output_0_ce0;
        else 
            conv2_output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_output_0_d0_assign_proc : process(ap_CS_fsm_state13, grp_subconv_3x3_16_no_re_fu_401_output_0_d0, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv2_output_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv2_output_0_d0 <= grp_subconv_3x3_16_no_re_fu_401_output_0_d0;
        else 
            conv2_output_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv2_output_0_we0_assign_proc : process(ap_CS_fsm_state13, grp_subconv_3x3_16_no_re_fu_401_output_0_we0, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv2_output_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv2_output_0_we0 <= grp_subconv_3x3_16_no_re_fu_401_output_0_we0;
        else 
            conv2_output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_weight_address0 <= grp_subconv_3x3_16_no_re_fu_401_weight_address0;
    conv2_weight_ce0 <= grp_subconv_3x3_16_no_re_fu_401_weight_ce0;
    conv3_bias_address0 <= grp_subconv_1x1_1612_fu_411_bias_address0;

    conv3_bias_ce0_assign_proc : process(grp_subconv_1x1_1612_fu_411_bias_ce0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv3_bias_ce0 <= grp_subconv_1x1_1612_fu_411_bias_ce0;
        else 
            conv3_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv3_output_0_address0_assign_proc : process(ap_CS_fsm_state16, grp_subconv_1x1_1612_fu_411_output_0_address0, grp_shuffle_2415_fu_423_right_0_address0, ap_CS_fsm_state25, ap_CS_fsm_state27, tmp_206_fu_663_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv3_output_0_address0 <= tmp_206_fu_663_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            conv3_output_0_address0 <= grp_shuffle_2415_fu_423_right_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv3_output_0_address0 <= grp_subconv_1x1_1612_fu_411_output_0_address0;
        else 
            conv3_output_0_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    conv3_output_0_ce0_assign_proc : process(ap_CS_fsm_state16, grp_subconv_1x1_1612_fu_411_output_0_ce0, grp_shuffle_2415_fu_423_right_0_ce0, ap_CS_fsm_state25, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv3_output_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            conv3_output_0_ce0 <= grp_shuffle_2415_fu_423_right_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv3_output_0_ce0 <= grp_subconv_1x1_1612_fu_411_output_0_ce0;
        else 
            conv3_output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv3_output_0_d0_assign_proc : process(ap_CS_fsm_state16, grp_subconv_1x1_1612_fu_411_output_0_d0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv3_output_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv3_output_0_d0 <= grp_subconv_1x1_1612_fu_411_output_0_d0;
        else 
            conv3_output_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv3_output_0_we0_assign_proc : process(ap_CS_fsm_state16, grp_subconv_1x1_1612_fu_411_output_0_we0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv3_output_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv3_output_0_we0 <= grp_subconv_1x1_1612_fu_411_output_0_we0;
        else 
            conv3_output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv3_weight_address0 <= grp_subconv_1x1_1612_fu_411_weight_address0;

    conv3_weight_ce0_assign_proc : process(grp_subconv_1x1_1612_fu_411_weight_ce0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv3_weight_ce0 <= grp_subconv_1x1_1612_fu_411_weight_ce0;
        else 
            conv3_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_732_p2 <= "1" when (h_reg_379 = ap_const_lv5_10) else "0";
    exitcond2_fu_690_p2 <= "1" when (co_reg_368 = ap_const_lv5_18) else "0";
    exitcond_fu_782_p2 <= "1" when (w_reg_390 = ap_const_lv5_10) else "0";
    grp_shuffle_2415_fu_423_ap_start <= ap_reg_grp_shuffle_2415_fu_423_ap_start;
    grp_subconv_1x1_1612_fu_411_ap_start <= ap_reg_grp_subconv_1x1_1612_fu_411_ap_start;

    grp_subconv_1x1_1612_fu_411_bias_q0_assign_proc : process(conv1_bias_q0, conv3_bias_q0, ap_CS_fsm_state21, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_subconv_1x1_1612_fu_411_bias_q0 <= conv3_bias_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_subconv_1x1_1612_fu_411_bias_q0 <= conv1_bias_q0;
        else 
            grp_subconv_1x1_1612_fu_411_bias_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_subconv_1x1_1612_fu_411_input_0_q0_assign_proc : process(right_part_0_q0, conv2_output_0_q0, ap_CS_fsm_state21, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_subconv_1x1_1612_fu_411_input_0_q0 <= conv2_output_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_subconv_1x1_1612_fu_411_input_0_q0 <= right_part_0_q0;
        else 
            grp_subconv_1x1_1612_fu_411_input_0_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_subconv_1x1_1612_fu_411_weight_q0_assign_proc : process(conv1_weight_q0, conv3_weight_q0, ap_CS_fsm_state21, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_subconv_1x1_1612_fu_411_weight_q0 <= conv3_weight_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_subconv_1x1_1612_fu_411_weight_q0 <= conv1_weight_q0;
        else 
            grp_subconv_1x1_1612_fu_411_weight_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_subconv_3x3_16_no_re_fu_401_ap_start <= ap_reg_grp_subconv_3x3_16_no_re_fu_401_ap_start;
    h_21_fu_738_p2 <= std_logic_vector(unsigned(h_reg_379) + unsigned(ap_const_lv5_1));
    indvarinc11_fu_437_p2 <= std_logic_vector(unsigned(invdar10_reg_205) + unsigned(ap_const_lv4_1));
    indvarinc15_fu_443_p2 <= std_logic_vector(unsigned(invdar14_reg_217) + unsigned(ap_const_lv4_1));
    indvarinc22_fu_482_p2 <= std_logic_vector(unsigned(invdar21_reg_228) + unsigned(ap_const_lv5_1));
    indvarinc26_fu_488_p2 <= std_logic_vector(unsigned(invdar25_reg_240) + unsigned(ap_const_lv4_1));
    indvarinc27_fu_533_p2 <= std_logic_vector(unsigned(invdar26_reg_263) + unsigned(ap_const_lv5_1));
    indvarinc28_fu_539_p2 <= std_logic_vector(unsigned(invdar27_reg_275) + unsigned(ap_const_lv4_1));
    indvarinc29_fu_545_p2 <= std_logic_vector(unsigned(invdar28_reg_287) + unsigned(ap_const_lv4_1));
    indvarinc30_fu_584_p2 <= std_logic_vector(unsigned(invdar29_reg_298) + unsigned(ap_const_lv5_1));
    indvarinc31_fu_590_p2 <= std_logic_vector(unsigned(invdar30_reg_310) + unsigned(ap_const_lv4_1));
    indvarinc32_fu_596_p2 <= std_logic_vector(unsigned(invdar31_reg_322) + unsigned(ap_const_lv4_1));
    indvarinc33_fu_635_p2 <= std_logic_vector(unsigned(invdar32_reg_333) + unsigned(ap_const_lv5_1));
    indvarinc34_fu_641_p2 <= std_logic_vector(unsigned(invdar33_reg_345) + unsigned(ap_const_lv4_1));
    indvarinc35_fu_647_p2 <= std_logic_vector(unsigned(invdar34_reg_357) + unsigned(ap_const_lv4_1));
    indvarinc7_fu_431_p2 <= std_logic_vector(unsigned(invdar6_reg_193) + unsigned(ap_const_lv5_1));
    indvarinc_fu_494_p2 <= std_logic_vector(unsigned(invdar_reg_252) + unsigned(ap_const_lv4_1));
    input_r_address0 <= tmp_358_cast_fu_803_p1(14 - 1 downto 0);
    input_r_address1 <= tmp_359_cast_fu_813_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    left_part_0_address0_assign_proc : process(ap_CS_fsm_state4, tmp_359_cast_reg_987, grp_shuffle_2415_fu_423_left_0_address0, ap_CS_fsm_state20, ap_CS_fsm_state27, tmp_202_fu_459_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            left_part_0_address0 <= tmp_359_cast_reg_987(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            left_part_0_address0 <= tmp_202_fu_459_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            left_part_0_address0 <= grp_shuffle_2415_fu_423_left_0_address0;
        else 
            left_part_0_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    left_part_0_ce0_assign_proc : process(ap_CS_fsm_state4, grp_shuffle_2415_fu_423_left_0_ce0, ap_CS_fsm_state20, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            left_part_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            left_part_0_ce0 <= grp_shuffle_2415_fu_423_left_0_ce0;
        else 
            left_part_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    left_part_0_d0_assign_proc : process(input_r_q1, ap_CS_fsm_state4, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            left_part_0_d0 <= input_r_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            left_part_0_d0 <= ap_const_lv32_0;
        else 
            left_part_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    left_part_0_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            left_part_0_we0 <= ap_const_logic_1;
        else 
            left_part_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_address0 <= grp_shuffle_2415_fu_423_output_r_address0;
    output_r_ce0 <= grp_shuffle_2415_fu_423_output_r_ce0;
    output_r_d0 <= grp_shuffle_2415_fu_423_output_r_d0;
    output_r_we0 <= grp_shuffle_2415_fu_423_output_r_we0;

    right_part_0_address0_assign_proc : process(ap_CS_fsm_state7, tmp_359_cast_reg_987, grp_subconv_1x1_1612_fu_411_input_0_address0, ap_CS_fsm_state20, ap_CS_fsm_state21, tmp_203_fu_510_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            right_part_0_address0 <= tmp_359_cast_reg_987(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            right_part_0_address0 <= tmp_203_fu_510_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            right_part_0_address0 <= grp_subconv_1x1_1612_fu_411_input_0_address0;
        else 
            right_part_0_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    right_part_0_ce0_assign_proc : process(ap_CS_fsm_state7, grp_subconv_1x1_1612_fu_411_input_0_ce0, ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            right_part_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            right_part_0_ce0 <= grp_subconv_1x1_1612_fu_411_input_0_ce0;
        else 
            right_part_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    right_part_0_d0_assign_proc : process(input_r_q0, ap_CS_fsm_state7, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            right_part_0_d0 <= input_r_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            right_part_0_d0 <= ap_const_lv32_0;
        else 
            right_part_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    right_part_0_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            right_part_0_we0 <= ap_const_logic_1;
        else 
            right_part_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_115_fu_500_p4 <= ((invdar21_reg_228 & invdar25_reg_240) & invdar_reg_252);
    tmp_116_fu_551_p4 <= ((invdar26_reg_263 & invdar27_reg_275) & invdar28_reg_287);
    tmp_117_fu_602_p4 <= ((invdar29_reg_298 & invdar30_reg_310) & invdar31_reg_322);
    tmp_118_fu_653_p4 <= ((invdar32_reg_333 & invdar33_reg_345) & invdar34_reg_357);
    tmp_119_fu_770_p3 <= (tmp_210_fu_765_p2 & ap_const_lv4_0);
    tmp_153_fu_470_p2 <= "1" when (invdar10_reg_205 = ap_const_lv4_F) else "0";
    tmp_154_fu_476_p2 <= "1" when (invdar6_reg_193 = ap_const_lv5_17) else "0";
    tmp_155_fu_515_p2 <= "1" when (invdar_reg_252 = ap_const_lv4_F) else "0";
    tmp_156_fu_521_p2 <= "1" when (invdar25_reg_240 = ap_const_lv4_F) else "0";
    tmp_157_fu_527_p2 <= "1" when (invdar21_reg_228 = ap_const_lv5_17) else "0";
    tmp_158_fu_566_p2 <= "1" when (invdar28_reg_287 = ap_const_lv4_F) else "0";
    tmp_159_fu_572_p2 <= "1" when (invdar27_reg_275 = ap_const_lv4_F) else "0";
    tmp_160_fu_578_p2 <= "1" when (invdar26_reg_263 = ap_const_lv5_17) else "0";
    tmp_161_fu_617_p2 <= "1" when (invdar31_reg_322 = ap_const_lv4_F) else "0";
    tmp_162_fu_623_p2 <= "1" when (invdar30_reg_310 = ap_const_lv4_F) else "0";
    tmp_163_fu_629_p2 <= "1" when (invdar29_reg_298 = ap_const_lv5_17) else "0";
    tmp_164_fu_702_p2 <= std_logic_vector(unsigned(co_cast_fu_686_p1) + unsigned(ap_const_lv6_18));
    tmp_165_fu_668_p2 <= "1" when (invdar34_reg_357 = ap_const_lv4_F) else "0";
    tmp_166_fu_674_p2 <= "1" when (invdar33_reg_345 = ap_const_lv4_F) else "0";
    tmp_167_cast1_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_379),10));
    tmp_167_cast_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_379),11));
    tmp_168_cast_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_390),15));
    tmp_169_fu_680_p2 <= "1" when (invdar32_reg_333 = ap_const_lv5_17) else "0";
    tmp_202_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_449_p4),64));
    tmp_203_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_115_fu_500_p4),64));
    tmp_204_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_fu_551_p4),64));
    tmp_205_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_117_fu_602_p4),64));
    tmp_206_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_118_fu_653_p4),64));
    tmp_207_fu_708_p3 <= (tmp_164_fu_702_p2 & ap_const_lv4_0);
    tmp_208_fu_720_p3 <= (co_reg_368 & ap_const_lv4_0);
    tmp_209_fu_752_p2 <= std_logic_vector(unsigned(tmp_349_cast_reg_946) + unsigned(tmp_167_cast_fu_748_p1));
    tmp_210_fu_765_p2 <= std_logic_vector(unsigned(tmp_351_cast_reg_951) + unsigned(tmp_167_cast1_fu_744_p1));
    tmp_211_fu_798_p2 <= std_logic_vector(unsigned(tmp_354_cast_reg_964) + unsigned(tmp_168_cast_fu_794_p1));
    tmp_212_fu_808_p2 <= std_logic_vector(unsigned(tmp_357_cast_reg_969) + unsigned(tmp_168_cast_fu_794_p1));
    tmp_349_cast_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_207_fu_708_p3),11));
    tmp_351_cast_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_208_fu_720_p3),10));
    tmp_354_cast_fu_757_p3 <= (tmp_209_fu_752_p2 & ap_const_lv4_0);
    tmp_357_cast_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_119_fu_770_p3),15));
    tmp_358_cast_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_211_fu_798_p2),64));
    tmp_359_cast_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_212_fu_808_p2),64));
    tmp_fu_449_p4 <= ((invdar6_reg_193 & invdar10_reg_205) & invdar14_reg_217);
    tmp_s_fu_464_p2 <= "1" when (invdar14_reg_217 = ap_const_lv4_F) else "0";
    w_21_fu_788_p2 <= std_logic_vector(unsigned(w_reg_390) + unsigned(ap_const_lv5_1));
end behav;
