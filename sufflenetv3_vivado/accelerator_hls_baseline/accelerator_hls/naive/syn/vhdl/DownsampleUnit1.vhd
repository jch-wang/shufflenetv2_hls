-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DownsampleUnit1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv1r_weight_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1r_weight_ce0 : OUT STD_LOGIC;
    conv1r_weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1r_bias_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    conv1r_bias_ce0 : OUT STD_LOGIC;
    conv1r_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2r_weight_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    conv2r_weight_ce0 : OUT STD_LOGIC;
    conv2r_weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2r_bias_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    conv2r_bias_ce0 : OUT STD_LOGIC;
    conv2r_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv3r_weight_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv3r_weight_ce0 : OUT STD_LOGIC;
    conv3r_weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv3r_bias_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    conv3r_bias_ce0 : OUT STD_LOGIC;
    conv3r_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1l_weight_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    conv1l_weight_ce0 : OUT STD_LOGIC;
    conv1l_weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv1l_bias_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    conv1l_bias_ce0 : OUT STD_LOGIC;
    conv1l_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2l_weight_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv2l_weight_ce0 : OUT STD_LOGIC;
    conv2l_weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv2l_bias_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    conv2l_bias_ce0 : OUT STD_LOGIC;
    conv2l_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    shuffleunit0_2_outpu_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    shuffleunit0_2_outpu_ce0 : OUT STD_LOGIC;
    shuffleunit0_2_outpu_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    downsampleunit1_outp_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    downsampleunit1_outp_ce0 : OUT STD_LOGIC;
    downsampleunit1_outp_we0 : OUT STD_LOGIC;
    downsampleunit1_outp_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of DownsampleUnit1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvarinc4_fu_379_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvarinc4_reg_634 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal indvarinc8_fu_385_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvarinc8_reg_639 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal indvarinc12_fu_391_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal indvarinc19_fu_430_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvarinc19_reg_658 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal indvarinc23_fu_436_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvarinc23_reg_663 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal indvarinc28_fu_442_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal indvarinc35_fu_481_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvarinc35_reg_682 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal indvarinc39_fu_487_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvarinc39_reg_687 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal indvarinc_fu_493_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal indvarinc43_fu_532_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvarinc43_reg_706 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal indvarinc44_fu_538_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvarinc44_reg_711 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal indvarinc45_fu_544_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal indvarinc46_fu_583_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvarinc46_reg_730 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal indvarinc47_fu_589_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvarinc47_reg_735 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal indvarinc48_fu_595_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal conv1r_output_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv1r_output_ce0 : STD_LOGIC;
    signal conv1r_output_we0 : STD_LOGIC;
    signal conv1r_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1r_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2r_ourput_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv2r_ourput_0_ce0 : STD_LOGIC;
    signal conv2r_ourput_0_we0 : STD_LOGIC;
    signal conv2r_ourput_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2r_ourput_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3r_ourput_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv3r_ourput_0_ce0 : STD_LOGIC;
    signal conv3r_ourput_0_we0 : STD_LOGIC;
    signal conv3r_ourput_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3r_ourput_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1l_output_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv1l_output_0_ce0 : STD_LOGIC;
    signal conv1l_output_0_we0 : STD_LOGIC;
    signal conv1l_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1l_output_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2l_output_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv2l_output_0_ce0 : STD_LOGIC;
    signal conv2l_output_0_we0 : STD_LOGIC;
    signal conv2l_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2l_output_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_subconv_1x1_16p16_fu_335_ap_start : STD_LOGIC;
    signal grp_subconv_1x1_16p16_fu_335_ap_done : STD_LOGIC;
    signal grp_subconv_1x1_16p16_fu_335_ap_idle : STD_LOGIC;
    signal grp_subconv_1x1_16p16_fu_335_ap_ready : STD_LOGIC;
    signal grp_subconv_1x1_16p16_fu_335_weight_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_subconv_1x1_16p16_fu_335_weight_ce0 : STD_LOGIC;
    signal grp_subconv_1x1_16p16_fu_335_bias_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_subconv_1x1_16p16_fu_335_bias_ce0 : STD_LOGIC;
    signal grp_subconv_1x1_16p16_fu_335_output_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_subconv_1x1_16p16_fu_335_output_r_ce0 : STD_LOGIC;
    signal grp_subconv_1x1_16p16_fu_335_output_r_we0 : STD_LOGIC;
    signal grp_subconv_1x1_16p16_fu_335_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_subconv_1x1_16p16_fu_335_shuffleunit0_2_outpu_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_subconv_1x1_16p16_fu_335_shuffleunit0_2_outpu_ce0 : STD_LOGIC;
    signal grp_subconv_3x3_16_strid_fu_346_ap_start : STD_LOGIC;
    signal grp_subconv_3x3_16_strid_fu_346_ap_done : STD_LOGIC;
    signal grp_subconv_3x3_16_strid_fu_346_ap_idle : STD_LOGIC;
    signal grp_subconv_3x3_16_strid_fu_346_ap_ready : STD_LOGIC;
    signal grp_subconv_3x3_16_strid_fu_346_input_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_subconv_3x3_16_strid_fu_346_input_r_ce0 : STD_LOGIC;
    signal grp_subconv_3x3_16_strid_fu_346_input_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_subconv_3x3_16_strid_fu_346_weight_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_subconv_3x3_16_strid_fu_346_weight_ce0 : STD_LOGIC;
    signal grp_subconv_3x3_16_strid_fu_346_weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_subconv_3x3_16_strid_fu_346_bias_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_subconv_3x3_16_strid_fu_346_bias_ce0 : STD_LOGIC;
    signal grp_subconv_3x3_16_strid_fu_346_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_subconv_3x3_16_strid_fu_346_output_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_subconv_3x3_16_strid_fu_346_output_0_ce0 : STD_LOGIC;
    signal grp_subconv_3x3_16_strid_fu_346_output_0_we0 : STD_LOGIC;
    signal grp_subconv_3x3_16_strid_fu_346_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_subconv_1x1_89_fu_359_ap_start : STD_LOGIC;
    signal grp_subconv_1x1_89_fu_359_ap_done : STD_LOGIC;
    signal grp_subconv_1x1_89_fu_359_ap_idle : STD_LOGIC;
    signal grp_subconv_1x1_89_fu_359_ap_ready : STD_LOGIC;
    signal grp_subconv_1x1_89_fu_359_input_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_subconv_1x1_89_fu_359_input_0_ce0 : STD_LOGIC;
    signal grp_subconv_1x1_89_fu_359_input_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_subconv_1x1_89_fu_359_weight_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_subconv_1x1_89_fu_359_weight_ce0 : STD_LOGIC;
    signal grp_subconv_1x1_89_fu_359_weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_subconv_1x1_89_fu_359_bias_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_subconv_1x1_89_fu_359_bias_ce0 : STD_LOGIC;
    signal grp_subconv_1x1_89_fu_359_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_subconv_1x1_89_fu_359_output_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_subconv_1x1_89_fu_359_output_0_ce0 : STD_LOGIC;
    signal grp_subconv_1x1_89_fu_359_output_0_we0 : STD_LOGIC;
    signal grp_subconv_1x1_89_fu_359_output_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_shuffle_4811_fu_371_ap_start : STD_LOGIC;
    signal grp_shuffle_4811_fu_371_ap_done : STD_LOGIC;
    signal grp_shuffle_4811_fu_371_ap_idle : STD_LOGIC;
    signal grp_shuffle_4811_fu_371_ap_ready : STD_LOGIC;
    signal grp_shuffle_4811_fu_371_left_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_shuffle_4811_fu_371_left_0_ce0 : STD_LOGIC;
    signal grp_shuffle_4811_fu_371_right_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_shuffle_4811_fu_371_right_0_ce0 : STD_LOGIC;
    signal grp_shuffle_4811_fu_371_output_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_shuffle_4811_fu_371_output_r_ce0 : STD_LOGIC;
    signal grp_shuffle_4811_fu_371_output_r_we0 : STD_LOGIC;
    signal grp_shuffle_4811_fu_371_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar3_reg_160 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_410_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_409_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar7_reg_172 : STD_LOGIC_VECTOR (3 downto 0);
    signal invdar11_reg_184 : STD_LOGIC_VECTOR (3 downto 0);
    signal invdar18_reg_195 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_413_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_411_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_412_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar22_reg_207 : STD_LOGIC_VECTOR (2 downto 0);
    signal invdar27_reg_219 : STD_LOGIC_VECTOR (2 downto 0);
    signal invdar34_reg_230 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_416_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_414_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_415_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar38_reg_242 : STD_LOGIC_VECTOR (2 downto 0);
    signal invdar_reg_254 : STD_LOGIC_VECTOR (2 downto 0);
    signal invdar42_reg_265 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_419_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_417_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_418_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar43_reg_277 : STD_LOGIC_VECTOR (2 downto 0);
    signal invdar44_reg_289 : STD_LOGIC_VECTOR (2 downto 0);
    signal invdar45_reg_300 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_422_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_420_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_421_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar46_reg_312 : STD_LOGIC_VECTOR (2 downto 0);
    signal invdar47_reg_324 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_grp_subconv_1x1_16p16_fu_335_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_reg_grp_subconv_3x3_16_strid_fu_346_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_reg_grp_subconv_1x1_89_fu_359_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_reg_grp_shuffle_4811_fu_371_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_659_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_660_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_661_fu_509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_662_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_663_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_397_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_151_fu_448_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_152_fu_499_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_153_fu_550_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_154_fu_601_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_block_state21_on_subcall_done : BOOLEAN;

    component subconv_1x1_16p16 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        weight_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_ce0 : OUT STD_LOGIC;
        weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        shuffleunit0_2_outpu_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        shuffleunit0_2_outpu_ce0 : OUT STD_LOGIC;
        shuffleunit0_2_outpu_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component subconv_3x3_16_strid IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weight_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        weight_ce0 : OUT STD_LOGIC;
        weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        output_0_ce0 : OUT STD_LOGIC;
        output_0_we0 : OUT STD_LOGIC;
        output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component subconv_1x1_89 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weight_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_ce0 : OUT STD_LOGIC;
        weight_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        output_0_ce0 : OUT STD_LOGIC;
        output_0_we0 : OUT STD_LOGIC;
        output_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component shuffle_4811 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        left_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        left_0_ce0 : OUT STD_LOGIC;
        left_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        right_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        right_0_ce0 : OUT STD_LOGIC;
        right_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DownsampleUnit1_cocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DownsampleUnit1_cpcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv1r_output_U : component DownsampleUnit1_cocq
    generic map (
        DataWidth => 32,
        AddressRange => 12288,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv1r_output_address0,
        ce0 => conv1r_output_ce0,
        we0 => conv1r_output_we0,
        d0 => conv1r_output_d0,
        q0 => conv1r_output_q0);

    conv2r_ourput_0_U : component DownsampleUnit1_cpcA
    generic map (
        DataWidth => 32,
        AddressRange => 3072,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2r_ourput_0_address0,
        ce0 => conv2r_ourput_0_ce0,
        we0 => conv2r_ourput_0_we0,
        d0 => conv2r_ourput_0_d0,
        q0 => conv2r_ourput_0_q0);

    conv3r_ourput_0_U : component DownsampleUnit1_cpcA
    generic map (
        DataWidth => 32,
        AddressRange => 3072,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv3r_ourput_0_address0,
        ce0 => conv3r_ourput_0_ce0,
        we0 => conv3r_ourput_0_we0,
        d0 => conv3r_ourput_0_d0,
        q0 => conv3r_ourput_0_q0);

    conv1l_output_0_U : component DownsampleUnit1_cpcA
    generic map (
        DataWidth => 32,
        AddressRange => 3072,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv1l_output_0_address0,
        ce0 => conv1l_output_0_ce0,
        we0 => conv1l_output_0_we0,
        d0 => conv1l_output_0_d0,
        q0 => conv1l_output_0_q0);

    conv2l_output_0_U : component DownsampleUnit1_cpcA
    generic map (
        DataWidth => 32,
        AddressRange => 3072,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2l_output_0_address0,
        ce0 => conv2l_output_0_ce0,
        we0 => conv2l_output_0_we0,
        d0 => conv2l_output_0_d0,
        q0 => conv2l_output_0_q0);

    grp_subconv_1x1_16p16_fu_335 : component subconv_1x1_16p16
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_subconv_1x1_16p16_fu_335_ap_start,
        ap_done => grp_subconv_1x1_16p16_fu_335_ap_done,
        ap_idle => grp_subconv_1x1_16p16_fu_335_ap_idle,
        ap_ready => grp_subconv_1x1_16p16_fu_335_ap_ready,
        weight_address0 => grp_subconv_1x1_16p16_fu_335_weight_address0,
        weight_ce0 => grp_subconv_1x1_16p16_fu_335_weight_ce0,
        weight_q0 => conv1r_weight_q0,
        bias_address0 => grp_subconv_1x1_16p16_fu_335_bias_address0,
        bias_ce0 => grp_subconv_1x1_16p16_fu_335_bias_ce0,
        bias_q0 => conv1r_bias_q0,
        output_r_address0 => grp_subconv_1x1_16p16_fu_335_output_r_address0,
        output_r_ce0 => grp_subconv_1x1_16p16_fu_335_output_r_ce0,
        output_r_we0 => grp_subconv_1x1_16p16_fu_335_output_r_we0,
        output_r_d0 => grp_subconv_1x1_16p16_fu_335_output_r_d0,
        shuffleunit0_2_outpu_address0 => grp_subconv_1x1_16p16_fu_335_shuffleunit0_2_outpu_address0,
        shuffleunit0_2_outpu_ce0 => grp_subconv_1x1_16p16_fu_335_shuffleunit0_2_outpu_ce0,
        shuffleunit0_2_outpu_q0 => shuffleunit0_2_outpu_q0);

    grp_subconv_3x3_16_strid_fu_346 : component subconv_3x3_16_strid
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_subconv_3x3_16_strid_fu_346_ap_start,
        ap_done => grp_subconv_3x3_16_strid_fu_346_ap_done,
        ap_idle => grp_subconv_3x3_16_strid_fu_346_ap_idle,
        ap_ready => grp_subconv_3x3_16_strid_fu_346_ap_ready,
        input_r_address0 => grp_subconv_3x3_16_strid_fu_346_input_r_address0,
        input_r_ce0 => grp_subconv_3x3_16_strid_fu_346_input_r_ce0,
        input_r_q0 => grp_subconv_3x3_16_strid_fu_346_input_r_q0,
        weight_address0 => grp_subconv_3x3_16_strid_fu_346_weight_address0,
        weight_ce0 => grp_subconv_3x3_16_strid_fu_346_weight_ce0,
        weight_q0 => grp_subconv_3x3_16_strid_fu_346_weight_q0,
        bias_address0 => grp_subconv_3x3_16_strid_fu_346_bias_address0,
        bias_ce0 => grp_subconv_3x3_16_strid_fu_346_bias_ce0,
        bias_q0 => grp_subconv_3x3_16_strid_fu_346_bias_q0,
        output_0_address0 => grp_subconv_3x3_16_strid_fu_346_output_0_address0,
        output_0_ce0 => grp_subconv_3x3_16_strid_fu_346_output_0_ce0,
        output_0_we0 => grp_subconv_3x3_16_strid_fu_346_output_0_we0,
        output_0_d0 => grp_subconv_3x3_16_strid_fu_346_output_0_d0);

    grp_subconv_1x1_89_fu_359 : component subconv_1x1_89
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_subconv_1x1_89_fu_359_ap_start,
        ap_done => grp_subconv_1x1_89_fu_359_ap_done,
        ap_idle => grp_subconv_1x1_89_fu_359_ap_idle,
        ap_ready => grp_subconv_1x1_89_fu_359_ap_ready,
        input_0_address0 => grp_subconv_1x1_89_fu_359_input_0_address0,
        input_0_ce0 => grp_subconv_1x1_89_fu_359_input_0_ce0,
        input_0_q0 => grp_subconv_1x1_89_fu_359_input_0_q0,
        weight_address0 => grp_subconv_1x1_89_fu_359_weight_address0,
        weight_ce0 => grp_subconv_1x1_89_fu_359_weight_ce0,
        weight_q0 => grp_subconv_1x1_89_fu_359_weight_q0,
        bias_address0 => grp_subconv_1x1_89_fu_359_bias_address0,
        bias_ce0 => grp_subconv_1x1_89_fu_359_bias_ce0,
        bias_q0 => grp_subconv_1x1_89_fu_359_bias_q0,
        output_0_address0 => grp_subconv_1x1_89_fu_359_output_0_address0,
        output_0_ce0 => grp_subconv_1x1_89_fu_359_output_0_ce0,
        output_0_we0 => grp_subconv_1x1_89_fu_359_output_0_we0,
        output_0_d0 => grp_subconv_1x1_89_fu_359_output_0_d0);

    grp_shuffle_4811_fu_371 : component shuffle_4811
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shuffle_4811_fu_371_ap_start,
        ap_done => grp_shuffle_4811_fu_371_ap_done,
        ap_idle => grp_shuffle_4811_fu_371_ap_idle,
        ap_ready => grp_shuffle_4811_fu_371_ap_ready,
        left_0_address0 => grp_shuffle_4811_fu_371_left_0_address0,
        left_0_ce0 => grp_shuffle_4811_fu_371_left_0_ce0,
        left_0_q0 => conv3r_ourput_0_q0,
        right_0_address0 => grp_shuffle_4811_fu_371_right_0_address0,
        right_0_ce0 => grp_shuffle_4811_fu_371_right_0_ce0,
        right_0_q0 => conv2l_output_0_q0,
        output_r_address0 => grp_shuffle_4811_fu_371_output_r_address0,
        output_r_ce0 => grp_shuffle_4811_fu_371_output_r_ce0,
        output_r_we0 => grp_shuffle_4811_fu_371_output_r_we0,
        output_r_d0 => grp_shuffle_4811_fu_371_output_r_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_shuffle_4811_fu_371_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_shuffle_4811_fu_371_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    ap_reg_grp_shuffle_4811_fu_371_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_shuffle_4811_fu_371_ap_ready)) then 
                    ap_reg_grp_shuffle_4811_fu_371_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_subconv_1x1_16p16_fu_335_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_subconv_1x1_16p16_fu_335_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = tmp_420_fu_616_p2) and (ap_const_lv1_1 = tmp_421_fu_622_p2) and (ap_const_lv1_1 = tmp_422_fu_628_p2))) then 
                    ap_reg_grp_subconv_1x1_16p16_fu_335_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_subconv_1x1_16p16_fu_335_ap_ready)) then 
                    ap_reg_grp_subconv_1x1_16p16_fu_335_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_subconv_1x1_89_fu_359_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_subconv_1x1_89_fu_359_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                    ap_reg_grp_subconv_1x1_89_fu_359_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_subconv_1x1_89_fu_359_ap_ready)) then 
                    ap_reg_grp_subconv_1x1_89_fu_359_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_subconv_3x3_16_strid_fu_346_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_subconv_3x3_16_strid_fu_346_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                    ap_reg_grp_subconv_3x3_16_strid_fu_346_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_subconv_3x3_16_strid_fu_346_ap_ready)) then 
                    ap_reg_grp_subconv_3x3_16_strid_fu_346_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    invdar11_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = tmp_s_fu_412_p2))) then 
                invdar11_reg_184 <= indvarinc12_fu_391_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                invdar11_reg_184 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    invdar18_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_s_fu_412_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_409_fu_418_p2) and (tmp_410_fu_424_p2 = ap_const_lv1_1))) then 
                invdar18_reg_195 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_413_fu_475_p2) and (ap_const_lv1_1 = tmp_411_fu_463_p2) and (ap_const_lv1_1 = tmp_412_fu_469_p2))) then 
                invdar18_reg_195 <= indvarinc19_reg_658;
            end if; 
        end if;
    end process;

    invdar22_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = tmp_411_fu_463_p2) and (ap_const_lv1_0 = tmp_412_fu_469_p2))) then 
                invdar22_reg_207 <= indvarinc23_reg_663;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                invdar22_reg_207 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    invdar27_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_411_fu_463_p2))) then 
                invdar27_reg_219 <= indvarinc28_fu_442_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                invdar27_reg_219 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    invdar34_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = tmp_411_fu_463_p2) and (ap_const_lv1_1 = tmp_412_fu_469_p2) and (ap_const_lv1_1 = tmp_413_fu_475_p2))) then 
                invdar34_reg_230 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = tmp_416_fu_526_p2) and (ap_const_lv1_1 = tmp_414_fu_514_p2) and (ap_const_lv1_1 = tmp_415_fu_520_p2))) then 
                invdar34_reg_230 <= indvarinc35_reg_682;
            end if; 
        end if;
    end process;

    invdar38_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = tmp_414_fu_514_p2) and (ap_const_lv1_0 = tmp_415_fu_520_p2))) then 
                invdar38_reg_242 <= indvarinc39_reg_687;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                invdar38_reg_242 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    invdar3_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_410_fu_424_p2 = ap_const_lv1_0) and (tmp_s_fu_412_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_409_fu_418_p2))) then 
                invdar3_reg_160 <= indvarinc4_reg_634;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                invdar3_reg_160 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    invdar42_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = tmp_414_fu_514_p2) and (ap_const_lv1_1 = tmp_415_fu_520_p2) and (ap_const_lv1_1 = tmp_416_fu_526_p2))) then 
                invdar42_reg_265 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_419_fu_577_p2) and (ap_const_lv1_1 = tmp_417_fu_565_p2) and (ap_const_lv1_1 = tmp_418_fu_571_p2))) then 
                invdar42_reg_265 <= indvarinc43_reg_706;
            end if; 
        end if;
    end process;

    invdar43_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = tmp_417_fu_565_p2) and (ap_const_lv1_0 = tmp_418_fu_571_p2))) then 
                invdar43_reg_277 <= indvarinc44_reg_711;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                invdar43_reg_277 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    invdar44_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_417_fu_565_p2))) then 
                invdar44_reg_289 <= indvarinc45_fu_544_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                invdar44_reg_289 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    invdar45_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = tmp_417_fu_565_p2) and (ap_const_lv1_1 = tmp_418_fu_571_p2) and (ap_const_lv1_1 = tmp_419_fu_577_p2))) then 
                invdar45_reg_300 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = tmp_422_fu_628_p2) and (ap_const_lv1_1 = tmp_420_fu_616_p2) and (ap_const_lv1_1 = tmp_421_fu_622_p2))) then 
                invdar45_reg_300 <= indvarinc46_reg_730;
            end if; 
        end if;
    end process;

    invdar46_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = tmp_420_fu_616_p2) and (ap_const_lv1_0 = tmp_421_fu_622_p2))) then 
                invdar46_reg_312 <= indvarinc47_reg_735;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                invdar46_reg_312 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    invdar47_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = tmp_420_fu_616_p2))) then 
                invdar47_reg_324 <= indvarinc48_fu_595_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                invdar47_reg_324 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    invdar7_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_s_fu_412_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = tmp_409_fu_418_p2))) then 
                invdar7_reg_172 <= indvarinc8_reg_639;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                invdar7_reg_172 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    invdar_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = tmp_414_fu_514_p2))) then 
                invdar_reg_254 <= indvarinc_fu_493_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                invdar_reg_254 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                indvarinc19_reg_658 <= indvarinc19_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                indvarinc23_reg_663 <= indvarinc23_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                indvarinc35_reg_682 <= indvarinc35_fu_481_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                indvarinc39_reg_687 <= indvarinc39_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                indvarinc43_reg_706 <= indvarinc43_fu_532_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                indvarinc44_reg_711 <= indvarinc44_fu_538_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                indvarinc46_reg_730 <= indvarinc46_fu_583_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                indvarinc47_reg_735 <= indvarinc47_fu_589_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                indvarinc4_reg_634 <= indvarinc4_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                indvarinc8_reg_639 <= indvarinc8_fu_385_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state16, grp_subconv_1x1_16p16_fu_335_ap_done, grp_subconv_3x3_16_strid_fu_346_ap_done, grp_subconv_1x1_89_fu_359_ap_done, grp_shuffle_4811_fu_371_ap_done, tmp_410_fu_424_p2, tmp_s_fu_412_p2, tmp_409_fu_418_p2, tmp_413_fu_475_p2, tmp_411_fu_463_p2, tmp_412_fu_469_p2, tmp_416_fu_526_p2, tmp_414_fu_514_p2, tmp_415_fu_520_p2, tmp_419_fu_577_p2, tmp_417_fu_565_p2, tmp_418_fu_571_p2, tmp_422_fu_628_p2, tmp_420_fu_616_p2, tmp_421_fu_622_p2, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_block_state21_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_s_fu_412_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_409_fu_418_p2) and (tmp_410_fu_424_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_410_fu_424_p2 = ap_const_lv1_0) and (tmp_s_fu_412_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = tmp_409_fu_418_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_s_fu_412_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = tmp_409_fu_418_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = tmp_411_fu_463_p2) and (ap_const_lv1_1 = tmp_412_fu_469_p2) and (ap_const_lv1_1 = tmp_413_fu_475_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_413_fu_475_p2) and (ap_const_lv1_1 = tmp_411_fu_463_p2) and (ap_const_lv1_1 = tmp_412_fu_469_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = tmp_411_fu_463_p2) and (ap_const_lv1_0 = tmp_412_fu_469_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = tmp_414_fu_514_p2) and (ap_const_lv1_1 = tmp_415_fu_520_p2) and (ap_const_lv1_1 = tmp_416_fu_526_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = tmp_416_fu_526_p2) and (ap_const_lv1_1 = tmp_414_fu_514_p2) and (ap_const_lv1_1 = tmp_415_fu_520_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = tmp_414_fu_514_p2) and (ap_const_lv1_0 = tmp_415_fu_520_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = tmp_417_fu_565_p2) and (ap_const_lv1_1 = tmp_418_fu_571_p2) and (ap_const_lv1_1 = tmp_419_fu_577_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_419_fu_577_p2) and (ap_const_lv1_1 = tmp_417_fu_565_p2) and (ap_const_lv1_1 = tmp_418_fu_571_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = tmp_417_fu_565_p2) and (ap_const_lv1_0 = tmp_418_fu_571_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = tmp_420_fu_616_p2) and (ap_const_lv1_1 = tmp_421_fu_622_p2) and (ap_const_lv1_1 = tmp_422_fu_628_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = tmp_422_fu_628_p2) and (ap_const_lv1_1 = tmp_420_fu_616_p2) and (ap_const_lv1_1 = tmp_421_fu_622_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = tmp_420_fu_616_p2) and (ap_const_lv1_0 = tmp_421_fu_622_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_subconv_1x1_16p16_fu_335_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_subconv_3x3_16_strid_fu_346_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_block_state21_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (grp_subconv_1x1_89_fu_359_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (grp_shuffle_4811_fu_371_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state21_on_subcall_done_assign_proc : process(grp_subconv_3x3_16_strid_fu_346_ap_done, grp_subconv_1x1_89_fu_359_ap_done)
    begin
                ap_block_state21_on_subcall_done <= ((ap_const_logic_0 = grp_subconv_3x3_16_strid_fu_346_ap_done) or (ap_const_logic_0 = grp_subconv_1x1_89_fu_359_ap_done));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_shuffle_4811_fu_371_ap_done, ap_CS_fsm_state25)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (grp_shuffle_4811_fu_371_ap_done = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_shuffle_4811_fu_371_ap_done, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (grp_shuffle_4811_fu_371_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    conv1l_bias_address0 <= grp_subconv_3x3_16_strid_fu_346_bias_address0;

    conv1l_bias_ce0_assign_proc : process(grp_subconv_3x3_16_strid_fu_346_bias_ce0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv1l_bias_ce0 <= grp_subconv_3x3_16_strid_fu_346_bias_ce0;
        else 
            conv1l_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1l_output_0_address0_assign_proc : process(ap_CS_fsm_state13, grp_subconv_3x3_16_strid_fu_346_output_0_address0, grp_subconv_1x1_89_fu_359_input_0_address0, ap_CS_fsm_state21, ap_CS_fsm_state23, tmp_662_fu_560_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv1l_output_0_address0 <= tmp_662_fu_560_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv1l_output_0_address0 <= grp_subconv_1x1_89_fu_359_input_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv1l_output_0_address0 <= grp_subconv_3x3_16_strid_fu_346_output_0_address0;
        else 
            conv1l_output_0_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv1l_output_0_ce0_assign_proc : process(ap_CS_fsm_state13, grp_subconv_3x3_16_strid_fu_346_output_0_ce0, grp_subconv_1x1_89_fu_359_input_0_ce0, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv1l_output_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv1l_output_0_ce0 <= grp_subconv_1x1_89_fu_359_input_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv1l_output_0_ce0 <= grp_subconv_3x3_16_strid_fu_346_output_0_ce0;
        else 
            conv1l_output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1l_output_0_d0_assign_proc : process(ap_CS_fsm_state13, grp_subconv_3x3_16_strid_fu_346_output_0_d0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv1l_output_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv1l_output_0_d0 <= grp_subconv_3x3_16_strid_fu_346_output_0_d0;
        else 
            conv1l_output_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv1l_output_0_we0_assign_proc : process(ap_CS_fsm_state13, grp_subconv_3x3_16_strid_fu_346_output_0_we0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv1l_output_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv1l_output_0_we0 <= grp_subconv_3x3_16_strid_fu_346_output_0_we0;
        else 
            conv1l_output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1l_weight_address0 <= grp_subconv_3x3_16_strid_fu_346_weight_address0;

    conv1l_weight_ce0_assign_proc : process(grp_subconv_3x3_16_strid_fu_346_weight_ce0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv1l_weight_ce0 <= grp_subconv_3x3_16_strid_fu_346_weight_ce0;
        else 
            conv1l_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1r_bias_address0 <= grp_subconv_1x1_16p16_fu_335_bias_address0;
    conv1r_bias_ce0 <= grp_subconv_1x1_16p16_fu_335_bias_ce0;

    conv1r_output_address0_assign_proc : process(ap_CS_fsm_state4, grp_subconv_1x1_16p16_fu_335_output_r_address0, grp_subconv_3x3_16_strid_fu_346_input_r_address0, ap_CS_fsm_state17, ap_CS_fsm_state19, tmp_659_fu_407_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv1r_output_address0 <= tmp_659_fu_407_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv1r_output_address0 <= grp_subconv_3x3_16_strid_fu_346_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            conv1r_output_address0 <= grp_subconv_1x1_16p16_fu_335_output_r_address0;
        else 
            conv1r_output_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    conv1r_output_ce0_assign_proc : process(ap_CS_fsm_state4, grp_subconv_1x1_16p16_fu_335_output_r_ce0, grp_subconv_3x3_16_strid_fu_346_input_r_ce0, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv1r_output_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv1r_output_ce0 <= grp_subconv_3x3_16_strid_fu_346_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            conv1r_output_ce0 <= grp_subconv_1x1_16p16_fu_335_output_r_ce0;
        else 
            conv1r_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1r_output_d0_assign_proc : process(ap_CS_fsm_state4, grp_subconv_1x1_16p16_fu_335_output_r_d0, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv1r_output_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            conv1r_output_d0 <= grp_subconv_1x1_16p16_fu_335_output_r_d0;
        else 
            conv1r_output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv1r_output_we0_assign_proc : process(ap_CS_fsm_state4, grp_subconv_1x1_16p16_fu_335_output_r_we0, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv1r_output_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            conv1r_output_we0 <= grp_subconv_1x1_16p16_fu_335_output_r_we0;
        else 
            conv1r_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1r_weight_address0 <= grp_subconv_1x1_16p16_fu_335_weight_address0;
    conv1r_weight_ce0 <= grp_subconv_1x1_16p16_fu_335_weight_ce0;
    conv2l_bias_address0 <= grp_subconv_1x1_89_fu_359_bias_address0;

    conv2l_bias_ce0_assign_proc : process(grp_subconv_1x1_89_fu_359_bias_ce0, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv2l_bias_ce0 <= grp_subconv_1x1_89_fu_359_bias_ce0;
        else 
            conv2l_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2l_output_0_address0_assign_proc : process(ap_CS_fsm_state16, grp_subconv_1x1_89_fu_359_output_0_address0, grp_shuffle_4811_fu_371_right_0_address0, ap_CS_fsm_state23, ap_CS_fsm_state25, tmp_663_fu_611_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv2l_output_0_address0 <= tmp_663_fu_611_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv2l_output_0_address0 <= grp_shuffle_4811_fu_371_right_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv2l_output_0_address0 <= grp_subconv_1x1_89_fu_359_output_0_address0;
        else 
            conv2l_output_0_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv2l_output_0_ce0_assign_proc : process(ap_CS_fsm_state16, grp_subconv_1x1_89_fu_359_output_0_ce0, grp_shuffle_4811_fu_371_right_0_ce0, ap_CS_fsm_state23, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv2l_output_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv2l_output_0_ce0 <= grp_shuffle_4811_fu_371_right_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv2l_output_0_ce0 <= grp_subconv_1x1_89_fu_359_output_0_ce0;
        else 
            conv2l_output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2l_output_0_d0_assign_proc : process(ap_CS_fsm_state16, grp_subconv_1x1_89_fu_359_output_0_d0, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv2l_output_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv2l_output_0_d0 <= grp_subconv_1x1_89_fu_359_output_0_d0;
        else 
            conv2l_output_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv2l_output_0_we0_assign_proc : process(ap_CS_fsm_state16, grp_subconv_1x1_89_fu_359_output_0_we0, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv2l_output_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv2l_output_0_we0 <= grp_subconv_1x1_89_fu_359_output_0_we0;
        else 
            conv2l_output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2l_weight_address0 <= grp_subconv_1x1_89_fu_359_weight_address0;

    conv2l_weight_ce0_assign_proc : process(grp_subconv_1x1_89_fu_359_weight_ce0, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv2l_weight_ce0 <= grp_subconv_1x1_89_fu_359_weight_ce0;
        else 
            conv2l_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2r_bias_address0 <= grp_subconv_3x3_16_strid_fu_346_bias_address0;

    conv2r_bias_ce0_assign_proc : process(grp_subconv_3x3_16_strid_fu_346_bias_ce0, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv2r_bias_ce0 <= grp_subconv_3x3_16_strid_fu_346_bias_ce0;
        else 
            conv2r_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2r_ourput_0_address0_assign_proc : process(ap_CS_fsm_state7, grp_subconv_3x3_16_strid_fu_346_output_0_address0, grp_subconv_1x1_89_fu_359_input_0_address0, ap_CS_fsm_state19, ap_CS_fsm_state21, tmp_660_fu_458_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv2r_ourput_0_address0 <= tmp_660_fu_458_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv2r_ourput_0_address0 <= grp_subconv_1x1_89_fu_359_input_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv2r_ourput_0_address0 <= grp_subconv_3x3_16_strid_fu_346_output_0_address0;
        else 
            conv2r_ourput_0_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv2r_ourput_0_ce0_assign_proc : process(ap_CS_fsm_state7, grp_subconv_3x3_16_strid_fu_346_output_0_ce0, grp_subconv_1x1_89_fu_359_input_0_ce0, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv2r_ourput_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv2r_ourput_0_ce0 <= grp_subconv_1x1_89_fu_359_input_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv2r_ourput_0_ce0 <= grp_subconv_3x3_16_strid_fu_346_output_0_ce0;
        else 
            conv2r_ourput_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2r_ourput_0_d0_assign_proc : process(ap_CS_fsm_state7, grp_subconv_3x3_16_strid_fu_346_output_0_d0, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv2r_ourput_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv2r_ourput_0_d0 <= grp_subconv_3x3_16_strid_fu_346_output_0_d0;
        else 
            conv2r_ourput_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv2r_ourput_0_we0_assign_proc : process(ap_CS_fsm_state7, grp_subconv_3x3_16_strid_fu_346_output_0_we0, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv2r_ourput_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv2r_ourput_0_we0 <= grp_subconv_3x3_16_strid_fu_346_output_0_we0;
        else 
            conv2r_ourput_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2r_weight_address0 <= grp_subconv_3x3_16_strid_fu_346_weight_address0;

    conv2r_weight_ce0_assign_proc : process(grp_subconv_3x3_16_strid_fu_346_weight_ce0, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv2r_weight_ce0 <= grp_subconv_3x3_16_strid_fu_346_weight_ce0;
        else 
            conv2r_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv3r_bias_address0 <= grp_subconv_1x1_89_fu_359_bias_address0;

    conv3r_bias_ce0_assign_proc : process(grp_subconv_1x1_89_fu_359_bias_ce0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv3r_bias_ce0 <= grp_subconv_1x1_89_fu_359_bias_ce0;
        else 
            conv3r_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv3r_ourput_0_address0_assign_proc : process(ap_CS_fsm_state10, grp_subconv_1x1_89_fu_359_output_0_address0, grp_shuffle_4811_fu_371_left_0_address0, ap_CS_fsm_state21, ap_CS_fsm_state25, tmp_661_fu_509_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv3r_ourput_0_address0 <= tmp_661_fu_509_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv3r_ourput_0_address0 <= grp_shuffle_4811_fu_371_left_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv3r_ourput_0_address0 <= grp_subconv_1x1_89_fu_359_output_0_address0;
        else 
            conv3r_ourput_0_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv3r_ourput_0_ce0_assign_proc : process(ap_CS_fsm_state10, grp_subconv_1x1_89_fu_359_output_0_ce0, grp_shuffle_4811_fu_371_left_0_ce0, ap_CS_fsm_state21, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv3r_ourput_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv3r_ourput_0_ce0 <= grp_shuffle_4811_fu_371_left_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv3r_ourput_0_ce0 <= grp_subconv_1x1_89_fu_359_output_0_ce0;
        else 
            conv3r_ourput_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv3r_ourput_0_d0_assign_proc : process(ap_CS_fsm_state10, grp_subconv_1x1_89_fu_359_output_0_d0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv3r_ourput_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv3r_ourput_0_d0 <= grp_subconv_1x1_89_fu_359_output_0_d0;
        else 
            conv3r_ourput_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv3r_ourput_0_we0_assign_proc : process(ap_CS_fsm_state10, grp_subconv_1x1_89_fu_359_output_0_we0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv3r_ourput_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv3r_ourput_0_we0 <= grp_subconv_1x1_89_fu_359_output_0_we0;
        else 
            conv3r_ourput_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv3r_weight_address0 <= grp_subconv_1x1_89_fu_359_weight_address0;

    conv3r_weight_ce0_assign_proc : process(grp_subconv_1x1_89_fu_359_weight_ce0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv3r_weight_ce0 <= grp_subconv_1x1_89_fu_359_weight_ce0;
        else 
            conv3r_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    downsampleunit1_outp_address0 <= grp_shuffle_4811_fu_371_output_r_address0;
    downsampleunit1_outp_ce0 <= grp_shuffle_4811_fu_371_output_r_ce0;
    downsampleunit1_outp_d0 <= grp_shuffle_4811_fu_371_output_r_d0;
    downsampleunit1_outp_we0 <= grp_shuffle_4811_fu_371_output_r_we0;
    grp_shuffle_4811_fu_371_ap_start <= ap_reg_grp_shuffle_4811_fu_371_ap_start;
    grp_subconv_1x1_16p16_fu_335_ap_start <= ap_reg_grp_subconv_1x1_16p16_fu_335_ap_start;
    grp_subconv_1x1_89_fu_359_ap_start <= ap_reg_grp_subconv_1x1_89_fu_359_ap_start;

    grp_subconv_1x1_89_fu_359_bias_q0_assign_proc : process(conv3r_bias_q0, conv2l_bias_q0, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_subconv_1x1_89_fu_359_bias_q0 <= conv2l_bias_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_subconv_1x1_89_fu_359_bias_q0 <= conv3r_bias_q0;
        else 
            grp_subconv_1x1_89_fu_359_bias_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_subconv_1x1_89_fu_359_input_0_q0_assign_proc : process(conv2r_ourput_0_q0, conv1l_output_0_q0, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_subconv_1x1_89_fu_359_input_0_q0 <= conv1l_output_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_subconv_1x1_89_fu_359_input_0_q0 <= conv2r_ourput_0_q0;
        else 
            grp_subconv_1x1_89_fu_359_input_0_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_subconv_1x1_89_fu_359_weight_q0_assign_proc : process(conv3r_weight_q0, conv2l_weight_q0, ap_CS_fsm_state21, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_subconv_1x1_89_fu_359_weight_q0 <= conv2l_weight_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_subconv_1x1_89_fu_359_weight_q0 <= conv3r_weight_q0;
        else 
            grp_subconv_1x1_89_fu_359_weight_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_subconv_3x3_16_strid_fu_346_ap_start <= ap_reg_grp_subconv_3x3_16_strid_fu_346_ap_start;

    grp_subconv_3x3_16_strid_fu_346_bias_q0_assign_proc : process(conv2r_bias_q0, conv1l_bias_q0, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_subconv_3x3_16_strid_fu_346_bias_q0 <= conv1l_bias_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_subconv_3x3_16_strid_fu_346_bias_q0 <= conv2r_bias_q0;
        else 
            grp_subconv_3x3_16_strid_fu_346_bias_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_subconv_3x3_16_strid_fu_346_input_r_q0_assign_proc : process(shuffleunit0_2_outpu_q0, conv1r_output_q0, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_subconv_3x3_16_strid_fu_346_input_r_q0 <= shuffleunit0_2_outpu_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_subconv_3x3_16_strid_fu_346_input_r_q0 <= conv1r_output_q0;
        else 
            grp_subconv_3x3_16_strid_fu_346_input_r_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_subconv_3x3_16_strid_fu_346_weight_q0_assign_proc : process(conv2r_weight_q0, conv1l_weight_q0, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_subconv_3x3_16_strid_fu_346_weight_q0 <= conv1l_weight_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_subconv_3x3_16_strid_fu_346_weight_q0 <= conv2r_weight_q0;
        else 
            grp_subconv_3x3_16_strid_fu_346_weight_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    indvarinc12_fu_391_p2 <= std_logic_vector(unsigned(invdar11_reg_184) + unsigned(ap_const_lv4_1));
    indvarinc19_fu_430_p2 <= std_logic_vector(unsigned(invdar18_reg_195) + unsigned(ap_const_lv6_1));
    indvarinc23_fu_436_p2 <= std_logic_vector(unsigned(invdar22_reg_207) + unsigned(ap_const_lv3_1));
    indvarinc28_fu_442_p2 <= std_logic_vector(unsigned(invdar27_reg_219) + unsigned(ap_const_lv3_1));
    indvarinc35_fu_481_p2 <= std_logic_vector(unsigned(invdar34_reg_230) + unsigned(ap_const_lv6_1));
    indvarinc39_fu_487_p2 <= std_logic_vector(unsigned(invdar38_reg_242) + unsigned(ap_const_lv3_1));
    indvarinc43_fu_532_p2 <= std_logic_vector(unsigned(invdar42_reg_265) + unsigned(ap_const_lv6_1));
    indvarinc44_fu_538_p2 <= std_logic_vector(unsigned(invdar43_reg_277) + unsigned(ap_const_lv3_1));
    indvarinc45_fu_544_p2 <= std_logic_vector(unsigned(invdar44_reg_289) + unsigned(ap_const_lv3_1));
    indvarinc46_fu_583_p2 <= std_logic_vector(unsigned(invdar45_reg_300) + unsigned(ap_const_lv6_1));
    indvarinc47_fu_589_p2 <= std_logic_vector(unsigned(invdar46_reg_312) + unsigned(ap_const_lv3_1));
    indvarinc48_fu_595_p2 <= std_logic_vector(unsigned(invdar47_reg_324) + unsigned(ap_const_lv3_1));
    indvarinc4_fu_379_p2 <= std_logic_vector(unsigned(invdar3_reg_160) + unsigned(ap_const_lv6_1));
    indvarinc8_fu_385_p2 <= std_logic_vector(unsigned(invdar7_reg_172) + unsigned(ap_const_lv4_1));
    indvarinc_fu_493_p2 <= std_logic_vector(unsigned(invdar_reg_254) + unsigned(ap_const_lv3_1));

    shuffleunit0_2_outpu_address0_assign_proc : process(grp_subconv_1x1_16p16_fu_335_shuffleunit0_2_outpu_address0, grp_subconv_3x3_16_strid_fu_346_input_r_address0, ap_CS_fsm_state17, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            shuffleunit0_2_outpu_address0 <= grp_subconv_3x3_16_strid_fu_346_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            shuffleunit0_2_outpu_address0 <= grp_subconv_1x1_16p16_fu_335_shuffleunit0_2_outpu_address0;
        else 
            shuffleunit0_2_outpu_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    shuffleunit0_2_outpu_ce0_assign_proc : process(grp_subconv_1x1_16p16_fu_335_shuffleunit0_2_outpu_ce0, grp_subconv_3x3_16_strid_fu_346_input_r_ce0, ap_CS_fsm_state17, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            shuffleunit0_2_outpu_ce0 <= grp_subconv_3x3_16_strid_fu_346_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            shuffleunit0_2_outpu_ce0 <= grp_subconv_1x1_16p16_fu_335_shuffleunit0_2_outpu_ce0;
        else 
            shuffleunit0_2_outpu_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_151_fu_448_p4 <= ((invdar18_reg_195 & invdar22_reg_207) & invdar27_reg_219);
    tmp_152_fu_499_p4 <= ((invdar34_reg_230 & invdar38_reg_242) & invdar_reg_254);
    tmp_153_fu_550_p4 <= ((invdar42_reg_265 & invdar43_reg_277) & invdar44_reg_289);
    tmp_154_fu_601_p4 <= ((invdar45_reg_300 & invdar46_reg_312) & invdar47_reg_324);
    tmp_409_fu_418_p2 <= "1" when (invdar7_reg_172 = ap_const_lv4_F) else "0";
    tmp_410_fu_424_p2 <= "1" when (invdar3_reg_160 = ap_const_lv6_2F) else "0";
    tmp_411_fu_463_p2 <= "1" when (invdar27_reg_219 = ap_const_lv3_7) else "0";
    tmp_412_fu_469_p2 <= "1" when (invdar22_reg_207 = ap_const_lv3_7) else "0";
    tmp_413_fu_475_p2 <= "1" when (invdar18_reg_195 = ap_const_lv6_2F) else "0";
    tmp_414_fu_514_p2 <= "1" when (invdar_reg_254 = ap_const_lv3_7) else "0";
    tmp_415_fu_520_p2 <= "1" when (invdar38_reg_242 = ap_const_lv3_7) else "0";
    tmp_416_fu_526_p2 <= "1" when (invdar34_reg_230 = ap_const_lv6_2F) else "0";
    tmp_417_fu_565_p2 <= "1" when (invdar44_reg_289 = ap_const_lv3_7) else "0";
    tmp_418_fu_571_p2 <= "1" when (invdar43_reg_277 = ap_const_lv3_7) else "0";
    tmp_419_fu_577_p2 <= "1" when (invdar42_reg_265 = ap_const_lv6_2F) else "0";
    tmp_420_fu_616_p2 <= "1" when (invdar47_reg_324 = ap_const_lv3_7) else "0";
    tmp_421_fu_622_p2 <= "1" when (invdar46_reg_312 = ap_const_lv3_7) else "0";
    tmp_422_fu_628_p2 <= "1" when (invdar45_reg_300 = ap_const_lv6_2F) else "0";
    tmp_659_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_397_p4),64));
    tmp_660_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_151_fu_448_p4),64));
    tmp_661_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_152_fu_499_p4),64));
    tmp_662_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_153_fu_550_p4),64));
    tmp_663_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_154_fu_601_p4),64));
    tmp_fu_397_p4 <= ((invdar3_reg_160 & invdar7_reg_172) & invdar11_reg_184);
    tmp_s_fu_412_p2 <= "1" when (invdar11_reg_184 = ap_const_lv4_F) else "0";
end behav;
