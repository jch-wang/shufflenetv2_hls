// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "shuffle_2415.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic shuffle_2415::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic shuffle_2415::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> shuffle_2415::ap_ST_fsm_state1 = "1";
const sc_lv<5> shuffle_2415::ap_ST_fsm_state2 = "10";
const sc_lv<5> shuffle_2415::ap_ST_fsm_state3 = "100";
const sc_lv<5> shuffle_2415::ap_ST_fsm_state4 = "1000";
const sc_lv<5> shuffle_2415::ap_ST_fsm_state5 = "10000";
const sc_lv<32> shuffle_2415::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> shuffle_2415::ap_const_lv32_1 = "1";
const sc_lv<1> shuffle_2415::ap_const_lv1_0 = "0";
const sc_lv<32> shuffle_2415::ap_const_lv32_2 = "10";
const sc_lv<32> shuffle_2415::ap_const_lv32_3 = "11";
const sc_lv<6> shuffle_2415::ap_const_lv6_0 = "000000";
const sc_lv<1> shuffle_2415::ap_const_lv1_1 = "1";
const sc_lv<5> shuffle_2415::ap_const_lv5_0 = "00000";
const sc_lv<32> shuffle_2415::ap_const_lv32_4 = "100";
const sc_lv<6> shuffle_2415::ap_const_lv6_30 = "110000";
const sc_lv<6> shuffle_2415::ap_const_lv6_1 = "1";
const sc_lv<32> shuffle_2415::ap_const_lv32_5 = "101";
const sc_lv<4> shuffle_2415::ap_const_lv4_0 = "0000";
const sc_lv<5> shuffle_2415::ap_const_lv5_10 = "10000";
const sc_lv<5> shuffle_2415::ap_const_lv5_1 = "1";
const bool shuffle_2415::ap_const_boolean_1 = true;

shuffle_2415::shuffle_2415(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_126_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_126_p2 );

    SC_METHOD(thread_co_15_fu_132_p2);
    sensitive << ( co_reg_77 );

    SC_METHOD(thread_exitcond1_fu_172_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( h_reg_88 );

    SC_METHOD(thread_exitcond2_fu_126_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( co_reg_77 );

    SC_METHOD(thread_exitcond_fu_218_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( w_reg_99 );

    SC_METHOD(thread_h_15_fu_178_p2);
    sensitive << ( h_reg_88 );

    SC_METHOD(thread_left_0_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_252_cast_fu_243_p1 );

    SC_METHOD(thread_left_0_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_output_r_address0);
    sensitive << ( output_addr_reg_317 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_output_r_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_output_r_d0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( storemerge_phi_fu_113_p4 );

    SC_METHOD(thread_output_r_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_right_0_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_252_cast_fu_243_p1 );

    SC_METHOD(thread_right_0_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_storemerge_phi_fu_113_p4);
    sensitive << ( left_0_q0 );
    sensitive << ( right_0_q0 );
    sensitive << ( tmp_96_reg_259 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_tmp_151_fu_160_p3);
    sensitive << ( co_reg_77 );

    SC_METHOD(thread_tmp_152_fu_192_p2);
    sensitive << ( tmp_243_cast_reg_271 );
    sensitive << ( tmp_cast_fu_188_p1 );

    SC_METHOD(thread_tmp_153_fu_205_p2);
    sensitive << ( tmp_245_cast_reg_276 );
    sensitive << ( tmp_cast2_fu_184_p1 );

    SC_METHOD(thread_tmp_154_fu_238_p2);
    sensitive << ( tmp_248_cast_reg_289 );
    sensitive << ( tmp_99_cast_fu_234_p1 );

    SC_METHOD(thread_tmp_155_fu_249_p2);
    sensitive << ( tmp_251_cast_reg_294 );
    sensitive << ( tmp_99_cast1_fu_230_p1 );

    SC_METHOD(thread_tmp_243_cast_fu_156_p1);
    sensitive << ( tmp_s_fu_148_p3 );

    SC_METHOD(thread_tmp_245_cast_fu_168_p1);
    sensitive << ( tmp_151_fu_160_p3 );

    SC_METHOD(thread_tmp_248_cast_fu_197_p3);
    sensitive << ( tmp_152_fu_192_p2 );

    SC_METHOD(thread_tmp_251_cast_fu_210_p3);
    sensitive << ( tmp_153_fu_205_p2 );

    SC_METHOD(thread_tmp_252_cast_fu_243_p1);
    sensitive << ( tmp_154_fu_238_p2 );

    SC_METHOD(thread_tmp_253_cast_fu_254_p1);
    sensitive << ( tmp_155_fu_249_p2 );

    SC_METHOD(thread_tmp_96_fu_122_p1);
    sensitive << ( co_reg_77 );

    SC_METHOD(thread_tmp_99_cast1_fu_230_p1);
    sensitive << ( w_reg_99 );

    SC_METHOD(thread_tmp_99_cast_fu_234_p1);
    sensitive << ( w_reg_99 );

    SC_METHOD(thread_tmp_cast2_fu_184_p1);
    sensitive << ( h_reg_88 );

    SC_METHOD(thread_tmp_cast_fu_188_p1);
    sensitive << ( h_reg_88 );

    SC_METHOD(thread_tmp_fu_138_p4);
    sensitive << ( co_reg_77 );

    SC_METHOD(thread_tmp_s_fu_148_p3);
    sensitive << ( tmp_fu_138_p4 );

    SC_METHOD(thread_w_15_fu_224_p2);
    sensitive << ( w_reg_99 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_126_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_172_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_218_p2 );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "shuffle_2415_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, left_0_address0, "(port)left_0_address0");
    sc_trace(mVcdFile, left_0_ce0, "(port)left_0_ce0");
    sc_trace(mVcdFile, left_0_q0, "(port)left_0_q0");
    sc_trace(mVcdFile, right_0_address0, "(port)right_0_address0");
    sc_trace(mVcdFile, right_0_ce0, "(port)right_0_ce0");
    sc_trace(mVcdFile, right_0_q0, "(port)right_0_q0");
    sc_trace(mVcdFile, output_r_address0, "(port)output_r_address0");
    sc_trace(mVcdFile, output_r_ce0, "(port)output_r_ce0");
    sc_trace(mVcdFile, output_r_we0, "(port)output_r_we0");
    sc_trace(mVcdFile, output_r_d0, "(port)output_r_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_96_fu_122_p1, "tmp_96_fu_122_p1");
    sc_trace(mVcdFile, tmp_96_reg_259, "tmp_96_reg_259");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, co_15_fu_132_p2, "co_15_fu_132_p2");
    sc_trace(mVcdFile, co_15_reg_266, "co_15_reg_266");
    sc_trace(mVcdFile, tmp_243_cast_fu_156_p1, "tmp_243_cast_fu_156_p1");
    sc_trace(mVcdFile, tmp_243_cast_reg_271, "tmp_243_cast_reg_271");
    sc_trace(mVcdFile, exitcond2_fu_126_p2, "exitcond2_fu_126_p2");
    sc_trace(mVcdFile, tmp_245_cast_fu_168_p1, "tmp_245_cast_fu_168_p1");
    sc_trace(mVcdFile, tmp_245_cast_reg_276, "tmp_245_cast_reg_276");
    sc_trace(mVcdFile, h_15_fu_178_p2, "h_15_fu_178_p2");
    sc_trace(mVcdFile, h_15_reg_284, "h_15_reg_284");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_248_cast_fu_197_p3, "tmp_248_cast_fu_197_p3");
    sc_trace(mVcdFile, tmp_248_cast_reg_289, "tmp_248_cast_reg_289");
    sc_trace(mVcdFile, exitcond1_fu_172_p2, "exitcond1_fu_172_p2");
    sc_trace(mVcdFile, tmp_251_cast_fu_210_p3, "tmp_251_cast_fu_210_p3");
    sc_trace(mVcdFile, tmp_251_cast_reg_294, "tmp_251_cast_reg_294");
    sc_trace(mVcdFile, w_15_fu_224_p2, "w_15_fu_224_p2");
    sc_trace(mVcdFile, w_15_reg_302, "w_15_reg_302");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, exitcond_fu_218_p2, "exitcond_fu_218_p2");
    sc_trace(mVcdFile, output_addr_reg_317, "output_addr_reg_317");
    sc_trace(mVcdFile, co_reg_77, "co_reg_77");
    sc_trace(mVcdFile, h_reg_88, "h_reg_88");
    sc_trace(mVcdFile, w_reg_99, "w_reg_99");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, storemerge_phi_fu_113_p4, "storemerge_phi_fu_113_p4");
    sc_trace(mVcdFile, tmp_252_cast_fu_243_p1, "tmp_252_cast_fu_243_p1");
    sc_trace(mVcdFile, tmp_253_cast_fu_254_p1, "tmp_253_cast_fu_254_p1");
    sc_trace(mVcdFile, tmp_fu_138_p4, "tmp_fu_138_p4");
    sc_trace(mVcdFile, tmp_s_fu_148_p3, "tmp_s_fu_148_p3");
    sc_trace(mVcdFile, tmp_151_fu_160_p3, "tmp_151_fu_160_p3");
    sc_trace(mVcdFile, tmp_cast_fu_188_p1, "tmp_cast_fu_188_p1");
    sc_trace(mVcdFile, tmp_152_fu_192_p2, "tmp_152_fu_192_p2");
    sc_trace(mVcdFile, tmp_cast2_fu_184_p1, "tmp_cast2_fu_184_p1");
    sc_trace(mVcdFile, tmp_153_fu_205_p2, "tmp_153_fu_205_p2");
    sc_trace(mVcdFile, tmp_99_cast_fu_234_p1, "tmp_99_cast_fu_234_p1");
    sc_trace(mVcdFile, tmp_154_fu_238_p2, "tmp_154_fu_238_p2");
    sc_trace(mVcdFile, tmp_99_cast1_fu_230_p1, "tmp_99_cast1_fu_230_p1");
    sc_trace(mVcdFile, tmp_155_fu_249_p2, "tmp_155_fu_249_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

shuffle_2415::~shuffle_2415() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void shuffle_2415::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_172_p2.read(), ap_const_lv1_1))) {
        co_reg_77 = co_15_reg_266.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        co_reg_77 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_218_p2.read(), ap_const_lv1_1))) {
        h_reg_88 = h_15_reg_284.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond2_fu_126_p2.read(), ap_const_lv1_0))) {
        h_reg_88 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_172_p2.read()))) {
        w_reg_99 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        w_reg_99 = w_15_reg_302.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        co_15_reg_266 = co_15_fu_132_p2.read();
        tmp_96_reg_259 = tmp_96_fu_122_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        h_15_reg_284 = h_15_fu_178_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_218_p2.read()))) {
        output_addr_reg_317 =  (sc_lv<14>) (tmp_253_cast_fu_254_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond2_fu_126_p2.read(), ap_const_lv1_0))) {
        tmp_243_cast_reg_271 = tmp_243_cast_fu_156_p1.read();
        tmp_245_cast_reg_276 = tmp_245_cast_fu_168_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_172_p2.read()))) {
        tmp_248_cast_reg_289 = tmp_248_cast_fu_197_p3.read();
        tmp_251_cast_reg_294 = tmp_251_cast_fu_210_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        w_15_reg_302 = w_15_fu_224_p2.read();
    }
}

void shuffle_2415::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void shuffle_2415::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void shuffle_2415::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void shuffle_2415::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void shuffle_2415::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void shuffle_2415::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(exitcond2_fu_126_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void shuffle_2415::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void shuffle_2415::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_126_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void shuffle_2415::thread_co_15_fu_132_p2() {
    co_15_fu_132_p2 = (!ap_const_lv6_1.is_01() || !co_reg_77.read().is_01())? sc_lv<6>(): (sc_biguint<6>(ap_const_lv6_1) + sc_biguint<6>(co_reg_77.read()));
}

void shuffle_2415::thread_exitcond1_fu_172_p2() {
    exitcond1_fu_172_p2 = (!h_reg_88.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(h_reg_88.read() == ap_const_lv5_10);
}

void shuffle_2415::thread_exitcond2_fu_126_p2() {
    exitcond2_fu_126_p2 = (!co_reg_77.read().is_01() || !ap_const_lv6_30.is_01())? sc_lv<1>(): sc_lv<1>(co_reg_77.read() == ap_const_lv6_30);
}

void shuffle_2415::thread_exitcond_fu_218_p2() {
    exitcond_fu_218_p2 = (!w_reg_99.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(w_reg_99.read() == ap_const_lv5_10);
}

void shuffle_2415::thread_h_15_fu_178_p2() {
    h_15_fu_178_p2 = (!h_reg_88.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(h_reg_88.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void shuffle_2415::thread_left_0_address0() {
    left_0_address0 =  (sc_lv<13>) (tmp_252_cast_fu_243_p1.read());
}

void shuffle_2415::thread_left_0_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        left_0_ce0 = ap_const_logic_1;
    } else {
        left_0_ce0 = ap_const_logic_0;
    }
}

void shuffle_2415::thread_output_r_address0() {
    output_r_address0 = output_addr_reg_317.read();
}

void shuffle_2415::thread_output_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        output_r_ce0 = ap_const_logic_1;
    } else {
        output_r_ce0 = ap_const_logic_0;
    }
}

void shuffle_2415::thread_output_r_d0() {
    output_r_d0 = storemerge_phi_fu_113_p4.read();
}

void shuffle_2415::thread_output_r_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        output_r_we0 = ap_const_logic_1;
    } else {
        output_r_we0 = ap_const_logic_0;
    }
}

void shuffle_2415::thread_right_0_address0() {
    right_0_address0 =  (sc_lv<13>) (tmp_252_cast_fu_243_p1.read());
}

void shuffle_2415::thread_right_0_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        right_0_ce0 = ap_const_logic_1;
    } else {
        right_0_ce0 = ap_const_logic_0;
    }
}

void shuffle_2415::thread_storemerge_phi_fu_113_p4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(tmp_96_reg_259.read(), ap_const_lv1_1)) {
            storemerge_phi_fu_113_p4 = right_0_q0.read();
        } else if (esl_seteq<1,1,1>(tmp_96_reg_259.read(), ap_const_lv1_0)) {
            storemerge_phi_fu_113_p4 = left_0_q0.read();
        } else {
            storemerge_phi_fu_113_p4 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        storemerge_phi_fu_113_p4 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void shuffle_2415::thread_tmp_151_fu_160_p3() {
    tmp_151_fu_160_p3 = esl_concat<6,4>(co_reg_77.read(), ap_const_lv4_0);
}

void shuffle_2415::thread_tmp_152_fu_192_p2() {
    tmp_152_fu_192_p2 = (!tmp_cast_fu_188_p1.read().is_01() || !tmp_243_cast_reg_271.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_cast_fu_188_p1.read()) + sc_biguint<10>(tmp_243_cast_reg_271.read()));
}

void shuffle_2415::thread_tmp_153_fu_205_p2() {
    tmp_153_fu_205_p2 = (!tmp_cast2_fu_184_p1.read().is_01() || !tmp_245_cast_reg_276.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_cast2_fu_184_p1.read()) + sc_biguint<11>(tmp_245_cast_reg_276.read()));
}

void shuffle_2415::thread_tmp_154_fu_238_p2() {
    tmp_154_fu_238_p2 = (!tmp_248_cast_reg_289.read().is_01() || !tmp_99_cast_fu_234_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(tmp_248_cast_reg_289.read()) + sc_biguint<14>(tmp_99_cast_fu_234_p1.read()));
}

void shuffle_2415::thread_tmp_155_fu_249_p2() {
    tmp_155_fu_249_p2 = (!tmp_251_cast_reg_294.read().is_01() || !tmp_99_cast1_fu_230_p1.read().is_01())? sc_lv<15>(): (sc_biguint<15>(tmp_251_cast_reg_294.read()) + sc_biguint<15>(tmp_99_cast1_fu_230_p1.read()));
}

void shuffle_2415::thread_tmp_243_cast_fu_156_p1() {
    tmp_243_cast_fu_156_p1 = esl_zext<10,9>(tmp_s_fu_148_p3.read());
}

void shuffle_2415::thread_tmp_245_cast_fu_168_p1() {
    tmp_245_cast_fu_168_p1 = esl_zext<11,10>(tmp_151_fu_160_p3.read());
}

void shuffle_2415::thread_tmp_248_cast_fu_197_p3() {
    tmp_248_cast_fu_197_p3 = esl_concat<10,4>(tmp_152_fu_192_p2.read(), ap_const_lv4_0);
}

void shuffle_2415::thread_tmp_251_cast_fu_210_p3() {
    tmp_251_cast_fu_210_p3 = esl_concat<11,4>(tmp_153_fu_205_p2.read(), ap_const_lv4_0);
}

void shuffle_2415::thread_tmp_252_cast_fu_243_p1() {
    tmp_252_cast_fu_243_p1 = esl_zext<64,14>(tmp_154_fu_238_p2.read());
}

void shuffle_2415::thread_tmp_253_cast_fu_254_p1() {
    tmp_253_cast_fu_254_p1 = esl_zext<64,15>(tmp_155_fu_249_p2.read());
}

void shuffle_2415::thread_tmp_96_fu_122_p1() {
    tmp_96_fu_122_p1 = co_reg_77.read().range(1-1, 0);
}

void shuffle_2415::thread_tmp_99_cast1_fu_230_p1() {
    tmp_99_cast1_fu_230_p1 = esl_zext<15,5>(w_reg_99.read());
}

void shuffle_2415::thread_tmp_99_cast_fu_234_p1() {
    tmp_99_cast_fu_234_p1 = esl_zext<14,5>(w_reg_99.read());
}

void shuffle_2415::thread_tmp_cast2_fu_184_p1() {
    tmp_cast2_fu_184_p1 = esl_zext<11,5>(h_reg_88.read());
}

void shuffle_2415::thread_tmp_cast_fu_188_p1() {
    tmp_cast_fu_188_p1 = esl_zext<10,5>(h_reg_88.read());
}

void shuffle_2415::thread_tmp_fu_138_p4() {
    tmp_fu_138_p4 = co_reg_77.read().range(5, 1);
}

void shuffle_2415::thread_tmp_s_fu_148_p3() {
    tmp_s_fu_148_p3 = esl_concat<5,4>(tmp_fu_138_p4.read(), ap_const_lv4_0);
}

void shuffle_2415::thread_w_15_fu_224_p2() {
    w_15_fu_224_p2 = (!w_reg_99.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(w_reg_99.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void shuffle_2415::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond2_fu_126_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond1_fu_172_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(exitcond_fu_218_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

}

