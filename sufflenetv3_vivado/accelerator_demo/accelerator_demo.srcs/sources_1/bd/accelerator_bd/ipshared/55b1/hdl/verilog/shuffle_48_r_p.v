// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shuffle_48_r_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        right_V_address0,
        right_V_ce0,
        right_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] right_V_address0;
output   right_V_ce0;
input  [7:0] right_V_q0;
output  [13:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg right_V_ce0;
reg output_V_ce0;
reg output_V_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_252_fu_108_p1;
reg   [0:0] tmp_252_reg_323;
wire    ap_CS_fsm_state2;
wire   [6:0] co_16_fu_118_p2;
reg   [6:0] co_16_reg_330;
wire   [10:0] tmp_271_fu_148_p2;
reg   [10:0] tmp_271_reg_335;
wire   [0:0] exitcond3_fu_112_p2;
wire   [9:0] tmp_275_fu_188_p2;
reg   [9:0] tmp_275_reg_340;
wire   [3:0] h_16_fu_200_p2;
reg   [3:0] h_16_reg_348;
wire    ap_CS_fsm_state3;
wire   [13:0] tmp_277_fu_243_p2;
reg   [13:0] tmp_277_reg_353;
wire   [0:0] exitcond2_fu_194_p2;
wire   [14:0] tmp_279_fu_278_p2;
reg   [14:0] tmp_279_reg_358;
wire   [3:0] w_16_fu_290_p2;
reg   [3:0] w_16_reg_366;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_284_p2;
wire   [14:0] tmp_281_fu_314_p2;
reg   [14:0] tmp_281_reg_376;
reg   [6:0] co_reg_75;
reg   [3:0] h_reg_86;
reg   [3:0] w_reg_97;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_328_cast_fu_309_p1;
wire   [63:0] tmp_329_cast_fu_319_p1;
wire   [9:0] tmp_fu_124_p3;
wire   [7:0] tmp_s_fu_136_p3;
wire   [10:0] p_shl3_cast_fu_144_p1;
wire   [10:0] p_shl2_cast_fu_132_p1;
wire   [5:0] tmp_272_fu_154_p4;
wire   [8:0] tmp_273_fu_164_p3;
wire   [6:0] tmp_274_fu_176_p3;
wire   [9:0] p_shl1_cast_fu_184_p1;
wire   [9:0] p_shl_cast_fu_172_p1;
wire   [9:0] tmp_cast_fu_210_p1;
wire   [9:0] tmp_276_fu_214_p2;
wire   [12:0] tmp_253_fu_219_p3;
wire   [10:0] tmp_254_fu_231_p3;
wire   [13:0] p_shl6_cast_fu_227_p1;
wire   [13:0] p_shl7_cast_fu_239_p1;
wire   [10:0] tmp_cast9_fu_206_p1;
wire   [10:0] tmp_278_fu_249_p2;
wire   [13:0] tmp_255_fu_254_p3;
wire   [11:0] tmp_256_fu_266_p3;
wire   [14:0] p_shl4_cast_fu_262_p1;
wire   [14:0] p_shl5_cast_fu_274_p1;
wire   [13:0] tmp_179_cast_fu_300_p1;
wire   [13:0] tmp_280_fu_304_p2;
wire   [14:0] tmp_179_cast8_fu_296_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_194_p2 == 1'd1))) begin
        co_reg_75 <= co_16_reg_330;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_75 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_284_p2 == 1'd1))) begin
        h_reg_86 <= h_16_reg_348;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_112_p2 == 1'd0))) begin
        h_reg_86 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_194_p2))) begin
        w_reg_97 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_reg_97 <= w_16_reg_366;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_16_reg_330 <= co_16_fu_118_p2;
        tmp_252_reg_323 <= tmp_252_fu_108_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_16_reg_348 <= h_16_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_112_p2 == 1'd0))) begin
        tmp_271_reg_335[10 : 1] <= tmp_271_fu_148_p2[10 : 1];
        tmp_275_reg_340[9 : 1] <= tmp_275_fu_188_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_194_p2))) begin
        tmp_277_reg_353[13 : 1] <= tmp_277_fu_243_p2[13 : 1];
        tmp_279_reg_358[14 : 1] <= tmp_279_fu_278_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_284_p2) & (tmp_252_reg_323 == 1'd1))) begin
        tmp_281_reg_376 <= tmp_281_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_16_reg_366 <= w_16_fu_290_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_112_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_112_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_252_reg_323 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        right_V_ce0 = 1'b1;
    end else begin
        right_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_112_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_194_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_284_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign co_16_fu_118_p2 = (7'd1 + co_reg_75);

assign exitcond2_fu_194_p2 = ((h_reg_86 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond3_fu_112_p2 = ((co_reg_75 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond_fu_284_p2 = ((w_reg_97 == 4'd10) ? 1'b1 : 1'b0);

assign h_16_fu_200_p2 = (h_reg_86 + 4'd1);

assign output_V_address0 = tmp_329_cast_fu_319_p1;

assign output_V_d0 = right_V_q0;

assign p_shl1_cast_fu_184_p1 = tmp_274_fu_176_p3;

assign p_shl2_cast_fu_132_p1 = tmp_fu_124_p3;

assign p_shl3_cast_fu_144_p1 = tmp_s_fu_136_p3;

assign p_shl4_cast_fu_262_p1 = tmp_255_fu_254_p3;

assign p_shl5_cast_fu_274_p1 = tmp_256_fu_266_p3;

assign p_shl6_cast_fu_227_p1 = tmp_253_fu_219_p3;

assign p_shl7_cast_fu_239_p1 = tmp_254_fu_231_p3;

assign p_shl_cast_fu_172_p1 = tmp_273_fu_164_p3;

assign right_V_address0 = tmp_328_cast_fu_309_p1;

assign tmp_179_cast8_fu_296_p1 = w_reg_97;

assign tmp_179_cast_fu_300_p1 = w_reg_97;

assign tmp_252_fu_108_p1 = co_reg_75[0:0];

assign tmp_253_fu_219_p3 = {{tmp_276_fu_214_p2}, {3'd0}};

assign tmp_254_fu_231_p3 = {{tmp_276_fu_214_p2}, {1'd0}};

assign tmp_255_fu_254_p3 = {{tmp_278_fu_249_p2}, {3'd0}};

assign tmp_256_fu_266_p3 = {{tmp_278_fu_249_p2}, {1'd0}};

assign tmp_271_fu_148_p2 = (p_shl3_cast_fu_144_p1 + p_shl2_cast_fu_132_p1);

assign tmp_272_fu_154_p4 = {{co_reg_75[6:1]}};

assign tmp_273_fu_164_p3 = {{tmp_272_fu_154_p4}, {3'd0}};

assign tmp_274_fu_176_p3 = {{tmp_272_fu_154_p4}, {1'd0}};

assign tmp_275_fu_188_p2 = (p_shl1_cast_fu_184_p1 + p_shl_cast_fu_172_p1);

assign tmp_276_fu_214_p2 = (tmp_cast_fu_210_p1 + tmp_275_reg_340);

assign tmp_277_fu_243_p2 = (p_shl6_cast_fu_227_p1 + p_shl7_cast_fu_239_p1);

assign tmp_278_fu_249_p2 = (tmp_cast9_fu_206_p1 + tmp_271_reg_335);

assign tmp_279_fu_278_p2 = (p_shl4_cast_fu_262_p1 + p_shl5_cast_fu_274_p1);

assign tmp_280_fu_304_p2 = (tmp_277_reg_353 + tmp_179_cast_fu_300_p1);

assign tmp_281_fu_314_p2 = (tmp_279_reg_358 + tmp_179_cast8_fu_296_p1);

assign tmp_328_cast_fu_309_p1 = tmp_280_fu_304_p2;

assign tmp_329_cast_fu_319_p1 = tmp_281_reg_376;

assign tmp_cast9_fu_206_p1 = h_reg_86;

assign tmp_cast_fu_210_p1 = h_reg_86;

assign tmp_fu_124_p3 = {{co_reg_75}, {3'd0}};

assign tmp_s_fu_136_p3 = {{co_reg_75}, {1'd0}};

assign w_16_fu_290_p2 = (w_reg_97 + 4'd1);

always @ (posedge ap_clk) begin
    tmp_271_reg_335[0] <= 1'b0;
    tmp_275_reg_340[0] <= 1'b0;
    tmp_277_reg_353[0] <= 1'b0;
    tmp_279_reg_358[0] <= 1'b0;
end

endmodule //shuffle_48_r_p
