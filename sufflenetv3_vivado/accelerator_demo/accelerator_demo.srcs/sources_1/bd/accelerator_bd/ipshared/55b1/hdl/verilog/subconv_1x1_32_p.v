// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_1x1_32_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        conv1_output_p_V_address0,
        conv1_output_p_V_ce0,
        conv1_output_p_V_q0,
        ShuffleConvs_0_Downs_address0,
        ShuffleConvs_0_Downs_ce0,
        ShuffleConvs_0_Downs_we0,
        ShuffleConvs_0_Downs_d0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [4:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [14:0] conv1_output_p_V_address0;
output   conv1_output_p_V_ce0;
input  [7:0] conv1_output_p_V_q0;
output  [14:0] ShuffleConvs_0_Downs_address0;
output   ShuffleConvs_0_Downs_ce0;
output   ShuffleConvs_0_Downs_we0;
output  [7:0] ShuffleConvs_0_Downs_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg conv1_output_p_V_ce0;
reg ShuffleConvs_0_Downs_ce0;
reg ShuffleConvs_0_Downs_we0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] co_10_fu_192_p2;
reg   [4:0] co_10_reg_754;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_184_fu_227_p2;
reg   [10:0] tmp_184_reg_759;
wire   [0:0] exitcond7_fu_186_p2;
wire   [10:0] tmp_186_fu_245_p2;
reg   [10:0] tmp_186_reg_764;
reg   [4:0] bias_V_addr_reg_769;
wire   [10:0] tmp_cast_fu_257_p1;
reg   [10:0] tmp_cast_reg_777;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond8_fu_251_p2;
wire   [15:0] tmp_189_fu_286_p2;
reg   [15:0] tmp_189_reg_782;
wire   [15:0] tmp_140_cast_fu_298_p1;
reg   [15:0] tmp_140_cast_reg_790;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond9_fu_292_p2;
reg   [14:0] ShuffleConvs_0_Downs_reg_795;
wire   [5:0] h_10_fu_312_p2;
wire   [4:0] ci_4_fu_324_p2;
reg   [4:0] ci_4_reg_808;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_fu_318_p2;
wire   [15:0] tmp_199_fu_405_p2;
reg   [15:0] tmp_199_reg_818;
wire   [5:0] w_10_fu_410_p2;
reg   [5:0] w_10_reg_823;
wire    ap_CS_fsm_state6;
reg   [7:0] weight_V_load_reg_833;
reg   [7:0] conv1_output_p_V_loa_reg_838;
wire    ap_CS_fsm_state7;
wire   [15:0] p_Val2_68_fu_426_p2;
reg   [15:0] p_Val2_68_reg_843;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_201_reg_848;
wire   [15:0] p_Val2_69_fu_452_p2;
reg   [15:0] p_Val2_69_reg_853;
wire    ap_CS_fsm_state9;
reg   [0:0] signbit_reg_858;
wire   [7:0] p_Val2_71_fu_486_p2;
reg   [7:0] p_Val2_71_reg_865;
wire   [0:0] newsignbit_fu_492_p3;
reg   [0:0] newsignbit_reg_871;
wire   [0:0] carry_fu_506_p2;
reg   [0:0] carry_reg_877;
reg   [1:0] tmp_150_reg_884;
wire   [0:0] p_38_i_i_fu_564_p2;
reg   [0:0] p_38_i_i_reg_890;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_151_fu_580_p2;
reg   [0:0] tmp_151_reg_895;
wire   [0:0] brmerge40_demorgan_i_fu_591_p2;
reg   [0:0] brmerge40_demorgan_i_reg_900;
wire   [0:0] underflow_fu_608_p2;
reg   [0:0] underflow_reg_905;
wire   [0:0] brmerge_i_i_i_fu_613_p2;
reg   [0:0] brmerge_i_i_i_reg_910;
wire   [7:0] sum_V_fu_640_p3;
wire    ap_CS_fsm_state11;
reg   [0:0] isneg_reg_920;
wire    ap_CS_fsm_state12;
wire   [7:0] result_V_fu_670_p2;
reg   [7:0] result_V_reg_927;
reg   [0:0] newsignbit_10_reg_933;
wire   [6:0] tmp_193_fu_730_p1;
reg   [6:0] tmp_193_reg_940;
wire    ap_CS_fsm_state13;
wire   [0:0] tmp_144_fu_734_p2;
reg   [0:0] tmp_144_reg_945;
reg   [4:0] co_reg_128;
reg   [5:0] h_reg_139;
reg   [5:0] w_reg_151;
wire    ap_CS_fsm_state14;
reg   [7:0] p_Val2_s_reg_163;
reg   [4:0] ci_reg_175;
wire   [63:0] tmp_fu_198_p1;
wire   [63:0] tmp_212_cast_fu_307_p1;
wire  signed [63:0] tmp_213_cast_fu_339_p1;
wire   [63:0] tmp_221_cast_fu_416_p1;
wire   [9:0] tmp_s_fu_203_p3;
wire   [7:0] tmp_183_fu_215_p3;
wire   [10:0] p_shl2_cast_fu_211_p1;
wire   [10:0] p_shl3_cast_fu_223_p1;
wire   [5:0] tmp_185_fu_233_p3;
wire   [10:0] p_shl1_cast_fu_241_p1;
wire   [10:0] tmp_187_fu_261_p2;
wire   [11:0] tmp_188_fu_274_p3;
wire   [15:0] p_shl4_cast_fu_266_p3;
wire   [15:0] p_shl5_cast_fu_282_p1;
wire   [15:0] tmp_190_fu_302_p2;
wire   [10:0] tmp_145_cast_fu_330_p1;
wire   [10:0] tmp_191_fu_334_p2;
wire   [9:0] tmp_192_fu_344_p3;
wire   [5:0] tmp_194_fu_356_p3;
wire   [10:0] p_shl8_cast_fu_352_p1;
wire   [10:0] p_shl9_cast_fu_364_p1;
wire   [10:0] tmp_195_fu_368_p2;
wire   [10:0] tmp_196_fu_374_p2;
wire   [11:0] tmp_197_fu_387_p3;
wire   [15:0] p_shl6_cast_fu_379_p3;
wire   [15:0] p_shl7_cast_fu_395_p1;
wire   [15:0] tmp_198_fu_399_p2;
wire  signed [7:0] p_Val2_68_fu_426_p0;
wire  signed [7:0] p_Val2_68_fu_426_p1;
wire   [13:0] tmp_146_fu_440_p3;
wire  signed [15:0] tmp_192_cast_fu_448_p1;
wire   [7:0] p_Val2_70_fu_465_p4;
wire   [7:0] tmp_147_fu_475_p1;
wire   [0:0] tmp_202_fu_478_p3;
wire   [0:0] tmp_148_fu_500_p2;
wire   [0:0] Range1_all_ones_fu_529_p2;
wire   [0:0] Range1_all_zeros_fu_534_p2;
wire   [0:0] tmp_204_fu_522_p3;
wire   [0:0] tmp_149_fu_546_p2;
wire   [0:0] p_41_i_i_fu_552_p2;
wire   [0:0] deleted_zeros_fu_539_p3;
wire   [0:0] p_not_i_i_fu_569_p2;
wire   [0:0] brmerge_i_i1_fu_575_p2;
wire   [0:0] deleted_ones_fu_557_p3;
wire   [0:0] tmp2_demorgan_fu_596_p2;
wire   [0:0] tmp2_fu_602_p2;
wire   [0:0] overflow_fu_585_p2;
wire   [0:0] tmp3_fu_619_p2;
wire   [0:0] underflow_not_fu_623_p2;
wire   [7:0] p_Val2_76_mux_fu_628_p3;
wire   [7:0] p_Val2_s_63_fu_634_p3;
wire  signed [8:0] tmp_142_fu_652_p1;
wire  signed [8:0] tmp_141_fu_648_p1;
wire   [8:0] p_Val2_66_fu_656_p2;
wire   [0:0] tmp_143_fu_684_p2;
wire   [0:0] isneg_not_fu_698_p2;
wire   [0:0] brmerge_i_i_fu_694_p2;
wire   [0:0] underflow_10_fu_689_p2;
wire   [0:0] brmerge9_fu_703_p2;
wire   [7:0] result_V_mux_fu_708_p3;
wire   [7:0] p_result_V_fu_715_p3;
wire   [7:0] result_1_fu_722_p3;
wire   [6:0] p_s_fu_740_p3;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ci_reg_175 <= ci_4_reg_808;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond9_fu_292_p2))) begin
        ci_reg_175 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond8_fu_251_p2 == 1'd1))) begin
        co_reg_128 <= co_10_reg_754;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_128 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_186_p2 == 1'd0))) begin
        h_reg_139 <= 6'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond9_fu_292_p2 == 1'd1))) begin
        h_reg_139 <= h_10_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_s_reg_163 <= sum_V_fu_640_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond9_fu_292_p2))) begin
        p_Val2_s_reg_163 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond8_fu_251_p2))) begin
        w_reg_151 <= 6'd1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        w_reg_151 <= w_10_reg_823;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond9_fu_292_p2))) begin
        ShuffleConvs_0_Downs_reg_795 <= tmp_212_cast_fu_307_p1;
        tmp_140_cast_reg_790[5 : 0] <= tmp_140_cast_fu_298_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_186_p2 == 1'd0))) begin
        bias_V_addr_reg_769 <= tmp_fu_198_p1;
        tmp_184_reg_759[10 : 3] <= tmp_184_fu_227_p2[10 : 3];
        tmp_186_reg_764[10 : 1] <= tmp_186_fu_245_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        brmerge40_demorgan_i_reg_900 <= brmerge40_demorgan_i_fu_591_p2;
        brmerge_i_i_i_reg_910 <= brmerge_i_i_i_fu_613_p2;
        p_38_i_i_reg_890 <= p_38_i_i_fu_564_p2;
        tmp_151_reg_895 <= tmp_151_fu_580_p2;
        underflow_reg_905 <= underflow_fu_608_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        carry_reg_877 <= carry_fu_506_p2;
        newsignbit_reg_871 <= p_Val2_71_fu_486_p2[32'd7];
        p_Val2_69_reg_853 <= p_Val2_69_fu_452_p2;
        p_Val2_71_reg_865 <= p_Val2_71_fu_486_p2;
        signbit_reg_858 <= p_Val2_69_fu_452_p2[32'd15];
        tmp_150_reg_884 <= {{p_Val2_69_fu_452_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ci_4_reg_808 <= ci_4_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_10_reg_754 <= co_10_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        conv1_output_p_V_loa_reg_838 <= conv1_output_p_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        isneg_reg_920 <= p_Val2_66_fu_656_p2[32'd8];
        newsignbit_10_reg_933 <= result_V_fu_670_p2[32'd7];
        result_V_reg_927 <= result_V_fu_670_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_68_reg_843 <= p_Val2_68_fu_426_p2;
        tmp_201_reg_848 <= p_Val2_68_fu_426_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_144_reg_945 <= tmp_144_fu_734_p2;
        tmp_193_reg_940 <= tmp_193_fu_730_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond8_fu_251_p2))) begin
        tmp_189_reg_782[15 : 1] <= tmp_189_fu_286_p2[15 : 1];
        tmp_cast_reg_777[5 : 0] <= tmp_cast_fu_257_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond_fu_318_p2))) begin
        tmp_199_reg_818 <= tmp_199_fu_405_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_fu_318_p2))) begin
        w_10_reg_823 <= w_10_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_load_reg_833 <= weight_V_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ShuffleConvs_0_Downs_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ShuffleConvs_0_Downs_we0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_186_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_186_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_p_V_ce0 = 1'b1;
    end else begin
        conv1_output_p_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_186_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond8_fu_251_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond9_fu_292_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_fu_318_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_529_p2 = ((tmp_150_reg_884 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_534_p2 = ((tmp_150_reg_884 == 2'd0) ? 1'b1 : 1'b0);

assign ShuffleConvs_0_Downs_address0 = ShuffleConvs_0_Downs_reg_795;

assign ShuffleConvs_0_Downs_d0 = p_s_fu_740_p3;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_769;

assign brmerge40_demorgan_i_fu_591_p2 = (newsignbit_reg_871 & deleted_ones_fu_557_p3);

assign brmerge9_fu_703_p2 = (newsignbit_10_reg_933 | isneg_not_fu_698_p2);

assign brmerge_i_i1_fu_575_p2 = (newsignbit_reg_871 | p_not_i_i_fu_569_p2);

assign brmerge_i_i_fu_694_p2 = (isneg_reg_920 ^ newsignbit_10_reg_933);

assign brmerge_i_i_i_fu_613_p2 = (underflow_fu_608_p2 | overflow_fu_585_p2);

assign carry_fu_506_p2 = (tmp_202_fu_478_p3 & tmp_148_fu_500_p2);

assign ci_4_fu_324_p2 = (ci_reg_175 + 5'd1);

assign co_10_fu_192_p2 = (co_reg_128 + 5'd1);

assign conv1_output_p_V_address0 = tmp_221_cast_fu_416_p1;

assign deleted_ones_fu_557_p3 = ((carry_reg_877[0:0] === 1'b1) ? p_41_i_i_fu_552_p2 : Range1_all_ones_fu_529_p2);

assign deleted_zeros_fu_539_p3 = ((carry_reg_877[0:0] === 1'b1) ? Range1_all_ones_fu_529_p2 : Range1_all_zeros_fu_534_p2);

assign exitcond7_fu_186_p2 = ((co_reg_128 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond8_fu_251_p2 = ((h_reg_139 == 6'd33) ? 1'b1 : 1'b0);

assign exitcond9_fu_292_p2 = ((w_reg_151 == 6'd33) ? 1'b1 : 1'b0);

assign exitcond_fu_318_p2 = ((ci_reg_175 == 5'd24) ? 1'b1 : 1'b0);

assign h_10_fu_312_p2 = (h_reg_139 + 6'd1);

assign isneg_not_fu_698_p2 = (isneg_reg_920 ^ 1'd1);

assign newsignbit_fu_492_p3 = p_Val2_71_fu_486_p2[32'd7];

assign overflow_fu_585_p2 = (brmerge_i_i1_fu_575_p2 & tmp_151_fu_580_p2);

assign p_38_i_i_fu_564_p2 = (carry_reg_877 & Range1_all_ones_fu_529_p2);

assign p_41_i_i_fu_552_p2 = (signbit_reg_858 & tmp_149_fu_546_p2);

assign p_Val2_66_fu_656_p2 = ($signed(tmp_142_fu_652_p1) + $signed(tmp_141_fu_648_p1));

assign p_Val2_68_fu_426_p0 = weight_V_load_reg_833;

assign p_Val2_68_fu_426_p1 = conv1_output_p_V_loa_reg_838;

assign p_Val2_68_fu_426_p2 = ($signed(p_Val2_68_fu_426_p0) * $signed(p_Val2_68_fu_426_p1));

assign p_Val2_69_fu_452_p2 = ($signed(tmp_192_cast_fu_448_p1) + $signed(p_Val2_68_reg_843));

assign p_Val2_70_fu_465_p4 = {{p_Val2_69_fu_452_p2[13:6]}};

assign p_Val2_71_fu_486_p2 = (p_Val2_70_fu_465_p4 + tmp_147_fu_475_p1);

assign p_Val2_76_mux_fu_628_p3 = ((brmerge_i_i_i_reg_910[0:0] === 1'b1) ? 8'd127 : p_Val2_71_reg_865);

assign p_Val2_s_63_fu_634_p3 = ((underflow_reg_905[0:0] === 1'b1) ? 8'd128 : p_Val2_71_reg_865);

assign p_not_i_i_fu_569_p2 = (deleted_zeros_fu_539_p3 ^ 1'd1);

assign p_result_V_fu_715_p3 = ((underflow_10_fu_689_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_927);

assign p_s_fu_740_p3 = ((tmp_144_reg_945[0:0] === 1'b1) ? tmp_193_reg_940 : 7'd0);

assign p_shl1_cast_fu_241_p1 = tmp_185_fu_233_p3;

assign p_shl2_cast_fu_211_p1 = tmp_s_fu_203_p3;

assign p_shl3_cast_fu_223_p1 = tmp_183_fu_215_p3;

assign p_shl4_cast_fu_266_p3 = {{tmp_187_fu_261_p2}, {5'd0}};

assign p_shl5_cast_fu_282_p1 = tmp_188_fu_274_p3;

assign p_shl6_cast_fu_379_p3 = {{tmp_196_fu_374_p2}, {5'd0}};

assign p_shl7_cast_fu_395_p1 = tmp_197_fu_387_p3;

assign p_shl8_cast_fu_352_p1 = tmp_192_fu_344_p3;

assign p_shl9_cast_fu_364_p1 = tmp_194_fu_356_p3;

assign result_1_fu_722_p3 = ((brmerge9_fu_703_p2[0:0] === 1'b1) ? result_V_mux_fu_708_p3 : p_result_V_fu_715_p3);

assign result_V_fu_670_p2 = (bias_V_q0 + p_Val2_s_reg_163);

assign result_V_mux_fu_708_p3 = ((brmerge_i_i_fu_694_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_927);

assign sum_V_fu_640_p3 = ((underflow_not_fu_623_p2[0:0] === 1'b1) ? p_Val2_76_mux_fu_628_p3 : p_Val2_s_63_fu_634_p3);

assign tmp2_demorgan_fu_596_p2 = (p_38_i_i_fu_564_p2 | brmerge40_demorgan_i_fu_591_p2);

assign tmp2_fu_602_p2 = (tmp2_demorgan_fu_596_p2 ^ 1'd1);

assign tmp3_fu_619_p2 = (brmerge40_demorgan_i_reg_900 | tmp_151_reg_895);

assign tmp_140_cast_fu_298_p1 = w_reg_151;

assign tmp_141_fu_648_p1 = $signed(p_Val2_s_reg_163);

assign tmp_142_fu_652_p1 = $signed(bias_V_q0);

assign tmp_143_fu_684_p2 = (newsignbit_10_reg_933 ^ 1'd1);

assign tmp_144_fu_734_p2 = (($signed(result_1_fu_722_p3) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign tmp_145_cast_fu_330_p1 = ci_reg_175;

assign tmp_146_fu_440_p3 = {{p_Val2_s_reg_163}, {6'd0}};

assign tmp_147_fu_475_p1 = tmp_201_reg_848;

assign tmp_148_fu_500_p2 = (newsignbit_fu_492_p3 ^ 1'd1);

assign tmp_149_fu_546_p2 = (tmp_204_fu_522_p3 ^ 1'd1);

assign tmp_151_fu_580_p2 = (signbit_reg_858 ^ 1'd1);

assign tmp_183_fu_215_p3 = {{co_reg_128}, {3'd0}};

assign tmp_184_fu_227_p2 = (p_shl2_cast_fu_211_p1 - p_shl3_cast_fu_223_p1);

assign tmp_185_fu_233_p3 = {{co_reg_128}, {1'd0}};

assign tmp_186_fu_245_p2 = (p_shl1_cast_fu_241_p1 + p_shl2_cast_fu_211_p1);

assign tmp_187_fu_261_p2 = (tmp_cast_fu_257_p1 + tmp_186_reg_764);

assign tmp_188_fu_274_p3 = {{tmp_187_fu_261_p2}, {1'd0}};

assign tmp_189_fu_286_p2 = (p_shl4_cast_fu_266_p3 + p_shl5_cast_fu_282_p1);

assign tmp_190_fu_302_p2 = (tmp_189_reg_782 + tmp_140_cast_fu_298_p1);

assign tmp_191_fu_334_p2 = (tmp_145_cast_fu_330_p1 + tmp_184_reg_759);

assign tmp_192_cast_fu_448_p1 = $signed(tmp_146_fu_440_p3);

assign tmp_192_fu_344_p3 = {{ci_reg_175}, {5'd0}};

assign tmp_193_fu_730_p1 = result_1_fu_722_p3[6:0];

assign tmp_194_fu_356_p3 = {{ci_reg_175}, {1'd0}};

assign tmp_195_fu_368_p2 = (p_shl8_cast_fu_352_p1 + p_shl9_cast_fu_364_p1);

assign tmp_196_fu_374_p2 = (tmp_cast_reg_777 + tmp_195_fu_368_p2);

assign tmp_197_fu_387_p3 = {{tmp_196_fu_374_p2}, {1'd0}};

assign tmp_198_fu_399_p2 = (p_shl6_cast_fu_379_p3 + p_shl7_cast_fu_395_p1);

assign tmp_199_fu_405_p2 = (tmp_140_cast_reg_790 + tmp_198_fu_399_p2);

assign tmp_202_fu_478_p3 = p_Val2_69_fu_452_p2[32'd13];

assign tmp_204_fu_522_p3 = p_Val2_69_reg_853[32'd14];

assign tmp_212_cast_fu_307_p1 = tmp_190_fu_302_p2;

assign tmp_213_cast_fu_339_p1 = $signed(tmp_191_fu_334_p2);

assign tmp_221_cast_fu_416_p1 = tmp_199_reg_818;

assign tmp_cast_fu_257_p1 = h_reg_139;

assign tmp_fu_198_p1 = co_reg_128;

assign tmp_s_fu_203_p3 = {{co_reg_128}, {5'd0}};

assign underflow_10_fu_689_p2 = (isneg_reg_920 & tmp_143_fu_684_p2);

assign underflow_fu_608_p2 = (signbit_reg_858 & tmp2_fu_602_p2);

assign underflow_not_fu_623_p2 = (tmp3_fu_619_p2 | p_38_i_i_reg_890);

assign w_10_fu_410_p2 = (6'd1 + w_reg_151);

assign weight_V_address0 = tmp_213_cast_fu_339_p1;

always @ (posedge ap_clk) begin
    tmp_184_reg_759[2:0] <= 3'b000;
    tmp_186_reg_764[0] <= 1'b0;
    tmp_cast_reg_777[10:6] <= 5'b00000;
    tmp_189_reg_782[0] <= 1'b0;
    tmp_140_cast_reg_790[15:6] <= 10'b0000000000;
end

endmodule //subconv_1x1_32_p
