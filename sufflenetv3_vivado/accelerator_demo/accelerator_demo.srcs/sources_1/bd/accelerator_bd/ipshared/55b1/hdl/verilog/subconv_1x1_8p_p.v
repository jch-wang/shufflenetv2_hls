// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_1x1_8p_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        shuffleunit1_7_outpu_address0,
        shuffleunit1_7_outpu_ce0,
        shuffleunit1_7_outpu_q0,
        ShuffleConvs_2_Downs_address0,
        ShuffleConvs_2_Downs_ce0,
        ShuffleConvs_2_Downs_we0,
        ShuffleConvs_2_Downs_d0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [6:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [13:0] shuffleunit1_7_outpu_address0;
output   shuffleunit1_7_outpu_ce0;
input  [7:0] shuffleunit1_7_outpu_q0;
output  [13:0] ShuffleConvs_2_Downs_address0;
output   ShuffleConvs_2_Downs_ce0;
output   ShuffleConvs_2_Downs_we0;
output  [7:0] ShuffleConvs_2_Downs_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg shuffleunit1_7_outpu_ce0;
reg ShuffleConvs_2_Downs_ce0;
reg ShuffleConvs_2_Downs_we0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] co_7_fu_194_p2;
reg   [6:0] co_7_reg_776;
wire    ap_CS_fsm_state2;
wire   [14:0] tmp_126_fu_229_p2;
reg   [14:0] tmp_126_reg_781;
wire   [0:0] exitcond7_fu_188_p2;
wire   [10:0] tmp_129_fu_259_p2;
reg   [10:0] tmp_129_reg_786;
reg   [6:0] bias_V_addr_reg_791;
wire   [10:0] tmp_cast_fu_271_p1;
reg   [10:0] tmp_cast_reg_799;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond8_fu_265_p2;
wire   [14:0] tmp_133_fu_304_p2;
reg   [14:0] tmp_133_reg_804;
wire   [14:0] tmp_104_cast_fu_316_p1;
reg   [14:0] tmp_104_cast_reg_812;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond9_fu_310_p2;
reg   [13:0] ShuffleConvs_2_Downs_reg_817;
wire   [3:0] h_7_fu_330_p2;
wire   [6:0] ci_1_fu_342_p2;
reg   [6:0] ci_1_reg_830;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_fu_336_p2;
wire   [14:0] tmp_144_fu_427_p2;
reg   [14:0] tmp_144_reg_840;
wire   [3:0] w_7_fu_432_p2;
reg   [3:0] w_7_reg_845;
wire    ap_CS_fsm_state6;
reg   [7:0] weight_V_load_reg_855;
reg   [7:0] shuffleunit1_7_outpu_1_reg_860;
wire    ap_CS_fsm_state7;
wire   [15:0] p_Val2_47_fu_448_p2;
reg   [15:0] p_Val2_47_reg_865;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_146_reg_870;
wire   [15:0] p_Val2_48_fu_474_p2;
reg   [15:0] p_Val2_48_reg_875;
wire    ap_CS_fsm_state9;
reg   [0:0] signbit_reg_880;
wire   [7:0] p_Val2_50_fu_508_p2;
reg   [7:0] p_Val2_50_reg_887;
wire   [0:0] newsignbit_fu_514_p3;
reg   [0:0] newsignbit_reg_893;
wire   [0:0] carry_fu_528_p2;
reg   [0:0] carry_reg_899;
reg   [1:0] tmp_114_reg_906;
wire   [0:0] p_38_i_i_fu_586_p2;
reg   [0:0] p_38_i_i_reg_912;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_115_fu_602_p2;
reg   [0:0] tmp_115_reg_917;
wire   [0:0] brmerge40_demorgan_i_fu_613_p2;
reg   [0:0] brmerge40_demorgan_i_reg_922;
wire   [0:0] underflow_fu_630_p2;
reg   [0:0] underflow_reg_927;
wire   [0:0] brmerge_i_i_i_fu_635_p2;
reg   [0:0] brmerge_i_i_i_reg_932;
wire   [7:0] sum_V_fu_662_p3;
wire    ap_CS_fsm_state11;
reg   [0:0] isneg_reg_942;
wire    ap_CS_fsm_state12;
wire   [7:0] result_V_fu_692_p2;
reg   [7:0] result_V_reg_949;
reg   [0:0] newsignbit_7_reg_955;
wire   [6:0] tmp_137_fu_752_p1;
reg   [6:0] tmp_137_reg_962;
wire    ap_CS_fsm_state13;
wire   [0:0] tmp_108_fu_756_p2;
reg   [0:0] tmp_108_reg_967;
reg   [6:0] co_reg_130;
reg   [3:0] h_reg_141;
reg   [3:0] w_reg_153;
wire    ap_CS_fsm_state14;
reg   [7:0] p_Val2_s_reg_165;
reg   [6:0] ci_reg_177;
wire   [63:0] tmp_fu_200_p1;
wire   [63:0] tmp_152_cast_fu_325_p1;
wire  signed [63:0] tmp_153_cast_fu_357_p1;
wire   [63:0] tmp_161_cast_fu_438_p1;
wire   [13:0] tmp_s_fu_205_p3;
wire   [11:0] tmp_125_fu_217_p3;
wire   [14:0] p_shl2_cast_fu_213_p1;
wire   [14:0] p_shl3_cast_fu_225_p1;
wire   [9:0] tmp_127_fu_235_p3;
wire   [7:0] tmp_128_fu_247_p3;
wire   [10:0] p_shl1_cast_fu_255_p1;
wire   [10:0] p_shl_cast_fu_243_p1;
wire   [10:0] tmp_130_fu_275_p2;
wire   [13:0] tmp_131_fu_280_p3;
wire   [11:0] tmp_132_fu_292_p3;
wire   [14:0] p_shl4_cast_fu_288_p1;
wire   [14:0] p_shl5_cast_fu_300_p1;
wire   [14:0] tmp_134_fu_320_p2;
wire   [14:0] tmp_109_cast_fu_348_p1;
wire   [14:0] tmp_135_fu_352_p2;
wire   [9:0] tmp_136_fu_362_p3;
wire   [7:0] tmp_138_fu_374_p3;
wire   [10:0] p_shl8_cast_fu_370_p1;
wire   [10:0] p_shl9_cast_fu_382_p1;
wire   [10:0] tmp_139_fu_386_p2;
wire   [10:0] tmp_140_fu_392_p2;
wire   [13:0] tmp_141_fu_397_p3;
wire   [11:0] tmp_142_fu_409_p3;
wire   [14:0] p_shl6_cast_fu_405_p1;
wire   [14:0] p_shl7_cast_fu_417_p1;
wire   [14:0] tmp_143_fu_421_p2;
wire  signed [7:0] p_Val2_47_fu_448_p0;
wire  signed [7:0] p_Val2_47_fu_448_p1;
wire   [13:0] tmp_110_fu_462_p3;
wire  signed [15:0] tmp_144_cast_fu_470_p1;
wire   [7:0] p_Val2_49_fu_487_p4;
wire   [7:0] tmp_111_fu_497_p1;
wire   [0:0] tmp_147_fu_500_p3;
wire   [0:0] tmp_112_fu_522_p2;
wire   [0:0] Range1_all_ones_fu_551_p2;
wire   [0:0] Range1_all_zeros_fu_556_p2;
wire   [0:0] tmp_149_fu_544_p3;
wire   [0:0] tmp_113_fu_568_p2;
wire   [0:0] p_41_i_i_fu_574_p2;
wire   [0:0] deleted_zeros_fu_561_p3;
wire   [0:0] p_not_i_i_fu_591_p2;
wire   [0:0] brmerge_i_i7_fu_597_p2;
wire   [0:0] deleted_ones_fu_579_p3;
wire   [0:0] tmp2_demorgan_fu_618_p2;
wire   [0:0] tmp2_fu_624_p2;
wire   [0:0] overflow_fu_607_p2;
wire   [0:0] tmp3_fu_641_p2;
wire   [0:0] underflow_not_fu_645_p2;
wire   [7:0] p_Val2_55_mux_fu_650_p3;
wire   [7:0] p_Val2_s_51_fu_656_p3;
wire  signed [8:0] tmp_106_fu_674_p1;
wire  signed [8:0] tmp_105_fu_670_p1;
wire   [8:0] p_Val2_45_fu_678_p2;
wire   [0:0] tmp_107_fu_706_p2;
wire   [0:0] isneg_not_fu_720_p2;
wire   [0:0] brmerge_i_i_fu_716_p2;
wire   [0:0] underflow_7_fu_711_p2;
wire   [0:0] brmerge9_fu_725_p2;
wire   [7:0] result_V_mux_fu_730_p3;
wire   [7:0] p_result_V_fu_737_p3;
wire   [7:0] result_1_fu_744_p3;
wire   [6:0] p_s_fu_762_p3;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ci_reg_177 <= ci_1_reg_830;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond9_fu_310_p2))) begin
        ci_reg_177 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond8_fu_265_p2 == 1'd1))) begin
        co_reg_130 <= co_7_reg_776;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_130 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_188_p2 == 1'd0))) begin
        h_reg_141 <= 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond9_fu_310_p2 == 1'd1))) begin
        h_reg_141 <= h_7_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_s_reg_165 <= sum_V_fu_662_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond9_fu_310_p2))) begin
        p_Val2_s_reg_165 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond8_fu_265_p2))) begin
        w_reg_153 <= 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        w_reg_153 <= w_7_reg_845;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond9_fu_310_p2))) begin
        ShuffleConvs_2_Downs_reg_817 <= tmp_152_cast_fu_325_p1;
        tmp_104_cast_reg_812[3 : 0] <= tmp_104_cast_fu_316_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_188_p2 == 1'd0))) begin
        bias_V_addr_reg_791 <= tmp_fu_200_p1;
        tmp_126_reg_781[14 : 5] <= tmp_126_fu_229_p2[14 : 5];
        tmp_129_reg_786[10 : 1] <= tmp_129_fu_259_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        brmerge40_demorgan_i_reg_922 <= brmerge40_demorgan_i_fu_613_p2;
        brmerge_i_i_i_reg_932 <= brmerge_i_i_i_fu_635_p2;
        p_38_i_i_reg_912 <= p_38_i_i_fu_586_p2;
        tmp_115_reg_917 <= tmp_115_fu_602_p2;
        underflow_reg_927 <= underflow_fu_630_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        carry_reg_899 <= carry_fu_528_p2;
        newsignbit_reg_893 <= p_Val2_50_fu_508_p2[32'd7];
        p_Val2_48_reg_875 <= p_Val2_48_fu_474_p2;
        p_Val2_50_reg_887 <= p_Val2_50_fu_508_p2;
        signbit_reg_880 <= p_Val2_48_fu_474_p2[32'd15];
        tmp_114_reg_906 <= {{p_Val2_48_fu_474_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ci_1_reg_830 <= ci_1_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_7_reg_776 <= co_7_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        isneg_reg_942 <= p_Val2_45_fu_678_p2[32'd8];
        newsignbit_7_reg_955 <= result_V_fu_692_p2[32'd7];
        result_V_reg_949 <= result_V_fu_692_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_47_reg_865 <= p_Val2_47_fu_448_p2;
        tmp_146_reg_870 <= p_Val2_47_fu_448_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        shuffleunit1_7_outpu_1_reg_860 <= shuffleunit1_7_outpu_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_108_reg_967 <= tmp_108_fu_756_p2;
        tmp_137_reg_962 <= tmp_137_fu_752_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond8_fu_265_p2))) begin
        tmp_133_reg_804[14 : 1] <= tmp_133_fu_304_p2[14 : 1];
        tmp_cast_reg_799[3 : 0] <= tmp_cast_fu_271_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond_fu_336_p2))) begin
        tmp_144_reg_840 <= tmp_144_fu_427_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_fu_336_p2))) begin
        w_7_reg_845 <= w_7_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_load_reg_855 <= weight_V_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ShuffleConvs_2_Downs_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ShuffleConvs_2_Downs_we0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_188_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_188_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        shuffleunit1_7_outpu_ce0 = 1'b1;
    end else begin
        shuffleunit1_7_outpu_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_188_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond8_fu_265_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond9_fu_310_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_fu_336_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_551_p2 = ((tmp_114_reg_906 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_556_p2 = ((tmp_114_reg_906 == 2'd0) ? 1'b1 : 1'b0);

assign ShuffleConvs_2_Downs_address0 = ShuffleConvs_2_Downs_reg_817;

assign ShuffleConvs_2_Downs_d0 = p_s_fu_762_p3;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_791;

assign brmerge40_demorgan_i_fu_613_p2 = (newsignbit_reg_893 & deleted_ones_fu_579_p3);

assign brmerge9_fu_725_p2 = (newsignbit_7_reg_955 | isneg_not_fu_720_p2);

assign brmerge_i_i7_fu_597_p2 = (newsignbit_reg_893 | p_not_i_i_fu_591_p2);

assign brmerge_i_i_fu_716_p2 = (isneg_reg_942 ^ newsignbit_7_reg_955);

assign brmerge_i_i_i_fu_635_p2 = (underflow_fu_630_p2 | overflow_fu_607_p2);

assign carry_fu_528_p2 = (tmp_147_fu_500_p3 & tmp_112_fu_522_p2);

assign ci_1_fu_342_p2 = (ci_reg_177 + 7'd1);

assign co_7_fu_194_p2 = (co_reg_130 + 7'd1);

assign deleted_ones_fu_579_p3 = ((carry_reg_899[0:0] === 1'b1) ? p_41_i_i_fu_574_p2 : Range1_all_ones_fu_551_p2);

assign deleted_zeros_fu_561_p3 = ((carry_reg_899[0:0] === 1'b1) ? Range1_all_ones_fu_551_p2 : Range1_all_zeros_fu_556_p2);

assign exitcond7_fu_188_p2 = ((co_reg_130 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond8_fu_265_p2 = ((h_reg_141 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond9_fu_310_p2 = ((w_reg_153 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_fu_336_p2 = ((ci_reg_177 == 7'd96) ? 1'b1 : 1'b0);

assign h_7_fu_330_p2 = (h_reg_141 + 4'd1);

assign isneg_not_fu_720_p2 = (isneg_reg_942 ^ 1'd1);

assign newsignbit_fu_514_p3 = p_Val2_50_fu_508_p2[32'd7];

assign overflow_fu_607_p2 = (brmerge_i_i7_fu_597_p2 & tmp_115_fu_602_p2);

assign p_38_i_i_fu_586_p2 = (carry_reg_899 & Range1_all_ones_fu_551_p2);

assign p_41_i_i_fu_574_p2 = (signbit_reg_880 & tmp_113_fu_568_p2);

assign p_Val2_45_fu_678_p2 = ($signed(tmp_106_fu_674_p1) + $signed(tmp_105_fu_670_p1));

assign p_Val2_47_fu_448_p0 = weight_V_load_reg_855;

assign p_Val2_47_fu_448_p1 = shuffleunit1_7_outpu_1_reg_860;

assign p_Val2_47_fu_448_p2 = ($signed(p_Val2_47_fu_448_p0) * $signed(p_Val2_47_fu_448_p1));

assign p_Val2_48_fu_474_p2 = ($signed(tmp_144_cast_fu_470_p1) + $signed(p_Val2_47_reg_865));

assign p_Val2_49_fu_487_p4 = {{p_Val2_48_fu_474_p2[13:6]}};

assign p_Val2_50_fu_508_p2 = (p_Val2_49_fu_487_p4 + tmp_111_fu_497_p1);

assign p_Val2_55_mux_fu_650_p3 = ((brmerge_i_i_i_reg_932[0:0] === 1'b1) ? 8'd127 : p_Val2_50_reg_887);

assign p_Val2_s_51_fu_656_p3 = ((underflow_reg_927[0:0] === 1'b1) ? 8'd128 : p_Val2_50_reg_887);

assign p_not_i_i_fu_591_p2 = (deleted_zeros_fu_561_p3 ^ 1'd1);

assign p_result_V_fu_737_p3 = ((underflow_7_fu_711_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_949);

assign p_s_fu_762_p3 = ((tmp_108_reg_967[0:0] === 1'b1) ? tmp_137_reg_962 : 7'd0);

assign p_shl1_cast_fu_255_p1 = tmp_128_fu_247_p3;

assign p_shl2_cast_fu_213_p1 = tmp_s_fu_205_p3;

assign p_shl3_cast_fu_225_p1 = tmp_125_fu_217_p3;

assign p_shl4_cast_fu_288_p1 = tmp_131_fu_280_p3;

assign p_shl5_cast_fu_300_p1 = tmp_132_fu_292_p3;

assign p_shl6_cast_fu_405_p1 = tmp_141_fu_397_p3;

assign p_shl7_cast_fu_417_p1 = tmp_142_fu_409_p3;

assign p_shl8_cast_fu_370_p1 = tmp_136_fu_362_p3;

assign p_shl9_cast_fu_382_p1 = tmp_138_fu_374_p3;

assign p_shl_cast_fu_243_p1 = tmp_127_fu_235_p3;

assign result_1_fu_744_p3 = ((brmerge9_fu_725_p2[0:0] === 1'b1) ? result_V_mux_fu_730_p3 : p_result_V_fu_737_p3);

assign result_V_fu_692_p2 = (bias_V_q0 + p_Val2_s_reg_165);

assign result_V_mux_fu_730_p3 = ((brmerge_i_i_fu_716_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_949);

assign shuffleunit1_7_outpu_address0 = tmp_161_cast_fu_438_p1;

assign sum_V_fu_662_p3 = ((underflow_not_fu_645_p2[0:0] === 1'b1) ? p_Val2_55_mux_fu_650_p3 : p_Val2_s_51_fu_656_p3);

assign tmp2_demorgan_fu_618_p2 = (p_38_i_i_fu_586_p2 | brmerge40_demorgan_i_fu_613_p2);

assign tmp2_fu_624_p2 = (tmp2_demorgan_fu_618_p2 ^ 1'd1);

assign tmp3_fu_641_p2 = (brmerge40_demorgan_i_reg_922 | tmp_115_reg_917);

assign tmp_104_cast_fu_316_p1 = w_reg_153;

assign tmp_105_fu_670_p1 = $signed(p_Val2_s_reg_165);

assign tmp_106_fu_674_p1 = $signed(bias_V_q0);

assign tmp_107_fu_706_p2 = (newsignbit_7_reg_955 ^ 1'd1);

assign tmp_108_fu_756_p2 = (($signed(result_1_fu_744_p3) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign tmp_109_cast_fu_348_p1 = ci_reg_177;

assign tmp_110_fu_462_p3 = {{p_Val2_s_reg_165}, {6'd0}};

assign tmp_111_fu_497_p1 = tmp_146_reg_870;

assign tmp_112_fu_522_p2 = (newsignbit_fu_514_p3 ^ 1'd1);

assign tmp_113_fu_568_p2 = (tmp_149_fu_544_p3 ^ 1'd1);

assign tmp_115_fu_602_p2 = (signbit_reg_880 ^ 1'd1);

assign tmp_125_fu_217_p3 = {{co_reg_130}, {5'd0}};

assign tmp_126_fu_229_p2 = (p_shl2_cast_fu_213_p1 - p_shl3_cast_fu_225_p1);

assign tmp_127_fu_235_p3 = {{co_reg_130}, {3'd0}};

assign tmp_128_fu_247_p3 = {{co_reg_130}, {1'd0}};

assign tmp_129_fu_259_p2 = (p_shl1_cast_fu_255_p1 + p_shl_cast_fu_243_p1);

assign tmp_130_fu_275_p2 = (tmp_cast_fu_271_p1 + tmp_129_reg_786);

assign tmp_131_fu_280_p3 = {{tmp_130_fu_275_p2}, {3'd0}};

assign tmp_132_fu_292_p3 = {{tmp_130_fu_275_p2}, {1'd0}};

assign tmp_133_fu_304_p2 = (p_shl4_cast_fu_288_p1 + p_shl5_cast_fu_300_p1);

assign tmp_134_fu_320_p2 = (tmp_133_reg_804 + tmp_104_cast_fu_316_p1);

assign tmp_135_fu_352_p2 = (tmp_109_cast_fu_348_p1 + tmp_126_reg_781);

assign tmp_136_fu_362_p3 = {{ci_reg_177}, {3'd0}};

assign tmp_137_fu_752_p1 = result_1_fu_744_p3[6:0];

assign tmp_138_fu_374_p3 = {{ci_reg_177}, {1'd0}};

assign tmp_139_fu_386_p2 = (p_shl8_cast_fu_370_p1 + p_shl9_cast_fu_382_p1);

assign tmp_140_fu_392_p2 = (tmp_cast_reg_799 + tmp_139_fu_386_p2);

assign tmp_141_fu_397_p3 = {{tmp_140_fu_392_p2}, {3'd0}};

assign tmp_142_fu_409_p3 = {{tmp_140_fu_392_p2}, {1'd0}};

assign tmp_143_fu_421_p2 = (p_shl6_cast_fu_405_p1 + p_shl7_cast_fu_417_p1);

assign tmp_144_cast_fu_470_p1 = $signed(tmp_110_fu_462_p3);

assign tmp_144_fu_427_p2 = (tmp_104_cast_reg_812 + tmp_143_fu_421_p2);

assign tmp_147_fu_500_p3 = p_Val2_48_fu_474_p2[32'd13];

assign tmp_149_fu_544_p3 = p_Val2_48_reg_875[32'd14];

assign tmp_152_cast_fu_325_p1 = tmp_134_fu_320_p2;

assign tmp_153_cast_fu_357_p1 = $signed(tmp_135_fu_352_p2);

assign tmp_161_cast_fu_438_p1 = tmp_144_reg_840;

assign tmp_cast_fu_271_p1 = h_reg_141;

assign tmp_fu_200_p1 = co_reg_130;

assign tmp_s_fu_205_p3 = {{co_reg_130}, {7'd0}};

assign underflow_7_fu_711_p2 = (isneg_reg_942 & tmp_107_fu_706_p2);

assign underflow_fu_630_p2 = (signbit_reg_880 & tmp2_fu_624_p2);

assign underflow_not_fu_645_p2 = (tmp3_fu_641_p2 | p_38_i_i_reg_912);

assign w_7_fu_432_p2 = (4'd1 + w_reg_153);

assign weight_V_address0 = tmp_153_cast_fu_357_p1;

always @ (posedge ap_clk) begin
    tmp_126_reg_781[4:0] <= 5'b00000;
    tmp_129_reg_786[0] <= 1'b0;
    tmp_cast_reg_799[10:4] <= 7'b0000000;
    tmp_133_reg_804[0] <= 1'b0;
    tmp_104_cast_reg_812[14:4] <= 11'b00000000000;
end

endmodule //subconv_1x1_8p_p
