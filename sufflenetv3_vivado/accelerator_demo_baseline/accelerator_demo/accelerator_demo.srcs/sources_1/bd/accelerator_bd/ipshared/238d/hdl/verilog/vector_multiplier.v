// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="vector_multiplier,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=80,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=4,HLS_SYN_FF=2190,HLS_SYN_LUT=2339}" *)

module vector_multiplier (
        ap_clk,
        ap_rst_n,
        m_axi_DATA_A_AWVALID,
        m_axi_DATA_A_AWREADY,
        m_axi_DATA_A_AWADDR,
        m_axi_DATA_A_AWID,
        m_axi_DATA_A_AWLEN,
        m_axi_DATA_A_AWSIZE,
        m_axi_DATA_A_AWBURST,
        m_axi_DATA_A_AWLOCK,
        m_axi_DATA_A_AWCACHE,
        m_axi_DATA_A_AWPROT,
        m_axi_DATA_A_AWQOS,
        m_axi_DATA_A_AWREGION,
        m_axi_DATA_A_AWUSER,
        m_axi_DATA_A_WVALID,
        m_axi_DATA_A_WREADY,
        m_axi_DATA_A_WDATA,
        m_axi_DATA_A_WSTRB,
        m_axi_DATA_A_WLAST,
        m_axi_DATA_A_WID,
        m_axi_DATA_A_WUSER,
        m_axi_DATA_A_ARVALID,
        m_axi_DATA_A_ARREADY,
        m_axi_DATA_A_ARADDR,
        m_axi_DATA_A_ARID,
        m_axi_DATA_A_ARLEN,
        m_axi_DATA_A_ARSIZE,
        m_axi_DATA_A_ARBURST,
        m_axi_DATA_A_ARLOCK,
        m_axi_DATA_A_ARCACHE,
        m_axi_DATA_A_ARPROT,
        m_axi_DATA_A_ARQOS,
        m_axi_DATA_A_ARREGION,
        m_axi_DATA_A_ARUSER,
        m_axi_DATA_A_RVALID,
        m_axi_DATA_A_RREADY,
        m_axi_DATA_A_RDATA,
        m_axi_DATA_A_RLAST,
        m_axi_DATA_A_RID,
        m_axi_DATA_A_RUSER,
        m_axi_DATA_A_RRESP,
        m_axi_DATA_A_BVALID,
        m_axi_DATA_A_BREADY,
        m_axi_DATA_A_BRESP,
        m_axi_DATA_A_BID,
        m_axi_DATA_A_BUSER,
        m_axi_DATA_B_AWVALID,
        m_axi_DATA_B_AWREADY,
        m_axi_DATA_B_AWADDR,
        m_axi_DATA_B_AWID,
        m_axi_DATA_B_AWLEN,
        m_axi_DATA_B_AWSIZE,
        m_axi_DATA_B_AWBURST,
        m_axi_DATA_B_AWLOCK,
        m_axi_DATA_B_AWCACHE,
        m_axi_DATA_B_AWPROT,
        m_axi_DATA_B_AWQOS,
        m_axi_DATA_B_AWREGION,
        m_axi_DATA_B_AWUSER,
        m_axi_DATA_B_WVALID,
        m_axi_DATA_B_WREADY,
        m_axi_DATA_B_WDATA,
        m_axi_DATA_B_WSTRB,
        m_axi_DATA_B_WLAST,
        m_axi_DATA_B_WID,
        m_axi_DATA_B_WUSER,
        m_axi_DATA_B_ARVALID,
        m_axi_DATA_B_ARREADY,
        m_axi_DATA_B_ARADDR,
        m_axi_DATA_B_ARID,
        m_axi_DATA_B_ARLEN,
        m_axi_DATA_B_ARSIZE,
        m_axi_DATA_B_ARBURST,
        m_axi_DATA_B_ARLOCK,
        m_axi_DATA_B_ARCACHE,
        m_axi_DATA_B_ARPROT,
        m_axi_DATA_B_ARQOS,
        m_axi_DATA_B_ARREGION,
        m_axi_DATA_B_ARUSER,
        m_axi_DATA_B_RVALID,
        m_axi_DATA_B_RREADY,
        m_axi_DATA_B_RDATA,
        m_axi_DATA_B_RLAST,
        m_axi_DATA_B_RID,
        m_axi_DATA_B_RUSER,
        m_axi_DATA_B_RRESP,
        m_axi_DATA_B_BVALID,
        m_axi_DATA_B_BREADY,
        m_axi_DATA_B_BRESP,
        m_axi_DATA_B_BID,
        m_axi_DATA_B_BUSER,
        m_axi_DATA_C_AWVALID,
        m_axi_DATA_C_AWREADY,
        m_axi_DATA_C_AWADDR,
        m_axi_DATA_C_AWID,
        m_axi_DATA_C_AWLEN,
        m_axi_DATA_C_AWSIZE,
        m_axi_DATA_C_AWBURST,
        m_axi_DATA_C_AWLOCK,
        m_axi_DATA_C_AWCACHE,
        m_axi_DATA_C_AWPROT,
        m_axi_DATA_C_AWQOS,
        m_axi_DATA_C_AWREGION,
        m_axi_DATA_C_AWUSER,
        m_axi_DATA_C_WVALID,
        m_axi_DATA_C_WREADY,
        m_axi_DATA_C_WDATA,
        m_axi_DATA_C_WSTRB,
        m_axi_DATA_C_WLAST,
        m_axi_DATA_C_WID,
        m_axi_DATA_C_WUSER,
        m_axi_DATA_C_ARVALID,
        m_axi_DATA_C_ARREADY,
        m_axi_DATA_C_ARADDR,
        m_axi_DATA_C_ARID,
        m_axi_DATA_C_ARLEN,
        m_axi_DATA_C_ARSIZE,
        m_axi_DATA_C_ARBURST,
        m_axi_DATA_C_ARLOCK,
        m_axi_DATA_C_ARCACHE,
        m_axi_DATA_C_ARPROT,
        m_axi_DATA_C_ARQOS,
        m_axi_DATA_C_ARREGION,
        m_axi_DATA_C_ARUSER,
        m_axi_DATA_C_RVALID,
        m_axi_DATA_C_RREADY,
        m_axi_DATA_C_RDATA,
        m_axi_DATA_C_RLAST,
        m_axi_DATA_C_RID,
        m_axi_DATA_C_RUSER,
        m_axi_DATA_C_RRESP,
        m_axi_DATA_C_BVALID,
        m_axi_DATA_C_BREADY,
        m_axi_DATA_C_BRESP,
        m_axi_DATA_C_BID,
        m_axi_DATA_C_BUSER,
        s_axi_CTL_AWVALID,
        s_axi_CTL_AWREADY,
        s_axi_CTL_AWADDR,
        s_axi_CTL_WVALID,
        s_axi_CTL_WREADY,
        s_axi_CTL_WDATA,
        s_axi_CTL_WSTRB,
        s_axi_CTL_ARVALID,
        s_axi_CTL_ARREADY,
        s_axi_CTL_ARADDR,
        s_axi_CTL_RVALID,
        s_axi_CTL_RREADY,
        s_axi_CTL_RDATA,
        s_axi_CTL_RRESP,
        s_axi_CTL_BVALID,
        s_axi_CTL_BREADY,
        s_axi_CTL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_pp0_stage0 = 14'd256;
parameter    ap_ST_fsm_state14 = 14'd512;
parameter    ap_ST_fsm_state15 = 14'd1024;
parameter    ap_ST_fsm_state16 = 14'd2048;
parameter    ap_ST_fsm_state17 = 14'd4096;
parameter    ap_ST_fsm_state18 = 14'd8192;
parameter    C_S_AXI_CTL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_A_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_A_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_A_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_A_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_A_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_A_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_A_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_A_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_A_USER_VALUE = 0;
parameter    C_M_AXI_DATA_A_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_A_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_B_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_B_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_B_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_B_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_B_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_B_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_B_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_B_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_B_USER_VALUE = 0;
parameter    C_M_AXI_DATA_B_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_B_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_C_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_C_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_C_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_C_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_C_USER_VALUE = 0;
parameter    C_M_AXI_DATA_C_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_C_CACHE_VALUE = 3;

parameter C_S_AXI_CTL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_A_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_B_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_C_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_DATA_A_AWVALID;
input   m_axi_DATA_A_AWREADY;
output  [C_M_AXI_DATA_A_ADDR_WIDTH - 1:0] m_axi_DATA_A_AWADDR;
output  [C_M_AXI_DATA_A_ID_WIDTH - 1:0] m_axi_DATA_A_AWID;
output  [7:0] m_axi_DATA_A_AWLEN;
output  [2:0] m_axi_DATA_A_AWSIZE;
output  [1:0] m_axi_DATA_A_AWBURST;
output  [1:0] m_axi_DATA_A_AWLOCK;
output  [3:0] m_axi_DATA_A_AWCACHE;
output  [2:0] m_axi_DATA_A_AWPROT;
output  [3:0] m_axi_DATA_A_AWQOS;
output  [3:0] m_axi_DATA_A_AWREGION;
output  [C_M_AXI_DATA_A_AWUSER_WIDTH - 1:0] m_axi_DATA_A_AWUSER;
output   m_axi_DATA_A_WVALID;
input   m_axi_DATA_A_WREADY;
output  [C_M_AXI_DATA_A_DATA_WIDTH - 1:0] m_axi_DATA_A_WDATA;
output  [C_M_AXI_DATA_A_WSTRB_WIDTH - 1:0] m_axi_DATA_A_WSTRB;
output   m_axi_DATA_A_WLAST;
output  [C_M_AXI_DATA_A_ID_WIDTH - 1:0] m_axi_DATA_A_WID;
output  [C_M_AXI_DATA_A_WUSER_WIDTH - 1:0] m_axi_DATA_A_WUSER;
output   m_axi_DATA_A_ARVALID;
input   m_axi_DATA_A_ARREADY;
output  [C_M_AXI_DATA_A_ADDR_WIDTH - 1:0] m_axi_DATA_A_ARADDR;
output  [C_M_AXI_DATA_A_ID_WIDTH - 1:0] m_axi_DATA_A_ARID;
output  [7:0] m_axi_DATA_A_ARLEN;
output  [2:0] m_axi_DATA_A_ARSIZE;
output  [1:0] m_axi_DATA_A_ARBURST;
output  [1:0] m_axi_DATA_A_ARLOCK;
output  [3:0] m_axi_DATA_A_ARCACHE;
output  [2:0] m_axi_DATA_A_ARPROT;
output  [3:0] m_axi_DATA_A_ARQOS;
output  [3:0] m_axi_DATA_A_ARREGION;
output  [C_M_AXI_DATA_A_ARUSER_WIDTH - 1:0] m_axi_DATA_A_ARUSER;
input   m_axi_DATA_A_RVALID;
output   m_axi_DATA_A_RREADY;
input  [C_M_AXI_DATA_A_DATA_WIDTH - 1:0] m_axi_DATA_A_RDATA;
input   m_axi_DATA_A_RLAST;
input  [C_M_AXI_DATA_A_ID_WIDTH - 1:0] m_axi_DATA_A_RID;
input  [C_M_AXI_DATA_A_RUSER_WIDTH - 1:0] m_axi_DATA_A_RUSER;
input  [1:0] m_axi_DATA_A_RRESP;
input   m_axi_DATA_A_BVALID;
output   m_axi_DATA_A_BREADY;
input  [1:0] m_axi_DATA_A_BRESP;
input  [C_M_AXI_DATA_A_ID_WIDTH - 1:0] m_axi_DATA_A_BID;
input  [C_M_AXI_DATA_A_BUSER_WIDTH - 1:0] m_axi_DATA_A_BUSER;
output   m_axi_DATA_B_AWVALID;
input   m_axi_DATA_B_AWREADY;
output  [C_M_AXI_DATA_B_ADDR_WIDTH - 1:0] m_axi_DATA_B_AWADDR;
output  [C_M_AXI_DATA_B_ID_WIDTH - 1:0] m_axi_DATA_B_AWID;
output  [7:0] m_axi_DATA_B_AWLEN;
output  [2:0] m_axi_DATA_B_AWSIZE;
output  [1:0] m_axi_DATA_B_AWBURST;
output  [1:0] m_axi_DATA_B_AWLOCK;
output  [3:0] m_axi_DATA_B_AWCACHE;
output  [2:0] m_axi_DATA_B_AWPROT;
output  [3:0] m_axi_DATA_B_AWQOS;
output  [3:0] m_axi_DATA_B_AWREGION;
output  [C_M_AXI_DATA_B_AWUSER_WIDTH - 1:0] m_axi_DATA_B_AWUSER;
output   m_axi_DATA_B_WVALID;
input   m_axi_DATA_B_WREADY;
output  [C_M_AXI_DATA_B_DATA_WIDTH - 1:0] m_axi_DATA_B_WDATA;
output  [C_M_AXI_DATA_B_WSTRB_WIDTH - 1:0] m_axi_DATA_B_WSTRB;
output   m_axi_DATA_B_WLAST;
output  [C_M_AXI_DATA_B_ID_WIDTH - 1:0] m_axi_DATA_B_WID;
output  [C_M_AXI_DATA_B_WUSER_WIDTH - 1:0] m_axi_DATA_B_WUSER;
output   m_axi_DATA_B_ARVALID;
input   m_axi_DATA_B_ARREADY;
output  [C_M_AXI_DATA_B_ADDR_WIDTH - 1:0] m_axi_DATA_B_ARADDR;
output  [C_M_AXI_DATA_B_ID_WIDTH - 1:0] m_axi_DATA_B_ARID;
output  [7:0] m_axi_DATA_B_ARLEN;
output  [2:0] m_axi_DATA_B_ARSIZE;
output  [1:0] m_axi_DATA_B_ARBURST;
output  [1:0] m_axi_DATA_B_ARLOCK;
output  [3:0] m_axi_DATA_B_ARCACHE;
output  [2:0] m_axi_DATA_B_ARPROT;
output  [3:0] m_axi_DATA_B_ARQOS;
output  [3:0] m_axi_DATA_B_ARREGION;
output  [C_M_AXI_DATA_B_ARUSER_WIDTH - 1:0] m_axi_DATA_B_ARUSER;
input   m_axi_DATA_B_RVALID;
output   m_axi_DATA_B_RREADY;
input  [C_M_AXI_DATA_B_DATA_WIDTH - 1:0] m_axi_DATA_B_RDATA;
input   m_axi_DATA_B_RLAST;
input  [C_M_AXI_DATA_B_ID_WIDTH - 1:0] m_axi_DATA_B_RID;
input  [C_M_AXI_DATA_B_RUSER_WIDTH - 1:0] m_axi_DATA_B_RUSER;
input  [1:0] m_axi_DATA_B_RRESP;
input   m_axi_DATA_B_BVALID;
output   m_axi_DATA_B_BREADY;
input  [1:0] m_axi_DATA_B_BRESP;
input  [C_M_AXI_DATA_B_ID_WIDTH - 1:0] m_axi_DATA_B_BID;
input  [C_M_AXI_DATA_B_BUSER_WIDTH - 1:0] m_axi_DATA_B_BUSER;
output   m_axi_DATA_C_AWVALID;
input   m_axi_DATA_C_AWREADY;
output  [C_M_AXI_DATA_C_ADDR_WIDTH - 1:0] m_axi_DATA_C_AWADDR;
output  [C_M_AXI_DATA_C_ID_WIDTH - 1:0] m_axi_DATA_C_AWID;
output  [7:0] m_axi_DATA_C_AWLEN;
output  [2:0] m_axi_DATA_C_AWSIZE;
output  [1:0] m_axi_DATA_C_AWBURST;
output  [1:0] m_axi_DATA_C_AWLOCK;
output  [3:0] m_axi_DATA_C_AWCACHE;
output  [2:0] m_axi_DATA_C_AWPROT;
output  [3:0] m_axi_DATA_C_AWQOS;
output  [3:0] m_axi_DATA_C_AWREGION;
output  [C_M_AXI_DATA_C_AWUSER_WIDTH - 1:0] m_axi_DATA_C_AWUSER;
output   m_axi_DATA_C_WVALID;
input   m_axi_DATA_C_WREADY;
output  [C_M_AXI_DATA_C_DATA_WIDTH - 1:0] m_axi_DATA_C_WDATA;
output  [C_M_AXI_DATA_C_WSTRB_WIDTH - 1:0] m_axi_DATA_C_WSTRB;
output   m_axi_DATA_C_WLAST;
output  [C_M_AXI_DATA_C_ID_WIDTH - 1:0] m_axi_DATA_C_WID;
output  [C_M_AXI_DATA_C_WUSER_WIDTH - 1:0] m_axi_DATA_C_WUSER;
output   m_axi_DATA_C_ARVALID;
input   m_axi_DATA_C_ARREADY;
output  [C_M_AXI_DATA_C_ADDR_WIDTH - 1:0] m_axi_DATA_C_ARADDR;
output  [C_M_AXI_DATA_C_ID_WIDTH - 1:0] m_axi_DATA_C_ARID;
output  [7:0] m_axi_DATA_C_ARLEN;
output  [2:0] m_axi_DATA_C_ARSIZE;
output  [1:0] m_axi_DATA_C_ARBURST;
output  [1:0] m_axi_DATA_C_ARLOCK;
output  [3:0] m_axi_DATA_C_ARCACHE;
output  [2:0] m_axi_DATA_C_ARPROT;
output  [3:0] m_axi_DATA_C_ARQOS;
output  [3:0] m_axi_DATA_C_ARREGION;
output  [C_M_AXI_DATA_C_ARUSER_WIDTH - 1:0] m_axi_DATA_C_ARUSER;
input   m_axi_DATA_C_RVALID;
output   m_axi_DATA_C_RREADY;
input  [C_M_AXI_DATA_C_DATA_WIDTH - 1:0] m_axi_DATA_C_RDATA;
input   m_axi_DATA_C_RLAST;
input  [C_M_AXI_DATA_C_ID_WIDTH - 1:0] m_axi_DATA_C_RID;
input  [C_M_AXI_DATA_C_RUSER_WIDTH - 1:0] m_axi_DATA_C_RUSER;
input  [1:0] m_axi_DATA_C_RRESP;
input   m_axi_DATA_C_BVALID;
output   m_axi_DATA_C_BREADY;
input  [1:0] m_axi_DATA_C_BRESP;
input  [C_M_AXI_DATA_C_ID_WIDTH - 1:0] m_axi_DATA_C_BID;
input  [C_M_AXI_DATA_C_BUSER_WIDTH - 1:0] m_axi_DATA_C_BUSER;
input   s_axi_CTL_AWVALID;
output   s_axi_CTL_AWREADY;
input  [C_S_AXI_CTL_ADDR_WIDTH - 1:0] s_axi_CTL_AWADDR;
input   s_axi_CTL_WVALID;
output   s_axi_CTL_WREADY;
input  [C_S_AXI_CTL_DATA_WIDTH - 1:0] s_axi_CTL_WDATA;
input  [C_S_AXI_CTL_WSTRB_WIDTH - 1:0] s_axi_CTL_WSTRB;
input   s_axi_CTL_ARVALID;
output   s_axi_CTL_ARREADY;
input  [C_S_AXI_CTL_ADDR_WIDTH - 1:0] s_axi_CTL_ARADDR;
output   s_axi_CTL_RVALID;
input   s_axi_CTL_RREADY;
output  [C_S_AXI_CTL_DATA_WIDTH - 1:0] s_axi_CTL_RDATA;
output  [1:0] s_axi_CTL_RRESP;
output   s_axi_CTL_BVALID;
input   s_axi_CTL_BREADY;
output  [1:0] s_axi_CTL_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] a;
wire   [31:0] b;
wire   [31:0] c;
wire   [31:0] ap_return;
reg    DATA_A_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    DATA_A_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_reg_268;
reg    DATA_B_blk_n_AR;
reg    DATA_B_blk_n_R;
reg    DATA_C_blk_n_AW;
wire    ap_CS_fsm_state8;
reg    DATA_C_blk_n_W;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] ap_reg_pp0_iter3_exitcond_reg_268;
reg    DATA_C_blk_n_B;
wire    ap_CS_fsm_state18;
wire    DATA_A_AWREADY;
wire    DATA_A_WREADY;
reg    DATA_A_ARVALID;
wire    DATA_A_ARREADY;
wire    DATA_A_RVALID;
reg    DATA_A_RREADY;
wire   [31:0] DATA_A_RDATA;
wire    DATA_A_RLAST;
wire   [0:0] DATA_A_RID;
wire   [0:0] DATA_A_RUSER;
wire   [1:0] DATA_A_RRESP;
wire    DATA_A_BVALID;
wire   [1:0] DATA_A_BRESP;
wire   [0:0] DATA_A_BID;
wire   [0:0] DATA_A_BUSER;
wire    DATA_B_AWREADY;
wire    DATA_B_WREADY;
reg    DATA_B_ARVALID;
wire    DATA_B_ARREADY;
wire    DATA_B_RVALID;
reg    DATA_B_RREADY;
wire   [31:0] DATA_B_RDATA;
wire    DATA_B_RLAST;
wire   [0:0] DATA_B_RID;
wire   [0:0] DATA_B_RUSER;
wire   [1:0] DATA_B_RRESP;
wire    DATA_B_BVALID;
wire   [1:0] DATA_B_BRESP;
wire   [0:0] DATA_B_BID;
wire   [0:0] DATA_B_BUSER;
reg    DATA_C_AWVALID;
wire    DATA_C_AWREADY;
reg    DATA_C_WVALID;
wire    DATA_C_WREADY;
wire    DATA_C_ARREADY;
wire    DATA_C_RVALID;
wire   [31:0] DATA_C_RDATA;
wire    DATA_C_RLAST;
wire   [0:0] DATA_C_RID;
wire   [0:0] DATA_C_RUSER;
wire   [1:0] DATA_C_RRESP;
wire    DATA_C_BVALID;
reg    DATA_C_BREADY;
wire   [1:0] DATA_C_BRESP;
wire   [0:0] DATA_C_BID;
wire   [0:0] DATA_C_BUSER;
reg   [6:0] i_reg_149;
reg   [29:0] c5_reg_236;
reg   [29:0] b3_reg_241;
reg   [29:0] a1_reg_246;
reg    ap_sig_ioackin_DATA_A_ARREADY;
reg    ap_sig_ioackin_DATA_B_ARREADY;
reg    ap_block_state2_io;
reg    ap_sig_ioackin_DATA_C_AWREADY;
wire   [0:0] exitcond_fu_220_p2;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
wire    ap_block_state12_pp0_stage0_iter3;
wire    ap_block_state13_pp0_stage0_iter4;
reg    ap_sig_ioackin_DATA_C_WREADY;
reg    ap_block_state13_io;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_reg_268;
reg   [0:0] ap_reg_pp0_iter2_exitcond_reg_268;
wire   [6:0] i_1_fu_226_p2;
reg    ap_enable_reg_pp0_iter0;
reg  signed [31:0] DATA_A_addr_read_reg_277;
reg  signed [31:0] DATA_B_addr_read_reg_282;
wire   [31:0] grp_fu_232_p2;
reg   [31:0] tmp_reg_287;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire   [31:0] tmp_3_fu_190_p1;
wire   [31:0] tmp_4_fu_200_p1;
wire   [31:0] tmp_2_fu_210_p1;
reg    ap_reg_ioackin_DATA_A_ARREADY;
reg    ap_reg_ioackin_DATA_B_ARREADY;
reg    ap_reg_ioackin_DATA_C_AWREADY;
reg    ap_reg_ioackin_DATA_C_WREADY;
reg    ap_block_pp0_stage0_flag00001001;
reg    grp_fu_232_ce;
wire    ap_CS_fsm_state17;
reg   [13:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_reg_ioackin_DATA_A_ARREADY = 1'b0;
#0 ap_reg_ioackin_DATA_B_ARREADY = 1'b0;
#0 ap_reg_ioackin_DATA_C_AWREADY = 1'b0;
#0 ap_reg_ioackin_DATA_C_WREADY = 1'b0;
end

vector_multiplier_CTL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTL_DATA_WIDTH ))
vector_multiplier_CTL_s_axi_U(
    .AWVALID(s_axi_CTL_AWVALID),
    .AWREADY(s_axi_CTL_AWREADY),
    .AWADDR(s_axi_CTL_AWADDR),
    .WVALID(s_axi_CTL_WVALID),
    .WREADY(s_axi_CTL_WREADY),
    .WDATA(s_axi_CTL_WDATA),
    .WSTRB(s_axi_CTL_WSTRB),
    .ARVALID(s_axi_CTL_ARVALID),
    .ARREADY(s_axi_CTL_ARREADY),
    .ARADDR(s_axi_CTL_ARADDR),
    .RVALID(s_axi_CTL_RVALID),
    .RREADY(s_axi_CTL_RREADY),
    .RDATA(s_axi_CTL_RDATA),
    .RRESP(s_axi_CTL_RRESP),
    .BVALID(s_axi_CTL_BVALID),
    .BREADY(s_axi_CTL_BREADY),
    .BRESP(s_axi_CTL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(ap_return),
    .a(a),
    .b(b),
    .c(c)
);

vector_multiplier_DATA_A_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_A_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_A_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_A_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_A_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_A_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_A_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_A_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_A_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_A_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_A_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_A_CACHE_VALUE ))
vector_multiplier_DATA_A_m_axi_U(
    .AWVALID(m_axi_DATA_A_AWVALID),
    .AWREADY(m_axi_DATA_A_AWREADY),
    .AWADDR(m_axi_DATA_A_AWADDR),
    .AWID(m_axi_DATA_A_AWID),
    .AWLEN(m_axi_DATA_A_AWLEN),
    .AWSIZE(m_axi_DATA_A_AWSIZE),
    .AWBURST(m_axi_DATA_A_AWBURST),
    .AWLOCK(m_axi_DATA_A_AWLOCK),
    .AWCACHE(m_axi_DATA_A_AWCACHE),
    .AWPROT(m_axi_DATA_A_AWPROT),
    .AWQOS(m_axi_DATA_A_AWQOS),
    .AWREGION(m_axi_DATA_A_AWREGION),
    .AWUSER(m_axi_DATA_A_AWUSER),
    .WVALID(m_axi_DATA_A_WVALID),
    .WREADY(m_axi_DATA_A_WREADY),
    .WDATA(m_axi_DATA_A_WDATA),
    .WSTRB(m_axi_DATA_A_WSTRB),
    .WLAST(m_axi_DATA_A_WLAST),
    .WID(m_axi_DATA_A_WID),
    .WUSER(m_axi_DATA_A_WUSER),
    .ARVALID(m_axi_DATA_A_ARVALID),
    .ARREADY(m_axi_DATA_A_ARREADY),
    .ARADDR(m_axi_DATA_A_ARADDR),
    .ARID(m_axi_DATA_A_ARID),
    .ARLEN(m_axi_DATA_A_ARLEN),
    .ARSIZE(m_axi_DATA_A_ARSIZE),
    .ARBURST(m_axi_DATA_A_ARBURST),
    .ARLOCK(m_axi_DATA_A_ARLOCK),
    .ARCACHE(m_axi_DATA_A_ARCACHE),
    .ARPROT(m_axi_DATA_A_ARPROT),
    .ARQOS(m_axi_DATA_A_ARQOS),
    .ARREGION(m_axi_DATA_A_ARREGION),
    .ARUSER(m_axi_DATA_A_ARUSER),
    .RVALID(m_axi_DATA_A_RVALID),
    .RREADY(m_axi_DATA_A_RREADY),
    .RDATA(m_axi_DATA_A_RDATA),
    .RLAST(m_axi_DATA_A_RLAST),
    .RID(m_axi_DATA_A_RID),
    .RUSER(m_axi_DATA_A_RUSER),
    .RRESP(m_axi_DATA_A_RRESP),
    .BVALID(m_axi_DATA_A_BVALID),
    .BREADY(m_axi_DATA_A_BREADY),
    .BRESP(m_axi_DATA_A_BRESP),
    .BID(m_axi_DATA_A_BID),
    .BUSER(m_axi_DATA_A_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_A_ARVALID),
    .I_ARREADY(DATA_A_ARREADY),
    .I_ARADDR(tmp_4_fu_200_p1),
    .I_ARID(1'd0),
    .I_ARLEN(32'd64),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(DATA_A_RVALID),
    .I_RREADY(DATA_A_RREADY),
    .I_RDATA(DATA_A_RDATA),
    .I_RID(DATA_A_RID),
    .I_RUSER(DATA_A_RUSER),
    .I_RRESP(DATA_A_RRESP),
    .I_RLAST(DATA_A_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_A_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_A_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_A_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_A_BRESP),
    .I_BID(DATA_A_BID),
    .I_BUSER(DATA_A_BUSER)
);

vector_multiplier_DATA_B_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_B_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_B_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_B_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_B_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_B_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_B_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_B_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_B_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_B_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_B_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_B_CACHE_VALUE ))
vector_multiplier_DATA_B_m_axi_U(
    .AWVALID(m_axi_DATA_B_AWVALID),
    .AWREADY(m_axi_DATA_B_AWREADY),
    .AWADDR(m_axi_DATA_B_AWADDR),
    .AWID(m_axi_DATA_B_AWID),
    .AWLEN(m_axi_DATA_B_AWLEN),
    .AWSIZE(m_axi_DATA_B_AWSIZE),
    .AWBURST(m_axi_DATA_B_AWBURST),
    .AWLOCK(m_axi_DATA_B_AWLOCK),
    .AWCACHE(m_axi_DATA_B_AWCACHE),
    .AWPROT(m_axi_DATA_B_AWPROT),
    .AWQOS(m_axi_DATA_B_AWQOS),
    .AWREGION(m_axi_DATA_B_AWREGION),
    .AWUSER(m_axi_DATA_B_AWUSER),
    .WVALID(m_axi_DATA_B_WVALID),
    .WREADY(m_axi_DATA_B_WREADY),
    .WDATA(m_axi_DATA_B_WDATA),
    .WSTRB(m_axi_DATA_B_WSTRB),
    .WLAST(m_axi_DATA_B_WLAST),
    .WID(m_axi_DATA_B_WID),
    .WUSER(m_axi_DATA_B_WUSER),
    .ARVALID(m_axi_DATA_B_ARVALID),
    .ARREADY(m_axi_DATA_B_ARREADY),
    .ARADDR(m_axi_DATA_B_ARADDR),
    .ARID(m_axi_DATA_B_ARID),
    .ARLEN(m_axi_DATA_B_ARLEN),
    .ARSIZE(m_axi_DATA_B_ARSIZE),
    .ARBURST(m_axi_DATA_B_ARBURST),
    .ARLOCK(m_axi_DATA_B_ARLOCK),
    .ARCACHE(m_axi_DATA_B_ARCACHE),
    .ARPROT(m_axi_DATA_B_ARPROT),
    .ARQOS(m_axi_DATA_B_ARQOS),
    .ARREGION(m_axi_DATA_B_ARREGION),
    .ARUSER(m_axi_DATA_B_ARUSER),
    .RVALID(m_axi_DATA_B_RVALID),
    .RREADY(m_axi_DATA_B_RREADY),
    .RDATA(m_axi_DATA_B_RDATA),
    .RLAST(m_axi_DATA_B_RLAST),
    .RID(m_axi_DATA_B_RID),
    .RUSER(m_axi_DATA_B_RUSER),
    .RRESP(m_axi_DATA_B_RRESP),
    .BVALID(m_axi_DATA_B_BVALID),
    .BREADY(m_axi_DATA_B_BREADY),
    .BRESP(m_axi_DATA_B_BRESP),
    .BID(m_axi_DATA_B_BID),
    .BUSER(m_axi_DATA_B_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_B_ARVALID),
    .I_ARREADY(DATA_B_ARREADY),
    .I_ARADDR(tmp_3_fu_190_p1),
    .I_ARID(1'd0),
    .I_ARLEN(32'd64),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(DATA_B_RVALID),
    .I_RREADY(DATA_B_RREADY),
    .I_RDATA(DATA_B_RDATA),
    .I_RID(DATA_B_RID),
    .I_RUSER(DATA_B_RUSER),
    .I_RRESP(DATA_B_RRESP),
    .I_RLAST(DATA_B_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_B_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_B_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_B_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_B_BRESP),
    .I_BID(DATA_B_BID),
    .I_BUSER(DATA_B_BUSER)
);

vector_multiplier_DATA_C_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_C_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_C_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_C_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_C_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_C_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_C_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_C_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_C_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_C_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_C_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_C_CACHE_VALUE ))
vector_multiplier_DATA_C_m_axi_U(
    .AWVALID(m_axi_DATA_C_AWVALID),
    .AWREADY(m_axi_DATA_C_AWREADY),
    .AWADDR(m_axi_DATA_C_AWADDR),
    .AWID(m_axi_DATA_C_AWID),
    .AWLEN(m_axi_DATA_C_AWLEN),
    .AWSIZE(m_axi_DATA_C_AWSIZE),
    .AWBURST(m_axi_DATA_C_AWBURST),
    .AWLOCK(m_axi_DATA_C_AWLOCK),
    .AWCACHE(m_axi_DATA_C_AWCACHE),
    .AWPROT(m_axi_DATA_C_AWPROT),
    .AWQOS(m_axi_DATA_C_AWQOS),
    .AWREGION(m_axi_DATA_C_AWREGION),
    .AWUSER(m_axi_DATA_C_AWUSER),
    .WVALID(m_axi_DATA_C_WVALID),
    .WREADY(m_axi_DATA_C_WREADY),
    .WDATA(m_axi_DATA_C_WDATA),
    .WSTRB(m_axi_DATA_C_WSTRB),
    .WLAST(m_axi_DATA_C_WLAST),
    .WID(m_axi_DATA_C_WID),
    .WUSER(m_axi_DATA_C_WUSER),
    .ARVALID(m_axi_DATA_C_ARVALID),
    .ARREADY(m_axi_DATA_C_ARREADY),
    .ARADDR(m_axi_DATA_C_ARADDR),
    .ARID(m_axi_DATA_C_ARID),
    .ARLEN(m_axi_DATA_C_ARLEN),
    .ARSIZE(m_axi_DATA_C_ARSIZE),
    .ARBURST(m_axi_DATA_C_ARBURST),
    .ARLOCK(m_axi_DATA_C_ARLOCK),
    .ARCACHE(m_axi_DATA_C_ARCACHE),
    .ARPROT(m_axi_DATA_C_ARPROT),
    .ARQOS(m_axi_DATA_C_ARQOS),
    .ARREGION(m_axi_DATA_C_ARREGION),
    .ARUSER(m_axi_DATA_C_ARUSER),
    .RVALID(m_axi_DATA_C_RVALID),
    .RREADY(m_axi_DATA_C_RREADY),
    .RDATA(m_axi_DATA_C_RDATA),
    .RLAST(m_axi_DATA_C_RLAST),
    .RID(m_axi_DATA_C_RID),
    .RUSER(m_axi_DATA_C_RUSER),
    .RRESP(m_axi_DATA_C_RRESP),
    .BVALID(m_axi_DATA_C_BVALID),
    .BREADY(m_axi_DATA_C_BREADY),
    .BRESP(m_axi_DATA_C_BRESP),
    .BID(m_axi_DATA_C_BID),
    .BUSER(m_axi_DATA_C_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(DATA_C_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(DATA_C_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(DATA_C_RDATA),
    .I_RID(DATA_C_RID),
    .I_RUSER(DATA_C_RUSER),
    .I_RRESP(DATA_C_RRESP),
    .I_RLAST(DATA_C_RLAST),
    .I_AWVALID(DATA_C_AWVALID),
    .I_AWREADY(DATA_C_AWREADY),
    .I_AWADDR(tmp_2_fu_210_p1),
    .I_AWID(1'd0),
    .I_AWLEN(32'd64),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(DATA_C_WVALID),
    .I_WREADY(DATA_C_WREADY),
    .I_WDATA(tmp_reg_287),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(DATA_C_BVALID),
    .I_BREADY(DATA_C_BREADY),
    .I_BRESP(DATA_C_BRESP),
    .I_BID(DATA_C_BID),
    .I_BUSER(DATA_C_BUSER)
);

vector_multiplierbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
vector_multiplierbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(DATA_B_addr_read_reg_282),
    .din1(DATA_A_addr_read_reg_277),
    .ce(grp_fu_232_ce),
    .dout(grp_fu_232_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state9))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state8) & (ap_sig_ioackin_DATA_C_AWREADY == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state9 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state8) & (ap_sig_ioackin_DATA_C_AWREADY == 1'b1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_DATA_A_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((ap_block_state2_io == 1'b0)) begin
                ap_reg_ioackin_DATA_A_ARREADY <= 1'b0;
            end else if ((1'b1 == DATA_A_ARREADY)) begin
                ap_reg_ioackin_DATA_A_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_DATA_B_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((ap_block_state2_io == 1'b0)) begin
                ap_reg_ioackin_DATA_B_ARREADY <= 1'b0;
            end else if ((1'b1 == DATA_B_ARREADY)) begin
                ap_reg_ioackin_DATA_B_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_DATA_C_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            if ((ap_sig_ioackin_DATA_C_AWREADY == 1'b1)) begin
                ap_reg_ioackin_DATA_C_AWREADY <= 1'b0;
            end else if ((1'b1 == DATA_C_AWREADY)) begin
                ap_reg_ioackin_DATA_C_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_DATA_C_WREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_reg_268))) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_DATA_C_WREADY <= 1'b0;
            end else if (((1'b1 == DATA_C_WREADY) & (ap_block_pp0_stage0_flag00001001 == 1'b0))) begin
                ap_reg_ioackin_DATA_C_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_fu_220_p2))) begin
        i_reg_149 <= i_1_fu_226_p2;
    end else if (((1'b1 == ap_CS_fsm_state8) & (ap_sig_ioackin_DATA_C_AWREADY == 1'b1))) begin
        i_reg_149 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_268 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        DATA_A_addr_read_reg_277 <= DATA_A_RDATA;
        DATA_B_addr_read_reg_282 <= DATA_B_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        a1_reg_246 <= {{a[31:2]}};
        b3_reg_241 <= {{b[31:2]}};
        c5_reg_236 <= {{c[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_reg_268 <= exitcond_reg_268;
        exitcond_reg_268 <= exitcond_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter2_exitcond_reg_268 <= ap_reg_pp0_iter1_exitcond_reg_268;
        ap_reg_pp0_iter3_exitcond_reg_268 <= ap_reg_pp0_iter2_exitcond_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_reg_268))) begin
        tmp_reg_287 <= grp_fu_232_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_reg_ioackin_DATA_A_ARREADY))) begin
        DATA_A_ARVALID = 1'b1;
    end else begin
        DATA_A_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_268 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        DATA_A_RREADY = 1'b1;
    end else begin
        DATA_A_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        DATA_A_blk_n_AR = m_axi_DATA_A_ARREADY;
    end else begin
        DATA_A_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_reg_268 == 1'd0))) begin
        DATA_A_blk_n_R = m_axi_DATA_A_RVALID;
    end else begin
        DATA_A_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_reg_ioackin_DATA_B_ARREADY))) begin
        DATA_B_ARVALID = 1'b1;
    end else begin
        DATA_B_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_268 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        DATA_B_RREADY = 1'b1;
    end else begin
        DATA_B_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        DATA_B_blk_n_AR = m_axi_DATA_B_ARREADY;
    end else begin
        DATA_B_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_reg_268 == 1'd0))) begin
        DATA_B_blk_n_R = m_axi_DATA_B_RVALID;
    end else begin
        DATA_B_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_reg_ioackin_DATA_C_AWREADY))) begin
        DATA_C_AWVALID = 1'b1;
    end else begin
        DATA_C_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (DATA_C_BVALID == 1'b1))) begin
        DATA_C_BREADY = 1'b1;
    end else begin
        DATA_C_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_reg_268) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_DATA_C_WREADY))) begin
        DATA_C_WVALID = 1'b1;
    end else begin
        DATA_C_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        DATA_C_blk_n_AW = m_axi_DATA_C_AWREADY;
    end else begin
        DATA_C_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        DATA_C_blk_n_B = m_axi_DATA_C_BVALID;
    end else begin
        DATA_C_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_reg_268))) begin
        DATA_C_blk_n_W = m_axi_DATA_C_WREADY;
    end else begin
        DATA_C_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond_fu_220_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (DATA_C_BVALID == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (DATA_C_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_DATA_A_ARREADY)) begin
        ap_sig_ioackin_DATA_A_ARREADY = DATA_A_ARREADY;
    end else begin
        ap_sig_ioackin_DATA_A_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_DATA_B_ARREADY)) begin
        ap_sig_ioackin_DATA_B_ARREADY = DATA_B_ARREADY;
    end else begin
        ap_sig_ioackin_DATA_B_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_DATA_C_AWREADY)) begin
        ap_sig_ioackin_DATA_C_AWREADY = DATA_C_AWREADY;
    end else begin
        ap_sig_ioackin_DATA_C_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_DATA_C_WREADY)) begin
        ap_sig_ioackin_DATA_C_WREADY = DATA_C_WREADY;
    end else begin
        ap_sig_ioackin_DATA_C_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        grp_fu_232_ce = 1'b1;
    end else begin
        grp_fu_232_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (ap_block_state2_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (ap_sig_ioackin_DATA_C_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_fu_220_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_fu_220_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (DATA_C_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_reg_268 == 1'd0) & (1'b0 == DATA_A_RVALID)) | ((exitcond_reg_268 == 1'd0) & (1'b0 == DATA_B_RVALID))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_reg_268 == 1'd0) & (1'b0 == DATA_A_RVALID)) | ((exitcond_reg_268 == 1'd0) & (1'b0 == DATA_B_RVALID)))) | ((1'b1 == ap_enable_reg_pp0_iter4) & (1'b1 == ap_block_state13_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_reg_268 == 1'd0) & (1'b0 == DATA_A_RVALID)) | ((exitcond_reg_268 == 1'd0) & (1'b0 == DATA_B_RVALID)))) | ((1'b1 == ap_enable_reg_pp0_iter4) & (1'b1 == ap_block_state13_io)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = (((exitcond_reg_268 == 1'd0) & (1'b0 == DATA_A_RVALID)) | ((exitcond_reg_268 == 1'd0) & (1'b0 == DATA_B_RVALID)));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((1'd0 == ap_reg_pp0_iter3_exitcond_reg_268) & (1'b0 == ap_sig_ioackin_DATA_C_WREADY));
end

assign ap_block_state13_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((1'b0 == ap_sig_ioackin_DATA_A_ARREADY) | (1'b0 == ap_sig_ioackin_DATA_B_ARREADY));
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = 32'd0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond_fu_220_p2 = ((i_reg_149 == 7'd64) ? 1'b1 : 1'b0);

assign i_1_fu_226_p2 = (i_reg_149 + 7'd1);

assign tmp_2_fu_210_p1 = c5_reg_236;

assign tmp_3_fu_190_p1 = b3_reg_241;

assign tmp_4_fu_200_p1 = a1_reg_246;

endmodule //vector_multiplier
