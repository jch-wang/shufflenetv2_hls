// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv1_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        m_axi_weight_V_AWVALID,
        m_axi_weight_V_AWREADY,
        m_axi_weight_V_AWADDR,
        m_axi_weight_V_AWID,
        m_axi_weight_V_AWLEN,
        m_axi_weight_V_AWSIZE,
        m_axi_weight_V_AWBURST,
        m_axi_weight_V_AWLOCK,
        m_axi_weight_V_AWCACHE,
        m_axi_weight_V_AWPROT,
        m_axi_weight_V_AWQOS,
        m_axi_weight_V_AWREGION,
        m_axi_weight_V_AWUSER,
        m_axi_weight_V_WVALID,
        m_axi_weight_V_WREADY,
        m_axi_weight_V_WDATA,
        m_axi_weight_V_WSTRB,
        m_axi_weight_V_WLAST,
        m_axi_weight_V_WID,
        m_axi_weight_V_WUSER,
        m_axi_weight_V_ARVALID,
        m_axi_weight_V_ARREADY,
        m_axi_weight_V_ARADDR,
        m_axi_weight_V_ARID,
        m_axi_weight_V_ARLEN,
        m_axi_weight_V_ARSIZE,
        m_axi_weight_V_ARBURST,
        m_axi_weight_V_ARLOCK,
        m_axi_weight_V_ARCACHE,
        m_axi_weight_V_ARPROT,
        m_axi_weight_V_ARQOS,
        m_axi_weight_V_ARREGION,
        m_axi_weight_V_ARUSER,
        m_axi_weight_V_RVALID,
        m_axi_weight_V_RREADY,
        m_axi_weight_V_RDATA,
        m_axi_weight_V_RLAST,
        m_axi_weight_V_RID,
        m_axi_weight_V_RUSER,
        m_axi_weight_V_RRESP,
        m_axi_weight_V_BVALID,
        m_axi_weight_V_BREADY,
        m_axi_weight_V_BRESP,
        m_axi_weight_V_BID,
        m_axi_weight_V_BUSER,
        conv1_weight_V3,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        output_V_q0
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_pp0_stage0 = 17'd2;
parameter    ap_ST_fsm_state15 = 17'd4;
parameter    ap_ST_fsm_pp1_stage0 = 17'd8;
parameter    ap_ST_fsm_state19 = 17'd16;
parameter    ap_ST_fsm_state20 = 17'd32;
parameter    ap_ST_fsm_state21 = 17'd64;
parameter    ap_ST_fsm_state22 = 17'd128;
parameter    ap_ST_fsm_state23 = 17'd256;
parameter    ap_ST_fsm_state24 = 17'd512;
parameter    ap_ST_fsm_state25 = 17'd1024;
parameter    ap_ST_fsm_state26 = 17'd2048;
parameter    ap_ST_fsm_state27 = 17'd4096;
parameter    ap_ST_fsm_state28 = 17'd8192;
parameter    ap_ST_fsm_pp2_stage0 = 17'd16384;
parameter    ap_ST_fsm_pp2_stage1 = 17'd32768;
parameter    ap_ST_fsm_state33 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_V_address0;
output   input_V_ce0;
input  [7:0] input_V_q0;
output   m_axi_weight_V_AWVALID;
input   m_axi_weight_V_AWREADY;
output  [31:0] m_axi_weight_V_AWADDR;
output  [0:0] m_axi_weight_V_AWID;
output  [31:0] m_axi_weight_V_AWLEN;
output  [2:0] m_axi_weight_V_AWSIZE;
output  [1:0] m_axi_weight_V_AWBURST;
output  [1:0] m_axi_weight_V_AWLOCK;
output  [3:0] m_axi_weight_V_AWCACHE;
output  [2:0] m_axi_weight_V_AWPROT;
output  [3:0] m_axi_weight_V_AWQOS;
output  [3:0] m_axi_weight_V_AWREGION;
output  [0:0] m_axi_weight_V_AWUSER;
output   m_axi_weight_V_WVALID;
input   m_axi_weight_V_WREADY;
output  [7:0] m_axi_weight_V_WDATA;
output  [0:0] m_axi_weight_V_WSTRB;
output   m_axi_weight_V_WLAST;
output  [0:0] m_axi_weight_V_WID;
output  [0:0] m_axi_weight_V_WUSER;
output   m_axi_weight_V_ARVALID;
input   m_axi_weight_V_ARREADY;
output  [31:0] m_axi_weight_V_ARADDR;
output  [0:0] m_axi_weight_V_ARID;
output  [31:0] m_axi_weight_V_ARLEN;
output  [2:0] m_axi_weight_V_ARSIZE;
output  [1:0] m_axi_weight_V_ARBURST;
output  [1:0] m_axi_weight_V_ARLOCK;
output  [3:0] m_axi_weight_V_ARCACHE;
output  [2:0] m_axi_weight_V_ARPROT;
output  [3:0] m_axi_weight_V_ARQOS;
output  [3:0] m_axi_weight_V_ARREGION;
output  [0:0] m_axi_weight_V_ARUSER;
input   m_axi_weight_V_RVALID;
output   m_axi_weight_V_RREADY;
input  [7:0] m_axi_weight_V_RDATA;
input   m_axi_weight_V_RLAST;
input  [0:0] m_axi_weight_V_RID;
input  [0:0] m_axi_weight_V_RUSER;
input  [1:0] m_axi_weight_V_RRESP;
input   m_axi_weight_V_BVALID;
output   m_axi_weight_V_BREADY;
input  [1:0] m_axi_weight_V_BRESP;
input  [0:0] m_axi_weight_V_BID;
input  [0:0] m_axi_weight_V_BUSER;
input  [31:0] conv1_weight_V3;
output  [4:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [14:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
input  [7:0] output_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg m_axi_weight_V_ARVALID;
reg m_axi_weight_V_RREADY;
reg bias_V_ce0;
reg[14:0] output_V_address0;
reg output_V_ce0;
reg output_V_we0;
reg[7:0] output_V_d0;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    weight_V_blk_n_AR;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_flatten_reg_1513;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_1513;
reg    weight_V_blk_n_R;
reg    ap_enable_reg_pp0_iter11;
reg   [0:0] ap_reg_pp0_iter10_exitcond_flatten_reg_1513;
reg   [9:0] indvar_flatten14_reg_240;
reg   [4:0] i_reg_251;
reg   [5:0] indvar_flatten13_reg_263;
reg   [1:0] j_reg_274;
reg   [3:0] indvar_flatten_reg_286;
reg   [1:0] k_reg_298;
reg   [1:0] p_reg_310;
reg   [14:0] indvar_flatten15_reg_322;
reg   [4:0] i_1_reg_333;
reg   [11:0] indvar_flatten16_reg_345;
reg   [5:0] j_1_reg_356;
reg   [5:0] k_1_reg_368;
reg   [14:0] indvar_flatten17_reg_447;
reg   [4:0] i_2_reg_458;
reg   [11:0] indvar_flatten18_reg_469;
reg   [5:0] j_2_reg_480;
reg   [5:0] k_2_reg_491;
wire   [0:0] exitcond_flatten_fu_502_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
reg    ap_sig_ioackin_m_axi_weight_V_ARREADY;
reg    ap_block_state6_io;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
reg    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_1513;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_1513;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten_reg_1513;
reg   [0:0] ap_reg_pp0_iter5_exitcond_flatten_reg_1513;
reg   [0:0] ap_reg_pp0_iter6_exitcond_flatten_reg_1513;
reg   [0:0] ap_reg_pp0_iter7_exitcond_flatten_reg_1513;
reg   [0:0] ap_reg_pp0_iter8_exitcond_flatten_reg_1513;
reg   [0:0] ap_reg_pp0_iter9_exitcond_flatten_reg_1513;
reg   [0:0] ap_reg_pp0_iter11_exitcond_flatten_reg_1513;
wire   [9:0] indvar_flatten_next2_fu_508_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond_flatten18_fu_514_p2;
reg   [0:0] exitcond_flatten18_reg_1522;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten18_reg_1522;
wire   [5:0] indvar_flatten_next1_fu_526_p3;
wire   [4:0] i_cast_mid2_v_fu_547_p3;
reg   [4:0] i_cast_mid2_v_reg_1537;
reg    ap_enable_reg_pp0_iter1;
wire   [0:0] not_exitcond_flatten_fu_554_p2;
reg   [0:0] not_exitcond_flatten_reg_1544;
wire   [0:0] exitcond_flatten19_fu_559_p2;
reg   [0:0] exitcond_flatten19_reg_1549;
wire   [0:0] exitcond_flatten_mid_fu_565_p2;
reg   [0:0] exitcond_flatten_mid_reg_1554;
wire   [0:0] tmp_586_fu_577_p2;
reg   [0:0] tmp_586_reg_1559;
wire   [1:0] j_cast_mid2_fu_582_p3;
reg   [1:0] j_cast_mid2_reg_1565;
wire   [3:0] indvar_flatten_op_fu_590_p2;
reg   [3:0] indvar_flatten_op_reg_1571;
wire   [1:0] p_mid2_fu_701_p3;
reg   [1:0] p_mid2_reg_1576;
wire   [1:0] k_cast_mid2_fu_709_p3;
reg   [1:0] k_cast_mid2_reg_1581;
reg    ap_enable_reg_pp0_iter2;
wire   [31:0] tmp_590_fu_721_p2;
reg   [31:0] tmp_590_reg_1586;
wire   [1:0] p_1_fu_727_p2;
reg   [1:0] p_1_reg_1592;
wire   [3:0] indvar_flatten_next_fu_733_p3;
wire   [31:0] tmp_592_fu_752_p2;
reg   [31:0] tmp_592_reg_1602;
reg   [31:0] ap_reg_pp0_iter4_tmp_592_reg_1602;
reg   [31:0] ap_reg_pp0_iter5_tmp_592_reg_1602;
reg   [31:0] ap_reg_pp0_iter6_tmp_592_reg_1602;
reg   [31:0] ap_reg_pp0_iter7_tmp_592_reg_1602;
reg   [31:0] ap_reg_pp0_iter8_tmp_592_reg_1602;
reg   [31:0] ap_reg_pp0_iter9_tmp_592_reg_1602;
reg   [31:0] ap_reg_pp0_iter10_tmp_592_reg_1602;
reg   [31:0] ap_reg_pp0_iter11_tmp_592_reg_1602;
reg   [31:0] weight_V_addr_reg_1607;
reg   [7:0] weight_V_addr_read_reg_1613;
wire   [0:0] exitcond_flatten20_fu_769_p2;
reg   [0:0] exitcond_flatten20_reg_1618;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state16_pp1_stage0_iter0;
wire    ap_block_state17_pp1_stage0_iter1;
wire    ap_block_state18_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_flag00011001;
reg   [0:0] ap_reg_pp1_iter1_exitcond_flatten20_reg_1618;
wire   [14:0] indvar_flatten_next2_2_fu_775_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] exitcond_flatten21_fu_781_p2;
reg   [0:0] exitcond_flatten21_reg_1627;
wire   [0:0] exitcond70_mid_fu_799_p2;
reg   [0:0] exitcond70_mid_reg_1633;
wire   [5:0] k_1_mid2_fu_811_p3;
reg   [5:0] k_1_mid2_reg_1638;
reg   [5:0] ap_reg_pp1_iter1_k_1_mid2_reg_1638;
wire   [11:0] indvar_flatten_next2_1_fu_825_p3;
wire   [4:0] i_1_cast_mid2_v_fu_846_p3;
reg   [4:0] i_1_cast_mid2_v_reg_1649;
reg    ap_enable_reg_pp1_iter1;
wire   [5:0] j_1_cast_mid2_fu_894_p3;
reg   [5:0] j_1_cast_mid2_reg_1654;
wire   [10:0] tmp_597_fu_905_p2;
reg   [10:0] tmp_597_reg_1659;
wire   [5:0] k_4_fu_911_p2;
wire   [10:0] h_cast_cast_fu_954_p1;
reg   [10:0] h_cast_cast_reg_1675;
wire    ap_CS_fsm_state20;
wire   [0:0] exitcond50_fu_958_p2;
wire   [15:0] w_cast_cast_fu_964_p1;
reg   [15:0] w_cast_cast_reg_1684;
wire    ap_CS_fsm_state21;
wire   [5:0] h_34_fu_974_p2;
wire   [0:0] exitcond51_fu_968_p2;
wire   [31:0] m_cast9_fu_980_p1;
reg   [31:0] m_cast9_reg_1697;
wire    ap_CS_fsm_state22;
wire   [1:0] m_7_fu_990_p2;
reg   [1:0] m_7_reg_1705;
wire   [7:0] tmp_cast_cast_fu_1012_p1;
reg   [7:0] tmp_cast_cast_reg_1710;
wire   [0:0] exitcond53_fu_984_p2;
wire   [5:0] w_44_fu_1016_p2;
wire   [10:0] n_cast8_cast_fu_1022_p1;
reg   [10:0] n_cast8_cast_reg_1720;
wire    ap_CS_fsm_state23;
wire   [1:0] n_7_fu_1032_p2;
reg   [1:0] n_7_reg_1728;
wire   [12:0] tmp_27_cast_cast_fu_1054_p1;
reg   [12:0] tmp_27_cast_cast_reg_1733;
wire   [0:0] exitcond54_fu_1026_p2;
wire   [8:0] ci_cast7_cast_fu_1058_p1;
reg   [8:0] ci_cast7_cast_reg_1738;
wire    ap_CS_fsm_state24;
reg   [11:0] input_V_addr_reg_1743;
wire   [1:0] ci_17_fu_1139_p2;
reg   [1:0] ci_17_reg_1751;
reg   [14:0] output_V_addr_2_reg_1756;
wire    ap_CS_fsm_state25;
wire   [10:0] tmp_690_fu_1274_p1;
reg   [10:0] tmp_690_reg_1761;
wire   [8:0] tmp_691_fu_1278_p1;
reg   [8:0] tmp_691_reg_1766;
wire   [0:0] exitcond56_fu_1282_p2;
reg   [0:0] exitcond56_reg_1771;
wire   [4:0] co_34_fu_1288_p2;
reg   [4:0] co_34_reg_1775;
wire    ap_CS_fsm_state26;
wire   [7:0] weight_temp_V_q0;
reg  signed [7:0] weight_temp_V_load_reg_1785;
wire    ap_CS_fsm_state27;
reg  signed [7:0] input_V_load_reg_1790;
reg   [7:0] output_V_load_1_reg_1795;
wire   [0:0] exitcond_flatten22_fu_1316_p2;
reg   [0:0] exitcond_flatten22_reg_1800;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state29_pp2_stage0_iter0;
wire    ap_block_state31_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_flag00011001;
wire   [14:0] indvar_flatten_next2_4_fu_1322_p2;
reg   [14:0] indvar_flatten_next2_4_reg_1804;
reg    ap_enable_reg_pp2_iter0;
wire   [5:0] j_2_mid_fu_1340_p3;
reg   [5:0] j_2_mid_reg_1809;
wire   [4:0] i_2_cast5_mid2_v_fu_1348_p3;
reg   [4:0] i_2_cast5_mid2_v_reg_1815;
wire   [0:0] exitcond_mid_fu_1368_p2;
reg   [0:0] exitcond_mid_reg_1822;
wire   [5:0] k_2_mid2_fu_1380_p3;
reg   [5:0] k_2_mid2_reg_1827;
wire   [11:0] indvar_flatten_next2_3_fu_1394_p3;
reg   [11:0] indvar_flatten_next2_3_reg_1833;
wire   [5:0] j_2_cast4_mid2_fu_1435_p3;
reg   [5:0] j_2_cast4_mid2_reg_1838;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_state30_pp2_stage1_iter0;
wire    ap_block_state32_pp2_stage1_iter1;
wire    ap_block_pp2_stage1_flag00011001;
wire   [10:0] tmp_604_fu_1445_p2;
reg   [10:0] tmp_604_reg_1843;
wire   [5:0] k_6_fu_1451_p2;
reg   [5:0] k_6_reg_1849;
reg   [14:0] output_V_addr_1_reg_1854;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter12;
wire    ap_CS_fsm_state15;
wire    ap_block_pp1_stage0_flag00011011;
reg    ap_condition_pp1_exit_iter0_state16;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp2_stage0_flag00011011;
reg    ap_condition_pp2_exit_iter0_state29;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage1_flag00011011;
reg   [9:0] weight_temp_V_address0;
reg    weight_temp_V_ce0;
reg    weight_temp_V_we0;
reg   [7:0] weight_temp_V_d0;
reg   [4:0] i_phi_fu_255_p4;
reg   [1:0] j_phi_fu_278_p4;
reg   [3:0] indvar_flatten_phi_fu_290_p4;
reg   [1:0] k_phi_fu_302_p4;
reg   [1:0] p_phi_fu_314_p4;
reg   [4:0] i_1_phi_fu_337_p4;
wire    ap_block_pp1_stage0_flag00000000;
reg   [5:0] j_1_phi_fu_360_p4;
reg   [5:0] k_1_phi_fu_372_p4;
reg   [5:0] h_reg_379;
wire    ap_CS_fsm_state19;
reg   [5:0] w_reg_391;
reg   [1:0] m_reg_403;
reg   [1:0] n_reg_414;
wire   [0:0] exitcond55_fu_1133_p2;
reg   [1:0] ci_reg_425;
reg   [4:0] co_reg_436;
wire    ap_CS_fsm_state28;
reg   [14:0] indvar_flatten17_phi_fu_451_p4;
wire    ap_block_pp2_stage0_flag00000000;
reg   [4:0] i_2_phi_fu_462_p4;
reg   [11:0] indvar_flatten18_phi_fu_473_p4;
reg   [5:0] j_2_phi_fu_484_p4;
reg   [5:0] k_2_phi_fu_495_p4;
wire   [31:0] i_1_cast_mid2_fu_853_p1;
wire   [31:0] tmp_757_cast_fu_949_p1;
wire   [31:0] tmp_774_cast_fu_1128_p1;
wire   [31:0] tmp_782_cast_fu_1215_p1;
wire   [31:0] tmp_791_cast_fu_1311_p1;
wire   [31:0] tmp_766_cast_fu_1489_p1;
wire   [31:0] sum_fu_758_p2;
reg    ap_reg_ioackin_m_axi_weight_V_ARREADY;
reg    ap_block_pp0_stage0_flag00001001;
wire  signed [7:0] grp_fu_1502_p3;
wire   [0:0] tmp_686_fu_1494_p3;
wire    ap_block_pp2_stage1_flag00000000;
wire   [5:0] indvar_flatten13_op_fu_520_p2;
wire   [4:0] i_6_fu_534_p2;
wire   [1:0] j_mid_fu_540_p3;
wire   [1:0] j_6_fu_571_p2;
wire   [6:0] tmp_fu_599_p3;
wire   [7:0] p_shl2_cast_fu_606_p1;
wire   [7:0] i_cast_mid2_cast_fu_596_p1;
wire   [7:0] tmp_585_fu_610_p2;
wire   [0:0] exitcond_fu_620_p2;
wire   [8:0] j_cast_mid2_cast_fu_638_p1;
wire  signed [8:0] tmp_737_cast_fu_616_p1;
wire   [8:0] tmp_587_fu_641_p2;
wire   [10:0] tmp_681_fu_651_p3;
wire  signed [31:0] p_shl1_fu_659_p1;
wire  signed [31:0] tmp_739_cast_fu_647_p1;
wire   [0:0] exitcond_flatten_not_fu_669_p2;
wire   [0:0] exitcond73_mid_fu_626_p2;
wire   [0:0] not_exitcond_flatten_4_fu_674_p2;
wire   [1:0] k_mid_fu_631_p3;
wire   [0:0] exitcond73_mid1_fu_679_p2;
wire   [0:0] tmp_589_fu_691_p2;
wire   [0:0] tmp_682_fu_696_p2;
wire   [1:0] k_5_fu_685_p2;
wire   [31:0] k_cast_mid2_cast_fu_717_p1;
wire   [31:0] tmp_588_fu_663_p2;
wire   [31:0] tmp_683_fu_739_p2;
wire   [31:0] p_cast_fu_749_p1;
wire   [31:0] tmp_591_fu_744_p2;
wire   [0:0] exitcond49_fu_793_p2;
wire   [0:0] not_exitcond_flatten_1_fu_787_p2;
wire   [0:0] tmp_596_fu_805_p2;
wire   [11:0] indvar_flatten44_op_fu_819_p2;
wire   [4:0] i_7_fu_833_p2;
wire   [9:0] tmp_593_fu_858_p3;
wire   [5:0] tmp_594_fu_870_p3;
wire   [10:0] p_shl5_cast_fu_866_p1;
wire   [10:0] p_shl6_cast_fu_878_p1;
wire   [5:0] j_1_mid_fu_839_p3;
wire   [5:0] j_7_fu_888_p2;
wire   [10:0] j_1_cast_mid2_cast_fu_901_p1;
wire   [10:0] tmp_595_fu_882_p2;
wire   [11:0] tmp_684_fu_923_p3;
wire   [15:0] p_shl3_cast_fu_916_p3;
wire   [15:0] p_shl4_cast_fu_930_p1;
wire   [15:0] k_1_cast_cast_fu_940_p1;
wire   [15:0] tmp_598_fu_934_p2;
wire   [15:0] tmp_599_fu_943_p2;
wire   [1:0] tmp1_fu_996_p2;
wire  signed [5:0] tmp1_cast_fu_1002_p1;
wire   [5:0] tmp_s_fu_1006_p2;
wire   [1:0] tmp2_fu_1038_p2;
wire  signed [5:0] tmp2_cast_fu_1044_p1;
wire   [5:0] tmp_27_fu_1048_p2;
wire   [6:0] tmp_607_fu_1062_p3;
wire   [2:0] tmp_608_fu_1074_p3;
wire   [7:0] p_shl9_cast_fu_1070_p1;
wire   [7:0] p_shl10_cast_fu_1082_p1;
wire   [7:0] tmp_609_fu_1086_p2;
wire   [7:0] tmp_610_fu_1092_p2;
wire   [8:0] tmp_687_fu_1105_p3;
wire   [12:0] p_shl7_cast_fu_1097_p3;
wire   [12:0] p_shl8_cast_fu_1113_p1;
wire   [12:0] tmp_611_fu_1117_p2;
wire   [12:0] tmp_612_fu_1123_p2;
wire   [9:0] tmp_613_fu_1149_p3;
wire   [5:0] tmp_614_fu_1161_p3;
wire   [10:0] p_shl17_cast_fu_1169_p1;
wire   [10:0] p_shl16_cast_fu_1157_p1;
wire   [10:0] tmp_615_fu_1173_p2;
wire   [10:0] tmp_616_fu_1179_p2;
wire   [11:0] tmp_688_fu_1192_p3;
wire   [15:0] p_shl15_cast_fu_1200_p1;
wire   [15:0] p_shl14_cast_fu_1184_p3;
wire   [15:0] tmp_617_fu_1204_p2;
wire   [15:0] tmp_618_fu_1210_p2;
wire   [6:0] tmp_619_fu_1220_p3;
wire   [7:0] p_shl13_cast_fu_1228_p1;
wire   [7:0] co_cast6_cast_fu_1145_p1;
wire   [7:0] tmp_620_fu_1232_p2;
wire  signed [8:0] tmp_784_cast_fu_1238_p1;
wire   [8:0] tmp_621_fu_1242_p2;
wire   [10:0] tmp_689_fu_1251_p3;
wire  signed [31:0] p_shl_fu_1259_p1;
wire  signed [31:0] tmp_785_cast_fu_1247_p1;
wire   [31:0] tmp_622_fu_1263_p2;
wire   [31:0] tmp_623_fu_1269_p2;
wire   [10:0] p_shl11_cast_fu_1294_p3;
wire   [10:0] tmp_624_fu_1301_p2;
wire   [10:0] tmp_625_fu_1306_p2;
wire   [0:0] exitcond_flatten23_fu_1334_p2;
wire   [4:0] i_8_fu_1328_p2;
wire   [0:0] exitcond52_fu_1362_p2;
wire   [0:0] not_exitcond_flatten_2_fu_1356_p2;
wire   [0:0] tmp_603_fu_1374_p2;
wire   [11:0] indvar_flatten66_op_fu_1388_p2;
wire   [9:0] tmp_600_fu_1402_p3;
wire   [5:0] tmp_601_fu_1413_p3;
wire   [10:0] p_shl20_cast_fu_1409_p1;
wire   [10:0] p_shl21_cast_fu_1420_p1;
wire   [5:0] j_8_fu_1430_p2;
wire   [10:0] j_2_cast4_mid2_cast_fu_1441_p1;
wire   [10:0] tmp_602_fu_1424_p2;
wire   [11:0] tmp_685_fu_1463_p3;
wire   [15:0] p_shl18_cast_fu_1456_p3;
wire   [15:0] p_shl19_cast_fu_1470_p1;
wire   [15:0] k_2_cast3_cast_fu_1480_p1;
wire   [15:0] tmp_605_fu_1474_p2;
wire   [15:0] tmp_606_fu_1483_p2;
wire    ap_CS_fsm_state33;
reg   [16:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_reg_ioackin_m_axi_weight_V_ARREADY = 1'b0;
end

conv1_p_weight_tebkb #(
    .DataWidth( 8 ),
    .AddressRange( 648 ),
    .AddressWidth( 10 ))
weight_temp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weight_temp_V_address0),
    .ce0(weight_temp_V_ce0),
    .we0(weight_temp_V_we0),
    .d0(weight_temp_V_d0),
    .q0(weight_temp_V_q0)
);

ShuffleNetV2_mac_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mac_cud_U0(
    .din0(input_V_load_reg_1790),
    .din1(weight_temp_V_load_reg_1785),
    .din2(output_V_load_1_reg_1795),
    .dout(grp_fu_1502_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter12 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp1_exit_iter0_state16))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state16)) begin
                ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state16 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp2_exit_iter0_state29))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state20) & (exitcond50_fu_958_p2 == 1'd1))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == ap_condition_pp2_exit_iter0_state29) & (ap_block_pp2_stage1_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp2_iter1 <= (ap_condition_pp2_exit_iter0_state29 ^ 1'b1);
        end else if (((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((1'b1 == ap_CS_fsm_state20) & (exitcond50_fu_958_p2 == 1'd1))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_weight_V_ARREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_1513))) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_m_axi_weight_V_ARREADY <= 1'b0;
            end else if (((1'b1 == m_axi_weight_V_ARREADY) & (ap_block_pp0_stage0_flag00001001 == 1'b0))) begin
                ap_reg_ioackin_m_axi_weight_V_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (1'd1 == exitcond56_reg_1771))) begin
        ci_reg_425 <= ci_17_reg_1751;
    end else if (((1'b1 == ap_CS_fsm_state23) & (1'd0 == exitcond54_fu_1026_p2))) begin
        ci_reg_425 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'd0 == exitcond55_fu_1133_p2))) begin
        co_reg_436 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        co_reg_436 <= co_34_reg_1775;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        h_reg_379 <= 6'd1;
    end else if (((1'b1 == ap_CS_fsm_state21) & (exitcond51_fu_968_p2 == 1'd1))) begin
        h_reg_379 <= h_34_fu_974_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_1_reg_333 <= 5'd0;
    end else if (((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter1_exitcond_flatten20_reg_1618))) begin
        i_1_reg_333 <= i_1_cast_mid2_v_reg_1649;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (exitcond50_fu_958_p2 == 1'd1))) begin
        i_2_reg_458 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten22_reg_1800) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        i_2_reg_458 <= i_2_cast5_mid2_v_reg_1815;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_1513) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        i_reg_251 <= i_cast_mid2_v_reg_1537;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_251 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_502_p2))) begin
        indvar_flatten13_reg_263 <= indvar_flatten_next1_fu_526_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten13_reg_263 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_502_p2))) begin
        indvar_flatten14_reg_240 <= indvar_flatten_next2_fu_508_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten14_reg_240 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        indvar_flatten15_reg_322 <= 15'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'd0 == exitcond_flatten20_fu_769_p2))) begin
        indvar_flatten15_reg_322 <= indvar_flatten_next2_2_fu_775_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        indvar_flatten16_reg_345 <= 12'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'd0 == exitcond_flatten20_fu_769_p2))) begin
        indvar_flatten16_reg_345 <= indvar_flatten_next2_1_fu_825_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (exitcond50_fu_958_p2 == 1'd1))) begin
        indvar_flatten17_reg_447 <= 15'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten22_reg_1800) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        indvar_flatten17_reg_447 <= indvar_flatten_next2_4_reg_1804;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (exitcond50_fu_958_p2 == 1'd1))) begin
        indvar_flatten18_reg_469 <= 12'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten22_reg_1800) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        indvar_flatten18_reg_469 <= indvar_flatten_next2_3_reg_1833;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_1513) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        indvar_flatten_reg_286 <= indvar_flatten_next_fu_733_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_286 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        j_1_reg_356 <= 6'd1;
    end else if (((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter1_exitcond_flatten20_reg_1618))) begin
        j_1_reg_356 <= j_1_cast_mid2_reg_1654;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (exitcond50_fu_958_p2 == 1'd1))) begin
        j_2_reg_480 <= 6'd1;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten22_reg_1800) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        j_2_reg_480 <= j_2_cast4_mid2_reg_1838;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_1513) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        j_reg_274 <= j_cast_mid2_reg_1565;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_274 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        k_1_reg_368 <= 6'd1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == exitcond_flatten20_reg_1618))) begin
        k_1_reg_368 <= k_4_fu_911_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (exitcond50_fu_958_p2 == 1'd1))) begin
        k_2_reg_491 <= 6'd1;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten22_reg_1800) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        k_2_reg_491 <= k_6_reg_1849;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_1513) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        k_reg_298 <= k_cast_mid2_reg_1581;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_reg_298 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (1'd0 == exitcond51_fu_968_p2))) begin
        m_reg_403 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state23) & (1'd1 == exitcond54_fu_1026_p2))) begin
        m_reg_403 <= m_7_reg_1705;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'd1 == exitcond55_fu_1133_p2))) begin
        n_reg_414 <= n_7_reg_1728;
    end else if (((1'b1 == ap_CS_fsm_state22) & (1'd0 == exitcond53_fu_984_p2))) begin
        n_reg_414 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_1513) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        p_reg_310 <= p_1_reg_1592;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_reg_310 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (1'd0 == exitcond50_fu_958_p2))) begin
        w_reg_391 <= 6'd1;
    end else if (((1'b1 == ap_CS_fsm_state22) & (1'd1 == exitcond53_fu_984_p2))) begin
        w_reg_391 <= w_44_fu_1016_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter10_exitcond_flatten_reg_1513 <= ap_reg_pp0_iter9_exitcond_flatten_reg_1513;
        ap_reg_pp0_iter10_tmp_592_reg_1602 <= ap_reg_pp0_iter9_tmp_592_reg_1602;
        ap_reg_pp0_iter11_exitcond_flatten_reg_1513 <= ap_reg_pp0_iter10_exitcond_flatten_reg_1513;
        ap_reg_pp0_iter11_tmp_592_reg_1602 <= ap_reg_pp0_iter10_tmp_592_reg_1602;
        ap_reg_pp0_iter2_exitcond_flatten_reg_1513 <= ap_reg_pp0_iter1_exitcond_flatten_reg_1513;
        ap_reg_pp0_iter3_exitcond_flatten_reg_1513 <= ap_reg_pp0_iter2_exitcond_flatten_reg_1513;
        ap_reg_pp0_iter4_exitcond_flatten_reg_1513 <= ap_reg_pp0_iter3_exitcond_flatten_reg_1513;
        ap_reg_pp0_iter4_tmp_592_reg_1602 <= tmp_592_reg_1602;
        ap_reg_pp0_iter5_exitcond_flatten_reg_1513 <= ap_reg_pp0_iter4_exitcond_flatten_reg_1513;
        ap_reg_pp0_iter5_tmp_592_reg_1602 <= ap_reg_pp0_iter4_tmp_592_reg_1602;
        ap_reg_pp0_iter6_exitcond_flatten_reg_1513 <= ap_reg_pp0_iter5_exitcond_flatten_reg_1513;
        ap_reg_pp0_iter6_tmp_592_reg_1602 <= ap_reg_pp0_iter5_tmp_592_reg_1602;
        ap_reg_pp0_iter7_exitcond_flatten_reg_1513 <= ap_reg_pp0_iter6_exitcond_flatten_reg_1513;
        ap_reg_pp0_iter7_tmp_592_reg_1602 <= ap_reg_pp0_iter6_tmp_592_reg_1602;
        ap_reg_pp0_iter8_exitcond_flatten_reg_1513 <= ap_reg_pp0_iter7_exitcond_flatten_reg_1513;
        ap_reg_pp0_iter8_tmp_592_reg_1602 <= ap_reg_pp0_iter7_tmp_592_reg_1602;
        ap_reg_pp0_iter9_exitcond_flatten_reg_1513 <= ap_reg_pp0_iter8_exitcond_flatten_reg_1513;
        ap_reg_pp0_iter9_tmp_592_reg_1602 <= ap_reg_pp0_iter8_tmp_592_reg_1602;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten18_reg_1522 <= exitcond_flatten18_reg_1522;
        ap_reg_pp0_iter1_exitcond_flatten_reg_1513 <= exitcond_flatten_reg_1513;
        exitcond_flatten_reg_1513 <= exitcond_flatten_fu_502_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp1_iter1_exitcond_flatten20_reg_1618 <= exitcond_flatten20_reg_1618;
        ap_reg_pp1_iter1_k_1_mid2_reg_1638 <= k_1_mid2_reg_1638;
        exitcond_flatten20_reg_1618 <= exitcond_flatten20_fu_769_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        ci_17_reg_1751 <= ci_17_fu_1139_p2;
        ci_cast7_cast_reg_1738[1 : 0] <= ci_cast7_cast_fu_1058_p1[1 : 0];
        input_V_addr_reg_1743 <= tmp_774_cast_fu_1128_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        co_34_reg_1775 <= co_34_fu_1288_p2;
        exitcond56_reg_1771 <= exitcond56_fu_1282_p2;
        output_V_addr_2_reg_1756 <= tmp_782_cast_fu_1215_p1;
        tmp_690_reg_1761 <= tmp_690_fu_1274_p1;
        tmp_691_reg_1766 <= tmp_691_fu_1278_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten20_fu_769_p2))) begin
        exitcond70_mid_reg_1633 <= exitcond70_mid_fu_799_p2;
        exitcond_flatten21_reg_1627 <= exitcond_flatten21_fu_781_p2;
        k_1_mid2_reg_1638 <= k_1_mid2_fu_811_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_502_p2))) begin
        exitcond_flatten18_reg_1522 <= exitcond_flatten18_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_reg_1513))) begin
        exitcond_flatten19_reg_1549 <= exitcond_flatten19_fu_559_p2;
        exitcond_flatten_mid_reg_1554 <= exitcond_flatten_mid_fu_565_p2;
        indvar_flatten_op_reg_1571 <= indvar_flatten_op_fu_590_p2;
        not_exitcond_flatten_reg_1544 <= not_exitcond_flatten_fu_554_p2;
        tmp_586_reg_1559 <= tmp_586_fu_577_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0))) begin
        exitcond_flatten22_reg_1800 <= exitcond_flatten22_fu_1316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten22_fu_1316_p2))) begin
        exitcond_mid_reg_1822 <= exitcond_mid_fu_1368_p2;
        j_2_mid_reg_1809 <= j_2_mid_fu_1340_p3;
        k_2_mid2_reg_1827 <= k_2_mid2_fu_1380_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        h_cast_cast_reg_1675[5 : 0] <= h_cast_cast_fu_954_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == exitcond_flatten20_reg_1618))) begin
        i_1_cast_mid2_v_reg_1649 <= i_1_cast_mid2_v_fu_846_p3;
        j_1_cast_mid2_reg_1654 <= j_1_cast_mid2_fu_894_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'd0 == exitcond_flatten22_fu_1316_p2))) begin
        i_2_cast5_mid2_v_reg_1815 <= i_2_cast5_mid2_v_fu_1348_p3;
        indvar_flatten_next2_3_reg_1833 <= indvar_flatten_next2_3_fu_1394_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_flatten_reg_1513))) begin
        i_cast_mid2_v_reg_1537 <= i_cast_mid2_v_fu_547_p3;
        j_cast_mid2_reg_1565 <= j_cast_mid2_fu_582_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter0))) begin
        indvar_flatten_next2_4_reg_1804 <= indvar_flatten_next2_4_fu_1322_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        input_V_load_reg_1790 <= input_V_q0;
        output_V_load_1_reg_1795 <= output_V_q0;
        weight_temp_V_load_reg_1785 <= weight_temp_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp2_iter0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten22_reg_1800))) begin
        j_2_cast4_mid2_reg_1838 <= j_2_cast4_mid2_fu_1435_p3;
        k_6_reg_1849 <= k_6_fu_1451_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_1513) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        k_cast_mid2_reg_1581 <= k_cast_mid2_fu_709_p3;
        p_1_reg_1592 <= p_1_fu_727_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        m_7_reg_1705 <= m_7_fu_990_p2;
        m_cast9_reg_1697[1 : 0] <= m_cast9_fu_980_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        n_7_reg_1728 <= n_7_fu_1032_p2;
        n_cast8_cast_reg_1720[1 : 0] <= n_cast8_cast_fu_1022_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten22_reg_1800))) begin
        output_V_addr_1_reg_1854 <= tmp_766_cast_fu_1489_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_1513))) begin
        p_mid2_reg_1576 <= p_mid2_fu_701_p3;
        tmp_590_reg_1586 <= tmp_590_fu_721_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (1'd0 == exitcond54_fu_1026_p2))) begin
        tmp_27_cast_cast_reg_1733[5 : 0] <= tmp_27_cast_cast_fu_1054_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_1513))) begin
        tmp_592_reg_1602 <= tmp_592_fu_752_p2;
        weight_V_addr_reg_1607 <= sum_fu_758_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten20_reg_1618))) begin
        tmp_597_reg_1659 <= tmp_597_fu_905_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten22_reg_1800))) begin
        tmp_604_reg_1843 <= tmp_604_fu_1445_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (1'd0 == exitcond53_fu_984_p2))) begin
        tmp_cast_cast_reg_1710[5 : 0] <= tmp_cast_cast_fu_1012_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        w_cast_cast_reg_1684[5 : 0] <= w_cast_cast_fu_964_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == ap_reg_pp0_iter10_exitcond_flatten_reg_1513) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        weight_V_addr_read_reg_1613 <= m_axi_weight_V_RDATA;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_502_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten20_fu_769_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state16 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state16 = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == exitcond_flatten22_fu_1316_p2)) begin
        ap_condition_pp2_exit_iter0_state29 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state29 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state33))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter8) & (1'b0 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_enable_reg_pp0_iter10) & (1'b0 == ap_enable_reg_pp0_iter11) & (1'b0 == ap_enable_reg_pp0_iter12))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp1_iter0) & (1'b0 == ap_enable_reg_pp1_iter1) & (1'b0 == ap_enable_reg_pp1_iter2))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp2_iter0) & (1'b0 == ap_enable_reg_pp2_iter1))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_weight_V_ARREADY)) begin
        ap_sig_ioackin_m_axi_weight_V_ARREADY = m_axi_weight_V_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_weight_V_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter1_exitcond_flatten20_reg_1618) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        i_1_phi_fu_337_p4 = i_1_cast_mid2_v_reg_1649;
    end else begin
        i_1_phi_fu_337_p4 = i_1_reg_333;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'd0 == exitcond_flatten22_reg_1800) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        i_2_phi_fu_462_p4 = i_2_cast5_mid2_v_reg_1815;
    end else begin
        i_2_phi_fu_462_p4 = i_2_reg_458;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_1513) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        i_phi_fu_255_p4 = i_cast_mid2_v_reg_1537;
    end else begin
        i_phi_fu_255_p4 = i_reg_251;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'd0 == exitcond_flatten22_reg_1800) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        indvar_flatten17_phi_fu_451_p4 = indvar_flatten_next2_4_reg_1804;
    end else begin
        indvar_flatten17_phi_fu_451_p4 = indvar_flatten17_reg_447;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'd0 == exitcond_flatten22_reg_1800) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        indvar_flatten18_phi_fu_473_p4 = indvar_flatten_next2_3_reg_1833;
    end else begin
        indvar_flatten18_phi_fu_473_p4 = indvar_flatten18_reg_469;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_1513) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        indvar_flatten_phi_fu_290_p4 = indvar_flatten_next_fu_733_p3;
    end else begin
        indvar_flatten_phi_fu_290_p4 = indvar_flatten_reg_286;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter1_exitcond_flatten20_reg_1618) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        j_1_phi_fu_360_p4 = j_1_cast_mid2_reg_1654;
    end else begin
        j_1_phi_fu_360_p4 = j_1_reg_356;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'd0 == exitcond_flatten22_reg_1800) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        j_2_phi_fu_484_p4 = j_2_cast4_mid2_reg_1838;
    end else begin
        j_2_phi_fu_484_p4 = j_2_reg_480;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_1513) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        j_phi_fu_278_p4 = j_cast_mid2_reg_1565;
    end else begin
        j_phi_fu_278_p4 = j_reg_274;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == exitcond_flatten20_reg_1618) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        k_1_phi_fu_372_p4 = k_4_fu_911_p2;
    end else begin
        k_1_phi_fu_372_p4 = k_1_reg_368;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'd0 == exitcond_flatten22_reg_1800) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        k_2_phi_fu_495_p4 = k_6_reg_1849;
    end else begin
        k_2_phi_fu_495_p4 = k_2_reg_491;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_1513) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        k_phi_fu_302_p4 = k_cast_mid2_reg_1581;
    end else begin
        k_phi_fu_302_p4 = k_reg_298;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_1513) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_m_axi_weight_V_ARREADY))) begin
        m_axi_weight_V_ARVALID = 1'b1;
    end else begin
        m_axi_weight_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter11) & (1'd0 == ap_reg_pp0_iter10_exitcond_flatten_reg_1513) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        m_axi_weight_V_RREADY = 1'b1;
    end else begin
        m_axi_weight_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage1_flag00000000 == 1'b0))) begin
        output_V_address0 = output_V_addr_1_reg_1854;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        output_V_address0 = tmp_766_cast_fu_1489_p1;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state28))) begin
        output_V_address0 = output_V_addr_2_reg_1756;
    end else if (((1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        output_V_address0 = tmp_757_cast_fu_949_p1;
    end else begin
        output_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | ((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2)) | (1'b1 == ap_CS_fsm_state28) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1)))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage1_flag00000000 == 1'b0))) begin
        output_V_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        output_V_d0 = grp_fu_1502_p3;
    end else if (((1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        output_V_d0 = bias_V_q0;
    end else begin
        output_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter1_exitcond_flatten20_reg_1618)) | (1'b1 == ap_CS_fsm_state28) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'd1 == tmp_686_fu_1494_p3)))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_1513) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        p_phi_fu_314_p4 = p_1_reg_1592;
    end else begin
        p_phi_fu_314_p4 = p_reg_310;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_1513))) begin
        weight_V_blk_n_AR = m_axi_weight_V_ARREADY;
    end else begin
        weight_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter11) & (1'd0 == ap_reg_pp0_iter10_exitcond_flatten_reg_1513))) begin
        weight_V_blk_n_R = m_axi_weight_V_RVALID;
    end else begin
        weight_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        weight_temp_V_address0 = tmp_791_cast_fu_1311_p1;
    end else if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter12))) begin
        weight_temp_V_address0 = ap_reg_pp0_iter11_tmp_592_reg_1602;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        weight_temp_V_address0 = 32'd0;
    end else begin
        weight_temp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state26) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter12)))) begin
        weight_temp_V_ce0 = 1'b1;
    end else begin
        weight_temp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter12))) begin
        weight_temp_V_d0 = weight_V_addr_read_reg_1613;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        weight_temp_V_d0 = 8'd0;
    end else begin
        weight_temp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter12) & (1'd0 == ap_reg_pp0_iter11_exitcond_flatten_reg_1513)))) begin
        weight_temp_V_we0 = 1'b1;
    end else begin
        weight_temp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter12) & (ap_enable_reg_pp0_iter11 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_502_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter12) & (ap_enable_reg_pp0_iter11 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_502_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (exitcond_flatten20_fu_769_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (exitcond_flatten20_fu_769_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (exitcond50_fu_958_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (exitcond51_fu_968_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (1'd1 == exitcond53_fu_984_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (1'd1 == exitcond54_fu_1026_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (1'd1 == exitcond55_fu_1133_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (1'd1 == exitcond56_reg_1771))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (((ap_block_pp2_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp2_iter0) & (ap_block_pp2_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond_flatten22_fu_1316_p2) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((1'b1 == ap_enable_reg_pp2_iter0) & (ap_block_pp2_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond_flatten22_fu_1316_p2) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if (((ap_block_pp2_stage1_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_enable_reg_pp2_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd16];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter11) & (1'd0 == ap_reg_pp0_iter10_exitcond_flatten_reg_1513) & (1'b0 == m_axi_weight_V_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter4) & (1'b1 == ap_block_state6_io)) | ((1'b1 == ap_enable_reg_pp0_iter11) & (1'd0 == ap_reg_pp0_iter10_exitcond_flatten_reg_1513) & (1'b0 == m_axi_weight_V_RVALID)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter4) & (1'b1 == ap_block_state6_io)) | ((1'b1 == ap_enable_reg_pp0_iter11) & (1'd0 == ap_reg_pp0_iter10_exitcond_flatten_reg_1513) & (1'b0 == m_axi_weight_V_RVALID)));
end

assign ap_block_pp1_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage0_iter11 = ((1'd0 == ap_reg_pp0_iter10_exitcond_flatten_reg_1513) & (1'b0 == m_axi_weight_V_RVALID));
end

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_1513) & (1'b0 == ap_sig_ioackin_m_axi_weight_V_ARREADY));
end

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign bias_V_address0 = i_1_cast_mid2_fu_853_p1;

assign ci_17_fu_1139_p2 = (ci_reg_425 + 2'd1);

assign ci_cast7_cast_fu_1058_p1 = ci_reg_425;

assign co_34_fu_1288_p2 = (5'd1 + co_reg_436);

assign co_cast6_cast_fu_1145_p1 = co_reg_436;

assign exitcond49_fu_793_p2 = ((k_1_phi_fu_372_p4 == 6'd33) ? 1'b1 : 1'b0);

assign exitcond50_fu_958_p2 = ((h_reg_379 == 6'd33) ? 1'b1 : 1'b0);

assign exitcond51_fu_968_p2 = ((w_reg_391 == 6'd33) ? 1'b1 : 1'b0);

assign exitcond52_fu_1362_p2 = ((k_2_phi_fu_495_p4 == 6'd33) ? 1'b1 : 1'b0);

assign exitcond53_fu_984_p2 = ((m_reg_403 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond54_fu_1026_p2 = ((n_reg_414 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond55_fu_1133_p2 = ((ci_reg_425 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond56_fu_1282_p2 = ((co_reg_436 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond70_mid_fu_799_p2 = (exitcond49_fu_793_p2 & not_exitcond_flatten_1_fu_787_p2);

assign exitcond73_mid1_fu_679_p2 = (exitcond73_mid_fu_626_p2 & not_exitcond_flatten_4_fu_674_p2);

assign exitcond73_mid_fu_626_p2 = (exitcond_fu_620_p2 & not_exitcond_flatten_reg_1544);

assign exitcond_flatten18_fu_514_p2 = ((indvar_flatten13_reg_263 == 6'd27) ? 1'b1 : 1'b0);

assign exitcond_flatten19_fu_559_p2 = ((indvar_flatten_phi_fu_290_p4 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_flatten20_fu_769_p2 = ((indvar_flatten15_reg_322 == 15'd24576) ? 1'b1 : 1'b0);

assign exitcond_flatten21_fu_781_p2 = ((indvar_flatten16_reg_345 == 12'd1024) ? 1'b1 : 1'b0);

assign exitcond_flatten22_fu_1316_p2 = ((indvar_flatten17_phi_fu_451_p4 == 15'd24576) ? 1'b1 : 1'b0);

assign exitcond_flatten23_fu_1334_p2 = ((indvar_flatten18_phi_fu_473_p4 == 12'd1024) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_502_p2 = ((indvar_flatten14_reg_240 == 10'd648) ? 1'b1 : 1'b0);

assign exitcond_flatten_mid_fu_565_p2 = (exitcond_flatten19_fu_559_p2 & not_exitcond_flatten_fu_554_p2);

assign exitcond_flatten_not_fu_669_p2 = (exitcond_flatten19_reg_1549 ^ 1'd1);

assign exitcond_fu_620_p2 = ((p_phi_fu_314_p4 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_mid_fu_1368_p2 = (exitcond52_fu_1362_p2 & not_exitcond_flatten_2_fu_1356_p2);

assign h_34_fu_974_p2 = (h_reg_379 + 6'd1);

assign h_cast_cast_fu_954_p1 = h_reg_379;

assign i_1_cast_mid2_fu_853_p1 = i_1_cast_mid2_v_fu_846_p3;

assign i_1_cast_mid2_v_fu_846_p3 = ((exitcond_flatten21_reg_1627[0:0] === 1'b1) ? i_7_fu_833_p2 : i_1_phi_fu_337_p4);

assign i_2_cast5_mid2_v_fu_1348_p3 = ((exitcond_flatten23_fu_1334_p2[0:0] === 1'b1) ? i_8_fu_1328_p2 : i_2_phi_fu_462_p4);

assign i_6_fu_534_p2 = (5'd1 + i_phi_fu_255_p4);

assign i_7_fu_833_p2 = (i_1_phi_fu_337_p4 + 5'd1);

assign i_8_fu_1328_p2 = (i_2_phi_fu_462_p4 + 5'd1);

assign i_cast_mid2_cast_fu_596_p1 = i_cast_mid2_v_reg_1537;

assign i_cast_mid2_v_fu_547_p3 = ((exitcond_flatten18_reg_1522[0:0] === 1'b1) ? i_6_fu_534_p2 : i_phi_fu_255_p4);

assign indvar_flatten13_op_fu_520_p2 = (6'd1 + indvar_flatten13_reg_263);

assign indvar_flatten44_op_fu_819_p2 = (indvar_flatten16_reg_345 + 12'd1);

assign indvar_flatten66_op_fu_1388_p2 = (indvar_flatten18_phi_fu_473_p4 + 12'd1);

assign indvar_flatten_next1_fu_526_p3 = ((exitcond_flatten18_fu_514_p2[0:0] === 1'b1) ? 6'd1 : indvar_flatten13_op_fu_520_p2);

assign indvar_flatten_next2_1_fu_825_p3 = ((exitcond_flatten21_fu_781_p2[0:0] === 1'b1) ? 12'd1 : indvar_flatten44_op_fu_819_p2);

assign indvar_flatten_next2_2_fu_775_p2 = (indvar_flatten15_reg_322 + 15'd1);

assign indvar_flatten_next2_3_fu_1394_p3 = ((exitcond_flatten23_fu_1334_p2[0:0] === 1'b1) ? 12'd1 : indvar_flatten66_op_fu_1388_p2);

assign indvar_flatten_next2_4_fu_1322_p2 = (indvar_flatten17_phi_fu_451_p4 + 15'd1);

assign indvar_flatten_next2_fu_508_p2 = (indvar_flatten14_reg_240 + 10'd1);

assign indvar_flatten_next_fu_733_p3 = ((tmp_586_reg_1559[0:0] === 1'b1) ? 4'd1 : indvar_flatten_op_reg_1571);

assign indvar_flatten_op_fu_590_p2 = (4'd1 + indvar_flatten_phi_fu_290_p4);

assign input_V_address0 = input_V_addr_reg_1743;

assign j_1_cast_mid2_cast_fu_901_p1 = j_1_cast_mid2_fu_894_p3;

assign j_1_cast_mid2_fu_894_p3 = ((exitcond70_mid_reg_1633[0:0] === 1'b1) ? j_7_fu_888_p2 : j_1_mid_fu_839_p3);

assign j_1_mid_fu_839_p3 = ((exitcond_flatten21_reg_1627[0:0] === 1'b1) ? 6'd1 : j_1_phi_fu_360_p4);

assign j_2_cast4_mid2_cast_fu_1441_p1 = j_2_cast4_mid2_fu_1435_p3;

assign j_2_cast4_mid2_fu_1435_p3 = ((exitcond_mid_reg_1822[0:0] === 1'b1) ? j_8_fu_1430_p2 : j_2_mid_reg_1809);

assign j_2_mid_fu_1340_p3 = ((exitcond_flatten23_fu_1334_p2[0:0] === 1'b1) ? 6'd1 : j_2_phi_fu_484_p4);

assign j_6_fu_571_p2 = (2'd1 + j_mid_fu_540_p3);

assign j_7_fu_888_p2 = (j_1_mid_fu_839_p3 + 6'd1);

assign j_8_fu_1430_p2 = (j_2_mid_reg_1809 + 6'd1);

assign j_cast_mid2_cast_fu_638_p1 = j_cast_mid2_reg_1565;

assign j_cast_mid2_fu_582_p3 = ((exitcond_flatten_mid_fu_565_p2[0:0] === 1'b1) ? j_6_fu_571_p2 : j_mid_fu_540_p3);

assign j_mid_fu_540_p3 = ((exitcond_flatten18_reg_1522[0:0] === 1'b1) ? 2'd0 : j_phi_fu_278_p4);

assign k_1_cast_cast_fu_940_p1 = ap_reg_pp1_iter1_k_1_mid2_reg_1638;

assign k_1_mid2_fu_811_p3 = ((tmp_596_fu_805_p2[0:0] === 1'b1) ? 6'd1 : k_1_phi_fu_372_p4);

assign k_2_cast3_cast_fu_1480_p1 = k_2_mid2_reg_1827;

assign k_2_mid2_fu_1380_p3 = ((tmp_603_fu_1374_p2[0:0] === 1'b1) ? 6'd1 : k_2_phi_fu_495_p4);

assign k_4_fu_911_p2 = (k_1_mid2_reg_1638 + 6'd1);

assign k_5_fu_685_p2 = (2'd1 + k_mid_fu_631_p3);

assign k_6_fu_1451_p2 = (k_2_mid2_reg_1827 + 6'd1);

assign k_cast_mid2_cast_fu_717_p1 = k_cast_mid2_fu_709_p3;

assign k_cast_mid2_fu_709_p3 = ((exitcond73_mid1_fu_679_p2[0:0] === 1'b1) ? k_5_fu_685_p2 : k_mid_fu_631_p3);

assign k_mid_fu_631_p3 = ((tmp_586_reg_1559[0:0] === 1'b1) ? 2'd0 : k_phi_fu_302_p4);

assign m_7_fu_990_p2 = (m_reg_403 + 2'd1);

assign m_axi_weight_V_ARADDR = weight_V_addr_reg_1607;

assign m_axi_weight_V_ARBURST = 2'd0;

assign m_axi_weight_V_ARCACHE = 4'd0;

assign m_axi_weight_V_ARID = 1'd0;

assign m_axi_weight_V_ARLEN = 32'd1;

assign m_axi_weight_V_ARLOCK = 2'd0;

assign m_axi_weight_V_ARPROT = 3'd0;

assign m_axi_weight_V_ARQOS = 4'd0;

assign m_axi_weight_V_ARREGION = 4'd0;

assign m_axi_weight_V_ARSIZE = 3'd0;

assign m_axi_weight_V_ARUSER = 1'd0;

assign m_axi_weight_V_AWADDR = 32'd0;

assign m_axi_weight_V_AWBURST = 2'd0;

assign m_axi_weight_V_AWCACHE = 4'd0;

assign m_axi_weight_V_AWID = 1'd0;

assign m_axi_weight_V_AWLEN = 32'd0;

assign m_axi_weight_V_AWLOCK = 2'd0;

assign m_axi_weight_V_AWPROT = 3'd0;

assign m_axi_weight_V_AWQOS = 4'd0;

assign m_axi_weight_V_AWREGION = 4'd0;

assign m_axi_weight_V_AWSIZE = 3'd0;

assign m_axi_weight_V_AWUSER = 1'd0;

assign m_axi_weight_V_AWVALID = 1'b0;

assign m_axi_weight_V_BREADY = 1'b0;

assign m_axi_weight_V_WDATA = 8'd0;

assign m_axi_weight_V_WID = 1'd0;

assign m_axi_weight_V_WLAST = 1'b0;

assign m_axi_weight_V_WSTRB = 1'd0;

assign m_axi_weight_V_WUSER = 1'd0;

assign m_axi_weight_V_WVALID = 1'b0;

assign m_cast9_fu_980_p1 = m_reg_403;

assign n_7_fu_1032_p2 = (n_reg_414 + 2'd1);

assign n_cast8_cast_fu_1022_p1 = n_reg_414;

assign not_exitcond_flatten_1_fu_787_p2 = (exitcond_flatten21_fu_781_p2 ^ 1'd1);

assign not_exitcond_flatten_2_fu_1356_p2 = (exitcond_flatten23_fu_1334_p2 ^ 1'd1);

assign not_exitcond_flatten_4_fu_674_p2 = (ap_reg_pp0_iter1_exitcond_flatten18_reg_1522 | exitcond_flatten_not_fu_669_p2);

assign not_exitcond_flatten_fu_554_p2 = (exitcond_flatten18_reg_1522 ^ 1'd1);

assign p_1_fu_727_p2 = (2'd1 + p_mid2_fu_701_p3);

assign p_cast_fu_749_p1 = p_mid2_reg_1576;

assign p_mid2_fu_701_p3 = ((tmp_682_fu_696_p2[0:0] === 1'b1) ? 2'd0 : p_phi_fu_314_p4);

assign p_shl10_cast_fu_1082_p1 = tmp_608_fu_1074_p3;

assign p_shl11_cast_fu_1294_p3 = {{tmp_691_reg_1766}, {2'd0}};

assign p_shl13_cast_fu_1228_p1 = tmp_619_fu_1220_p3;

assign p_shl14_cast_fu_1184_p3 = {{tmp_616_fu_1179_p2}, {5'd0}};

assign p_shl15_cast_fu_1200_p1 = tmp_688_fu_1192_p3;

assign p_shl16_cast_fu_1157_p1 = tmp_613_fu_1149_p3;

assign p_shl17_cast_fu_1169_p1 = tmp_614_fu_1161_p3;

assign p_shl18_cast_fu_1456_p3 = {{tmp_604_reg_1843}, {5'd0}};

assign p_shl19_cast_fu_1470_p1 = tmp_685_fu_1463_p3;

assign p_shl1_fu_659_p1 = $signed(tmp_681_fu_651_p3);

assign p_shl20_cast_fu_1409_p1 = tmp_600_fu_1402_p3;

assign p_shl21_cast_fu_1420_p1 = tmp_601_fu_1413_p3;

assign p_shl2_cast_fu_606_p1 = tmp_fu_599_p3;

assign p_shl3_cast_fu_916_p3 = {{tmp_597_reg_1659}, {5'd0}};

assign p_shl4_cast_fu_930_p1 = tmp_684_fu_923_p3;

assign p_shl5_cast_fu_866_p1 = tmp_593_fu_858_p3;

assign p_shl6_cast_fu_878_p1 = tmp_594_fu_870_p3;

assign p_shl7_cast_fu_1097_p3 = {{tmp_610_fu_1092_p2}, {5'd0}};

assign p_shl8_cast_fu_1113_p1 = tmp_687_fu_1105_p3;

assign p_shl9_cast_fu_1070_p1 = tmp_607_fu_1062_p3;

assign p_shl_fu_1259_p1 = $signed(tmp_689_fu_1251_p3);

assign sum_fu_758_p2 = (tmp_592_fu_752_p2 + conv1_weight_V3);

assign tmp1_cast_fu_1002_p1 = $signed(tmp1_fu_996_p2);

assign tmp1_fu_996_p2 = ($signed(m_reg_403) + $signed(2'd3));

assign tmp2_cast_fu_1044_p1 = $signed(tmp2_fu_1038_p2);

assign tmp2_fu_1038_p2 = ($signed(n_reg_414) + $signed(2'd3));

assign tmp_27_cast_cast_fu_1054_p1 = tmp_27_fu_1048_p2;

assign tmp_27_fu_1048_p2 = ($signed(w_reg_391) + $signed(tmp2_cast_fu_1044_p1));

assign tmp_585_fu_610_p2 = (p_shl2_cast_fu_606_p1 - i_cast_mid2_cast_fu_596_p1);

assign tmp_586_fu_577_p2 = (exitcond_flatten_mid_fu_565_p2 | exitcond_flatten18_reg_1522);

assign tmp_587_fu_641_p2 = ($signed(j_cast_mid2_cast_fu_638_p1) + $signed(tmp_737_cast_fu_616_p1));

assign tmp_588_fu_663_p2 = ($signed(p_shl1_fu_659_p1) - $signed(tmp_739_cast_fu_647_p1));

assign tmp_589_fu_691_p2 = (exitcond73_mid1_fu_679_p2 | exitcond_flatten_mid_reg_1554);

assign tmp_590_fu_721_p2 = (k_cast_mid2_cast_fu_717_p1 + tmp_588_fu_663_p2);

assign tmp_591_fu_744_p2 = (tmp_683_fu_739_p2 - tmp_590_reg_1586);

assign tmp_592_fu_752_p2 = (p_cast_fu_749_p1 + tmp_591_fu_744_p2);

assign tmp_593_fu_858_p3 = {{i_1_cast_mid2_v_fu_846_p3}, {5'd0}};

assign tmp_594_fu_870_p3 = {{i_1_cast_mid2_v_fu_846_p3}, {1'd0}};

assign tmp_595_fu_882_p2 = (p_shl5_cast_fu_866_p1 + p_shl6_cast_fu_878_p1);

assign tmp_596_fu_805_p2 = (exitcond70_mid_fu_799_p2 | exitcond_flatten21_fu_781_p2);

assign tmp_597_fu_905_p2 = (j_1_cast_mid2_cast_fu_901_p1 + tmp_595_fu_882_p2);

assign tmp_598_fu_934_p2 = (p_shl3_cast_fu_916_p3 + p_shl4_cast_fu_930_p1);

assign tmp_599_fu_943_p2 = (k_1_cast_cast_fu_940_p1 + tmp_598_fu_934_p2);

assign tmp_600_fu_1402_p3 = {{i_2_cast5_mid2_v_reg_1815}, {5'd0}};

assign tmp_601_fu_1413_p3 = {{i_2_cast5_mid2_v_reg_1815}, {1'd0}};

assign tmp_602_fu_1424_p2 = (p_shl20_cast_fu_1409_p1 + p_shl21_cast_fu_1420_p1);

assign tmp_603_fu_1374_p2 = (exitcond_mid_fu_1368_p2 | exitcond_flatten23_fu_1334_p2);

assign tmp_604_fu_1445_p2 = (j_2_cast4_mid2_cast_fu_1441_p1 + tmp_602_fu_1424_p2);

assign tmp_605_fu_1474_p2 = (p_shl18_cast_fu_1456_p3 + p_shl19_cast_fu_1470_p1);

assign tmp_606_fu_1483_p2 = (k_2_cast3_cast_fu_1480_p1 + tmp_605_fu_1474_p2);

assign tmp_607_fu_1062_p3 = {{ci_reg_425}, {5'd0}};

assign tmp_608_fu_1074_p3 = {{ci_reg_425}, {1'd0}};

assign tmp_609_fu_1086_p2 = (p_shl9_cast_fu_1070_p1 + p_shl10_cast_fu_1082_p1);

assign tmp_610_fu_1092_p2 = (tmp_cast_cast_reg_1710 + tmp_609_fu_1086_p2);

assign tmp_611_fu_1117_p2 = (p_shl7_cast_fu_1097_p3 + p_shl8_cast_fu_1113_p1);

assign tmp_612_fu_1123_p2 = (tmp_27_cast_cast_reg_1733 + tmp_611_fu_1117_p2);

assign tmp_613_fu_1149_p3 = {{co_reg_436}, {5'd0}};

assign tmp_614_fu_1161_p3 = {{co_reg_436}, {1'd0}};

assign tmp_615_fu_1173_p2 = (p_shl17_cast_fu_1169_p1 + p_shl16_cast_fu_1157_p1);

assign tmp_616_fu_1179_p2 = (tmp_615_fu_1173_p2 + h_cast_cast_reg_1675);

assign tmp_617_fu_1204_p2 = (p_shl15_cast_fu_1200_p1 + p_shl14_cast_fu_1184_p3);

assign tmp_618_fu_1210_p2 = (tmp_617_fu_1204_p2 + w_cast_cast_reg_1684);

assign tmp_619_fu_1220_p3 = {{co_reg_436}, {2'd0}};

assign tmp_620_fu_1232_p2 = (p_shl13_cast_fu_1228_p1 - co_cast6_cast_fu_1145_p1);

assign tmp_621_fu_1242_p2 = ($signed(tmp_784_cast_fu_1238_p1) + $signed(ci_cast7_cast_reg_1738));

assign tmp_622_fu_1263_p2 = ($signed(p_shl_fu_1259_p1) - $signed(tmp_785_cast_fu_1247_p1));

assign tmp_623_fu_1269_p2 = (tmp_622_fu_1263_p2 + m_cast9_reg_1697);

assign tmp_624_fu_1301_p2 = (p_shl11_cast_fu_1294_p3 - tmp_690_reg_1761);

assign tmp_625_fu_1306_p2 = (tmp_624_fu_1301_p2 + n_cast8_cast_reg_1720);

assign tmp_681_fu_651_p3 = {{tmp_587_fu_641_p2}, {2'd0}};

assign tmp_682_fu_696_p2 = (tmp_589_fu_691_p2 | ap_reg_pp0_iter1_exitcond_flatten18_reg_1522);

assign tmp_683_fu_739_p2 = tmp_590_reg_1586 << 32'd2;

assign tmp_684_fu_923_p3 = {{tmp_597_reg_1659}, {1'd0}};

assign tmp_685_fu_1463_p3 = {{tmp_604_reg_1843}, {1'd0}};

assign tmp_686_fu_1494_p3 = output_V_q0[32'd7];

assign tmp_687_fu_1105_p3 = {{tmp_610_fu_1092_p2}, {1'd0}};

assign tmp_688_fu_1192_p3 = {{tmp_616_fu_1179_p2}, {1'd0}};

assign tmp_689_fu_1251_p3 = {{tmp_621_fu_1242_p2}, {2'd0}};

assign tmp_690_fu_1274_p1 = tmp_623_fu_1269_p2[10:0];

assign tmp_691_fu_1278_p1 = tmp_623_fu_1269_p2[8:0];

assign tmp_737_cast_fu_616_p1 = $signed(tmp_585_fu_610_p2);

assign tmp_739_cast_fu_647_p1 = $signed(tmp_587_fu_641_p2);

assign tmp_757_cast_fu_949_p1 = tmp_599_fu_943_p2;

assign tmp_766_cast_fu_1489_p1 = tmp_606_fu_1483_p2;

assign tmp_774_cast_fu_1128_p1 = tmp_612_fu_1123_p2;

assign tmp_782_cast_fu_1215_p1 = tmp_618_fu_1210_p2;

assign tmp_784_cast_fu_1238_p1 = $signed(tmp_620_fu_1232_p2);

assign tmp_785_cast_fu_1247_p1 = $signed(tmp_621_fu_1242_p2);

assign tmp_791_cast_fu_1311_p1 = tmp_625_fu_1306_p2;

assign tmp_cast_cast_fu_1012_p1 = tmp_s_fu_1006_p2;

assign tmp_fu_599_p3 = {{i_cast_mid2_v_reg_1537}, {2'd0}};

assign tmp_s_fu_1006_p2 = ($signed(h_reg_379) + $signed(tmp1_cast_fu_1002_p1));

assign w_44_fu_1016_p2 = (w_reg_391 + 6'd1);

assign w_cast_cast_fu_964_p1 = w_reg_391;

always @ (posedge ap_clk) begin
    h_cast_cast_reg_1675[10:6] <= 5'b00000;
    w_cast_cast_reg_1684[15:6] <= 10'b0000000000;
    m_cast9_reg_1697[31:2] <= 30'b000000000000000000000000000000;
    tmp_cast_cast_reg_1710[7:6] <= 2'b00;
    n_cast8_cast_reg_1720[10:2] <= 9'b000000000;
    tmp_27_cast_cast_reg_1733[12:6] <= 7'b0000000;
    ci_cast7_cast_reg_1738[8:2] <= 7'b0000000;
end

endmodule //conv1_p
