// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shuffle_48_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        left_V_address0,
        left_V_ce0,
        left_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        buffer1_1_48_8x8_p_V_24_address0,
        buffer1_1_48_8x8_p_V_24_ce0,
        buffer1_1_48_8x8_p_V_24_q0,
        buffer1_1_48_8x8_p_V_1_address0,
        buffer1_1_48_8x8_p_V_1_ce0,
        buffer1_1_48_8x8_p_V_1_q0,
        buffer1_1_48_8x8_p_V_2_address0,
        buffer1_1_48_8x8_p_V_2_ce0,
        buffer1_1_48_8x8_p_V_2_q0,
        buffer1_1_48_8x8_p_V_3_address0,
        buffer1_1_48_8x8_p_V_3_ce0,
        buffer1_1_48_8x8_p_V_3_q0,
        buffer1_1_48_8x8_p_V_4_address0,
        buffer1_1_48_8x8_p_V_4_ce0,
        buffer1_1_48_8x8_p_V_4_q0,
        buffer1_1_48_8x8_p_V_5_address0,
        buffer1_1_48_8x8_p_V_5_ce0,
        buffer1_1_48_8x8_p_V_5_q0,
        buffer1_1_48_8x8_p_V_6_address0,
        buffer1_1_48_8x8_p_V_6_ce0,
        buffer1_1_48_8x8_p_V_6_q0,
        buffer1_1_48_8x8_p_V_7_address0,
        buffer1_1_48_8x8_p_V_7_ce0,
        buffer1_1_48_8x8_p_V_7_q0,
        buffer1_1_48_8x8_p_V_8_address0,
        buffer1_1_48_8x8_p_V_8_ce0,
        buffer1_1_48_8x8_p_V_8_q0,
        buffer1_1_48_8x8_p_V_9_address0,
        buffer1_1_48_8x8_p_V_9_ce0,
        buffer1_1_48_8x8_p_V_9_q0,
        buffer1_1_48_8x8_p_V_10_address0,
        buffer1_1_48_8x8_p_V_10_ce0,
        buffer1_1_48_8x8_p_V_10_q0,
        buffer1_1_48_8x8_p_V_11_address0,
        buffer1_1_48_8x8_p_V_11_ce0,
        buffer1_1_48_8x8_p_V_11_q0,
        buffer1_1_48_8x8_p_V_12_address0,
        buffer1_1_48_8x8_p_V_12_ce0,
        buffer1_1_48_8x8_p_V_12_q0,
        buffer1_1_48_8x8_p_V_13_address0,
        buffer1_1_48_8x8_p_V_13_ce0,
        buffer1_1_48_8x8_p_V_13_q0,
        buffer1_1_48_8x8_p_V_14_address0,
        buffer1_1_48_8x8_p_V_14_ce0,
        buffer1_1_48_8x8_p_V_14_q0,
        buffer1_1_48_8x8_p_V_15_address0,
        buffer1_1_48_8x8_p_V_15_ce0,
        buffer1_1_48_8x8_p_V_15_q0,
        buffer1_1_48_8x8_p_V_16_address0,
        buffer1_1_48_8x8_p_V_16_ce0,
        buffer1_1_48_8x8_p_V_16_q0,
        buffer1_1_48_8x8_p_V_17_address0,
        buffer1_1_48_8x8_p_V_17_ce0,
        buffer1_1_48_8x8_p_V_17_q0,
        buffer1_1_48_8x8_p_V_18_address0,
        buffer1_1_48_8x8_p_V_18_ce0,
        buffer1_1_48_8x8_p_V_18_q0,
        buffer1_1_48_8x8_p_V_19_address0,
        buffer1_1_48_8x8_p_V_19_ce0,
        buffer1_1_48_8x8_p_V_19_q0,
        buffer1_1_48_8x8_p_V_20_address0,
        buffer1_1_48_8x8_p_V_20_ce0,
        buffer1_1_48_8x8_p_V_20_q0,
        buffer1_1_48_8x8_p_V_21_address0,
        buffer1_1_48_8x8_p_V_21_ce0,
        buffer1_1_48_8x8_p_V_21_q0,
        buffer1_1_48_8x8_p_V_22_address0,
        buffer1_1_48_8x8_p_V_22_ce0,
        buffer1_1_48_8x8_p_V_22_q0,
        buffer1_1_48_8x8_p_V_23_address0,
        buffer1_1_48_8x8_p_V_23_ce0,
        buffer1_1_48_8x8_p_V_23_q0
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] left_V_address0;
output   left_V_ce0;
input  [7:0] left_V_q0;
output  [13:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [7:0] buffer1_1_48_8x8_p_V_24_address0;
output   buffer1_1_48_8x8_p_V_24_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_24_q0;
output  [7:0] buffer1_1_48_8x8_p_V_1_address0;
output   buffer1_1_48_8x8_p_V_1_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_1_q0;
output  [7:0] buffer1_1_48_8x8_p_V_2_address0;
output   buffer1_1_48_8x8_p_V_2_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_2_q0;
output  [7:0] buffer1_1_48_8x8_p_V_3_address0;
output   buffer1_1_48_8x8_p_V_3_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_3_q0;
output  [7:0] buffer1_1_48_8x8_p_V_4_address0;
output   buffer1_1_48_8x8_p_V_4_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_4_q0;
output  [7:0] buffer1_1_48_8x8_p_V_5_address0;
output   buffer1_1_48_8x8_p_V_5_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_5_q0;
output  [7:0] buffer1_1_48_8x8_p_V_6_address0;
output   buffer1_1_48_8x8_p_V_6_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_6_q0;
output  [7:0] buffer1_1_48_8x8_p_V_7_address0;
output   buffer1_1_48_8x8_p_V_7_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_7_q0;
output  [7:0] buffer1_1_48_8x8_p_V_8_address0;
output   buffer1_1_48_8x8_p_V_8_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_8_q0;
output  [7:0] buffer1_1_48_8x8_p_V_9_address0;
output   buffer1_1_48_8x8_p_V_9_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_9_q0;
output  [7:0] buffer1_1_48_8x8_p_V_10_address0;
output   buffer1_1_48_8x8_p_V_10_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_10_q0;
output  [7:0] buffer1_1_48_8x8_p_V_11_address0;
output   buffer1_1_48_8x8_p_V_11_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_11_q0;
output  [7:0] buffer1_1_48_8x8_p_V_12_address0;
output   buffer1_1_48_8x8_p_V_12_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_12_q0;
output  [7:0] buffer1_1_48_8x8_p_V_13_address0;
output   buffer1_1_48_8x8_p_V_13_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_13_q0;
output  [7:0] buffer1_1_48_8x8_p_V_14_address0;
output   buffer1_1_48_8x8_p_V_14_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_14_q0;
output  [7:0] buffer1_1_48_8x8_p_V_15_address0;
output   buffer1_1_48_8x8_p_V_15_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_15_q0;
output  [7:0] buffer1_1_48_8x8_p_V_16_address0;
output   buffer1_1_48_8x8_p_V_16_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_16_q0;
output  [7:0] buffer1_1_48_8x8_p_V_17_address0;
output   buffer1_1_48_8x8_p_V_17_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_17_q0;
output  [7:0] buffer1_1_48_8x8_p_V_18_address0;
output   buffer1_1_48_8x8_p_V_18_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_18_q0;
output  [7:0] buffer1_1_48_8x8_p_V_19_address0;
output   buffer1_1_48_8x8_p_V_19_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_19_q0;
output  [7:0] buffer1_1_48_8x8_p_V_20_address0;
output   buffer1_1_48_8x8_p_V_20_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_20_q0;
output  [7:0] buffer1_1_48_8x8_p_V_21_address0;
output   buffer1_1_48_8x8_p_V_21_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_21_q0;
output  [7:0] buffer1_1_48_8x8_p_V_22_address0;
output   buffer1_1_48_8x8_p_V_22_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_22_q0;
output  [7:0] buffer1_1_48_8x8_p_V_23_address0;
output   buffer1_1_48_8x8_p_V_23_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_23_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg left_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg buffer1_1_48_8x8_p_V_24_ce0;
reg buffer1_1_48_8x8_p_V_1_ce0;
reg buffer1_1_48_8x8_p_V_2_ce0;
reg buffer1_1_48_8x8_p_V_3_ce0;
reg buffer1_1_48_8x8_p_V_4_ce0;
reg buffer1_1_48_8x8_p_V_5_ce0;
reg buffer1_1_48_8x8_p_V_6_ce0;
reg buffer1_1_48_8x8_p_V_7_ce0;
reg buffer1_1_48_8x8_p_V_8_ce0;
reg buffer1_1_48_8x8_p_V_9_ce0;
reg buffer1_1_48_8x8_p_V_10_ce0;
reg buffer1_1_48_8x8_p_V_11_ce0;
reg buffer1_1_48_8x8_p_V_12_ce0;
reg buffer1_1_48_8x8_p_V_13_ce0;
reg buffer1_1_48_8x8_p_V_14_ce0;
reg buffer1_1_48_8x8_p_V_15_ce0;
reg buffer1_1_48_8x8_p_V_16_ce0;
reg buffer1_1_48_8x8_p_V_17_ce0;
reg buffer1_1_48_8x8_p_V_18_ce0;
reg buffer1_1_48_8x8_p_V_19_ce0;
reg buffer1_1_48_8x8_p_V_20_ce0;
reg buffer1_1_48_8x8_p_V_21_ce0;
reg buffer1_1_48_8x8_p_V_22_ce0;
reg buffer1_1_48_8x8_p_V_23_ce0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_650_fu_470_p1;
reg   [0:0] tmp_650_reg_876;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_499_fu_498_p2;
reg   [10:0] tmp_499_reg_880;
wire   [6:0] co_28_fu_510_p2;
reg   [6:0] co_28_reg_888;
reg   [5:0] p_lshr_f_cast_reg_893;
wire   [0:0] exitcond5_fu_504_p2;
wire   [9:0] tmp_502_fu_554_p2;
reg   [9:0] tmp_502_reg_901;
wire    ap_CS_fsm_state11;
wire   [7:0] arrayNo_cast_fu_560_p1;
reg   [7:0] arrayNo_cast_reg_906;
wire   [9:0] tmp_505_fu_615_p2;
reg   [9:0] tmp_505_reg_911;
wire   [13:0] tmp_507_fu_658_p2;
reg   [13:0] tmp_507_reg_916;
wire    ap_CS_fsm_state12;
wire   [14:0] tmp_509_fu_693_p2;
reg   [14:0] tmp_509_reg_921;
wire   [8:0] tmp_511_fu_728_p2;
reg   [8:0] tmp_511_reg_926;
wire   [3:0] h_28_fu_740_p2;
reg   [3:0] h_28_reg_934;
wire    ap_CS_fsm_state13;
reg   [13:0] output_V_addr_reg_944;
wire   [3:0] w_38_fu_817_p2;
reg   [3:0] w_38_reg_1072;
wire    ap_CS_fsm_state14;
wire   [7:0] tmp_fu_823_p26;
wire    ap_CS_fsm_state15;
reg   [6:0] co_reg_427;
wire   [0:0] exitcond4_fu_734_p2;
reg   [3:0] h_reg_438;
wire   [0:0] exitcond_fu_811_p2;
reg   [3:0] w_reg_449;
wire    ap_CS_fsm_state16;
reg   [7:0] storemerge_reg_460;
wire   [31:0] tmp_629_cast_fu_763_p1;
wire   [31:0] tmp_630_cast_fu_773_p1;
wire   [31:0] tmp_631_cast_fu_783_p1;
wire   [9:0] tmp_s_fu_474_p3;
wire   [7:0] tmp_498_fu_486_p3;
wire   [10:0] p_shl_cast_fu_482_p1;
wire   [10:0] p_shl1_cast_fu_494_p1;
wire   [5:0] grp_fu_526_p0;
wire   [8:0] tmp_500_fu_532_p3;
wire   [6:0] tmp_501_fu_543_p3;
wire   [9:0] p_shl5_cast_fu_550_p1;
wire   [9:0] p_shl4_cast_fu_539_p1;
wire   [5:0] grp_fu_526_p2;
wire   [5:0] mul_fu_567_p0;
wire   [13:0] mul_fu_567_p2;
wire   [2:0] tmp_651_fu_573_p4;
wire   [5:0] tmp_652_fu_583_p3;
wire  signed [8:0] tmp_503_fu_591_p1;
wire   [3:0] tmp_653_fu_599_p3;
wire  signed [6:0] tmp_504_fu_607_p1;
wire   [9:0] p_shl3_cast_fu_611_p1;
wire   [9:0] p_shl2_cast_fu_595_p1;
wire   [9:0] h_cast2_cast_fu_625_p1;
wire   [9:0] tmp_506_fu_629_p2;
wire   [12:0] tmp_654_fu_634_p3;
wire   [10:0] tmp_655_fu_646_p3;
wire   [13:0] p_shl11_cast_fu_654_p1;
wire   [13:0] p_shl10_cast_fu_642_p1;
wire   [10:0] h_cast2_cast2_fu_621_p1;
wire   [10:0] tmp_508_fu_664_p2;
wire   [13:0] tmp_656_fu_669_p3;
wire   [11:0] tmp_657_fu_681_p3;
wire   [14:0] p_shl9_cast_fu_689_p1;
wire   [14:0] p_shl8_cast_fu_677_p1;
wire   [9:0] tmp_510_fu_699_p2;
wire   [5:0] tmp_658_fu_704_p1;
wire   [7:0] tmp_659_fu_716_p1;
wire   [8:0] p_shl7_cast_fu_720_p3;
wire   [8:0] p_shl6_cast_fu_708_p3;
wire   [13:0] w_cast1_cast_fu_754_p1;
wire   [13:0] tmp_512_fu_758_p2;
wire   [14:0] w_cast1_cast4_fu_750_p1;
wire   [14:0] tmp_513_fu_768_p2;
wire   [8:0] w_cast1_cast3_fu_746_p1;
wire   [8:0] tmp_514_fu_778_p2;
reg    grp_fu_526_ap_start;
wire    grp_fu_526_ap_done;
reg   [15:0] ap_NS_fsm;
wire   [13:0] mul_fu_567_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

ShuffleNetV2_uremhbi #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 6 ))
ShuffleNetV2_uremhbi_x_U478(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_526_ap_start),
    .done(grp_fu_526_ap_done),
    .din0(grp_fu_526_p0),
    .din1(6'd24),
    .ce(1'b1),
    .dout(grp_fu_526_p2)
);

ShuffleNetV2_mux_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_ibs_x_U479(
    .din1(buffer1_1_48_8x8_p_V_24_q0),
    .din2(buffer1_1_48_8x8_p_V_1_q0),
    .din3(buffer1_1_48_8x8_p_V_2_q0),
    .din4(buffer1_1_48_8x8_p_V_3_q0),
    .din5(buffer1_1_48_8x8_p_V_4_q0),
    .din6(buffer1_1_48_8x8_p_V_5_q0),
    .din7(buffer1_1_48_8x8_p_V_6_q0),
    .din8(buffer1_1_48_8x8_p_V_7_q0),
    .din9(buffer1_1_48_8x8_p_V_8_q0),
    .din10(buffer1_1_48_8x8_p_V_9_q0),
    .din11(buffer1_1_48_8x8_p_V_10_q0),
    .din12(buffer1_1_48_8x8_p_V_11_q0),
    .din13(buffer1_1_48_8x8_p_V_12_q0),
    .din14(buffer1_1_48_8x8_p_V_13_q0),
    .din15(buffer1_1_48_8x8_p_V_14_q0),
    .din16(buffer1_1_48_8x8_p_V_15_q0),
    .din17(buffer1_1_48_8x8_p_V_16_q0),
    .din18(buffer1_1_48_8x8_p_V_17_q0),
    .din19(buffer1_1_48_8x8_p_V_18_q0),
    .din20(buffer1_1_48_8x8_p_V_19_q0),
    .din21(buffer1_1_48_8x8_p_V_20_q0),
    .din22(buffer1_1_48_8x8_p_V_21_q0),
    .din23(buffer1_1_48_8x8_p_V_22_q0),
    .din24(buffer1_1_48_8x8_p_V_23_q0),
    .din25(arrayNo_cast_reg_906),
    .dout(tmp_fu_823_p26)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (exitcond4_fu_734_p2 == 1'd1))) begin
        co_reg_427 <= co_28_reg_888;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_427 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (1'd1 == exitcond_fu_811_p2))) begin
        h_reg_438 <= h_28_reg_934;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        h_reg_438 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        storemerge_reg_460 <= tmp_fu_823_p26;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        storemerge_reg_460 <= left_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd0 == exitcond4_fu_734_p2))) begin
        w_reg_449 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        w_reg_449 <= w_38_reg_1072;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        arrayNo_cast_reg_906[5 : 0] <= arrayNo_cast_fu_560_p1[5 : 0];
        tmp_502_reg_901[9 : 1] <= tmp_502_fu_554_p2[9 : 1];
        tmp_505_reg_911[9 : 1] <= tmp_505_fu_615_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_28_reg_888 <= co_28_fu_510_p2;
        tmp_499_reg_880[10 : 1] <= tmp_499_fu_498_p2[10 : 1];
        tmp_650_reg_876 <= tmp_650_fu_470_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        h_28_reg_934 <= h_28_fu_740_p2;
        tmp_507_reg_916[13 : 1] <= tmp_507_fu_658_p2[13 : 1];
        tmp_509_reg_921[14 : 1] <= tmp_509_fu_693_p2[14 : 1];
        tmp_511_reg_926[8 : 1] <= tmp_511_fu_728_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_addr_reg_944 <= tmp_630_cast_fu_773_p1;
        w_38_reg_1072 <= w_38_fu_817_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_504_p2 == 1'd0))) begin
        p_lshr_f_cast_reg_893 <= {{co_reg_427[6:1]}};
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_504_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_504_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_10_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_11_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_12_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_13_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_14_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_15_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_16_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_17_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_18_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_19_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_1_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_20_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_21_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_22_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_23_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_24_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_2_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_3_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_4_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_5_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_6_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_7_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_8_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        buffer1_1_48_8x8_p_V_9_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_504_p2 == 1'd0))) begin
        grp_fu_526_ap_start = 1'b1;
    end else begin
        grp_fu_526_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        left_V_ce0 = 1'b1;
    end else begin
        left_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_504_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (exitcond4_fu_734_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (1'd1 == exitcond_fu_811_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((1'b1 == ap_CS_fsm_state13) & (1'd0 == exitcond_fu_811_p2) & (tmp_650_reg_876 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign arrayNo_cast_fu_560_p1 = grp_fu_526_p2;

assign buffer1_1_48_8x8_p_V_10_address0 = tmp_631_cast_fu_783_p1;

assign buffer1_1_48_8x8_p_V_11_address0 = tmp_631_cast_fu_783_p1;

assign buffer1_1_48_8x8_p_V_12_address0 = tmp_631_cast_fu_783_p1;

assign buffer1_1_48_8x8_p_V_13_address0 = tmp_631_cast_fu_783_p1;

assign buffer1_1_48_8x8_p_V_14_address0 = tmp_631_cast_fu_783_p1;

assign buffer1_1_48_8x8_p_V_15_address0 = tmp_631_cast_fu_783_p1;

assign buffer1_1_48_8x8_p_V_16_address0 = tmp_631_cast_fu_783_p1;

assign buffer1_1_48_8x8_p_V_17_address0 = tmp_631_cast_fu_783_p1;

assign buffer1_1_48_8x8_p_V_18_address0 = tmp_631_cast_fu_783_p1;

assign buffer1_1_48_8x8_p_V_19_address0 = tmp_631_cast_fu_783_p1;

assign buffer1_1_48_8x8_p_V_1_address0 = tmp_631_cast_fu_783_p1;

assign buffer1_1_48_8x8_p_V_20_address0 = tmp_631_cast_fu_783_p1;

assign buffer1_1_48_8x8_p_V_21_address0 = tmp_631_cast_fu_783_p1;

assign buffer1_1_48_8x8_p_V_22_address0 = tmp_631_cast_fu_783_p1;

assign buffer1_1_48_8x8_p_V_23_address0 = tmp_631_cast_fu_783_p1;

assign buffer1_1_48_8x8_p_V_24_address0 = tmp_631_cast_fu_783_p1;

assign buffer1_1_48_8x8_p_V_2_address0 = tmp_631_cast_fu_783_p1;

assign buffer1_1_48_8x8_p_V_3_address0 = tmp_631_cast_fu_783_p1;

assign buffer1_1_48_8x8_p_V_4_address0 = tmp_631_cast_fu_783_p1;

assign buffer1_1_48_8x8_p_V_5_address0 = tmp_631_cast_fu_783_p1;

assign buffer1_1_48_8x8_p_V_6_address0 = tmp_631_cast_fu_783_p1;

assign buffer1_1_48_8x8_p_V_7_address0 = tmp_631_cast_fu_783_p1;

assign buffer1_1_48_8x8_p_V_8_address0 = tmp_631_cast_fu_783_p1;

assign buffer1_1_48_8x8_p_V_9_address0 = tmp_631_cast_fu_783_p1;

assign co_28_fu_510_p2 = (7'd1 + co_reg_427);

assign exitcond4_fu_734_p2 = ((h_reg_438 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond5_fu_504_p2 = ((co_reg_427 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond_fu_811_p2 = ((w_reg_449 == 4'd10) ? 1'b1 : 1'b0);

assign grp_fu_526_p0 = {{co_reg_427[6:1]}};

assign h_28_fu_740_p2 = (4'd1 + h_reg_438);

assign h_cast2_cast2_fu_621_p1 = h_reg_438;

assign h_cast2_cast_fu_625_p1 = h_reg_438;

assign left_V_address0 = tmp_629_cast_fu_763_p1;

assign mul_fu_567_p0 = mul_fu_567_p00;

assign mul_fu_567_p00 = p_lshr_f_cast_reg_893;

assign mul_fu_567_p2 = (mul_fu_567_p0 * $signed('h56));

assign output_V_address0 = output_V_addr_reg_944;

assign output_V_d0 = storemerge_reg_460;

assign p_shl10_cast_fu_642_p1 = tmp_654_fu_634_p3;

assign p_shl11_cast_fu_654_p1 = tmp_655_fu_646_p3;

assign p_shl1_cast_fu_494_p1 = tmp_498_fu_486_p3;

assign p_shl2_cast_fu_595_p1 = $unsigned(tmp_503_fu_591_p1);

assign p_shl3_cast_fu_611_p1 = $unsigned(tmp_504_fu_607_p1);

assign p_shl4_cast_fu_539_p1 = tmp_500_fu_532_p3;

assign p_shl5_cast_fu_550_p1 = tmp_501_fu_543_p3;

assign p_shl6_cast_fu_708_p3 = {{tmp_658_fu_704_p1}, {3'd0}};

assign p_shl7_cast_fu_720_p3 = {{tmp_659_fu_716_p1}, {1'd0}};

assign p_shl8_cast_fu_677_p1 = tmp_656_fu_669_p3;

assign p_shl9_cast_fu_689_p1 = tmp_657_fu_681_p3;

assign p_shl_cast_fu_482_p1 = tmp_s_fu_474_p3;

assign tmp_498_fu_486_p3 = {{co_reg_427}, {1'd0}};

assign tmp_499_fu_498_p2 = (p_shl_cast_fu_482_p1 + p_shl1_cast_fu_494_p1);

assign tmp_500_fu_532_p3 = {{p_lshr_f_cast_reg_893}, {3'd0}};

assign tmp_501_fu_543_p3 = {{p_lshr_f_cast_reg_893}, {1'd0}};

assign tmp_502_fu_554_p2 = (p_shl5_cast_fu_550_p1 + p_shl4_cast_fu_539_p1);

assign tmp_503_fu_591_p1 = $signed(tmp_652_fu_583_p3);

assign tmp_504_fu_607_p1 = $signed(tmp_653_fu_599_p3);

assign tmp_505_fu_615_p2 = (p_shl3_cast_fu_611_p1 + p_shl2_cast_fu_595_p1);

assign tmp_506_fu_629_p2 = (tmp_502_reg_901 + h_cast2_cast_fu_625_p1);

assign tmp_507_fu_658_p2 = (p_shl11_cast_fu_654_p1 + p_shl10_cast_fu_642_p1);

assign tmp_508_fu_664_p2 = (tmp_499_reg_880 + h_cast2_cast2_fu_621_p1);

assign tmp_509_fu_693_p2 = (p_shl9_cast_fu_689_p1 + p_shl8_cast_fu_677_p1);

assign tmp_510_fu_699_p2 = (tmp_505_reg_911 + h_cast2_cast_fu_625_p1);

assign tmp_511_fu_728_p2 = (p_shl7_cast_fu_720_p3 + p_shl6_cast_fu_708_p3);

assign tmp_512_fu_758_p2 = (tmp_507_reg_916 + w_cast1_cast_fu_754_p1);

assign tmp_513_fu_768_p2 = (tmp_509_reg_921 + w_cast1_cast4_fu_750_p1);

assign tmp_514_fu_778_p2 = (tmp_511_reg_926 + w_cast1_cast3_fu_746_p1);

assign tmp_629_cast_fu_763_p1 = tmp_512_fu_758_p2;

assign tmp_630_cast_fu_773_p1 = tmp_513_fu_768_p2;

assign tmp_631_cast_fu_783_p1 = tmp_514_fu_778_p2;

assign tmp_650_fu_470_p1 = co_reg_427[0:0];

assign tmp_651_fu_573_p4 = {{mul_fu_567_p2[13:11]}};

assign tmp_652_fu_583_p3 = {{tmp_651_fu_573_p4}, {3'd0}};

assign tmp_653_fu_599_p3 = {{tmp_651_fu_573_p4}, {1'd0}};

assign tmp_654_fu_634_p3 = {{tmp_506_fu_629_p2}, {3'd0}};

assign tmp_655_fu_646_p3 = {{tmp_506_fu_629_p2}, {1'd0}};

assign tmp_656_fu_669_p3 = {{tmp_508_fu_664_p2}, {3'd0}};

assign tmp_657_fu_681_p3 = {{tmp_508_fu_664_p2}, {1'd0}};

assign tmp_658_fu_704_p1 = tmp_510_fu_699_p2[5:0];

assign tmp_659_fu_716_p1 = tmp_510_fu_699_p2[7:0];

assign tmp_s_fu_474_p3 = {{co_reg_427}, {3'd0}};

assign w_38_fu_817_p2 = (w_reg_449 + 4'd1);

assign w_cast1_cast3_fu_746_p1 = w_reg_449;

assign w_cast1_cast4_fu_750_p1 = w_reg_449;

assign w_cast1_cast_fu_754_p1 = w_reg_449;

always @ (posedge ap_clk) begin
    tmp_499_reg_880[0] <= 1'b0;
    tmp_502_reg_901[0] <= 1'b0;
    arrayNo_cast_reg_906[7:6] <= 2'b00;
    tmp_505_reg_911[0] <= 1'b0;
    tmp_507_reg_916[0] <= 1'b0;
    tmp_509_reg_921[0] <= 1'b0;
    tmp_511_reg_926[0] <= 1'b0;
end

endmodule //shuffle_48_p
