// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_last (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        m_axi_weight_V_AWVALID,
        m_axi_weight_V_AWREADY,
        m_axi_weight_V_AWADDR,
        m_axi_weight_V_AWID,
        m_axi_weight_V_AWLEN,
        m_axi_weight_V_AWSIZE,
        m_axi_weight_V_AWBURST,
        m_axi_weight_V_AWLOCK,
        m_axi_weight_V_AWCACHE,
        m_axi_weight_V_AWPROT,
        m_axi_weight_V_AWQOS,
        m_axi_weight_V_AWREGION,
        m_axi_weight_V_AWUSER,
        m_axi_weight_V_WVALID,
        m_axi_weight_V_WREADY,
        m_axi_weight_V_WDATA,
        m_axi_weight_V_WSTRB,
        m_axi_weight_V_WLAST,
        m_axi_weight_V_WID,
        m_axi_weight_V_WUSER,
        m_axi_weight_V_ARVALID,
        m_axi_weight_V_ARREADY,
        m_axi_weight_V_ARADDR,
        m_axi_weight_V_ARID,
        m_axi_weight_V_ARLEN,
        m_axi_weight_V_ARSIZE,
        m_axi_weight_V_ARBURST,
        m_axi_weight_V_ARLOCK,
        m_axi_weight_V_ARCACHE,
        m_axi_weight_V_ARPROT,
        m_axi_weight_V_ARQOS,
        m_axi_weight_V_ARREGION,
        m_axi_weight_V_ARUSER,
        m_axi_weight_V_RVALID,
        m_axi_weight_V_RREADY,
        m_axi_weight_V_RDATA,
        m_axi_weight_V_RLAST,
        m_axi_weight_V_RID,
        m_axi_weight_V_RUSER,
        m_axi_weight_V_RRESP,
        m_axi_weight_V_BVALID,
        m_axi_weight_V_BREADY,
        m_axi_weight_V_BRESP,
        m_axi_weight_V_BID,
        m_axi_weight_V_BUSER,
        conv_last_weight_V9,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        conv_last_output_V_0_address0,
        conv_last_output_V_0_ce0,
        conv_last_output_V_0_we0,
        conv_last_output_V_0_d0,
        conv_last_output_V_0_q0,
        conv_last_output_V_1_address0,
        conv_last_output_V_1_ce0,
        conv_last_output_V_1_we0,
        conv_last_output_V_1_d0,
        conv_last_output_V_1_q0,
        conv_last_output_V_2_address0,
        conv_last_output_V_2_ce0,
        conv_last_output_V_2_we0,
        conv_last_output_V_2_d0,
        conv_last_output_V_2_q0,
        conv_last_output_V_3_address0,
        conv_last_output_V_3_ce0,
        conv_last_output_V_3_we0,
        conv_last_output_V_3_d0,
        conv_last_output_V_3_q0,
        conv_last_output_V_4_address0,
        conv_last_output_V_4_ce0,
        conv_last_output_V_4_we0,
        conv_last_output_V_4_d0,
        conv_last_output_V_4_q0,
        conv_last_output_V_5_address0,
        conv_last_output_V_5_ce0,
        conv_last_output_V_5_we0,
        conv_last_output_V_5_d0,
        conv_last_output_V_5_q0,
        conv_last_output_V_6_address0,
        conv_last_output_V_6_ce0,
        conv_last_output_V_6_we0,
        conv_last_output_V_6_d0,
        conv_last_output_V_6_q0,
        conv_last_output_V_7_address0,
        conv_last_output_V_7_ce0,
        conv_last_output_V_7_we0,
        conv_last_output_V_7_d0,
        conv_last_output_V_7_q0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_pp0_stage0 = 14'd2;
parameter    ap_ST_fsm_state13 = 14'd4;
parameter    ap_ST_fsm_pp1_stage0 = 14'd8;
parameter    ap_ST_fsm_state17 = 14'd16;
parameter    ap_ST_fsm_state18 = 14'd32;
parameter    ap_ST_fsm_state19 = 14'd64;
parameter    ap_ST_fsm_state20 = 14'd128;
parameter    ap_ST_fsm_state21 = 14'd256;
parameter    ap_ST_fsm_state22 = 14'd512;
parameter    ap_ST_fsm_state23 = 14'd1024;
parameter    ap_ST_fsm_pp2_stage0 = 14'd2048;
parameter    ap_ST_fsm_pp2_stage1 = 14'd4096;
parameter    ap_ST_fsm_state28 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_V_address0;
output   input_V_ce0;
input  [7:0] input_V_q0;
output   m_axi_weight_V_AWVALID;
input   m_axi_weight_V_AWREADY;
output  [31:0] m_axi_weight_V_AWADDR;
output  [0:0] m_axi_weight_V_AWID;
output  [31:0] m_axi_weight_V_AWLEN;
output  [2:0] m_axi_weight_V_AWSIZE;
output  [1:0] m_axi_weight_V_AWBURST;
output  [1:0] m_axi_weight_V_AWLOCK;
output  [3:0] m_axi_weight_V_AWCACHE;
output  [2:0] m_axi_weight_V_AWPROT;
output  [3:0] m_axi_weight_V_AWQOS;
output  [3:0] m_axi_weight_V_AWREGION;
output  [0:0] m_axi_weight_V_AWUSER;
output   m_axi_weight_V_WVALID;
input   m_axi_weight_V_WREADY;
output  [7:0] m_axi_weight_V_WDATA;
output  [0:0] m_axi_weight_V_WSTRB;
output   m_axi_weight_V_WLAST;
output  [0:0] m_axi_weight_V_WID;
output  [0:0] m_axi_weight_V_WUSER;
output   m_axi_weight_V_ARVALID;
input   m_axi_weight_V_ARREADY;
output  [31:0] m_axi_weight_V_ARADDR;
output  [0:0] m_axi_weight_V_ARID;
output  [31:0] m_axi_weight_V_ARLEN;
output  [2:0] m_axi_weight_V_ARSIZE;
output  [1:0] m_axi_weight_V_ARBURST;
output  [1:0] m_axi_weight_V_ARLOCK;
output  [3:0] m_axi_weight_V_ARCACHE;
output  [2:0] m_axi_weight_V_ARPROT;
output  [3:0] m_axi_weight_V_ARQOS;
output  [3:0] m_axi_weight_V_ARREGION;
output  [0:0] m_axi_weight_V_ARUSER;
input   m_axi_weight_V_RVALID;
output   m_axi_weight_V_RREADY;
input  [7:0] m_axi_weight_V_RDATA;
input   m_axi_weight_V_RLAST;
input  [0:0] m_axi_weight_V_RID;
input  [0:0] m_axi_weight_V_RUSER;
input  [1:0] m_axi_weight_V_RRESP;
input   m_axi_weight_V_BVALID;
output   m_axi_weight_V_BREADY;
input  [1:0] m_axi_weight_V_BRESP;
input  [0:0] m_axi_weight_V_BID;
input  [0:0] m_axi_weight_V_BUSER;
input  [31:0] conv_last_weight_V9;
output  [8:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [9:0] conv_last_output_V_0_address0;
output   conv_last_output_V_0_ce0;
output   conv_last_output_V_0_we0;
output  [7:0] conv_last_output_V_0_d0;
input  [7:0] conv_last_output_V_0_q0;
output  [9:0] conv_last_output_V_1_address0;
output   conv_last_output_V_1_ce0;
output   conv_last_output_V_1_we0;
output  [7:0] conv_last_output_V_1_d0;
input  [7:0] conv_last_output_V_1_q0;
output  [9:0] conv_last_output_V_2_address0;
output   conv_last_output_V_2_ce0;
output   conv_last_output_V_2_we0;
output  [7:0] conv_last_output_V_2_d0;
input  [7:0] conv_last_output_V_2_q0;
output  [9:0] conv_last_output_V_3_address0;
output   conv_last_output_V_3_ce0;
output   conv_last_output_V_3_we0;
output  [7:0] conv_last_output_V_3_d0;
input  [7:0] conv_last_output_V_3_q0;
output  [9:0] conv_last_output_V_4_address0;
output   conv_last_output_V_4_ce0;
output   conv_last_output_V_4_we0;
output  [7:0] conv_last_output_V_4_d0;
input  [7:0] conv_last_output_V_4_q0;
output  [9:0] conv_last_output_V_5_address0;
output   conv_last_output_V_5_ce0;
output   conv_last_output_V_5_we0;
output  [7:0] conv_last_output_V_5_d0;
input  [7:0] conv_last_output_V_5_q0;
output  [9:0] conv_last_output_V_6_address0;
output   conv_last_output_V_6_ce0;
output   conv_last_output_V_6_we0;
output  [7:0] conv_last_output_V_6_d0;
input  [7:0] conv_last_output_V_6_q0;
output  [9:0] conv_last_output_V_7_address0;
output   conv_last_output_V_7_ce0;
output   conv_last_output_V_7_we0;
output  [7:0] conv_last_output_V_7_d0;
input  [7:0] conv_last_output_V_7_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg m_axi_weight_V_ARVALID;
reg m_axi_weight_V_RREADY;
reg bias_V_ce0;
reg[9:0] conv_last_output_V_0_address0;
reg conv_last_output_V_0_ce0;
reg conv_last_output_V_0_we0;
reg[7:0] conv_last_output_V_0_d0;
reg[9:0] conv_last_output_V_1_address0;
reg conv_last_output_V_1_ce0;
reg conv_last_output_V_1_we0;
reg[7:0] conv_last_output_V_1_d0;
reg[9:0] conv_last_output_V_2_address0;
reg conv_last_output_V_2_ce0;
reg conv_last_output_V_2_we0;
reg[7:0] conv_last_output_V_2_d0;
reg[9:0] conv_last_output_V_3_address0;
reg conv_last_output_V_3_ce0;
reg conv_last_output_V_3_we0;
reg[7:0] conv_last_output_V_3_d0;
reg[9:0] conv_last_output_V_4_address0;
reg conv_last_output_V_4_ce0;
reg conv_last_output_V_4_we0;
reg[7:0] conv_last_output_V_4_d0;
reg[9:0] conv_last_output_V_5_address0;
reg conv_last_output_V_5_ce0;
reg conv_last_output_V_5_we0;
reg[7:0] conv_last_output_V_5_d0;
reg[9:0] conv_last_output_V_6_address0;
reg conv_last_output_V_6_ce0;
reg conv_last_output_V_6_we0;
reg[7:0] conv_last_output_V_6_d0;
reg[9:0] conv_last_output_V_7_address0;
reg conv_last_output_V_7_ce0;
reg conv_last_output_V_7_we0;
reg[7:0] conv_last_output_V_7_d0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    weight_V_blk_n_AR;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_flatten_reg_1587;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_1587;
reg    weight_V_blk_n_R;
reg    ap_enable_reg_pp0_iter9;
reg   [0:0] ap_reg_pp0_iter8_exitcond_flatten_reg_1587;
reg   [16:0] indvar_flatten_reg_621;
reg   [9:0] i_reg_632;
reg   [7:0] j_reg_643;
reg   [13:0] indvar_flatten10_reg_654;
reg   [9:0] i_1_reg_665;
reg   [5:0] indvar_flatten6_reg_677;
reg   [2:0] j_1_reg_688;
reg   [2:0] k_reg_700;
reg   [13:0] indvar_flatten11_reg_756;
reg   [9:0] i_2_reg_767;
reg   [5:0] indvar_flatten12_reg_778;
reg   [2:0] j_2_reg_789;
reg   [2:0] k_1_reg_800;
wire   [0:0] exitcond_flatten_fu_811_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_sig_ioackin_m_axi_weight_V_ARREADY;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
reg    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_1587;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_1587;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten_reg_1587;
reg   [0:0] ap_reg_pp0_iter5_exitcond_flatten_reg_1587;
reg   [0:0] ap_reg_pp0_iter6_exitcond_flatten_reg_1587;
reg   [0:0] ap_reg_pp0_iter7_exitcond_flatten_reg_1587;
wire   [16:0] indvar_flatten_next_fu_817_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [7:0] j_mid2_fu_835_p3;
reg   [7:0] j_mid2_reg_1596;
reg   [7:0] ap_reg_pp0_iter1_j_mid2_reg_1596;
reg   [7:0] ap_reg_pp0_iter2_j_mid2_reg_1596;
reg   [7:0] ap_reg_pp0_iter3_j_mid2_reg_1596;
reg   [7:0] ap_reg_pp0_iter4_j_mid2_reg_1596;
reg   [7:0] ap_reg_pp0_iter5_j_mid2_reg_1596;
reg   [7:0] ap_reg_pp0_iter6_j_mid2_reg_1596;
reg   [7:0] ap_reg_pp0_iter7_j_mid2_reg_1596;
reg   [7:0] ap_reg_pp0_iter8_j_mid2_reg_1596;
reg   [7:0] ap_reg_pp0_iter9_j_mid2_reg_1596;
wire   [9:0] i_cast_mid2_v_fu_843_p3;
reg   [9:0] i_cast_mid2_v_reg_1602;
wire   [2:0] tmp_fu_851_p1;
reg   [2:0] tmp_reg_1609;
reg   [2:0] ap_reg_pp0_iter1_tmp_reg_1609;
reg   [2:0] ap_reg_pp0_iter2_tmp_reg_1609;
reg   [2:0] ap_reg_pp0_iter3_tmp_reg_1609;
reg   [2:0] ap_reg_pp0_iter4_tmp_reg_1609;
reg   [2:0] ap_reg_pp0_iter5_tmp_reg_1609;
reg   [2:0] ap_reg_pp0_iter6_tmp_reg_1609;
reg   [2:0] ap_reg_pp0_iter7_tmp_reg_1609;
reg   [2:0] ap_reg_pp0_iter8_tmp_reg_1609;
reg   [2:0] ap_reg_pp0_iter9_tmp_reg_1609;
reg   [6:0] newIndex_cast_mid2_v_reg_1613;
reg   [6:0] ap_reg_pp0_iter1_newIndex_cast_mid2_v_reg_1613;
reg   [6:0] ap_reg_pp0_iter2_newIndex_cast_mid2_v_reg_1613;
reg   [6:0] ap_reg_pp0_iter3_newIndex_cast_mid2_v_reg_1613;
reg   [6:0] ap_reg_pp0_iter4_newIndex_cast_mid2_v_reg_1613;
reg   [6:0] ap_reg_pp0_iter5_newIndex_cast_mid2_v_reg_1613;
reg   [6:0] ap_reg_pp0_iter6_newIndex_cast_mid2_v_reg_1613;
reg   [6:0] ap_reg_pp0_iter7_newIndex_cast_mid2_v_reg_1613;
reg   [6:0] ap_reg_pp0_iter8_newIndex_cast_mid2_v_reg_1613;
reg   [6:0] ap_reg_pp0_iter9_newIndex_cast_mid2_v_reg_1613;
wire   [7:0] j_3_fu_865_p2;
reg   [31:0] weight_V_addr_reg_1624;
reg   [7:0] weight_V_addr_read_reg_1630;
wire   [0:0] exitcond_flatten14_fu_972_p2;
reg   [0:0] exitcond_flatten14_reg_1642;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state14_pp1_stage0_iter0;
wire    ap_block_state15_pp1_stage0_iter1;
wire    ap_block_state16_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_flag00011001;
reg   [0:0] ap_reg_pp1_iter1_exitcond_flatten14_reg_1642;
wire   [13:0] indvar_flatten_next1_fu_978_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] exitcond_flatten15_fu_984_p2;
reg   [0:0] exitcond_flatten15_reg_1651;
wire   [5:0] indvar_flatten_next7_fu_996_p3;
wire   [9:0] i_1_cast9_mid2_v_fu_1017_p3;
reg   [9:0] i_1_cast9_mid2_v_reg_1664;
reg    ap_enable_reg_pp1_iter1;
wire   [2:0] tmp_678_fu_1029_p1;
reg   [2:0] tmp_678_reg_1669;
reg   [6:0] newIndex2_cast_mid2_s_reg_1673;
wire   [2:0] k_mid2_fu_1071_p3;
reg   [2:0] k_mid2_reg_1678;
wire   [2:0] j_1_cast8_mid2_fu_1079_p3;
reg   [2:0] j_1_cast8_mid2_reg_1683;
wire   [2:0] k_2_fu_1087_p2;
reg   [2:0] k_2_reg_1694;
wire   [9:0] h_cast6_cast1_fu_1142_p1;
reg   [9:0] h_cast6_cast1_reg_1699;
wire    ap_CS_fsm_state18;
wire   [10:0] h_cast6_cast_fu_1146_p1;
reg   [10:0] h_cast6_cast_reg_1704;
wire   [0:0] exitcond44_fu_1150_p2;
wire   [2:0] h_33_fu_1156_p2;
reg   [2:0] h_33_reg_1713;
wire   [11:0] w_cast5_cast1_fu_1162_p1;
reg   [11:0] w_cast5_cast1_reg_1718;
wire    ap_CS_fsm_state19;
wire   [12:0] w_cast5_cast_fu_1166_p1;
reg   [12:0] w_cast5_cast_reg_1723;
wire   [2:0] w_43_fu_1176_p2;
reg   [2:0] w_43_reg_1731;
wire   [14:0] ci_cast4_cast_fu_1182_p1;
reg   [14:0] ci_cast4_cast_reg_1736;
wire    ap_CS_fsm_state20;
reg   [11:0] input_V_addr_reg_1741;
wire   [7:0] ci_16_fu_1227_p2;
reg   [7:0] ci_16_reg_1749;
reg   [9:0] conv_last_output_V_5_1_reg_1757;
wire    ap_CS_fsm_state21;
wire   [0:0] exitcond48_fu_1233_p2;
reg   [9:0] conv_last_output_V_0_1_reg_1762;
reg   [9:0] conv_last_output_V_6_1_reg_1767;
reg   [9:0] conv_last_output_V_2_1_reg_1772;
reg   [9:0] conv_last_output_V_3_1_reg_1777;
reg   [9:0] conv_last_output_V_4_1_reg_1792;
reg   [9:0] conv_last_output_V_1_1_reg_1797;
reg   [9:0] conv_last_output_V_7_1_reg_1822;
wire   [9:0] co_48_7_fu_1334_p2;
reg   [9:0] co_48_7_reg_1837;
wire   [7:0] weight_temp_0_0_0_q0;
reg  signed [7:0] weight_temp_0_0_0_4_reg_1842;
wire    ap_CS_fsm_state22;
reg  signed [7:0] input_V_load_reg_1847;
reg   [7:0] conv_last_output_V_0_2_reg_1859;
wire   [7:0] weight_temp_1_0_0_q0;
reg  signed [7:0] weight_temp_1_0_0_3_reg_1864;
reg   [7:0] conv_last_output_V_1_2_reg_1869;
wire   [7:0] weight_temp_2_0_0_q0;
reg  signed [7:0] weight_temp_2_0_0_3_reg_1874;
reg   [7:0] conv_last_output_V_2_2_reg_1879;
wire   [7:0] weight_temp_3_0_0_q0;
reg  signed [7:0] weight_temp_3_0_0_3_reg_1884;
reg   [7:0] conv_last_output_V_3_2_reg_1889;
wire   [7:0] weight_temp_4_0_0_q0;
reg  signed [7:0] weight_temp_4_0_0_3_reg_1894;
reg   [7:0] conv_last_output_V_4_2_reg_1899;
wire   [7:0] weight_temp_5_0_0_q0;
reg  signed [7:0] weight_temp_5_0_0_3_reg_1904;
reg   [7:0] conv_last_output_V_5_2_reg_1909;
wire   [7:0] weight_temp_6_0_0_q0;
reg  signed [7:0] weight_temp_6_0_0_3_reg_1914;
reg   [7:0] conv_last_output_V_6_2_reg_1919;
wire   [7:0] weight_temp_7_0_0_q0;
reg  signed [7:0] weight_temp_7_0_0_3_reg_1924;
reg   [7:0] conv_last_output_V_7_2_reg_1929;
wire   [0:0] exitcond_flatten16_fu_1340_p2;
reg   [0:0] exitcond_flatten16_reg_1934;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state24_pp2_stage0_iter0;
wire    ap_block_state26_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_flag00011001;
wire   [13:0] indvar_flatten_next2_fu_1346_p2;
reg   [13:0] indvar_flatten_next2_reg_1938;
reg    ap_enable_reg_pp2_iter0;
wire   [2:0] j_2_mid_fu_1364_p3;
reg   [2:0] j_2_mid_reg_1943;
wire   [9:0] arrayNo8_mid2_v_fu_1372_p3;
reg   [9:0] arrayNo8_mid2_v_reg_1949;
wire   [2:0] tmp_679_fu_1380_p1;
reg   [2:0] tmp_679_reg_1954;
reg   [2:0] ap_reg_pp2_iter1_tmp_679_reg_1954;
reg   [6:0] newIndex9_cast_mid2_s_reg_1959;
wire   [0:0] exitcond_mid_fu_1406_p2;
reg   [0:0] exitcond_mid_reg_1964;
wire   [2:0] k_1_mid2_fu_1418_p3;
reg   [2:0] k_1_mid2_reg_1969;
wire   [5:0] indvar_flatten_next1_7_fu_1432_p3;
reg   [5:0] indvar_flatten_next1_7_reg_1975;
wire   [2:0] j_2_cast2_mid2_fu_1445_p3;
reg   [2:0] j_2_cast2_mid2_reg_1980;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_state25_pp2_stage1_iter0;
wire    ap_block_state27_pp2_stage1_iter1;
wire    ap_block_pp2_stage1_flag00011001;
wire   [2:0] k_3_fu_1451_p2;
reg   [2:0] k_3_reg_1986;
reg   [9:0] conv_last_output_V_5_3_reg_1991;
reg   [9:0] conv_last_output_V_0_3_reg_1996;
reg   [9:0] conv_last_output_V_6_3_reg_2001;
reg   [9:0] conv_last_output_V_2_3_reg_2006;
reg   [9:0] conv_last_output_V_3_3_reg_2011;
reg   [9:0] conv_last_output_V_4_3_reg_2016;
reg   [9:0] conv_last_output_V_1_3_reg_2021;
reg   [9:0] conv_last_output_V_7_3_reg_2026;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter10;
wire    ap_CS_fsm_state13;
wire    ap_block_pp1_stage0_flag00011011;
reg    ap_condition_pp1_exit_iter0_state14;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp2_stage0_flag00011011;
reg    ap_condition_pp2_exit_iter0_state24;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage1_flag00011011;
reg   [13:0] weight_temp_0_0_0_address0;
reg    weight_temp_0_0_0_ce0;
reg    weight_temp_0_0_0_we0;
reg   [7:0] weight_temp_0_0_0_d0;
reg   [13:0] weight_temp_1_0_0_address0;
reg    weight_temp_1_0_0_ce0;
reg    weight_temp_1_0_0_we0;
reg   [13:0] weight_temp_2_0_0_address0;
reg    weight_temp_2_0_0_ce0;
reg    weight_temp_2_0_0_we0;
reg   [13:0] weight_temp_3_0_0_address0;
reg    weight_temp_3_0_0_ce0;
reg    weight_temp_3_0_0_we0;
reg   [13:0] weight_temp_4_0_0_address0;
reg    weight_temp_4_0_0_ce0;
reg    weight_temp_4_0_0_we0;
reg   [13:0] weight_temp_5_0_0_address0;
reg    weight_temp_5_0_0_ce0;
reg    weight_temp_5_0_0_we0;
reg   [13:0] weight_temp_6_0_0_address0;
reg    weight_temp_6_0_0_ce0;
reg    weight_temp_6_0_0_we0;
reg   [13:0] weight_temp_7_0_0_address0;
reg    weight_temp_7_0_0_ce0;
reg    weight_temp_7_0_0_we0;
reg   [9:0] i_phi_fu_636_p4;
reg   [9:0] i_1_phi_fu_669_p4;
wire    ap_block_pp1_stage0_flag00000000;
reg   [2:0] j_1_phi_fu_692_p4;
reg   [2:0] k_phi_fu_704_p4;
reg   [2:0] h_reg_712;
wire   [0:0] exitcond45_fu_1170_p2;
wire    ap_CS_fsm_state17;
reg   [2:0] w_reg_723;
wire   [0:0] exitcond47_fu_1221_p2;
reg   [7:0] ci_reg_734;
reg   [9:0] co_reg_745;
wire    ap_CS_fsm_state23;
reg   [13:0] indvar_flatten11_phi_fu_760_p4;
wire    ap_block_pp2_stage0_flag00000000;
reg   [9:0] i_2_phi_fu_771_p4;
reg   [5:0] indvar_flatten12_phi_fu_782_p4;
reg   [2:0] j_2_phi_fu_793_p4;
reg   [2:0] k_1_phi_fu_804_p4;
wire  signed [31:0] tmp_706_cast_fu_960_p1;
wire   [31:0] i_1_cast9_mid2_fu_1024_p1;
wire   [31:0] tmp_713_cast_fu_1130_p1;
wire   [31:0] tmp_726_cast_fu_1216_p1;
wire   [31:0] tmp_732_cast_fu_1279_p1;
wire  signed [31:0] tmp_736_cast_fu_1322_p1;
wire   [31:0] tmp_720_cast_fu_1493_p1;
wire   [31:0] sum_fu_916_p2;
reg    ap_reg_ioackin_m_axi_weight_V_ARREADY;
reg    ap_block_pp0_stage0_flag00001001;
wire  signed [7:0] grp_fu_1570_p3;
wire   [0:0] tmp_680_fu_1526_p3;
wire    ap_block_pp2_stage1_flag00000000;
wire  signed [7:0] grp_fu_1564_p3;
wire  signed [7:0] grp_fu_1558_p3;
wire  signed [7:0] grp_fu_1552_p3;
wire  signed [7:0] grp_fu_1546_p3;
wire  signed [7:0] grp_fu_1540_p3;
wire  signed [7:0] grp_fu_1534_p3;
wire  signed [7:0] grp_fu_1576_p3;
wire   [0:0] exitcond_fu_829_p2;
wire   [9:0] i_3_fu_823_p2;
wire   [17:0] tmp_559_fu_871_p3;
wire   [15:0] tmp_560_fu_882_p3;
wire   [18:0] p_shl2_cast_fu_878_p1;
wire   [18:0] p_shl3_cast_fu_889_p1;
wire   [18:0] tmp_561_fu_893_p2;
wire   [19:0] j_cast_cast_fu_903_p1;
wire  signed [19:0] tmp_701_cast_fu_899_p1;
wire   [19:0] tmp_565_fu_906_p2;
wire  signed [31:0] tmp_705_cast_fu_912_p1;
wire   [12:0] tmp_563_fu_934_p3;
wire   [14:0] tmp_562_fu_927_p3;
wire   [14:0] p_shl1_cast_fu_941_p1;
wire   [14:0] j_cast_cast1_fu_951_p1;
wire   [14:0] tmp_564_fu_945_p2;
wire   [14:0] tmp_566_fu_954_p2;
wire   [5:0] indvar_flatten6_op_fu_990_p2;
wire   [9:0] i_4_fu_1004_p2;
wire   [0:0] exitcond43_fu_1048_p2;
wire   [0:0] not_exitcond_flatten_3_fu_1043_p2;
wire   [2:0] j_1_mid_fu_1010_p3;
wire   [0:0] exitcond60_mid_fu_1054_p2;
wire   [0:0] tmp_568_fu_1066_p2;
wire   [2:0] j_4_fu_1060_p2;
wire   [8:0] tmp_567_fu_1093_p3;
wire   [9:0] tmp_708_cast_fu_1100_p1;
wire   [9:0] j_1_cast8_mid2_cast_fu_1104_p1;
wire   [9:0] tmp_569_fu_1107_p2;
wire   [11:0] tmp_712_cast_fu_1113_p3;
wire   [11:0] k_cast7_cast_fu_1121_p1;
wire   [11:0] tmp_570_fu_1124_p2;
wire   [9:0] tmp_575_fu_1186_p3;
wire   [10:0] tmp_722_cast_fu_1194_p1;
wire   [10:0] tmp_576_fu_1198_p2;
wire   [12:0] tmp_725_cast_fu_1203_p3;
wire   [12:0] tmp_577_fu_1211_p2;
wire   [6:0] newIndex3_fu_1239_p4;
wire   [8:0] tmp_578_fu_1249_p3;
wire   [9:0] tmp_728_cast_fu_1257_p1;
wire   [9:0] tmp_579_fu_1261_p2;
wire   [11:0] tmp_731_cast_fu_1266_p3;
wire   [11:0] tmp_580_fu_1274_p2;
wire   [12:0] tmp_582_fu_1299_p3;
wire   [14:0] tmp_581_fu_1291_p3;
wire   [14:0] p_shl5_cast_fu_1307_p1;
wire   [14:0] tmp_583_fu_1311_p2;
wire   [14:0] tmp_584_fu_1317_p2;
wire   [0:0] exitcond_flatten17_fu_1358_p2;
wire   [9:0] i_5_fu_1352_p2;
wire   [0:0] exitcond46_fu_1400_p2;
wire   [0:0] not_exitcond_flatten_fu_1394_p2;
wire   [0:0] tmp_572_fu_1412_p2;
wire   [5:0] indvar_flatten28_op_fu_1426_p2;
wire   [2:0] j_5_fu_1440_p2;
wire   [8:0] tmp_571_fu_1456_p3;
wire   [9:0] tmp_715_cast_fu_1463_p1;
wire   [9:0] j_2_cast2_mid2_cast_fu_1467_p1;
wire   [9:0] tmp_573_fu_1470_p2;
wire   [11:0] tmp_719_cast_fu_1476_p3;
wire   [11:0] k_1_cast1_cast_fu_1484_p1;
wire   [11:0] tmp_574_fu_1487_p2;
wire   [7:0] tmp_54_fu_1505_p10;
wire    ap_CS_fsm_state28;
reg   [13:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_reg_ioackin_m_axi_weight_V_ARREADY = 1'b0;
end

conv_last_weight_ncg #(
    .DataWidth( 8 ),
    .AddressRange( 12288 ),
    .AddressWidth( 14 ))
weight_temp_0_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weight_temp_0_0_0_address0),
    .ce0(weight_temp_0_0_0_ce0),
    .we0(weight_temp_0_0_0_we0),
    .d0(weight_temp_0_0_0_d0),
    .q0(weight_temp_0_0_0_q0)
);

conv_last_weight_ncg #(
    .DataWidth( 8 ),
    .AddressRange( 12288 ),
    .AddressWidth( 14 ))
weight_temp_1_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weight_temp_1_0_0_address0),
    .ce0(weight_temp_1_0_0_ce0),
    .we0(weight_temp_1_0_0_we0),
    .d0(weight_V_addr_read_reg_1630),
    .q0(weight_temp_1_0_0_q0)
);

conv_last_weight_ncg #(
    .DataWidth( 8 ),
    .AddressRange( 12288 ),
    .AddressWidth( 14 ))
weight_temp_2_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weight_temp_2_0_0_address0),
    .ce0(weight_temp_2_0_0_ce0),
    .we0(weight_temp_2_0_0_we0),
    .d0(weight_V_addr_read_reg_1630),
    .q0(weight_temp_2_0_0_q0)
);

conv_last_weight_ncg #(
    .DataWidth( 8 ),
    .AddressRange( 12288 ),
    .AddressWidth( 14 ))
weight_temp_3_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weight_temp_3_0_0_address0),
    .ce0(weight_temp_3_0_0_ce0),
    .we0(weight_temp_3_0_0_we0),
    .d0(weight_V_addr_read_reg_1630),
    .q0(weight_temp_3_0_0_q0)
);

conv_last_weight_ncg #(
    .DataWidth( 8 ),
    .AddressRange( 12288 ),
    .AddressWidth( 14 ))
weight_temp_4_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weight_temp_4_0_0_address0),
    .ce0(weight_temp_4_0_0_ce0),
    .we0(weight_temp_4_0_0_we0),
    .d0(weight_V_addr_read_reg_1630),
    .q0(weight_temp_4_0_0_q0)
);

conv_last_weight_ncg #(
    .DataWidth( 8 ),
    .AddressRange( 12288 ),
    .AddressWidth( 14 ))
weight_temp_5_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weight_temp_5_0_0_address0),
    .ce0(weight_temp_5_0_0_ce0),
    .we0(weight_temp_5_0_0_we0),
    .d0(weight_V_addr_read_reg_1630),
    .q0(weight_temp_5_0_0_q0)
);

conv_last_weight_ncg #(
    .DataWidth( 8 ),
    .AddressRange( 12288 ),
    .AddressWidth( 14 ))
weight_temp_6_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weight_temp_6_0_0_address0),
    .ce0(weight_temp_6_0_0_ce0),
    .we0(weight_temp_6_0_0_we0),
    .d0(weight_V_addr_read_reg_1630),
    .q0(weight_temp_6_0_0_q0)
);

conv_last_weight_ncg #(
    .DataWidth( 8 ),
    .AddressRange( 12288 ),
    .AddressWidth( 14 ))
weight_temp_7_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weight_temp_7_0_0_address0),
    .ce0(weight_temp_7_0_0_ce0),
    .we0(weight_temp_7_0_0_we0),
    .d0(weight_V_addr_read_reg_1630),
    .q0(weight_temp_7_0_0_q0)
);

ShuffleNetV2_mux_vdy #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_vdy_U757(
    .din1(conv_last_output_V_0_q0),
    .din2(conv_last_output_V_1_q0),
    .din3(conv_last_output_V_2_q0),
    .din4(conv_last_output_V_3_q0),
    .din5(conv_last_output_V_4_q0),
    .din6(conv_last_output_V_5_q0),
    .din7(conv_last_output_V_6_q0),
    .din8(conv_last_output_V_7_q0),
    .din9(ap_reg_pp2_iter1_tmp_679_reg_1954),
    .dout(tmp_54_fu_1505_p10)
);

ShuffleNetV2_mac_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mac_cud_x_U758(
    .din0(weight_temp_0_0_0_4_reg_1842),
    .din1(input_V_load_reg_1847),
    .din2(conv_last_output_V_0_2_reg_1859),
    .dout(grp_fu_1534_p3)
);

ShuffleNetV2_mac_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mac_cud_x_U759(
    .din0(weight_temp_1_0_0_3_reg_1864),
    .din1(input_V_load_reg_1847),
    .din2(conv_last_output_V_1_2_reg_1869),
    .dout(grp_fu_1540_p3)
);

ShuffleNetV2_mac_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mac_cud_x_U760(
    .din0(weight_temp_2_0_0_3_reg_1874),
    .din1(input_V_load_reg_1847),
    .din2(conv_last_output_V_2_2_reg_1879),
    .dout(grp_fu_1546_p3)
);

ShuffleNetV2_mac_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mac_cud_x_U761(
    .din0(weight_temp_3_0_0_3_reg_1884),
    .din1(input_V_load_reg_1847),
    .din2(conv_last_output_V_3_2_reg_1889),
    .dout(grp_fu_1552_p3)
);

ShuffleNetV2_mac_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mac_cud_x_U762(
    .din0(weight_temp_4_0_0_3_reg_1894),
    .din1(input_V_load_reg_1847),
    .din2(conv_last_output_V_4_2_reg_1899),
    .dout(grp_fu_1558_p3)
);

ShuffleNetV2_mac_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mac_cud_x_U763(
    .din0(weight_temp_5_0_0_3_reg_1904),
    .din1(input_V_load_reg_1847),
    .din2(conv_last_output_V_5_2_reg_1909),
    .dout(grp_fu_1564_p3)
);

ShuffleNetV2_mac_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mac_cud_x_U764(
    .din0(weight_temp_6_0_0_3_reg_1914),
    .din1(input_V_load_reg_1847),
    .din2(conv_last_output_V_6_2_reg_1919),
    .dout(grp_fu_1570_p3)
);

ShuffleNetV2_mac_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mac_cud_x_U765(
    .din0(weight_temp_7_0_0_3_reg_1924),
    .din1(input_V_load_reg_1847),
    .din2(conv_last_output_V_7_2_reg_1929),
    .dout(grp_fu_1576_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp1_exit_iter0_state14))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state14)) begin
                ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state14 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp2_exit_iter0_state24))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state18) & (exitcond44_fu_1150_p2 == 1'd1))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == ap_condition_pp2_exit_iter0_state24) & (ap_block_pp2_stage1_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp2_iter1 <= (ap_condition_pp2_exit_iter0_state24 ^ 1'b1);
        end else if (((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((1'b1 == ap_CS_fsm_state18) & (exitcond44_fu_1150_p2 == 1'd1))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_weight_V_ARREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_1587))) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_m_axi_weight_V_ARREADY <= 1'b0;
            end else if (((1'b1 == m_axi_weight_V_ARREADY) & (ap_block_pp0_stage0_flag00001001 == 1'b0))) begin
                ap_reg_ioackin_m_axi_weight_V_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (1'd0 == exitcond45_fu_1170_p2))) begin
        ci_reg_734 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state21) & (exitcond48_fu_1233_p2 == 1'd1))) begin
        ci_reg_734 <= ci_16_reg_1749;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (1'd0 == exitcond47_fu_1221_p2))) begin
        co_reg_745 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        co_reg_745 <= co_48_7_reg_1837;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        h_reg_712 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state19) & (1'd1 == exitcond45_fu_1170_p2))) begin
        h_reg_712 <= h_33_reg_1713;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_1_reg_665 <= 10'd0;
    end else if (((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter1_exitcond_flatten14_reg_1642))) begin
        i_1_reg_665 <= i_1_cast9_mid2_v_reg_1664;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (exitcond44_fu_1150_p2 == 1'd1))) begin
        i_2_reg_767 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten16_reg_1934) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        i_2_reg_767 <= arrayNo8_mid2_v_reg_1949;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_reg_1587) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_reg_632 <= i_cast_mid2_v_reg_1602;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_632 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvar_flatten10_reg_654 <= 14'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'd0 == exitcond_flatten14_fu_972_p2))) begin
        indvar_flatten10_reg_654 <= indvar_flatten_next1_fu_978_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (exitcond44_fu_1150_p2 == 1'd1))) begin
        indvar_flatten11_reg_756 <= 14'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten16_reg_1934) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        indvar_flatten11_reg_756 <= indvar_flatten_next2_reg_1938;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (exitcond44_fu_1150_p2 == 1'd1))) begin
        indvar_flatten12_reg_778 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten16_reg_1934) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        indvar_flatten12_reg_778 <= indvar_flatten_next1_7_reg_1975;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvar_flatten6_reg_677 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'd0 == exitcond_flatten14_fu_972_p2))) begin
        indvar_flatten6_reg_677 <= indvar_flatten_next7_fu_996_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_811_p2))) begin
        indvar_flatten_reg_621 <= indvar_flatten_next_fu_817_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_621 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_1_reg_688 <= 3'd0;
    end else if (((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter1_exitcond_flatten14_reg_1642))) begin
        j_1_reg_688 <= j_1_cast8_mid2_reg_1683;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (exitcond44_fu_1150_p2 == 1'd1))) begin
        j_2_reg_789 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten16_reg_1934) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        j_2_reg_789 <= j_2_cast2_mid2_reg_1980;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_811_p2))) begin
        j_reg_643 <= j_3_fu_865_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_643 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (exitcond44_fu_1150_p2 == 1'd1))) begin
        k_1_reg_800 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten16_reg_1934) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        k_1_reg_800 <= k_3_reg_1986;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        k_reg_700 <= 3'd0;
    end else if (((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter1_exitcond_flatten14_reg_1642))) begin
        k_reg_700 <= k_2_reg_1694;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (1'd0 == exitcond44_fu_1150_p2))) begin
        w_reg_723 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state20) & (1'd1 == exitcond47_fu_1221_p2))) begin
        w_reg_723 <= w_43_reg_1731;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_1587 <= exitcond_flatten_reg_1587;
        ap_reg_pp0_iter1_j_mid2_reg_1596 <= j_mid2_reg_1596;
        ap_reg_pp0_iter1_newIndex_cast_mid2_v_reg_1613 <= newIndex_cast_mid2_v_reg_1613;
        ap_reg_pp0_iter1_tmp_reg_1609 <= tmp_reg_1609;
        exitcond_flatten_reg_1587 <= exitcond_flatten_fu_811_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter2_exitcond_flatten_reg_1587 <= ap_reg_pp0_iter1_exitcond_flatten_reg_1587;
        ap_reg_pp0_iter2_j_mid2_reg_1596 <= ap_reg_pp0_iter1_j_mid2_reg_1596;
        ap_reg_pp0_iter2_newIndex_cast_mid2_v_reg_1613 <= ap_reg_pp0_iter1_newIndex_cast_mid2_v_reg_1613;
        ap_reg_pp0_iter2_tmp_reg_1609 <= ap_reg_pp0_iter1_tmp_reg_1609;
        ap_reg_pp0_iter3_exitcond_flatten_reg_1587 <= ap_reg_pp0_iter2_exitcond_flatten_reg_1587;
        ap_reg_pp0_iter3_j_mid2_reg_1596 <= ap_reg_pp0_iter2_j_mid2_reg_1596;
        ap_reg_pp0_iter3_newIndex_cast_mid2_v_reg_1613 <= ap_reg_pp0_iter2_newIndex_cast_mid2_v_reg_1613;
        ap_reg_pp0_iter3_tmp_reg_1609 <= ap_reg_pp0_iter2_tmp_reg_1609;
        ap_reg_pp0_iter4_exitcond_flatten_reg_1587 <= ap_reg_pp0_iter3_exitcond_flatten_reg_1587;
        ap_reg_pp0_iter4_j_mid2_reg_1596 <= ap_reg_pp0_iter3_j_mid2_reg_1596;
        ap_reg_pp0_iter4_newIndex_cast_mid2_v_reg_1613 <= ap_reg_pp0_iter3_newIndex_cast_mid2_v_reg_1613;
        ap_reg_pp0_iter4_tmp_reg_1609 <= ap_reg_pp0_iter3_tmp_reg_1609;
        ap_reg_pp0_iter5_exitcond_flatten_reg_1587 <= ap_reg_pp0_iter4_exitcond_flatten_reg_1587;
        ap_reg_pp0_iter5_j_mid2_reg_1596 <= ap_reg_pp0_iter4_j_mid2_reg_1596;
        ap_reg_pp0_iter5_newIndex_cast_mid2_v_reg_1613 <= ap_reg_pp0_iter4_newIndex_cast_mid2_v_reg_1613;
        ap_reg_pp0_iter5_tmp_reg_1609 <= ap_reg_pp0_iter4_tmp_reg_1609;
        ap_reg_pp0_iter6_exitcond_flatten_reg_1587 <= ap_reg_pp0_iter5_exitcond_flatten_reg_1587;
        ap_reg_pp0_iter6_j_mid2_reg_1596 <= ap_reg_pp0_iter5_j_mid2_reg_1596;
        ap_reg_pp0_iter6_newIndex_cast_mid2_v_reg_1613 <= ap_reg_pp0_iter5_newIndex_cast_mid2_v_reg_1613;
        ap_reg_pp0_iter6_tmp_reg_1609 <= ap_reg_pp0_iter5_tmp_reg_1609;
        ap_reg_pp0_iter7_exitcond_flatten_reg_1587 <= ap_reg_pp0_iter6_exitcond_flatten_reg_1587;
        ap_reg_pp0_iter7_j_mid2_reg_1596 <= ap_reg_pp0_iter6_j_mid2_reg_1596;
        ap_reg_pp0_iter7_newIndex_cast_mid2_v_reg_1613 <= ap_reg_pp0_iter6_newIndex_cast_mid2_v_reg_1613;
        ap_reg_pp0_iter7_tmp_reg_1609 <= ap_reg_pp0_iter6_tmp_reg_1609;
        ap_reg_pp0_iter8_exitcond_flatten_reg_1587 <= ap_reg_pp0_iter7_exitcond_flatten_reg_1587;
        ap_reg_pp0_iter8_j_mid2_reg_1596 <= ap_reg_pp0_iter7_j_mid2_reg_1596;
        ap_reg_pp0_iter8_newIndex_cast_mid2_v_reg_1613 <= ap_reg_pp0_iter7_newIndex_cast_mid2_v_reg_1613;
        ap_reg_pp0_iter8_tmp_reg_1609 <= ap_reg_pp0_iter7_tmp_reg_1609;
        ap_reg_pp0_iter9_j_mid2_reg_1596 <= ap_reg_pp0_iter8_j_mid2_reg_1596;
        ap_reg_pp0_iter9_newIndex_cast_mid2_v_reg_1613 <= ap_reg_pp0_iter8_newIndex_cast_mid2_v_reg_1613;
        ap_reg_pp0_iter9_tmp_reg_1609 <= ap_reg_pp0_iter8_tmp_reg_1609;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp1_iter1_exitcond_flatten14_reg_1642 <= exitcond_flatten14_reg_1642;
        exitcond_flatten14_reg_1642 <= exitcond_flatten14_fu_972_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp2_iter1_tmp_679_reg_1954 <= tmp_679_reg_1954;
        exitcond_flatten16_reg_1934 <= exitcond_flatten16_fu_1340_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'd0 == exitcond_flatten16_fu_1340_p2))) begin
        arrayNo8_mid2_v_reg_1949 <= arrayNo8_mid2_v_fu_1372_p3;
        indvar_flatten_next1_7_reg_1975 <= indvar_flatten_next1_7_fu_1432_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ci_16_reg_1749 <= ci_16_fu_1227_p2;
        ci_cast4_cast_reg_1736[7 : 0] <= ci_cast4_cast_fu_1182_p1[7 : 0];
        input_V_addr_reg_1741 <= tmp_726_cast_fu_1216_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (1'd0 == exitcond48_fu_1233_p2))) begin
        co_48_7_reg_1837 <= co_48_7_fu_1334_p2;
        conv_last_output_V_0_1_reg_1762 <= tmp_732_cast_fu_1279_p1;
        conv_last_output_V_1_1_reg_1797 <= tmp_732_cast_fu_1279_p1;
        conv_last_output_V_2_1_reg_1772 <= tmp_732_cast_fu_1279_p1;
        conv_last_output_V_3_1_reg_1777 <= tmp_732_cast_fu_1279_p1;
        conv_last_output_V_4_1_reg_1792 <= tmp_732_cast_fu_1279_p1;
        conv_last_output_V_5_1_reg_1757 <= tmp_732_cast_fu_1279_p1;
        conv_last_output_V_6_1_reg_1767 <= tmp_732_cast_fu_1279_p1;
        conv_last_output_V_7_1_reg_1822 <= tmp_732_cast_fu_1279_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        conv_last_output_V_0_2_reg_1859 <= conv_last_output_V_0_q0;
        conv_last_output_V_1_2_reg_1869 <= conv_last_output_V_1_q0;
        conv_last_output_V_2_2_reg_1879 <= conv_last_output_V_2_q0;
        conv_last_output_V_3_2_reg_1889 <= conv_last_output_V_3_q0;
        conv_last_output_V_4_2_reg_1899 <= conv_last_output_V_4_q0;
        conv_last_output_V_5_2_reg_1909 <= conv_last_output_V_5_q0;
        conv_last_output_V_6_2_reg_1919 <= conv_last_output_V_6_q0;
        conv_last_output_V_7_2_reg_1929 <= conv_last_output_V_7_q0;
        input_V_load_reg_1847 <= input_V_q0;
        weight_temp_0_0_0_4_reg_1842 <= weight_temp_0_0_0_q0;
        weight_temp_1_0_0_3_reg_1864 <= weight_temp_1_0_0_q0;
        weight_temp_2_0_0_3_reg_1874 <= weight_temp_2_0_0_q0;
        weight_temp_3_0_0_3_reg_1884 <= weight_temp_3_0_0_q0;
        weight_temp_4_0_0_3_reg_1894 <= weight_temp_4_0_0_q0;
        weight_temp_5_0_0_3_reg_1904 <= weight_temp_5_0_0_q0;
        weight_temp_6_0_0_3_reg_1914 <= weight_temp_6_0_0_q0;
        weight_temp_7_0_0_3_reg_1924 <= weight_temp_7_0_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten16_reg_1934))) begin
        conv_last_output_V_0_3_reg_1996 <= tmp_720_cast_fu_1493_p1;
        conv_last_output_V_1_3_reg_2021 <= tmp_720_cast_fu_1493_p1;
        conv_last_output_V_2_3_reg_2006 <= tmp_720_cast_fu_1493_p1;
        conv_last_output_V_3_3_reg_2011 <= tmp_720_cast_fu_1493_p1;
        conv_last_output_V_4_3_reg_2016 <= tmp_720_cast_fu_1493_p1;
        conv_last_output_V_5_3_reg_1991 <= tmp_720_cast_fu_1493_p1;
        conv_last_output_V_6_3_reg_2001 <= tmp_720_cast_fu_1493_p1;
        conv_last_output_V_7_3_reg_2026 <= tmp_720_cast_fu_1493_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten14_fu_972_p2))) begin
        exitcond_flatten15_reg_1651 <= exitcond_flatten15_fu_984_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten16_fu_1340_p2))) begin
        exitcond_mid_reg_1964 <= exitcond_mid_fu_1406_p2;
        j_2_mid_reg_1943 <= j_2_mid_fu_1364_p3;
        k_1_mid2_reg_1969 <= k_1_mid2_fu_1418_p3;
        newIndex9_cast_mid2_s_reg_1959 <= {{arrayNo8_mid2_v_fu_1372_p3[9:3]}};
        tmp_679_reg_1954 <= tmp_679_fu_1380_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        h_33_reg_1713 <= h_33_fu_1156_p2;
        h_cast6_cast1_reg_1699[2 : 0] <= h_cast6_cast1_fu_1142_p1[2 : 0];
        h_cast6_cast_reg_1704[2 : 0] <= h_cast6_cast_fu_1146_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == exitcond_flatten14_reg_1642))) begin
        i_1_cast9_mid2_v_reg_1664 <= i_1_cast9_mid2_v_fu_1017_p3;
        j_1_cast8_mid2_reg_1683 <= j_1_cast8_mid2_fu_1079_p3;
        k_2_reg_1694 <= k_2_fu_1087_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_811_p2))) begin
        i_cast_mid2_v_reg_1602 <= i_cast_mid2_v_fu_843_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter0))) begin
        indvar_flatten_next2_reg_1938 <= indvar_flatten_next2_fu_1346_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp2_iter0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten16_reg_1934))) begin
        j_2_cast2_mid2_reg_1980 <= j_2_cast2_mid2_fu_1445_p3;
        k_3_reg_1986 <= k_3_fu_1451_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_811_p2))) begin
        j_mid2_reg_1596 <= j_mid2_fu_835_p3;
        newIndex_cast_mid2_v_reg_1613 <= {{i_cast_mid2_v_fu_843_p3[9:3]}};
        tmp_reg_1609 <= tmp_fu_851_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten14_reg_1642))) begin
        k_mid2_reg_1678 <= k_mid2_fu_1071_p3;
        newIndex2_cast_mid2_s_reg_1673 <= {{i_1_cast9_mid2_v_fu_1017_p3[9:3]}};
        tmp_678_reg_1669 <= tmp_678_fu_1029_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        w_43_reg_1731 <= w_43_fu_1176_p2;
        w_cast5_cast1_reg_1718[2 : 0] <= w_cast5_cast1_fu_1162_p1[2 : 0];
        w_cast5_cast_reg_1723[2 : 0] <= w_cast5_cast_fu_1166_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == ap_reg_pp0_iter8_exitcond_flatten_reg_1587) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        weight_V_addr_read_reg_1630 <= m_axi_weight_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_reg_1587))) begin
        weight_V_addr_reg_1624 <= sum_fu_916_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_811_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten14_fu_972_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten16_fu_1340_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state24 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state24 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state28))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter8) & (1'b0 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_enable_reg_pp0_iter10))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp1_iter0) & (1'b0 == ap_enable_reg_pp1_iter1) & (1'b0 == ap_enable_reg_pp1_iter2))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp2_iter0) & (1'b0 == ap_enable_reg_pp2_iter1))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_weight_V_ARREADY)) begin
        ap_sig_ioackin_m_axi_weight_V_ARREADY = m_axi_weight_V_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_weight_V_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage1_flag00000000 == 1'b0))) begin
        conv_last_output_V_0_address0 = conv_last_output_V_0_3_reg_1996;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_0_address0 = tmp_720_cast_fu_1493_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        conv_last_output_V_0_address0 = conv_last_output_V_0_1_reg_1762;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        conv_last_output_V_0_address0 = tmp_732_cast_fu_1279_p1;
    end else if (((1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_0_address0 = tmp_713_cast_fu_1130_p1;
    end else begin
        conv_last_output_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1)))) begin
        conv_last_output_V_0_ce0 = 1'b1;
    end else begin
        conv_last_output_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage1_flag00000000 == 1'b0))) begin
        conv_last_output_V_0_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        conv_last_output_V_0_d0 = grp_fu_1534_p3;
    end else if (((1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_0_d0 = bias_V_q0;
    end else begin
        conv_last_output_V_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (3'd0 == tmp_678_reg_1669)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'd1 == tmp_680_fu_1526_p3) & (3'd0 == ap_reg_pp2_iter1_tmp_679_reg_1954)))) begin
        conv_last_output_V_0_we0 = 1'b1;
    end else begin
        conv_last_output_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage1_flag00000000 == 1'b0))) begin
        conv_last_output_V_1_address0 = conv_last_output_V_1_3_reg_2021;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_1_address0 = tmp_720_cast_fu_1493_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        conv_last_output_V_1_address0 = conv_last_output_V_1_1_reg_1797;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        conv_last_output_V_1_address0 = tmp_732_cast_fu_1279_p1;
    end else if (((1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_1_address0 = tmp_713_cast_fu_1130_p1;
    end else begin
        conv_last_output_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1)))) begin
        conv_last_output_V_1_ce0 = 1'b1;
    end else begin
        conv_last_output_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage1_flag00000000 == 1'b0))) begin
        conv_last_output_V_1_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        conv_last_output_V_1_d0 = grp_fu_1540_p3;
    end else if (((1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_1_d0 = bias_V_q0;
    end else begin
        conv_last_output_V_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (tmp_678_reg_1669 == 3'd1)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'd1 == tmp_680_fu_1526_p3) & (ap_reg_pp2_iter1_tmp_679_reg_1954 == 3'd1)))) begin
        conv_last_output_V_1_we0 = 1'b1;
    end else begin
        conv_last_output_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage1_flag00000000 == 1'b0))) begin
        conv_last_output_V_2_address0 = conv_last_output_V_2_3_reg_2006;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_2_address0 = tmp_720_cast_fu_1493_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        conv_last_output_V_2_address0 = conv_last_output_V_2_1_reg_1772;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        conv_last_output_V_2_address0 = tmp_732_cast_fu_1279_p1;
    end else if (((1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_2_address0 = tmp_713_cast_fu_1130_p1;
    end else begin
        conv_last_output_V_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1)))) begin
        conv_last_output_V_2_ce0 = 1'b1;
    end else begin
        conv_last_output_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage1_flag00000000 == 1'b0))) begin
        conv_last_output_V_2_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        conv_last_output_V_2_d0 = grp_fu_1546_p3;
    end else if (((1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_2_d0 = bias_V_q0;
    end else begin
        conv_last_output_V_2_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (tmp_678_reg_1669 == 3'd2)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'd1 == tmp_680_fu_1526_p3) & (ap_reg_pp2_iter1_tmp_679_reg_1954 == 3'd2)))) begin
        conv_last_output_V_2_we0 = 1'b1;
    end else begin
        conv_last_output_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage1_flag00000000 == 1'b0))) begin
        conv_last_output_V_3_address0 = conv_last_output_V_3_3_reg_2011;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_3_address0 = tmp_720_cast_fu_1493_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        conv_last_output_V_3_address0 = conv_last_output_V_3_1_reg_1777;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        conv_last_output_V_3_address0 = tmp_732_cast_fu_1279_p1;
    end else if (((1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_3_address0 = tmp_713_cast_fu_1130_p1;
    end else begin
        conv_last_output_V_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1)))) begin
        conv_last_output_V_3_ce0 = 1'b1;
    end else begin
        conv_last_output_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage1_flag00000000 == 1'b0))) begin
        conv_last_output_V_3_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        conv_last_output_V_3_d0 = grp_fu_1552_p3;
    end else if (((1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_3_d0 = bias_V_q0;
    end else begin
        conv_last_output_V_3_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (tmp_678_reg_1669 == 3'd3)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'd1 == tmp_680_fu_1526_p3) & (ap_reg_pp2_iter1_tmp_679_reg_1954 == 3'd3)))) begin
        conv_last_output_V_3_we0 = 1'b1;
    end else begin
        conv_last_output_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage1_flag00000000 == 1'b0))) begin
        conv_last_output_V_4_address0 = conv_last_output_V_4_3_reg_2016;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_4_address0 = tmp_720_cast_fu_1493_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        conv_last_output_V_4_address0 = conv_last_output_V_4_1_reg_1792;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        conv_last_output_V_4_address0 = tmp_732_cast_fu_1279_p1;
    end else if (((1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_4_address0 = tmp_713_cast_fu_1130_p1;
    end else begin
        conv_last_output_V_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1)))) begin
        conv_last_output_V_4_ce0 = 1'b1;
    end else begin
        conv_last_output_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage1_flag00000000 == 1'b0))) begin
        conv_last_output_V_4_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        conv_last_output_V_4_d0 = grp_fu_1558_p3;
    end else if (((1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_4_d0 = bias_V_q0;
    end else begin
        conv_last_output_V_4_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (tmp_678_reg_1669 == 3'd4)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'd1 == tmp_680_fu_1526_p3) & (ap_reg_pp2_iter1_tmp_679_reg_1954 == 3'd4)))) begin
        conv_last_output_V_4_we0 = 1'b1;
    end else begin
        conv_last_output_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage1_flag00000000 == 1'b0))) begin
        conv_last_output_V_5_address0 = conv_last_output_V_5_3_reg_1991;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_5_address0 = tmp_720_cast_fu_1493_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        conv_last_output_V_5_address0 = conv_last_output_V_5_1_reg_1757;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        conv_last_output_V_5_address0 = tmp_732_cast_fu_1279_p1;
    end else if (((1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_5_address0 = tmp_713_cast_fu_1130_p1;
    end else begin
        conv_last_output_V_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1)))) begin
        conv_last_output_V_5_ce0 = 1'b1;
    end else begin
        conv_last_output_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage1_flag00000000 == 1'b0))) begin
        conv_last_output_V_5_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        conv_last_output_V_5_d0 = grp_fu_1564_p3;
    end else if (((1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_5_d0 = bias_V_q0;
    end else begin
        conv_last_output_V_5_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (tmp_678_reg_1669 == 3'd5)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'd1 == tmp_680_fu_1526_p3) & (ap_reg_pp2_iter1_tmp_679_reg_1954 == 3'd5)))) begin
        conv_last_output_V_5_we0 = 1'b1;
    end else begin
        conv_last_output_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage1_flag00000000 == 1'b0))) begin
        conv_last_output_V_6_address0 = conv_last_output_V_6_3_reg_2001;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_6_address0 = tmp_720_cast_fu_1493_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        conv_last_output_V_6_address0 = conv_last_output_V_6_1_reg_1767;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        conv_last_output_V_6_address0 = tmp_732_cast_fu_1279_p1;
    end else if (((1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_6_address0 = tmp_713_cast_fu_1130_p1;
    end else begin
        conv_last_output_V_6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1)))) begin
        conv_last_output_V_6_ce0 = 1'b1;
    end else begin
        conv_last_output_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage1_flag00000000 == 1'b0))) begin
        conv_last_output_V_6_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        conv_last_output_V_6_d0 = grp_fu_1570_p3;
    end else if (((1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_6_d0 = bias_V_q0;
    end else begin
        conv_last_output_V_6_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (tmp_678_reg_1669 == 3'd6)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'd1 == tmp_680_fu_1526_p3) & (ap_reg_pp2_iter1_tmp_679_reg_1954 == 3'd6)))) begin
        conv_last_output_V_6_we0 = 1'b1;
    end else begin
        conv_last_output_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage1_flag00000000 == 1'b0))) begin
        conv_last_output_V_7_address0 = conv_last_output_V_7_3_reg_2026;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_7_address0 = tmp_720_cast_fu_1493_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        conv_last_output_V_7_address0 = conv_last_output_V_7_1_reg_1822;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        conv_last_output_V_7_address0 = tmp_732_cast_fu_1279_p1;
    end else if (((1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_7_address0 = tmp_713_cast_fu_1130_p1;
    end else begin
        conv_last_output_V_7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1)))) begin
        conv_last_output_V_7_ce0 = 1'b1;
    end else begin
        conv_last_output_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage1_flag00000000 == 1'b0))) begin
        conv_last_output_V_7_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        conv_last_output_V_7_d0 = grp_fu_1576_p3;
    end else if (((1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        conv_last_output_V_7_d0 = bias_V_q0;
    end else begin
        conv_last_output_V_7_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (tmp_678_reg_1669 == 3'd7)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'd1 == tmp_680_fu_1526_p3) & (ap_reg_pp2_iter1_tmp_679_reg_1954 == 3'd7)))) begin
        conv_last_output_V_7_we0 = 1'b1;
    end else begin
        conv_last_output_V_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter1_exitcond_flatten14_reg_1642) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        i_1_phi_fu_669_p4 = i_1_cast9_mid2_v_reg_1664;
    end else begin
        i_1_phi_fu_669_p4 = i_1_reg_665;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'd0 == exitcond_flatten16_reg_1934) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        i_2_phi_fu_771_p4 = arrayNo8_mid2_v_reg_1949;
    end else begin
        i_2_phi_fu_771_p4 = i_2_reg_767;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == exitcond_flatten_reg_1587) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_phi_fu_636_p4 = i_cast_mid2_v_reg_1602;
    end else begin
        i_phi_fu_636_p4 = i_reg_632;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'd0 == exitcond_flatten16_reg_1934) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        indvar_flatten11_phi_fu_760_p4 = indvar_flatten_next2_reg_1938;
    end else begin
        indvar_flatten11_phi_fu_760_p4 = indvar_flatten11_reg_756;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'd0 == exitcond_flatten16_reg_1934) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        indvar_flatten12_phi_fu_782_p4 = indvar_flatten_next1_7_reg_1975;
    end else begin
        indvar_flatten12_phi_fu_782_p4 = indvar_flatten12_reg_778;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter1_exitcond_flatten14_reg_1642) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        j_1_phi_fu_692_p4 = j_1_cast8_mid2_reg_1683;
    end else begin
        j_1_phi_fu_692_p4 = j_1_reg_688;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'd0 == exitcond_flatten16_reg_1934) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        j_2_phi_fu_793_p4 = j_2_cast2_mid2_reg_1980;
    end else begin
        j_2_phi_fu_793_p4 = j_2_reg_789;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'd0 == exitcond_flatten16_reg_1934) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        k_1_phi_fu_804_p4 = k_3_reg_1986;
    end else begin
        k_1_phi_fu_804_p4 = k_1_reg_800;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter1_exitcond_flatten14_reg_1642) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        k_phi_fu_704_p4 = k_2_reg_1694;
    end else begin
        k_phi_fu_704_p4 = k_reg_700;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_1587) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_m_axi_weight_V_ARREADY))) begin
        m_axi_weight_V_ARVALID = 1'b1;
    end else begin
        m_axi_weight_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter9) & (1'd0 == ap_reg_pp0_iter8_exitcond_flatten_reg_1587) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        m_axi_weight_V_RREADY = 1'b1;
    end else begin
        m_axi_weight_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_1587))) begin
        weight_V_blk_n_AR = m_axi_weight_V_ARREADY;
    end else begin
        weight_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter9) & (1'd0 == ap_reg_pp0_iter8_exitcond_flatten_reg_1587))) begin
        weight_V_blk_n_R = m_axi_weight_V_RVALID;
    end else begin
        weight_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        weight_temp_0_0_0_address0 = tmp_736_cast_fu_1322_p1;
    end else if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10))) begin
        weight_temp_0_0_0_address0 = tmp_706_cast_fu_960_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        weight_temp_0_0_0_address0 = 32'd0;
    end else begin
        weight_temp_0_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state21) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10)))) begin
        weight_temp_0_0_0_ce0 = 1'b1;
    end else begin
        weight_temp_0_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10))) begin
        weight_temp_0_0_0_d0 = weight_V_addr_read_reg_1630;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        weight_temp_0_0_0_d0 = 8'd0;
    end else begin
        weight_temp_0_0_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10) & (3'd0 == ap_reg_pp0_iter9_tmp_reg_1609)))) begin
        weight_temp_0_0_0_we0 = 1'b1;
    end else begin
        weight_temp_0_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        weight_temp_1_0_0_address0 = tmp_736_cast_fu_1322_p1;
    end else if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10))) begin
        weight_temp_1_0_0_address0 = tmp_706_cast_fu_960_p1;
    end else begin
        weight_temp_1_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10)))) begin
        weight_temp_1_0_0_ce0 = 1'b1;
    end else begin
        weight_temp_1_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10) & (ap_reg_pp0_iter9_tmp_reg_1609 == 3'd1))) begin
        weight_temp_1_0_0_we0 = 1'b1;
    end else begin
        weight_temp_1_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        weight_temp_2_0_0_address0 = tmp_736_cast_fu_1322_p1;
    end else if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10))) begin
        weight_temp_2_0_0_address0 = tmp_706_cast_fu_960_p1;
    end else begin
        weight_temp_2_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10)))) begin
        weight_temp_2_0_0_ce0 = 1'b1;
    end else begin
        weight_temp_2_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10) & (ap_reg_pp0_iter9_tmp_reg_1609 == 3'd2))) begin
        weight_temp_2_0_0_we0 = 1'b1;
    end else begin
        weight_temp_2_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        weight_temp_3_0_0_address0 = tmp_736_cast_fu_1322_p1;
    end else if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10))) begin
        weight_temp_3_0_0_address0 = tmp_706_cast_fu_960_p1;
    end else begin
        weight_temp_3_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10)))) begin
        weight_temp_3_0_0_ce0 = 1'b1;
    end else begin
        weight_temp_3_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10) & (ap_reg_pp0_iter9_tmp_reg_1609 == 3'd3))) begin
        weight_temp_3_0_0_we0 = 1'b1;
    end else begin
        weight_temp_3_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        weight_temp_4_0_0_address0 = tmp_736_cast_fu_1322_p1;
    end else if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10))) begin
        weight_temp_4_0_0_address0 = tmp_706_cast_fu_960_p1;
    end else begin
        weight_temp_4_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10)))) begin
        weight_temp_4_0_0_ce0 = 1'b1;
    end else begin
        weight_temp_4_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10) & (ap_reg_pp0_iter9_tmp_reg_1609 == 3'd4))) begin
        weight_temp_4_0_0_we0 = 1'b1;
    end else begin
        weight_temp_4_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        weight_temp_5_0_0_address0 = tmp_736_cast_fu_1322_p1;
    end else if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10))) begin
        weight_temp_5_0_0_address0 = tmp_706_cast_fu_960_p1;
    end else begin
        weight_temp_5_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10)))) begin
        weight_temp_5_0_0_ce0 = 1'b1;
    end else begin
        weight_temp_5_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10) & (ap_reg_pp0_iter9_tmp_reg_1609 == 3'd5))) begin
        weight_temp_5_0_0_we0 = 1'b1;
    end else begin
        weight_temp_5_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        weight_temp_6_0_0_address0 = tmp_736_cast_fu_1322_p1;
    end else if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10))) begin
        weight_temp_6_0_0_address0 = tmp_706_cast_fu_960_p1;
    end else begin
        weight_temp_6_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10)))) begin
        weight_temp_6_0_0_ce0 = 1'b1;
    end else begin
        weight_temp_6_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10) & (ap_reg_pp0_iter9_tmp_reg_1609 == 3'd6))) begin
        weight_temp_6_0_0_we0 = 1'b1;
    end else begin
        weight_temp_6_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        weight_temp_7_0_0_address0 = tmp_736_cast_fu_1322_p1;
    end else if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10))) begin
        weight_temp_7_0_0_address0 = tmp_706_cast_fu_960_p1;
    end else begin
        weight_temp_7_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10)))) begin
        weight_temp_7_0_0_ce0 = 1'b1;
    end else begin
        weight_temp_7_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10) & (ap_reg_pp0_iter9_tmp_reg_1609 == 3'd7))) begin
        weight_temp_7_0_0_we0 = 1'b1;
    end else begin
        weight_temp_7_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10) & (ap_enable_reg_pp0_iter9 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_811_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10) & (ap_enable_reg_pp0_iter9 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_811_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (exitcond_flatten14_fu_972_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (exitcond_flatten14_fu_972_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (exitcond44_fu_1150_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (1'd1 == exitcond45_fu_1170_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (1'd1 == exitcond47_fu_1221_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (exitcond48_fu_1233_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (((ap_block_pp2_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp2_iter0) & (ap_block_pp2_stage0_flag00011011 == 1'b0) & (exitcond_flatten16_fu_1340_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((1'b1 == ap_enable_reg_pp2_iter0) & (ap_block_pp2_stage0_flag00011011 == 1'b0) & (exitcond_flatten16_fu_1340_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if (((ap_block_pp2_stage1_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_enable_reg_pp2_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd13];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter9) & (1'd0 == ap_reg_pp0_iter8_exitcond_flatten_reg_1587) & (1'b0 == m_axi_weight_V_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state4_io)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'd0 == ap_reg_pp0_iter8_exitcond_flatten_reg_1587) & (1'b0 == m_axi_weight_V_RVALID)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state4_io)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'd0 == ap_reg_pp0_iter8_exitcond_flatten_reg_1587) & (1'b0 == m_axi_weight_V_RVALID)));
end

assign ap_block_pp1_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter9 = ((1'd0 == ap_reg_pp0_iter8_exitcond_flatten_reg_1587) & (1'b0 == m_axi_weight_V_RVALID));
end

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_1587) & (1'b0 == ap_sig_ioackin_m_axi_weight_V_ARREADY));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign arrayNo8_mid2_v_fu_1372_p3 = ((exitcond_flatten17_fu_1358_p2[0:0] === 1'b1) ? i_5_fu_1352_p2 : i_2_phi_fu_771_p4);

assign bias_V_address0 = i_1_cast9_mid2_fu_1024_p1;

assign ci_16_fu_1227_p2 = (ci_reg_734 + 8'd1);

assign ci_cast4_cast_fu_1182_p1 = ci_reg_734;

assign co_48_7_fu_1334_p2 = (co_reg_745 + 10'd8);

assign exitcond43_fu_1048_p2 = ((k_phi_fu_704_p4 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond44_fu_1150_p2 = ((h_reg_712 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond45_fu_1170_p2 = ((w_reg_723 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond46_fu_1400_p2 = ((k_1_phi_fu_804_p4 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond47_fu_1221_p2 = ((ci_reg_734 == 8'd192) ? 1'b1 : 1'b0);

assign exitcond48_fu_1233_p2 = ((co_reg_745 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond60_mid_fu_1054_p2 = (exitcond43_fu_1048_p2 & not_exitcond_flatten_3_fu_1043_p2);

assign exitcond_flatten14_fu_972_p2 = ((indvar_flatten10_reg_654 == 14'd8192) ? 1'b1 : 1'b0);

assign exitcond_flatten15_fu_984_p2 = ((indvar_flatten6_reg_677 == 6'd16) ? 1'b1 : 1'b0);

assign exitcond_flatten16_fu_1340_p2 = ((indvar_flatten11_phi_fu_760_p4 == 14'd8192) ? 1'b1 : 1'b0);

assign exitcond_flatten17_fu_1358_p2 = ((indvar_flatten12_phi_fu_782_p4 == 6'd16) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_811_p2 = ((indvar_flatten_reg_621 == 17'd98304) ? 1'b1 : 1'b0);

assign exitcond_fu_829_p2 = ((j_reg_643 == 8'd192) ? 1'b1 : 1'b0);

assign exitcond_mid_fu_1406_p2 = (exitcond46_fu_1400_p2 & not_exitcond_flatten_fu_1394_p2);

assign h_33_fu_1156_p2 = (h_reg_712 + 3'd1);

assign h_cast6_cast1_fu_1142_p1 = h_reg_712;

assign h_cast6_cast_fu_1146_p1 = h_reg_712;

assign i_1_cast9_mid2_fu_1024_p1 = i_1_cast9_mid2_v_fu_1017_p3;

assign i_1_cast9_mid2_v_fu_1017_p3 = ((exitcond_flatten15_reg_1651[0:0] === 1'b1) ? i_4_fu_1004_p2 : i_1_phi_fu_669_p4);

assign i_3_fu_823_p2 = (10'd1 + i_phi_fu_636_p4);

assign i_4_fu_1004_p2 = (10'd1 + i_1_phi_fu_669_p4);

assign i_5_fu_1352_p2 = (10'd1 + i_2_phi_fu_771_p4);

assign i_cast_mid2_v_fu_843_p3 = ((exitcond_fu_829_p2[0:0] === 1'b1) ? i_3_fu_823_p2 : i_phi_fu_636_p4);

assign indvar_flatten28_op_fu_1426_p2 = (indvar_flatten12_phi_fu_782_p4 + 6'd1);

assign indvar_flatten6_op_fu_990_p2 = (indvar_flatten6_reg_677 + 6'd1);

assign indvar_flatten_next1_7_fu_1432_p3 = ((exitcond_flatten17_fu_1358_p2[0:0] === 1'b1) ? 6'd1 : indvar_flatten28_op_fu_1426_p2);

assign indvar_flatten_next1_fu_978_p2 = (indvar_flatten10_reg_654 + 14'd1);

assign indvar_flatten_next2_fu_1346_p2 = (indvar_flatten11_phi_fu_760_p4 + 14'd1);

assign indvar_flatten_next7_fu_996_p3 = ((exitcond_flatten15_fu_984_p2[0:0] === 1'b1) ? 6'd1 : indvar_flatten6_op_fu_990_p2);

assign indvar_flatten_next_fu_817_p2 = (indvar_flatten_reg_621 + 17'd1);

assign input_V_address0 = input_V_addr_reg_1741;

assign j_1_cast8_mid2_cast_fu_1104_p1 = j_1_cast8_mid2_reg_1683;

assign j_1_cast8_mid2_fu_1079_p3 = ((exitcond60_mid_fu_1054_p2[0:0] === 1'b1) ? j_4_fu_1060_p2 : j_1_mid_fu_1010_p3);

assign j_1_mid_fu_1010_p3 = ((exitcond_flatten15_reg_1651[0:0] === 1'b1) ? 3'd0 : j_1_phi_fu_692_p4);

assign j_2_cast2_mid2_cast_fu_1467_p1 = j_2_cast2_mid2_reg_1980;

assign j_2_cast2_mid2_fu_1445_p3 = ((exitcond_mid_reg_1964[0:0] === 1'b1) ? j_5_fu_1440_p2 : j_2_mid_reg_1943);

assign j_2_mid_fu_1364_p3 = ((exitcond_flatten17_fu_1358_p2[0:0] === 1'b1) ? 3'd0 : j_2_phi_fu_793_p4);

assign j_3_fu_865_p2 = (j_mid2_fu_835_p3 + 8'd1);

assign j_4_fu_1060_p2 = (3'd1 + j_1_mid_fu_1010_p3);

assign j_5_fu_1440_p2 = (3'd1 + j_2_mid_reg_1943);

assign j_cast_cast1_fu_951_p1 = ap_reg_pp0_iter9_j_mid2_reg_1596;

assign j_cast_cast_fu_903_p1 = j_mid2_reg_1596;

assign j_mid2_fu_835_p3 = ((exitcond_fu_829_p2[0:0] === 1'b1) ? 8'd0 : j_reg_643);

assign k_1_cast1_cast_fu_1484_p1 = k_1_mid2_reg_1969;

assign k_1_mid2_fu_1418_p3 = ((tmp_572_fu_1412_p2[0:0] === 1'b1) ? 3'd0 : k_1_phi_fu_804_p4);

assign k_2_fu_1087_p2 = (k_mid2_fu_1071_p3 + 3'd1);

assign k_3_fu_1451_p2 = (k_1_mid2_reg_1969 + 3'd1);

assign k_cast7_cast_fu_1121_p1 = k_mid2_reg_1678;

assign k_mid2_fu_1071_p3 = ((tmp_568_fu_1066_p2[0:0] === 1'b1) ? 3'd0 : k_phi_fu_704_p4);

assign m_axi_weight_V_ARADDR = weight_V_addr_reg_1624;

assign m_axi_weight_V_ARBURST = 2'd0;

assign m_axi_weight_V_ARCACHE = 4'd0;

assign m_axi_weight_V_ARID = 1'd0;

assign m_axi_weight_V_ARLEN = 32'd1;

assign m_axi_weight_V_ARLOCK = 2'd0;

assign m_axi_weight_V_ARPROT = 3'd0;

assign m_axi_weight_V_ARQOS = 4'd0;

assign m_axi_weight_V_ARREGION = 4'd0;

assign m_axi_weight_V_ARSIZE = 3'd0;

assign m_axi_weight_V_ARUSER = 1'd0;

assign m_axi_weight_V_AWADDR = 32'd0;

assign m_axi_weight_V_AWBURST = 2'd0;

assign m_axi_weight_V_AWCACHE = 4'd0;

assign m_axi_weight_V_AWID = 1'd0;

assign m_axi_weight_V_AWLEN = 32'd0;

assign m_axi_weight_V_AWLOCK = 2'd0;

assign m_axi_weight_V_AWPROT = 3'd0;

assign m_axi_weight_V_AWQOS = 4'd0;

assign m_axi_weight_V_AWREGION = 4'd0;

assign m_axi_weight_V_AWSIZE = 3'd0;

assign m_axi_weight_V_AWUSER = 1'd0;

assign m_axi_weight_V_AWVALID = 1'b0;

assign m_axi_weight_V_BREADY = 1'b0;

assign m_axi_weight_V_WDATA = 8'd0;

assign m_axi_weight_V_WID = 1'd0;

assign m_axi_weight_V_WLAST = 1'b0;

assign m_axi_weight_V_WSTRB = 1'd0;

assign m_axi_weight_V_WUSER = 1'd0;

assign m_axi_weight_V_WVALID = 1'b0;

assign newIndex3_fu_1239_p4 = {{co_reg_745[9:3]}};

assign not_exitcond_flatten_3_fu_1043_p2 = (exitcond_flatten15_reg_1651 ^ 1'd1);

assign not_exitcond_flatten_fu_1394_p2 = (exitcond_flatten17_fu_1358_p2 ^ 1'd1);

assign p_shl1_cast_fu_941_p1 = tmp_563_fu_934_p3;

assign p_shl2_cast_fu_878_p1 = tmp_559_fu_871_p3;

assign p_shl3_cast_fu_889_p1 = tmp_560_fu_882_p3;

assign p_shl5_cast_fu_1307_p1 = tmp_582_fu_1299_p3;

assign sum_fu_916_p2 = ($signed(tmp_705_cast_fu_912_p1) + $signed(conv_last_weight_V9));

assign tmp_559_fu_871_p3 = {{i_cast_mid2_v_reg_1602}, {8'd0}};

assign tmp_560_fu_882_p3 = {{i_cast_mid2_v_reg_1602}, {6'd0}};

assign tmp_561_fu_893_p2 = (p_shl2_cast_fu_878_p1 - p_shl3_cast_fu_889_p1);

assign tmp_562_fu_927_p3 = {{ap_reg_pp0_iter9_newIndex_cast_mid2_v_reg_1613}, {8'd0}};

assign tmp_563_fu_934_p3 = {{ap_reg_pp0_iter9_newIndex_cast_mid2_v_reg_1613}, {6'd0}};

assign tmp_564_fu_945_p2 = (tmp_562_fu_927_p3 - p_shl1_cast_fu_941_p1);

assign tmp_565_fu_906_p2 = ($signed(j_cast_cast_fu_903_p1) + $signed(tmp_701_cast_fu_899_p1));

assign tmp_566_fu_954_p2 = (j_cast_cast1_fu_951_p1 + tmp_564_fu_945_p2);

assign tmp_567_fu_1093_p3 = {{newIndex2_cast_mid2_s_reg_1673}, {2'd0}};

assign tmp_568_fu_1066_p2 = (exitcond60_mid_fu_1054_p2 | exitcond_flatten15_reg_1651);

assign tmp_569_fu_1107_p2 = (tmp_708_cast_fu_1100_p1 + j_1_cast8_mid2_cast_fu_1104_p1);

assign tmp_570_fu_1124_p2 = (tmp_712_cast_fu_1113_p3 + k_cast7_cast_fu_1121_p1);

assign tmp_571_fu_1456_p3 = {{newIndex9_cast_mid2_s_reg_1959}, {2'd0}};

assign tmp_572_fu_1412_p2 = (exitcond_mid_fu_1406_p2 | exitcond_flatten17_fu_1358_p2);

assign tmp_573_fu_1470_p2 = (tmp_715_cast_fu_1463_p1 + j_2_cast2_mid2_cast_fu_1467_p1);

assign tmp_574_fu_1487_p2 = (tmp_719_cast_fu_1476_p3 + k_1_cast1_cast_fu_1484_p1);

assign tmp_575_fu_1186_p3 = {{ci_reg_734}, {2'd0}};

assign tmp_576_fu_1198_p2 = (h_cast6_cast_reg_1704 + tmp_722_cast_fu_1194_p1);

assign tmp_577_fu_1211_p2 = (w_cast5_cast_reg_1723 + tmp_725_cast_fu_1203_p3);

assign tmp_578_fu_1249_p3 = {{newIndex3_fu_1239_p4}, {2'd0}};

assign tmp_579_fu_1261_p2 = (tmp_728_cast_fu_1257_p1 + h_cast6_cast1_reg_1699);

assign tmp_580_fu_1274_p2 = (tmp_731_cast_fu_1266_p3 + w_cast5_cast1_reg_1718);

assign tmp_581_fu_1291_p3 = {{newIndex3_fu_1239_p4}, {8'd0}};

assign tmp_582_fu_1299_p3 = {{newIndex3_fu_1239_p4}, {6'd0}};

assign tmp_583_fu_1311_p2 = (tmp_581_fu_1291_p3 - p_shl5_cast_fu_1307_p1);

assign tmp_584_fu_1317_p2 = (tmp_583_fu_1311_p2 + ci_cast4_cast_reg_1736);

assign tmp_678_fu_1029_p1 = i_1_cast9_mid2_v_fu_1017_p3[2:0];

assign tmp_679_fu_1380_p1 = arrayNo8_mid2_v_fu_1372_p3[2:0];

assign tmp_680_fu_1526_p3 = tmp_54_fu_1505_p10[32'd7];

assign tmp_701_cast_fu_899_p1 = $signed(tmp_561_fu_893_p2);

assign tmp_705_cast_fu_912_p1 = $signed(tmp_565_fu_906_p2);

assign tmp_706_cast_fu_960_p1 = $signed(tmp_566_fu_954_p2);

assign tmp_708_cast_fu_1100_p1 = tmp_567_fu_1093_p3;

assign tmp_712_cast_fu_1113_p3 = {{tmp_569_fu_1107_p2}, {2'd0}};

assign tmp_713_cast_fu_1130_p1 = tmp_570_fu_1124_p2;

assign tmp_715_cast_fu_1463_p1 = tmp_571_fu_1456_p3;

assign tmp_719_cast_fu_1476_p3 = {{tmp_573_fu_1470_p2}, {2'd0}};

assign tmp_720_cast_fu_1493_p1 = tmp_574_fu_1487_p2;

assign tmp_722_cast_fu_1194_p1 = tmp_575_fu_1186_p3;

assign tmp_725_cast_fu_1203_p3 = {{tmp_576_fu_1198_p2}, {2'd0}};

assign tmp_726_cast_fu_1216_p1 = tmp_577_fu_1211_p2;

assign tmp_728_cast_fu_1257_p1 = tmp_578_fu_1249_p3;

assign tmp_731_cast_fu_1266_p3 = {{tmp_579_fu_1261_p2}, {2'd0}};

assign tmp_732_cast_fu_1279_p1 = tmp_580_fu_1274_p2;

assign tmp_736_cast_fu_1322_p1 = $signed(tmp_584_fu_1317_p2);

assign tmp_fu_851_p1 = i_cast_mid2_v_fu_843_p3[2:0];

assign w_43_fu_1176_p2 = (w_reg_723 + 3'd1);

assign w_cast5_cast1_fu_1162_p1 = w_reg_723;

assign w_cast5_cast_fu_1166_p1 = w_reg_723;

always @ (posedge ap_clk) begin
    h_cast6_cast1_reg_1699[9:3] <= 7'b0000000;
    h_cast6_cast_reg_1704[10:3] <= 8'b00000000;
    w_cast5_cast1_reg_1718[11:3] <= 9'b000000000;
    w_cast5_cast_reg_1723[12:3] <= 10'b0000000000;
    ci_cast4_cast_reg_1736[14:8] <= 7'b0000000;
end

endmodule //conv_last
