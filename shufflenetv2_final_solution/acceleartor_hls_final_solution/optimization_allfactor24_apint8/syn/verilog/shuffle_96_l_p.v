// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shuffle_96_l_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        buffer1_1_96_4x4_p_V_24_address0,
        buffer1_1_96_4x4_p_V_24_ce0,
        buffer1_1_96_4x4_p_V_24_q0,
        buffer1_1_96_4x4_p_V_1_address0,
        buffer1_1_96_4x4_p_V_1_ce0,
        buffer1_1_96_4x4_p_V_1_q0,
        buffer1_1_96_4x4_p_V_2_address0,
        buffer1_1_96_4x4_p_V_2_ce0,
        buffer1_1_96_4x4_p_V_2_q0,
        buffer1_1_96_4x4_p_V_3_address0,
        buffer1_1_96_4x4_p_V_3_ce0,
        buffer1_1_96_4x4_p_V_3_q0,
        buffer1_1_96_4x4_p_V_4_address0,
        buffer1_1_96_4x4_p_V_4_ce0,
        buffer1_1_96_4x4_p_V_4_q0,
        buffer1_1_96_4x4_p_V_5_address0,
        buffer1_1_96_4x4_p_V_5_ce0,
        buffer1_1_96_4x4_p_V_5_q0,
        buffer1_1_96_4x4_p_V_6_address0,
        buffer1_1_96_4x4_p_V_6_ce0,
        buffer1_1_96_4x4_p_V_6_q0,
        buffer1_1_96_4x4_p_V_7_address0,
        buffer1_1_96_4x4_p_V_7_ce0,
        buffer1_1_96_4x4_p_V_7_q0,
        buffer1_1_96_4x4_p_V_8_address0,
        buffer1_1_96_4x4_p_V_8_ce0,
        buffer1_1_96_4x4_p_V_8_q0,
        buffer1_1_96_4x4_p_V_9_address0,
        buffer1_1_96_4x4_p_V_9_ce0,
        buffer1_1_96_4x4_p_V_9_q0,
        buffer1_1_96_4x4_p_V_10_address0,
        buffer1_1_96_4x4_p_V_10_ce0,
        buffer1_1_96_4x4_p_V_10_q0,
        buffer1_1_96_4x4_p_V_11_address0,
        buffer1_1_96_4x4_p_V_11_ce0,
        buffer1_1_96_4x4_p_V_11_q0,
        buffer1_1_96_4x4_p_V_12_address0,
        buffer1_1_96_4x4_p_V_12_ce0,
        buffer1_1_96_4x4_p_V_12_q0,
        buffer1_1_96_4x4_p_V_13_address0,
        buffer1_1_96_4x4_p_V_13_ce0,
        buffer1_1_96_4x4_p_V_13_q0,
        buffer1_1_96_4x4_p_V_14_address0,
        buffer1_1_96_4x4_p_V_14_ce0,
        buffer1_1_96_4x4_p_V_14_q0,
        buffer1_1_96_4x4_p_V_15_address0,
        buffer1_1_96_4x4_p_V_15_ce0,
        buffer1_1_96_4x4_p_V_15_q0,
        buffer1_1_96_4x4_p_V_16_address0,
        buffer1_1_96_4x4_p_V_16_ce0,
        buffer1_1_96_4x4_p_V_16_q0,
        buffer1_1_96_4x4_p_V_17_address0,
        buffer1_1_96_4x4_p_V_17_ce0,
        buffer1_1_96_4x4_p_V_17_q0,
        buffer1_1_96_4x4_p_V_18_address0,
        buffer1_1_96_4x4_p_V_18_ce0,
        buffer1_1_96_4x4_p_V_18_q0,
        buffer1_1_96_4x4_p_V_19_address0,
        buffer1_1_96_4x4_p_V_19_ce0,
        buffer1_1_96_4x4_p_V_19_q0,
        buffer1_1_96_4x4_p_V_20_address0,
        buffer1_1_96_4x4_p_V_20_ce0,
        buffer1_1_96_4x4_p_V_20_q0,
        buffer1_1_96_4x4_p_V_21_address0,
        buffer1_1_96_4x4_p_V_21_ce0,
        buffer1_1_96_4x4_p_V_21_q0,
        buffer1_1_96_4x4_p_V_22_address0,
        buffer1_1_96_4x4_p_V_22_ce0,
        buffer1_1_96_4x4_p_V_22_q0,
        buffer1_1_96_4x4_p_V_23_address0,
        buffer1_1_96_4x4_p_V_23_ce0,
        buffer1_1_96_4x4_p_V_23_q0
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [7:0] buffer1_1_96_4x4_p_V_24_address0;
output   buffer1_1_96_4x4_p_V_24_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_24_q0;
output  [7:0] buffer1_1_96_4x4_p_V_1_address0;
output   buffer1_1_96_4x4_p_V_1_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_1_q0;
output  [7:0] buffer1_1_96_4x4_p_V_2_address0;
output   buffer1_1_96_4x4_p_V_2_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_2_q0;
output  [7:0] buffer1_1_96_4x4_p_V_3_address0;
output   buffer1_1_96_4x4_p_V_3_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_3_q0;
output  [7:0] buffer1_1_96_4x4_p_V_4_address0;
output   buffer1_1_96_4x4_p_V_4_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_4_q0;
output  [7:0] buffer1_1_96_4x4_p_V_5_address0;
output   buffer1_1_96_4x4_p_V_5_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_5_q0;
output  [7:0] buffer1_1_96_4x4_p_V_6_address0;
output   buffer1_1_96_4x4_p_V_6_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_6_q0;
output  [7:0] buffer1_1_96_4x4_p_V_7_address0;
output   buffer1_1_96_4x4_p_V_7_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_7_q0;
output  [7:0] buffer1_1_96_4x4_p_V_8_address0;
output   buffer1_1_96_4x4_p_V_8_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_8_q0;
output  [7:0] buffer1_1_96_4x4_p_V_9_address0;
output   buffer1_1_96_4x4_p_V_9_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_9_q0;
output  [7:0] buffer1_1_96_4x4_p_V_10_address0;
output   buffer1_1_96_4x4_p_V_10_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_10_q0;
output  [7:0] buffer1_1_96_4x4_p_V_11_address0;
output   buffer1_1_96_4x4_p_V_11_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_11_q0;
output  [7:0] buffer1_1_96_4x4_p_V_12_address0;
output   buffer1_1_96_4x4_p_V_12_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_12_q0;
output  [7:0] buffer1_1_96_4x4_p_V_13_address0;
output   buffer1_1_96_4x4_p_V_13_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_13_q0;
output  [7:0] buffer1_1_96_4x4_p_V_14_address0;
output   buffer1_1_96_4x4_p_V_14_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_14_q0;
output  [7:0] buffer1_1_96_4x4_p_V_15_address0;
output   buffer1_1_96_4x4_p_V_15_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_15_q0;
output  [7:0] buffer1_1_96_4x4_p_V_16_address0;
output   buffer1_1_96_4x4_p_V_16_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_16_q0;
output  [7:0] buffer1_1_96_4x4_p_V_17_address0;
output   buffer1_1_96_4x4_p_V_17_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_17_q0;
output  [7:0] buffer1_1_96_4x4_p_V_18_address0;
output   buffer1_1_96_4x4_p_V_18_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_18_q0;
output  [7:0] buffer1_1_96_4x4_p_V_19_address0;
output   buffer1_1_96_4x4_p_V_19_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_19_q0;
output  [7:0] buffer1_1_96_4x4_p_V_20_address0;
output   buffer1_1_96_4x4_p_V_20_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_20_q0;
output  [7:0] buffer1_1_96_4x4_p_V_21_address0;
output   buffer1_1_96_4x4_p_V_21_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_21_q0;
output  [7:0] buffer1_1_96_4x4_p_V_22_address0;
output   buffer1_1_96_4x4_p_V_22_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_22_q0;
output  [7:0] buffer1_1_96_4x4_p_V_23_address0;
output   buffer1_1_96_4x4_p_V_23_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_23_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_V_ce0;
reg output_V_we0;
reg buffer1_1_96_4x4_p_V_24_ce0;
reg buffer1_1_96_4x4_p_V_1_ce0;
reg buffer1_1_96_4x4_p_V_2_ce0;
reg buffer1_1_96_4x4_p_V_3_ce0;
reg buffer1_1_96_4x4_p_V_4_ce0;
reg buffer1_1_96_4x4_p_V_5_ce0;
reg buffer1_1_96_4x4_p_V_6_ce0;
reg buffer1_1_96_4x4_p_V_7_ce0;
reg buffer1_1_96_4x4_p_V_8_ce0;
reg buffer1_1_96_4x4_p_V_9_ce0;
reg buffer1_1_96_4x4_p_V_10_ce0;
reg buffer1_1_96_4x4_p_V_11_ce0;
reg buffer1_1_96_4x4_p_V_12_ce0;
reg buffer1_1_96_4x4_p_V_13_ce0;
reg buffer1_1_96_4x4_p_V_14_ce0;
reg buffer1_1_96_4x4_p_V_15_ce0;
reg buffer1_1_96_4x4_p_V_16_ce0;
reg buffer1_1_96_4x4_p_V_17_ce0;
reg buffer1_1_96_4x4_p_V_18_ce0;
reg buffer1_1_96_4x4_p_V_19_ce0;
reg buffer1_1_96_4x4_p_V_20_ce0;
reg buffer1_1_96_4x4_p_V_21_ce0;
reg buffer1_1_96_4x4_p_V_22_ce0;
reg buffer1_1_96_4x4_p_V_23_ce0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_635_fu_436_p1;
reg   [0:0] tmp_635_reg_768;
wire    ap_CS_fsm_state2;
wire  signed [12:0] tmp_570_cast_fu_470_p1;
reg  signed [12:0] tmp_570_cast_reg_772;
wire   [7:0] co_26_fu_480_p2;
reg   [7:0] co_26_reg_780;
wire   [6:0] p_lshr_f_cast_fu_486_p4;
wire   [0:0] exitcond3_fu_474_p2;
reg   [3:0] tmp_636_reg_790;
wire   [8:0] arrayNo_cast_fu_522_p1;
reg   [8:0] arrayNo_cast_reg_796;
wire    ap_CS_fsm_state12;
wire  signed [11:0] tmp_575_cast_fu_562_p1;
reg  signed [11:0] tmp_575_cast_reg_801;
wire   [13:0] tmp_482_fu_599_p2;
reg   [13:0] tmp_482_reg_806;
wire    ap_CS_fsm_state13;
wire   [8:0] tmp_484_fu_634_p2;
reg   [8:0] tmp_484_reg_811;
wire   [2:0] h_26_fu_646_p2;
reg   [2:0] h_26_reg_819;
reg   [12:0] output_V_addr_reg_824;
wire    ap_CS_fsm_state14;
wire   [2:0] w_36_fu_709_p2;
reg   [2:0] w_36_reg_952;
wire   [7:0] tmp_fu_715_p26;
reg   [7:0] tmp_reg_957;
wire    ap_CS_fsm_state15;
reg   [7:0] co_reg_403;
wire   [0:0] exitcond2_fu_640_p2;
reg   [2:0] h_reg_414;
wire   [0:0] exitcond_fu_703_p2;
reg   [2:0] w_reg_425;
wire    ap_CS_fsm_state16;
wire   [31:0] tmp_584_cast_fu_665_p1;
wire   [31:0] tmp_585_cast_fu_675_p1;
wire   [10:0] tmp_s_fu_440_p3;
wire   [8:0] tmp_476_fu_452_p3;
wire   [11:0] p_shl_cast_fu_448_p1;
wire   [11:0] p_shl1_cast_fu_460_p1;
wire   [11:0] tmp_477_fu_464_p2;
wire   [6:0] grp_fu_496_p0;
wire   [5:0] grp_fu_496_p1;
wire   [6:0] mul_fu_506_p0;
wire   [15:0] mul_fu_506_p2;
wire   [6:0] grp_fu_496_p2;
wire   [6:0] tmp_637_fu_526_p3;
wire  signed [9:0] tmp_478_fu_533_p1;
wire   [4:0] tmp_638_fu_541_p3;
wire  signed [7:0] tmp_479_fu_548_p1;
wire   [10:0] p_shl2_cast_fu_537_p1;
wire   [10:0] p_shl3_cast_fu_552_p1;
wire   [10:0] tmp_480_fu_556_p2;
wire   [12:0] h_cast2_cast_fu_570_p1;
wire   [12:0] tmp_481_fu_574_p2;
wire   [10:0] tmp_639_fu_579_p1;
wire   [13:0] p_shl6_cast_fu_583_p3;
wire   [13:0] p_shl7_cast_fu_591_p3;
wire   [11:0] h_cast2_cast9_fu_566_p1;
wire   [11:0] tmp_483_fu_605_p2;
wire   [5:0] tmp_640_fu_610_p1;
wire   [7:0] tmp_641_fu_622_p1;
wire   [8:0] p_shl4_cast_fu_614_p3;
wire   [8:0] p_shl5_cast_fu_626_p3;
wire   [13:0] w_cast1_cast_fu_656_p1;
wire   [13:0] tmp_485_fu_660_p2;
wire   [8:0] w_cast1_cast8_fu_652_p1;
wire   [8:0] tmp_486_fu_670_p2;
reg    grp_fu_496_ap_start;
wire    grp_fu_496_ap_done;
reg   [15:0] ap_NS_fsm;
wire   [15:0] mul_fu_506_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

ShuffleNetV2_uremlbW #(
    .ID( 1 ),
    .NUM_STAGE( 11 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 7 ))
ShuffleNetV2_uremlbW_U641(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_496_ap_start),
    .done(grp_fu_496_ap_done),
    .din0(grp_fu_496_p0),
    .din1(grp_fu_496_p1),
    .ce(1'b1),
    .dout(grp_fu_496_p2)
);

ShuffleNetV2_mux_mb6 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 9 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_mb6_U642(
    .din1(buffer1_1_96_4x4_p_V_24_q0),
    .din2(buffer1_1_96_4x4_p_V_1_q0),
    .din3(buffer1_1_96_4x4_p_V_2_q0),
    .din4(buffer1_1_96_4x4_p_V_3_q0),
    .din5(buffer1_1_96_4x4_p_V_4_q0),
    .din6(buffer1_1_96_4x4_p_V_5_q0),
    .din7(buffer1_1_96_4x4_p_V_6_q0),
    .din8(buffer1_1_96_4x4_p_V_7_q0),
    .din9(buffer1_1_96_4x4_p_V_8_q0),
    .din10(buffer1_1_96_4x4_p_V_9_q0),
    .din11(buffer1_1_96_4x4_p_V_10_q0),
    .din12(buffer1_1_96_4x4_p_V_11_q0),
    .din13(buffer1_1_96_4x4_p_V_12_q0),
    .din14(buffer1_1_96_4x4_p_V_13_q0),
    .din15(buffer1_1_96_4x4_p_V_14_q0),
    .din16(buffer1_1_96_4x4_p_V_15_q0),
    .din17(buffer1_1_96_4x4_p_V_16_q0),
    .din18(buffer1_1_96_4x4_p_V_17_q0),
    .din19(buffer1_1_96_4x4_p_V_18_q0),
    .din20(buffer1_1_96_4x4_p_V_19_q0),
    .din21(buffer1_1_96_4x4_p_V_20_q0),
    .din22(buffer1_1_96_4x4_p_V_21_q0),
    .din23(buffer1_1_96_4x4_p_V_22_q0),
    .din24(buffer1_1_96_4x4_p_V_23_q0),
    .din25(arrayNo_cast_reg_796),
    .dout(tmp_fu_715_p26)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (exitcond2_fu_640_p2 == 1'd1))) begin
        co_reg_403 <= co_26_reg_780;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_403 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'd1 == exitcond_fu_703_p2))) begin
        h_reg_414 <= h_26_reg_819;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        h_reg_414 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (1'd0 == exitcond2_fu_640_p2))) begin
        w_reg_425 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        w_reg_425 <= w_36_reg_952;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        arrayNo_cast_reg_796[6 : 0] <= arrayNo_cast_fu_522_p1[6 : 0];
        tmp_575_cast_reg_801[11 : 1] <= tmp_575_cast_fu_562_p1[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_26_reg_780 <= co_26_fu_480_p2;
        tmp_570_cast_reg_772[12 : 1] <= tmp_570_cast_fu_470_p1[12 : 1];
        tmp_635_reg_768 <= tmp_635_fu_436_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        h_26_reg_819 <= h_26_fu_646_p2;
        tmp_482_reg_806[13 : 1] <= tmp_482_fu_599_p2[13 : 1];
        tmp_484_reg_811[8 : 1] <= tmp_484_fu_634_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_V_addr_reg_824 <= tmp_584_cast_fu_665_p1;
        w_36_reg_952 <= w_36_fu_709_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_474_p2 == 1'd0))) begin
        tmp_636_reg_790 <= {{mul_fu_506_p2[15:12]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_reg_957 <= tmp_fu_715_p26;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_474_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_474_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_10_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_11_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_12_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_13_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_14_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_15_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_16_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_17_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_18_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_19_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_1_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_20_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_21_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_22_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_23_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_24_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_2_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_3_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_4_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_5_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_6_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_7_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_8_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_9_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_474_p2 == 1'd0))) begin
        grp_fu_496_ap_start = 1'b1;
    end else begin
        grp_fu_496_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (tmp_635_reg_768 == 1'd0))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_474_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (exitcond2_fu_640_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (1'd1 == exitcond_fu_703_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else if (((1'b1 == ap_CS_fsm_state14) & (1'd0 == exitcond_fu_703_p2) & (tmp_635_reg_768 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign arrayNo_cast_fu_522_p1 = grp_fu_496_p2;

assign buffer1_1_96_4x4_p_V_10_address0 = tmp_585_cast_fu_675_p1;

assign buffer1_1_96_4x4_p_V_11_address0 = tmp_585_cast_fu_675_p1;

assign buffer1_1_96_4x4_p_V_12_address0 = tmp_585_cast_fu_675_p1;

assign buffer1_1_96_4x4_p_V_13_address0 = tmp_585_cast_fu_675_p1;

assign buffer1_1_96_4x4_p_V_14_address0 = tmp_585_cast_fu_675_p1;

assign buffer1_1_96_4x4_p_V_15_address0 = tmp_585_cast_fu_675_p1;

assign buffer1_1_96_4x4_p_V_16_address0 = tmp_585_cast_fu_675_p1;

assign buffer1_1_96_4x4_p_V_17_address0 = tmp_585_cast_fu_675_p1;

assign buffer1_1_96_4x4_p_V_18_address0 = tmp_585_cast_fu_675_p1;

assign buffer1_1_96_4x4_p_V_19_address0 = tmp_585_cast_fu_675_p1;

assign buffer1_1_96_4x4_p_V_1_address0 = tmp_585_cast_fu_675_p1;

assign buffer1_1_96_4x4_p_V_20_address0 = tmp_585_cast_fu_675_p1;

assign buffer1_1_96_4x4_p_V_21_address0 = tmp_585_cast_fu_675_p1;

assign buffer1_1_96_4x4_p_V_22_address0 = tmp_585_cast_fu_675_p1;

assign buffer1_1_96_4x4_p_V_23_address0 = tmp_585_cast_fu_675_p1;

assign buffer1_1_96_4x4_p_V_24_address0 = tmp_585_cast_fu_675_p1;

assign buffer1_1_96_4x4_p_V_2_address0 = tmp_585_cast_fu_675_p1;

assign buffer1_1_96_4x4_p_V_3_address0 = tmp_585_cast_fu_675_p1;

assign buffer1_1_96_4x4_p_V_4_address0 = tmp_585_cast_fu_675_p1;

assign buffer1_1_96_4x4_p_V_5_address0 = tmp_585_cast_fu_675_p1;

assign buffer1_1_96_4x4_p_V_6_address0 = tmp_585_cast_fu_675_p1;

assign buffer1_1_96_4x4_p_V_7_address0 = tmp_585_cast_fu_675_p1;

assign buffer1_1_96_4x4_p_V_8_address0 = tmp_585_cast_fu_675_p1;

assign buffer1_1_96_4x4_p_V_9_address0 = tmp_585_cast_fu_675_p1;

assign co_26_fu_480_p2 = (8'd1 + co_reg_403);

assign exitcond2_fu_640_p2 = ((h_reg_414 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond3_fu_474_p2 = ((co_reg_403 == 8'd192) ? 1'b1 : 1'b0);

assign exitcond_fu_703_p2 = ((w_reg_425 == 3'd6) ? 1'b1 : 1'b0);

assign grp_fu_496_p0 = {{co_reg_403[7:1]}};

assign grp_fu_496_p1 = 7'd24;

assign h_26_fu_646_p2 = (3'd1 + h_reg_414);

assign h_cast2_cast9_fu_566_p1 = h_reg_414;

assign h_cast2_cast_fu_570_p1 = h_reg_414;

assign mul_fu_506_p0 = mul_fu_506_p00;

assign mul_fu_506_p00 = p_lshr_f_cast_fu_486_p4;

assign mul_fu_506_p2 = (mul_fu_506_p0 * $signed('hAB));

assign output_V_address0 = output_V_addr_reg_824;

assign output_V_d0 = tmp_reg_957;

assign p_lshr_f_cast_fu_486_p4 = {{co_reg_403[7:1]}};

assign p_shl1_cast_fu_460_p1 = tmp_476_fu_452_p3;

assign p_shl2_cast_fu_537_p1 = $unsigned(tmp_478_fu_533_p1);

assign p_shl3_cast_fu_552_p1 = $unsigned(tmp_479_fu_548_p1);

assign p_shl4_cast_fu_614_p3 = {{tmp_640_fu_610_p1}, {3'd0}};

assign p_shl5_cast_fu_626_p3 = {{tmp_641_fu_622_p1}, {1'd0}};

assign p_shl6_cast_fu_583_p3 = {{tmp_639_fu_579_p1}, {3'd0}};

assign p_shl7_cast_fu_591_p3 = {{tmp_481_fu_574_p2}, {1'd0}};

assign p_shl_cast_fu_448_p1 = tmp_s_fu_440_p3;

assign tmp_476_fu_452_p3 = {{co_reg_403}, {1'd0}};

assign tmp_477_fu_464_p2 = (p_shl_cast_fu_448_p1 - p_shl1_cast_fu_460_p1);

assign tmp_478_fu_533_p1 = $signed(tmp_637_fu_526_p3);

assign tmp_479_fu_548_p1 = $signed(tmp_638_fu_541_p3);

assign tmp_480_fu_556_p2 = (p_shl2_cast_fu_537_p1 - p_shl3_cast_fu_552_p1);

assign tmp_481_fu_574_p2 = ($signed(h_cast2_cast_fu_570_p1) + $signed(tmp_570_cast_reg_772));

assign tmp_482_fu_599_p2 = (p_shl6_cast_fu_583_p3 - p_shl7_cast_fu_591_p3);

assign tmp_483_fu_605_p2 = ($signed(h_cast2_cast9_fu_566_p1) + $signed(tmp_575_cast_reg_801));

assign tmp_484_fu_634_p2 = (p_shl4_cast_fu_614_p3 - p_shl5_cast_fu_626_p3);

assign tmp_485_fu_660_p2 = (tmp_482_reg_806 + w_cast1_cast_fu_656_p1);

assign tmp_486_fu_670_p2 = (tmp_484_reg_811 + w_cast1_cast8_fu_652_p1);

assign tmp_570_cast_fu_470_p1 = $signed(tmp_477_fu_464_p2);

assign tmp_575_cast_fu_562_p1 = $signed(tmp_480_fu_556_p2);

assign tmp_584_cast_fu_665_p1 = tmp_485_fu_660_p2;

assign tmp_585_cast_fu_675_p1 = tmp_486_fu_670_p2;

assign tmp_635_fu_436_p1 = co_reg_403[0:0];

assign tmp_637_fu_526_p3 = {{tmp_636_reg_790}, {3'd0}};

assign tmp_638_fu_541_p3 = {{tmp_636_reg_790}, {1'd0}};

assign tmp_639_fu_579_p1 = tmp_481_fu_574_p2[10:0];

assign tmp_640_fu_610_p1 = tmp_483_fu_605_p2[5:0];

assign tmp_641_fu_622_p1 = tmp_483_fu_605_p2[7:0];

assign tmp_s_fu_440_p3 = {{co_reg_403}, {3'd0}};

assign w_36_fu_709_p2 = (w_reg_425 + 3'd1);

assign w_cast1_cast8_fu_652_p1 = w_reg_425;

assign w_cast1_cast_fu_656_p1 = w_reg_425;

always @ (posedge ap_clk) begin
    tmp_570_cast_reg_772[0] <= 1'b0;
    arrayNo_cast_reg_796[8:7] <= 2'b00;
    tmp_575_cast_reg_801[0] <= 1'b0;
    tmp_482_reg_806[0] <= 1'b0;
    tmp_484_reg_811[0] <= 1'b0;
end

endmodule //shuffle_96_l_p
