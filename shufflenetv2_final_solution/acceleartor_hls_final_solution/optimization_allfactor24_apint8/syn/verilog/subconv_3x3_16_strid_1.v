// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_16_strid_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        ShuffleConvs_1_Downs_23_address0,
        ShuffleConvs_1_Downs_23_ce0,
        ShuffleConvs_1_Downs_23_q0,
        ShuffleConvs_1_Downs_22_address0,
        ShuffleConvs_1_Downs_22_ce0,
        ShuffleConvs_1_Downs_22_q0,
        ShuffleConvs_1_Downs_11_address0,
        ShuffleConvs_1_Downs_11_ce0,
        ShuffleConvs_1_Downs_11_q0,
        ShuffleConvs_1_Downs_6_address0,
        ShuffleConvs_1_Downs_6_ce0,
        ShuffleConvs_1_Downs_6_q0,
        ShuffleConvs_1_Downs_5_address0,
        ShuffleConvs_1_Downs_5_ce0,
        ShuffleConvs_1_Downs_5_q0,
        ShuffleConvs_1_Downs_4_address0,
        ShuffleConvs_1_Downs_4_ce0,
        ShuffleConvs_1_Downs_4_q0,
        ShuffleConvs_1_Downs_3_address0,
        ShuffleConvs_1_Downs_3_ce0,
        ShuffleConvs_1_Downs_3_q0,
        ShuffleConvs_1_Downs_2_address0,
        ShuffleConvs_1_Downs_2_ce0,
        ShuffleConvs_1_Downs_2_q0,
        ShuffleConvs_1_Downs_1_address0,
        ShuffleConvs_1_Downs_1_ce0,
        ShuffleConvs_1_Downs_1_q0,
        ShuffleConvs_1_Downs_address0,
        ShuffleConvs_1_Downs_ce0,
        ShuffleConvs_1_Downs_q0,
        ShuffleConvs_1_Downs_21_address0,
        ShuffleConvs_1_Downs_21_ce0,
        ShuffleConvs_1_Downs_21_q0,
        ShuffleConvs_1_Downs_20_address0,
        ShuffleConvs_1_Downs_20_ce0,
        ShuffleConvs_1_Downs_20_q0,
        ShuffleConvs_1_Downs_19_address0,
        ShuffleConvs_1_Downs_19_ce0,
        ShuffleConvs_1_Downs_19_q0,
        ShuffleConvs_1_Downs_18_address0,
        ShuffleConvs_1_Downs_18_ce0,
        ShuffleConvs_1_Downs_18_q0,
        ShuffleConvs_1_Downs_17_address0,
        ShuffleConvs_1_Downs_17_ce0,
        ShuffleConvs_1_Downs_17_q0,
        ShuffleConvs_1_Downs_16_address0,
        ShuffleConvs_1_Downs_16_ce0,
        ShuffleConvs_1_Downs_16_q0,
        ShuffleConvs_1_Downs_15_address0,
        ShuffleConvs_1_Downs_15_ce0,
        ShuffleConvs_1_Downs_15_q0,
        ShuffleConvs_1_Downs_14_address0,
        ShuffleConvs_1_Downs_14_ce0,
        ShuffleConvs_1_Downs_14_q0,
        ShuffleConvs_1_Downs_13_address0,
        ShuffleConvs_1_Downs_13_ce0,
        ShuffleConvs_1_Downs_13_q0,
        ShuffleConvs_1_Downs_12_address0,
        ShuffleConvs_1_Downs_12_ce0,
        ShuffleConvs_1_Downs_12_q0,
        ShuffleConvs_1_Downs_10_address0,
        ShuffleConvs_1_Downs_10_ce0,
        ShuffleConvs_1_Downs_10_q0,
        ShuffleConvs_1_Downs_9_address0,
        ShuffleConvs_1_Downs_9_ce0,
        ShuffleConvs_1_Downs_9_q0,
        ShuffleConvs_1_Downs_8_address0,
        ShuffleConvs_1_Downs_8_ce0,
        ShuffleConvs_1_Downs_8_q0,
        ShuffleConvs_1_Downs_7_address0,
        ShuffleConvs_1_Downs_7_ce0,
        ShuffleConvs_1_Downs_7_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [5:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [9:0] ShuffleConvs_1_Downs_23_address0;
output   ShuffleConvs_1_Downs_23_ce0;
input  [7:0] ShuffleConvs_1_Downs_23_q0;
output  [9:0] ShuffleConvs_1_Downs_22_address0;
output   ShuffleConvs_1_Downs_22_ce0;
input  [7:0] ShuffleConvs_1_Downs_22_q0;
output  [9:0] ShuffleConvs_1_Downs_11_address0;
output   ShuffleConvs_1_Downs_11_ce0;
input  [7:0] ShuffleConvs_1_Downs_11_q0;
output  [9:0] ShuffleConvs_1_Downs_6_address0;
output   ShuffleConvs_1_Downs_6_ce0;
input  [7:0] ShuffleConvs_1_Downs_6_q0;
output  [9:0] ShuffleConvs_1_Downs_5_address0;
output   ShuffleConvs_1_Downs_5_ce0;
input  [7:0] ShuffleConvs_1_Downs_5_q0;
output  [9:0] ShuffleConvs_1_Downs_4_address0;
output   ShuffleConvs_1_Downs_4_ce0;
input  [7:0] ShuffleConvs_1_Downs_4_q0;
output  [9:0] ShuffleConvs_1_Downs_3_address0;
output   ShuffleConvs_1_Downs_3_ce0;
input  [7:0] ShuffleConvs_1_Downs_3_q0;
output  [9:0] ShuffleConvs_1_Downs_2_address0;
output   ShuffleConvs_1_Downs_2_ce0;
input  [7:0] ShuffleConvs_1_Downs_2_q0;
output  [9:0] ShuffleConvs_1_Downs_1_address0;
output   ShuffleConvs_1_Downs_1_ce0;
input  [7:0] ShuffleConvs_1_Downs_1_q0;
output  [9:0] ShuffleConvs_1_Downs_address0;
output   ShuffleConvs_1_Downs_ce0;
input  [7:0] ShuffleConvs_1_Downs_q0;
output  [9:0] ShuffleConvs_1_Downs_21_address0;
output   ShuffleConvs_1_Downs_21_ce0;
input  [7:0] ShuffleConvs_1_Downs_21_q0;
output  [9:0] ShuffleConvs_1_Downs_20_address0;
output   ShuffleConvs_1_Downs_20_ce0;
input  [7:0] ShuffleConvs_1_Downs_20_q0;
output  [9:0] ShuffleConvs_1_Downs_19_address0;
output   ShuffleConvs_1_Downs_19_ce0;
input  [7:0] ShuffleConvs_1_Downs_19_q0;
output  [9:0] ShuffleConvs_1_Downs_18_address0;
output   ShuffleConvs_1_Downs_18_ce0;
input  [7:0] ShuffleConvs_1_Downs_18_q0;
output  [9:0] ShuffleConvs_1_Downs_17_address0;
output   ShuffleConvs_1_Downs_17_ce0;
input  [7:0] ShuffleConvs_1_Downs_17_q0;
output  [9:0] ShuffleConvs_1_Downs_16_address0;
output   ShuffleConvs_1_Downs_16_ce0;
input  [7:0] ShuffleConvs_1_Downs_16_q0;
output  [9:0] ShuffleConvs_1_Downs_15_address0;
output   ShuffleConvs_1_Downs_15_ce0;
input  [7:0] ShuffleConvs_1_Downs_15_q0;
output  [9:0] ShuffleConvs_1_Downs_14_address0;
output   ShuffleConvs_1_Downs_14_ce0;
input  [7:0] ShuffleConvs_1_Downs_14_q0;
output  [9:0] ShuffleConvs_1_Downs_13_address0;
output   ShuffleConvs_1_Downs_13_ce0;
input  [7:0] ShuffleConvs_1_Downs_13_q0;
output  [9:0] ShuffleConvs_1_Downs_12_address0;
output   ShuffleConvs_1_Downs_12_ce0;
input  [7:0] ShuffleConvs_1_Downs_12_q0;
output  [9:0] ShuffleConvs_1_Downs_10_address0;
output   ShuffleConvs_1_Downs_10_ce0;
input  [7:0] ShuffleConvs_1_Downs_10_q0;
output  [9:0] ShuffleConvs_1_Downs_9_address0;
output   ShuffleConvs_1_Downs_9_ce0;
input  [7:0] ShuffleConvs_1_Downs_9_q0;
output  [9:0] ShuffleConvs_1_Downs_8_address0;
output   ShuffleConvs_1_Downs_8_ce0;
input  [7:0] ShuffleConvs_1_Downs_8_q0;
output  [9:0] ShuffleConvs_1_Downs_7_address0;
output   ShuffleConvs_1_Downs_7_ce0;
input  [7:0] ShuffleConvs_1_Downs_7_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg ShuffleConvs_1_Downs_23_ce0;
reg ShuffleConvs_1_Downs_22_ce0;
reg ShuffleConvs_1_Downs_11_ce0;
reg ShuffleConvs_1_Downs_6_ce0;
reg ShuffleConvs_1_Downs_5_ce0;
reg ShuffleConvs_1_Downs_4_ce0;
reg ShuffleConvs_1_Downs_3_ce0;
reg ShuffleConvs_1_Downs_2_ce0;
reg ShuffleConvs_1_Downs_1_ce0;
reg ShuffleConvs_1_Downs_ce0;
reg ShuffleConvs_1_Downs_21_ce0;
reg ShuffleConvs_1_Downs_20_ce0;
reg ShuffleConvs_1_Downs_19_ce0;
reg ShuffleConvs_1_Downs_18_ce0;
reg ShuffleConvs_1_Downs_17_ce0;
reg ShuffleConvs_1_Downs_16_ce0;
reg ShuffleConvs_1_Downs_15_ce0;
reg ShuffleConvs_1_Downs_14_ce0;
reg ShuffleConvs_1_Downs_13_ce0;
reg ShuffleConvs_1_Downs_12_ce0;
reg ShuffleConvs_1_Downs_10_ce0;
reg ShuffleConvs_1_Downs_9_ce0;
reg ShuffleConvs_1_Downs_8_ce0;
reg ShuffleConvs_1_Downs_7_ce0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [12:0] next_mul_fu_542_p2;
reg   [12:0] next_mul_reg_997;
wire    ap_CS_fsm_state2;
wire  signed [9:0] tmp_142_cast_fu_575_p1;
reg  signed [9:0] tmp_142_cast_reg_1002;
wire   [9:0] tmp_119_fu_603_p2;
reg   [9:0] tmp_119_reg_1007;
wire   [5:0] co_5_fu_615_p2;
reg   [5:0] co_5_reg_1015;
reg   [5:0] bias_V_addr_reg_1020;
wire   [0:0] exitcond8_fu_609_p2;
wire   [31:0] arrayNo_cast_fu_641_p1;
reg   [31:0] arrayNo_cast_reg_1025;
wire   [10:0] tmp_122_fu_679_p2;
reg   [10:0] tmp_122_reg_1030;
wire   [13:0] tmp_124_fu_718_p2;
reg   [13:0] tmp_124_reg_1035;
wire    ap_CS_fsm_state3;
wire   [4:0] tmp_fu_730_p3;
reg   [4:0] tmp_reg_1043;
wire   [0:0] exitcond9_fu_724_p2;
reg   [12:0] output_V_addr_reg_1048;
wire    ap_CS_fsm_state4;
wire   [4:0] tmp_s_fu_758_p3;
reg   [4:0] tmp_s_reg_1056;
wire   [0:0] exitcond1_fu_752_p2;
wire   [3:0] h_5_fu_766_p2;
wire   [9:0] tmp_127_fu_787_p2;
reg   [9:0] tmp_127_reg_1066;
wire    ap_CS_fsm_state5;
wire   [1:0] m_5_fu_799_p2;
reg   [1:0] m_5_reg_1074;
wire   [10:0] tmp_129_fu_841_p2;
reg   [10:0] tmp_129_reg_1079;
wire   [0:0] exitcond2_fu_793_p2;
wire   [3:0] w_5_fu_847_p2;
reg   [3:0] w_5_reg_1084;
wire    ap_CS_fsm_state6;
wire   [1:0] n_5_fu_873_p2;
reg   [1:0] n_5_reg_1097;
wire   [0:0] exitcond_fu_867_p2;
reg  signed [7:0] weight_V_load_reg_1222;
wire    ap_CS_fsm_state7;
wire  signed [7:0] tmp_4_fu_931_p26;
reg  signed [7:0] tmp_4_reg_1227;
wire  signed [7:0] grp_fu_991_p3;
wire    ap_CS_fsm_state8;
reg   [5:0] co_reg_450;
reg   [12:0] phi_mul_reg_461;
reg   [3:0] h_reg_472;
reg   [3:0] w_reg_484;
wire    ap_CS_fsm_state9;
reg   [7:0] p_s_reg_496;
reg   [1:0] m_reg_508;
reg   [7:0] p_09_1_reg_519;
reg   [1:0] n_reg_531;
wire   [31:0] co_cast7_fu_548_p1;
wire   [31:0] tmp_157_cast_fu_747_p1;
wire   [31:0] tmp_165_cast_fu_862_p1;
wire   [31:0] tmp_166_cast_fu_903_p1;
wire   [7:0] tmp_115_fu_557_p3;
wire   [8:0] p_shl2_cast_fu_565_p1;
wire   [8:0] co_cast7_cast_fu_553_p1;
wire   [8:0] tmp_116_fu_569_p2;
wire   [8:0] tmp_117_fu_579_p3;
wire   [6:0] tmp_118_fu_591_p3;
wire   [9:0] p_shl1_cast_fu_599_p1;
wire   [9:0] p_shl_cast_fu_587_p1;
wire   [0:0] tmp_120_fu_621_p2;
wire   [5:0] tmp_121_fu_627_p2;
wire   [5:0] arrayNo_fu_633_p3;
wire   [1:0] tmp_86_fu_645_p4;
wire   [5:0] tmp_87_fu_655_p3;
wire   [2:0] tmp_88_fu_667_p3;
wire   [10:0] p_shl3_cast_fu_663_p1;
wire   [10:0] p_shl4_cast_fu_675_p1;
wire   [9:0] h_cast6_cast_fu_685_p1;
wire   [9:0] tmp_123_fu_689_p2;
wire   [12:0] tmp_89_fu_694_p3;
wire   [10:0] tmp_90_fu_706_p3;
wire   [13:0] p_shl5_cast_fu_702_p1;
wire   [13:0] p_shl6_cast_fu_714_p1;
wire   [13:0] w_cast5_cast_fu_738_p1;
wire   [13:0] tmp_125_fu_742_p2;
wire   [9:0] m_cast4_cast_fu_772_p1;
wire   [9:0] tmp_126_fu_776_p2;
wire   [9:0] tmp_91_fu_781_p2;
wire   [1:0] tmp1_fu_805_p2;
wire  signed [4:0] tmp1_cast_fu_811_p1;
wire   [4:0] tmp_6_fu_815_p2;
wire   [10:0] tmp_6_cast_cast_fu_820_p1;
wire   [10:0] tmp_128_fu_824_p2;
wire   [10:0] tmp_92_fu_829_p2;
wire   [10:0] tmp_93_fu_835_p2;
wire   [9:0] n_cast3_cast_fu_853_p1;
wire   [9:0] tmp_130_fu_857_p2;
wire   [1:0] tmp2_fu_879_p2;
wire  signed [4:0] tmp2_cast_fu_885_p1;
wire   [4:0] tmp_8_fu_889_p2;
wire   [10:0] tmp_8_cast_cast_fu_894_p1;
wire   [10:0] tmp_131_fu_898_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

ShuffleNetV2_mux_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_g8j_x_U308(
    .din1(ShuffleConvs_1_Downs_23_q0),
    .din2(ShuffleConvs_1_Downs_22_q0),
    .din3(ShuffleConvs_1_Downs_11_q0),
    .din4(ShuffleConvs_1_Downs_6_q0),
    .din5(ShuffleConvs_1_Downs_5_q0),
    .din6(ShuffleConvs_1_Downs_4_q0),
    .din7(ShuffleConvs_1_Downs_3_q0),
    .din8(ShuffleConvs_1_Downs_2_q0),
    .din9(ShuffleConvs_1_Downs_1_q0),
    .din10(ShuffleConvs_1_Downs_q0),
    .din11(ShuffleConvs_1_Downs_21_q0),
    .din12(ShuffleConvs_1_Downs_20_q0),
    .din13(ShuffleConvs_1_Downs_19_q0),
    .din14(ShuffleConvs_1_Downs_18_q0),
    .din15(ShuffleConvs_1_Downs_17_q0),
    .din16(ShuffleConvs_1_Downs_16_q0),
    .din17(ShuffleConvs_1_Downs_15_q0),
    .din18(ShuffleConvs_1_Downs_14_q0),
    .din19(ShuffleConvs_1_Downs_13_q0),
    .din20(ShuffleConvs_1_Downs_12_q0),
    .din21(ShuffleConvs_1_Downs_10_q0),
    .din22(ShuffleConvs_1_Downs_9_q0),
    .din23(ShuffleConvs_1_Downs_8_q0),
    .din24(ShuffleConvs_1_Downs_7_q0),
    .din25(arrayNo_cast_reg_1025),
    .dout(tmp_4_fu_931_p26)
);

ShuffleNetV2_mac_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mac_cud_x_U309(
    .din0(tmp_4_reg_1227),
    .din1(weight_V_load_reg_1222),
    .din2(p_09_1_reg_519),
    .dout(grp_fu_991_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_724_p2 == 1'd1))) begin
        co_reg_450 <= co_5_reg_1015;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_450 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_609_p2 == 1'd0))) begin
        h_reg_472 <= 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_752_p2 == 1'd1))) begin
        h_reg_472 <= h_5_fu_766_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_867_p2))) begin
        m_reg_508 <= m_5_reg_1074;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_752_p2))) begin
        m_reg_508 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_793_p2))) begin
        n_reg_531 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        n_reg_531 <= n_5_reg_1097;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_793_p2))) begin
        p_09_1_reg_519 <= p_s_reg_496;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        p_09_1_reg_519 <= grp_fu_991_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_867_p2))) begin
        p_s_reg_496 <= p_09_1_reg_519;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_752_p2))) begin
        p_s_reg_496 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_724_p2 == 1'd1))) begin
        phi_mul_reg_461 <= next_mul_reg_997;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_461 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond9_fu_724_p2))) begin
        w_reg_484 <= 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        w_reg_484 <= w_5_reg_1084;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_609_p2 == 1'd0))) begin
        arrayNo_cast_reg_1025[5 : 0] <= arrayNo_cast_fu_641_p1[5 : 0];
        bias_V_addr_reg_1020 <= co_cast7_fu_548_p1;
        tmp_122_reg_1030[10 : 1] <= tmp_122_fu_679_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_5_reg_1015 <= co_5_fu_615_p2;
        next_mul_reg_997 <= next_mul_fu_542_p2;
        tmp_119_reg_1007[9 : 1] <= tmp_119_fu_603_p2[9 : 1];
        tmp_142_cast_reg_1002 <= tmp_142_cast_fu_575_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_5_reg_1074 <= m_5_fu_799_p2;
        tmp_127_reg_1066 <= tmp_127_fu_787_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_5_reg_1097 <= n_5_fu_873_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_addr_reg_1048 <= tmp_157_cast_fu_747_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_124_reg_1035[13 : 1] <= tmp_124_fu_718_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_793_p2))) begin
        tmp_129_reg_1079[10 : 1] <= tmp_129_fu_841_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_4_reg_1227 <= tmp_4_fu_931_p26;
        weight_V_load_reg_1222 <= weight_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond9_fu_724_p2))) begin
        tmp_reg_1043[4 : 1] <= tmp_fu_730_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_752_p2))) begin
        tmp_s_reg_1056[4 : 1] <= tmp_s_fu_758_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond2_fu_793_p2))) begin
        w_5_reg_1084 <= w_5_fu_847_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_10_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_11_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_12_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_13_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_14_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_15_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_16_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_17_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_18_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_19_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_1_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_20_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_21_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_22_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_23_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_2_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_3_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_4_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_5_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_6_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_7_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_8_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_9_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_609_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_609_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_609_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_724_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_752_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_793_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_867_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ShuffleConvs_1_Downs_10_address0 = tmp_166_cast_fu_903_p1;

assign ShuffleConvs_1_Downs_11_address0 = tmp_166_cast_fu_903_p1;

assign ShuffleConvs_1_Downs_12_address0 = tmp_166_cast_fu_903_p1;

assign ShuffleConvs_1_Downs_13_address0 = tmp_166_cast_fu_903_p1;

assign ShuffleConvs_1_Downs_14_address0 = tmp_166_cast_fu_903_p1;

assign ShuffleConvs_1_Downs_15_address0 = tmp_166_cast_fu_903_p1;

assign ShuffleConvs_1_Downs_16_address0 = tmp_166_cast_fu_903_p1;

assign ShuffleConvs_1_Downs_17_address0 = tmp_166_cast_fu_903_p1;

assign ShuffleConvs_1_Downs_18_address0 = tmp_166_cast_fu_903_p1;

assign ShuffleConvs_1_Downs_19_address0 = tmp_166_cast_fu_903_p1;

assign ShuffleConvs_1_Downs_1_address0 = tmp_166_cast_fu_903_p1;

assign ShuffleConvs_1_Downs_20_address0 = tmp_166_cast_fu_903_p1;

assign ShuffleConvs_1_Downs_21_address0 = tmp_166_cast_fu_903_p1;

assign ShuffleConvs_1_Downs_22_address0 = tmp_166_cast_fu_903_p1;

assign ShuffleConvs_1_Downs_23_address0 = tmp_166_cast_fu_903_p1;

assign ShuffleConvs_1_Downs_2_address0 = tmp_166_cast_fu_903_p1;

assign ShuffleConvs_1_Downs_3_address0 = tmp_166_cast_fu_903_p1;

assign ShuffleConvs_1_Downs_4_address0 = tmp_166_cast_fu_903_p1;

assign ShuffleConvs_1_Downs_5_address0 = tmp_166_cast_fu_903_p1;

assign ShuffleConvs_1_Downs_6_address0 = tmp_166_cast_fu_903_p1;

assign ShuffleConvs_1_Downs_7_address0 = tmp_166_cast_fu_903_p1;

assign ShuffleConvs_1_Downs_8_address0 = tmp_166_cast_fu_903_p1;

assign ShuffleConvs_1_Downs_9_address0 = tmp_166_cast_fu_903_p1;

assign ShuffleConvs_1_Downs_address0 = tmp_166_cast_fu_903_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign arrayNo_cast_fu_641_p1 = arrayNo_fu_633_p3;

assign arrayNo_fu_633_p3 = ((tmp_120_fu_621_p2[0:0] === 1'b1) ? co_reg_450 : tmp_121_fu_627_p2);

assign bias_V_address0 = bias_V_addr_reg_1020;

assign co_5_fu_615_p2 = (co_reg_450 + 6'd1);

assign co_cast7_cast_fu_553_p1 = co_reg_450;

assign co_cast7_fu_548_p1 = co_reg_450;

assign exitcond1_fu_752_p2 = ((w_reg_484 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond2_fu_793_p2 = ((m_reg_508 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond8_fu_609_p2 = ((co_reg_450 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond9_fu_724_p2 = ((h_reg_472 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_fu_867_p2 = ((n_reg_531 == 2'd3) ? 1'b1 : 1'b0);

assign h_5_fu_766_p2 = (h_reg_472 + 4'd1);

assign h_cast6_cast_fu_685_p1 = h_reg_472;

assign m_5_fu_799_p2 = (2'd1 + m_reg_508);

assign m_cast4_cast_fu_772_p1 = m_reg_508;

assign n_5_fu_873_p2 = (n_reg_531 + 2'd1);

assign n_cast3_cast_fu_853_p1 = n_reg_531;

assign next_mul_fu_542_p2 = (phi_mul_reg_461 + 13'd86);

assign output_V_address0 = output_V_addr_reg_1048;

assign output_V_d0 = (bias_V_q0 + p_s_reg_496);

assign p_shl1_cast_fu_599_p1 = tmp_118_fu_591_p3;

assign p_shl2_cast_fu_565_p1 = tmp_115_fu_557_p3;

assign p_shl3_cast_fu_663_p1 = tmp_87_fu_655_p3;

assign p_shl4_cast_fu_675_p1 = tmp_88_fu_667_p3;

assign p_shl5_cast_fu_702_p1 = tmp_89_fu_694_p3;

assign p_shl6_cast_fu_714_p1 = tmp_90_fu_706_p3;

assign p_shl_cast_fu_587_p1 = tmp_117_fu_579_p3;

assign tmp1_cast_fu_811_p1 = $signed(tmp1_fu_805_p2);

assign tmp1_fu_805_p2 = (m_reg_508 ^ 2'd2);

assign tmp2_cast_fu_885_p1 = $signed(tmp2_fu_879_p2);

assign tmp2_fu_879_p2 = (n_reg_531 ^ 2'd2);

assign tmp_115_fu_557_p3 = {{co_reg_450}, {2'd0}};

assign tmp_116_fu_569_p2 = (p_shl2_cast_fu_565_p1 - co_cast7_cast_fu_553_p1);

assign tmp_117_fu_579_p3 = {{co_reg_450}, {3'd0}};

assign tmp_118_fu_591_p3 = {{co_reg_450}, {1'd0}};

assign tmp_119_fu_603_p2 = (p_shl1_cast_fu_599_p1 + p_shl_cast_fu_587_p1);

assign tmp_120_fu_621_p2 = ((co_reg_450 < 6'd24) ? 1'b1 : 1'b0);

assign tmp_121_fu_627_p2 = ($signed(co_reg_450) + $signed(6'd40));

assign tmp_122_fu_679_p2 = (p_shl3_cast_fu_663_p1 + p_shl4_cast_fu_675_p1);

assign tmp_123_fu_689_p2 = (h_cast6_cast_fu_685_p1 + tmp_119_reg_1007);

assign tmp_124_fu_718_p2 = (p_shl5_cast_fu_702_p1 + p_shl6_cast_fu_714_p1);

assign tmp_125_fu_742_p2 = (tmp_124_reg_1035 + w_cast5_cast_fu_738_p1);

assign tmp_126_fu_776_p2 = ($signed(m_cast4_cast_fu_772_p1) + $signed(tmp_142_cast_reg_1002));

assign tmp_127_fu_787_p2 = (tmp_91_fu_781_p2 - tmp_126_fu_776_p2);

assign tmp_128_fu_824_p2 = (tmp_6_cast_cast_fu_820_p1 + tmp_122_reg_1030);

assign tmp_129_fu_841_p2 = (tmp_92_fu_829_p2 + tmp_93_fu_835_p2);

assign tmp_130_fu_857_p2 = (tmp_127_reg_1066 + n_cast3_cast_fu_853_p1);

assign tmp_131_fu_898_p2 = (tmp_129_reg_1079 + tmp_8_cast_cast_fu_894_p1);

assign tmp_142_cast_fu_575_p1 = $signed(tmp_116_fu_569_p2);

assign tmp_157_cast_fu_747_p1 = tmp_125_fu_742_p2;

assign tmp_165_cast_fu_862_p1 = tmp_130_fu_857_p2;

assign tmp_166_cast_fu_903_p1 = tmp_131_fu_898_p2;

assign tmp_6_cast_cast_fu_820_p1 = tmp_6_fu_815_p2;

assign tmp_6_fu_815_p2 = ($signed(tmp1_cast_fu_811_p1) + $signed(tmp_reg_1043));

assign tmp_86_fu_645_p4 = {{phi_mul_reg_461[12:11]}};

assign tmp_87_fu_655_p3 = {{tmp_86_fu_645_p4}, {4'd0}};

assign tmp_88_fu_667_p3 = {{tmp_86_fu_645_p4}, {1'd0}};

assign tmp_89_fu_694_p3 = {{tmp_123_fu_689_p2}, {3'd0}};

assign tmp_8_cast_cast_fu_894_p1 = tmp_8_fu_889_p2;

assign tmp_8_fu_889_p2 = ($signed(tmp_s_reg_1056) + $signed(tmp2_cast_fu_885_p1));

assign tmp_90_fu_706_p3 = {{tmp_123_fu_689_p2}, {1'd0}};

assign tmp_91_fu_781_p2 = tmp_126_fu_776_p2 << 10'd2;

assign tmp_92_fu_829_p2 = tmp_128_fu_824_p2 << 11'd4;

assign tmp_93_fu_835_p2 = tmp_128_fu_824_p2 << 11'd1;

assign tmp_fu_730_p3 = {{h_reg_472}, {1'd0}};

assign tmp_s_fu_758_p3 = {{w_reg_484}, {1'd0}};

assign w_5_fu_847_p2 = (w_reg_484 + 4'd1);

assign w_cast5_cast_fu_738_p1 = w_reg_484;

assign weight_V_address0 = tmp_165_cast_fu_862_p1;

always @ (posedge ap_clk) begin
    tmp_119_reg_1007[0] <= 1'b0;
    arrayNo_cast_reg_1025[31:6] <= 26'b00000000000000000000000000;
    tmp_122_reg_1030[0] <= 1'b0;
    tmp_124_reg_1035[0] <= 1'b0;
    tmp_reg_1043[0] <= 1'b0;
    tmp_s_reg_1056[0] <= 1'b0;
    tmp_129_reg_1079[0] <= 1'b0;
end

endmodule //subconv_3x3_16_strid_1
