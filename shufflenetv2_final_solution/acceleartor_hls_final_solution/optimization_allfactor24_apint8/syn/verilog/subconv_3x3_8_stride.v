// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_8_stride (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        ShuffleConvs_2_Downs_23_address0,
        ShuffleConvs_2_Downs_23_ce0,
        ShuffleConvs_2_Downs_23_q0,
        ShuffleConvs_2_Downs_22_address0,
        ShuffleConvs_2_Downs_22_ce0,
        ShuffleConvs_2_Downs_22_q0,
        ShuffleConvs_2_Downs_11_address0,
        ShuffleConvs_2_Downs_11_ce0,
        ShuffleConvs_2_Downs_11_q0,
        ShuffleConvs_2_Downs_6_address0,
        ShuffleConvs_2_Downs_6_ce0,
        ShuffleConvs_2_Downs_6_q0,
        ShuffleConvs_2_Downs_5_address0,
        ShuffleConvs_2_Downs_5_ce0,
        ShuffleConvs_2_Downs_5_q0,
        ShuffleConvs_2_Downs_4_address0,
        ShuffleConvs_2_Downs_4_ce0,
        ShuffleConvs_2_Downs_4_q0,
        ShuffleConvs_2_Downs_3_address0,
        ShuffleConvs_2_Downs_3_ce0,
        ShuffleConvs_2_Downs_3_q0,
        ShuffleConvs_2_Downs_2_address0,
        ShuffleConvs_2_Downs_2_ce0,
        ShuffleConvs_2_Downs_2_q0,
        ShuffleConvs_2_Downs_1_address0,
        ShuffleConvs_2_Downs_1_ce0,
        ShuffleConvs_2_Downs_1_q0,
        ShuffleConvs_2_Downs_address0,
        ShuffleConvs_2_Downs_ce0,
        ShuffleConvs_2_Downs_q0,
        ShuffleConvs_2_Downs_21_address0,
        ShuffleConvs_2_Downs_21_ce0,
        ShuffleConvs_2_Downs_21_q0,
        ShuffleConvs_2_Downs_20_address0,
        ShuffleConvs_2_Downs_20_ce0,
        ShuffleConvs_2_Downs_20_q0,
        ShuffleConvs_2_Downs_19_address0,
        ShuffleConvs_2_Downs_19_ce0,
        ShuffleConvs_2_Downs_19_q0,
        ShuffleConvs_2_Downs_18_address0,
        ShuffleConvs_2_Downs_18_ce0,
        ShuffleConvs_2_Downs_18_q0,
        ShuffleConvs_2_Downs_17_address0,
        ShuffleConvs_2_Downs_17_ce0,
        ShuffleConvs_2_Downs_17_q0,
        ShuffleConvs_2_Downs_16_address0,
        ShuffleConvs_2_Downs_16_ce0,
        ShuffleConvs_2_Downs_16_q0,
        ShuffleConvs_2_Downs_15_address0,
        ShuffleConvs_2_Downs_15_ce0,
        ShuffleConvs_2_Downs_15_q0,
        ShuffleConvs_2_Downs_14_address0,
        ShuffleConvs_2_Downs_14_ce0,
        ShuffleConvs_2_Downs_14_q0,
        ShuffleConvs_2_Downs_13_address0,
        ShuffleConvs_2_Downs_13_ce0,
        ShuffleConvs_2_Downs_13_q0,
        ShuffleConvs_2_Downs_12_address0,
        ShuffleConvs_2_Downs_12_ce0,
        ShuffleConvs_2_Downs_12_q0,
        ShuffleConvs_2_Downs_10_address0,
        ShuffleConvs_2_Downs_10_ce0,
        ShuffleConvs_2_Downs_10_q0,
        ShuffleConvs_2_Downs_9_address0,
        ShuffleConvs_2_Downs_9_ce0,
        ShuffleConvs_2_Downs_9_q0,
        ShuffleConvs_2_Downs_8_address0,
        ShuffleConvs_2_Downs_8_ce0,
        ShuffleConvs_2_Downs_8_q0,
        ShuffleConvs_2_Downs_7_address0,
        ShuffleConvs_2_Downs_7_ce0,
        ShuffleConvs_2_Downs_7_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [6:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [11:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [8:0] ShuffleConvs_2_Downs_23_address0;
output   ShuffleConvs_2_Downs_23_ce0;
input  [7:0] ShuffleConvs_2_Downs_23_q0;
output  [8:0] ShuffleConvs_2_Downs_22_address0;
output   ShuffleConvs_2_Downs_22_ce0;
input  [7:0] ShuffleConvs_2_Downs_22_q0;
output  [8:0] ShuffleConvs_2_Downs_11_address0;
output   ShuffleConvs_2_Downs_11_ce0;
input  [7:0] ShuffleConvs_2_Downs_11_q0;
output  [8:0] ShuffleConvs_2_Downs_6_address0;
output   ShuffleConvs_2_Downs_6_ce0;
input  [7:0] ShuffleConvs_2_Downs_6_q0;
output  [8:0] ShuffleConvs_2_Downs_5_address0;
output   ShuffleConvs_2_Downs_5_ce0;
input  [7:0] ShuffleConvs_2_Downs_5_q0;
output  [8:0] ShuffleConvs_2_Downs_4_address0;
output   ShuffleConvs_2_Downs_4_ce0;
input  [7:0] ShuffleConvs_2_Downs_4_q0;
output  [8:0] ShuffleConvs_2_Downs_3_address0;
output   ShuffleConvs_2_Downs_3_ce0;
input  [7:0] ShuffleConvs_2_Downs_3_q0;
output  [8:0] ShuffleConvs_2_Downs_2_address0;
output   ShuffleConvs_2_Downs_2_ce0;
input  [7:0] ShuffleConvs_2_Downs_2_q0;
output  [8:0] ShuffleConvs_2_Downs_1_address0;
output   ShuffleConvs_2_Downs_1_ce0;
input  [7:0] ShuffleConvs_2_Downs_1_q0;
output  [8:0] ShuffleConvs_2_Downs_address0;
output   ShuffleConvs_2_Downs_ce0;
input  [7:0] ShuffleConvs_2_Downs_q0;
output  [8:0] ShuffleConvs_2_Downs_21_address0;
output   ShuffleConvs_2_Downs_21_ce0;
input  [7:0] ShuffleConvs_2_Downs_21_q0;
output  [8:0] ShuffleConvs_2_Downs_20_address0;
output   ShuffleConvs_2_Downs_20_ce0;
input  [7:0] ShuffleConvs_2_Downs_20_q0;
output  [8:0] ShuffleConvs_2_Downs_19_address0;
output   ShuffleConvs_2_Downs_19_ce0;
input  [7:0] ShuffleConvs_2_Downs_19_q0;
output  [8:0] ShuffleConvs_2_Downs_18_address0;
output   ShuffleConvs_2_Downs_18_ce0;
input  [7:0] ShuffleConvs_2_Downs_18_q0;
output  [8:0] ShuffleConvs_2_Downs_17_address0;
output   ShuffleConvs_2_Downs_17_ce0;
input  [7:0] ShuffleConvs_2_Downs_17_q0;
output  [8:0] ShuffleConvs_2_Downs_16_address0;
output   ShuffleConvs_2_Downs_16_ce0;
input  [7:0] ShuffleConvs_2_Downs_16_q0;
output  [8:0] ShuffleConvs_2_Downs_15_address0;
output   ShuffleConvs_2_Downs_15_ce0;
input  [7:0] ShuffleConvs_2_Downs_15_q0;
output  [8:0] ShuffleConvs_2_Downs_14_address0;
output   ShuffleConvs_2_Downs_14_ce0;
input  [7:0] ShuffleConvs_2_Downs_14_q0;
output  [8:0] ShuffleConvs_2_Downs_13_address0;
output   ShuffleConvs_2_Downs_13_ce0;
input  [7:0] ShuffleConvs_2_Downs_13_q0;
output  [8:0] ShuffleConvs_2_Downs_12_address0;
output   ShuffleConvs_2_Downs_12_ce0;
input  [7:0] ShuffleConvs_2_Downs_12_q0;
output  [8:0] ShuffleConvs_2_Downs_10_address0;
output   ShuffleConvs_2_Downs_10_ce0;
input  [7:0] ShuffleConvs_2_Downs_10_q0;
output  [8:0] ShuffleConvs_2_Downs_9_address0;
output   ShuffleConvs_2_Downs_9_ce0;
input  [7:0] ShuffleConvs_2_Downs_9_q0;
output  [8:0] ShuffleConvs_2_Downs_8_address0;
output   ShuffleConvs_2_Downs_8_ce0;
input  [7:0] ShuffleConvs_2_Downs_8_q0;
output  [8:0] ShuffleConvs_2_Downs_7_address0;
output   ShuffleConvs_2_Downs_7_ce0;
input  [7:0] ShuffleConvs_2_Downs_7_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg ShuffleConvs_2_Downs_23_ce0;
reg ShuffleConvs_2_Downs_22_ce0;
reg ShuffleConvs_2_Downs_11_ce0;
reg ShuffleConvs_2_Downs_6_ce0;
reg ShuffleConvs_2_Downs_5_ce0;
reg ShuffleConvs_2_Downs_4_ce0;
reg ShuffleConvs_2_Downs_3_ce0;
reg ShuffleConvs_2_Downs_2_ce0;
reg ShuffleConvs_2_Downs_1_ce0;
reg ShuffleConvs_2_Downs_ce0;
reg ShuffleConvs_2_Downs_21_ce0;
reg ShuffleConvs_2_Downs_20_ce0;
reg ShuffleConvs_2_Downs_19_ce0;
reg ShuffleConvs_2_Downs_18_ce0;
reg ShuffleConvs_2_Downs_17_ce0;
reg ShuffleConvs_2_Downs_16_ce0;
reg ShuffleConvs_2_Downs_15_ce0;
reg ShuffleConvs_2_Downs_14_ce0;
reg ShuffleConvs_2_Downs_13_ce0;
reg ShuffleConvs_2_Downs_12_ce0;
reg ShuffleConvs_2_Downs_10_ce0;
reg ShuffleConvs_2_Downs_9_ce0;
reg ShuffleConvs_2_Downs_8_ce0;
reg ShuffleConvs_2_Downs_7_ce0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [14:0] next_mul_fu_546_p2;
reg   [14:0] next_mul_reg_1013;
wire    ap_CS_fsm_state2;
wire  signed [10:0] tmp_28_cast_fu_579_p1;
reg  signed [10:0] tmp_28_cast_reg_1018;
wire  signed [11:0] tmp_31_cast_fu_613_p1;
reg  signed [11:0] tmp_31_cast_reg_1023;
wire   [6:0] co_1_fu_623_p2;
reg   [6:0] co_1_reg_1031;
reg   [6:0] bias_V_addr_reg_1036;
wire   [0:0] exitcond1_fu_617_p2;
wire   [31:0] arrayNo_cast_fu_629_p1;
reg   [31:0] arrayNo_cast_reg_1041;
wire   [10:0] tmp_27_fu_667_p2;
reg   [10:0] tmp_27_reg_1046;
wire   [12:0] tmp_30_fu_702_p2;
reg   [12:0] tmp_30_reg_1051;
wire    ap_CS_fsm_state3;
wire   [3:0] tmp_fu_714_p3;
reg   [3:0] tmp_reg_1059;
wire   [0:0] exitcond2_fu_708_p2;
wire   [6:0] idx_urem_fu_734_p3;
reg   [11:0] output_V_addr_reg_1069;
wire    ap_CS_fsm_state4;
wire   [3:0] tmp_2_fu_762_p3;
reg   [3:0] tmp_2_reg_1077;
wire   [0:0] exitcond3_fu_756_p2;
wire   [2:0] h_1_fu_770_p2;
wire   [10:0] tmp_35_fu_791_p2;
reg   [10:0] tmp_35_reg_1087;
wire    ap_CS_fsm_state5;
wire   [1:0] m_1_fu_803_p2;
reg   [1:0] m_1_reg_1095;
wire   [9:0] tmp_39_fu_857_p2;
reg   [9:0] tmp_39_reg_1100;
wire   [0:0] exitcond4_fu_797_p2;
wire   [2:0] w_1_fu_863_p2;
reg   [2:0] w_1_reg_1105;
wire    ap_CS_fsm_state6;
wire   [1:0] n_1_fu_889_p2;
reg   [1:0] n_1_reg_1118;
wire   [0:0] exitcond_fu_883_p2;
reg  signed [7:0] weight_V_load_reg_1243;
wire    ap_CS_fsm_state7;
wire  signed [7:0] tmp_1_fu_947_p26;
reg  signed [7:0] tmp_1_reg_1248;
wire  signed [7:0] grp_fu_1007_p3;
wire    ap_CS_fsm_state8;
reg   [6:0] co_reg_442;
reg   [14:0] phi_mul_reg_453;
reg   [6:0] phi_urem_reg_464;
reg   [2:0] h_reg_476;
reg   [2:0] w_reg_488;
wire    ap_CS_fsm_state9;
reg   [7:0] p_s_reg_500;
reg   [1:0] m_reg_512;
reg   [7:0] p_09_1_reg_523;
reg   [1:0] n_reg_535;
wire   [31:0] co_cast7_fu_552_p1;
wire   [31:0] tmp_41_cast_fu_751_p1;
wire   [31:0] tmp_49_cast_fu_878_p1;
wire   [31:0] tmp_50_cast_fu_919_p1;
wire   [8:0] tmp_s_fu_561_p3;
wire   [9:0] p_shl2_cast_fu_569_p1;
wire   [9:0] co_cast7_cast_fu_557_p1;
wire   [9:0] tmp_23_fu_573_p2;
wire   [9:0] tmp_24_fu_583_p3;
wire   [7:0] tmp_25_fu_595_p3;
wire   [10:0] p_shl_cast_fu_591_p1;
wire   [10:0] p_shl1_cast_fu_603_p1;
wire   [10:0] tmp_26_fu_607_p2;
wire   [2:0] tmp_20_fu_633_p4;
wire   [5:0] tmp_21_fu_643_p3;
wire   [3:0] tmp_22_fu_655_p3;
wire   [10:0] p_shl3_cast_fu_651_p1;
wire   [10:0] p_shl4_cast_fu_663_p1;
wire   [11:0] h_cast6_cast_fu_673_p1;
wire   [11:0] tmp_28_fu_677_p2;
wire   [9:0] tmp_29_fu_682_p1;
wire   [12:0] p_shl5_cast_fu_686_p3;
wire   [12:0] p_shl6_cast_fu_694_p3;
wire   [6:0] next_urem_fu_722_p2;
wire   [0:0] tmp_31_fu_728_p2;
wire   [12:0] w_cast5_cast_fu_742_p1;
wire   [12:0] tmp_32_fu_746_p2;
wire   [10:0] m_cast4_cast_fu_776_p1;
wire   [10:0] tmp_33_fu_780_p2;
wire   [10:0] tmp_34_fu_785_p2;
wire   [1:0] tmp1_fu_809_p2;
wire  signed [3:0] tmp1_cast_fu_815_p1;
wire   [3:0] tmp_5_fu_819_p2;
wire   [10:0] tmp_5_cast_cast_fu_824_p1;
wire   [10:0] tmp_36_fu_828_p2;
wire   [6:0] tmp_37_fu_833_p1;
wire   [8:0] tmp_38_fu_845_p1;
wire   [9:0] p_shl8_cast_fu_837_p3;
wire   [9:0] p_shl9_cast_fu_849_p3;
wire   [10:0] n_cast3_cast_fu_869_p1;
wire   [10:0] tmp_40_fu_873_p2;
wire   [1:0] tmp2_fu_895_p2;
wire  signed [3:0] tmp2_cast_fu_901_p1;
wire   [3:0] tmp_8_fu_905_p2;
wire   [9:0] tmp_8_cast_cast_fu_910_p1;
wire   [9:0] tmp_41_fu_914_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

ShuffleNetV2_mux_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_g8j_x_U559(
    .din1(ShuffleConvs_2_Downs_23_q0),
    .din2(ShuffleConvs_2_Downs_22_q0),
    .din3(ShuffleConvs_2_Downs_11_q0),
    .din4(ShuffleConvs_2_Downs_6_q0),
    .din5(ShuffleConvs_2_Downs_5_q0),
    .din6(ShuffleConvs_2_Downs_4_q0),
    .din7(ShuffleConvs_2_Downs_3_q0),
    .din8(ShuffleConvs_2_Downs_2_q0),
    .din9(ShuffleConvs_2_Downs_1_q0),
    .din10(ShuffleConvs_2_Downs_q0),
    .din11(ShuffleConvs_2_Downs_21_q0),
    .din12(ShuffleConvs_2_Downs_20_q0),
    .din13(ShuffleConvs_2_Downs_19_q0),
    .din14(ShuffleConvs_2_Downs_18_q0),
    .din15(ShuffleConvs_2_Downs_17_q0),
    .din16(ShuffleConvs_2_Downs_16_q0),
    .din17(ShuffleConvs_2_Downs_15_q0),
    .din18(ShuffleConvs_2_Downs_14_q0),
    .din19(ShuffleConvs_2_Downs_13_q0),
    .din20(ShuffleConvs_2_Downs_12_q0),
    .din21(ShuffleConvs_2_Downs_10_q0),
    .din22(ShuffleConvs_2_Downs_9_q0),
    .din23(ShuffleConvs_2_Downs_8_q0),
    .din24(ShuffleConvs_2_Downs_7_q0),
    .din25(arrayNo_cast_reg_1041),
    .dout(tmp_1_fu_947_p26)
);

ShuffleNetV2_mac_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mac_cud_x_U560(
    .din0(tmp_1_reg_1248),
    .din1(weight_V_load_reg_1243),
    .din2(p_09_1_reg_523),
    .dout(grp_fu_1007_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_708_p2 == 1'd1))) begin
        co_reg_442 <= co_1_reg_1031;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_442 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_617_p2 == 1'd0))) begin
        h_reg_476 <= 3'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond3_fu_756_p2))) begin
        h_reg_476 <= h_1_fu_770_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_883_p2))) begin
        m_reg_512 <= m_1_reg_1095;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_756_p2))) begin
        m_reg_512 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_797_p2))) begin
        n_reg_535 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        n_reg_535 <= n_1_reg_1118;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_797_p2))) begin
        p_09_1_reg_523 <= p_s_reg_500;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        p_09_1_reg_523 <= grp_fu_1007_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_883_p2))) begin
        p_s_reg_500 <= p_09_1_reg_523;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_756_p2))) begin
        p_s_reg_500 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_708_p2 == 1'd1))) begin
        phi_mul_reg_453 <= next_mul_reg_1013;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_453 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_708_p2 == 1'd1))) begin
        phi_urem_reg_464 <= idx_urem_fu_734_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_urem_reg_464 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_708_p2))) begin
        w_reg_488 <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        w_reg_488 <= w_1_reg_1105;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_617_p2 == 1'd0))) begin
        arrayNo_cast_reg_1041[6 : 0] <= arrayNo_cast_fu_629_p1[6 : 0];
        bias_V_addr_reg_1036 <= co_cast7_fu_552_p1;
        tmp_27_reg_1046[10 : 1] <= tmp_27_fu_667_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_1_reg_1031 <= co_1_fu_623_p2;
        next_mul_reg_1013 <= next_mul_fu_546_p2;
        tmp_28_cast_reg_1018 <= tmp_28_cast_fu_579_p1;
        tmp_31_cast_reg_1023[11 : 1] <= tmp_31_cast_fu_613_p1[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_1_reg_1095 <= m_1_fu_803_p2;
        tmp_35_reg_1087 <= tmp_35_fu_791_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_1_reg_1118 <= n_1_fu_889_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_addr_reg_1069 <= tmp_41_cast_fu_751_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_1_reg_1248 <= tmp_1_fu_947_p26;
        weight_V_load_reg_1243 <= weight_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_756_p2))) begin
        tmp_2_reg_1077[3 : 1] <= tmp_2_fu_762_p3[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_30_reg_1051[12 : 1] <= tmp_30_fu_702_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_797_p2))) begin
        tmp_39_reg_1100[9 : 1] <= tmp_39_fu_857_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_708_p2))) begin
        tmp_reg_1059[3 : 1] <= tmp_fu_714_p3[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond4_fu_797_p2))) begin
        w_1_reg_1105 <= w_1_fu_863_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_10_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_11_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_12_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_13_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_14_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_15_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_16_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_17_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_18_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_19_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_1_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_20_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_21_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_22_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_23_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_2_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_3_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_4_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_5_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_6_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_7_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_8_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_9_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_617_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_617_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_617_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_708_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond3_fu_756_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_797_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_883_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ShuffleConvs_2_Downs_10_address0 = tmp_50_cast_fu_919_p1;

assign ShuffleConvs_2_Downs_11_address0 = tmp_50_cast_fu_919_p1;

assign ShuffleConvs_2_Downs_12_address0 = tmp_50_cast_fu_919_p1;

assign ShuffleConvs_2_Downs_13_address0 = tmp_50_cast_fu_919_p1;

assign ShuffleConvs_2_Downs_14_address0 = tmp_50_cast_fu_919_p1;

assign ShuffleConvs_2_Downs_15_address0 = tmp_50_cast_fu_919_p1;

assign ShuffleConvs_2_Downs_16_address0 = tmp_50_cast_fu_919_p1;

assign ShuffleConvs_2_Downs_17_address0 = tmp_50_cast_fu_919_p1;

assign ShuffleConvs_2_Downs_18_address0 = tmp_50_cast_fu_919_p1;

assign ShuffleConvs_2_Downs_19_address0 = tmp_50_cast_fu_919_p1;

assign ShuffleConvs_2_Downs_1_address0 = tmp_50_cast_fu_919_p1;

assign ShuffleConvs_2_Downs_20_address0 = tmp_50_cast_fu_919_p1;

assign ShuffleConvs_2_Downs_21_address0 = tmp_50_cast_fu_919_p1;

assign ShuffleConvs_2_Downs_22_address0 = tmp_50_cast_fu_919_p1;

assign ShuffleConvs_2_Downs_23_address0 = tmp_50_cast_fu_919_p1;

assign ShuffleConvs_2_Downs_2_address0 = tmp_50_cast_fu_919_p1;

assign ShuffleConvs_2_Downs_3_address0 = tmp_50_cast_fu_919_p1;

assign ShuffleConvs_2_Downs_4_address0 = tmp_50_cast_fu_919_p1;

assign ShuffleConvs_2_Downs_5_address0 = tmp_50_cast_fu_919_p1;

assign ShuffleConvs_2_Downs_6_address0 = tmp_50_cast_fu_919_p1;

assign ShuffleConvs_2_Downs_7_address0 = tmp_50_cast_fu_919_p1;

assign ShuffleConvs_2_Downs_8_address0 = tmp_50_cast_fu_919_p1;

assign ShuffleConvs_2_Downs_9_address0 = tmp_50_cast_fu_919_p1;

assign ShuffleConvs_2_Downs_address0 = tmp_50_cast_fu_919_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign arrayNo_cast_fu_629_p1 = phi_urem_reg_464;

assign bias_V_address0 = bias_V_addr_reg_1036;

assign co_1_fu_623_p2 = (co_reg_442 + 7'd1);

assign co_cast7_cast_fu_557_p1 = co_reg_442;

assign co_cast7_fu_552_p1 = co_reg_442;

assign exitcond1_fu_617_p2 = ((co_reg_442 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond2_fu_708_p2 = ((h_reg_476 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond3_fu_756_p2 = ((w_reg_488 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond4_fu_797_p2 = ((m_reg_512 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_883_p2 = ((n_reg_535 == 2'd3) ? 1'b1 : 1'b0);

assign h_1_fu_770_p2 = (h_reg_476 + 3'd1);

assign h_cast6_cast_fu_673_p1 = h_reg_476;

assign idx_urem_fu_734_p3 = ((tmp_31_fu_728_p2[0:0] === 1'b1) ? next_urem_fu_722_p2 : 7'd0);

assign m_1_fu_803_p2 = (2'd1 + m_reg_512);

assign m_cast4_cast_fu_776_p1 = m_reg_512;

assign n_1_fu_889_p2 = (n_reg_535 + 2'd1);

assign n_cast3_cast_fu_869_p1 = n_reg_535;

assign next_mul_fu_546_p2 = (phi_mul_reg_453 + 15'd171);

assign next_urem_fu_722_p2 = (phi_urem_reg_464 + 7'd1);

assign output_V_address0 = output_V_addr_reg_1069;

assign output_V_d0 = (bias_V_q0 + p_s_reg_500);

assign p_shl1_cast_fu_603_p1 = tmp_25_fu_595_p3;

assign p_shl2_cast_fu_569_p1 = tmp_s_fu_561_p3;

assign p_shl3_cast_fu_651_p1 = tmp_21_fu_643_p3;

assign p_shl4_cast_fu_663_p1 = tmp_22_fu_655_p3;

assign p_shl5_cast_fu_686_p3 = {{tmp_29_fu_682_p1}, {3'd0}};

assign p_shl6_cast_fu_694_p3 = {{tmp_28_fu_677_p2}, {1'd0}};

assign p_shl8_cast_fu_837_p3 = {{tmp_37_fu_833_p1}, {3'd0}};

assign p_shl9_cast_fu_849_p3 = {{tmp_38_fu_845_p1}, {1'd0}};

assign p_shl_cast_fu_591_p1 = tmp_24_fu_583_p3;

assign tmp1_cast_fu_815_p1 = $signed(tmp1_fu_809_p2);

assign tmp1_fu_809_p2 = (m_reg_512 ^ 2'd2);

assign tmp2_cast_fu_901_p1 = $signed(tmp2_fu_895_p2);

assign tmp2_fu_895_p2 = (n_reg_535 ^ 2'd2);

assign tmp_20_fu_633_p4 = {{phi_mul_reg_453[14:12]}};

assign tmp_21_fu_643_p3 = {{tmp_20_fu_633_p4}, {3'd0}};

assign tmp_22_fu_655_p3 = {{tmp_20_fu_633_p4}, {1'd0}};

assign tmp_23_fu_573_p2 = (p_shl2_cast_fu_569_p1 - co_cast7_cast_fu_557_p1);

assign tmp_24_fu_583_p3 = {{co_reg_442}, {3'd0}};

assign tmp_25_fu_595_p3 = {{co_reg_442}, {1'd0}};

assign tmp_26_fu_607_p2 = (p_shl_cast_fu_591_p1 - p_shl1_cast_fu_603_p1);

assign tmp_27_fu_667_p2 = (p_shl3_cast_fu_651_p1 + p_shl4_cast_fu_663_p1);

assign tmp_28_cast_fu_579_p1 = $signed(tmp_23_fu_573_p2);

assign tmp_28_fu_677_p2 = ($signed(h_cast6_cast_fu_673_p1) + $signed(tmp_31_cast_reg_1023));

assign tmp_29_fu_682_p1 = tmp_28_fu_677_p2[9:0];

assign tmp_2_fu_762_p3 = {{w_reg_488}, {1'd0}};

assign tmp_30_fu_702_p2 = (p_shl5_cast_fu_686_p3 - p_shl6_cast_fu_694_p3);

assign tmp_31_cast_fu_613_p1 = $signed(tmp_26_fu_607_p2);

assign tmp_31_fu_728_p2 = ((next_urem_fu_722_p2 < 7'd24) ? 1'b1 : 1'b0);

assign tmp_32_fu_746_p2 = (tmp_30_reg_1051 + w_cast5_cast_fu_742_p1);

assign tmp_33_fu_780_p2 = ($signed(m_cast4_cast_fu_776_p1) + $signed(tmp_28_cast_reg_1018));

assign tmp_34_fu_785_p2 = tmp_33_fu_780_p2 << 11'd2;

assign tmp_35_fu_791_p2 = (tmp_34_fu_785_p2 - tmp_33_fu_780_p2);

assign tmp_36_fu_828_p2 = (tmp_5_cast_cast_fu_824_p1 + tmp_27_reg_1046);

assign tmp_37_fu_833_p1 = tmp_36_fu_828_p2[6:0];

assign tmp_38_fu_845_p1 = tmp_36_fu_828_p2[8:0];

assign tmp_39_fu_857_p2 = (p_shl8_cast_fu_837_p3 + p_shl9_cast_fu_849_p3);

assign tmp_40_fu_873_p2 = (tmp_35_reg_1087 + n_cast3_cast_fu_869_p1);

assign tmp_41_cast_fu_751_p1 = tmp_32_fu_746_p2;

assign tmp_41_fu_914_p2 = (tmp_39_reg_1100 + tmp_8_cast_cast_fu_910_p1);

assign tmp_49_cast_fu_878_p1 = tmp_40_fu_873_p2;

assign tmp_50_cast_fu_919_p1 = tmp_41_fu_914_p2;

assign tmp_5_cast_cast_fu_824_p1 = tmp_5_fu_819_p2;

assign tmp_5_fu_819_p2 = ($signed(tmp1_cast_fu_815_p1) + $signed(tmp_reg_1059));

assign tmp_8_cast_cast_fu_910_p1 = tmp_8_fu_905_p2;

assign tmp_8_fu_905_p2 = ($signed(tmp_2_reg_1077) + $signed(tmp2_cast_fu_901_p1));

assign tmp_fu_714_p3 = {{h_reg_476}, {1'd0}};

assign tmp_s_fu_561_p3 = {{co_reg_442}, {2'd0}};

assign w_1_fu_863_p2 = (w_reg_488 + 3'd1);

assign w_cast5_cast_fu_742_p1 = w_reg_488;

assign weight_V_address0 = tmp_49_cast_fu_878_p1;

always @ (posedge ap_clk) begin
    tmp_31_cast_reg_1023[0] <= 1'b0;
    arrayNo_cast_reg_1041[31:7] <= 25'b0000000000000000000000000;
    tmp_27_reg_1046[0] <= 1'b0;
    tmp_30_reg_1051[0] <= 1'b0;
    tmp_reg_1059[0] <= 1'b0;
    tmp_2_reg_1077[0] <= 1'b0;
    tmp_39_reg_1100[0] <= 1'b0;
end

endmodule //subconv_3x3_8_stride
