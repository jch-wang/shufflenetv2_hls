// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<18> fc::ap_ST_fsm_state1 = "1";
const sc_lv<18> fc::ap_ST_fsm_state2 = "10";
const sc_lv<18> fc::ap_ST_fsm_state3 = "100";
const sc_lv<18> fc::ap_ST_fsm_state4 = "1000";
const sc_lv<18> fc::ap_ST_fsm_state5 = "10000";
const sc_lv<18> fc::ap_ST_fsm_state6 = "100000";
const sc_lv<18> fc::ap_ST_fsm_state7 = "1000000";
const sc_lv<18> fc::ap_ST_fsm_state8 = "10000000";
const sc_lv<18> fc::ap_ST_fsm_state9 = "100000000";
const sc_lv<18> fc::ap_ST_fsm_state10 = "1000000000";
const sc_lv<18> fc::ap_ST_fsm_state11 = "10000000000";
const sc_lv<18> fc::ap_ST_fsm_state12 = "100000000000";
const sc_lv<18> fc::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<18> fc::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<18> fc::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<18> fc::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<18> fc::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<18> fc::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<32> fc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> fc::ap_const_lv1_0 = "0";
const sc_lv<3> fc::ap_const_lv3_0 = "000";
const sc_lv<2> fc::ap_const_lv2_0 = "00";
const sc_lv<4> fc::ap_const_lv4_0 = "0000";
const sc_lv<8> fc::ap_const_lv8_0 = "00000000";
const sc_lv<32> fc::ap_const_lv32_2 = "10";
const sc_lv<32> fc::ap_const_lv32_A = "1010";
const sc_lv<32> fc::ap_const_lv32_D = "1101";
const sc_lv<32> fc::ap_const_lv32_11 = "10001";
const sc_lv<32> fc::ap_const_lv32_1 = "1";
const sc_lv<32> fc::ap_const_lv32_9 = "1001";
const sc_lv<1> fc::ap_const_lv1_1 = "1";
const sc_lv<32> fc::ap_const_lv32_B = "1011";
const sc_lv<32> fc::ap_const_lv32_C = "1100";
const sc_lv<32> fc::ap_const_lv32_8 = "1000";
const sc_lv<10> fc::ap_const_lv10_0 = "0000000000";
const sc_lv<32> fc::ap_const_lv32_200 = "1000000000";
const sc_lv<9> fc::ap_const_lv9_0 = "000000000";
const sc_lv<4> fc::ap_const_lv4_A = "1010";
const sc_lv<4> fc::ap_const_lv4_1 = "1";
const sc_lv<10> fc::ap_const_lv10_200 = "1000000000";
const sc_lv<10> fc::ap_const_lv10_1 = "1";
const bool fc::ap_const_boolean_1 = true;

fc::fc(sc_module_name name) : sc_module(name), mVcdFile(0) {
    ShuffleNetV2_mac_cud_x_U779 = new ShuffleNetV2_mac_cud<1,1,8,8,8,8>("ShuffleNetV2_mac_cud_x_U779");
    ShuffleNetV2_mac_cud_x_U779->din0(avgpool_output_V_loa_reg_294);
    ShuffleNetV2_mac_cud_x_U779->din1(weight_V_addr_read_reg_289);
    ShuffleNetV2_mac_cud_x_U779->din2(p_s_reg_144);
    ShuffleNetV2_mac_cud_x_U779->dout(grp_fu_236_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_output_V_BVALID );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( m_axi_output_V_BVALID );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_output_V_AWREADY);
    sensitive << ( m_axi_output_V_AWREADY );
    sensitive << ( ap_reg_ioackin_m_axi_output_V_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_output_V_WREADY);
    sensitive << ( m_axi_output_V_WREADY );
    sensitive << ( ap_reg_ioackin_m_axi_output_V_WREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_weight_V_ARREADY);
    sensitive << ( m_axi_weight_V_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_weight_V_ARREADY );

    SC_METHOD(thread_avgpool_output_V_address0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ci_cast1_fu_213_p1 );

    SC_METHOD(thread_avgpool_output_V_ce0);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_bias_V_address0);
    sensitive << ( co_cast2_reg_252 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_bias_V_ce0);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ci_15_fu_224_p2);
    sensitive << ( ci_reg_156 );

    SC_METHOD(thread_ci_cast1_fu_213_p1);
    sensitive << ( ci_reg_156 );

    SC_METHOD(thread_co_33_fu_192_p2);
    sensitive << ( co_reg_133 );

    SC_METHOD(thread_co_cast2_fu_174_p1);
    sensitive << ( co_reg_133 );

    SC_METHOD(thread_exitcond42_fu_186_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( co_reg_133 );

    SC_METHOD(thread_exitcond_fu_218_p2);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ci_reg_156 );

    SC_METHOD(thread_m_axi_output_V_ARADDR);

    SC_METHOD(thread_m_axi_output_V_ARBURST);

    SC_METHOD(thread_m_axi_output_V_ARCACHE);

    SC_METHOD(thread_m_axi_output_V_ARID);

    SC_METHOD(thread_m_axi_output_V_ARLEN);

    SC_METHOD(thread_m_axi_output_V_ARLOCK);

    SC_METHOD(thread_m_axi_output_V_ARPROT);

    SC_METHOD(thread_m_axi_output_V_ARQOS);

    SC_METHOD(thread_m_axi_output_V_ARREGION);

    SC_METHOD(thread_m_axi_output_V_ARSIZE);

    SC_METHOD(thread_m_axi_output_V_ARUSER);

    SC_METHOD(thread_m_axi_output_V_ARVALID);

    SC_METHOD(thread_m_axi_output_V_AWADDR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( fc_output_V15 );
    sensitive << ( ap_reg_ioackin_m_axi_output_V_AWREADY );

    SC_METHOD(thread_m_axi_output_V_AWBURST);

    SC_METHOD(thread_m_axi_output_V_AWCACHE);

    SC_METHOD(thread_m_axi_output_V_AWID);

    SC_METHOD(thread_m_axi_output_V_AWLEN);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_reg_ioackin_m_axi_output_V_AWREADY );

    SC_METHOD(thread_m_axi_output_V_AWLOCK);

    SC_METHOD(thread_m_axi_output_V_AWPROT);

    SC_METHOD(thread_m_axi_output_V_AWQOS);

    SC_METHOD(thread_m_axi_output_V_AWREGION);

    SC_METHOD(thread_m_axi_output_V_AWSIZE);

    SC_METHOD(thread_m_axi_output_V_AWUSER);

    SC_METHOD(thread_m_axi_output_V_AWVALID);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_reg_ioackin_m_axi_output_V_AWREADY );

    SC_METHOD(thread_m_axi_output_V_BREADY);
    sensitive << ( m_axi_output_V_BVALID );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_m_axi_output_V_RREADY);

    SC_METHOD(thread_m_axi_output_V_WDATA);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( result_V_reg_304 );
    sensitive << ( ap_reg_ioackin_m_axi_output_V_WREADY );

    SC_METHOD(thread_m_axi_output_V_WID);

    SC_METHOD(thread_m_axi_output_V_WLAST);

    SC_METHOD(thread_m_axi_output_V_WSTRB);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_reg_ioackin_m_axi_output_V_WREADY );

    SC_METHOD(thread_m_axi_output_V_WUSER);

    SC_METHOD(thread_m_axi_output_V_WVALID);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_reg_ioackin_m_axi_output_V_WREADY );

    SC_METHOD(thread_m_axi_weight_V_ARADDR);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( weight_V_addr_reg_265 );
    sensitive << ( ap_reg_ioackin_m_axi_weight_V_ARREADY );

    SC_METHOD(thread_m_axi_weight_V_ARBURST);

    SC_METHOD(thread_m_axi_weight_V_ARCACHE);

    SC_METHOD(thread_m_axi_weight_V_ARID);

    SC_METHOD(thread_m_axi_weight_V_ARLEN);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_reg_ioackin_m_axi_weight_V_ARREADY );

    SC_METHOD(thread_m_axi_weight_V_ARLOCK);

    SC_METHOD(thread_m_axi_weight_V_ARPROT);

    SC_METHOD(thread_m_axi_weight_V_ARQOS);

    SC_METHOD(thread_m_axi_weight_V_ARREGION);

    SC_METHOD(thread_m_axi_weight_V_ARSIZE);

    SC_METHOD(thread_m_axi_weight_V_ARUSER);

    SC_METHOD(thread_m_axi_weight_V_ARVALID);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_reg_ioackin_m_axi_weight_V_ARREADY );

    SC_METHOD(thread_m_axi_weight_V_AWADDR);

    SC_METHOD(thread_m_axi_weight_V_AWBURST);

    SC_METHOD(thread_m_axi_weight_V_AWCACHE);

    SC_METHOD(thread_m_axi_weight_V_AWID);

    SC_METHOD(thread_m_axi_weight_V_AWLEN);

    SC_METHOD(thread_m_axi_weight_V_AWLOCK);

    SC_METHOD(thread_m_axi_weight_V_AWPROT);

    SC_METHOD(thread_m_axi_weight_V_AWQOS);

    SC_METHOD(thread_m_axi_weight_V_AWREGION);

    SC_METHOD(thread_m_axi_weight_V_AWSIZE);

    SC_METHOD(thread_m_axi_weight_V_AWUSER);

    SC_METHOD(thread_m_axi_weight_V_AWVALID);

    SC_METHOD(thread_m_axi_weight_V_BREADY);

    SC_METHOD(thread_m_axi_weight_V_RREADY);
    sensitive << ( m_axi_weight_V_RVALID );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_m_axi_weight_V_WDATA);

    SC_METHOD(thread_m_axi_weight_V_WID);

    SC_METHOD(thread_m_axi_weight_V_WLAST);

    SC_METHOD(thread_m_axi_weight_V_WSTRB);

    SC_METHOD(thread_m_axi_weight_V_WUSER);

    SC_METHOD(thread_m_axi_weight_V_WVALID);

    SC_METHOD(thread_output_V_blk_n_AW);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_output_V_AWREADY );

    SC_METHOD(thread_output_V_blk_n_B);
    sensitive << ( m_axi_output_V_BVALID );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_output_V_blk_n_W);
    sensitive << ( m_axi_output_V_WREADY );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_result_V_fu_230_p2);
    sensitive << ( bias_V_q0 );
    sensitive << ( p_s_reg_144 );

    SC_METHOD(thread_tmp_676_fu_198_p1);
    sensitive << ( tmp_s_fu_178_p3 );

    SC_METHOD(thread_tmp_677_fu_202_p2);
    sensitive << ( fc_weight_V11 );
    sensitive << ( tmp_676_fu_198_p1 );

    SC_METHOD(thread_tmp_s_fu_178_p3);
    sensitive << ( co_reg_133 );

    SC_METHOD(thread_weight_V_blk_n_AR);
    sensitive << ( m_axi_weight_V_ARREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_weight_V_blk_n_R);
    sensitive << ( m_axi_weight_V_RVALID );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_weight_V_RVALID );
    sensitive << ( m_axi_output_V_BVALID );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_sig_ioackin_m_axi_output_V_AWREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond42_fu_186_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( exitcond_fu_218_p2 );
    sensitive << ( ap_sig_ioackin_m_axi_output_V_WREADY );
    sensitive << ( ap_sig_ioackin_m_axi_weight_V_ARREADY );

    ap_CS_fsm = "000000000000000001";
    ap_reg_ioackin_m_axi_output_V_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_output_V_WREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_weight_V_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_weight_V_AWVALID, "(port)m_axi_weight_V_AWVALID");
    sc_trace(mVcdFile, m_axi_weight_V_AWREADY, "(port)m_axi_weight_V_AWREADY");
    sc_trace(mVcdFile, m_axi_weight_V_AWADDR, "(port)m_axi_weight_V_AWADDR");
    sc_trace(mVcdFile, m_axi_weight_V_AWID, "(port)m_axi_weight_V_AWID");
    sc_trace(mVcdFile, m_axi_weight_V_AWLEN, "(port)m_axi_weight_V_AWLEN");
    sc_trace(mVcdFile, m_axi_weight_V_AWSIZE, "(port)m_axi_weight_V_AWSIZE");
    sc_trace(mVcdFile, m_axi_weight_V_AWBURST, "(port)m_axi_weight_V_AWBURST");
    sc_trace(mVcdFile, m_axi_weight_V_AWLOCK, "(port)m_axi_weight_V_AWLOCK");
    sc_trace(mVcdFile, m_axi_weight_V_AWCACHE, "(port)m_axi_weight_V_AWCACHE");
    sc_trace(mVcdFile, m_axi_weight_V_AWPROT, "(port)m_axi_weight_V_AWPROT");
    sc_trace(mVcdFile, m_axi_weight_V_AWQOS, "(port)m_axi_weight_V_AWQOS");
    sc_trace(mVcdFile, m_axi_weight_V_AWREGION, "(port)m_axi_weight_V_AWREGION");
    sc_trace(mVcdFile, m_axi_weight_V_AWUSER, "(port)m_axi_weight_V_AWUSER");
    sc_trace(mVcdFile, m_axi_weight_V_WVALID, "(port)m_axi_weight_V_WVALID");
    sc_trace(mVcdFile, m_axi_weight_V_WREADY, "(port)m_axi_weight_V_WREADY");
    sc_trace(mVcdFile, m_axi_weight_V_WDATA, "(port)m_axi_weight_V_WDATA");
    sc_trace(mVcdFile, m_axi_weight_V_WSTRB, "(port)m_axi_weight_V_WSTRB");
    sc_trace(mVcdFile, m_axi_weight_V_WLAST, "(port)m_axi_weight_V_WLAST");
    sc_trace(mVcdFile, m_axi_weight_V_WID, "(port)m_axi_weight_V_WID");
    sc_trace(mVcdFile, m_axi_weight_V_WUSER, "(port)m_axi_weight_V_WUSER");
    sc_trace(mVcdFile, m_axi_weight_V_ARVALID, "(port)m_axi_weight_V_ARVALID");
    sc_trace(mVcdFile, m_axi_weight_V_ARREADY, "(port)m_axi_weight_V_ARREADY");
    sc_trace(mVcdFile, m_axi_weight_V_ARADDR, "(port)m_axi_weight_V_ARADDR");
    sc_trace(mVcdFile, m_axi_weight_V_ARID, "(port)m_axi_weight_V_ARID");
    sc_trace(mVcdFile, m_axi_weight_V_ARLEN, "(port)m_axi_weight_V_ARLEN");
    sc_trace(mVcdFile, m_axi_weight_V_ARSIZE, "(port)m_axi_weight_V_ARSIZE");
    sc_trace(mVcdFile, m_axi_weight_V_ARBURST, "(port)m_axi_weight_V_ARBURST");
    sc_trace(mVcdFile, m_axi_weight_V_ARLOCK, "(port)m_axi_weight_V_ARLOCK");
    sc_trace(mVcdFile, m_axi_weight_V_ARCACHE, "(port)m_axi_weight_V_ARCACHE");
    sc_trace(mVcdFile, m_axi_weight_V_ARPROT, "(port)m_axi_weight_V_ARPROT");
    sc_trace(mVcdFile, m_axi_weight_V_ARQOS, "(port)m_axi_weight_V_ARQOS");
    sc_trace(mVcdFile, m_axi_weight_V_ARREGION, "(port)m_axi_weight_V_ARREGION");
    sc_trace(mVcdFile, m_axi_weight_V_ARUSER, "(port)m_axi_weight_V_ARUSER");
    sc_trace(mVcdFile, m_axi_weight_V_RVALID, "(port)m_axi_weight_V_RVALID");
    sc_trace(mVcdFile, m_axi_weight_V_RREADY, "(port)m_axi_weight_V_RREADY");
    sc_trace(mVcdFile, m_axi_weight_V_RDATA, "(port)m_axi_weight_V_RDATA");
    sc_trace(mVcdFile, m_axi_weight_V_RLAST, "(port)m_axi_weight_V_RLAST");
    sc_trace(mVcdFile, m_axi_weight_V_RID, "(port)m_axi_weight_V_RID");
    sc_trace(mVcdFile, m_axi_weight_V_RUSER, "(port)m_axi_weight_V_RUSER");
    sc_trace(mVcdFile, m_axi_weight_V_RRESP, "(port)m_axi_weight_V_RRESP");
    sc_trace(mVcdFile, m_axi_weight_V_BVALID, "(port)m_axi_weight_V_BVALID");
    sc_trace(mVcdFile, m_axi_weight_V_BREADY, "(port)m_axi_weight_V_BREADY");
    sc_trace(mVcdFile, m_axi_weight_V_BRESP, "(port)m_axi_weight_V_BRESP");
    sc_trace(mVcdFile, m_axi_weight_V_BID, "(port)m_axi_weight_V_BID");
    sc_trace(mVcdFile, m_axi_weight_V_BUSER, "(port)m_axi_weight_V_BUSER");
    sc_trace(mVcdFile, fc_weight_V11, "(port)fc_weight_V11");
    sc_trace(mVcdFile, bias_V_address0, "(port)bias_V_address0");
    sc_trace(mVcdFile, bias_V_ce0, "(port)bias_V_ce0");
    sc_trace(mVcdFile, bias_V_q0, "(port)bias_V_q0");
    sc_trace(mVcdFile, m_axi_output_V_AWVALID, "(port)m_axi_output_V_AWVALID");
    sc_trace(mVcdFile, m_axi_output_V_AWREADY, "(port)m_axi_output_V_AWREADY");
    sc_trace(mVcdFile, m_axi_output_V_AWADDR, "(port)m_axi_output_V_AWADDR");
    sc_trace(mVcdFile, m_axi_output_V_AWID, "(port)m_axi_output_V_AWID");
    sc_trace(mVcdFile, m_axi_output_V_AWLEN, "(port)m_axi_output_V_AWLEN");
    sc_trace(mVcdFile, m_axi_output_V_AWSIZE, "(port)m_axi_output_V_AWSIZE");
    sc_trace(mVcdFile, m_axi_output_V_AWBURST, "(port)m_axi_output_V_AWBURST");
    sc_trace(mVcdFile, m_axi_output_V_AWLOCK, "(port)m_axi_output_V_AWLOCK");
    sc_trace(mVcdFile, m_axi_output_V_AWCACHE, "(port)m_axi_output_V_AWCACHE");
    sc_trace(mVcdFile, m_axi_output_V_AWPROT, "(port)m_axi_output_V_AWPROT");
    sc_trace(mVcdFile, m_axi_output_V_AWQOS, "(port)m_axi_output_V_AWQOS");
    sc_trace(mVcdFile, m_axi_output_V_AWREGION, "(port)m_axi_output_V_AWREGION");
    sc_trace(mVcdFile, m_axi_output_V_AWUSER, "(port)m_axi_output_V_AWUSER");
    sc_trace(mVcdFile, m_axi_output_V_WVALID, "(port)m_axi_output_V_WVALID");
    sc_trace(mVcdFile, m_axi_output_V_WREADY, "(port)m_axi_output_V_WREADY");
    sc_trace(mVcdFile, m_axi_output_V_WDATA, "(port)m_axi_output_V_WDATA");
    sc_trace(mVcdFile, m_axi_output_V_WSTRB, "(port)m_axi_output_V_WSTRB");
    sc_trace(mVcdFile, m_axi_output_V_WLAST, "(port)m_axi_output_V_WLAST");
    sc_trace(mVcdFile, m_axi_output_V_WID, "(port)m_axi_output_V_WID");
    sc_trace(mVcdFile, m_axi_output_V_WUSER, "(port)m_axi_output_V_WUSER");
    sc_trace(mVcdFile, m_axi_output_V_ARVALID, "(port)m_axi_output_V_ARVALID");
    sc_trace(mVcdFile, m_axi_output_V_ARREADY, "(port)m_axi_output_V_ARREADY");
    sc_trace(mVcdFile, m_axi_output_V_ARADDR, "(port)m_axi_output_V_ARADDR");
    sc_trace(mVcdFile, m_axi_output_V_ARID, "(port)m_axi_output_V_ARID");
    sc_trace(mVcdFile, m_axi_output_V_ARLEN, "(port)m_axi_output_V_ARLEN");
    sc_trace(mVcdFile, m_axi_output_V_ARSIZE, "(port)m_axi_output_V_ARSIZE");
    sc_trace(mVcdFile, m_axi_output_V_ARBURST, "(port)m_axi_output_V_ARBURST");
    sc_trace(mVcdFile, m_axi_output_V_ARLOCK, "(port)m_axi_output_V_ARLOCK");
    sc_trace(mVcdFile, m_axi_output_V_ARCACHE, "(port)m_axi_output_V_ARCACHE");
    sc_trace(mVcdFile, m_axi_output_V_ARPROT, "(port)m_axi_output_V_ARPROT");
    sc_trace(mVcdFile, m_axi_output_V_ARQOS, "(port)m_axi_output_V_ARQOS");
    sc_trace(mVcdFile, m_axi_output_V_ARREGION, "(port)m_axi_output_V_ARREGION");
    sc_trace(mVcdFile, m_axi_output_V_ARUSER, "(port)m_axi_output_V_ARUSER");
    sc_trace(mVcdFile, m_axi_output_V_RVALID, "(port)m_axi_output_V_RVALID");
    sc_trace(mVcdFile, m_axi_output_V_RREADY, "(port)m_axi_output_V_RREADY");
    sc_trace(mVcdFile, m_axi_output_V_RDATA, "(port)m_axi_output_V_RDATA");
    sc_trace(mVcdFile, m_axi_output_V_RLAST, "(port)m_axi_output_V_RLAST");
    sc_trace(mVcdFile, m_axi_output_V_RID, "(port)m_axi_output_V_RID");
    sc_trace(mVcdFile, m_axi_output_V_RUSER, "(port)m_axi_output_V_RUSER");
    sc_trace(mVcdFile, m_axi_output_V_RRESP, "(port)m_axi_output_V_RRESP");
    sc_trace(mVcdFile, m_axi_output_V_BVALID, "(port)m_axi_output_V_BVALID");
    sc_trace(mVcdFile, m_axi_output_V_BREADY, "(port)m_axi_output_V_BREADY");
    sc_trace(mVcdFile, m_axi_output_V_BRESP, "(port)m_axi_output_V_BRESP");
    sc_trace(mVcdFile, m_axi_output_V_BID, "(port)m_axi_output_V_BID");
    sc_trace(mVcdFile, m_axi_output_V_BUSER, "(port)m_axi_output_V_BUSER");
    sc_trace(mVcdFile, fc_output_V15, "(port)fc_output_V15");
    sc_trace(mVcdFile, avgpool_output_V_address0, "(port)avgpool_output_V_address0");
    sc_trace(mVcdFile, avgpool_output_V_ce0, "(port)avgpool_output_V_ce0");
    sc_trace(mVcdFile, avgpool_output_V_q0, "(port)avgpool_output_V_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, weight_V_blk_n_AR, "weight_V_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, weight_V_blk_n_R, "weight_V_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, output_V_blk_n_AW, "output_V_blk_n_AW");
    sc_trace(mVcdFile, output_V_blk_n_W, "output_V_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, output_V_blk_n_B, "output_V_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_output_V_AWREADY, "ap_sig_ioackin_m_axi_output_V_AWREADY");
    sc_trace(mVcdFile, co_cast2_fu_174_p1, "co_cast2_fu_174_p1");
    sc_trace(mVcdFile, co_cast2_reg_252, "co_cast2_reg_252");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, co_33_fu_192_p2, "co_33_fu_192_p2");
    sc_trace(mVcdFile, co_33_reg_260, "co_33_reg_260");
    sc_trace(mVcdFile, weight_V_addr_reg_265, "weight_V_addr_reg_265");
    sc_trace(mVcdFile, exitcond42_fu_186_p2, "exitcond42_fu_186_p2");
    sc_trace(mVcdFile, ci_15_fu_224_p2, "ci_15_fu_224_p2");
    sc_trace(mVcdFile, ci_15_reg_274, "ci_15_reg_274");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, exitcond_fu_218_p2, "exitcond_fu_218_p2");
    sc_trace(mVcdFile, weight_V_addr_read_reg_289, "weight_V_addr_read_reg_289");
    sc_trace(mVcdFile, avgpool_output_V_loa_reg_294, "avgpool_output_V_loa_reg_294");
    sc_trace(mVcdFile, grp_fu_236_p3, "grp_fu_236_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, result_V_fu_230_p2, "result_V_fu_230_p2");
    sc_trace(mVcdFile, result_V_reg_304, "result_V_reg_304");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, co_reg_133, "co_reg_133");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_output_V_WREADY, "ap_sig_ioackin_m_axi_output_V_WREADY");
    sc_trace(mVcdFile, p_s_reg_144, "p_s_reg_144");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ci_reg_156, "ci_reg_156");
    sc_trace(mVcdFile, ci_cast1_fu_213_p1, "ci_cast1_fu_213_p1");
    sc_trace(mVcdFile, tmp_677_fu_202_p2, "tmp_677_fu_202_p2");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_output_V_AWREADY, "ap_reg_ioackin_m_axi_output_V_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_output_V_WREADY, "ap_reg_ioackin_m_axi_output_V_WREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_weight_V_ARREADY, "ap_reg_ioackin_m_axi_weight_V_ARREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_weight_V_ARREADY, "ap_sig_ioackin_m_axi_weight_V_ARREADY");
    sc_trace(mVcdFile, tmp_s_fu_178_p3, "tmp_s_fu_178_p3");
    sc_trace(mVcdFile, tmp_676_fu_198_p1, "tmp_676_fu_198_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

fc::~fc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete ShuffleNetV2_mac_cud_x_U779;
}

void fc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_output_V_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_output_V_AWREADY.read()))) {
                ap_reg_ioackin_m_axi_output_V_AWREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                        esl_seteq<1,1,1>(ap_const_logic_1, m_axi_output_V_AWREADY.read()))) {
                ap_reg_ioackin_m_axi_output_V_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_output_V_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_output_V_WREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_m_axi_output_V_WREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_output_V_WREADY.read())) {
                ap_reg_ioackin_m_axi_output_V_WREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_weight_V_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_weight_V_ARREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_m_axi_weight_V_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_weight_V_ARREADY.read())) {
                ap_reg_ioackin_m_axi_weight_V_ARREADY = ap_const_logic_1;
            }
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        ci_reg_156 = ap_const_lv10_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        ci_reg_156 = ci_15_reg_274.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_output_V_WREADY.read(), ap_const_logic_1))) {
        co_reg_133 = co_33_reg_260.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_output_V_AWREADY.read())))) {
        co_reg_133 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        p_s_reg_144 = ap_const_lv8_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        p_s_reg_144 = grp_fu_236_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(m_axi_weight_V_RVALID.read(), ap_const_logic_1))) {
        avgpool_output_V_loa_reg_294 = avgpool_output_V_q0.read();
        weight_V_addr_read_reg_289 = m_axi_weight_V_RDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ci_15_reg_274 = ci_15_fu_224_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        co_33_reg_260 = co_33_fu_192_p2.read();
        co_cast2_reg_252 = co_cast2_fu_174_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        result_V_reg_304 = result_V_fu_230_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond42_fu_186_p2.read()))) {
        weight_V_addr_reg_265 = tmp_677_fu_202_p2.read();
    }
}

void fc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fc::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void fc::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void fc::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void fc::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void fc::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void fc::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void fc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fc::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void fc::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void fc::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(m_axi_output_V_BVALID.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
         esl_seteq<1,1,1>(m_axi_output_V_BVALID.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fc::thread_ap_sig_ioackin_m_axi_output_V_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_output_V_AWREADY.read())) {
        ap_sig_ioackin_m_axi_output_V_AWREADY = m_axi_output_V_AWREADY.read();
    } else {
        ap_sig_ioackin_m_axi_output_V_AWREADY = ap_const_logic_1;
    }
}

void fc::thread_ap_sig_ioackin_m_axi_output_V_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_output_V_WREADY.read())) {
        ap_sig_ioackin_m_axi_output_V_WREADY = m_axi_output_V_WREADY.read();
    } else {
        ap_sig_ioackin_m_axi_output_V_WREADY = ap_const_logic_1;
    }
}

void fc::thread_ap_sig_ioackin_m_axi_weight_V_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_weight_V_ARREADY.read())) {
        ap_sig_ioackin_m_axi_weight_V_ARREADY = m_axi_weight_V_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_weight_V_ARREADY = ap_const_logic_1;
    }
}

void fc::thread_avgpool_output_V_address0() {
    avgpool_output_V_address0 =  (sc_lv<9>) (ci_cast1_fu_213_p1.read());
}

void fc::thread_avgpool_output_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        avgpool_output_V_ce0 = ap_const_logic_1;
    } else {
        avgpool_output_V_ce0 = ap_const_logic_0;
    }
}

void fc::thread_bias_V_address0() {
    bias_V_address0 =  (sc_lv<4>) (co_cast2_reg_252.read());
}

void fc::thread_bias_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        bias_V_ce0 = ap_const_logic_1;
    } else {
        bias_V_ce0 = ap_const_logic_0;
    }
}

void fc::thread_ci_15_fu_224_p2() {
    ci_15_fu_224_p2 = (!ci_reg_156.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(ci_reg_156.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void fc::thread_ci_cast1_fu_213_p1() {
    ci_cast1_fu_213_p1 = esl_zext<32,10>(ci_reg_156.read());
}

void fc::thread_co_33_fu_192_p2() {
    co_33_fu_192_p2 = (!co_reg_133.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(co_reg_133.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void fc::thread_co_cast2_fu_174_p1() {
    co_cast2_fu_174_p1 = esl_zext<32,4>(co_reg_133.read());
}

void fc::thread_exitcond42_fu_186_p2() {
    exitcond42_fu_186_p2 = (!co_reg_133.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(co_reg_133.read() == ap_const_lv4_A);
}

void fc::thread_exitcond_fu_218_p2() {
    exitcond_fu_218_p2 = (!ci_reg_156.read().is_01() || !ap_const_lv10_200.is_01())? sc_lv<1>(): sc_lv<1>(ci_reg_156.read() == ap_const_lv10_200);
}

void fc::thread_m_axi_output_V_ARADDR() {
    m_axi_output_V_ARADDR = ap_const_lv32_0;
}

void fc::thread_m_axi_output_V_ARBURST() {
    m_axi_output_V_ARBURST = ap_const_lv2_0;
}

void fc::thread_m_axi_output_V_ARCACHE() {
    m_axi_output_V_ARCACHE = ap_const_lv4_0;
}

void fc::thread_m_axi_output_V_ARID() {
    m_axi_output_V_ARID = ap_const_lv1_0;
}

void fc::thread_m_axi_output_V_ARLEN() {
    m_axi_output_V_ARLEN = ap_const_lv32_0;
}

void fc::thread_m_axi_output_V_ARLOCK() {
    m_axi_output_V_ARLOCK = ap_const_lv2_0;
}

void fc::thread_m_axi_output_V_ARPROT() {
    m_axi_output_V_ARPROT = ap_const_lv3_0;
}

void fc::thread_m_axi_output_V_ARQOS() {
    m_axi_output_V_ARQOS = ap_const_lv4_0;
}

void fc::thread_m_axi_output_V_ARREGION() {
    m_axi_output_V_ARREGION = ap_const_lv4_0;
}

void fc::thread_m_axi_output_V_ARSIZE() {
    m_axi_output_V_ARSIZE = ap_const_lv3_0;
}

void fc::thread_m_axi_output_V_ARUSER() {
    m_axi_output_V_ARUSER = ap_const_lv1_0;
}

void fc::thread_m_axi_output_V_ARVALID() {
    m_axi_output_V_ARVALID = ap_const_logic_0;
}

void fc::thread_m_axi_output_V_AWADDR() {
    m_axi_output_V_AWADDR = fc_output_V15.read();
}

void fc::thread_m_axi_output_V_AWBURST() {
    m_axi_output_V_AWBURST = ap_const_lv2_0;
}

void fc::thread_m_axi_output_V_AWCACHE() {
    m_axi_output_V_AWCACHE = ap_const_lv4_0;
}

void fc::thread_m_axi_output_V_AWID() {
    m_axi_output_V_AWID = ap_const_lv1_0;
}

void fc::thread_m_axi_output_V_AWLEN() {
    m_axi_output_V_AWLEN = ap_const_lv32_A;
}

void fc::thread_m_axi_output_V_AWLOCK() {
    m_axi_output_V_AWLOCK = ap_const_lv2_0;
}

void fc::thread_m_axi_output_V_AWPROT() {
    m_axi_output_V_AWPROT = ap_const_lv3_0;
}

void fc::thread_m_axi_output_V_AWQOS() {
    m_axi_output_V_AWQOS = ap_const_lv4_0;
}

void fc::thread_m_axi_output_V_AWREGION() {
    m_axi_output_V_AWREGION = ap_const_lv4_0;
}

void fc::thread_m_axi_output_V_AWSIZE() {
    m_axi_output_V_AWSIZE = ap_const_lv3_0;
}

void fc::thread_m_axi_output_V_AWUSER() {
    m_axi_output_V_AWUSER = ap_const_lv1_0;
}

void fc::thread_m_axi_output_V_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_output_V_AWREADY.read()))) {
        m_axi_output_V_AWVALID = ap_const_logic_1;
    } else {
        m_axi_output_V_AWVALID = ap_const_logic_0;
    }
}

void fc::thread_m_axi_output_V_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
         esl_seteq<1,1,1>(m_axi_output_V_BVALID.read(), ap_const_logic_1))) {
        m_axi_output_V_BREADY = ap_const_logic_1;
    } else {
        m_axi_output_V_BREADY = ap_const_logic_0;
    }
}

void fc::thread_m_axi_output_V_RREADY() {
    m_axi_output_V_RREADY = ap_const_logic_0;
}

void fc::thread_m_axi_output_V_WDATA() {
    m_axi_output_V_WDATA = result_V_reg_304.read();
}

void fc::thread_m_axi_output_V_WID() {
    m_axi_output_V_WID = ap_const_lv1_0;
}

void fc::thread_m_axi_output_V_WLAST() {
    m_axi_output_V_WLAST = ap_const_logic_0;
}

void fc::thread_m_axi_output_V_WSTRB() {
    m_axi_output_V_WSTRB = ap_const_lv1_1;
}

void fc::thread_m_axi_output_V_WUSER() {
    m_axi_output_V_WUSER = ap_const_lv1_0;
}

void fc::thread_m_axi_output_V_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_output_V_WREADY.read()))) {
        m_axi_output_V_WVALID = ap_const_logic_1;
    } else {
        m_axi_output_V_WVALID = ap_const_logic_0;
    }
}

void fc::thread_m_axi_weight_V_ARADDR() {
    m_axi_weight_V_ARADDR = weight_V_addr_reg_265.read();
}

void fc::thread_m_axi_weight_V_ARBURST() {
    m_axi_weight_V_ARBURST = ap_const_lv2_0;
}

void fc::thread_m_axi_weight_V_ARCACHE() {
    m_axi_weight_V_ARCACHE = ap_const_lv4_0;
}

void fc::thread_m_axi_weight_V_ARID() {
    m_axi_weight_V_ARID = ap_const_lv1_0;
}

void fc::thread_m_axi_weight_V_ARLEN() {
    m_axi_weight_V_ARLEN = ap_const_lv32_200;
}

void fc::thread_m_axi_weight_V_ARLOCK() {
    m_axi_weight_V_ARLOCK = ap_const_lv2_0;
}

void fc::thread_m_axi_weight_V_ARPROT() {
    m_axi_weight_V_ARPROT = ap_const_lv3_0;
}

void fc::thread_m_axi_weight_V_ARQOS() {
    m_axi_weight_V_ARQOS = ap_const_lv4_0;
}

void fc::thread_m_axi_weight_V_ARREGION() {
    m_axi_weight_V_ARREGION = ap_const_lv4_0;
}

void fc::thread_m_axi_weight_V_ARSIZE() {
    m_axi_weight_V_ARSIZE = ap_const_lv3_0;
}

void fc::thread_m_axi_weight_V_ARUSER() {
    m_axi_weight_V_ARUSER = ap_const_lv1_0;
}

void fc::thread_m_axi_weight_V_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_weight_V_ARREADY.read()))) {
        m_axi_weight_V_ARVALID = ap_const_logic_1;
    } else {
        m_axi_weight_V_ARVALID = ap_const_logic_0;
    }
}

void fc::thread_m_axi_weight_V_AWADDR() {
    m_axi_weight_V_AWADDR = ap_const_lv32_0;
}

void fc::thread_m_axi_weight_V_AWBURST() {
    m_axi_weight_V_AWBURST = ap_const_lv2_0;
}

void fc::thread_m_axi_weight_V_AWCACHE() {
    m_axi_weight_V_AWCACHE = ap_const_lv4_0;
}

void fc::thread_m_axi_weight_V_AWID() {
    m_axi_weight_V_AWID = ap_const_lv1_0;
}

void fc::thread_m_axi_weight_V_AWLEN() {
    m_axi_weight_V_AWLEN = ap_const_lv32_0;
}

void fc::thread_m_axi_weight_V_AWLOCK() {
    m_axi_weight_V_AWLOCK = ap_const_lv2_0;
}

void fc::thread_m_axi_weight_V_AWPROT() {
    m_axi_weight_V_AWPROT = ap_const_lv3_0;
}

void fc::thread_m_axi_weight_V_AWQOS() {
    m_axi_weight_V_AWQOS = ap_const_lv4_0;
}

void fc::thread_m_axi_weight_V_AWREGION() {
    m_axi_weight_V_AWREGION = ap_const_lv4_0;
}

void fc::thread_m_axi_weight_V_AWSIZE() {
    m_axi_weight_V_AWSIZE = ap_const_lv3_0;
}

void fc::thread_m_axi_weight_V_AWUSER() {
    m_axi_weight_V_AWUSER = ap_const_lv1_0;
}

void fc::thread_m_axi_weight_V_AWVALID() {
    m_axi_weight_V_AWVALID = ap_const_logic_0;
}

void fc::thread_m_axi_weight_V_BREADY() {
    m_axi_weight_V_BREADY = ap_const_logic_0;
}

void fc::thread_m_axi_weight_V_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(m_axi_weight_V_RVALID.read(), ap_const_logic_1))) {
        m_axi_weight_V_RREADY = ap_const_logic_1;
    } else {
        m_axi_weight_V_RREADY = ap_const_logic_0;
    }
}

void fc::thread_m_axi_weight_V_WDATA() {
    m_axi_weight_V_WDATA = ap_const_lv8_0;
}

void fc::thread_m_axi_weight_V_WID() {
    m_axi_weight_V_WID = ap_const_lv1_0;
}

void fc::thread_m_axi_weight_V_WLAST() {
    m_axi_weight_V_WLAST = ap_const_logic_0;
}

void fc::thread_m_axi_weight_V_WSTRB() {
    m_axi_weight_V_WSTRB = ap_const_lv1_0;
}

void fc::thread_m_axi_weight_V_WUSER() {
    m_axi_weight_V_WUSER = ap_const_lv1_0;
}

void fc::thread_m_axi_weight_V_WVALID() {
    m_axi_weight_V_WVALID = ap_const_logic_0;
}

void fc::thread_output_V_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        output_V_blk_n_AW = m_axi_output_V_AWREADY.read();
    } else {
        output_V_blk_n_AW = ap_const_logic_1;
    }
}

void fc::thread_output_V_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        output_V_blk_n_B = m_axi_output_V_BVALID.read();
    } else {
        output_V_blk_n_B = ap_const_logic_1;
    }
}

void fc::thread_output_V_blk_n_W() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        output_V_blk_n_W = m_axi_output_V_WREADY.read();
    } else {
        output_V_blk_n_W = ap_const_logic_1;
    }
}

void fc::thread_result_V_fu_230_p2() {
    result_V_fu_230_p2 = (!bias_V_q0.read().is_01() || !p_s_reg_144.read().is_01())? sc_lv<8>(): (sc_biguint<8>(bias_V_q0.read()) + sc_biguint<8>(p_s_reg_144.read()));
}

void fc::thread_tmp_676_fu_198_p1() {
    tmp_676_fu_198_p1 = esl_zext<32,13>(tmp_s_fu_178_p3.read());
}

void fc::thread_tmp_677_fu_202_p2() {
    tmp_677_fu_202_p2 = (!tmp_676_fu_198_p1.read().is_01() || !fc_weight_V11.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_676_fu_198_p1.read()) + sc_biguint<32>(fc_weight_V11.read()));
}

void fc::thread_tmp_s_fu_178_p3() {
    tmp_s_fu_178_p3 = esl_concat<4,9>(co_reg_133.read(), ap_const_lv9_0);
}

void fc::thread_weight_V_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        weight_V_blk_n_AR = m_axi_weight_V_ARREADY.read();
    } else {
        weight_V_blk_n_AR = ap_const_logic_1;
    }
}

void fc::thread_weight_V_blk_n_R() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        weight_V_blk_n_R = m_axi_weight_V_RVALID.read();
    } else {
        weight_V_blk_n_R = ap_const_logic_1;
    }
}

void fc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_output_V_AWREADY.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond42_fu_186_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_weight_V_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(exitcond_fu_218_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(m_axi_weight_V_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_output_V_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(m_axi_output_V_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state18;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXXX";
            break;
    }
}

}

