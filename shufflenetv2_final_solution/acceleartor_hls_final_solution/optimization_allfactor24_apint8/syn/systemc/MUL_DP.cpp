// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "MUL_DP.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic MUL_DP::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic MUL_DP::ap_const_logic_0 = sc_dt::Log_0;
const bool MUL_DP::ap_const_boolean_1 = true;
const bool MUL_DP::ap_const_boolean_0 = false;
const sc_lv<17> MUL_DP::ap_const_lv17_0 = "00000000000000000";
const sc_lv<32> MUL_DP::ap_const_lv32_F = "1111";
const sc_lv<32> MUL_DP::ap_const_lv32_11 = "10001";
const sc_lv<32> MUL_DP::ap_const_lv32_20 = "100000";

MUL_DP::MUL_DP(sc_module_name name) : sc_module(name), mVcdFile(0) {
    ShuffleNetV2_mul_dEe_U7 = new ShuffleNetV2_mul_dEe<1,2,8,26,33>("ShuffleNetV2_mul_dEe_U7");
    ShuffleNetV2_mul_dEe_U7->clk(ap_clk);
    ShuffleNetV2_mul_dEe_U7->reset(ap_rst);
    ShuffleNetV2_mul_dEe_U7->din0(w_V_read_reg_127);
    ShuffleNetV2_mul_dEe_U7->din1(r_V_reg_132);
    ShuffleNetV2_mul_dEe_U7->ce(grp_fu_80_ce);
    ShuffleNetV2_mul_dEe_U7->dout(grp_fu_80_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00000000);

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011001);

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter3);

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( loc_V_fu_111_p2 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( loc_V_1_reg_157 );

    SC_METHOD(thread_grp_fu_80_ce);
    sensitive << ( ap_ce );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_lhs_V_fu_60_p1);
    sensitive << ( p_Result_2_fu_52_p3 );

    SC_METHOD(thread_loc_V_1_fu_104_p1);
    sensitive << ( grp_fu_80_p2 );

    SC_METHOD(thread_loc_V_fu_111_p2);
    sensitive << ( p_Result_s_reg_152 );
    sensitive << ( tmp_309_fu_108_p1 );

    SC_METHOD(thread_p_Result_2_fu_52_p3);
    sensitive << ( a_V );

    SC_METHOD(thread_r_V_fu_68_p2);
    sensitive << ( rhs_V_fu_64_p1 );
    sensitive << ( lhs_V_fu_60_p1 );

    SC_METHOD(thread_rhs_V_fu_64_p1);
    sensitive << ( b_V );

    SC_METHOD(thread_tmp_309_fu_108_p1);
    sensitive << ( tmp_1710_reg_147 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "MUL_DP_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, a_V, "(port)a_V");
    sc_trace(mVcdFile, b_V, "(port)b_V");
    sc_trace(mVcdFile, w_V, "(port)w_V");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, w_V_read_reg_127, "w_V_read_reg_127");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter3, "ap_block_state4_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011001, "ap_block_pp0_stage0_flag00011001");
    sc_trace(mVcdFile, r_V_fu_68_p2, "r_V_fu_68_p2");
    sc_trace(mVcdFile, r_V_reg_132, "r_V_reg_132");
    sc_trace(mVcdFile, tmp_1710_reg_147, "tmp_1710_reg_147");
    sc_trace(mVcdFile, p_Result_s_reg_152, "p_Result_s_reg_152");
    sc_trace(mVcdFile, loc_V_1_fu_104_p1, "loc_V_1_fu_104_p1");
    sc_trace(mVcdFile, loc_V_1_reg_157, "loc_V_1_reg_157");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00000000, "ap_block_pp0_stage0_flag00000000");
    sc_trace(mVcdFile, p_Result_2_fu_52_p3, "p_Result_2_fu_52_p3");
    sc_trace(mVcdFile, rhs_V_fu_64_p1, "rhs_V_fu_64_p1");
    sc_trace(mVcdFile, lhs_V_fu_60_p1, "lhs_V_fu_60_p1");
    sc_trace(mVcdFile, grp_fu_80_p2, "grp_fu_80_p2");
    sc_trace(mVcdFile, tmp_309_fu_108_p1, "tmp_309_fu_108_p1");
    sc_trace(mVcdFile, loc_V_fu_111_p2, "loc_V_fu_111_p2");
    sc_trace(mVcdFile, grp_fu_80_ce, "grp_fu_80_ce");
#endif

    }
}

MUL_DP::~MUL_DP() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete ShuffleNetV2_mul_dEe_U7;
}

void MUL_DP::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        loc_V_1_reg_157 = loc_V_1_fu_104_p1.read();
        p_Result_s_reg_152 = grp_fu_80_p2.read().range(32, 17);
        r_V_reg_132 = r_V_fu_68_p2.read();
        tmp_1710_reg_147 = grp_fu_80_p2.read().range(15, 15);
        w_V_read_reg_127 = w_V.read();
    }
}

void MUL_DP::thread_ap_block_pp0_stage0_flag00000000() {
    ap_block_pp0_stage0_flag00000000 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void MUL_DP::thread_ap_block_pp0_stage0_flag00011001() {
    ap_block_pp0_stage0_flag00011001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void MUL_DP::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void MUL_DP::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void MUL_DP::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void MUL_DP::thread_ap_block_state4_pp0_stage0_iter3() {
    ap_block_state4_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void MUL_DP::thread_ap_return_0() {
    ap_return_0 = loc_V_fu_111_p2.read();
}

void MUL_DP::thread_ap_return_1() {
    ap_return_1 = loc_V_1_reg_157.read();
}

void MUL_DP::thread_grp_fu_80_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        grp_fu_80_ce = ap_const_logic_1;
    } else {
        grp_fu_80_ce = ap_const_logic_0;
    }
}

void MUL_DP::thread_lhs_V_fu_60_p1() {
    lhs_V_fu_60_p1 = esl_sext<26,25>(p_Result_2_fu_52_p3.read());
}

void MUL_DP::thread_loc_V_1_fu_104_p1() {
    loc_V_1_fu_104_p1 = grp_fu_80_p2.read().range(16-1, 0);
}

void MUL_DP::thread_loc_V_fu_111_p2() {
    loc_V_fu_111_p2 = (!tmp_309_fu_108_p1.read().is_01() || !p_Result_s_reg_152.read().is_01())? sc_lv<16>(): (sc_biguint<16>(tmp_309_fu_108_p1.read()) + sc_biguint<16>(p_Result_s_reg_152.read()));
}

void MUL_DP::thread_p_Result_2_fu_52_p3() {
    p_Result_2_fu_52_p3 = esl_concat<8,17>(a_V.read(), ap_const_lv17_0);
}

void MUL_DP::thread_r_V_fu_68_p2() {
    r_V_fu_68_p2 = (!rhs_V_fu_64_p1.read().is_01() || !lhs_V_fu_60_p1.read().is_01())? sc_lv<26>(): (sc_bigint<26>(rhs_V_fu_64_p1.read()) + sc_bigint<26>(lhs_V_fu_60_p1.read()));
}

void MUL_DP::thread_rhs_V_fu_64_p1() {
    rhs_V_fu_64_p1 = esl_sext<26,8>(b_V.read());
}

void MUL_DP::thread_tmp_309_fu_108_p1() {
    tmp_309_fu_108_p1 = esl_zext<16,1>(tmp_1710_reg_147.read());
}

}

