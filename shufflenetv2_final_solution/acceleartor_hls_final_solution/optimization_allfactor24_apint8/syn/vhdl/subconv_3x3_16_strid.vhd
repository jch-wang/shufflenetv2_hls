-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_16_strid is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_16_strid is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_134_fu_228_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_134_reg_530 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_171_cast_fu_252_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_171_cast_reg_535 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_138_fu_268_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_138_reg_540 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_5_fu_280_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal co_5_reg_548 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias_V_addr_reg_553 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond8_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_140_fu_319_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_140_reg_558 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_331_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_566 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond9_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_addr_reg_571 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_s_fu_359_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_reg_579 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_5_fu_367_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_143_fu_388_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_143_reg_589 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m_5_fu_400_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_5_reg_597 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_145_fu_450_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_145_reg_602 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond4_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_5_fu_456_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_5_reg_607 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal n_5_fu_482_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_5_reg_620 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_load_reg_630 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal input_V_load_reg_635 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_524_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal co_reg_110 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_reg_121 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_133 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_s_reg_145 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_157 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_09_1_reg_168 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_180 : STD_LOGIC_VECTOR (1 downto 0);
    signal co_cast7_fu_191_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_179_cast_fu_348_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_187_cast_fu_471_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_188_cast_fu_512_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_fu_200_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_133_fu_212_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl4_cast_fu_224_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_208_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_135_fu_234_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_fu_242_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal co_cast7_cast_fu_196_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_136_fu_246_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_137_fu_256_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_cast1_fu_220_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_264_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_cast6_cast_fu_286_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_139_fu_290_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_94_fu_295_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_95_fu_307_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_303_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl6_cast_fu_315_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_cast5_cast_fu_339_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_141_fu_343_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal m_cast4_cast_fu_373_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_142_fu_377_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_96_fu_382_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_fu_406_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_cast_fu_412_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_416_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_cast_cast_fu_421_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_144_fu_425_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_97_fu_438_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl8_cast_fu_430_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl9_cast_fu_446_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal n_cast3_cast_fu_462_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_146_fu_466_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp2_fu_488_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_494_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_498_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_cast_cast_fu_503_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_147_fu_507_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component ShuffleNetV2_mac_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mac_cud_x_U417 : component ShuffleNetV2_mac_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => weight_V_load_reg_630,
        din1 => input_V_load_reg_635,
        din2 => p_09_1_reg_168,
        dout => grp_fu_524_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_325_p2 = ap_const_lv1_1))) then 
                co_reg_110 <= co_5_reg_548;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_110 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    h_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_274_p2 = ap_const_lv1_0))) then 
                h_reg_121 <= ap_const_lv4_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_353_p2 = ap_const_lv1_1))) then 
                h_reg_121 <= h_5_fu_367_p2;
            end if; 
        end if;
    end process;

    m_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_476_p2))) then 
                m_reg_157 <= m_5_reg_597;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_353_p2))) then 
                m_reg_157 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_394_p2))) then 
                n_reg_180 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                n_reg_180 <= n_5_reg_620;
            end if; 
        end if;
    end process;

    p_09_1_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_394_p2))) then 
                p_09_1_reg_168 <= p_s_reg_145;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_09_1_reg_168 <= grp_fu_524_p3;
            end if; 
        end if;
    end process;

    p_s_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_476_p2))) then 
                p_s_reg_145 <= p_09_1_reg_168;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_353_p2))) then 
                p_s_reg_145 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    w_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond9_fu_325_p2))) then 
                w_reg_133 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                w_reg_133 <= w_5_reg_607;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_274_p2 = ap_const_lv1_0))) then
                bias_V_addr_reg_553 <= co_cast7_fu_191_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_5_reg_548 <= co_5_fu_280_p2;
                    tmp_134_reg_530(10 downto 1) <= tmp_134_fu_228_p2(10 downto 1);
                    tmp_138_reg_540(9 downto 1) <= tmp_138_fu_268_p2(9 downto 1);
                tmp_171_cast_reg_535 <= tmp_171_cast_fu_252_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                input_V_load_reg_635 <= input_V_q0;
                weight_V_load_reg_630 <= weight_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_5_reg_597 <= m_5_fu_400_p2;
                tmp_143_reg_589 <= tmp_143_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_5_reg_620 <= n_5_fu_482_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_V_addr_reg_571 <= tmp_179_cast_fu_348_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_140_reg_558(13 downto 1) <= tmp_140_fu_319_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_394_p2))) then
                    tmp_145_reg_602(14 downto 1) <= tmp_145_fu_450_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond9_fu_325_p2))) then
                    tmp_reg_566(4 downto 1) <= tmp_fu_331_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_353_p2))) then
                    tmp_s_reg_579(4 downto 1) <= tmp_s_fu_359_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond4_fu_394_p2))) then
                w_5_reg_607 <= w_5_fu_456_p2;
            end if;
        end if;
    end process;
    tmp_134_reg_530(0) <= '0';
    tmp_138_reg_540(0) <= '0';
    tmp_140_reg_558(0) <= '0';
    tmp_reg_566(0) <= '0';
    tmp_s_reg_579(0) <= '0';
    tmp_145_reg_602(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond8_fu_274_p2, ap_CS_fsm_state3, exitcond9_fu_325_p2, ap_CS_fsm_state4, exitcond3_fu_353_p2, ap_CS_fsm_state5, exitcond4_fu_394_p2, ap_CS_fsm_state6, exitcond_fu_476_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_274_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_325_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_353_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_394_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_476_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond8_fu_274_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_274_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond8_fu_274_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_274_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_553;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_5_fu_280_p2 <= std_logic_vector(unsigned(co_reg_110) + unsigned(ap_const_lv6_1));
    co_cast7_cast_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_110),9));
    co_cast7_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_110),32));
    exitcond3_fu_353_p2 <= "1" when (w_reg_133 = ap_const_lv4_9) else "0";
    exitcond4_fu_394_p2 <= "1" when (m_reg_157 = ap_const_lv2_3) else "0";
    exitcond8_fu_274_p2 <= "1" when (co_reg_110 = ap_const_lv6_30) else "0";
    exitcond9_fu_325_p2 <= "1" when (h_reg_121 = ap_const_lv4_9) else "0";
    exitcond_fu_476_p2 <= "1" when (n_reg_180 = ap_const_lv2_3) else "0";
    h_5_fu_367_p2 <= std_logic_vector(unsigned(h_reg_121) + unsigned(ap_const_lv4_1));
    h_cast6_cast_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_121),10));
    input_V_address0 <= tmp_188_cast_fu_512_p1(14 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_5_fu_400_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(m_reg_157));
    m_cast4_cast_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_157),10));
    n_5_fu_482_p2 <= std_logic_vector(unsigned(n_reg_180) + unsigned(ap_const_lv2_1));
    n_cast3_cast_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_180),10));
    output_V_address0 <= output_V_addr_reg_571;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= std_logic_vector(unsigned(bias_V_q0) + unsigned(p_s_reg_145));

    output_V_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl2_cast_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_135_fu_234_p3),9));
    p_shl3_cast_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_132_fu_200_p3),11));
    p_shl4_cast1_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_133_fu_212_p3),10));
    p_shl4_cast_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_133_fu_212_p3),11));
    p_shl5_cast_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_94_fu_295_p3),14));
    p_shl6_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_95_fu_307_p3),14));
    p_shl8_cast_fu_430_p3 <= (tmp_144_fu_425_p2 & ap_const_lv4_0);
    p_shl9_cast_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_97_fu_438_p3),15));
    p_shl_cast_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_137_fu_256_p3),10));
        tmp1_cast_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_406_p2),5));

    tmp1_fu_406_p2 <= (m_reg_157 xor ap_const_lv2_2);
        tmp2_cast_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_488_p2),5));

    tmp2_fu_488_p2 <= (n_reg_180 xor ap_const_lv2_2);
    tmp_132_fu_200_p3 <= (co_reg_110 & ap_const_lv4_0);
    tmp_133_fu_212_p3 <= (co_reg_110 & ap_const_lv1_0);
    tmp_134_fu_228_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_224_p1) + unsigned(p_shl3_cast_fu_208_p1));
    tmp_135_fu_234_p3 <= (co_reg_110 & ap_const_lv2_0);
    tmp_136_fu_246_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_242_p1) - unsigned(co_cast7_cast_fu_196_p1));
    tmp_137_fu_256_p3 <= (co_reg_110 & ap_const_lv3_0);
    tmp_138_fu_268_p2 <= std_logic_vector(unsigned(p_shl4_cast1_fu_220_p1) + unsigned(p_shl_cast_fu_264_p1));
    tmp_139_fu_290_p2 <= std_logic_vector(unsigned(h_cast6_cast_fu_286_p1) + unsigned(tmp_138_reg_540));
    tmp_140_fu_319_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_303_p1) + unsigned(p_shl6_cast_fu_315_p1));
    tmp_141_fu_343_p2 <= std_logic_vector(unsigned(tmp_140_reg_558) + unsigned(w_cast5_cast_fu_339_p1));
    tmp_142_fu_377_p2 <= std_logic_vector(unsigned(m_cast4_cast_fu_373_p1) + unsigned(tmp_171_cast_reg_535));
    tmp_143_fu_388_p2 <= std_logic_vector(unsigned(tmp_96_fu_382_p2) - unsigned(tmp_142_fu_377_p2));
    tmp_144_fu_425_p2 <= std_logic_vector(unsigned(tmp_7_cast_cast_fu_421_p1) + unsigned(tmp_134_reg_530));
    tmp_145_fu_450_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_430_p3) + unsigned(p_shl9_cast_fu_446_p1));
    tmp_146_fu_466_p2 <= std_logic_vector(unsigned(tmp_143_reg_589) + unsigned(n_cast3_cast_fu_462_p1));
    tmp_147_fu_507_p2 <= std_logic_vector(unsigned(tmp_145_reg_602) + unsigned(tmp_8_cast_cast_fu_503_p1));
        tmp_171_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_136_fu_246_p2),10));

    tmp_179_cast_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_141_fu_343_p2),32));
    tmp_187_cast_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_146_fu_466_p2),32));
    tmp_188_cast_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_147_fu_507_p2),32));
    tmp_7_cast_cast_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_416_p2),11));
    tmp_7_fu_416_p2 <= std_logic_vector(signed(tmp1_cast_fu_412_p1) + signed(tmp_reg_566));
    tmp_8_cast_cast_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_498_p2),15));
    tmp_8_fu_498_p2 <= std_logic_vector(unsigned(tmp_s_reg_579) + unsigned(tmp2_cast_fu_494_p1));
    tmp_94_fu_295_p3 <= (tmp_139_fu_290_p2 & ap_const_lv3_0);
    tmp_95_fu_307_p3 <= (tmp_139_fu_290_p2 & ap_const_lv1_0);
    tmp_96_fu_382_p2 <= std_logic_vector(shift_left(unsigned(tmp_142_fu_377_p2),to_integer(unsigned('0' & ap_const_lv10_2(10-1 downto 0)))));
    tmp_97_fu_438_p3 <= (tmp_144_fu_425_p2 & ap_const_lv1_0);
    tmp_fu_331_p3 <= (h_reg_121 & ap_const_lv1_0);
    tmp_s_fu_359_p3 <= (w_reg_133 & ap_const_lv1_0);
    w_5_fu_456_p2 <= std_logic_vector(unsigned(w_reg_133) + unsigned(ap_const_lv4_1));
    w_cast5_cast_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_133),14));
    weight_V_address0 <= tmp_187_cast_fu_471_p1(9 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
