-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_16_strid_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_23_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_23_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_23_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_22_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_22_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_22_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_11_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_11_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_6_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_5_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_4_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_3_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_2_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_1_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_21_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_21_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_21_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_20_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_20_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_20_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_19_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_19_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_19_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_18_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_18_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_18_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_17_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_17_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_17_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_16_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_16_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_16_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_15_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_15_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_15_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_14_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_14_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_14_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_13_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_13_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_13_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_12_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_12_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_10_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_9_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_8_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_7_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_16_strid_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_56 : STD_LOGIC_VECTOR (12 downto 0) := "0000001010110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul_fu_542_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul_reg_997 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_142_cast_fu_575_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_142_cast_reg_1002 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_119_fu_603_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_119_reg_1007 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_5_fu_615_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal co_5_reg_1015 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias_V_addr_reg_1020 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond8_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal arrayNo_cast_fu_641_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayNo_cast_reg_1025 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_122_fu_679_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_122_reg_1030 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_124_fu_718_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_124_reg_1035 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_730_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_1043 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond9_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_addr_reg_1048 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_s_fu_758_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_reg_1056 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_5_fu_766_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_127_fu_787_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_127_reg_1066 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m_5_fu_799_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_5_reg_1074 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_129_fu_841_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_129_reg_1079 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond2_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_5_fu_847_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_5_reg_1084 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal n_5_fu_873_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_5_reg_1097 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_load_reg_1222 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_4_fu_931_p26 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_1227 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_991_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal co_reg_450 : STD_LOGIC_VECTOR (5 downto 0);
    signal phi_mul_reg_461 : STD_LOGIC_VECTOR (12 downto 0);
    signal h_reg_472 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_484 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_s_reg_496 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_508 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_09_1_reg_519 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_531 : STD_LOGIC_VECTOR (1 downto 0);
    signal co_cast7_fu_548_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_157_cast_fu_747_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_165_cast_fu_862_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_166_cast_fu_903_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_115_fu_557_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_fu_565_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal co_cast7_cast_fu_553_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_116_fu_569_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_117_fu_579_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_118_fu_591_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_599_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_587_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_120_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_121_fu_627_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal arrayNo_fu_633_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_86_fu_645_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_87_fu_655_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_88_fu_667_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl3_cast_fu_663_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_675_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal h_cast6_cast_fu_685_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_123_fu_689_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_89_fu_694_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_90_fu_706_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_702_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl6_cast_fu_714_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_cast5_cast_fu_738_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_125_fu_742_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal m_cast4_cast_fu_772_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_126_fu_776_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_91_fu_781_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_fu_805_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_cast_fu_811_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_815_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_cast_cast_fu_820_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_128_fu_824_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_92_fu_829_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_93_fu_835_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal n_cast3_cast_fu_853_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_130_fu_857_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp2_fu_879_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_885_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_889_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_cast_cast_fu_894_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_131_fu_898_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component ShuffleNetV2_mux_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component ShuffleNetV2_mac_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mux_g8j_x_U308 : component ShuffleNetV2_mux_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din1 => ShuffleConvs_1_Downs_23_q0,
        din2 => ShuffleConvs_1_Downs_22_q0,
        din3 => ShuffleConvs_1_Downs_11_q0,
        din4 => ShuffleConvs_1_Downs_6_q0,
        din5 => ShuffleConvs_1_Downs_5_q0,
        din6 => ShuffleConvs_1_Downs_4_q0,
        din7 => ShuffleConvs_1_Downs_3_q0,
        din8 => ShuffleConvs_1_Downs_2_q0,
        din9 => ShuffleConvs_1_Downs_1_q0,
        din10 => ShuffleConvs_1_Downs_q0,
        din11 => ShuffleConvs_1_Downs_21_q0,
        din12 => ShuffleConvs_1_Downs_20_q0,
        din13 => ShuffleConvs_1_Downs_19_q0,
        din14 => ShuffleConvs_1_Downs_18_q0,
        din15 => ShuffleConvs_1_Downs_17_q0,
        din16 => ShuffleConvs_1_Downs_16_q0,
        din17 => ShuffleConvs_1_Downs_15_q0,
        din18 => ShuffleConvs_1_Downs_14_q0,
        din19 => ShuffleConvs_1_Downs_13_q0,
        din20 => ShuffleConvs_1_Downs_12_q0,
        din21 => ShuffleConvs_1_Downs_10_q0,
        din22 => ShuffleConvs_1_Downs_9_q0,
        din23 => ShuffleConvs_1_Downs_8_q0,
        din24 => ShuffleConvs_1_Downs_7_q0,
        din25 => arrayNo_cast_reg_1025,
        dout => tmp_4_fu_931_p26);

    ShuffleNetV2_mac_cud_x_U309 : component ShuffleNetV2_mac_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_4_reg_1227,
        din1 => weight_V_load_reg_1222,
        din2 => p_09_1_reg_519,
        dout => grp_fu_991_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_450_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_724_p2 = ap_const_lv1_1))) then 
                co_reg_450 <= co_5_reg_1015;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_450 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    h_reg_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_609_p2 = ap_const_lv1_0))) then 
                h_reg_472 <= ap_const_lv4_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_752_p2 = ap_const_lv1_1))) then 
                h_reg_472 <= h_5_fu_766_p2;
            end if; 
        end if;
    end process;

    m_reg_508_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_867_p2))) then 
                m_reg_508 <= m_5_reg_1074;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_752_p2))) then 
                m_reg_508 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_531_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_793_p2))) then 
                n_reg_531 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                n_reg_531 <= n_5_reg_1097;
            end if; 
        end if;
    end process;

    p_09_1_reg_519_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_793_p2))) then 
                p_09_1_reg_519 <= p_s_reg_496;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_09_1_reg_519 <= grp_fu_991_p3;
            end if; 
        end if;
    end process;

    p_s_reg_496_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_867_p2))) then 
                p_s_reg_496 <= p_09_1_reg_519;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_752_p2))) then 
                p_s_reg_496 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_461_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_724_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_461 <= next_mul_reg_997;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_461 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    w_reg_484_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond9_fu_724_p2))) then 
                w_reg_484 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                w_reg_484 <= w_5_reg_1084;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_609_p2 = ap_const_lv1_0))) then
                    arrayNo_cast_reg_1025(5 downto 0) <= arrayNo_cast_fu_641_p1(5 downto 0);
                bias_V_addr_reg_1020 <= co_cast7_fu_548_p1(6 - 1 downto 0);
                    tmp_122_reg_1030(10 downto 1) <= tmp_122_fu_679_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_5_reg_1015 <= co_5_fu_615_p2;
                next_mul_reg_997 <= next_mul_fu_542_p2;
                    tmp_119_reg_1007(9 downto 1) <= tmp_119_fu_603_p2(9 downto 1);
                tmp_142_cast_reg_1002 <= tmp_142_cast_fu_575_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_5_reg_1074 <= m_5_fu_799_p2;
                tmp_127_reg_1066 <= tmp_127_fu_787_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_5_reg_1097 <= n_5_fu_873_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_V_addr_reg_1048 <= tmp_157_cast_fu_747_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_124_reg_1035(13 downto 1) <= tmp_124_fu_718_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_793_p2))) then
                    tmp_129_reg_1079(10 downto 1) <= tmp_129_fu_841_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_4_reg_1227 <= tmp_4_fu_931_p26;
                weight_V_load_reg_1222 <= weight_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond9_fu_724_p2))) then
                    tmp_reg_1043(4 downto 1) <= tmp_fu_730_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_752_p2))) then
                    tmp_s_reg_1056(4 downto 1) <= tmp_s_fu_758_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond2_fu_793_p2))) then
                w_5_reg_1084 <= w_5_fu_847_p2;
            end if;
        end if;
    end process;
    tmp_119_reg_1007(0) <= '0';
    arrayNo_cast_reg_1025(31 downto 6) <= "00000000000000000000000000";
    tmp_122_reg_1030(0) <= '0';
    tmp_124_reg_1035(0) <= '0';
    tmp_reg_1043(0) <= '0';
    tmp_s_reg_1056(0) <= '0';
    tmp_129_reg_1079(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond8_fu_609_p2, ap_CS_fsm_state3, exitcond9_fu_724_p2, ap_CS_fsm_state4, exitcond1_fu_752_p2, ap_CS_fsm_state5, exitcond2_fu_793_p2, ap_CS_fsm_state6, exitcond_fu_867_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_609_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_724_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_752_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_793_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_867_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ShuffleConvs_1_Downs_10_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_10_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_10_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_11_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_11_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_11_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_12_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_12_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_12_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_13_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_13_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_13_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_14_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_14_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_14_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_15_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_15_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_15_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_16_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_16_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_16_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_17_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_17_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_17_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_18_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_18_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_18_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_19_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_19_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_19_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_1_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_1_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_20_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_20_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_20_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_21_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_21_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_21_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_22_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_22_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_22_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_23_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_23_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_23_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_2_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_2_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_3_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_3_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_3_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_4_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_4_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_5_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_5_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_5_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_6_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_6_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_6_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_7_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_7_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_7_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_8_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_8_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_8_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_9_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_9_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_9_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_address0 <= tmp_166_cast_fu_903_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond8_fu_609_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_609_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond8_fu_609_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_609_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayNo_cast_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayNo_fu_633_p3),32));
    arrayNo_fu_633_p3 <= 
        co_reg_450 when (tmp_120_fu_621_p2(0) = '1') else 
        tmp_121_fu_627_p2;
    bias_V_address0 <= bias_V_addr_reg_1020;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_5_fu_615_p2 <= std_logic_vector(unsigned(co_reg_450) + unsigned(ap_const_lv6_1));
    co_cast7_cast_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_450),9));
    co_cast7_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_450),32));
    exitcond1_fu_752_p2 <= "1" when (w_reg_484 = ap_const_lv4_9) else "0";
    exitcond2_fu_793_p2 <= "1" when (m_reg_508 = ap_const_lv2_3) else "0";
    exitcond8_fu_609_p2 <= "1" when (co_reg_450 = ap_const_lv6_30) else "0";
    exitcond9_fu_724_p2 <= "1" when (h_reg_472 = ap_const_lv4_9) else "0";
    exitcond_fu_867_p2 <= "1" when (n_reg_531 = ap_const_lv2_3) else "0";
    h_5_fu_766_p2 <= std_logic_vector(unsigned(h_reg_472) + unsigned(ap_const_lv4_1));
    h_cast6_cast_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_472),10));
    m_5_fu_799_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(m_reg_508));
    m_cast4_cast_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_508),10));
    n_5_fu_873_p2 <= std_logic_vector(unsigned(n_reg_531) + unsigned(ap_const_lv2_1));
    n_cast3_cast_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_531),10));
    next_mul_fu_542_p2 <= std_logic_vector(unsigned(phi_mul_reg_461) + unsigned(ap_const_lv13_56));
    output_V_address0 <= output_V_addr_reg_1048;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= std_logic_vector(unsigned(bias_V_q0) + unsigned(p_s_reg_496));

    output_V_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_118_fu_591_p3),10));
    p_shl2_cast_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_115_fu_557_p3),9));
    p_shl3_cast_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_87_fu_655_p3),11));
    p_shl4_cast_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_88_fu_667_p3),11));
    p_shl5_cast_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_89_fu_694_p3),14));
    p_shl6_cast_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_90_fu_706_p3),14));
    p_shl_cast_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_117_fu_579_p3),10));
        tmp1_cast_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_805_p2),5));

    tmp1_fu_805_p2 <= (m_reg_508 xor ap_const_lv2_2);
        tmp2_cast_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_879_p2),5));

    tmp2_fu_879_p2 <= (n_reg_531 xor ap_const_lv2_2);
    tmp_115_fu_557_p3 <= (co_reg_450 & ap_const_lv2_0);
    tmp_116_fu_569_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_565_p1) - unsigned(co_cast7_cast_fu_553_p1));
    tmp_117_fu_579_p3 <= (co_reg_450 & ap_const_lv3_0);
    tmp_118_fu_591_p3 <= (co_reg_450 & ap_const_lv1_0);
    tmp_119_fu_603_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_599_p1) + unsigned(p_shl_cast_fu_587_p1));
    tmp_120_fu_621_p2 <= "1" when (unsigned(co_reg_450) < unsigned(ap_const_lv6_18)) else "0";
    tmp_121_fu_627_p2 <= std_logic_vector(unsigned(co_reg_450) + unsigned(ap_const_lv6_28));
    tmp_122_fu_679_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_663_p1) + unsigned(p_shl4_cast_fu_675_p1));
    tmp_123_fu_689_p2 <= std_logic_vector(unsigned(h_cast6_cast_fu_685_p1) + unsigned(tmp_119_reg_1007));
    tmp_124_fu_718_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_702_p1) + unsigned(p_shl6_cast_fu_714_p1));
    tmp_125_fu_742_p2 <= std_logic_vector(unsigned(tmp_124_reg_1035) + unsigned(w_cast5_cast_fu_738_p1));
    tmp_126_fu_776_p2 <= std_logic_vector(unsigned(m_cast4_cast_fu_772_p1) + unsigned(tmp_142_cast_reg_1002));
    tmp_127_fu_787_p2 <= std_logic_vector(unsigned(tmp_91_fu_781_p2) - unsigned(tmp_126_fu_776_p2));
    tmp_128_fu_824_p2 <= std_logic_vector(unsigned(tmp_6_cast_cast_fu_820_p1) + unsigned(tmp_122_reg_1030));
    tmp_129_fu_841_p2 <= std_logic_vector(unsigned(tmp_92_fu_829_p2) + unsigned(tmp_93_fu_835_p2));
    tmp_130_fu_857_p2 <= std_logic_vector(unsigned(tmp_127_reg_1066) + unsigned(n_cast3_cast_fu_853_p1));
    tmp_131_fu_898_p2 <= std_logic_vector(unsigned(tmp_129_reg_1079) + unsigned(tmp_8_cast_cast_fu_894_p1));
        tmp_142_cast_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_116_fu_569_p2),10));

    tmp_157_cast_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_125_fu_742_p2),32));
    tmp_165_cast_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_130_fu_857_p2),32));
    tmp_166_cast_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_131_fu_898_p2),32));
    tmp_6_cast_cast_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_815_p2),11));
    tmp_6_fu_815_p2 <= std_logic_vector(signed(tmp1_cast_fu_811_p1) + signed(tmp_reg_1043));
    tmp_86_fu_645_p4 <= phi_mul_reg_461(12 downto 11);
    tmp_87_fu_655_p3 <= (tmp_86_fu_645_p4 & ap_const_lv4_0);
    tmp_88_fu_667_p3 <= (tmp_86_fu_645_p4 & ap_const_lv1_0);
    tmp_89_fu_694_p3 <= (tmp_123_fu_689_p2 & ap_const_lv3_0);
    tmp_8_cast_cast_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_889_p2),11));
    tmp_8_fu_889_p2 <= std_logic_vector(unsigned(tmp_s_reg_1056) + unsigned(tmp2_cast_fu_885_p1));
    tmp_90_fu_706_p3 <= (tmp_123_fu_689_p2 & ap_const_lv1_0);
    tmp_91_fu_781_p2 <= std_logic_vector(shift_left(unsigned(tmp_126_fu_776_p2),to_integer(unsigned('0' & ap_const_lv10_2(10-1 downto 0)))));
    tmp_92_fu_829_p2 <= std_logic_vector(shift_left(unsigned(tmp_128_fu_824_p2),to_integer(unsigned('0' & ap_const_lv11_4(11-1 downto 0)))));
    tmp_93_fu_835_p2 <= std_logic_vector(shift_left(unsigned(tmp_128_fu_824_p2),to_integer(unsigned('0' & ap_const_lv11_1(11-1 downto 0)))));
    tmp_fu_730_p3 <= (h_reg_472 & ap_const_lv1_0);
    tmp_s_fu_758_p3 <= (w_reg_484 & ap_const_lv1_0);
    w_5_fu_847_p2 <= std_logic_vector(unsigned(w_reg_484) + unsigned(ap_const_lv4_1));
    w_cast5_cast_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_484),14));
    weight_V_address0 <= tmp_165_cast_fu_862_p1(9 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
