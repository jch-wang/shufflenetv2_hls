-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_8_stride is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_23_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_23_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_23_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_22_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_22_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_22_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_11_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_11_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_6_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_6_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_5_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_5_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_4_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_4_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_3_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_2_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_1_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_21_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_21_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_21_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_20_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_20_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_20_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_19_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_19_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_19_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_18_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_18_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_18_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_17_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_17_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_17_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_16_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_16_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_16_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_15_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_15_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_15_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_14_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_14_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_14_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_13_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_13_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_13_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_12_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_12_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_10_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_10_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_9_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_9_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_8_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_8_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_7_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_7_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_8_stride is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv15_AB : STD_LOGIC_VECTOR (14 downto 0) := "000000010101011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv7_18 : STD_LOGIC_VECTOR (6 downto 0) := "0011000";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul_fu_546_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal next_mul_reg_1013 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_28_cast_fu_579_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_28_cast_reg_1018 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_31_cast_fu_613_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_31_cast_reg_1023 : STD_LOGIC_VECTOR (11 downto 0);
    signal co_1_fu_623_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_1_reg_1031 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias_V_addr_reg_1036 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal arrayNo_cast_fu_629_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayNo_cast_reg_1041 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_667_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_27_reg_1046 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_30_fu_702_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_30_reg_1051 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_714_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_1059 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_urem_fu_734_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_V_addr_reg_1069 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_2_fu_762_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_reg_1077 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond3_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_1_fu_770_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_35_fu_791_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_35_reg_1087 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m_1_fu_803_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_1_reg_1095 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_39_fu_857_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_39_reg_1100 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond4_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_1_fu_863_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_1_reg_1105 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal n_1_fu_889_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_1_reg_1118 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_load_reg_1243 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_1_fu_947_p26 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1248 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1007_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal co_reg_442 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul_reg_453 : STD_LOGIC_VECTOR (14 downto 0);
    signal phi_urem_reg_464 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_reg_476 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_488 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_s_reg_500 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_512 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_09_1_reg_523 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_535 : STD_LOGIC_VECTOR (1 downto 0);
    signal co_cast7_fu_552_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_cast_fu_751_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_cast_fu_878_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_cast_fu_919_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_561_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_569_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_cast7_cast_fu_557_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_23_fu_573_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_fu_583_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_25_fu_595_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_591_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_603_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_26_fu_607_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_20_fu_633_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_21_fu_643_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_22_fu_655_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl3_cast_fu_651_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_663_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal h_cast6_cast_fu_673_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_28_fu_677_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_29_fu_682_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_cast_fu_686_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl6_cast_fu_694_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_urem_fu_722_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_31_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_cast5_cast_fu_742_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_32_fu_746_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal m_cast4_cast_fu_776_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_33_fu_780_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_34_fu_785_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp1_fu_809_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_cast_fu_815_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_819_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_cast_cast_fu_824_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_36_fu_828_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_37_fu_833_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_38_fu_845_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl8_cast_fu_837_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl9_cast_fu_849_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_cast3_cast_fu_869_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_40_fu_873_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_fu_895_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_901_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_905_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_cast_cast_fu_910_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_41_fu_914_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component ShuffleNetV2_mux_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component ShuffleNetV2_mac_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mux_g8j_x_U559 : component ShuffleNetV2_mux_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din1 => ShuffleConvs_2_Downs_23_q0,
        din2 => ShuffleConvs_2_Downs_22_q0,
        din3 => ShuffleConvs_2_Downs_11_q0,
        din4 => ShuffleConvs_2_Downs_6_q0,
        din5 => ShuffleConvs_2_Downs_5_q0,
        din6 => ShuffleConvs_2_Downs_4_q0,
        din7 => ShuffleConvs_2_Downs_3_q0,
        din8 => ShuffleConvs_2_Downs_2_q0,
        din9 => ShuffleConvs_2_Downs_1_q0,
        din10 => ShuffleConvs_2_Downs_q0,
        din11 => ShuffleConvs_2_Downs_21_q0,
        din12 => ShuffleConvs_2_Downs_20_q0,
        din13 => ShuffleConvs_2_Downs_19_q0,
        din14 => ShuffleConvs_2_Downs_18_q0,
        din15 => ShuffleConvs_2_Downs_17_q0,
        din16 => ShuffleConvs_2_Downs_16_q0,
        din17 => ShuffleConvs_2_Downs_15_q0,
        din18 => ShuffleConvs_2_Downs_14_q0,
        din19 => ShuffleConvs_2_Downs_13_q0,
        din20 => ShuffleConvs_2_Downs_12_q0,
        din21 => ShuffleConvs_2_Downs_10_q0,
        din22 => ShuffleConvs_2_Downs_9_q0,
        din23 => ShuffleConvs_2_Downs_8_q0,
        din24 => ShuffleConvs_2_Downs_7_q0,
        din25 => arrayNo_cast_reg_1041,
        dout => tmp_1_fu_947_p26);

    ShuffleNetV2_mac_cud_x_U560 : component ShuffleNetV2_mac_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_1_reg_1248,
        din1 => weight_V_load_reg_1243,
        din2 => p_09_1_reg_523,
        dout => grp_fu_1007_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_708_p2 = ap_const_lv1_1))) then 
                co_reg_442 <= co_1_reg_1031;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_442 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    h_reg_476_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_617_p2 = ap_const_lv1_0))) then 
                h_reg_476 <= ap_const_lv3_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond3_fu_756_p2))) then 
                h_reg_476 <= h_1_fu_770_p2;
            end if; 
        end if;
    end process;

    m_reg_512_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_883_p2))) then 
                m_reg_512 <= m_1_reg_1095;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_756_p2))) then 
                m_reg_512 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_535_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_797_p2))) then 
                n_reg_535 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                n_reg_535 <= n_1_reg_1118;
            end if; 
        end if;
    end process;

    p_09_1_reg_523_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_797_p2))) then 
                p_09_1_reg_523 <= p_s_reg_500;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_09_1_reg_523 <= grp_fu_1007_p3;
            end if; 
        end if;
    end process;

    p_s_reg_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_883_p2))) then 
                p_s_reg_500 <= p_09_1_reg_523;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_756_p2))) then 
                p_s_reg_500 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_453_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_708_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_453 <= next_mul_reg_1013;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_453 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    phi_urem_reg_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_708_p2 = ap_const_lv1_1))) then 
                phi_urem_reg_464 <= idx_urem_fu_734_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_urem_reg_464 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    w_reg_488_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_708_p2))) then 
                w_reg_488 <= ap_const_lv3_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                w_reg_488 <= w_1_reg_1105;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_617_p2 = ap_const_lv1_0))) then
                    arrayNo_cast_reg_1041(6 downto 0) <= arrayNo_cast_fu_629_p1(6 downto 0);
                bias_V_addr_reg_1036 <= co_cast7_fu_552_p1(7 - 1 downto 0);
                    tmp_27_reg_1046(10 downto 1) <= tmp_27_fu_667_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_1_reg_1031 <= co_1_fu_623_p2;
                next_mul_reg_1013 <= next_mul_fu_546_p2;
                tmp_28_cast_reg_1018 <= tmp_28_cast_fu_579_p1;
                    tmp_31_cast_reg_1023(11 downto 1) <= tmp_31_cast_fu_613_p1(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_1_reg_1095 <= m_1_fu_803_p2;
                tmp_35_reg_1087 <= tmp_35_fu_791_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_1_reg_1118 <= n_1_fu_889_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_V_addr_reg_1069 <= tmp_41_cast_fu_751_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_1_reg_1248 <= tmp_1_fu_947_p26;
                weight_V_load_reg_1243 <= weight_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_756_p2))) then
                    tmp_2_reg_1077(3 downto 1) <= tmp_2_fu_762_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_30_reg_1051(12 downto 1) <= tmp_30_fu_702_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_797_p2))) then
                    tmp_39_reg_1100(9 downto 1) <= tmp_39_fu_857_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_708_p2))) then
                    tmp_reg_1059(3 downto 1) <= tmp_fu_714_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond4_fu_797_p2))) then
                w_1_reg_1105 <= w_1_fu_863_p2;
            end if;
        end if;
    end process;
    tmp_31_cast_reg_1023(0) <= '0';
    arrayNo_cast_reg_1041(31 downto 7) <= "0000000000000000000000000";
    tmp_27_reg_1046(0) <= '0';
    tmp_30_reg_1051(0) <= '0';
    tmp_reg_1059(0) <= '0';
    tmp_2_reg_1077(0) <= '0';
    tmp_39_reg_1100(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_617_p2, ap_CS_fsm_state3, exitcond2_fu_708_p2, ap_CS_fsm_state4, exitcond3_fu_756_p2, ap_CS_fsm_state5, exitcond4_fu_797_p2, ap_CS_fsm_state6, exitcond_fu_883_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_617_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_708_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond3_fu_756_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_797_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_883_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ShuffleConvs_2_Downs_10_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_10_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_10_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_11_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_11_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_11_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_12_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_12_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_12_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_13_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_13_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_13_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_14_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_14_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_14_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_15_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_15_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_15_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_16_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_16_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_16_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_17_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_17_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_17_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_18_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_18_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_18_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_19_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_19_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_19_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_1_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_1_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_20_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_20_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_20_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_21_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_21_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_21_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_22_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_22_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_22_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_23_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_23_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_23_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_2_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_2_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_3_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_3_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_3_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_4_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_4_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_5_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_5_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_5_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_6_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_6_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_6_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_7_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_7_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_7_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_8_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_8_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_8_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_9_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_9_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_9_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_address0 <= tmp_50_cast_fu_919_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_617_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_617_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_617_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_617_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayNo_cast_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_urem_reg_464),32));
    bias_V_address0 <= bias_V_addr_reg_1036;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_1_fu_623_p2 <= std_logic_vector(unsigned(co_reg_442) + unsigned(ap_const_lv7_1));
    co_cast7_cast_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_442),10));
    co_cast7_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_442),32));
    exitcond1_fu_617_p2 <= "1" when (co_reg_442 = ap_const_lv7_60) else "0";
    exitcond2_fu_708_p2 <= "1" when (h_reg_476 = ap_const_lv3_5) else "0";
    exitcond3_fu_756_p2 <= "1" when (w_reg_488 = ap_const_lv3_5) else "0";
    exitcond4_fu_797_p2 <= "1" when (m_reg_512 = ap_const_lv2_3) else "0";
    exitcond_fu_883_p2 <= "1" when (n_reg_535 = ap_const_lv2_3) else "0";
    h_1_fu_770_p2 <= std_logic_vector(unsigned(h_reg_476) + unsigned(ap_const_lv3_1));
    h_cast6_cast_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_476),12));
    idx_urem_fu_734_p3 <= 
        next_urem_fu_722_p2 when (tmp_31_fu_728_p2(0) = '1') else 
        ap_const_lv7_0;
    m_1_fu_803_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(m_reg_512));
    m_cast4_cast_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_512),11));
    n_1_fu_889_p2 <= std_logic_vector(unsigned(n_reg_535) + unsigned(ap_const_lv2_1));
    n_cast3_cast_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_535),11));
    next_mul_fu_546_p2 <= std_logic_vector(unsigned(phi_mul_reg_453) + unsigned(ap_const_lv15_AB));
    next_urem_fu_722_p2 <= std_logic_vector(unsigned(phi_urem_reg_464) + unsigned(ap_const_lv7_1));
    output_V_address0 <= output_V_addr_reg_1069;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= std_logic_vector(unsigned(bias_V_q0) + unsigned(p_s_reg_500));

    output_V_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_595_p3),11));
    p_shl2_cast_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_561_p3),10));
    p_shl3_cast_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_643_p3),11));
    p_shl4_cast_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_655_p3),11));
    p_shl5_cast_fu_686_p3 <= (tmp_29_fu_682_p1 & ap_const_lv3_0);
    p_shl6_cast_fu_694_p3 <= (tmp_28_fu_677_p2 & ap_const_lv1_0);
    p_shl8_cast_fu_837_p3 <= (tmp_37_fu_833_p1 & ap_const_lv3_0);
    p_shl9_cast_fu_849_p3 <= (tmp_38_fu_845_p1 & ap_const_lv1_0);
    p_shl_cast_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_583_p3),11));
        tmp1_cast_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_809_p2),4));

    tmp1_fu_809_p2 <= (m_reg_512 xor ap_const_lv2_2);
        tmp2_cast_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_895_p2),4));

    tmp2_fu_895_p2 <= (n_reg_535 xor ap_const_lv2_2);
    tmp_20_fu_633_p4 <= phi_mul_reg_453(14 downto 12);
    tmp_21_fu_643_p3 <= (tmp_20_fu_633_p4 & ap_const_lv3_0);
    tmp_22_fu_655_p3 <= (tmp_20_fu_633_p4 & ap_const_lv1_0);
    tmp_23_fu_573_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_569_p1) - unsigned(co_cast7_cast_fu_557_p1));
    tmp_24_fu_583_p3 <= (co_reg_442 & ap_const_lv3_0);
    tmp_25_fu_595_p3 <= (co_reg_442 & ap_const_lv1_0);
    tmp_26_fu_607_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_591_p1) - unsigned(p_shl1_cast_fu_603_p1));
    tmp_27_fu_667_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_651_p1) + unsigned(p_shl4_cast_fu_663_p1));
        tmp_28_cast_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_23_fu_573_p2),11));

    tmp_28_fu_677_p2 <= std_logic_vector(unsigned(h_cast6_cast_fu_673_p1) + unsigned(tmp_31_cast_reg_1023));
    tmp_29_fu_682_p1 <= tmp_28_fu_677_p2(10 - 1 downto 0);
    tmp_2_fu_762_p3 <= (w_reg_488 & ap_const_lv1_0);
    tmp_30_fu_702_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_686_p3) - unsigned(p_shl6_cast_fu_694_p3));
        tmp_31_cast_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_26_fu_607_p2),12));

    tmp_31_fu_728_p2 <= "1" when (unsigned(next_urem_fu_722_p2) < unsigned(ap_const_lv7_18)) else "0";
    tmp_32_fu_746_p2 <= std_logic_vector(unsigned(tmp_30_reg_1051) + unsigned(w_cast5_cast_fu_742_p1));
    tmp_33_fu_780_p2 <= std_logic_vector(unsigned(m_cast4_cast_fu_776_p1) + unsigned(tmp_28_cast_reg_1018));
    tmp_34_fu_785_p2 <= std_logic_vector(shift_left(unsigned(tmp_33_fu_780_p2),to_integer(unsigned('0' & ap_const_lv11_2(11-1 downto 0)))));
    tmp_35_fu_791_p2 <= std_logic_vector(unsigned(tmp_34_fu_785_p2) - unsigned(tmp_33_fu_780_p2));
    tmp_36_fu_828_p2 <= std_logic_vector(unsigned(tmp_5_cast_cast_fu_824_p1) + unsigned(tmp_27_reg_1046));
    tmp_37_fu_833_p1 <= tmp_36_fu_828_p2(7 - 1 downto 0);
    tmp_38_fu_845_p1 <= tmp_36_fu_828_p2(9 - 1 downto 0);
    tmp_39_fu_857_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_837_p3) + unsigned(p_shl9_cast_fu_849_p3));
    tmp_40_fu_873_p2 <= std_logic_vector(unsigned(tmp_35_reg_1087) + unsigned(n_cast3_cast_fu_869_p1));
    tmp_41_cast_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_746_p2),32));
    tmp_41_fu_914_p2 <= std_logic_vector(unsigned(tmp_39_reg_1100) + unsigned(tmp_8_cast_cast_fu_910_p1));
    tmp_49_cast_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_fu_873_p2),32));
    tmp_50_cast_fu_919_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_914_p2),32));
    tmp_5_cast_cast_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_819_p2),11));
    tmp_5_fu_819_p2 <= std_logic_vector(signed(tmp1_cast_fu_815_p1) + signed(tmp_reg_1059));
    tmp_8_cast_cast_fu_910_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_905_p2),10));
    tmp_8_fu_905_p2 <= std_logic_vector(unsigned(tmp_2_reg_1077) + unsigned(tmp2_cast_fu_901_p1));
    tmp_fu_714_p3 <= (h_reg_476 & ap_const_lv1_0);
    tmp_s_fu_561_p3 <= (co_reg_442 & ap_const_lv2_0);
    w_1_fu_863_p2 <= std_logic_vector(unsigned(w_reg_488) + unsigned(ap_const_lv3_1));
    w_cast5_cast_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_488),13));
    weight_V_address0 <= tmp_49_cast_fu_878_p1(10 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
