-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_32_strid_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_23_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_23_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_23_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_22_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_22_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_22_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_11_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_11_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_6_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_6_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_5_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_4_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_4_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_3_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_2_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_1_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_21_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_21_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_21_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_20_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_20_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_20_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_19_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_19_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_19_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_18_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_18_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_18_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_17_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_17_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_17_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_16_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_16_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_16_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_15_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_15_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_15_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_14_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_14_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_14_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_13_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_13_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_13_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_12_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_12_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_10_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_10_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_9_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_9_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_8_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_8_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_7_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_7_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_32_strid_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_102_cast_fu_535_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_102_cast_reg_893 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_88_fu_563_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_88_reg_898 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_4_fu_575_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_4_reg_906 : STD_LOGIC_VECTOR (4 downto 0);
    signal bias_V_addr_reg_911 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond4_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_90_fu_610_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_90_reg_916 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_622_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_924 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond5_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_addr_reg_929 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_s_fu_650_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_reg_937 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond6_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_4_fu_658_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_93_fu_679_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_93_reg_947 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m_4_fu_691_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_4_reg_955 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_96_fu_736_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_96_reg_960 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond7_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_4_fu_742_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_4_reg_965 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal n_4_fu_768_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_4_reg_978 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_load_reg_1103 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_3_fu_826_p26 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_1108 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_887_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal co_reg_426 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_438 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_450 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_s_reg_462 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_474 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_09_1_reg_485 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_497 : STD_LOGIC_VECTOR (1 downto 0);
    signal co_cast7_fu_508_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_110_cast_fu_639_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_117_cast_fu_757_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_118_cast_fu_798_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_fu_517_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_fu_525_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal co_cast7_cast_fu_513_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_85_fu_529_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_86_fu_539_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_87_fu_551_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_559_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_547_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_cast6_cast_fu_581_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_89_fu_585_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_81_fu_598_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_590_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl4_cast_fu_606_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_cast5_cast_fu_630_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_91_fu_634_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal m_cast4_cast_fu_664_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_92_fu_668_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_82_fu_673_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_697_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_cast_fu_703_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_707_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_94_fu_712_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_95_fu_724_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl7_cast_fu_732_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl6_cast_fu_720_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal n_cast3_cast_fu_748_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_97_fu_752_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_774_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_780_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_784_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_cast_cast_fu_789_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_98_fu_793_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component ShuffleNetV2_mux_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component ShuffleNetV2_mac_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mux_eOg_x_U62 : component ShuffleNetV2_mux_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 5,
        dout_WIDTH => 8)
    port map (
        din1 => ShuffleConvs_0_Downs_23_q0,
        din2 => ShuffleConvs_0_Downs_22_q0,
        din3 => ShuffleConvs_0_Downs_11_q0,
        din4 => ShuffleConvs_0_Downs_6_q0,
        din5 => ShuffleConvs_0_Downs_5_q0,
        din6 => ShuffleConvs_0_Downs_4_q0,
        din7 => ShuffleConvs_0_Downs_3_q0,
        din8 => ShuffleConvs_0_Downs_2_q0,
        din9 => ShuffleConvs_0_Downs_1_q0,
        din10 => ShuffleConvs_0_Downs_q0,
        din11 => ShuffleConvs_0_Downs_21_q0,
        din12 => ShuffleConvs_0_Downs_20_q0,
        din13 => ShuffleConvs_0_Downs_19_q0,
        din14 => ShuffleConvs_0_Downs_18_q0,
        din15 => ShuffleConvs_0_Downs_17_q0,
        din16 => ShuffleConvs_0_Downs_16_q0,
        din17 => ShuffleConvs_0_Downs_15_q0,
        din18 => ShuffleConvs_0_Downs_14_q0,
        din19 => ShuffleConvs_0_Downs_13_q0,
        din20 => ShuffleConvs_0_Downs_12_q0,
        din21 => ShuffleConvs_0_Downs_10_q0,
        din22 => ShuffleConvs_0_Downs_9_q0,
        din23 => ShuffleConvs_0_Downs_8_q0,
        din24 => ShuffleConvs_0_Downs_7_q0,
        din25 => co_reg_426,
        dout => tmp_3_fu_826_p26);

    ShuffleNetV2_mac_cud_x_U63 : component ShuffleNetV2_mac_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_3_reg_1108,
        din1 => weight_V_load_reg_1103,
        din2 => p_09_1_reg_485,
        dout => grp_fu_887_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond5_fu_616_p2 = ap_const_lv1_1))) then 
                co_reg_426 <= co_4_reg_906;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_426 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_reg_438_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_569_p2 = ap_const_lv1_0))) then 
                h_reg_438 <= ap_const_lv5_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_644_p2 = ap_const_lv1_1))) then 
                h_reg_438 <= h_4_fu_658_p2;
            end if; 
        end if;
    end process;

    m_reg_474_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_762_p2))) then 
                m_reg_474 <= m_4_reg_955;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_644_p2))) then 
                m_reg_474 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_497_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond7_fu_685_p2))) then 
                n_reg_497 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                n_reg_497 <= n_4_reg_978;
            end if; 
        end if;
    end process;

    p_09_1_reg_485_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond7_fu_685_p2))) then 
                p_09_1_reg_485 <= p_s_reg_462;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_09_1_reg_485 <= grp_fu_887_p3;
            end if; 
        end if;
    end process;

    p_s_reg_462_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_762_p2))) then 
                p_s_reg_462 <= p_09_1_reg_485;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_644_p2))) then 
                p_s_reg_462 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    w_reg_450_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond5_fu_616_p2))) then 
                w_reg_450 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                w_reg_450 <= w_4_reg_965;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_569_p2 = ap_const_lv1_0))) then
                bias_V_addr_reg_911 <= co_cast7_fu_508_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_4_reg_906 <= co_4_fu_575_p2;
                tmp_102_cast_reg_893 <= tmp_102_cast_fu_535_p1;
                    tmp_88_reg_898(9 downto 1) <= tmp_88_fu_563_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_4_reg_955 <= m_4_fu_691_p2;
                tmp_93_reg_947 <= tmp_93_fu_679_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_4_reg_978 <= n_4_fu_768_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_V_addr_reg_929 <= tmp_110_cast_fu_639_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_3_reg_1108 <= tmp_3_fu_826_p26;
                weight_V_load_reg_1103 <= weight_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_90_reg_916(13 downto 1) <= tmp_90_fu_610_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond7_fu_685_p2))) then
                    tmp_96_reg_960(11 downto 1) <= tmp_96_fu_736_p2(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond5_fu_616_p2))) then
                    tmp_reg_924(5 downto 1) <= tmp_fu_622_p3(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_644_p2))) then
                    tmp_s_reg_937(5 downto 1) <= tmp_s_fu_650_p3(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond7_fu_685_p2))) then
                w_4_reg_965 <= w_4_fu_742_p2;
            end if;
        end if;
    end process;
    tmp_88_reg_898(0) <= '0';
    tmp_90_reg_916(0) <= '0';
    tmp_reg_924(0) <= '0';
    tmp_s_reg_937(0) <= '0';
    tmp_96_reg_960(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_569_p2, ap_CS_fsm_state3, exitcond5_fu_616_p2, ap_CS_fsm_state4, exitcond6_fu_644_p2, ap_CS_fsm_state5, exitcond7_fu_685_p2, ap_CS_fsm_state6, exitcond_fu_762_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_569_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond5_fu_616_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_644_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond7_fu_685_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_762_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ShuffleConvs_0_Downs_10_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_10_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_10_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_11_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_11_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_11_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_12_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_12_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_12_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_13_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_13_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_13_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_14_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_14_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_14_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_15_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_15_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_15_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_16_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_16_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_16_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_17_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_17_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_17_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_18_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_18_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_18_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_19_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_19_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_19_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_1_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_1_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_20_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_20_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_20_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_21_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_21_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_21_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_22_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_22_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_22_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_23_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_23_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_23_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_2_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_2_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_3_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_3_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_3_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_4_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_4_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_5_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_5_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_5_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_6_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_6_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_6_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_7_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_7_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_7_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_8_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_8_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_8_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_9_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_9_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_9_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_address0 <= tmp_118_cast_fu_798_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_569_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_569_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_569_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_569_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_911;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_4_fu_575_p2 <= std_logic_vector(unsigned(co_reg_426) + unsigned(ap_const_lv5_1));
    co_cast7_cast_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_426),8));
    co_cast7_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_426),32));
    exitcond4_fu_569_p2 <= "1" when (co_reg_426 = ap_const_lv5_18) else "0";
    exitcond5_fu_616_p2 <= "1" when (h_reg_438 = ap_const_lv5_11) else "0";
    exitcond6_fu_644_p2 <= "1" when (w_reg_450 = ap_const_lv5_11) else "0";
    exitcond7_fu_685_p2 <= "1" when (m_reg_474 = ap_const_lv2_3) else "0";
    exitcond_fu_762_p2 <= "1" when (n_reg_497 = ap_const_lv2_3) else "0";
    h_4_fu_658_p2 <= std_logic_vector(unsigned(h_reg_438) + unsigned(ap_const_lv5_1));
    h_cast6_cast_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_438),10));
    m_4_fu_691_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(m_reg_474));
    m_cast4_cast_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_474),9));
    n_4_fu_768_p2 <= std_logic_vector(unsigned(n_reg_497) + unsigned(ap_const_lv2_1));
    n_cast3_cast_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_497),9));
    output_V_address0 <= output_V_addr_reg_929;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= std_logic_vector(unsigned(bias_V_q0) + unsigned(p_s_reg_462));

    output_V_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_87_fu_551_p3),10));
    p_shl2_cast_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_84_fu_517_p3),8));
    p_shl3_cast_fu_590_p3 <= (tmp_89_fu_585_p2 & ap_const_lv4_0);
    p_shl4_cast_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_81_fu_598_p3),14));
    p_shl6_cast_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_94_fu_712_p3),12));
    p_shl7_cast_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_95_fu_724_p3),12));
    p_shl_cast_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_86_fu_539_p3),10));
        tmp1_cast_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_697_p2),6));

    tmp1_fu_697_p2 <= (m_reg_474 xor ap_const_lv2_2);
        tmp2_cast_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_774_p2),6));

    tmp2_fu_774_p2 <= (n_reg_497 xor ap_const_lv2_2);
        tmp_102_cast_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_85_fu_529_p2),9));

    tmp_110_cast_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_91_fu_634_p2),32));
    tmp_117_cast_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_97_fu_752_p2),32));
    tmp_118_cast_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_98_fu_793_p2),32));
    tmp_1_cast_cast_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_784_p2),12));
    tmp_1_fu_784_p2 <= std_logic_vector(unsigned(tmp_s_reg_937) + unsigned(tmp2_cast_fu_780_p1));
    tmp_81_fu_598_p3 <= (tmp_89_fu_585_p2 & ap_const_lv1_0);
    tmp_82_fu_673_p2 <= std_logic_vector(shift_left(unsigned(tmp_92_fu_668_p2),to_integer(unsigned('0' & ap_const_lv9_2(9-1 downto 0)))));
    tmp_84_fu_517_p3 <= (co_reg_426 & ap_const_lv2_0);
    tmp_85_fu_529_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_525_p1) - unsigned(co_cast7_cast_fu_513_p1));
    tmp_86_fu_539_p3 <= (co_reg_426 & ap_const_lv4_0);
    tmp_87_fu_551_p3 <= (co_reg_426 & ap_const_lv1_0);
    tmp_88_fu_563_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_559_p1) + unsigned(p_shl_cast_fu_547_p1));
    tmp_89_fu_585_p2 <= std_logic_vector(unsigned(h_cast6_cast_fu_581_p1) + unsigned(tmp_88_reg_898));
    tmp_8_fu_707_p2 <= std_logic_vector(unsigned(tmp_reg_924) + unsigned(tmp1_cast_fu_703_p1));
    tmp_90_fu_610_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_590_p3) + unsigned(p_shl4_cast_fu_606_p1));
    tmp_91_fu_634_p2 <= std_logic_vector(unsigned(tmp_90_reg_916) + unsigned(w_cast5_cast_fu_630_p1));
    tmp_92_fu_668_p2 <= std_logic_vector(unsigned(m_cast4_cast_fu_664_p1) + unsigned(tmp_102_cast_reg_893));
    tmp_93_fu_679_p2 <= std_logic_vector(unsigned(tmp_82_fu_673_p2) - unsigned(tmp_92_fu_668_p2));
    tmp_94_fu_712_p3 <= (tmp_8_fu_707_p2 & ap_const_lv5_0);
    tmp_95_fu_724_p3 <= (tmp_8_fu_707_p2 & ap_const_lv1_0);
    tmp_96_fu_736_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_732_p1) + unsigned(p_shl6_cast_fu_720_p1));
    tmp_97_fu_752_p2 <= std_logic_vector(unsigned(tmp_93_reg_947) + unsigned(n_cast3_cast_fu_748_p1));
    tmp_98_fu_793_p2 <= std_logic_vector(unsigned(tmp_96_reg_960) + unsigned(tmp_1_cast_cast_fu_789_p1));
    tmp_fu_622_p3 <= (h_reg_438 & ap_const_lv1_0);
    tmp_s_fu_650_p3 <= (w_reg_450 & ap_const_lv1_0);
    w_4_fu_742_p2 <= std_logic_vector(unsigned(w_reg_450) + unsigned(ap_const_lv5_1));
    w_cast5_cast_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_450),14));
    weight_V_address0 <= tmp_117_cast_fu_757_p1(8 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
