-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv1_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_weight_V_AWVALID : OUT STD_LOGIC;
    m_axi_weight_V_AWREADY : IN STD_LOGIC;
    m_axi_weight_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_WVALID : OUT STD_LOGIC;
    m_axi_weight_V_WREADY : IN STD_LOGIC;
    m_axi_weight_V_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_weight_V_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_WLAST : OUT STD_LOGIC;
    m_axi_weight_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_ARVALID : OUT STD_LOGIC;
    m_axi_weight_V_ARREADY : IN STD_LOGIC;
    m_axi_weight_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_RVALID : IN STD_LOGIC;
    m_axi_weight_V_RREADY : OUT STD_LOGIC;
    m_axi_weight_V_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_weight_V_RLAST : IN STD_LOGIC;
    m_axi_weight_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_BVALID : IN STD_LOGIC;
    m_axi_weight_V_BREADY : OUT STD_LOGIC;
    m_axi_weight_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    conv1_weight_V3 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of conv1_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv10_288 : STD_LOGIC_VECTOR (9 downto 0) := "1010001000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv6_1B : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv15_6000 : STD_LOGIC_VECTOR (14 downto 0) := "110000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv12_400 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weight_V_blk_n_AR : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal exitcond_flatten_reg_1513 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_flatten_reg_1513 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter10_exitcond_flatten_reg_1513 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten14_reg_240 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_251 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten13_reg_263 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_274 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_286 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_298 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_reg_310 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten15_reg_322 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_1_reg_333 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten16_reg_345 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_1_reg_356 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_1_reg_368 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten17_reg_447 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_2_reg_458 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten18_reg_469 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_2_reg_480 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_2_reg_491 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_flatten_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_weight_V_ARREADY : STD_LOGIC;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_1513 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_1513 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_flatten_reg_1513 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_flatten_reg_1513 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_flatten_reg_1513 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_exitcond_flatten_reg_1513 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_exitcond_flatten_reg_1513 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_exitcond_flatten_reg_1513 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_exitcond_flatten_reg_1513 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next2_fu_508_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond_flatten18_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten18_reg_1522 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond_flatten18_reg_1522 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next1_fu_526_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_cast_mid2_v_fu_547_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_cast_mid2_v_reg_1537 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal not_exitcond_flatten_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_reg_1544 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten19_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten19_reg_1549 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_mid_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_mid_reg_1554 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_586_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_586_reg_1559 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast_mid2_fu_582_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_cast_mid2_reg_1565 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_op_fu_590_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_op_reg_1571 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_mid2_fu_701_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_mid2_reg_1576 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_cast_mid2_fu_709_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_cast_mid2_reg_1581 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_590_fu_721_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_590_reg_1586 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_fu_727_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_1_reg_1592 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_next_fu_733_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_592_fu_752_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_592_reg_1602 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter4_tmp_592_reg_1602 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter5_tmp_592_reg_1602 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter6_tmp_592_reg_1602 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter7_tmp_592_reg_1602 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter8_tmp_592_reg_1602 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter9_tmp_592_reg_1602 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter10_tmp_592_reg_1602 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter11_tmp_592_reg_1602 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_V_addr_reg_1607 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_V_addr_read_reg_1613 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_flatten20_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten20_reg_1618 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state16_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp1_iter1_exitcond_flatten20_reg_1618 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next2_2_fu_775_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal exitcond_flatten21_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten21_reg_1627 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond70_mid_fu_799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond70_mid_reg_1633 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_mid2_fu_811_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_1_mid2_reg_1638 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_pp1_iter1_k_1_mid2_reg_1638 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_next2_1_fu_825_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_cast_mid2_v_fu_846_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_cast_mid2_v_reg_1649 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal j_1_cast_mid2_fu_894_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_cast_mid2_reg_1654 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_597_fu_905_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_597_reg_1659 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_4_fu_911_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_cast_cast_fu_954_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal h_cast_cast_reg_1675 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal exitcond50_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_cast_cast_fu_964_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_cast_cast_reg_1684 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal h_34_fu_974_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond51_fu_968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_cast9_fu_980_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_cast9_reg_1697 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal m_7_fu_990_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_7_reg_1705 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_cast_cast_fu_1012_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_cast_reg_1710 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond53_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_44_fu_1016_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal n_cast8_cast_fu_1022_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal n_cast8_cast_reg_1720 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal n_7_fu_1032_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_7_reg_1728 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_27_cast_cast_fu_1054_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_27_cast_cast_reg_1733 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond54_fu_1026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ci_cast7_cast_fu_1058_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ci_cast7_cast_reg_1738 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal input_V_addr_reg_1743 : STD_LOGIC_VECTOR (11 downto 0);
    signal ci_17_fu_1139_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ci_17_reg_1751 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_V_addr_2_reg_1756 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_690_fu_1274_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_690_reg_1761 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_691_fu_1278_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_691_reg_1766 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond56_fu_1282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond56_reg_1771 : STD_LOGIC_VECTOR (0 downto 0);
    signal co_34_fu_1288_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_34_reg_1775 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal weight_temp_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_temp_V_load_reg_1785 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal input_V_load_reg_1790 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_V_load_1_reg_1795 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_flatten22_fu_1316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten22_reg_1800 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state29_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state31_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_flag00011001 : BOOLEAN;
    signal indvar_flatten_next2_4_fu_1322_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal indvar_flatten_next2_4_reg_1804 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal j_2_mid_fu_1340_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_mid_reg_1809 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_cast5_mid2_v_fu_1348_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_cast5_mid2_v_reg_1815 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_mid_fu_1368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_mid_reg_1822 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_2_mid2_fu_1380_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_2_mid2_reg_1827 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_next2_3_fu_1394_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_flatten_next2_3_reg_1833 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_2_cast4_mid2_fu_1435_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_cast4_mid2_reg_1838 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_state30_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state32_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_pp2_stage1_flag00011001 : BOOLEAN;
    signal tmp_604_fu_1445_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_604_reg_1843 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_6_fu_1451_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_6_reg_1849 : STD_LOGIC_VECTOR (5 downto 0);
    signal output_V_addr_1_reg_1854 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_pp1_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state16 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state29 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage1_flag00011011 : BOOLEAN;
    signal weight_temp_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weight_temp_V_ce0 : STD_LOGIC;
    signal weight_temp_V_we0 : STD_LOGIC;
    signal weight_temp_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_phi_fu_255_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_phi_fu_278_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_phi_fu_290_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_phi_fu_302_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_phi_fu_314_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_phi_fu_337_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0_flag00000000 : BOOLEAN;
    signal j_1_phi_fu_360_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_1_phi_fu_372_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_reg_379 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal w_reg_391 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_reg_403 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_reg_414 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond55_fu_1133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ci_reg_425 : STD_LOGIC_VECTOR (1 downto 0);
    signal co_reg_436 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal indvar_flatten17_phi_fu_451_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp2_stage0_flag00000000 : BOOLEAN;
    signal i_2_phi_fu_462_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten18_phi_fu_473_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_2_phi_fu_484_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_2_phi_fu_495_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_cast_mid2_fu_853_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_757_cast_fu_949_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_774_cast_fu_1128_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_782_cast_fu_1215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_791_cast_fu_1311_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_766_cast_fu_1489_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_fu_758_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_m_axi_weight_V_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal grp_fu_1502_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_686_fu_1494_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp2_stage1_flag00000000 : BOOLEAN;
    signal indvar_flatten13_op_fu_520_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_6_fu_534_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_mid_fu_540_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_6_fu_571_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_599_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_fu_606_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_cast_mid2_cast_fu_596_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_585_fu_610_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast_mid2_cast_fu_638_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_737_cast_fu_616_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_587_fu_641_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_681_fu_651_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_fu_659_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_739_cast_fu_647_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_not_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond73_mid_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_4_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_mid_fu_631_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond73_mid1_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_589_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_682_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_5_fu_685_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_cast_mid2_cast_fu_717_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_588_fu_663_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_683_fu_739_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_fu_749_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_591_fu_744_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond49_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_1_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_596_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten44_op_fu_819_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_7_fu_833_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_593_fu_858_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_594_fu_870_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl5_cast_fu_866_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_fu_878_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_mid_fu_839_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_7_fu_888_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_cast_mid2_cast_fu_901_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_595_fu_882_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_684_fu_923_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl3_cast_fu_916_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl4_cast_fu_930_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_1_cast_cast_fu_940_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_598_fu_934_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_599_fu_943_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_996_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_cast_fu_1002_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_1006_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp2_fu_1038_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_1044_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_27_fu_1048_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_607_fu_1062_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_608_fu_1074_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl9_cast_fu_1070_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl10_cast_fu_1082_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_609_fu_1086_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_610_fu_1092_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_687_fu_1105_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl7_cast_fu_1097_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl8_cast_fu_1113_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_611_fu_1117_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_612_fu_1123_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_613_fu_1149_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_614_fu_1161_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl17_cast_fu_1169_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl16_cast_fu_1157_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_615_fu_1173_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_616_fu_1179_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_688_fu_1192_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl15_cast_fu_1200_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl14_cast_fu_1184_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_617_fu_1204_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_618_fu_1210_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_619_fu_1220_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl13_cast_fu_1228_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal co_cast6_cast_fu_1145_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_620_fu_1232_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_784_cast_fu_1238_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_621_fu_1242_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_689_fu_1251_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_fu_1259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_785_cast_fu_1247_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_622_fu_1263_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_623_fu_1269_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl11_cast_fu_1294_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_624_fu_1301_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_625_fu_1306_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_flatten23_fu_1334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_fu_1328_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond52_fu_1362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_2_fu_1356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_603_fu_1374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten66_op_fu_1388_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_600_fu_1402_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_601_fu_1413_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl20_cast_fu_1409_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl21_cast_fu_1420_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_8_fu_1430_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_cast4_mid2_cast_fu_1441_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_602_fu_1424_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_685_fu_1463_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl18_cast_fu_1456_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl19_cast_fu_1470_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_2_cast3_cast_fu_1480_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_605_fu_1474_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_606_fu_1483_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component ShuffleNetV2_mac_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv1_p_weight_tebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    weight_temp_V_U : component conv1_p_weight_tebkb
    generic map (
        DataWidth => 8,
        AddressRange => 648,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weight_temp_V_address0,
        ce0 => weight_temp_V_ce0,
        we0 => weight_temp_V_we0,
        d0 => weight_temp_V_d0,
        q0 => weight_temp_V_q0);

    ShuffleNetV2_mac_cud_U0 : component ShuffleNetV2_mac_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => input_V_load_reg_1790,
        din1 => weight_temp_V_load_reg_1785,
        din2 => output_V_load_1_reg_1795,
        dout => grp_fu_1502_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state16))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state16)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state16 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state29))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond50_fu_958_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state29) and (ap_block_pp2_stage1_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_condition_pp2_exit_iter0_state29 xor ap_const_logic_1);
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_block_pp2_stage1_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond50_fu_958_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_weight_V_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_weight_V_ARREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_1513))) then
                    if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_m_axi_weight_V_ARREADY <= ap_const_logic_0;
                    elsif (((ap_const_logic_1 = m_axi_weight_V_ARREADY) and (ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0))) then 
                        ap_reg_ioackin_m_axi_weight_V_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ci_reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv1_1 = exitcond56_reg_1771))) then 
                ci_reg_425 <= ci_17_reg_1751;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_0 = exitcond54_fu_1026_p2))) then 
                ci_reg_425 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    co_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_lv1_0 = exitcond55_fu_1133_p2))) then 
                co_reg_436 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                co_reg_436 <= co_34_reg_1775;
            end if; 
        end if;
    end process;

    h_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                h_reg_379 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond51_fu_968_p2 = ap_const_lv1_1))) then 
                h_reg_379 <= h_34_fu_974_p2;
            end if; 
        end if;
    end process;

    i_1_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_1_reg_333 <= ap_const_lv5_0;
            elsif (((ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond_flatten20_reg_1618))) then 
                i_1_reg_333 <= i_1_cast_mid2_v_reg_1649;
            end if; 
        end if;
    end process;

    i_2_reg_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond50_fu_958_p2 = ap_const_lv1_1))) then 
                i_2_reg_458 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten22_reg_1800) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1))) then 
                i_2_reg_458 <= i_2_cast5_mid2_v_reg_1815;
            end if; 
        end if;
    end process;

    i_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_1513) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
                i_reg_251 <= i_cast_mid2_v_reg_1537;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_251 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_502_p2))) then 
                indvar_flatten13_reg_263 <= indvar_flatten_next1_fu_526_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten13_reg_263 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten14_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_502_p2))) then 
                indvar_flatten14_reg_240 <= indvar_flatten_next2_fu_508_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten14_reg_240 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten15_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                indvar_flatten15_reg_322 <= ap_const_lv15_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_flatten20_fu_769_p2))) then 
                indvar_flatten15_reg_322 <= indvar_flatten_next2_2_fu_775_p2;
            end if; 
        end if;
    end process;

    indvar_flatten16_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                indvar_flatten16_reg_345 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_flatten20_fu_769_p2))) then 
                indvar_flatten16_reg_345 <= indvar_flatten_next2_1_fu_825_p3;
            end if; 
        end if;
    end process;

    indvar_flatten17_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond50_fu_958_p2 = ap_const_lv1_1))) then 
                indvar_flatten17_reg_447 <= ap_const_lv15_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten22_reg_1800) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1))) then 
                indvar_flatten17_reg_447 <= indvar_flatten_next2_4_reg_1804;
            end if; 
        end if;
    end process;

    indvar_flatten18_reg_469_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond50_fu_958_p2 = ap_const_lv1_1))) then 
                indvar_flatten18_reg_469 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten22_reg_1800) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1))) then 
                indvar_flatten18_reg_469 <= indvar_flatten_next2_3_reg_1833;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_1513) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
                indvar_flatten_reg_286 <= indvar_flatten_next_fu_733_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_286 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_1_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j_1_reg_356 <= ap_const_lv6_1;
            elsif (((ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond_flatten20_reg_1618))) then 
                j_1_reg_356 <= j_1_cast_mid2_reg_1654;
            end if; 
        end if;
    end process;

    j_2_reg_480_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond50_fu_958_p2 = ap_const_lv1_1))) then 
                j_2_reg_480 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten22_reg_1800) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1))) then 
                j_2_reg_480 <= j_2_cast4_mid2_reg_1838;
            end if; 
        end if;
    end process;

    j_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_1513) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
                j_reg_274 <= j_cast_mid2_reg_1565;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_274 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_1_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                k_1_reg_368 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_flatten20_reg_1618))) then 
                k_1_reg_368 <= k_4_fu_911_p2;
            end if; 
        end if;
    end process;

    k_2_reg_491_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond50_fu_958_p2 = ap_const_lv1_1))) then 
                k_2_reg_491 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten22_reg_1800) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1))) then 
                k_2_reg_491 <= k_6_reg_1849;
            end if; 
        end if;
    end process;

    k_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_1513) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then 
                k_reg_298 <= k_cast_mid2_reg_1581;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_reg_298 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    m_reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_lv1_0 = exitcond51_fu_968_p2))) then 
                m_reg_403 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_1 = exitcond54_fu_1026_p2))) then 
                m_reg_403 <= m_7_reg_1705;
            end if; 
        end if;
    end process;

    n_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_lv1_1 = exitcond55_fu_1133_p2))) then 
                n_reg_414 <= n_7_reg_1728;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (ap_const_lv1_0 = exitcond53_fu_984_p2))) then 
                n_reg_414 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_1513) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then 
                p_reg_310 <= p_1_reg_1592;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_reg_310 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    w_reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = exitcond50_fu_958_p2))) then 
                w_reg_391 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (ap_const_lv1_1 = exitcond53_fu_984_p2))) then 
                w_reg_391 <= w_44_fu_1016_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter10_exitcond_flatten_reg_1513 <= ap_reg_pp0_iter9_exitcond_flatten_reg_1513;
                ap_reg_pp0_iter10_tmp_592_reg_1602 <= ap_reg_pp0_iter9_tmp_592_reg_1602;
                ap_reg_pp0_iter11_exitcond_flatten_reg_1513 <= ap_reg_pp0_iter10_exitcond_flatten_reg_1513;
                ap_reg_pp0_iter11_tmp_592_reg_1602 <= ap_reg_pp0_iter10_tmp_592_reg_1602;
                ap_reg_pp0_iter2_exitcond_flatten_reg_1513 <= ap_reg_pp0_iter1_exitcond_flatten_reg_1513;
                ap_reg_pp0_iter3_exitcond_flatten_reg_1513 <= ap_reg_pp0_iter2_exitcond_flatten_reg_1513;
                ap_reg_pp0_iter4_exitcond_flatten_reg_1513 <= ap_reg_pp0_iter3_exitcond_flatten_reg_1513;
                ap_reg_pp0_iter4_tmp_592_reg_1602 <= tmp_592_reg_1602;
                ap_reg_pp0_iter5_exitcond_flatten_reg_1513 <= ap_reg_pp0_iter4_exitcond_flatten_reg_1513;
                ap_reg_pp0_iter5_tmp_592_reg_1602 <= ap_reg_pp0_iter4_tmp_592_reg_1602;
                ap_reg_pp0_iter6_exitcond_flatten_reg_1513 <= ap_reg_pp0_iter5_exitcond_flatten_reg_1513;
                ap_reg_pp0_iter6_tmp_592_reg_1602 <= ap_reg_pp0_iter5_tmp_592_reg_1602;
                ap_reg_pp0_iter7_exitcond_flatten_reg_1513 <= ap_reg_pp0_iter6_exitcond_flatten_reg_1513;
                ap_reg_pp0_iter7_tmp_592_reg_1602 <= ap_reg_pp0_iter6_tmp_592_reg_1602;
                ap_reg_pp0_iter8_exitcond_flatten_reg_1513 <= ap_reg_pp0_iter7_exitcond_flatten_reg_1513;
                ap_reg_pp0_iter8_tmp_592_reg_1602 <= ap_reg_pp0_iter7_tmp_592_reg_1602;
                ap_reg_pp0_iter9_exitcond_flatten_reg_1513 <= ap_reg_pp0_iter8_exitcond_flatten_reg_1513;
                ap_reg_pp0_iter9_tmp_592_reg_1602 <= ap_reg_pp0_iter8_tmp_592_reg_1602;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_flatten18_reg_1522 <= exitcond_flatten18_reg_1522;
                ap_reg_pp0_iter1_exitcond_flatten_reg_1513 <= exitcond_flatten_reg_1513;
                exitcond_flatten_reg_1513 <= exitcond_flatten_fu_502_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp1_iter1_exitcond_flatten20_reg_1618 <= exitcond_flatten20_reg_1618;
                ap_reg_pp1_iter1_k_1_mid2_reg_1638 <= k_1_mid2_reg_1638;
                exitcond_flatten20_reg_1618 <= exitcond_flatten20_fu_769_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                ci_17_reg_1751 <= ci_17_fu_1139_p2;
                    ci_cast7_cast_reg_1738(1 downto 0) <= ci_cast7_cast_fu_1058_p1(1 downto 0);
                input_V_addr_reg_1743 <= tmp_774_cast_fu_1128_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                co_34_reg_1775 <= co_34_fu_1288_p2;
                exitcond56_reg_1771 <= exitcond56_fu_1282_p2;
                output_V_addr_2_reg_1756 <= tmp_782_cast_fu_1215_p1(15 - 1 downto 0);
                tmp_690_reg_1761 <= tmp_690_fu_1274_p1;
                tmp_691_reg_1766 <= tmp_691_fu_1278_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten20_fu_769_p2))) then
                exitcond70_mid_reg_1633 <= exitcond70_mid_fu_799_p2;
                exitcond_flatten21_reg_1627 <= exitcond_flatten21_fu_781_p2;
                k_1_mid2_reg_1638 <= k_1_mid2_fu_811_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_fu_502_p2))) then
                exitcond_flatten18_reg_1522 <= exitcond_flatten18_fu_514_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_reg_1513))) then
                exitcond_flatten19_reg_1549 <= exitcond_flatten19_fu_559_p2;
                exitcond_flatten_mid_reg_1554 <= exitcond_flatten_mid_fu_565_p2;
                indvar_flatten_op_reg_1571 <= indvar_flatten_op_fu_590_p2;
                not_exitcond_flatten_reg_1544 <= not_exitcond_flatten_fu_554_p2;
                tmp_586_reg_1559 <= tmp_586_fu_577_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0))) then
                exitcond_flatten22_reg_1800 <= exitcond_flatten22_fu_1316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten22_fu_1316_p2))) then
                exitcond_mid_reg_1822 <= exitcond_mid_fu_1368_p2;
                j_2_mid_reg_1809 <= j_2_mid_fu_1340_p3;
                k_2_mid2_reg_1827 <= k_2_mid2_fu_1380_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                    h_cast_cast_reg_1675(5 downto 0) <= h_cast_cast_fu_954_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_flatten20_reg_1618))) then
                i_1_cast_mid2_v_reg_1649 <= i_1_cast_mid2_v_fu_846_p3;
                j_1_cast_mid2_reg_1654 <= j_1_cast_mid2_fu_894_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_0 = exitcond_flatten22_fu_1316_p2))) then
                i_2_cast5_mid2_v_reg_1815 <= i_2_cast5_mid2_v_fu_1348_p3;
                indvar_flatten_next2_3_reg_1833 <= indvar_flatten_next2_3_fu_1394_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond_flatten_reg_1513))) then
                i_cast_mid2_v_reg_1537 <= i_cast_mid2_v_fu_547_p3;
                j_cast_mid2_reg_1565 <= j_cast_mid2_fu_582_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then
                indvar_flatten_next2_4_reg_1804 <= indvar_flatten_next2_4_fu_1322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                input_V_load_reg_1790 <= input_V_q0;
                output_V_load_1_reg_1795 <= output_V_q0;
                weight_temp_V_load_reg_1785 <= weight_temp_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_block_pp2_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten22_reg_1800))) then
                j_2_cast4_mid2_reg_1838 <= j_2_cast4_mid2_fu_1435_p3;
                k_6_reg_1849 <= k_6_fu_1451_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_1513) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then
                k_cast_mid2_reg_1581 <= k_cast_mid2_fu_709_p3;
                p_1_reg_1592 <= p_1_fu_727_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                m_7_reg_1705 <= m_7_fu_990_p2;
                    m_cast9_reg_1697(1 downto 0) <= m_cast9_fu_980_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                n_7_reg_1728 <= n_7_fu_1032_p2;
                    n_cast8_cast_reg_1720(1 downto 0) <= n_cast8_cast_fu_1022_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten22_reg_1800))) then
                output_V_addr_1_reg_1854 <= tmp_766_cast_fu_1489_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_1513))) then
                p_mid2_reg_1576 <= p_mid2_fu_701_p3;
                tmp_590_reg_1586 <= tmp_590_fu_721_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_0 = exitcond54_fu_1026_p2))) then
                    tmp_27_cast_cast_reg_1733(5 downto 0) <= tmp_27_cast_cast_fu_1054_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_1513))) then
                tmp_592_reg_1602 <= tmp_592_fu_752_p2;
                weight_V_addr_reg_1607 <= sum_fu_758_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten20_reg_1618))) then
                tmp_597_reg_1659 <= tmp_597_fu_905_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_block_pp2_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten22_reg_1800))) then
                tmp_604_reg_1843 <= tmp_604_fu_1445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (ap_const_lv1_0 = exitcond53_fu_984_p2))) then
                    tmp_cast_cast_reg_1710(5 downto 0) <= tmp_cast_cast_fu_1012_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                    w_cast_cast_reg_1684(5 downto 0) <= w_cast_cast_fu_964_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = ap_reg_pp0_iter10_exitcond_flatten_reg_1513) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                weight_V_addr_read_reg_1613 <= m_axi_weight_V_RDATA;
            end if;
        end if;
    end process;
    h_cast_cast_reg_1675(10 downto 6) <= "00000";
    w_cast_cast_reg_1684(15 downto 6) <= "0000000000";
    m_cast9_reg_1697(31 downto 2) <= "000000000000000000000000000000";
    tmp_cast_cast_reg_1710(7 downto 6) <= "00";
    n_cast8_cast_reg_1720(10 downto 2) <= "000000000";
    tmp_27_cast_cast_reg_1733(12 downto 6) <= "0000000";
    ci_cast7_cast_reg_1738(8 downto 2) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter11, exitcond_flatten_fu_502_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, exitcond_flatten20_fu_769_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state20, exitcond50_fu_958_p2, ap_CS_fsm_state21, exitcond51_fu_968_p2, ap_CS_fsm_state22, exitcond53_fu_984_p2, ap_CS_fsm_state23, exitcond54_fu_1026_p2, ap_CS_fsm_state24, exitcond56_reg_1771, ap_CS_fsm_state26, exitcond_flatten22_fu_1316_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter12, ap_block_pp1_stage0_flag00011011, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_flag00011011, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1_flag00011011, exitcond55_fu_1133_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_502_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_502_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten20_fu_769_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten20_fu_769_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond50_fu_958_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond51_fu_968_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (ap_const_lv1_1 = exitcond53_fu_984_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_1 = exitcond54_fu_1026_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_lv1_1 = exitcond55_fu_1133_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv1_1 = exitcond56_reg_1771))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_pp2_stage0 => 
                if (((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_flatten22_fu_1316_p2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_flatten22_fu_1316_p2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if (((ap_block_pp2_stage1_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_block_pp2_stage1_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_block_pp2_stage1_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(14);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(15);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(2);
    ap_CS_fsm_state19 <= ap_CS_fsm(4);
    ap_CS_fsm_state20 <= ap_CS_fsm(5);
    ap_CS_fsm_state21 <= ap_CS_fsm(6);
    ap_CS_fsm_state22 <= ap_CS_fsm(7);
    ap_CS_fsm_state23 <= ap_CS_fsm(8);
    ap_CS_fsm_state24 <= ap_CS_fsm(9);
    ap_CS_fsm_state25 <= ap_CS_fsm(10);
    ap_CS_fsm_state26 <= ap_CS_fsm(11);
    ap_CS_fsm_state27 <= ap_CS_fsm(12);
    ap_CS_fsm_state28 <= ap_CS_fsm(13);
    ap_CS_fsm_state33 <= ap_CS_fsm(16);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00001001_assign_proc : process(m_axi_weight_V_RVALID, ap_enable_reg_pp0_iter11, ap_reg_pp0_iter10_exitcond_flatten_reg_1513)
    begin
                ap_block_pp0_stage0_flag00001001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter11) and (ap_const_lv1_0 = ap_reg_pp0_iter10_exitcond_flatten_reg_1513) and (ap_const_logic_0 = m_axi_weight_V_RVALID));
    end process;


    ap_block_pp0_stage0_flag00011001_assign_proc : process(m_axi_weight_V_RVALID, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter11, ap_reg_pp0_iter10_exitcond_flatten_reg_1513, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_boolean_1 = ap_block_state6_io)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter11) and (ap_const_lv1_0 = ap_reg_pp0_iter10_exitcond_flatten_reg_1513) and (ap_const_logic_0 = m_axi_weight_V_RVALID)));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(m_axi_weight_V_RVALID, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter11, ap_reg_pp0_iter10_exitcond_flatten_reg_1513, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_boolean_1 = ap_block_state6_io)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter11) and (ap_const_lv1_0 = ap_reg_pp0_iter10_exitcond_flatten_reg_1513) and (ap_const_logic_0 = m_axi_weight_V_RVALID)));
    end process;

        ap_block_pp1_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_pp0_stage0_iter11_assign_proc : process(m_axi_weight_V_RVALID, ap_reg_pp0_iter10_exitcond_flatten_reg_1513)
    begin
                ap_block_state13_pp0_stage0_iter11 <= ((ap_const_lv1_0 = ap_reg_pp0_iter10_exitcond_flatten_reg_1513) and (ap_const_logic_0 = m_axi_weight_V_RVALID));
    end process;

        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(ap_reg_pp0_iter3_exitcond_flatten_reg_1513, ap_sig_ioackin_m_axi_weight_V_ARREADY)
    begin
                ap_block_state6_io <= ((ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_1513) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_weight_V_ARREADY));
    end process;

        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_502_p2)
    begin
        if ((exitcond_flatten_fu_502_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state16_assign_proc : process(exitcond_flatten20_fu_769_p2)
    begin
        if ((exitcond_flatten20_fu_769_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state16 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state29_assign_proc : process(exitcond_flatten22_fu_1316_p2)
    begin
        if ((ap_const_lv1_1 = exitcond_flatten22_fu_1316_p2)) then 
            ap_condition_pp2_exit_iter0_state29 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state29 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state33)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9) and (ap_const_logic_0 = ap_enable_reg_pp0_iter10) and (ap_const_logic_0 = ap_enable_reg_pp0_iter11) and (ap_const_logic_0 = ap_enable_reg_pp0_iter12))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter0) and (ap_const_logic_0 = ap_enable_reg_pp1_iter1) and (ap_const_logic_0 = ap_enable_reg_pp1_iter2))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp2_iter0) and (ap_const_logic_0 = ap_enable_reg_pp2_iter1))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_weight_V_ARREADY_assign_proc : process(m_axi_weight_V_ARREADY, ap_reg_ioackin_m_axi_weight_V_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_weight_V_ARREADY)) then 
            ap_sig_ioackin_m_axi_weight_V_ARREADY <= m_axi_weight_V_ARREADY;
        else 
            ap_sig_ioackin_m_axi_weight_V_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    bias_V_address0 <= i_1_cast_mid2_fu_853_p1(5 - 1 downto 0);

    bias_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ci_17_fu_1139_p2 <= std_logic_vector(unsigned(ci_reg_425) + unsigned(ap_const_lv2_1));
    ci_cast7_cast_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_425),9));
    co_34_fu_1288_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(co_reg_436));
    co_cast6_cast_fu_1145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_436),8));
    exitcond49_fu_793_p2 <= "1" when (k_1_phi_fu_372_p4 = ap_const_lv6_21) else "0";
    exitcond50_fu_958_p2 <= "1" when (h_reg_379 = ap_const_lv6_21) else "0";
    exitcond51_fu_968_p2 <= "1" when (w_reg_391 = ap_const_lv6_21) else "0";
    exitcond52_fu_1362_p2 <= "1" when (k_2_phi_fu_495_p4 = ap_const_lv6_21) else "0";
    exitcond53_fu_984_p2 <= "1" when (m_reg_403 = ap_const_lv2_3) else "0";
    exitcond54_fu_1026_p2 <= "1" when (n_reg_414 = ap_const_lv2_3) else "0";
    exitcond55_fu_1133_p2 <= "1" when (ci_reg_425 = ap_const_lv2_3) else "0";
    exitcond56_fu_1282_p2 <= "1" when (co_reg_436 = ap_const_lv5_18) else "0";
    exitcond70_mid_fu_799_p2 <= (exitcond49_fu_793_p2 and not_exitcond_flatten_1_fu_787_p2);
    exitcond73_mid1_fu_679_p2 <= (exitcond73_mid_fu_626_p2 and not_exitcond_flatten_4_fu_674_p2);
    exitcond73_mid_fu_626_p2 <= (exitcond_fu_620_p2 and not_exitcond_flatten_reg_1544);
    exitcond_flatten18_fu_514_p2 <= "1" when (indvar_flatten13_reg_263 = ap_const_lv6_1B) else "0";
    exitcond_flatten19_fu_559_p2 <= "1" when (indvar_flatten_phi_fu_290_p4 = ap_const_lv4_9) else "0";
    exitcond_flatten20_fu_769_p2 <= "1" when (indvar_flatten15_reg_322 = ap_const_lv15_6000) else "0";
    exitcond_flatten21_fu_781_p2 <= "1" when (indvar_flatten16_reg_345 = ap_const_lv12_400) else "0";
    exitcond_flatten22_fu_1316_p2 <= "1" when (indvar_flatten17_phi_fu_451_p4 = ap_const_lv15_6000) else "0";
    exitcond_flatten23_fu_1334_p2 <= "1" when (indvar_flatten18_phi_fu_473_p4 = ap_const_lv12_400) else "0";
    exitcond_flatten_fu_502_p2 <= "1" when (indvar_flatten14_reg_240 = ap_const_lv10_288) else "0";
    exitcond_flatten_mid_fu_565_p2 <= (exitcond_flatten19_fu_559_p2 and not_exitcond_flatten_fu_554_p2);
    exitcond_flatten_not_fu_669_p2 <= (exitcond_flatten19_reg_1549 xor ap_const_lv1_1);
    exitcond_fu_620_p2 <= "1" when (p_phi_fu_314_p4 = ap_const_lv2_3) else "0";
    exitcond_mid_fu_1368_p2 <= (exitcond52_fu_1362_p2 and not_exitcond_flatten_2_fu_1356_p2);
    h_34_fu_974_p2 <= std_logic_vector(unsigned(h_reg_379) + unsigned(ap_const_lv6_1));
    h_cast_cast_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_379),11));
    i_1_cast_mid2_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_cast_mid2_v_fu_846_p3),32));
    i_1_cast_mid2_v_fu_846_p3 <= 
        i_7_fu_833_p2 when (exitcond_flatten21_reg_1627(0) = '1') else 
        i_1_phi_fu_337_p4;

    i_1_phi_fu_337_p4_assign_proc : process(i_1_reg_333, ap_reg_pp1_iter1_exitcond_flatten20_reg_1618, i_1_cast_mid2_v_reg_1649, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond_flatten20_reg_1618) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            i_1_phi_fu_337_p4 <= i_1_cast_mid2_v_reg_1649;
        else 
            i_1_phi_fu_337_p4 <= i_1_reg_333;
        end if; 
    end process;

    i_2_cast5_mid2_v_fu_1348_p3 <= 
        i_8_fu_1328_p2 when (exitcond_flatten23_fu_1334_p2(0) = '1') else 
        i_2_phi_fu_462_p4;

    i_2_phi_fu_462_p4_assign_proc : process(i_2_reg_458, exitcond_flatten22_reg_1800, ap_CS_fsm_pp2_stage0, i_2_cast5_mid2_v_reg_1815, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond_flatten22_reg_1800) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0))) then 
            i_2_phi_fu_462_p4 <= i_2_cast5_mid2_v_reg_1815;
        else 
            i_2_phi_fu_462_p4 <= i_2_reg_458;
        end if; 
    end process;

    i_6_fu_534_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(i_phi_fu_255_p4));
    i_7_fu_833_p2 <= std_logic_vector(unsigned(i_1_phi_fu_337_p4) + unsigned(ap_const_lv5_1));
    i_8_fu_1328_p2 <= std_logic_vector(unsigned(i_2_phi_fu_462_p4) + unsigned(ap_const_lv5_1));
    i_cast_mid2_cast_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_cast_mid2_v_reg_1537),8));
    i_cast_mid2_v_fu_547_p3 <= 
        i_6_fu_534_p2 when (exitcond_flatten18_reg_1522(0) = '1') else 
        i_phi_fu_255_p4;

    i_phi_fu_255_p4_assign_proc : process(ap_block_pp0_stage0_flag00000000, i_reg_251, ap_reg_pp0_iter1_exitcond_flatten_reg_1513, i_cast_mid2_v_reg_1537, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_1513) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            i_phi_fu_255_p4 <= i_cast_mid2_v_reg_1537;
        else 
            i_phi_fu_255_p4 <= i_reg_251;
        end if; 
    end process;

    indvar_flatten13_op_fu_520_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(indvar_flatten13_reg_263));

    indvar_flatten17_phi_fu_451_p4_assign_proc : process(indvar_flatten17_reg_447, exitcond_flatten22_reg_1800, ap_CS_fsm_pp2_stage0, indvar_flatten_next2_4_reg_1804, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond_flatten22_reg_1800) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0))) then 
            indvar_flatten17_phi_fu_451_p4 <= indvar_flatten_next2_4_reg_1804;
        else 
            indvar_flatten17_phi_fu_451_p4 <= indvar_flatten17_reg_447;
        end if; 
    end process;


    indvar_flatten18_phi_fu_473_p4_assign_proc : process(indvar_flatten18_reg_469, exitcond_flatten22_reg_1800, ap_CS_fsm_pp2_stage0, indvar_flatten_next2_3_reg_1833, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond_flatten22_reg_1800) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0))) then 
            indvar_flatten18_phi_fu_473_p4 <= indvar_flatten_next2_3_reg_1833;
        else 
            indvar_flatten18_phi_fu_473_p4 <= indvar_flatten18_reg_469;
        end if; 
    end process;

    indvar_flatten44_op_fu_819_p2 <= std_logic_vector(unsigned(indvar_flatten16_reg_345) + unsigned(ap_const_lv12_1));
    indvar_flatten66_op_fu_1388_p2 <= std_logic_vector(unsigned(indvar_flatten18_phi_fu_473_p4) + unsigned(ap_const_lv12_1));
    indvar_flatten_next1_fu_526_p3 <= 
        ap_const_lv6_1 when (exitcond_flatten18_fu_514_p2(0) = '1') else 
        indvar_flatten13_op_fu_520_p2;
    indvar_flatten_next2_1_fu_825_p3 <= 
        ap_const_lv12_1 when (exitcond_flatten21_fu_781_p2(0) = '1') else 
        indvar_flatten44_op_fu_819_p2;
    indvar_flatten_next2_2_fu_775_p2 <= std_logic_vector(unsigned(indvar_flatten15_reg_322) + unsigned(ap_const_lv15_1));
    indvar_flatten_next2_3_fu_1394_p3 <= 
        ap_const_lv12_1 when (exitcond_flatten23_fu_1334_p2(0) = '1') else 
        indvar_flatten66_op_fu_1388_p2;
    indvar_flatten_next2_4_fu_1322_p2 <= std_logic_vector(unsigned(indvar_flatten17_phi_fu_451_p4) + unsigned(ap_const_lv15_1));
    indvar_flatten_next2_fu_508_p2 <= std_logic_vector(unsigned(indvar_flatten14_reg_240) + unsigned(ap_const_lv10_1));
    indvar_flatten_next_fu_733_p3 <= 
        ap_const_lv4_1 when (tmp_586_reg_1559(0) = '1') else 
        indvar_flatten_op_reg_1571;
    indvar_flatten_op_fu_590_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(indvar_flatten_phi_fu_290_p4));

    indvar_flatten_phi_fu_290_p4_assign_proc : process(ap_block_pp0_stage0_flag00000000, indvar_flatten_reg_286, ap_reg_pp0_iter1_exitcond_flatten_reg_1513, ap_enable_reg_pp0_iter2, indvar_flatten_next_fu_733_p3)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_1513) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            indvar_flatten_phi_fu_290_p4 <= indvar_flatten_next_fu_733_p3;
        else 
            indvar_flatten_phi_fu_290_p4 <= indvar_flatten_reg_286;
        end if; 
    end process;

    input_V_address0 <= input_V_addr_reg_1743;

    input_V_ce0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_cast_mid2_cast_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_cast_mid2_fu_894_p3),11));
    j_1_cast_mid2_fu_894_p3 <= 
        j_7_fu_888_p2 when (exitcond70_mid_reg_1633(0) = '1') else 
        j_1_mid_fu_839_p3;
    j_1_mid_fu_839_p3 <= 
        ap_const_lv6_1 when (exitcond_flatten21_reg_1627(0) = '1') else 
        j_1_phi_fu_360_p4;

    j_1_phi_fu_360_p4_assign_proc : process(j_1_reg_356, ap_reg_pp1_iter1_exitcond_flatten20_reg_1618, j_1_cast_mid2_reg_1654, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond_flatten20_reg_1618) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            j_1_phi_fu_360_p4 <= j_1_cast_mid2_reg_1654;
        else 
            j_1_phi_fu_360_p4 <= j_1_reg_356;
        end if; 
    end process;

    j_2_cast4_mid2_cast_fu_1441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_cast4_mid2_fu_1435_p3),11));
    j_2_cast4_mid2_fu_1435_p3 <= 
        j_8_fu_1430_p2 when (exitcond_mid_reg_1822(0) = '1') else 
        j_2_mid_reg_1809;
    j_2_mid_fu_1340_p3 <= 
        ap_const_lv6_1 when (exitcond_flatten23_fu_1334_p2(0) = '1') else 
        j_2_phi_fu_484_p4;

    j_2_phi_fu_484_p4_assign_proc : process(j_2_reg_480, exitcond_flatten22_reg_1800, ap_CS_fsm_pp2_stage0, j_2_cast4_mid2_reg_1838, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond_flatten22_reg_1800) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0))) then 
            j_2_phi_fu_484_p4 <= j_2_cast4_mid2_reg_1838;
        else 
            j_2_phi_fu_484_p4 <= j_2_reg_480;
        end if; 
    end process;

    j_6_fu_571_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(j_mid_fu_540_p3));
    j_7_fu_888_p2 <= std_logic_vector(unsigned(j_1_mid_fu_839_p3) + unsigned(ap_const_lv6_1));
    j_8_fu_1430_p2 <= std_logic_vector(unsigned(j_2_mid_reg_1809) + unsigned(ap_const_lv6_1));
    j_cast_mid2_cast_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_cast_mid2_reg_1565),9));
    j_cast_mid2_fu_582_p3 <= 
        j_6_fu_571_p2 when (exitcond_flatten_mid_fu_565_p2(0) = '1') else 
        j_mid_fu_540_p3;
    j_mid_fu_540_p3 <= 
        ap_const_lv2_0 when (exitcond_flatten18_reg_1522(0) = '1') else 
        j_phi_fu_278_p4;

    j_phi_fu_278_p4_assign_proc : process(ap_block_pp0_stage0_flag00000000, j_reg_274, ap_reg_pp0_iter1_exitcond_flatten_reg_1513, j_cast_mid2_reg_1565, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_1513) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            j_phi_fu_278_p4 <= j_cast_mid2_reg_1565;
        else 
            j_phi_fu_278_p4 <= j_reg_274;
        end if; 
    end process;

    k_1_cast_cast_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp1_iter1_k_1_mid2_reg_1638),16));
    k_1_mid2_fu_811_p3 <= 
        ap_const_lv6_1 when (tmp_596_fu_805_p2(0) = '1') else 
        k_1_phi_fu_372_p4;

    k_1_phi_fu_372_p4_assign_proc : process(k_1_reg_368, exitcond_flatten20_reg_1618, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, k_4_fu_911_p2, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_flatten20_reg_1618) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            k_1_phi_fu_372_p4 <= k_4_fu_911_p2;
        else 
            k_1_phi_fu_372_p4 <= k_1_reg_368;
        end if; 
    end process;

    k_2_cast3_cast_fu_1480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_2_mid2_reg_1827),16));
    k_2_mid2_fu_1380_p3 <= 
        ap_const_lv6_1 when (tmp_603_fu_1374_p2(0) = '1') else 
        k_2_phi_fu_495_p4;

    k_2_phi_fu_495_p4_assign_proc : process(k_2_reg_491, exitcond_flatten22_reg_1800, ap_CS_fsm_pp2_stage0, k_6_reg_1849, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond_flatten22_reg_1800) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0))) then 
            k_2_phi_fu_495_p4 <= k_6_reg_1849;
        else 
            k_2_phi_fu_495_p4 <= k_2_reg_491;
        end if; 
    end process;

    k_4_fu_911_p2 <= std_logic_vector(unsigned(k_1_mid2_reg_1638) + unsigned(ap_const_lv6_1));
    k_5_fu_685_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(k_mid_fu_631_p3));
    k_6_fu_1451_p2 <= std_logic_vector(unsigned(k_2_mid2_reg_1827) + unsigned(ap_const_lv6_1));
    k_cast_mid2_cast_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_cast_mid2_fu_709_p3),32));
    k_cast_mid2_fu_709_p3 <= 
        k_5_fu_685_p2 when (exitcond73_mid1_fu_679_p2(0) = '1') else 
        k_mid_fu_631_p3;
    k_mid_fu_631_p3 <= 
        ap_const_lv2_0 when (tmp_586_reg_1559(0) = '1') else 
        k_phi_fu_302_p4;

    k_phi_fu_302_p4_assign_proc : process(ap_block_pp0_stage0_flag00000000, k_reg_298, ap_reg_pp0_iter2_exitcond_flatten_reg_1513, k_cast_mid2_reg_1581, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_1513) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then 
            k_phi_fu_302_p4 <= k_cast_mid2_reg_1581;
        else 
            k_phi_fu_302_p4 <= k_reg_298;
        end if; 
    end process;

    m_7_fu_990_p2 <= std_logic_vector(unsigned(m_reg_403) + unsigned(ap_const_lv2_1));
    m_axi_weight_V_ARADDR <= weight_V_addr_reg_1607;
    m_axi_weight_V_ARBURST <= ap_const_lv2_0;
    m_axi_weight_V_ARCACHE <= ap_const_lv4_0;
    m_axi_weight_V_ARID <= ap_const_lv1_0;
    m_axi_weight_V_ARLEN <= ap_const_lv32_1;
    m_axi_weight_V_ARLOCK <= ap_const_lv2_0;
    m_axi_weight_V_ARPROT <= ap_const_lv3_0;
    m_axi_weight_V_ARQOS <= ap_const_lv4_0;
    m_axi_weight_V_ARREGION <= ap_const_lv4_0;
    m_axi_weight_V_ARSIZE <= ap_const_lv3_0;
    m_axi_weight_V_ARUSER <= ap_const_lv1_0;

    m_axi_weight_V_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_reg_pp0_iter3_exitcond_flatten_reg_1513, ap_reg_ioackin_m_axi_weight_V_ARREADY, ap_block_pp0_stage0_flag00001001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_1513) and (ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_weight_V_ARREADY))) then 
            m_axi_weight_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_weight_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weight_V_AWADDR <= ap_const_lv32_0;
    m_axi_weight_V_AWBURST <= ap_const_lv2_0;
    m_axi_weight_V_AWCACHE <= ap_const_lv4_0;
    m_axi_weight_V_AWID <= ap_const_lv1_0;
    m_axi_weight_V_AWLEN <= ap_const_lv32_0;
    m_axi_weight_V_AWLOCK <= ap_const_lv2_0;
    m_axi_weight_V_AWPROT <= ap_const_lv3_0;
    m_axi_weight_V_AWQOS <= ap_const_lv4_0;
    m_axi_weight_V_AWREGION <= ap_const_lv4_0;
    m_axi_weight_V_AWSIZE <= ap_const_lv3_0;
    m_axi_weight_V_AWUSER <= ap_const_lv1_0;
    m_axi_weight_V_AWVALID <= ap_const_logic_0;
    m_axi_weight_V_BREADY <= ap_const_logic_0;

    m_axi_weight_V_RREADY_assign_proc : process(ap_enable_reg_pp0_iter11, ap_reg_pp0_iter10_exitcond_flatten_reg_1513, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter11) and (ap_const_lv1_0 = ap_reg_pp0_iter10_exitcond_flatten_reg_1513) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            m_axi_weight_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_weight_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weight_V_WDATA <= ap_const_lv8_0;
    m_axi_weight_V_WID <= ap_const_lv1_0;
    m_axi_weight_V_WLAST <= ap_const_logic_0;
    m_axi_weight_V_WSTRB <= ap_const_lv1_0;
    m_axi_weight_V_WUSER <= ap_const_lv1_0;
    m_axi_weight_V_WVALID <= ap_const_logic_0;
    m_cast9_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_403),32));
    n_7_fu_1032_p2 <= std_logic_vector(unsigned(n_reg_414) + unsigned(ap_const_lv2_1));
    n_cast8_cast_fu_1022_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_414),11));
    not_exitcond_flatten_1_fu_787_p2 <= (exitcond_flatten21_fu_781_p2 xor ap_const_lv1_1);
    not_exitcond_flatten_2_fu_1356_p2 <= (exitcond_flatten23_fu_1334_p2 xor ap_const_lv1_1);
    not_exitcond_flatten_4_fu_674_p2 <= (ap_reg_pp0_iter1_exitcond_flatten18_reg_1522 or exitcond_flatten_not_fu_669_p2);
    not_exitcond_flatten_fu_554_p2 <= (exitcond_flatten18_reg_1522 xor ap_const_lv1_1);

    output_V_address0_assign_proc : process(output_V_addr_2_reg_1756, ap_CS_fsm_state26, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp2_stage1, output_V_addr_1_reg_1854, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter1, ap_block_pp1_stage0_flag00000000, ap_CS_fsm_state28, ap_block_pp2_stage0_flag00000000, tmp_757_cast_fu_949_p1, tmp_766_cast_fu_1489_p1, ap_block_pp2_stage1_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_block_pp2_stage1_flag00000000 = ap_const_boolean_0))) then 
            output_V_address0 <= output_V_addr_1_reg_1854;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0))) then 
            output_V_address0 <= tmp_766_cast_fu_1489_p1(15 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            output_V_address0 <= output_V_addr_2_reg_1756;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            output_V_address0 <= tmp_757_cast_fu_949_p1(15 - 1 downto 0);
        else 
            output_V_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_ce0_assign_proc : process(ap_block_pp1_stage0_flag00011001, ap_CS_fsm_state26, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_flag00011001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_flag00011001, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter1, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2)) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_block_pp2_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1)))) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_d0_assign_proc : process(bias_V_q0, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter1, ap_block_pp1_stage0_flag00000000, ap_CS_fsm_state28, grp_fu_1502_p3, ap_block_pp2_stage1_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_block_pp2_stage1_flag00000000 = ap_const_boolean_0))) then 
            output_V_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            output_V_d0 <= grp_fu_1502_p3;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            output_V_d0 <= bias_V_q0;
        else 
            output_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    output_V_we0_assign_proc : process(ap_block_pp1_stage0_flag00011001, ap_reg_pp1_iter1_exitcond_flatten20_reg_1618, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_flag00011001, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter1, ap_CS_fsm_state28, tmp_686_fu_1494_p3)
    begin
        if ((((ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond_flatten20_reg_1618)) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_block_pp2_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_1 = tmp_686_fu_1494_p3)))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_1_fu_727_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(p_mid2_fu_701_p3));
    p_cast_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid2_reg_1576),32));
    p_mid2_fu_701_p3 <= 
        ap_const_lv2_0 when (tmp_682_fu_696_p2(0) = '1') else 
        p_phi_fu_314_p4;

    p_phi_fu_314_p4_assign_proc : process(ap_block_pp0_stage0_flag00000000, p_reg_310, ap_reg_pp0_iter2_exitcond_flatten_reg_1513, p_1_reg_1592, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_1513) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then 
            p_phi_fu_314_p4 <= p_1_reg_1592;
        else 
            p_phi_fu_314_p4 <= p_reg_310;
        end if; 
    end process;

    p_shl10_cast_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_608_fu_1074_p3),8));
    p_shl11_cast_fu_1294_p3 <= (tmp_691_reg_1766 & ap_const_lv2_0);
    p_shl13_cast_fu_1228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_619_fu_1220_p3),8));
    p_shl14_cast_fu_1184_p3 <= (tmp_616_fu_1179_p2 & ap_const_lv5_0);
    p_shl15_cast_fu_1200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_688_fu_1192_p3),16));
    p_shl16_cast_fu_1157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_613_fu_1149_p3),11));
    p_shl17_cast_fu_1169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_614_fu_1161_p3),11));
    p_shl18_cast_fu_1456_p3 <= (tmp_604_reg_1843 & ap_const_lv5_0);
    p_shl19_cast_fu_1470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_685_fu_1463_p3),16));
        p_shl1_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_681_fu_651_p3),32));

    p_shl20_cast_fu_1409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_600_fu_1402_p3),11));
    p_shl21_cast_fu_1420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_601_fu_1413_p3),11));
    p_shl2_cast_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_599_p3),8));
    p_shl3_cast_fu_916_p3 <= (tmp_597_reg_1659 & ap_const_lv5_0);
    p_shl4_cast_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_684_fu_923_p3),16));
    p_shl5_cast_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_593_fu_858_p3),11));
    p_shl6_cast_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_594_fu_870_p3),11));
    p_shl7_cast_fu_1097_p3 <= (tmp_610_fu_1092_p2 & ap_const_lv5_0);
    p_shl8_cast_fu_1113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_687_fu_1105_p3),13));
    p_shl9_cast_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_607_fu_1062_p3),8));
        p_shl_fu_1259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_689_fu_1251_p3),32));

    sum_fu_758_p2 <= std_logic_vector(unsigned(tmp_592_fu_752_p2) + unsigned(conv1_weight_V3));
        tmp1_cast_fu_1002_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_996_p2),6));

    tmp1_fu_996_p2 <= std_logic_vector(unsigned(m_reg_403) + unsigned(ap_const_lv2_3));
        tmp2_cast_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_1038_p2),6));

    tmp2_fu_1038_p2 <= std_logic_vector(unsigned(n_reg_414) + unsigned(ap_const_lv2_3));
    tmp_27_cast_cast_fu_1054_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_1048_p2),13));
    tmp_27_fu_1048_p2 <= std_logic_vector(unsigned(w_reg_391) + unsigned(tmp2_cast_fu_1044_p1));
    tmp_585_fu_610_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_606_p1) - unsigned(i_cast_mid2_cast_fu_596_p1));
    tmp_586_fu_577_p2 <= (exitcond_flatten_mid_fu_565_p2 or exitcond_flatten18_reg_1522);
    tmp_587_fu_641_p2 <= std_logic_vector(unsigned(j_cast_mid2_cast_fu_638_p1) + unsigned(tmp_737_cast_fu_616_p1));
    tmp_588_fu_663_p2 <= std_logic_vector(signed(p_shl1_fu_659_p1) - signed(tmp_739_cast_fu_647_p1));
    tmp_589_fu_691_p2 <= (exitcond73_mid1_fu_679_p2 or exitcond_flatten_mid_reg_1554);
    tmp_590_fu_721_p2 <= std_logic_vector(unsigned(k_cast_mid2_cast_fu_717_p1) + unsigned(tmp_588_fu_663_p2));
    tmp_591_fu_744_p2 <= std_logic_vector(unsigned(tmp_683_fu_739_p2) - unsigned(tmp_590_reg_1586));
    tmp_592_fu_752_p2 <= std_logic_vector(unsigned(p_cast_fu_749_p1) + unsigned(tmp_591_fu_744_p2));
    tmp_593_fu_858_p3 <= (i_1_cast_mid2_v_fu_846_p3 & ap_const_lv5_0);
    tmp_594_fu_870_p3 <= (i_1_cast_mid2_v_fu_846_p3 & ap_const_lv1_0);
    tmp_595_fu_882_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_866_p1) + unsigned(p_shl6_cast_fu_878_p1));
    tmp_596_fu_805_p2 <= (exitcond70_mid_fu_799_p2 or exitcond_flatten21_fu_781_p2);
    tmp_597_fu_905_p2 <= std_logic_vector(unsigned(j_1_cast_mid2_cast_fu_901_p1) + unsigned(tmp_595_fu_882_p2));
    tmp_598_fu_934_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_916_p3) + unsigned(p_shl4_cast_fu_930_p1));
    tmp_599_fu_943_p2 <= std_logic_vector(unsigned(k_1_cast_cast_fu_940_p1) + unsigned(tmp_598_fu_934_p2));
    tmp_600_fu_1402_p3 <= (i_2_cast5_mid2_v_reg_1815 & ap_const_lv5_0);
    tmp_601_fu_1413_p3 <= (i_2_cast5_mid2_v_reg_1815 & ap_const_lv1_0);
    tmp_602_fu_1424_p2 <= std_logic_vector(unsigned(p_shl20_cast_fu_1409_p1) + unsigned(p_shl21_cast_fu_1420_p1));
    tmp_603_fu_1374_p2 <= (exitcond_mid_fu_1368_p2 or exitcond_flatten23_fu_1334_p2);
    tmp_604_fu_1445_p2 <= std_logic_vector(unsigned(j_2_cast4_mid2_cast_fu_1441_p1) + unsigned(tmp_602_fu_1424_p2));
    tmp_605_fu_1474_p2 <= std_logic_vector(unsigned(p_shl18_cast_fu_1456_p3) + unsigned(p_shl19_cast_fu_1470_p1));
    tmp_606_fu_1483_p2 <= std_logic_vector(unsigned(k_2_cast3_cast_fu_1480_p1) + unsigned(tmp_605_fu_1474_p2));
    tmp_607_fu_1062_p3 <= (ci_reg_425 & ap_const_lv5_0);
    tmp_608_fu_1074_p3 <= (ci_reg_425 & ap_const_lv1_0);
    tmp_609_fu_1086_p2 <= std_logic_vector(unsigned(p_shl9_cast_fu_1070_p1) + unsigned(p_shl10_cast_fu_1082_p1));
    tmp_610_fu_1092_p2 <= std_logic_vector(unsigned(tmp_cast_cast_reg_1710) + unsigned(tmp_609_fu_1086_p2));
    tmp_611_fu_1117_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_1097_p3) + unsigned(p_shl8_cast_fu_1113_p1));
    tmp_612_fu_1123_p2 <= std_logic_vector(unsigned(tmp_27_cast_cast_reg_1733) + unsigned(tmp_611_fu_1117_p2));
    tmp_613_fu_1149_p3 <= (co_reg_436 & ap_const_lv5_0);
    tmp_614_fu_1161_p3 <= (co_reg_436 & ap_const_lv1_0);
    tmp_615_fu_1173_p2 <= std_logic_vector(unsigned(p_shl17_cast_fu_1169_p1) + unsigned(p_shl16_cast_fu_1157_p1));
    tmp_616_fu_1179_p2 <= std_logic_vector(unsigned(tmp_615_fu_1173_p2) + unsigned(h_cast_cast_reg_1675));
    tmp_617_fu_1204_p2 <= std_logic_vector(unsigned(p_shl15_cast_fu_1200_p1) + unsigned(p_shl14_cast_fu_1184_p3));
    tmp_618_fu_1210_p2 <= std_logic_vector(unsigned(tmp_617_fu_1204_p2) + unsigned(w_cast_cast_reg_1684));
    tmp_619_fu_1220_p3 <= (co_reg_436 & ap_const_lv2_0);
    tmp_620_fu_1232_p2 <= std_logic_vector(unsigned(p_shl13_cast_fu_1228_p1) - unsigned(co_cast6_cast_fu_1145_p1));
    tmp_621_fu_1242_p2 <= std_logic_vector(signed(tmp_784_cast_fu_1238_p1) + signed(ci_cast7_cast_reg_1738));
    tmp_622_fu_1263_p2 <= std_logic_vector(signed(p_shl_fu_1259_p1) - signed(tmp_785_cast_fu_1247_p1));
    tmp_623_fu_1269_p2 <= std_logic_vector(unsigned(tmp_622_fu_1263_p2) + unsigned(m_cast9_reg_1697));
    tmp_624_fu_1301_p2 <= std_logic_vector(unsigned(p_shl11_cast_fu_1294_p3) - unsigned(tmp_690_reg_1761));
    tmp_625_fu_1306_p2 <= std_logic_vector(unsigned(tmp_624_fu_1301_p2) + unsigned(n_cast8_cast_reg_1720));
    tmp_681_fu_651_p3 <= (tmp_587_fu_641_p2 & ap_const_lv2_0);
    tmp_682_fu_696_p2 <= (tmp_589_fu_691_p2 or ap_reg_pp0_iter1_exitcond_flatten18_reg_1522);
    tmp_683_fu_739_p2 <= std_logic_vector(shift_left(unsigned(tmp_590_reg_1586),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_684_fu_923_p3 <= (tmp_597_reg_1659 & ap_const_lv1_0);
    tmp_685_fu_1463_p3 <= (tmp_604_reg_1843 & ap_const_lv1_0);
    tmp_686_fu_1494_p3 <= output_V_q0(7 downto 7);
    tmp_687_fu_1105_p3 <= (tmp_610_fu_1092_p2 & ap_const_lv1_0);
    tmp_688_fu_1192_p3 <= (tmp_616_fu_1179_p2 & ap_const_lv1_0);
    tmp_689_fu_1251_p3 <= (tmp_621_fu_1242_p2 & ap_const_lv2_0);
    tmp_690_fu_1274_p1 <= tmp_623_fu_1269_p2(11 - 1 downto 0);
    tmp_691_fu_1278_p1 <= tmp_623_fu_1269_p2(9 - 1 downto 0);
        tmp_737_cast_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_585_fu_610_p2),9));

        tmp_739_cast_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_587_fu_641_p2),32));

    tmp_757_cast_fu_949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_599_fu_943_p2),32));
    tmp_766_cast_fu_1489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_606_fu_1483_p2),32));
    tmp_774_cast_fu_1128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_612_fu_1123_p2),32));
    tmp_782_cast_fu_1215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_618_fu_1210_p2),32));
        tmp_784_cast_fu_1238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_620_fu_1232_p2),9));

        tmp_785_cast_fu_1247_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_621_fu_1242_p2),32));

    tmp_791_cast_fu_1311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_625_fu_1306_p2),32));
    tmp_cast_cast_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_1006_p2),8));
    tmp_fu_599_p3 <= (i_cast_mid2_v_reg_1537 & ap_const_lv2_0);
    tmp_s_fu_1006_p2 <= std_logic_vector(unsigned(h_reg_379) + unsigned(tmp1_cast_fu_1002_p1));
    w_44_fu_1016_p2 <= std_logic_vector(unsigned(w_reg_391) + unsigned(ap_const_lv6_1));
    w_cast_cast_fu_964_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_391),16));

    weight_V_blk_n_AR_assign_proc : process(m_axi_weight_V_ARREADY, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_flag00000000, ap_reg_pp0_iter3_exitcond_flatten_reg_1513)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_1513))) then 
            weight_V_blk_n_AR <= m_axi_weight_V_ARREADY;
        else 
            weight_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    weight_V_blk_n_R_assign_proc : process(m_axi_weight_V_RVALID, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter11, ap_reg_pp0_iter10_exitcond_flatten_reg_1513)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11) and (ap_const_lv1_0 = ap_reg_pp0_iter10_exitcond_flatten_reg_1513))) then 
            weight_V_blk_n_R <= m_axi_weight_V_RVALID;
        else 
            weight_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    weight_temp_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_block_pp0_stage0_flag00000000, ap_reg_pp0_iter11_tmp_592_reg_1602, ap_CS_fsm_state26, ap_enable_reg_pp0_iter12, tmp_791_cast_fu_1311_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            weight_temp_V_address0 <= tmp_791_cast_fu_1311_p1(10 - 1 downto 0);
        elsif (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12))) then 
            weight_temp_V_address0 <= ap_reg_pp0_iter11_tmp_592_reg_1602(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            weight_temp_V_address0 <= ap_const_lv32_0(10 - 1 downto 0);
        else 
            weight_temp_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    weight_temp_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_state26, ap_enable_reg_pp0_iter12)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12)))) then 
            weight_temp_V_ce0 <= ap_const_logic_1;
        else 
            weight_temp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weight_temp_V_d0_assign_proc : process(ap_CS_fsm_state1, ap_block_pp0_stage0_flag00000000, weight_V_addr_read_reg_1613, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12))) then 
            weight_temp_V_d0 <= weight_V_addr_read_reg_1613;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            weight_temp_V_d0 <= ap_const_lv8_0;
        else 
            weight_temp_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    weight_temp_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter11_exitcond_flatten_reg_1513, ap_enable_reg_pp0_iter12)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12) and (ap_const_lv1_0 = ap_reg_pp0_iter11_exitcond_flatten_reg_1513)))) then 
            weight_temp_V_we0 <= ap_const_logic_1;
        else 
            weight_temp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
