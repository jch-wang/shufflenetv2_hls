-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity avgpool is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    conv_last_output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv_last_output_V_ce0 : OUT STD_LOGIC;
    conv_last_output_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of avgpool is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_25_fu_143_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_25_reg_373 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_149_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_378 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond7_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_460_cast_fu_161_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_460_cast_reg_383 : STD_LOGIC_VECTOR (12 downto 0);
    signal h_24_fu_171_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_24_reg_391 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_464_cast_fu_186_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_464_cast_reg_396 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond8_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_363_reg_401 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_24_fu_220_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_24_reg_409 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_reg_419 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal p_Val2_111_fu_262_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_111_reg_426 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_reg_432 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_314_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal co_reg_80 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_Val2_s_reg_91 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_reg_103 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_108_reg_114 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_reg_126 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_465_cast_fu_235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_153_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_fu_177_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_364_fu_181_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_tr_fu_194_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_neg_fu_198_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_221_cast_fu_226_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_365_fu_230_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_222_fu_240_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_223_fu_244_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_110_fu_248_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_224_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_118_mux_fu_300_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_fu_307_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_lshr_cast_fu_330_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_fu_339_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_fu_349_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_310_fu_322_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_333_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_lshr_f_cast_fu_353_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_fu_357_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                co_reg_80 <= co_25_reg_373;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_80 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    h_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond_fu_214_p2))) then 
                h_reg_103 <= h_24_reg_391;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_137_p2 = ap_const_lv1_0))) then 
                h_reg_103 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_Val2_108_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_108_reg_114 <= sum_V_fu_314_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond8_fu_165_p2))) then 
                p_Val2_108_reg_114 <= p_Val2_s_reg_91;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond_fu_214_p2))) then 
                p_Val2_s_reg_91 <= p_Val2_108_reg_114;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_137_p2 = ap_const_lv1_0))) then 
                p_Val2_s_reg_91 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    w_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                w_reg_126 <= w_24_reg_409;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond8_fu_165_p2))) then 
                w_reg_126 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_25_reg_373 <= co_25_fu_143_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_24_reg_391 <= h_24_fu_171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                isneg_reg_419 <= p_Val2_110_fu_248_p2(8 downto 8);
                newsignbit_reg_432 <= p_Val2_111_fu_262_p2(7 downto 7);
                p_Val2_111_reg_426 <= p_Val2_111_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond8_fu_165_p2 = ap_const_lv1_1))) then
                tmp_363_reg_401 <= p_neg_fu_198_p2(8 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_137_p2 = ap_const_lv1_0))) then
                    tmp_460_cast_reg_383(11 downto 2) <= tmp_460_cast_fu_161_p1(11 downto 2);
                    tmp_reg_378(9 downto 0) <= tmp_fu_149_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond8_fu_165_p2))) then
                    tmp_464_cast_reg_396(14 downto 2) <= tmp_464_cast_fu_186_p3(14 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                w_24_reg_409 <= w_24_fu_220_p2;
            end if;
        end if;
    end process;
    tmp_reg_378(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    tmp_460_cast_reg_383(1 downto 0) <= "00";
    tmp_460_cast_reg_383(12) <= '0';
    tmp_464_cast_reg_396(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond7_fu_137_p2, ap_CS_fsm_state3, exitcond8_fu_165_p2, ap_CS_fsm_state4, exitcond_fu_214_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_137_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond8_fu_165_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond_fu_214_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond7_fu_137_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_137_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond7_fu_137_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond7_fu_137_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    brmerge_fu_295_p2 <= (newsignbit_reg_432 or isneg_not_fu_290_p2);
    brmerge_i_i_i_fu_286_p2 <= (isneg_reg_419 xor newsignbit_reg_432);
    co_25_fu_143_p2 <= std_logic_vector(unsigned(co_reg_80) + unsigned(ap_const_lv10_1));
    conv_last_output_V_address0 <= tmp_465_cast_fu_235_p1(13 - 1 downto 0);

    conv_last_output_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_last_output_V_ce0 <= ap_const_logic_1;
        else 
            conv_last_output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond7_fu_137_p2 <= "1" when (co_reg_80 = ap_const_lv10_200) else "0";
    exitcond8_fu_165_p2 <= "1" when (h_reg_103 = ap_const_lv3_4) else "0";
    exitcond_fu_214_p2 <= "1" when (w_reg_126 = ap_const_lv3_4) else "0";
    h_24_fu_171_p2 <= std_logic_vector(unsigned(h_reg_103) + unsigned(ap_const_lv3_1));
    isneg_not_fu_290_p2 <= (isneg_reg_419 xor ap_const_lv1_1);
    output_V_address0 <= tmp_reg_378(9 - 1 downto 0);

    output_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        output_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_fu_357_p3),8));


    output_V_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_110_fu_248_p2 <= std_logic_vector(signed(tmp_222_fu_240_p1) + signed(tmp_223_fu_244_p1));
    p_Val2_111_fu_262_p2 <= std_logic_vector(unsigned(p_Val2_108_reg_114) + unsigned(conv_last_output_V_q0));
    p_Val2_118_mux_fu_300_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_fu_286_p2(0) = '1') else 
        p_Val2_111_reg_426;
    p_Val2_1_fu_307_p3 <= 
        ap_const_lv8_80 when (underflow_fu_281_p2(0) = '1') else 
        p_Val2_111_reg_426;
    p_lshr_cast_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_363_reg_401),6));
    p_lshr_f_cast_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_349_p1),6));
    p_neg_fu_198_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_tr_fu_194_p1));
    p_neg_t_fu_333_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(p_lshr_cast_fu_330_p1));
    sum_V_fu_314_p3 <= 
        p_Val2_118_mux_fu_300_p3 when (brmerge_fu_295_p2(0) = '1') else 
        p_Val2_1_fu_307_p3;
    tmp_13_fu_339_p4 <= p_Val2_s_reg_91(7 downto 4);
        tmp_14_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_339_p4),5));

    tmp_15_fu_357_p3 <= 
        p_neg_t_fu_333_p2 when (tmp_310_fu_322_p3(0) = '1') else 
        p_lshr_f_cast_fu_353_p1;
    tmp_221_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_126),15));
        tmp_222_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_108_reg_114),9));

        tmp_223_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv_last_output_V_q0),9));

    tmp_224_fu_276_p2 <= (newsignbit_reg_432 xor ap_const_lv1_1);
    tmp_310_fu_322_p3 <= p_Val2_s_reg_91(7 downto 7);
    tmp_364_fu_181_p2 <= std_logic_vector(unsigned(tmp_cast_fu_177_p1) + unsigned(tmp_460_cast_reg_383));
    tmp_365_fu_230_p2 <= std_logic_vector(unsigned(tmp_464_cast_reg_396) + unsigned(tmp_221_cast_fu_226_p1));
    tmp_460_cast_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_153_p3),13));
    tmp_464_cast_fu_186_p3 <= (tmp_364_fu_181_p2 & ap_const_lv2_0);
    tmp_465_cast_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_365_fu_230_p2),64));
    tmp_cast_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_103),13));
    tmp_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_80),64));
    tmp_s_fu_153_p3 <= (co_reg_80 & ap_const_lv2_0);
        tmp_tr_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_91),9));

    underflow_fu_281_p2 <= (isneg_reg_419 and tmp_224_fu_276_p2);
    w_24_fu_220_p2 <= std_logic_vector(unsigned(w_reg_126) + unsigned(ap_const_lv3_1));
end behav;
