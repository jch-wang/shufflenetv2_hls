-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shuffle_48_r_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    right_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    right_V_ce0 : OUT STD_LOGIC;
    right_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of shuffle_48_r_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_252_fu_108_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_252_reg_323 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal co_16_fu_118_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_16_reg_330 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_271_fu_148_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_271_reg_335 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond3_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_275_fu_188_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_275_reg_340 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_16_fu_200_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal h_16_reg_348 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_277_fu_243_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_277_reg_353 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond2_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_279_fu_278_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_279_reg_358 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_16_fu_290_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_16_reg_366 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_281_fu_314_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_281_reg_376 : STD_LOGIC_VECTOR (14 downto 0);
    signal co_reg_75 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_reg_86 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_97 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_328_cast_fu_309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_329_cast_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_124_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_136_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast_fu_144_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_132_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_272_fu_154_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_273_fu_164_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_274_fu_176_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_184_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_172_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_fu_210_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_276_fu_214_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_253_fu_219_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_254_fu_231_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_fu_227_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl7_cast_fu_239_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_cast9_fu_206_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_278_fu_249_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_255_fu_254_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_256_fu_266_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl4_cast_fu_262_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl5_cast_fu_274_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_179_cast_fu_300_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_280_fu_304_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_179_cast8_fu_296_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_75_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_194_p2 = ap_const_lv1_1))) then 
                co_reg_75 <= co_16_reg_330;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_75 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    h_reg_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_284_p2 = ap_const_lv1_1))) then 
                h_reg_86 <= h_16_reg_348;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_112_p2 = ap_const_lv1_0))) then 
                h_reg_86 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_194_p2))) then 
                w_reg_97 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                w_reg_97 <= w_16_reg_366;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_16_reg_330 <= co_16_fu_118_p2;
                tmp_252_reg_323 <= tmp_252_fu_108_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_16_reg_348 <= h_16_fu_200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_112_p2 = ap_const_lv1_0))) then
                    tmp_271_reg_335(10 downto 1) <= tmp_271_fu_148_p2(10 downto 1);
                    tmp_275_reg_340(9 downto 1) <= tmp_275_fu_188_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_194_p2))) then
                    tmp_277_reg_353(13 downto 1) <= tmp_277_fu_243_p2(13 downto 1);
                    tmp_279_reg_358(14 downto 1) <= tmp_279_fu_278_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond_fu_284_p2) and (tmp_252_reg_323 = ap_const_lv1_1))) then
                tmp_281_reg_376 <= tmp_281_fu_314_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                w_16_reg_366 <= w_16_fu_290_p2;
            end if;
        end if;
    end process;
    tmp_271_reg_335(0) <= '0';
    tmp_275_reg_340(0) <= '0';
    tmp_277_reg_353(0) <= '0';
    tmp_279_reg_358(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_112_p2, ap_CS_fsm_state3, exitcond2_fu_194_p2, ap_CS_fsm_state4, exitcond_fu_284_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_112_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_194_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_284_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_112_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_112_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_112_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_112_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    co_16_fu_118_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(co_reg_75));
    exitcond2_fu_194_p2 <= "1" when (h_reg_86 = ap_const_lv4_A) else "0";
    exitcond3_fu_112_p2 <= "1" when (co_reg_75 = ap_const_lv7_60) else "0";
    exitcond_fu_284_p2 <= "1" when (w_reg_97 = ap_const_lv4_A) else "0";
    h_16_fu_200_p2 <= std_logic_vector(unsigned(h_reg_86) + unsigned(ap_const_lv4_1));
    output_V_address0 <= tmp_329_cast_fu_319_p1(14 - 1 downto 0);

    output_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= right_V_q0;

    output_V_we0_assign_proc : process(tmp_252_reg_323, ap_CS_fsm_state5)
    begin
        if (((tmp_252_reg_323 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_274_fu_176_p3),10));
    p_shl2_cast_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_124_p3),11));
    p_shl3_cast_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_136_p3),11));
    p_shl4_cast_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_255_fu_254_p3),15));
    p_shl5_cast_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_256_fu_266_p3),15));
    p_shl6_cast_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_253_fu_219_p3),14));
    p_shl7_cast_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_254_fu_231_p3),14));
    p_shl_cast_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_273_fu_164_p3),10));
    right_V_address0 <= tmp_328_cast_fu_309_p1(13 - 1 downto 0);

    right_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            right_V_ce0 <= ap_const_logic_1;
        else 
            right_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_179_cast8_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_97),15));
    tmp_179_cast_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_97),14));
    tmp_252_fu_108_p1 <= co_reg_75(1 - 1 downto 0);
    tmp_253_fu_219_p3 <= (tmp_276_fu_214_p2 & ap_const_lv3_0);
    tmp_254_fu_231_p3 <= (tmp_276_fu_214_p2 & ap_const_lv1_0);
    tmp_255_fu_254_p3 <= (tmp_278_fu_249_p2 & ap_const_lv3_0);
    tmp_256_fu_266_p3 <= (tmp_278_fu_249_p2 & ap_const_lv1_0);
    tmp_271_fu_148_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_144_p1) + unsigned(p_shl2_cast_fu_132_p1));
    tmp_272_fu_154_p4 <= co_reg_75(6 downto 1);
    tmp_273_fu_164_p3 <= (tmp_272_fu_154_p4 & ap_const_lv3_0);
    tmp_274_fu_176_p3 <= (tmp_272_fu_154_p4 & ap_const_lv1_0);
    tmp_275_fu_188_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_184_p1) + unsigned(p_shl_cast_fu_172_p1));
    tmp_276_fu_214_p2 <= std_logic_vector(unsigned(tmp_cast_fu_210_p1) + unsigned(tmp_275_reg_340));
    tmp_277_fu_243_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_227_p1) + unsigned(p_shl7_cast_fu_239_p1));
    tmp_278_fu_249_p2 <= std_logic_vector(unsigned(tmp_cast9_fu_206_p1) + unsigned(tmp_271_reg_335));
    tmp_279_fu_278_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_262_p1) + unsigned(p_shl5_cast_fu_274_p1));
    tmp_280_fu_304_p2 <= std_logic_vector(unsigned(tmp_277_reg_353) + unsigned(tmp_179_cast_fu_300_p1));
    tmp_281_fu_314_p2 <= std_logic_vector(unsigned(tmp_279_reg_358) + unsigned(tmp_179_cast8_fu_296_p1));
    tmp_328_cast_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_280_fu_304_p2),64));
    tmp_329_cast_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_281_reg_376),64));
    tmp_cast9_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_86),11));
    tmp_cast_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_86),10));
    tmp_fu_124_p3 <= (co_reg_75 & ap_const_lv3_0);
    tmp_s_fu_136_p3 <= (co_reg_75 & ap_const_lv1_0);
    w_16_fu_290_p2 <= std_logic_vector(unsigned(w_reg_97) + unsigned(ap_const_lv4_1));
end behav;
