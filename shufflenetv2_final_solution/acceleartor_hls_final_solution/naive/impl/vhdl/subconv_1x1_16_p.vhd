-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_1x1_16_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_1x1_16_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_12_fu_194_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_12_reg_768 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_218_fu_229_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_218_reg_773 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond4_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_221_fu_259_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_221_reg_778 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_V_addr_reg_783 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_271_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_reg_791 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond5_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_224_fu_300_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_224_reg_796 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_164_cast_fu_312_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_164_cast_reg_804 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond6_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_addr_reg_809 : STD_LOGIC_VECTOR (12 downto 0);
    signal h_12_fu_326_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ci_6_fu_338_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ci_6_reg_822 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_233_fu_409_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_233_reg_827 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_12_fu_424_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_12_reg_837 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal weight_V_load_reg_847 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_V_load_reg_852 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_Val2_82_fu_440_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_82_reg_857 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_236_reg_862 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_83_fu_466_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_83_reg_867 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal signbit_reg_872 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_85_fu_500_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_85_reg_879 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_506_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_885 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_891 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_174_reg_898 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_904 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_175_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_175_reg_909 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_914 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_919 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_924 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_654_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal isneg_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal result_V_fu_684_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_941 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_12_reg_947 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_228_fu_744_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_228_reg_954 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_168_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_168_reg_959 : STD_LOGIC_VECTOR (0 downto 0);
    signal co_reg_130 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_141 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_153 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal p_Val2_s_reg_165 : STD_LOGIC_VECTOR (7 downto 0);
    signal ci_reg_177 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_252_cast_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_261_cast_fu_419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_260_cast_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_205_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_217_fu_217_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_fu_213_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_225_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_219_fu_235_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_220_fu_247_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_255_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_243_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_222_fu_275_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_223_fu_288_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_280_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl5_cast_fu_296_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_225_fu_316_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_226_fu_348_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_227_fu_360_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl8_cast_fu_356_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl9_cast_fu_368_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_229_fu_372_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_230_fu_378_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_231_fu_391_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_fu_383_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl7_cast_fu_399_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_232_fu_403_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_169_cast_fu_344_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_234_fu_414_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_82_fu_440_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_82_fu_440_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_170_fu_454_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_224_cast_fu_462_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_84_fu_479_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_171_fu_489_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_237_fu_492_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_172_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_239_fu_536_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_173_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_553_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i3_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_571_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_demorgan_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_90_mux_fu_642_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_71_fu_648_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_166_fu_666_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_165_fu_662_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_80_fu_670_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_167_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_12_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_722_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_729_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_1_fu_736_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_s_fu_754_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ci_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                ci_reg_177 <= ci_6_reg_822;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_306_p2))) then 
                ci_reg_177 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    co_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond5_fu_265_p2 = ap_const_lv1_1))) then 
                co_reg_130 <= co_12_reg_768;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_130 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_188_p2 = ap_const_lv1_0))) then 
                h_reg_141 <= ap_const_lv5_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_306_p2 = ap_const_lv1_1))) then 
                h_reg_141 <= h_12_fu_326_p2;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_Val2_s_reg_165 <= sum_V_fu_654_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_306_p2))) then 
                p_Val2_s_reg_165 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    w_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond5_fu_265_p2))) then 
                w_reg_153 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                w_reg_153 <= w_12_reg_837;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_188_p2 = ap_const_lv1_0))) then
                bias_V_addr_reg_783 <= tmp_fu_200_p1(5 - 1 downto 0);
                    tmp_218_reg_773(10 downto 3) <= tmp_218_fu_229_p2(10 downto 3);
                    tmp_221_reg_778(9 downto 1) <= tmp_221_fu_259_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                brmerge40_demorgan_i_reg_914 <= brmerge40_demorgan_i_fu_605_p2;
                brmerge_i_i_i_reg_924 <= brmerge_i_i_i_fu_627_p2;
                p_38_i_i_reg_904 <= p_38_i_i_fu_578_p2;
                tmp_175_reg_909 <= tmp_175_fu_594_p2;
                underflow_reg_919 <= underflow_fu_622_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                carry_reg_891 <= carry_fu_520_p2;
                newsignbit_reg_885 <= p_Val2_85_fu_500_p2(7 downto 7);
                p_Val2_83_reg_867 <= p_Val2_83_fu_466_p2;
                p_Val2_85_reg_879 <= p_Val2_85_fu_500_p2;
                signbit_reg_872 <= p_Val2_83_fu_466_p2(15 downto 15);
                tmp_174_reg_898 <= p_Val2_83_fu_466_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                ci_6_reg_822 <= ci_6_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_12_reg_768 <= co_12_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                input_V_load_reg_852 <= input_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                isneg_reg_934 <= p_Val2_80_fu_670_p2(8 downto 8);
                newsignbit_12_reg_947 <= result_V_fu_684_p2(7 downto 7);
                result_V_reg_941 <= result_V_fu_684_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_306_p2))) then
                output_V_addr_reg_809 <= tmp_252_cast_fu_321_p1(13 - 1 downto 0);
                    tmp_164_cast_reg_804(4 downto 0) <= tmp_164_cast_fu_312_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_82_reg_857 <= p_Val2_82_fu_440_p2;
                tmp_236_reg_862 <= p_Val2_82_fu_440_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_168_reg_959 <= tmp_168_fu_748_p2;
                tmp_228_reg_954 <= tmp_228_fu_744_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond5_fu_265_p2))) then
                    tmp_224_reg_796(13 downto 1) <= tmp_224_fu_300_p2(13 downto 1);
                    tmp_cast_reg_791(4 downto 0) <= tmp_cast_fu_271_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond_fu_332_p2))) then
                tmp_233_reg_827 <= tmp_233_fu_409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_fu_332_p2))) then
                w_12_reg_837 <= w_12_fu_424_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                weight_V_load_reg_847 <= weight_V_q0;
            end if;
        end if;
    end process;
    tmp_218_reg_773(2 downto 0) <= "000";
    tmp_221_reg_778(0) <= '0';
    tmp_cast_reg_791(9 downto 5) <= "00000";
    tmp_224_reg_796(0) <= '0';
    tmp_164_cast_reg_804(13 downto 5) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_188_p2, ap_CS_fsm_state3, exitcond5_fu_265_p2, ap_CS_fsm_state4, exitcond6_fu_306_p2, ap_CS_fsm_state5, exitcond_fu_332_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_188_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond5_fu_265_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_306_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_fu_332_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_543_p2 <= "1" when (tmp_174_reg_898 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_548_p2 <= "1" when (tmp_174_reg_898 = ap_const_lv2_0) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_188_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_188_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_188_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_188_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_783;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_605_p2 <= (newsignbit_reg_885 and deleted_ones_fu_571_p3);
    brmerge9_fu_717_p2 <= (newsignbit_12_reg_947 or isneg_not_fu_712_p2);
    brmerge_i_i3_fu_589_p2 <= (newsignbit_reg_885 or p_not_i_i_fu_583_p2);
    brmerge_i_i_fu_708_p2 <= (isneg_reg_934 xor newsignbit_12_reg_947);
    brmerge_i_i_i_fu_627_p2 <= (underflow_fu_622_p2 or overflow_fu_599_p2);
    carry_fu_520_p2 <= (tmp_237_fu_492_p3 and tmp_172_fu_514_p2);
    ci_6_fu_338_p2 <= std_logic_vector(unsigned(ci_reg_177) + unsigned(ap_const_lv5_1));
    co_12_fu_194_p2 <= std_logic_vector(unsigned(co_reg_130) + unsigned(ap_const_lv5_1));
    deleted_ones_fu_571_p3 <= 
        p_41_i_i_fu_566_p2 when (carry_reg_891(0) = '1') else 
        Range1_all_ones_fu_543_p2;
    deleted_zeros_fu_553_p3 <= 
        Range1_all_ones_fu_543_p2 when (carry_reg_891(0) = '1') else 
        Range1_all_zeros_fu_548_p2;
    exitcond4_fu_188_p2 <= "1" when (co_reg_130 = ap_const_lv5_18) else "0";
    exitcond5_fu_265_p2 <= "1" when (h_reg_141 = ap_const_lv5_11) else "0";
    exitcond6_fu_306_p2 <= "1" when (w_reg_153 = ap_const_lv5_11) else "0";
    exitcond_fu_332_p2 <= "1" when (ci_reg_177 = ap_const_lv5_18) else "0";
    h_12_fu_326_p2 <= std_logic_vector(unsigned(h_reg_141) + unsigned(ap_const_lv5_1));
    input_V_address0 <= tmp_260_cast_fu_430_p1(13 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isneg_not_fu_712_p2 <= (isneg_reg_934 xor ap_const_lv1_1);
    newsignbit_fu_506_p3 <= p_Val2_85_fu_500_p2(7 downto 7);
    output_V_address0 <= output_V_addr_reg_809;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_s_fu_754_p3),8));

    output_V_we0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_599_p2 <= (brmerge_i_i3_fu_589_p2 and tmp_175_fu_594_p2);
    p_38_i_i_fu_578_p2 <= (carry_reg_891 and Range1_all_ones_fu_543_p2);
    p_41_i_i_fu_566_p2 <= (signbit_reg_872 and tmp_173_fu_560_p2);
    p_Val2_80_fu_670_p2 <= std_logic_vector(signed(tmp_166_fu_666_p1) + signed(tmp_165_fu_662_p1));
    p_Val2_82_fu_440_p0 <= weight_V_load_reg_847;
    p_Val2_82_fu_440_p1 <= input_V_load_reg_852;
    p_Val2_82_fu_440_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_82_fu_440_p0) * signed(p_Val2_82_fu_440_p1))), 16));
    p_Val2_83_fu_466_p2 <= std_logic_vector(signed(tmp_224_cast_fu_462_p1) + signed(p_Val2_82_reg_857));
    p_Val2_84_fu_479_p4 <= p_Val2_83_fu_466_p2(13 downto 6);
    p_Val2_85_fu_500_p2 <= std_logic_vector(unsigned(p_Val2_84_fu_479_p4) + unsigned(tmp_171_fu_489_p1));
    p_Val2_90_mux_fu_642_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_924(0) = '1') else 
        p_Val2_85_reg_879;
    p_Val2_s_71_fu_648_p3 <= 
        ap_const_lv8_80 when (underflow_reg_919(0) = '1') else 
        p_Val2_85_reg_879;
    p_not_i_i_fu_583_p2 <= (deleted_zeros_fu_553_p3 xor ap_const_lv1_1);
    p_result_V_fu_729_p3 <= 
        ap_const_lv8_80 when (underflow_12_fu_703_p2(0) = '1') else 
        result_V_reg_941;
    p_s_fu_754_p3 <= 
        tmp_228_reg_954 when (tmp_168_reg_959(0) = '1') else 
        ap_const_lv7_0;
    p_shl1_cast_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_220_fu_247_p3),10));
    p_shl2_cast_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_205_p3),11));
    p_shl3_cast_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_217_fu_217_p3),11));
    p_shl4_cast_fu_280_p3 <= (tmp_222_fu_275_p2 & ap_const_lv4_0);
    p_shl5_cast_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_223_fu_288_p3),14));
    p_shl6_cast_fu_383_p3 <= (tmp_230_fu_378_p2 & ap_const_lv4_0);
    p_shl7_cast_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_231_fu_391_p3),14));
    p_shl8_cast_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_226_fu_348_p3),10));
    p_shl9_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_227_fu_360_p3),10));
    p_shl_cast_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_219_fu_235_p3),10));
    result_1_fu_736_p3 <= 
        result_V_mux_fu_722_p3 when (brmerge9_fu_717_p2(0) = '1') else 
        p_result_V_fu_729_p3;
    result_V_fu_684_p2 <= std_logic_vector(unsigned(bias_V_q0) + unsigned(p_Val2_s_reg_165));
    result_V_mux_fu_722_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_708_p2(0) = '1') else 
        result_V_reg_941;
    sum_V_fu_654_p3 <= 
        p_Val2_90_mux_fu_642_p3 when (underflow_not_fu_637_p2(0) = '1') else 
        p_Val2_s_71_fu_648_p3;
    tmp2_demorgan_fu_610_p2 <= (p_38_i_i_fu_578_p2 or brmerge40_demorgan_i_fu_605_p2);
    tmp2_fu_616_p2 <= (tmp2_demorgan_fu_610_p2 xor ap_const_lv1_1);
    tmp3_fu_633_p2 <= (brmerge40_demorgan_i_reg_914 or tmp_175_reg_909);
    tmp_164_cast_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_153),14));
        tmp_165_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_165),9));

        tmp_166_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    tmp_167_fu_698_p2 <= (newsignbit_12_reg_947 xor ap_const_lv1_1);
    tmp_168_fu_748_p2 <= "1" when (signed(result_1_fu_736_p3) > signed(ap_const_lv8_0)) else "0";
    tmp_169_cast_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_177),11));
    tmp_170_fu_454_p3 <= (p_Val2_s_reg_165 & ap_const_lv6_0);
    tmp_171_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_236_reg_862),8));
    tmp_172_fu_514_p2 <= (newsignbit_fu_506_p3 xor ap_const_lv1_1);
    tmp_173_fu_560_p2 <= (tmp_239_fu_536_p3 xor ap_const_lv1_1);
    tmp_175_fu_594_p2 <= (signbit_reg_872 xor ap_const_lv1_1);
    tmp_217_fu_217_p3 <= (co_reg_130 & ap_const_lv3_0);
    tmp_218_fu_229_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_213_p1) - unsigned(p_shl3_cast_fu_225_p1));
    tmp_219_fu_235_p3 <= (co_reg_130 & ap_const_lv4_0);
    tmp_220_fu_247_p3 <= (co_reg_130 & ap_const_lv1_0);
    tmp_221_fu_259_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_255_p1) + unsigned(p_shl_cast_fu_243_p1));
    tmp_222_fu_275_p2 <= std_logic_vector(unsigned(tmp_cast_fu_271_p1) + unsigned(tmp_221_reg_778));
    tmp_223_fu_288_p3 <= (tmp_222_fu_275_p2 & ap_const_lv1_0);
        tmp_224_cast_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_170_fu_454_p3),16));

    tmp_224_fu_300_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_280_p3) + unsigned(p_shl5_cast_fu_296_p1));
    tmp_225_fu_316_p2 <= std_logic_vector(unsigned(tmp_224_reg_796) + unsigned(tmp_164_cast_fu_312_p1));
    tmp_226_fu_348_p3 <= (ci_reg_177 & ap_const_lv4_0);
    tmp_227_fu_360_p3 <= (ci_reg_177 & ap_const_lv1_0);
    tmp_228_fu_744_p1 <= result_1_fu_736_p3(7 - 1 downto 0);
    tmp_229_fu_372_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_356_p1) + unsigned(p_shl9_cast_fu_368_p1));
    tmp_230_fu_378_p2 <= std_logic_vector(unsigned(tmp_cast_reg_791) + unsigned(tmp_229_fu_372_p2));
    tmp_231_fu_391_p3 <= (tmp_230_fu_378_p2 & ap_const_lv1_0);
    tmp_232_fu_403_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_383_p3) + unsigned(p_shl7_cast_fu_399_p1));
    tmp_233_fu_409_p2 <= std_logic_vector(unsigned(tmp_164_cast_reg_804) + unsigned(tmp_232_fu_403_p2));
    tmp_234_fu_414_p2 <= std_logic_vector(unsigned(tmp_169_cast_fu_344_p1) + unsigned(tmp_218_reg_773));
    tmp_237_fu_492_p3 <= p_Val2_83_fu_466_p2(13 downto 13);
    tmp_239_fu_536_p3 <= p_Val2_83_reg_867(14 downto 14);
    tmp_252_cast_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_225_fu_316_p2),64));
    tmp_260_cast_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_233_reg_827),64));
        tmp_261_cast_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_234_fu_414_p2),64));

    tmp_cast_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_141),10));
    tmp_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_130),64));
    tmp_s_fu_205_p3 <= (co_reg_130 & ap_const_lv5_0);
    underflow_12_fu_703_p2 <= (isneg_reg_934 and tmp_167_fu_698_p2);
    underflow_fu_622_p2 <= (signbit_reg_872 and tmp2_fu_616_p2);
    underflow_not_fu_637_p2 <= (tmp3_fu_633_p2 or p_38_i_i_reg_904);
    w_12_fu_424_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(w_reg_153));
    weight_V_address0 <= tmp_261_cast_fu_419_p1(10 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
