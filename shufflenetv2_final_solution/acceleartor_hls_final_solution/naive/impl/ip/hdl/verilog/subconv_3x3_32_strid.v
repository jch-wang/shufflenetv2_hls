// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_32_strid (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] input_V_address0;
output   input_V_ce0;
input  [7:0] input_V_q0;
output  [7:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [4:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] co_4_fu_226_p2;
reg   [4:0] co_4_reg_855;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_72_fu_269_p2;
reg   [10:0] tmp_72_reg_860;
wire   [0:0] exitcond4_fu_220_p2;
wire  signed [8:0] tmp_83_cast_fu_293_p1;
reg  signed [8:0] tmp_83_cast_reg_865;
wire   [9:0] tmp_76_fu_309_p2;
reg   [9:0] tmp_76_reg_870;
reg   [4:0] bias_V_addr_reg_875;
wire   [5:0] tmp_s_fu_321_p3;
reg   [5:0] tmp_s_reg_883;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond5_fu_315_p2;
wire   [13:0] tmp_79_fu_358_p2;
reg   [13:0] tmp_79_reg_888;
wire   [5:0] tmp_53_fu_370_p3;
reg   [5:0] tmp_53_reg_896;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond6_fu_364_p2;
wire   [4:0] h_4_fu_378_p2;
wire   [1:0] m_4_fu_390_p2;
reg   [1:0] m_4_reg_909;
wire    ap_CS_fsm_state5;
wire   [8:0] tmp_83_fu_411_p2;
reg   [8:0] tmp_83_reg_914;
wire   [0:0] exitcond7_fu_384_p2;
wire   [15:0] tmp_86_fu_461_p2;
reg   [15:0] tmp_86_reg_919;
wire   [13:0] tmp_80_fu_471_p2;
reg   [13:0] tmp_80_reg_924;
wire   [4:0] w_4_fu_476_p2;
reg   [4:0] w_4_reg_929;
wire   [1:0] n_4_fu_488_p2;
reg   [1:0] n_4_reg_937;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_482_p2;
reg   [7:0] weight_V_load_reg_952;
wire    ap_CS_fsm_state7;
reg   [7:0] input_V_load_reg_957;
wire   [15:0] p_Val2_3_fu_543_p2;
reg   [15:0] p_Val2_3_reg_962;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_90_reg_967;
wire   [15:0] p_Val2_27_fu_569_p2;
reg   [15:0] p_Val2_27_reg_972;
wire    ap_CS_fsm_state9;
reg   [0:0] signbit_reg_977;
wire   [7:0] p_Val2_29_fu_603_p2;
reg   [7:0] p_Val2_29_reg_984;
wire   [0:0] newsignbit_fu_609_p3;
reg   [0:0] newsignbit_reg_990;
wire   [0:0] carry_fu_623_p2;
reg   [0:0] carry_reg_996;
reg   [1:0] tmp_68_reg_1003;
wire   [0:0] p_38_i_i_fu_681_p2;
reg   [0:0] p_38_i_i_reg_1009;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_69_fu_697_p2;
reg   [0:0] tmp_69_reg_1014;
wire   [0:0] brmerge40_demorgan_i_fu_708_p2;
reg   [0:0] brmerge40_demorgan_i_reg_1019;
wire   [0:0] underflow_fu_725_p2;
reg   [0:0] underflow_reg_1024;
wire   [0:0] brmerge_i_i_i_fu_730_p2;
reg   [0:0] brmerge_i_i_i_reg_1029;
wire   [7:0] sum_V_fu_757_p3;
wire    ap_CS_fsm_state11;
reg   [0:0] isneg_reg_1039;
wire    ap_CS_fsm_state12;
wire   [7:0] result_V_fu_787_p2;
reg   [7:0] result_V_reg_1046;
reg   [0:0] newsignbit_4_reg_1052;
reg   [4:0] co_reg_139;
reg   [4:0] h_reg_150;
reg   [4:0] w_reg_162;
wire    ap_CS_fsm_state13;
reg   [7:0] p_Val2_s_reg_174;
reg   [1:0] m_reg_186;
reg   [7:0] p_Val2_26_reg_197;
reg   [1:0] n_reg_209;
wire   [63:0] tmp_fu_232_p1;
wire   [63:0] tmp_99_cast_fu_503_p1;
wire   [63:0] tmp_100_cast_fu_532_p1;
wire   [63:0] tmp_91_cast_fu_848_p1;
wire   [9:0] tmp_70_fu_241_p3;
wire   [5:0] tmp_71_fu_253_p3;
wire   [10:0] p_shl4_cast_fu_265_p1;
wire   [10:0] p_shl3_cast_fu_249_p1;
wire   [6:0] tmp_73_fu_275_p3;
wire   [7:0] p_shl2_cast_fu_283_p1;
wire   [7:0] tmp_cast_fu_237_p1;
wire   [7:0] tmp_74_fu_287_p2;
wire   [8:0] tmp_75_fu_297_p3;
wire   [9:0] p_shl4_cast1_fu_261_p1;
wire   [9:0] p_shl_cast_fu_305_p1;
wire   [9:0] tmp_52_cast_fu_329_p1;
wire   [9:0] tmp_77_fu_333_p2;
wire   [10:0] tmp_78_fu_346_p3;
wire   [13:0] p_shl6_cast_fu_354_p1;
wire   [13:0] p_shl5_cast_fu_338_p3;
wire   [8:0] tmp_58_cast_fu_396_p1;
wire   [8:0] tmp_81_fu_400_p2;
wire   [8:0] tmp_82_fu_405_p2;
wire   [1:0] tmp2_fu_417_p2;
wire  signed [5:0] tmp2_cast_fu_423_p1;
wire   [5:0] tmp_59_fu_427_p2;
wire   [10:0] tmp_60_cast_fu_432_p1;
wire   [10:0] tmp_84_fu_436_p2;
wire   [11:0] tmp_85_fu_449_p3;
wire   [15:0] p_shl8_cast_fu_457_p1;
wire   [15:0] p_shl7_cast_fu_441_p3;
wire   [13:0] tmp_57_cast_fu_467_p1;
wire   [8:0] tmp_61_cast_fu_494_p1;
wire   [8:0] tmp_87_fu_498_p2;
wire   [1:0] tmp3_fu_508_p2;
wire  signed [5:0] tmp3_cast_fu_514_p1;
wire   [5:0] tmp_62_fu_518_p2;
wire   [15:0] tmp_63_cast_fu_523_p1;
wire   [15:0] tmp_88_fu_527_p2;
wire  signed [7:0] p_Val2_3_fu_543_p0;
wire  signed [7:0] p_Val2_3_fu_543_p1;
wire   [13:0] tmp_64_fu_557_p3;
wire  signed [15:0] tmp_84_cast_fu_565_p1;
wire   [7:0] p_Val2_28_fu_582_p4;
wire   [7:0] tmp_65_fu_592_p1;
wire   [0:0] tmp_91_fu_595_p3;
wire   [0:0] tmp_66_fu_617_p2;
wire   [0:0] Range1_all_ones_fu_646_p2;
wire   [0:0] Range1_all_zeros_fu_651_p2;
wire   [0:0] tmp_93_fu_639_p3;
wire   [0:0] tmp_67_fu_663_p2;
wire   [0:0] p_41_i_i_fu_669_p2;
wire   [0:0] deleted_zeros_fu_656_p3;
wire   [0:0] p_not_i_i_fu_686_p2;
wire   [0:0] brmerge_i_i4_fu_692_p2;
wire   [0:0] deleted_ones_fu_674_p3;
wire   [0:0] tmp4_demorgan_fu_713_p2;
wire   [0:0] tmp4_fu_719_p2;
wire   [0:0] overflow_fu_702_p2;
wire   [0:0] tmp5_fu_736_p2;
wire   [0:0] underflow_not_fu_740_p2;
wire   [7:0] p_Val2_32_mux_fu_745_p3;
wire   [7:0] p_Val2_s_36_fu_751_p3;
wire  signed [8:0] tmp_54_fu_765_p1;
wire  signed [8:0] tmp_55_fu_769_p1;
wire   [8:0] p_Val2_24_fu_773_p2;
wire   [0:0] tmp_56_fu_801_p2;
wire   [0:0] isneg_not_fu_815_p2;
wire   [0:0] brmerge_i_i_fu_811_p2;
wire   [0:0] underflow_4_fu_806_p2;
wire   [0:0] brmerge9_fu_820_p2;
wire   [7:0] result_V_mux_fu_825_p3;
wire   [7:0] p_result_V_fu_832_p3;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond5_fu_315_p2 == 1'd1))) begin
        co_reg_139 <= co_4_reg_855;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_139 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_220_p2 == 1'd0))) begin
        h_reg_150 <= 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond6_fu_364_p2 == 1'd1))) begin
        h_reg_150 <= h_4_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_482_p2))) begin
        m_reg_186 <= m_4_reg_909;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_364_p2))) begin
        m_reg_186 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        n_reg_209 <= n_4_reg_937;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_384_p2))) begin
        n_reg_209 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_26_reg_197 <= sum_V_fu_757_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_384_p2))) begin
        p_Val2_26_reg_197 <= p_Val2_s_reg_174;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_482_p2))) begin
        p_Val2_s_reg_174 <= p_Val2_26_reg_197;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_364_p2))) begin
        p_Val2_s_reg_174 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond5_fu_315_p2))) begin
        w_reg_162 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        w_reg_162 <= w_4_reg_929;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_220_p2 == 1'd0))) begin
        bias_V_addr_reg_875 <= tmp_fu_232_p1;
        tmp_72_reg_860[10 : 1] <= tmp_72_fu_269_p2[10 : 1];
        tmp_76_reg_870[9 : 1] <= tmp_76_fu_309_p2[9 : 1];
        tmp_83_cast_reg_865 <= tmp_83_cast_fu_293_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        brmerge40_demorgan_i_reg_1019 <= brmerge40_demorgan_i_fu_708_p2;
        brmerge_i_i_i_reg_1029 <= brmerge_i_i_i_fu_730_p2;
        p_38_i_i_reg_1009 <= p_38_i_i_fu_681_p2;
        tmp_69_reg_1014 <= tmp_69_fu_697_p2;
        underflow_reg_1024 <= underflow_fu_725_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        carry_reg_996 <= carry_fu_623_p2;
        newsignbit_reg_990 <= p_Val2_29_fu_603_p2[32'd7];
        p_Val2_27_reg_972 <= p_Val2_27_fu_569_p2;
        p_Val2_29_reg_984 <= p_Val2_29_fu_603_p2;
        signbit_reg_977 <= p_Val2_27_fu_569_p2[32'd15];
        tmp_68_reg_1003 <= {{p_Val2_27_fu_569_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_4_reg_855 <= co_4_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_V_load_reg_957 <= input_V_q0;
        weight_V_load_reg_952 <= weight_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        isneg_reg_1039 <= p_Val2_24_fu_773_p2[32'd8];
        newsignbit_4_reg_1052 <= result_V_fu_787_p2[32'd7];
        result_V_reg_1046 <= result_V_fu_787_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_4_reg_909 <= m_4_fu_390_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_4_reg_937 <= n_4_fu_488_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_3_reg_962 <= p_Val2_3_fu_543_p2;
        tmp_90_reg_967 <= p_Val2_3_fu_543_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_364_p2))) begin
        tmp_53_reg_896[5 : 1] <= tmp_53_fu_370_p3[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond5_fu_315_p2))) begin
        tmp_79_reg_888[13 : 1] <= tmp_79_fu_358_p2[13 : 1];
        tmp_s_reg_883[5 : 1] <= tmp_s_fu_321_p3[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond7_fu_384_p2))) begin
        tmp_80_reg_924 <= tmp_80_fu_471_p2;
        w_4_reg_929 <= w_4_fu_476_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_384_p2))) begin
        tmp_83_reg_914 <= tmp_83_fu_411_p2;
        tmp_86_reg_919[15 : 1] <= tmp_86_fu_461_p2[15 : 1];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_220_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_220_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_220_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond5_fu_315_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond6_fu_364_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_384_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_482_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_646_p2 = ((tmp_68_reg_1003 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_651_p2 = ((tmp_68_reg_1003 == 2'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_875;

assign brmerge40_demorgan_i_fu_708_p2 = (newsignbit_reg_990 & deleted_ones_fu_674_p3);

assign brmerge9_fu_820_p2 = (newsignbit_4_reg_1052 | isneg_not_fu_815_p2);

assign brmerge_i_i4_fu_692_p2 = (newsignbit_reg_990 | p_not_i_i_fu_686_p2);

assign brmerge_i_i_fu_811_p2 = (isneg_reg_1039 ^ newsignbit_4_reg_1052);

assign brmerge_i_i_i_fu_730_p2 = (underflow_fu_725_p2 | overflow_fu_702_p2);

assign carry_fu_623_p2 = (tmp_91_fu_595_p3 & tmp_66_fu_617_p2);

assign co_4_fu_226_p2 = (co_reg_139 + 5'd1);

assign deleted_ones_fu_674_p3 = ((carry_reg_996[0:0] === 1'b1) ? p_41_i_i_fu_669_p2 : Range1_all_ones_fu_646_p2);

assign deleted_zeros_fu_656_p3 = ((carry_reg_996[0:0] === 1'b1) ? Range1_all_ones_fu_646_p2 : Range1_all_zeros_fu_651_p2);

assign exitcond4_fu_220_p2 = ((co_reg_139 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond5_fu_315_p2 = ((h_reg_150 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond6_fu_364_p2 = ((w_reg_162 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond7_fu_384_p2 = ((m_reg_186 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_482_p2 = ((n_reg_209 == 2'd3) ? 1'b1 : 1'b0);

assign h_4_fu_378_p2 = (h_reg_150 + 5'd1);

assign input_V_address0 = tmp_100_cast_fu_532_p1;

assign isneg_not_fu_815_p2 = (isneg_reg_1039 ^ 1'd1);

assign m_4_fu_390_p2 = (m_reg_186 + 2'd1);

assign n_4_fu_488_p2 = (n_reg_209 + 2'd1);

assign newsignbit_fu_609_p3 = p_Val2_29_fu_603_p2[32'd7];

assign output_V_address0 = tmp_91_cast_fu_848_p1;

assign output_V_d0 = ((brmerge9_fu_820_p2[0:0] === 1'b1) ? result_V_mux_fu_825_p3 : p_result_V_fu_832_p3);

assign overflow_fu_702_p2 = (brmerge_i_i4_fu_692_p2 & tmp_69_fu_697_p2);

assign p_38_i_i_fu_681_p2 = (carry_reg_996 & Range1_all_ones_fu_646_p2);

assign p_41_i_i_fu_669_p2 = (signbit_reg_977 & tmp_67_fu_663_p2);

assign p_Val2_24_fu_773_p2 = ($signed(tmp_54_fu_765_p1) + $signed(tmp_55_fu_769_p1));

assign p_Val2_27_fu_569_p2 = ($signed(tmp_84_cast_fu_565_p1) + $signed(p_Val2_3_reg_962));

assign p_Val2_28_fu_582_p4 = {{p_Val2_27_fu_569_p2[13:6]}};

assign p_Val2_29_fu_603_p2 = (p_Val2_28_fu_582_p4 + tmp_65_fu_592_p1);

assign p_Val2_32_mux_fu_745_p3 = ((brmerge_i_i_i_reg_1029[0:0] === 1'b1) ? 8'd127 : p_Val2_29_reg_984);

assign p_Val2_3_fu_543_p0 = weight_V_load_reg_952;

assign p_Val2_3_fu_543_p1 = input_V_load_reg_957;

assign p_Val2_3_fu_543_p2 = ($signed(p_Val2_3_fu_543_p0) * $signed(p_Val2_3_fu_543_p1));

assign p_Val2_s_36_fu_751_p3 = ((underflow_reg_1024[0:0] === 1'b1) ? 8'd128 : p_Val2_29_reg_984);

assign p_not_i_i_fu_686_p2 = (deleted_zeros_fu_656_p3 ^ 1'd1);

assign p_result_V_fu_832_p3 = ((underflow_4_fu_806_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_1046);

assign p_shl2_cast_fu_283_p1 = tmp_73_fu_275_p3;

assign p_shl3_cast_fu_249_p1 = tmp_70_fu_241_p3;

assign p_shl4_cast1_fu_261_p1 = tmp_71_fu_253_p3;

assign p_shl4_cast_fu_265_p1 = tmp_71_fu_253_p3;

assign p_shl5_cast_fu_338_p3 = {{tmp_77_fu_333_p2}, {4'd0}};

assign p_shl6_cast_fu_354_p1 = tmp_78_fu_346_p3;

assign p_shl7_cast_fu_441_p3 = {{tmp_84_fu_436_p2}, {5'd0}};

assign p_shl8_cast_fu_457_p1 = tmp_85_fu_449_p3;

assign p_shl_cast_fu_305_p1 = tmp_75_fu_297_p3;

assign result_V_fu_787_p2 = (p_Val2_s_reg_174 + bias_V_q0);

assign result_V_mux_fu_825_p3 = ((brmerge_i_i_fu_811_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_1046);

assign sum_V_fu_757_p3 = ((underflow_not_fu_740_p2[0:0] === 1'b1) ? p_Val2_32_mux_fu_745_p3 : p_Val2_s_36_fu_751_p3);

assign tmp2_cast_fu_423_p1 = $signed(tmp2_fu_417_p2);

assign tmp2_fu_417_p2 = (m_reg_186 ^ 2'd2);

assign tmp3_cast_fu_514_p1 = $signed(tmp3_fu_508_p2);

assign tmp3_fu_508_p2 = (n_reg_209 ^ 2'd2);

assign tmp4_demorgan_fu_713_p2 = (p_38_i_i_fu_681_p2 | brmerge40_demorgan_i_fu_708_p2);

assign tmp4_fu_719_p2 = (tmp4_demorgan_fu_713_p2 ^ 1'd1);

assign tmp5_fu_736_p2 = (brmerge40_demorgan_i_reg_1019 | tmp_69_reg_1014);

assign tmp_100_cast_fu_532_p1 = tmp_88_fu_527_p2;

assign tmp_52_cast_fu_329_p1 = h_reg_150;

assign tmp_53_fu_370_p3 = {{w_reg_162}, {1'd0}};

assign tmp_54_fu_765_p1 = $signed(p_Val2_s_reg_174);

assign tmp_55_fu_769_p1 = $signed(bias_V_q0);

assign tmp_56_fu_801_p2 = (newsignbit_4_reg_1052 ^ 1'd1);

assign tmp_57_cast_fu_467_p1 = w_reg_162;

assign tmp_58_cast_fu_396_p1 = m_reg_186;

assign tmp_59_fu_427_p2 = ($signed(tmp_s_reg_883) + $signed(tmp2_cast_fu_423_p1));

assign tmp_60_cast_fu_432_p1 = tmp_59_fu_427_p2;

assign tmp_61_cast_fu_494_p1 = n_reg_209;

assign tmp_62_fu_518_p2 = ($signed(tmp3_cast_fu_514_p1) + $signed(tmp_53_reg_896));

assign tmp_63_cast_fu_523_p1 = tmp_62_fu_518_p2;

assign tmp_64_fu_557_p3 = {{p_Val2_26_reg_197}, {6'd0}};

assign tmp_65_fu_592_p1 = tmp_90_reg_967;

assign tmp_66_fu_617_p2 = (newsignbit_fu_609_p3 ^ 1'd1);

assign tmp_67_fu_663_p2 = (tmp_93_fu_639_p3 ^ 1'd1);

assign tmp_69_fu_697_p2 = (signbit_reg_977 ^ 1'd1);

assign tmp_70_fu_241_p3 = {{co_reg_139}, {5'd0}};

assign tmp_71_fu_253_p3 = {{co_reg_139}, {1'd0}};

assign tmp_72_fu_269_p2 = (p_shl4_cast_fu_265_p1 + p_shl3_cast_fu_249_p1);

assign tmp_73_fu_275_p3 = {{co_reg_139}, {2'd0}};

assign tmp_74_fu_287_p2 = (p_shl2_cast_fu_283_p1 - tmp_cast_fu_237_p1);

assign tmp_75_fu_297_p3 = {{co_reg_139}, {4'd0}};

assign tmp_76_fu_309_p2 = (p_shl4_cast1_fu_261_p1 + p_shl_cast_fu_305_p1);

assign tmp_77_fu_333_p2 = (tmp_76_reg_870 + tmp_52_cast_fu_329_p1);

assign tmp_78_fu_346_p3 = {{tmp_77_fu_333_p2}, {1'd0}};

assign tmp_79_fu_358_p2 = (p_shl6_cast_fu_354_p1 + p_shl5_cast_fu_338_p3);

assign tmp_80_fu_471_p2 = (tmp_79_reg_888 + tmp_57_cast_fu_467_p1);

assign tmp_81_fu_400_p2 = ($signed(tmp_83_cast_reg_865) + $signed(tmp_58_cast_fu_396_p1));

assign tmp_82_fu_405_p2 = tmp_81_fu_400_p2 << 9'd2;

assign tmp_83_cast_fu_293_p1 = $signed(tmp_74_fu_287_p2);

assign tmp_83_fu_411_p2 = (tmp_82_fu_405_p2 - tmp_81_fu_400_p2);

assign tmp_84_cast_fu_565_p1 = $signed(tmp_64_fu_557_p3);

assign tmp_84_fu_436_p2 = (tmp_72_reg_860 + tmp_60_cast_fu_432_p1);

assign tmp_85_fu_449_p3 = {{tmp_84_fu_436_p2}, {1'd0}};

assign tmp_86_fu_461_p2 = (p_shl8_cast_fu_457_p1 + p_shl7_cast_fu_441_p3);

assign tmp_87_fu_498_p2 = (tmp_61_cast_fu_494_p1 + tmp_83_reg_914);

assign tmp_88_fu_527_p2 = (tmp_63_cast_fu_523_p1 + tmp_86_reg_919);

assign tmp_91_cast_fu_848_p1 = tmp_80_reg_924;

assign tmp_91_fu_595_p3 = p_Val2_27_fu_569_p2[32'd13];

assign tmp_93_fu_639_p3 = p_Val2_27_reg_972[32'd14];

assign tmp_99_cast_fu_503_p1 = tmp_87_fu_498_p2;

assign tmp_cast_fu_237_p1 = co_reg_139;

assign tmp_fu_232_p1 = co_reg_139;

assign tmp_s_fu_321_p3 = {{h_reg_150}, {1'd0}};

assign underflow_4_fu_806_p2 = (isneg_reg_1039 & tmp_56_fu_801_p2);

assign underflow_fu_725_p2 = (signbit_reg_977 & tmp4_fu_719_p2);

assign underflow_not_fu_740_p2 = (tmp5_fu_736_p2 | p_38_i_i_reg_1009);

assign w_4_fu_476_p2 = (w_reg_162 + 5'd1);

assign weight_V_address0 = tmp_99_cast_fu_503_p1;

always @ (posedge ap_clk) begin
    tmp_72_reg_860[0] <= 1'b0;
    tmp_76_reg_870[0] <= 1'b0;
    tmp_s_reg_883[0] <= 1'b0;
    tmp_79_reg_888[0] <= 1'b0;
    tmp_53_reg_896[0] <= 1'b0;
    tmp_86_reg_919[0] <= 1'b0;
end

endmodule //subconv_3x3_32_strid
