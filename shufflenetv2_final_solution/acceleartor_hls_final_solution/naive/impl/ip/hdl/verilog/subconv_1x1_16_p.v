// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_1x1_16_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_V_address0;
output   input_V_ce0;
input  [7:0] input_V_q0;
output  [9:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [4:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] co_12_fu_194_p2;
reg   [4:0] co_12_reg_768;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_218_fu_229_p2;
reg   [10:0] tmp_218_reg_773;
wire   [0:0] exitcond4_fu_188_p2;
wire   [9:0] tmp_221_fu_259_p2;
reg   [9:0] tmp_221_reg_778;
reg   [4:0] bias_V_addr_reg_783;
wire   [9:0] tmp_cast_fu_271_p1;
reg   [9:0] tmp_cast_reg_791;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond5_fu_265_p2;
wire   [13:0] tmp_224_fu_300_p2;
reg   [13:0] tmp_224_reg_796;
wire   [13:0] tmp_164_cast_fu_312_p1;
reg   [13:0] tmp_164_cast_reg_804;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond6_fu_306_p2;
reg   [12:0] output_V_addr_reg_809;
wire   [4:0] h_12_fu_326_p2;
wire   [4:0] ci_6_fu_338_p2;
reg   [4:0] ci_6_reg_822;
wire    ap_CS_fsm_state5;
wire   [13:0] tmp_233_fu_409_p2;
reg   [13:0] tmp_233_reg_827;
wire   [0:0] exitcond_fu_332_p2;
wire   [4:0] w_12_fu_424_p2;
reg   [4:0] w_12_reg_837;
wire    ap_CS_fsm_state6;
reg   [7:0] weight_V_load_reg_847;
reg   [7:0] input_V_load_reg_852;
wire    ap_CS_fsm_state7;
wire   [15:0] p_Val2_82_fu_440_p2;
reg   [15:0] p_Val2_82_reg_857;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_236_reg_862;
wire   [15:0] p_Val2_83_fu_466_p2;
reg   [15:0] p_Val2_83_reg_867;
wire    ap_CS_fsm_state9;
reg   [0:0] signbit_reg_872;
wire   [7:0] p_Val2_85_fu_500_p2;
reg   [7:0] p_Val2_85_reg_879;
wire   [0:0] newsignbit_fu_506_p3;
reg   [0:0] newsignbit_reg_885;
wire   [0:0] carry_fu_520_p2;
reg   [0:0] carry_reg_891;
reg   [1:0] tmp_174_reg_898;
wire   [0:0] p_38_i_i_fu_578_p2;
reg   [0:0] p_38_i_i_reg_904;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_175_fu_594_p2;
reg   [0:0] tmp_175_reg_909;
wire   [0:0] brmerge40_demorgan_i_fu_605_p2;
reg   [0:0] brmerge40_demorgan_i_reg_914;
wire   [0:0] underflow_fu_622_p2;
reg   [0:0] underflow_reg_919;
wire   [0:0] brmerge_i_i_i_fu_627_p2;
reg   [0:0] brmerge_i_i_i_reg_924;
wire   [7:0] sum_V_fu_654_p3;
wire    ap_CS_fsm_state11;
reg   [0:0] isneg_reg_934;
wire    ap_CS_fsm_state12;
wire   [7:0] result_V_fu_684_p2;
reg   [7:0] result_V_reg_941;
reg   [0:0] newsignbit_12_reg_947;
wire   [6:0] tmp_228_fu_744_p1;
reg   [6:0] tmp_228_reg_954;
wire    ap_CS_fsm_state13;
wire   [0:0] tmp_168_fu_748_p2;
reg   [0:0] tmp_168_reg_959;
reg   [4:0] co_reg_130;
reg   [4:0] h_reg_141;
reg   [4:0] w_reg_153;
wire    ap_CS_fsm_state14;
reg   [7:0] p_Val2_s_reg_165;
reg   [4:0] ci_reg_177;
wire   [63:0] tmp_fu_200_p1;
wire   [63:0] tmp_252_cast_fu_321_p1;
wire  signed [63:0] tmp_261_cast_fu_419_p1;
wire   [63:0] tmp_260_cast_fu_430_p1;
wire   [9:0] tmp_s_fu_205_p3;
wire   [7:0] tmp_217_fu_217_p3;
wire   [10:0] p_shl2_cast_fu_213_p1;
wire   [10:0] p_shl3_cast_fu_225_p1;
wire   [8:0] tmp_219_fu_235_p3;
wire   [5:0] tmp_220_fu_247_p3;
wire   [9:0] p_shl1_cast_fu_255_p1;
wire   [9:0] p_shl_cast_fu_243_p1;
wire   [9:0] tmp_222_fu_275_p2;
wire   [10:0] tmp_223_fu_288_p3;
wire   [13:0] p_shl4_cast_fu_280_p3;
wire   [13:0] p_shl5_cast_fu_296_p1;
wire   [13:0] tmp_225_fu_316_p2;
wire   [8:0] tmp_226_fu_348_p3;
wire   [5:0] tmp_227_fu_360_p3;
wire   [9:0] p_shl8_cast_fu_356_p1;
wire   [9:0] p_shl9_cast_fu_368_p1;
wire   [9:0] tmp_229_fu_372_p2;
wire   [9:0] tmp_230_fu_378_p2;
wire   [10:0] tmp_231_fu_391_p3;
wire   [13:0] p_shl6_cast_fu_383_p3;
wire   [13:0] p_shl7_cast_fu_399_p1;
wire   [13:0] tmp_232_fu_403_p2;
wire   [10:0] tmp_169_cast_fu_344_p1;
wire   [10:0] tmp_234_fu_414_p2;
wire  signed [7:0] p_Val2_82_fu_440_p0;
wire  signed [7:0] p_Val2_82_fu_440_p1;
wire   [13:0] tmp_170_fu_454_p3;
wire  signed [15:0] tmp_224_cast_fu_462_p1;
wire   [7:0] p_Val2_84_fu_479_p4;
wire   [7:0] tmp_171_fu_489_p1;
wire   [0:0] tmp_237_fu_492_p3;
wire   [0:0] tmp_172_fu_514_p2;
wire   [0:0] Range1_all_ones_fu_543_p2;
wire   [0:0] Range1_all_zeros_fu_548_p2;
wire   [0:0] tmp_239_fu_536_p3;
wire   [0:0] tmp_173_fu_560_p2;
wire   [0:0] p_41_i_i_fu_566_p2;
wire   [0:0] deleted_zeros_fu_553_p3;
wire   [0:0] p_not_i_i_fu_583_p2;
wire   [0:0] brmerge_i_i3_fu_589_p2;
wire   [0:0] deleted_ones_fu_571_p3;
wire   [0:0] tmp2_demorgan_fu_610_p2;
wire   [0:0] tmp2_fu_616_p2;
wire   [0:0] overflow_fu_599_p2;
wire   [0:0] tmp3_fu_633_p2;
wire   [0:0] underflow_not_fu_637_p2;
wire   [7:0] p_Val2_90_mux_fu_642_p3;
wire   [7:0] p_Val2_s_71_fu_648_p3;
wire  signed [8:0] tmp_166_fu_666_p1;
wire  signed [8:0] tmp_165_fu_662_p1;
wire   [8:0] p_Val2_80_fu_670_p2;
wire   [0:0] tmp_167_fu_698_p2;
wire   [0:0] isneg_not_fu_712_p2;
wire   [0:0] brmerge_i_i_fu_708_p2;
wire   [0:0] underflow_12_fu_703_p2;
wire   [0:0] brmerge9_fu_717_p2;
wire   [7:0] result_V_mux_fu_722_p3;
wire   [7:0] p_result_V_fu_729_p3;
wire   [7:0] result_1_fu_736_p3;
wire   [6:0] p_s_fu_754_p3;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ci_reg_177 <= ci_6_reg_822;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_306_p2))) begin
        ci_reg_177 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond5_fu_265_p2 == 1'd1))) begin
        co_reg_130 <= co_12_reg_768;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_130 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_188_p2 == 1'd0))) begin
        h_reg_141 <= 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond6_fu_306_p2 == 1'd1))) begin
        h_reg_141 <= h_12_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_s_reg_165 <= sum_V_fu_654_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_306_p2))) begin
        p_Val2_s_reg_165 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond5_fu_265_p2))) begin
        w_reg_153 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        w_reg_153 <= w_12_reg_837;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_188_p2 == 1'd0))) begin
        bias_V_addr_reg_783 <= tmp_fu_200_p1;
        tmp_218_reg_773[10 : 3] <= tmp_218_fu_229_p2[10 : 3];
        tmp_221_reg_778[9 : 1] <= tmp_221_fu_259_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        brmerge40_demorgan_i_reg_914 <= brmerge40_demorgan_i_fu_605_p2;
        brmerge_i_i_i_reg_924 <= brmerge_i_i_i_fu_627_p2;
        p_38_i_i_reg_904 <= p_38_i_i_fu_578_p2;
        tmp_175_reg_909 <= tmp_175_fu_594_p2;
        underflow_reg_919 <= underflow_fu_622_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        carry_reg_891 <= carry_fu_520_p2;
        newsignbit_reg_885 <= p_Val2_85_fu_500_p2[32'd7];
        p_Val2_83_reg_867 <= p_Val2_83_fu_466_p2;
        p_Val2_85_reg_879 <= p_Val2_85_fu_500_p2;
        signbit_reg_872 <= p_Val2_83_fu_466_p2[32'd15];
        tmp_174_reg_898 <= {{p_Val2_83_fu_466_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ci_6_reg_822 <= ci_6_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_12_reg_768 <= co_12_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_V_load_reg_852 <= input_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        isneg_reg_934 <= p_Val2_80_fu_670_p2[32'd8];
        newsignbit_12_reg_947 <= result_V_fu_684_p2[32'd7];
        result_V_reg_941 <= result_V_fu_684_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_306_p2))) begin
        output_V_addr_reg_809 <= tmp_252_cast_fu_321_p1;
        tmp_164_cast_reg_804[4 : 0] <= tmp_164_cast_fu_312_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_82_reg_857 <= p_Val2_82_fu_440_p2;
        tmp_236_reg_862 <= p_Val2_82_fu_440_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_168_reg_959 <= tmp_168_fu_748_p2;
        tmp_228_reg_954 <= tmp_228_fu_744_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond5_fu_265_p2))) begin
        tmp_224_reg_796[13 : 1] <= tmp_224_fu_300_p2[13 : 1];
        tmp_cast_reg_791[4 : 0] <= tmp_cast_fu_271_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond_fu_332_p2))) begin
        tmp_233_reg_827 <= tmp_233_fu_409_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_fu_332_p2))) begin
        w_12_reg_837 <= w_12_fu_424_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_load_reg_847 <= weight_V_q0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_188_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_188_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_188_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond5_fu_265_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond6_fu_306_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_fu_332_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_543_p2 = ((tmp_174_reg_898 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_548_p2 = ((tmp_174_reg_898 == 2'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_783;

assign brmerge40_demorgan_i_fu_605_p2 = (newsignbit_reg_885 & deleted_ones_fu_571_p3);

assign brmerge9_fu_717_p2 = (newsignbit_12_reg_947 | isneg_not_fu_712_p2);

assign brmerge_i_i3_fu_589_p2 = (newsignbit_reg_885 | p_not_i_i_fu_583_p2);

assign brmerge_i_i_fu_708_p2 = (isneg_reg_934 ^ newsignbit_12_reg_947);

assign brmerge_i_i_i_fu_627_p2 = (underflow_fu_622_p2 | overflow_fu_599_p2);

assign carry_fu_520_p2 = (tmp_237_fu_492_p3 & tmp_172_fu_514_p2);

assign ci_6_fu_338_p2 = (ci_reg_177 + 5'd1);

assign co_12_fu_194_p2 = (co_reg_130 + 5'd1);

assign deleted_ones_fu_571_p3 = ((carry_reg_891[0:0] === 1'b1) ? p_41_i_i_fu_566_p2 : Range1_all_ones_fu_543_p2);

assign deleted_zeros_fu_553_p3 = ((carry_reg_891[0:0] === 1'b1) ? Range1_all_ones_fu_543_p2 : Range1_all_zeros_fu_548_p2);

assign exitcond4_fu_188_p2 = ((co_reg_130 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond5_fu_265_p2 = ((h_reg_141 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond6_fu_306_p2 = ((w_reg_153 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond_fu_332_p2 = ((ci_reg_177 == 5'd24) ? 1'b1 : 1'b0);

assign h_12_fu_326_p2 = (h_reg_141 + 5'd1);

assign input_V_address0 = tmp_260_cast_fu_430_p1;

assign isneg_not_fu_712_p2 = (isneg_reg_934 ^ 1'd1);

assign newsignbit_fu_506_p3 = p_Val2_85_fu_500_p2[32'd7];

assign output_V_address0 = output_V_addr_reg_809;

assign output_V_d0 = p_s_fu_754_p3;

assign overflow_fu_599_p2 = (brmerge_i_i3_fu_589_p2 & tmp_175_fu_594_p2);

assign p_38_i_i_fu_578_p2 = (carry_reg_891 & Range1_all_ones_fu_543_p2);

assign p_41_i_i_fu_566_p2 = (signbit_reg_872 & tmp_173_fu_560_p2);

assign p_Val2_80_fu_670_p2 = ($signed(tmp_166_fu_666_p1) + $signed(tmp_165_fu_662_p1));

assign p_Val2_82_fu_440_p0 = weight_V_load_reg_847;

assign p_Val2_82_fu_440_p1 = input_V_load_reg_852;

assign p_Val2_82_fu_440_p2 = ($signed(p_Val2_82_fu_440_p0) * $signed(p_Val2_82_fu_440_p1));

assign p_Val2_83_fu_466_p2 = ($signed(tmp_224_cast_fu_462_p1) + $signed(p_Val2_82_reg_857));

assign p_Val2_84_fu_479_p4 = {{p_Val2_83_fu_466_p2[13:6]}};

assign p_Val2_85_fu_500_p2 = (p_Val2_84_fu_479_p4 + tmp_171_fu_489_p1);

assign p_Val2_90_mux_fu_642_p3 = ((brmerge_i_i_i_reg_924[0:0] === 1'b1) ? 8'd127 : p_Val2_85_reg_879);

assign p_Val2_s_71_fu_648_p3 = ((underflow_reg_919[0:0] === 1'b1) ? 8'd128 : p_Val2_85_reg_879);

assign p_not_i_i_fu_583_p2 = (deleted_zeros_fu_553_p3 ^ 1'd1);

assign p_result_V_fu_729_p3 = ((underflow_12_fu_703_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_941);

assign p_s_fu_754_p3 = ((tmp_168_reg_959[0:0] === 1'b1) ? tmp_228_reg_954 : 7'd0);

assign p_shl1_cast_fu_255_p1 = tmp_220_fu_247_p3;

assign p_shl2_cast_fu_213_p1 = tmp_s_fu_205_p3;

assign p_shl3_cast_fu_225_p1 = tmp_217_fu_217_p3;

assign p_shl4_cast_fu_280_p3 = {{tmp_222_fu_275_p2}, {4'd0}};

assign p_shl5_cast_fu_296_p1 = tmp_223_fu_288_p3;

assign p_shl6_cast_fu_383_p3 = {{tmp_230_fu_378_p2}, {4'd0}};

assign p_shl7_cast_fu_399_p1 = tmp_231_fu_391_p3;

assign p_shl8_cast_fu_356_p1 = tmp_226_fu_348_p3;

assign p_shl9_cast_fu_368_p1 = tmp_227_fu_360_p3;

assign p_shl_cast_fu_243_p1 = tmp_219_fu_235_p3;

assign result_1_fu_736_p3 = ((brmerge9_fu_717_p2[0:0] === 1'b1) ? result_V_mux_fu_722_p3 : p_result_V_fu_729_p3);

assign result_V_fu_684_p2 = (bias_V_q0 + p_Val2_s_reg_165);

assign result_V_mux_fu_722_p3 = ((brmerge_i_i_fu_708_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_941);

assign sum_V_fu_654_p3 = ((underflow_not_fu_637_p2[0:0] === 1'b1) ? p_Val2_90_mux_fu_642_p3 : p_Val2_s_71_fu_648_p3);

assign tmp2_demorgan_fu_610_p2 = (p_38_i_i_fu_578_p2 | brmerge40_demorgan_i_fu_605_p2);

assign tmp2_fu_616_p2 = (tmp2_demorgan_fu_610_p2 ^ 1'd1);

assign tmp3_fu_633_p2 = (brmerge40_demorgan_i_reg_914 | tmp_175_reg_909);

assign tmp_164_cast_fu_312_p1 = w_reg_153;

assign tmp_165_fu_662_p1 = $signed(p_Val2_s_reg_165);

assign tmp_166_fu_666_p1 = $signed(bias_V_q0);

assign tmp_167_fu_698_p2 = (newsignbit_12_reg_947 ^ 1'd1);

assign tmp_168_fu_748_p2 = (($signed(result_1_fu_736_p3) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign tmp_169_cast_fu_344_p1 = ci_reg_177;

assign tmp_170_fu_454_p3 = {{p_Val2_s_reg_165}, {6'd0}};

assign tmp_171_fu_489_p1 = tmp_236_reg_862;

assign tmp_172_fu_514_p2 = (newsignbit_fu_506_p3 ^ 1'd1);

assign tmp_173_fu_560_p2 = (tmp_239_fu_536_p3 ^ 1'd1);

assign tmp_175_fu_594_p2 = (signbit_reg_872 ^ 1'd1);

assign tmp_217_fu_217_p3 = {{co_reg_130}, {3'd0}};

assign tmp_218_fu_229_p2 = (p_shl2_cast_fu_213_p1 - p_shl3_cast_fu_225_p1);

assign tmp_219_fu_235_p3 = {{co_reg_130}, {4'd0}};

assign tmp_220_fu_247_p3 = {{co_reg_130}, {1'd0}};

assign tmp_221_fu_259_p2 = (p_shl1_cast_fu_255_p1 + p_shl_cast_fu_243_p1);

assign tmp_222_fu_275_p2 = (tmp_cast_fu_271_p1 + tmp_221_reg_778);

assign tmp_223_fu_288_p3 = {{tmp_222_fu_275_p2}, {1'd0}};

assign tmp_224_cast_fu_462_p1 = $signed(tmp_170_fu_454_p3);

assign tmp_224_fu_300_p2 = (p_shl4_cast_fu_280_p3 + p_shl5_cast_fu_296_p1);

assign tmp_225_fu_316_p2 = (tmp_224_reg_796 + tmp_164_cast_fu_312_p1);

assign tmp_226_fu_348_p3 = {{ci_reg_177}, {4'd0}};

assign tmp_227_fu_360_p3 = {{ci_reg_177}, {1'd0}};

assign tmp_228_fu_744_p1 = result_1_fu_736_p3[6:0];

assign tmp_229_fu_372_p2 = (p_shl8_cast_fu_356_p1 + p_shl9_cast_fu_368_p1);

assign tmp_230_fu_378_p2 = (tmp_cast_reg_791 + tmp_229_fu_372_p2);

assign tmp_231_fu_391_p3 = {{tmp_230_fu_378_p2}, {1'd0}};

assign tmp_232_fu_403_p2 = (p_shl6_cast_fu_383_p3 + p_shl7_cast_fu_399_p1);

assign tmp_233_fu_409_p2 = (tmp_164_cast_reg_804 + tmp_232_fu_403_p2);

assign tmp_234_fu_414_p2 = (tmp_169_cast_fu_344_p1 + tmp_218_reg_773);

assign tmp_237_fu_492_p3 = p_Val2_83_fu_466_p2[32'd13];

assign tmp_239_fu_536_p3 = p_Val2_83_reg_867[32'd14];

assign tmp_252_cast_fu_321_p1 = tmp_225_fu_316_p2;

assign tmp_260_cast_fu_430_p1 = tmp_233_reg_827;

assign tmp_261_cast_fu_419_p1 = $signed(tmp_234_fu_414_p2);

assign tmp_cast_fu_271_p1 = h_reg_141;

assign tmp_fu_200_p1 = co_reg_130;

assign tmp_s_fu_205_p3 = {{co_reg_130}, {5'd0}};

assign underflow_12_fu_703_p2 = (isneg_reg_934 & tmp_167_fu_698_p2);

assign underflow_fu_622_p2 = (signbit_reg_872 & tmp2_fu_616_p2);

assign underflow_not_fu_637_p2 = (tmp3_fu_633_p2 | p_38_i_i_reg_904);

assign w_12_fu_424_p2 = (5'd1 + w_reg_153);

assign weight_V_address0 = tmp_261_cast_fu_419_p1;

always @ (posedge ap_clk) begin
    tmp_218_reg_773[2:0] <= 3'b000;
    tmp_221_reg_778[0] <= 1'b0;
    tmp_cast_reg_791[9:5] <= 5'b00000;
    tmp_224_reg_796[0] <= 1'b0;
    tmp_164_cast_reg_804[13:5] <= 9'b000000000;
end

endmodule //subconv_1x1_16_p
