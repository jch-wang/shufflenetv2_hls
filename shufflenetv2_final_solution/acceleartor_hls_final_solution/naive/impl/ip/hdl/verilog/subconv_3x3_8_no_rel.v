// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_8_no_rel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_V_address0;
output   input_V_ce0;
input  [7:0] input_V_q0;
output  [8:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [5:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] co_2_fu_218_p2;
reg   [5:0] co_2_reg_815;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_37_fu_257_p2;
reg   [9:0] tmp_37_reg_820;
wire   [0:0] exitcond5_fu_212_p2;
wire  signed [9:0] tmp_45_cast_fu_281_p1;
reg  signed [9:0] tmp_45_cast_reg_826;
reg   [5:0] bias_V_addr_reg_831;
wire   [13:0] tmp_43_fu_324_p2;
reg   [13:0] tmp_43_reg_839;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond6_fu_285_p2;
wire   [3:0] h_2_fu_336_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond7_fu_330_p2;
wire   [1:0] m_2_fu_348_p2;
reg   [1:0] m_2_reg_855;
wire    ap_CS_fsm_state5;
wire   [9:0] tmp_45_fu_358_p2;
reg   [9:0] tmp_45_reg_860;
wire   [0:0] exitcond8_fu_342_p2;
wire   [9:0] tmp_48_fu_383_p2;
reg   [9:0] tmp_48_reg_866;
wire   [9:0] tmp_47_fu_393_p2;
reg   [9:0] tmp_47_reg_872;
wire    ap_CS_fsm_state6;
wire   [13:0] tmp_51_fu_420_p2;
reg   [13:0] tmp_51_reg_877;
wire   [1:0] n_2_fu_432_p2;
reg   [1:0] n_2_reg_885;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond_fu_426_p2;
wire   [13:0] tmp_53_fu_472_p2;
reg   [13:0] tmp_53_reg_895;
wire    ap_CS_fsm_state8;
reg   [7:0] weight_V_load_reg_905;
reg   [7:0] input_V_load_reg_910;
wire    ap_CS_fsm_state9;
wire   [15:0] p_Val2_1_fu_487_p2;
reg   [15:0] p_Val2_1_reg_915;
wire    ap_CS_fsm_state10;
reg   [0:0] tmp_55_reg_920;
wire   [15:0] p_Val2_13_fu_513_p2;
reg   [15:0] p_Val2_13_reg_925;
wire    ap_CS_fsm_state11;
reg   [0:0] signbit_reg_930;
wire   [7:0] p_Val2_15_fu_547_p2;
reg   [7:0] p_Val2_15_reg_937;
wire   [0:0] newsignbit_fu_553_p3;
reg   [0:0] newsignbit_reg_943;
wire   [0:0] carry_fu_567_p2;
reg   [0:0] carry_reg_949;
reg   [1:0] tmp_34_reg_956;
wire   [0:0] p_38_i_i_fu_625_p2;
reg   [0:0] p_38_i_i_reg_962;
wire    ap_CS_fsm_state12;
wire   [0:0] tmp_35_fu_641_p2;
reg   [0:0] tmp_35_reg_967;
wire   [0:0] brmerge40_demorgan_i_fu_652_p2;
reg   [0:0] brmerge40_demorgan_i_reg_972;
wire   [0:0] underflow_fu_669_p2;
reg   [0:0] underflow_reg_977;
wire   [0:0] brmerge_i_i_i_fu_674_p2;
reg   [0:0] brmerge_i_i_i_reg_982;
wire   [7:0] sum_V_fu_701_p3;
wire    ap_CS_fsm_state13;
reg   [0:0] isneg_reg_992;
wire    ap_CS_fsm_state14;
wire   [7:0] result_V_fu_731_p2;
reg   [7:0] result_V_reg_999;
reg   [0:0] newsignbit_2_reg_1005;
wire   [3:0] w_2_fu_806_p2;
wire    ap_CS_fsm_state15;
reg   [5:0] co_reg_131;
reg   [3:0] h_reg_142;
reg   [3:0] w_reg_154;
reg   [7:0] p_Val2_s_reg_166;
reg   [1:0] m_reg_178;
reg   [7:0] p_Val2_12_reg_189;
reg   [1:0] n_reg_201;
wire   [63:0] tmp_fu_224_p1;
wire   [63:0] tmp_58_cast_fu_447_p1;
wire   [63:0] tmp_59_cast_fu_477_p1;
wire   [63:0] tmp_50_cast_fu_801_p1;
wire   [8:0] tmp_s_fu_233_p3;
wire   [6:0] tmp_36_fu_245_p3;
wire   [9:0] p_shl2_cast_fu_253_p1;
wire   [9:0] p_shl1_cast_fu_241_p1;
wire   [7:0] tmp_38_fu_263_p3;
wire   [8:0] p_shl_cast_fu_271_p1;
wire   [8:0] tmp_cast_fu_229_p1;
wire   [8:0] tmp_39_fu_275_p2;
wire   [9:0] tmp_cast_21_fu_291_p1;
wire   [9:0] tmp_40_fu_295_p2;
wire   [12:0] tmp_41_fu_300_p3;
wire   [10:0] tmp_42_fu_312_p3;
wire   [13:0] p_shl3_cast_fu_308_p1;
wire   [13:0] p_shl4_cast_fu_320_p1;
wire   [9:0] tmp_24_cast_fu_354_p1;
wire   [1:0] tmp2_fu_363_p2;
wire  signed [3:0] tmp2_cast_fu_369_p1;
wire   [3:0] tmp_25_fu_373_p2;
wire   [9:0] tmp_26_cast_fu_379_p1;
wire   [9:0] tmp_46_fu_388_p2;
wire   [12:0] tmp_49_fu_398_p3;
wire   [10:0] tmp_50_fu_409_p3;
wire   [13:0] p_shl6_cast_fu_416_p1;
wire   [13:0] p_shl5_cast_fu_405_p1;
wire   [9:0] tmp_27_cast_fu_438_p1;
wire   [9:0] tmp_52_fu_442_p2;
wire   [1:0] tmp3_fu_452_p2;
wire  signed [3:0] tmp3_cast_fu_458_p1;
wire   [3:0] tmp_28_fu_462_p2;
wire   [13:0] tmp_29_cast_fu_468_p1;
wire  signed [7:0] p_Val2_1_fu_487_p0;
wire  signed [7:0] p_Val2_1_fu_487_p1;
wire   [13:0] tmp_30_fu_501_p3;
wire  signed [15:0] tmp_38_cast_fu_509_p1;
wire   [7:0] p_Val2_14_fu_526_p4;
wire   [7:0] tmp_31_fu_536_p1;
wire   [0:0] tmp_56_fu_539_p3;
wire   [0:0] tmp_32_fu_561_p2;
wire   [0:0] Range1_all_ones_fu_590_p2;
wire   [0:0] Range1_all_zeros_fu_595_p2;
wire   [0:0] tmp_58_fu_583_p3;
wire   [0:0] tmp_33_fu_607_p2;
wire   [0:0] p_41_i_i_fu_613_p2;
wire   [0:0] deleted_zeros_fu_600_p3;
wire   [0:0] p_not_i_i_fu_630_p2;
wire   [0:0] brmerge_i_i2_fu_636_p2;
wire   [0:0] deleted_ones_fu_618_p3;
wire   [0:0] tmp4_demorgan_fu_657_p2;
wire   [0:0] tmp4_fu_663_p2;
wire   [0:0] overflow_fu_646_p2;
wire   [0:0] tmp5_fu_680_p2;
wire   [0:0] underflow_not_fu_684_p2;
wire   [7:0] p_Val2_16_mux_fu_689_p3;
wire   [7:0] p_Val2_s_25_fu_695_p3;
wire  signed [8:0] tmp_20_fu_709_p1;
wire  signed [8:0] tmp_21_fu_713_p1;
wire   [8:0] p_Val2_10_fu_717_p2;
wire   [0:0] tmp_22_fu_745_p2;
wire   [0:0] isneg_not_fu_759_p2;
wire   [0:0] brmerge_i_i_fu_755_p2;
wire   [0:0] underflow_2_fu_750_p2;
wire   [0:0] brmerge9_fu_764_p2;
wire   [7:0] result_V_mux_fu_769_p3;
wire   [7:0] p_result_V_fu_776_p3;
wire   [13:0] tmp_23_cast_fu_792_p1;
wire   [13:0] tmp_44_fu_796_p2;
reg   [14:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond6_fu_285_p2 == 1'd1))) begin
        co_reg_131 <= co_2_reg_815;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_131 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_212_p2 == 1'd0))) begin
        h_reg_142 <= 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond7_fu_330_p2 == 1'd1))) begin
        h_reg_142 <= h_2_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond7_fu_330_p2))) begin
        m_reg_178 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_426_p2))) begin
        m_reg_178 <= m_2_reg_855;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        n_reg_201 <= n_2_reg_885;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        n_reg_201 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        p_Val2_12_reg_189 <= sum_V_fu_701_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_12_reg_189 <= p_Val2_s_reg_166;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond7_fu_330_p2))) begin
        p_Val2_s_reg_166 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_426_p2))) begin
        p_Val2_s_reg_166 <= p_Val2_12_reg_189;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond6_fu_285_p2))) begin
        w_reg_154 <= 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        w_reg_154 <= w_2_fu_806_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_212_p2 == 1'd0))) begin
        bias_V_addr_reg_831 <= tmp_fu_224_p1;
        tmp_37_reg_820[9 : 1] <= tmp_37_fu_257_p2[9 : 1];
        tmp_45_cast_reg_826 <= tmp_45_cast_fu_281_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        brmerge40_demorgan_i_reg_972 <= brmerge40_demorgan_i_fu_652_p2;
        brmerge_i_i_i_reg_982 <= brmerge_i_i_i_fu_674_p2;
        p_38_i_i_reg_962 <= p_38_i_i_fu_625_p2;
        tmp_35_reg_967 <= tmp_35_fu_641_p2;
        underflow_reg_977 <= underflow_fu_669_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        carry_reg_949 <= carry_fu_567_p2;
        newsignbit_reg_943 <= p_Val2_15_fu_547_p2[32'd7];
        p_Val2_13_reg_925 <= p_Val2_13_fu_513_p2;
        p_Val2_15_reg_937 <= p_Val2_15_fu_547_p2;
        signbit_reg_930 <= p_Val2_13_fu_513_p2[32'd15];
        tmp_34_reg_956 <= {{p_Val2_13_fu_513_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_2_reg_815 <= co_2_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_V_load_reg_910 <= input_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        isneg_reg_992 <= p_Val2_10_fu_717_p2[32'd8];
        newsignbit_2_reg_1005 <= result_V_fu_731_p2[32'd7];
        result_V_reg_999 <= result_V_fu_731_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_2_reg_855 <= m_2_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        n_2_reg_885 <= n_2_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Val2_1_reg_915 <= p_Val2_1_fu_487_p2;
        tmp_55_reg_920 <= p_Val2_1_fu_487_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond6_fu_285_p2))) begin
        tmp_43_reg_839[13 : 1] <= tmp_43_fu_324_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond8_fu_342_p2))) begin
        tmp_45_reg_860 <= tmp_45_fu_358_p2;
        tmp_48_reg_866 <= tmp_48_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_47_reg_872 <= tmp_47_fu_393_p2;
        tmp_51_reg_877[13 : 1] <= tmp_51_fu_420_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond_fu_426_p2))) begin
        tmp_53_reg_895 <= tmp_53_fu_472_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        weight_V_load_reg_905 <= weight_V_q0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_212_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_212_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_212_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond6_fu_285_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond7_fu_330_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond8_fu_342_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_426_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_590_p2 = ((tmp_34_reg_956 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_595_p2 = ((tmp_34_reg_956 == 2'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_831;

assign brmerge40_demorgan_i_fu_652_p2 = (newsignbit_reg_943 & deleted_ones_fu_618_p3);

assign brmerge9_fu_764_p2 = (newsignbit_2_reg_1005 | isneg_not_fu_759_p2);

assign brmerge_i_i2_fu_636_p2 = (newsignbit_reg_943 | p_not_i_i_fu_630_p2);

assign brmerge_i_i_fu_755_p2 = (isneg_reg_992 ^ newsignbit_2_reg_1005);

assign brmerge_i_i_i_fu_674_p2 = (underflow_fu_669_p2 | overflow_fu_646_p2);

assign carry_fu_567_p2 = (tmp_56_fu_539_p3 & tmp_32_fu_561_p2);

assign co_2_fu_218_p2 = (co_reg_131 + 6'd1);

assign deleted_ones_fu_618_p3 = ((carry_reg_949[0:0] === 1'b1) ? p_41_i_i_fu_613_p2 : Range1_all_ones_fu_590_p2);

assign deleted_zeros_fu_600_p3 = ((carry_reg_949[0:0] === 1'b1) ? Range1_all_ones_fu_590_p2 : Range1_all_zeros_fu_595_p2);

assign exitcond5_fu_212_p2 = ((co_reg_131 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond6_fu_285_p2 = ((h_reg_142 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond7_fu_330_p2 = ((w_reg_154 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond8_fu_342_p2 = ((m_reg_178 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_426_p2 = ((n_reg_201 == 2'd3) ? 1'b1 : 1'b0);

assign h_2_fu_336_p2 = (h_reg_142 + 4'd1);

assign input_V_address0 = tmp_59_cast_fu_477_p1;

assign isneg_not_fu_759_p2 = (isneg_reg_992 ^ 1'd1);

assign m_2_fu_348_p2 = (m_reg_178 + 2'd1);

assign n_2_fu_432_p2 = (n_reg_201 + 2'd1);

assign newsignbit_fu_553_p3 = p_Val2_15_fu_547_p2[32'd7];

assign output_V_address0 = tmp_50_cast_fu_801_p1;

assign output_V_d0 = ((brmerge9_fu_764_p2[0:0] === 1'b1) ? result_V_mux_fu_769_p3 : p_result_V_fu_776_p3);

assign overflow_fu_646_p2 = (brmerge_i_i2_fu_636_p2 & tmp_35_fu_641_p2);

assign p_38_i_i_fu_625_p2 = (carry_reg_949 & Range1_all_ones_fu_590_p2);

assign p_41_i_i_fu_613_p2 = (signbit_reg_930 & tmp_33_fu_607_p2);

assign p_Val2_10_fu_717_p2 = ($signed(tmp_20_fu_709_p1) + $signed(tmp_21_fu_713_p1));

assign p_Val2_13_fu_513_p2 = ($signed(tmp_38_cast_fu_509_p1) + $signed(p_Val2_1_reg_915));

assign p_Val2_14_fu_526_p4 = {{p_Val2_13_fu_513_p2[13:6]}};

assign p_Val2_15_fu_547_p2 = (p_Val2_14_fu_526_p4 + tmp_31_fu_536_p1);

assign p_Val2_16_mux_fu_689_p3 = ((brmerge_i_i_i_reg_982[0:0] === 1'b1) ? 8'd127 : p_Val2_15_reg_937);

assign p_Val2_1_fu_487_p0 = weight_V_load_reg_905;

assign p_Val2_1_fu_487_p1 = input_V_load_reg_910;

assign p_Val2_1_fu_487_p2 = ($signed(p_Val2_1_fu_487_p0) * $signed(p_Val2_1_fu_487_p1));

assign p_Val2_s_25_fu_695_p3 = ((underflow_reg_977[0:0] === 1'b1) ? 8'd128 : p_Val2_15_reg_937);

assign p_not_i_i_fu_630_p2 = (deleted_zeros_fu_600_p3 ^ 1'd1);

assign p_result_V_fu_776_p3 = ((underflow_2_fu_750_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_999);

assign p_shl1_cast_fu_241_p1 = tmp_s_fu_233_p3;

assign p_shl2_cast_fu_253_p1 = tmp_36_fu_245_p3;

assign p_shl3_cast_fu_308_p1 = tmp_41_fu_300_p3;

assign p_shl4_cast_fu_320_p1 = tmp_42_fu_312_p3;

assign p_shl5_cast_fu_405_p1 = tmp_49_fu_398_p3;

assign p_shl6_cast_fu_416_p1 = tmp_50_fu_409_p3;

assign p_shl_cast_fu_271_p1 = tmp_38_fu_263_p3;

assign result_V_fu_731_p2 = (p_Val2_s_reg_166 + bias_V_q0);

assign result_V_mux_fu_769_p3 = ((brmerge_i_i_fu_755_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_999);

assign sum_V_fu_701_p3 = ((underflow_not_fu_684_p2[0:0] === 1'b1) ? p_Val2_16_mux_fu_689_p3 : p_Val2_s_25_fu_695_p3);

assign tmp2_cast_fu_369_p1 = $signed(tmp2_fu_363_p2);

assign tmp2_fu_363_p2 = ($signed(2'd3) + $signed(m_reg_178));

assign tmp3_cast_fu_458_p1 = $signed(tmp3_fu_452_p2);

assign tmp3_fu_452_p2 = ($signed(n_reg_201) + $signed(2'd3));

assign tmp4_demorgan_fu_657_p2 = (p_38_i_i_fu_625_p2 | brmerge40_demorgan_i_fu_652_p2);

assign tmp4_fu_663_p2 = (tmp4_demorgan_fu_657_p2 ^ 1'd1);

assign tmp5_fu_680_p2 = (brmerge40_demorgan_i_reg_972 | tmp_35_reg_967);

assign tmp_20_fu_709_p1 = $signed(p_Val2_s_reg_166);

assign tmp_21_fu_713_p1 = $signed(bias_V_q0);

assign tmp_22_fu_745_p2 = (newsignbit_2_reg_1005 ^ 1'd1);

assign tmp_23_cast_fu_792_p1 = w_reg_154;

assign tmp_24_cast_fu_354_p1 = m_reg_178;

assign tmp_25_fu_373_p2 = ($signed(h_reg_142) + $signed(tmp2_cast_fu_369_p1));

assign tmp_26_cast_fu_379_p1 = tmp_25_fu_373_p2;

assign tmp_27_cast_fu_438_p1 = n_reg_201;

assign tmp_28_fu_462_p2 = ($signed(tmp3_cast_fu_458_p1) + $signed(w_reg_154));

assign tmp_29_cast_fu_468_p1 = tmp_28_fu_462_p2;

assign tmp_30_fu_501_p3 = {{p_Val2_12_reg_189}, {6'd0}};

assign tmp_31_fu_536_p1 = tmp_55_reg_920;

assign tmp_32_fu_561_p2 = (newsignbit_fu_553_p3 ^ 1'd1);

assign tmp_33_fu_607_p2 = (tmp_58_fu_583_p3 ^ 1'd1);

assign tmp_35_fu_641_p2 = (signbit_reg_930 ^ 1'd1);

assign tmp_36_fu_245_p3 = {{co_reg_131}, {1'd0}};

assign tmp_37_fu_257_p2 = (p_shl2_cast_fu_253_p1 + p_shl1_cast_fu_241_p1);

assign tmp_38_cast_fu_509_p1 = $signed(tmp_30_fu_501_p3);

assign tmp_38_fu_263_p3 = {{co_reg_131}, {2'd0}};

assign tmp_39_fu_275_p2 = (p_shl_cast_fu_271_p1 - tmp_cast_fu_229_p1);

assign tmp_40_fu_295_p2 = (tmp_cast_21_fu_291_p1 + tmp_37_reg_820);

assign tmp_41_fu_300_p3 = {{tmp_40_fu_295_p2}, {3'd0}};

assign tmp_42_fu_312_p3 = {{tmp_40_fu_295_p2}, {1'd0}};

assign tmp_43_fu_324_p2 = (p_shl3_cast_fu_308_p1 + p_shl4_cast_fu_320_p1);

assign tmp_44_fu_796_p2 = (tmp_43_reg_839 + tmp_23_cast_fu_792_p1);

assign tmp_45_cast_fu_281_p1 = $signed(tmp_39_fu_275_p2);

assign tmp_45_fu_358_p2 = ($signed(tmp_45_cast_reg_826) + $signed(tmp_24_cast_fu_354_p1));

assign tmp_46_fu_388_p2 = tmp_45_reg_860 << 10'd2;

assign tmp_47_fu_393_p2 = (tmp_46_fu_388_p2 - tmp_45_reg_860);

assign tmp_48_fu_383_p2 = (tmp_37_reg_820 + tmp_26_cast_fu_379_p1);

assign tmp_49_fu_398_p3 = {{tmp_48_reg_866}, {3'd0}};

assign tmp_50_cast_fu_801_p1 = tmp_44_fu_796_p2;

assign tmp_50_fu_409_p3 = {{tmp_48_reg_866}, {1'd0}};

assign tmp_51_fu_420_p2 = (p_shl6_cast_fu_416_p1 + p_shl5_cast_fu_405_p1);

assign tmp_52_fu_442_p2 = (tmp_27_cast_fu_438_p1 + tmp_47_reg_872);

assign tmp_53_fu_472_p2 = (tmp_29_cast_fu_468_p1 + tmp_51_reg_877);

assign tmp_56_fu_539_p3 = p_Val2_13_fu_513_p2[32'd13];

assign tmp_58_cast_fu_447_p1 = tmp_52_fu_442_p2;

assign tmp_58_fu_583_p3 = p_Val2_13_reg_925[32'd14];

assign tmp_59_cast_fu_477_p1 = tmp_53_reg_895;

assign tmp_cast_21_fu_291_p1 = h_reg_142;

assign tmp_cast_fu_229_p1 = co_reg_131;

assign tmp_fu_224_p1 = co_reg_131;

assign tmp_s_fu_233_p3 = {{co_reg_131}, {3'd0}};

assign underflow_2_fu_750_p2 = (isneg_reg_992 & tmp_22_fu_745_p2);

assign underflow_fu_669_p2 = (signbit_reg_930 & tmp4_fu_663_p2);

assign underflow_not_fu_684_p2 = (tmp5_fu_680_p2 | p_38_i_i_reg_962);

assign w_2_fu_806_p2 = (w_reg_154 + 4'd1);

assign weight_V_address0 = tmp_58_cast_fu_447_p1;

always @ (posedge ap_clk) begin
    tmp_37_reg_820[0] <= 1'b0;
    tmp_43_reg_839[0] <= 1'b0;
    tmp_51_reg_877[0] <= 1'b0;
end

endmodule //subconv_3x3_8_no_rel
