// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_4_no_rel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_V_address0;
output   input_V_ce0;
input  [7:0] input_V_q0;
output  [9:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [6:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [11:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] co_3_fu_220_p2;
reg   [6:0] co_3_reg_814;
wire    ap_CS_fsm_state2;
wire  signed [11:0] tmp_62_cast_fu_265_p1;
reg  signed [11:0] tmp_62_cast_reg_819;
wire   [0:0] exitcond9_fu_214_p2;
wire  signed [10:0] tmp_64_cast_fu_287_p1;
reg  signed [10:0] tmp_64_cast_reg_825;
reg   [6:0] bias_V_addr_reg_830;
wire   [12:0] tmp_60_fu_326_p2;
reg   [12:0] tmp_60_reg_838;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond1_fu_291_p2;
wire   [2:0] h_3_fu_338_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond2_fu_332_p2;
wire   [1:0] m_3_fu_350_p2;
reg   [1:0] m_3_reg_854;
wire    ap_CS_fsm_state5;
wire   [10:0] tmp_62_fu_360_p2;
reg   [10:0] tmp_62_reg_859;
wire   [0:0] exitcond3_fu_344_p2;
wire   [2:0] tmp_41_fu_375_p2;
reg   [2:0] tmp_41_reg_865;
wire   [10:0] tmp_64_fu_386_p2;
reg   [10:0] tmp_64_reg_870;
wire    ap_CS_fsm_state6;
wire   [12:0] tmp_67_fu_419_p2;
reg   [12:0] tmp_67_reg_875;
wire   [1:0] n_3_fu_431_p2;
reg   [1:0] n_3_reg_883;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond_fu_425_p2;
wire   [12:0] tmp_69_fu_471_p2;
reg   [12:0] tmp_69_reg_893;
wire    ap_CS_fsm_state8;
reg   [7:0] weight_V_load_reg_903;
reg   [7:0] input_V_load_reg_908;
wire    ap_CS_fsm_state9;
wire   [15:0] p_Val2_2_fu_486_p2;
reg   [15:0] p_Val2_2_reg_913;
wire    ap_CS_fsm_state10;
reg   [0:0] tmp_71_reg_918;
wire   [15:0] p_Val2_20_fu_512_p2;
reg   [15:0] p_Val2_20_reg_923;
wire    ap_CS_fsm_state11;
reg   [0:0] signbit_reg_928;
wire   [7:0] p_Val2_22_fu_546_p2;
reg   [7:0] p_Val2_22_reg_935;
wire   [0:0] newsignbit_fu_552_p3;
reg   [0:0] newsignbit_reg_941;
wire   [0:0] carry_fu_566_p2;
reg   [0:0] carry_reg_947;
reg   [1:0] tmp_50_reg_954;
wire   [0:0] p_38_i_i_fu_624_p2;
reg   [0:0] p_38_i_i_reg_960;
wire    ap_CS_fsm_state12;
wire   [0:0] tmp_51_fu_640_p2;
reg   [0:0] tmp_51_reg_965;
wire   [0:0] brmerge40_demorgan_i_fu_651_p2;
reg   [0:0] brmerge40_demorgan_i_reg_970;
wire   [0:0] underflow_fu_668_p2;
reg   [0:0] underflow_reg_975;
wire   [0:0] brmerge_i_i_i_fu_673_p2;
reg   [0:0] brmerge_i_i_i_reg_980;
wire   [7:0] sum_V_fu_700_p3;
wire    ap_CS_fsm_state13;
reg   [0:0] isneg_reg_990;
wire    ap_CS_fsm_state14;
wire   [7:0] result_V_fu_730_p2;
reg   [7:0] result_V_reg_997;
reg   [0:0] newsignbit_3_reg_1003;
wire   [2:0] w_3_fu_805_p2;
wire    ap_CS_fsm_state15;
reg   [6:0] co_reg_133;
reg   [2:0] h_reg_144;
reg   [2:0] w_reg_156;
reg   [7:0] p_Val2_s_reg_168;
reg   [1:0] m_reg_180;
reg   [7:0] p_Val2_19_reg_191;
reg   [1:0] n_reg_203;
wire   [63:0] tmp_fu_226_p1;
wire   [63:0] tmp_77_cast_fu_446_p1;
wire   [63:0] tmp_78_cast_fu_476_p1;
wire   [63:0] tmp_69_cast_fu_800_p1;
wire   [9:0] tmp_s_fu_235_p3;
wire   [7:0] tmp_54_fu_247_p3;
wire   [10:0] p_shl1_cast_fu_243_p1;
wire   [10:0] p_shl2_cast_fu_255_p1;
wire   [10:0] tmp_55_fu_259_p2;
wire   [8:0] tmp_56_fu_269_p3;
wire   [9:0] p_shl_cast_fu_277_p1;
wire   [9:0] tmp_cast_fu_231_p1;
wire   [9:0] tmp_57_fu_281_p2;
wire   [11:0] tmp_cast_27_fu_297_p1;
wire   [11:0] tmp_58_fu_301_p2;
wire   [9:0] tmp_59_fu_306_p1;
wire   [12:0] p_shl3_cast_fu_310_p3;
wire   [12:0] p_shl4_cast_fu_318_p3;
wire   [10:0] tmp_40_cast_fu_356_p1;
wire   [1:0] tmp2_fu_365_p2;
wire  signed [2:0] tmp2_cast_fu_371_p1;
wire   [10:0] tmp_63_fu_381_p2;
wire   [11:0] tmp_42_cast_fu_391_p1;
wire   [11:0] tmp_65_fu_394_p2;
wire   [9:0] tmp_66_fu_399_p1;
wire   [12:0] p_shl5_cast_fu_403_p3;
wire   [12:0] p_shl6_cast_fu_411_p3;
wire   [10:0] tmp_43_cast_fu_437_p1;
wire   [10:0] tmp_68_fu_441_p2;
wire   [1:0] tmp3_fu_451_p2;
wire  signed [2:0] tmp3_cast_fu_457_p1;
wire   [2:0] tmp_44_fu_461_p2;
wire   [12:0] tmp_45_cast_fu_467_p1;
wire  signed [7:0] p_Val2_2_fu_486_p0;
wire  signed [7:0] p_Val2_2_fu_486_p1;
wire   [13:0] tmp_46_fu_500_p3;
wire  signed [15:0] tmp_60_cast_fu_508_p1;
wire   [7:0] p_Val2_21_fu_525_p4;
wire   [7:0] tmp_47_fu_535_p1;
wire   [0:0] tmp_72_fu_538_p3;
wire   [0:0] tmp_48_fu_560_p2;
wire   [0:0] Range1_all_ones_fu_589_p2;
wire   [0:0] Range1_all_zeros_fu_594_p2;
wire   [0:0] tmp_74_fu_582_p3;
wire   [0:0] tmp_49_fu_606_p2;
wire   [0:0] p_41_i_i_fu_612_p2;
wire   [0:0] deleted_zeros_fu_599_p3;
wire   [0:0] p_not_i_i_fu_629_p2;
wire   [0:0] brmerge_i_i3_fu_635_p2;
wire   [0:0] deleted_ones_fu_617_p3;
wire   [0:0] tmp4_demorgan_fu_656_p2;
wire   [0:0] tmp4_fu_662_p2;
wire   [0:0] overflow_fu_645_p2;
wire   [0:0] tmp5_fu_679_p2;
wire   [0:0] underflow_not_fu_683_p2;
wire   [7:0] p_Val2_24_mux_fu_688_p3;
wire   [7:0] p_Val2_s_31_fu_694_p3;
wire  signed [8:0] tmp_36_fu_708_p1;
wire  signed [8:0] tmp_37_fu_712_p1;
wire   [8:0] p_Val2_17_fu_716_p2;
wire   [0:0] tmp_38_fu_744_p2;
wire   [0:0] isneg_not_fu_758_p2;
wire   [0:0] brmerge_i_i_fu_754_p2;
wire   [0:0] underflow_3_fu_749_p2;
wire   [0:0] brmerge9_fu_763_p2;
wire   [7:0] result_V_mux_fu_768_p3;
wire   [7:0] p_result_V_fu_775_p3;
wire   [12:0] tmp_39_cast_fu_791_p1;
wire   [12:0] tmp_61_fu_795_p2;
reg   [14:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_291_p2 == 1'd1))) begin
        co_reg_133 <= co_3_reg_814;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_133 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_214_p2 == 1'd0))) begin
        h_reg_144 <= 3'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_332_p2 == 1'd1))) begin
        h_reg_144 <= h_3_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_332_p2))) begin
        m_reg_180 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_425_p2))) begin
        m_reg_180 <= m_3_reg_854;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        n_reg_203 <= n_3_reg_883;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        n_reg_203 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        p_Val2_19_reg_191 <= sum_V_fu_700_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_19_reg_191 <= p_Val2_s_reg_168;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_332_p2))) begin
        p_Val2_s_reg_168 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_425_p2))) begin
        p_Val2_s_reg_168 <= p_Val2_19_reg_191;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond1_fu_291_p2))) begin
        w_reg_156 <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        w_reg_156 <= w_3_fu_805_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_214_p2 == 1'd0))) begin
        bias_V_addr_reg_830 <= tmp_fu_226_p1;
        tmp_62_cast_reg_819[11 : 1] <= tmp_62_cast_fu_265_p1[11 : 1];
        tmp_64_cast_reg_825 <= tmp_64_cast_fu_287_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        brmerge40_demorgan_i_reg_970 <= brmerge40_demorgan_i_fu_651_p2;
        brmerge_i_i_i_reg_980 <= brmerge_i_i_i_fu_673_p2;
        p_38_i_i_reg_960 <= p_38_i_i_fu_624_p2;
        tmp_51_reg_965 <= tmp_51_fu_640_p2;
        underflow_reg_975 <= underflow_fu_668_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        carry_reg_947 <= carry_fu_566_p2;
        newsignbit_reg_941 <= p_Val2_22_fu_546_p2[32'd7];
        p_Val2_20_reg_923 <= p_Val2_20_fu_512_p2;
        p_Val2_22_reg_935 <= p_Val2_22_fu_546_p2;
        signbit_reg_928 <= p_Val2_20_fu_512_p2[32'd15];
        tmp_50_reg_954 <= {{p_Val2_20_fu_512_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_3_reg_814 <= co_3_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_V_load_reg_908 <= input_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        isneg_reg_990 <= p_Val2_17_fu_716_p2[32'd8];
        newsignbit_3_reg_1003 <= result_V_fu_730_p2[32'd7];
        result_V_reg_997 <= result_V_fu_730_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_3_reg_854 <= m_3_fu_350_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        n_3_reg_883 <= n_3_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Val2_2_reg_913 <= p_Val2_2_fu_486_p2;
        tmp_71_reg_918 <= p_Val2_2_fu_486_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond3_fu_344_p2))) begin
        tmp_41_reg_865 <= tmp_41_fu_375_p2;
        tmp_62_reg_859 <= tmp_62_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond1_fu_291_p2))) begin
        tmp_60_reg_838[12 : 1] <= tmp_60_fu_326_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_64_reg_870 <= tmp_64_fu_386_p2;
        tmp_67_reg_875[12 : 1] <= tmp_67_fu_419_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond_fu_425_p2))) begin
        tmp_69_reg_893 <= tmp_69_fu_471_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        weight_V_load_reg_903 <= weight_V_q0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_214_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_214_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_214_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_291_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_332_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond3_fu_344_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_425_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_589_p2 = ((tmp_50_reg_954 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_594_p2 = ((tmp_50_reg_954 == 2'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_830;

assign brmerge40_demorgan_i_fu_651_p2 = (newsignbit_reg_941 & deleted_ones_fu_617_p3);

assign brmerge9_fu_763_p2 = (newsignbit_3_reg_1003 | isneg_not_fu_758_p2);

assign brmerge_i_i3_fu_635_p2 = (newsignbit_reg_941 | p_not_i_i_fu_629_p2);

assign brmerge_i_i_fu_754_p2 = (isneg_reg_990 ^ newsignbit_3_reg_1003);

assign brmerge_i_i_i_fu_673_p2 = (underflow_fu_668_p2 | overflow_fu_645_p2);

assign carry_fu_566_p2 = (tmp_72_fu_538_p3 & tmp_48_fu_560_p2);

assign co_3_fu_220_p2 = (co_reg_133 + 7'd1);

assign deleted_ones_fu_617_p3 = ((carry_reg_947[0:0] === 1'b1) ? p_41_i_i_fu_612_p2 : Range1_all_ones_fu_589_p2);

assign deleted_zeros_fu_599_p3 = ((carry_reg_947[0:0] === 1'b1) ? Range1_all_ones_fu_589_p2 : Range1_all_zeros_fu_594_p2);

assign exitcond1_fu_291_p2 = ((h_reg_144 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond2_fu_332_p2 = ((w_reg_156 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond3_fu_344_p2 = ((m_reg_180 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond9_fu_214_p2 = ((co_reg_133 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond_fu_425_p2 = ((n_reg_203 == 2'd3) ? 1'b1 : 1'b0);

assign h_3_fu_338_p2 = (h_reg_144 + 3'd1);

assign input_V_address0 = tmp_78_cast_fu_476_p1;

assign isneg_not_fu_758_p2 = (isneg_reg_990 ^ 1'd1);

assign m_3_fu_350_p2 = (m_reg_180 + 2'd1);

assign n_3_fu_431_p2 = (n_reg_203 + 2'd1);

assign newsignbit_fu_552_p3 = p_Val2_22_fu_546_p2[32'd7];

assign output_V_address0 = tmp_69_cast_fu_800_p1;

assign output_V_d0 = ((brmerge9_fu_763_p2[0:0] === 1'b1) ? result_V_mux_fu_768_p3 : p_result_V_fu_775_p3);

assign overflow_fu_645_p2 = (brmerge_i_i3_fu_635_p2 & tmp_51_fu_640_p2);

assign p_38_i_i_fu_624_p2 = (carry_reg_947 & Range1_all_ones_fu_589_p2);

assign p_41_i_i_fu_612_p2 = (signbit_reg_928 & tmp_49_fu_606_p2);

assign p_Val2_17_fu_716_p2 = ($signed(tmp_36_fu_708_p1) + $signed(tmp_37_fu_712_p1));

assign p_Val2_20_fu_512_p2 = ($signed(tmp_60_cast_fu_508_p1) + $signed(p_Val2_2_reg_913));

assign p_Val2_21_fu_525_p4 = {{p_Val2_20_fu_512_p2[13:6]}};

assign p_Val2_22_fu_546_p2 = (p_Val2_21_fu_525_p4 + tmp_47_fu_535_p1);

assign p_Val2_24_mux_fu_688_p3 = ((brmerge_i_i_i_reg_980[0:0] === 1'b1) ? 8'd127 : p_Val2_22_reg_935);

assign p_Val2_2_fu_486_p0 = weight_V_load_reg_903;

assign p_Val2_2_fu_486_p1 = input_V_load_reg_908;

assign p_Val2_2_fu_486_p2 = ($signed(p_Val2_2_fu_486_p0) * $signed(p_Val2_2_fu_486_p1));

assign p_Val2_s_31_fu_694_p3 = ((underflow_reg_975[0:0] === 1'b1) ? 8'd128 : p_Val2_22_reg_935);

assign p_not_i_i_fu_629_p2 = (deleted_zeros_fu_599_p3 ^ 1'd1);

assign p_result_V_fu_775_p3 = ((underflow_3_fu_749_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_997);

assign p_shl1_cast_fu_243_p1 = tmp_s_fu_235_p3;

assign p_shl2_cast_fu_255_p1 = tmp_54_fu_247_p3;

assign p_shl3_cast_fu_310_p3 = {{tmp_59_fu_306_p1}, {3'd0}};

assign p_shl4_cast_fu_318_p3 = {{tmp_58_fu_301_p2}, {1'd0}};

assign p_shl5_cast_fu_403_p3 = {{tmp_66_fu_399_p1}, {3'd0}};

assign p_shl6_cast_fu_411_p3 = {{tmp_65_fu_394_p2}, {1'd0}};

assign p_shl_cast_fu_277_p1 = tmp_56_fu_269_p3;

assign result_V_fu_730_p2 = (p_Val2_s_reg_168 + bias_V_q0);

assign result_V_mux_fu_768_p3 = ((brmerge_i_i_fu_754_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_997);

assign sum_V_fu_700_p3 = ((underflow_not_fu_683_p2[0:0] === 1'b1) ? p_Val2_24_mux_fu_688_p3 : p_Val2_s_31_fu_694_p3);

assign tmp2_cast_fu_371_p1 = $signed(tmp2_fu_365_p2);

assign tmp2_fu_365_p2 = ($signed(2'd3) + $signed(m_reg_180));

assign tmp3_cast_fu_457_p1 = $signed(tmp3_fu_451_p2);

assign tmp3_fu_451_p2 = ($signed(n_reg_203) + $signed(2'd3));

assign tmp4_demorgan_fu_656_p2 = (p_38_i_i_fu_624_p2 | brmerge40_demorgan_i_fu_651_p2);

assign tmp4_fu_662_p2 = (tmp4_demorgan_fu_656_p2 ^ 1'd1);

assign tmp5_fu_679_p2 = (brmerge40_demorgan_i_reg_970 | tmp_51_reg_965);

assign tmp_36_fu_708_p1 = $signed(p_Val2_s_reg_168);

assign tmp_37_fu_712_p1 = $signed(bias_V_q0);

assign tmp_38_fu_744_p2 = (newsignbit_3_reg_1003 ^ 1'd1);

assign tmp_39_cast_fu_791_p1 = w_reg_156;

assign tmp_40_cast_fu_356_p1 = m_reg_180;

assign tmp_41_fu_375_p2 = ($signed(tmp2_cast_fu_371_p1) + $signed(h_reg_144));

assign tmp_42_cast_fu_391_p1 = tmp_41_reg_865;

assign tmp_43_cast_fu_437_p1 = n_reg_203;

assign tmp_44_fu_461_p2 = ($signed(tmp3_cast_fu_457_p1) + $signed(w_reg_156));

assign tmp_45_cast_fu_467_p1 = tmp_44_fu_461_p2;

assign tmp_46_fu_500_p3 = {{p_Val2_19_reg_191}, {6'd0}};

assign tmp_47_fu_535_p1 = tmp_71_reg_918;

assign tmp_48_fu_560_p2 = (newsignbit_fu_552_p3 ^ 1'd1);

assign tmp_49_fu_606_p2 = (tmp_74_fu_582_p3 ^ 1'd1);

assign tmp_51_fu_640_p2 = (signbit_reg_928 ^ 1'd1);

assign tmp_54_fu_247_p3 = {{co_reg_133}, {1'd0}};

assign tmp_55_fu_259_p2 = (p_shl1_cast_fu_243_p1 - p_shl2_cast_fu_255_p1);

assign tmp_56_fu_269_p3 = {{co_reg_133}, {2'd0}};

assign tmp_57_fu_281_p2 = (p_shl_cast_fu_277_p1 - tmp_cast_fu_231_p1);

assign tmp_58_fu_301_p2 = ($signed(tmp_cast_27_fu_297_p1) + $signed(tmp_62_cast_reg_819));

assign tmp_59_fu_306_p1 = tmp_58_fu_301_p2[9:0];

assign tmp_60_cast_fu_508_p1 = $signed(tmp_46_fu_500_p3);

assign tmp_60_fu_326_p2 = (p_shl3_cast_fu_310_p3 - p_shl4_cast_fu_318_p3);

assign tmp_61_fu_795_p2 = (tmp_60_reg_838 + tmp_39_cast_fu_791_p1);

assign tmp_62_cast_fu_265_p1 = $signed(tmp_55_fu_259_p2);

assign tmp_62_fu_360_p2 = ($signed(tmp_40_cast_fu_356_p1) + $signed(tmp_64_cast_reg_825));

assign tmp_63_fu_381_p2 = tmp_62_reg_859 << 11'd2;

assign tmp_64_cast_fu_287_p1 = $signed(tmp_57_fu_281_p2);

assign tmp_64_fu_386_p2 = (tmp_63_fu_381_p2 - tmp_62_reg_859);

assign tmp_65_fu_394_p2 = ($signed(tmp_42_cast_fu_391_p1) + $signed(tmp_62_cast_reg_819));

assign tmp_66_fu_399_p1 = tmp_65_fu_394_p2[9:0];

assign tmp_67_fu_419_p2 = (p_shl5_cast_fu_403_p3 - p_shl6_cast_fu_411_p3);

assign tmp_68_fu_441_p2 = (tmp_43_cast_fu_437_p1 + tmp_64_reg_870);

assign tmp_69_cast_fu_800_p1 = tmp_61_fu_795_p2;

assign tmp_69_fu_471_p2 = (tmp_45_cast_fu_467_p1 + tmp_67_reg_875);

assign tmp_72_fu_538_p3 = p_Val2_20_fu_512_p2[32'd13];

assign tmp_74_fu_582_p3 = p_Val2_20_reg_923[32'd14];

assign tmp_77_cast_fu_446_p1 = tmp_68_fu_441_p2;

assign tmp_78_cast_fu_476_p1 = tmp_69_reg_893;

assign tmp_cast_27_fu_297_p1 = h_reg_144;

assign tmp_cast_fu_231_p1 = co_reg_133;

assign tmp_fu_226_p1 = co_reg_133;

assign tmp_s_fu_235_p3 = {{co_reg_133}, {3'd0}};

assign underflow_3_fu_749_p2 = (isneg_reg_990 & tmp_38_fu_744_p2);

assign underflow_fu_668_p2 = (signbit_reg_928 & tmp4_fu_662_p2);

assign underflow_not_fu_683_p2 = (tmp5_fu_679_p2 | p_38_i_i_reg_960);

assign w_3_fu_805_p2 = (w_reg_156 + 3'd1);

assign weight_V_address0 = tmp_77_cast_fu_446_p1;

always @ (posedge ap_clk) begin
    tmp_62_cast_reg_819[0] <= 1'b0;
    tmp_60_reg_838[0] <= 1'b0;
    tmp_67_reg_875[0] <= 1'b0;
end

endmodule //subconv_3x3_4_no_rel
