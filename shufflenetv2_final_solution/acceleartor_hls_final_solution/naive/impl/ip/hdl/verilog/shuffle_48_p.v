// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shuffle_48_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        left_V_address0,
        left_V_ce0,
        left_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        buffer1_1_48_8x8_p_V_address0,
        buffer1_1_48_8x8_p_V_ce0,
        buffer1_1_48_8x8_p_V_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] left_V_address0;
output   left_V_ce0;
input  [7:0] left_V_q0;
output  [13:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [12:0] buffer1_1_48_8x8_p_V_address0;
output   buffer1_1_48_8x8_p_V_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg left_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg buffer1_1_48_8x8_p_V_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_257_fu_132_p1;
reg   [0:0] tmp_257_reg_349;
wire    ap_CS_fsm_state2;
wire   [6:0] co_17_fu_142_p2;
reg   [6:0] co_17_reg_356;
wire   [10:0] tmp_282_fu_172_p2;
reg   [10:0] tmp_282_reg_361;
wire   [0:0] exitcond5_fu_136_p2;
wire   [9:0] tmp_286_fu_212_p2;
reg   [9:0] tmp_286_reg_366;
wire   [3:0] h_17_fu_224_p2;
reg   [3:0] h_17_reg_374;
wire    ap_CS_fsm_state3;
wire   [13:0] tmp_288_fu_267_p2;
reg   [13:0] tmp_288_reg_379;
wire   [0:0] exitcond4_fu_218_p2;
wire   [14:0] tmp_290_fu_302_p2;
reg   [14:0] tmp_290_reg_384;
wire   [3:0] w_17_fu_314_p2;
reg   [3:0] w_17_reg_392;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_308_p2;
reg   [13:0] output_V_addr_reg_402;
reg   [6:0] co_reg_87;
reg   [3:0] h_reg_98;
reg   [3:0] w_reg_109;
wire    ap_CS_fsm_state5;
reg   [7:0] storemerge_phi_fu_123_p4;
wire   [63:0] tmp_345_cast_fu_333_p1;
wire   [63:0] tmp_346_cast_fu_344_p1;
wire   [9:0] tmp_fu_148_p3;
wire   [7:0] tmp_s_fu_160_p3;
wire   [10:0] p_shl3_cast_fu_168_p1;
wire   [10:0] p_shl2_cast_fu_156_p1;
wire   [5:0] tmp_283_fu_178_p4;
wire   [8:0] tmp_284_fu_188_p3;
wire   [6:0] tmp_285_fu_200_p3;
wire   [9:0] p_shl1_cast_fu_208_p1;
wire   [9:0] p_shl_cast_fu_196_p1;
wire   [9:0] tmp_cast_fu_234_p1;
wire   [9:0] tmp_287_fu_238_p2;
wire   [12:0] tmp_258_fu_243_p3;
wire   [10:0] tmp_259_fu_255_p3;
wire   [13:0] p_shl6_cast_fu_251_p1;
wire   [13:0] p_shl7_cast_fu_263_p1;
wire   [10:0] tmp_cast9_fu_230_p1;
wire   [10:0] tmp_289_fu_273_p2;
wire   [13:0] tmp_260_fu_278_p3;
wire   [11:0] tmp_261_fu_290_p3;
wire   [14:0] p_shl4_cast_fu_286_p1;
wire   [14:0] p_shl5_cast_fu_298_p1;
wire   [13:0] tmp_180_cast_fu_324_p1;
wire   [13:0] tmp_291_fu_328_p2;
wire   [14:0] tmp_180_cast8_fu_320_p1;
wire   [14:0] tmp_292_fu_339_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_218_p2 == 1'd1))) begin
        co_reg_87 <= co_17_reg_356;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_87 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_308_p2 == 1'd1))) begin
        h_reg_98 <= h_17_reg_374;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_136_p2 == 1'd0))) begin
        h_reg_98 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond4_fu_218_p2))) begin
        w_reg_109 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_reg_109 <= w_17_reg_392;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_17_reg_356 <= co_17_fu_142_p2;
        tmp_257_reg_349 <= tmp_257_fu_132_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_17_reg_374 <= h_17_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_308_p2))) begin
        output_V_addr_reg_402 <= tmp_346_cast_fu_344_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_136_p2 == 1'd0))) begin
        tmp_282_reg_361[10 : 1] <= tmp_282_fu_172_p2[10 : 1];
        tmp_286_reg_366[9 : 1] <= tmp_286_fu_212_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond4_fu_218_p2))) begin
        tmp_288_reg_379[13 : 1] <= tmp_288_fu_267_p2[13 : 1];
        tmp_290_reg_384[14 : 1] <= tmp_290_fu_302_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_17_reg_392 <= w_17_fu_314_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_136_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_136_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        left_V_ce0 = 1'b1;
    end else begin
        left_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((tmp_257_reg_349 == 1'd1)) begin
            storemerge_phi_fu_123_p4 = buffer1_1_48_8x8_p_V_q0;
        end else if ((tmp_257_reg_349 == 1'd0)) begin
            storemerge_phi_fu_123_p4 = left_V_q0;
        end else begin
            storemerge_phi_fu_123_p4 = 'bx;
        end
    end else begin
        storemerge_phi_fu_123_p4 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_136_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_218_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_308_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign buffer1_1_48_8x8_p_V_address0 = tmp_345_cast_fu_333_p1;

assign co_17_fu_142_p2 = (7'd1 + co_reg_87);

assign exitcond4_fu_218_p2 = ((h_reg_98 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond5_fu_136_p2 = ((co_reg_87 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond_fu_308_p2 = ((w_reg_109 == 4'd10) ? 1'b1 : 1'b0);

assign h_17_fu_224_p2 = (h_reg_98 + 4'd1);

assign left_V_address0 = tmp_345_cast_fu_333_p1;

assign output_V_address0 = output_V_addr_reg_402;

assign output_V_d0 = storemerge_phi_fu_123_p4;

assign p_shl1_cast_fu_208_p1 = tmp_285_fu_200_p3;

assign p_shl2_cast_fu_156_p1 = tmp_fu_148_p3;

assign p_shl3_cast_fu_168_p1 = tmp_s_fu_160_p3;

assign p_shl4_cast_fu_286_p1 = tmp_260_fu_278_p3;

assign p_shl5_cast_fu_298_p1 = tmp_261_fu_290_p3;

assign p_shl6_cast_fu_251_p1 = tmp_258_fu_243_p3;

assign p_shl7_cast_fu_263_p1 = tmp_259_fu_255_p3;

assign p_shl_cast_fu_196_p1 = tmp_284_fu_188_p3;

assign tmp_180_cast8_fu_320_p1 = w_reg_109;

assign tmp_180_cast_fu_324_p1 = w_reg_109;

assign tmp_257_fu_132_p1 = co_reg_87[0:0];

assign tmp_258_fu_243_p3 = {{tmp_287_fu_238_p2}, {3'd0}};

assign tmp_259_fu_255_p3 = {{tmp_287_fu_238_p2}, {1'd0}};

assign tmp_260_fu_278_p3 = {{tmp_289_fu_273_p2}, {3'd0}};

assign tmp_261_fu_290_p3 = {{tmp_289_fu_273_p2}, {1'd0}};

assign tmp_282_fu_172_p2 = (p_shl3_cast_fu_168_p1 + p_shl2_cast_fu_156_p1);

assign tmp_283_fu_178_p4 = {{co_reg_87[6:1]}};

assign tmp_284_fu_188_p3 = {{tmp_283_fu_178_p4}, {3'd0}};

assign tmp_285_fu_200_p3 = {{tmp_283_fu_178_p4}, {1'd0}};

assign tmp_286_fu_212_p2 = (p_shl1_cast_fu_208_p1 + p_shl_cast_fu_196_p1);

assign tmp_287_fu_238_p2 = (tmp_cast_fu_234_p1 + tmp_286_reg_366);

assign tmp_288_fu_267_p2 = (p_shl6_cast_fu_251_p1 + p_shl7_cast_fu_263_p1);

assign tmp_289_fu_273_p2 = (tmp_cast9_fu_230_p1 + tmp_282_reg_361);

assign tmp_290_fu_302_p2 = (p_shl4_cast_fu_286_p1 + p_shl5_cast_fu_298_p1);

assign tmp_291_fu_328_p2 = (tmp_288_reg_379 + tmp_180_cast_fu_324_p1);

assign tmp_292_fu_339_p2 = (tmp_290_reg_384 + tmp_180_cast8_fu_320_p1);

assign tmp_345_cast_fu_333_p1 = tmp_291_fu_328_p2;

assign tmp_346_cast_fu_344_p1 = tmp_292_fu_339_p2;

assign tmp_cast9_fu_230_p1 = h_reg_98;

assign tmp_cast_fu_234_p1 = h_reg_98;

assign tmp_fu_148_p3 = {{co_reg_87}, {3'd0}};

assign tmp_s_fu_160_p3 = {{co_reg_87}, {1'd0}};

assign w_17_fu_314_p2 = (w_reg_109 + 4'd1);

always @ (posedge ap_clk) begin
    tmp_282_reg_361[0] <= 1'b0;
    tmp_286_reg_366[0] <= 1'b0;
    tmp_288_reg_379[0] <= 1'b0;
    tmp_290_reg_384[0] <= 1'b0;
end

endmodule //shuffle_48_p
