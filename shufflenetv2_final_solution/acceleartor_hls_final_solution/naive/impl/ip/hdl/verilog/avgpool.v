// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module avgpool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        conv_last_output_V_address0,
        conv_last_output_V_ce0,
        conv_last_output_V_q0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [12:0] conv_last_output_V_address0;
output   conv_last_output_V_ce0;
input  [7:0] conv_last_output_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_V_ce0;
reg output_V_we0;
reg conv_last_output_V_ce0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] co_25_fu_143_p2;
reg   [9:0] co_25_reg_373;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_fu_149_p1;
reg   [63:0] tmp_reg_378;
wire   [0:0] exitcond7_fu_137_p2;
wire   [12:0] tmp_460_cast_fu_161_p1;
reg   [12:0] tmp_460_cast_reg_383;
wire   [2:0] h_24_fu_171_p2;
reg   [2:0] h_24_reg_391;
wire    ap_CS_fsm_state3;
wire   [14:0] tmp_464_cast_fu_186_p3;
reg   [14:0] tmp_464_cast_reg_396;
wire   [0:0] exitcond8_fu_165_p2;
reg   [4:0] tmp_363_reg_401;
wire   [2:0] w_24_fu_220_p2;
reg   [2:0] w_24_reg_409;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_214_p2;
reg   [0:0] isneg_reg_419;
wire    ap_CS_fsm_state5;
wire   [7:0] p_Val2_111_fu_262_p2;
reg   [7:0] p_Val2_111_reg_426;
reg   [0:0] newsignbit_reg_432;
wire   [7:0] sum_V_fu_314_p3;
wire    ap_CS_fsm_state6;
reg   [9:0] co_reg_80;
wire    ap_CS_fsm_state7;
reg   [7:0] p_Val2_s_reg_91;
reg   [2:0] h_reg_103;
reg   [7:0] p_Val2_108_reg_114;
reg   [2:0] w_reg_126;
wire   [63:0] tmp_465_cast_fu_235_p1;
wire   [11:0] tmp_s_fu_153_p3;
wire   [12:0] tmp_cast_fu_177_p1;
wire   [12:0] tmp_364_fu_181_p2;
wire  signed [8:0] tmp_tr_fu_194_p1;
wire   [8:0] p_neg_fu_198_p2;
wire   [14:0] tmp_221_cast_fu_226_p1;
wire   [14:0] tmp_365_fu_230_p2;
wire  signed [8:0] tmp_222_fu_240_p1;
wire  signed [8:0] tmp_223_fu_244_p1;
wire   [8:0] p_Val2_110_fu_248_p2;
wire   [0:0] tmp_224_fu_276_p2;
wire   [0:0] isneg_not_fu_290_p2;
wire   [0:0] brmerge_i_i_i_fu_286_p2;
wire   [0:0] underflow_fu_281_p2;
wire   [0:0] brmerge_fu_295_p2;
wire   [7:0] p_Val2_118_mux_fu_300_p3;
wire   [7:0] p_Val2_1_fu_307_p3;
wire   [5:0] p_lshr_cast_fu_330_p1;
wire   [3:0] tmp_13_fu_339_p4;
wire  signed [4:0] tmp_14_fu_349_p1;
wire   [0:0] tmp_310_fu_322_p3;
wire   [5:0] p_neg_t_fu_333_p2;
wire   [5:0] p_lshr_f_cast_fu_353_p1;
wire   [5:0] tmp_15_fu_357_p3;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        co_reg_80 <= co_25_reg_373;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_80 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond_fu_214_p2))) begin
        h_reg_103 <= h_24_reg_391;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_137_p2 == 1'd0))) begin
        h_reg_103 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_108_reg_114 <= sum_V_fu_314_p3;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond8_fu_165_p2))) begin
        p_Val2_108_reg_114 <= p_Val2_s_reg_91;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond_fu_214_p2))) begin
        p_Val2_s_reg_91 <= p_Val2_108_reg_114;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_137_p2 == 1'd0))) begin
        p_Val2_s_reg_91 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        w_reg_126 <= w_24_reg_409;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond8_fu_165_p2))) begin
        w_reg_126 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_25_reg_373 <= co_25_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_24_reg_391 <= h_24_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        isneg_reg_419 <= p_Val2_110_fu_248_p2[32'd8];
        newsignbit_reg_432 <= p_Val2_111_fu_262_p2[32'd7];
        p_Val2_111_reg_426 <= p_Val2_111_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond8_fu_165_p2 == 1'd1))) begin
        tmp_363_reg_401 <= {{p_neg_fu_198_p2[8:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_137_p2 == 1'd0))) begin
        tmp_460_cast_reg_383[11 : 2] <= tmp_460_cast_fu_161_p1[11 : 2];
        tmp_reg_378[9 : 0] <= tmp_fu_149_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond8_fu_165_p2))) begin
        tmp_464_cast_reg_396[14 : 2] <= tmp_464_cast_fu_186_p3[14 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_24_reg_409 <= w_24_fu_220_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_137_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_137_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_last_output_V_ce0 = 1'b1;
    end else begin
        conv_last_output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond7_fu_137_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond8_fu_165_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond_fu_214_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign brmerge_fu_295_p2 = (newsignbit_reg_432 | isneg_not_fu_290_p2);

assign brmerge_i_i_i_fu_286_p2 = (isneg_reg_419 ^ newsignbit_reg_432);

assign co_25_fu_143_p2 = (co_reg_80 + 10'd1);

assign conv_last_output_V_address0 = tmp_465_cast_fu_235_p1;

assign exitcond7_fu_137_p2 = ((co_reg_80 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond8_fu_165_p2 = ((h_reg_103 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_214_p2 = ((w_reg_126 == 3'd4) ? 1'b1 : 1'b0);

assign h_24_fu_171_p2 = (h_reg_103 + 3'd1);

assign isneg_not_fu_290_p2 = (isneg_reg_419 ^ 1'd1);

assign output_V_address0 = tmp_reg_378;

assign output_V_d0 = $signed(tmp_15_fu_357_p3);

assign p_Val2_110_fu_248_p2 = ($signed(tmp_222_fu_240_p1) + $signed(tmp_223_fu_244_p1));

assign p_Val2_111_fu_262_p2 = (p_Val2_108_reg_114 + conv_last_output_V_q0);

assign p_Val2_118_mux_fu_300_p3 = ((brmerge_i_i_i_fu_286_p2[0:0] === 1'b1) ? 8'd127 : p_Val2_111_reg_426);

assign p_Val2_1_fu_307_p3 = ((underflow_fu_281_p2[0:0] === 1'b1) ? 8'd128 : p_Val2_111_reg_426);

assign p_lshr_cast_fu_330_p1 = tmp_363_reg_401;

assign p_lshr_f_cast_fu_353_p1 = $unsigned(tmp_14_fu_349_p1);

assign p_neg_fu_198_p2 = ($signed(9'd0) - $signed(tmp_tr_fu_194_p1));

assign p_neg_t_fu_333_p2 = (6'd0 - p_lshr_cast_fu_330_p1);

assign sum_V_fu_314_p3 = ((brmerge_fu_295_p2[0:0] === 1'b1) ? p_Val2_118_mux_fu_300_p3 : p_Val2_1_fu_307_p3);

assign tmp_13_fu_339_p4 = {{p_Val2_s_reg_91[7:4]}};

assign tmp_14_fu_349_p1 = $signed(tmp_13_fu_339_p4);

assign tmp_15_fu_357_p3 = ((tmp_310_fu_322_p3[0:0] === 1'b1) ? p_neg_t_fu_333_p2 : p_lshr_f_cast_fu_353_p1);

assign tmp_221_cast_fu_226_p1 = w_reg_126;

assign tmp_222_fu_240_p1 = $signed(p_Val2_108_reg_114);

assign tmp_223_fu_244_p1 = $signed(conv_last_output_V_q0);

assign tmp_224_fu_276_p2 = (newsignbit_reg_432 ^ 1'd1);

assign tmp_310_fu_322_p3 = p_Val2_s_reg_91[32'd7];

assign tmp_364_fu_181_p2 = (tmp_cast_fu_177_p1 + tmp_460_cast_reg_383);

assign tmp_365_fu_230_p2 = (tmp_464_cast_reg_396 + tmp_221_cast_fu_226_p1);

assign tmp_460_cast_fu_161_p1 = tmp_s_fu_153_p3;

assign tmp_464_cast_fu_186_p3 = {{tmp_364_fu_181_p2}, {2'd0}};

assign tmp_465_cast_fu_235_p1 = tmp_365_fu_230_p2;

assign tmp_cast_fu_177_p1 = h_reg_103;

assign tmp_fu_149_p1 = co_reg_80;

assign tmp_s_fu_153_p3 = {{co_reg_80}, {2'd0}};

assign tmp_tr_fu_194_p1 = $signed(p_Val2_s_reg_91);

assign underflow_fu_281_p2 = (isneg_reg_419 & tmp_224_fu_276_p2);

assign w_24_fu_220_p2 = (w_reg_126 + 3'd1);

always @ (posedge ap_clk) begin
    tmp_reg_378[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    tmp_460_cast_reg_383[1:0] <= 2'b00;
    tmp_460_cast_reg_383[12] <= 1'b0;
    tmp_464_cast_reg_396[1:0] <= 2'b00;
end

endmodule //avgpool
