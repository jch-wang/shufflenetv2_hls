// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv1_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        m_axi_weight_V_AWVALID,
        m_axi_weight_V_AWREADY,
        m_axi_weight_V_AWADDR,
        m_axi_weight_V_AWID,
        m_axi_weight_V_AWLEN,
        m_axi_weight_V_AWSIZE,
        m_axi_weight_V_AWBURST,
        m_axi_weight_V_AWLOCK,
        m_axi_weight_V_AWCACHE,
        m_axi_weight_V_AWPROT,
        m_axi_weight_V_AWQOS,
        m_axi_weight_V_AWREGION,
        m_axi_weight_V_AWUSER,
        m_axi_weight_V_WVALID,
        m_axi_weight_V_WREADY,
        m_axi_weight_V_WDATA,
        m_axi_weight_V_WSTRB,
        m_axi_weight_V_WLAST,
        m_axi_weight_V_WID,
        m_axi_weight_V_WUSER,
        m_axi_weight_V_ARVALID,
        m_axi_weight_V_ARREADY,
        m_axi_weight_V_ARADDR,
        m_axi_weight_V_ARID,
        m_axi_weight_V_ARLEN,
        m_axi_weight_V_ARSIZE,
        m_axi_weight_V_ARBURST,
        m_axi_weight_V_ARLOCK,
        m_axi_weight_V_ARCACHE,
        m_axi_weight_V_ARPROT,
        m_axi_weight_V_ARQOS,
        m_axi_weight_V_ARREGION,
        m_axi_weight_V_ARUSER,
        m_axi_weight_V_RVALID,
        m_axi_weight_V_RREADY,
        m_axi_weight_V_RDATA,
        m_axi_weight_V_RLAST,
        m_axi_weight_V_RID,
        m_axi_weight_V_RUSER,
        m_axi_weight_V_RRESP,
        m_axi_weight_V_BVALID,
        m_axi_weight_V_BREADY,
        m_axi_weight_V_BRESP,
        m_axi_weight_V_BID,
        m_axi_weight_V_BUSER,
        conv1_weight_V3,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_V_address0;
output   input_V_ce0;
input  [7:0] input_V_q0;
output   m_axi_weight_V_AWVALID;
input   m_axi_weight_V_AWREADY;
output  [31:0] m_axi_weight_V_AWADDR;
output  [0:0] m_axi_weight_V_AWID;
output  [31:0] m_axi_weight_V_AWLEN;
output  [2:0] m_axi_weight_V_AWSIZE;
output  [1:0] m_axi_weight_V_AWBURST;
output  [1:0] m_axi_weight_V_AWLOCK;
output  [3:0] m_axi_weight_V_AWCACHE;
output  [2:0] m_axi_weight_V_AWPROT;
output  [3:0] m_axi_weight_V_AWQOS;
output  [3:0] m_axi_weight_V_AWREGION;
output  [0:0] m_axi_weight_V_AWUSER;
output   m_axi_weight_V_WVALID;
input   m_axi_weight_V_WREADY;
output  [7:0] m_axi_weight_V_WDATA;
output  [0:0] m_axi_weight_V_WSTRB;
output   m_axi_weight_V_WLAST;
output  [0:0] m_axi_weight_V_WID;
output  [0:0] m_axi_weight_V_WUSER;
output   m_axi_weight_V_ARVALID;
input   m_axi_weight_V_ARREADY;
output  [31:0] m_axi_weight_V_ARADDR;
output  [0:0] m_axi_weight_V_ARID;
output  [31:0] m_axi_weight_V_ARLEN;
output  [2:0] m_axi_weight_V_ARSIZE;
output  [1:0] m_axi_weight_V_ARBURST;
output  [1:0] m_axi_weight_V_ARLOCK;
output  [3:0] m_axi_weight_V_ARCACHE;
output  [2:0] m_axi_weight_V_ARPROT;
output  [3:0] m_axi_weight_V_ARQOS;
output  [3:0] m_axi_weight_V_ARREGION;
output  [0:0] m_axi_weight_V_ARUSER;
input   m_axi_weight_V_RVALID;
output   m_axi_weight_V_RREADY;
input  [7:0] m_axi_weight_V_RDATA;
input   m_axi_weight_V_RLAST;
input  [0:0] m_axi_weight_V_RID;
input  [0:0] m_axi_weight_V_RUSER;
input  [1:0] m_axi_weight_V_RRESP;
input   m_axi_weight_V_BVALID;
output   m_axi_weight_V_BREADY;
input  [1:0] m_axi_weight_V_BRESP;
input  [0:0] m_axi_weight_V_BID;
input  [0:0] m_axi_weight_V_BUSER;
input  [31:0] conv1_weight_V3;
output  [4:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [14:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg m_axi_weight_V_ARVALID;
reg m_axi_weight_V_RREADY;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    weight_V_blk_n_AR;
wire    ap_CS_fsm_state7;
reg    weight_V_blk_n_R;
wire    ap_CS_fsm_state16;
wire  signed [63:0] sext_fu_279_p1;
reg  signed [63:0] sext_reg_967;
wire   [4:0] co_24_fu_289_p2;
reg   [4:0] co_24_reg_975;
wire    ap_CS_fsm_state2;
wire  signed [8:0] tmp_435_cast_fu_322_p1;
reg  signed [8:0] tmp_435_cast_reg_980;
wire   [0:0] exitcond2_fu_283_p2;
wire   [10:0] tmp_349_fu_350_p2;
reg   [10:0] tmp_349_reg_985;
reg   [4:0] bias_V_addr_reg_990;
wire   [15:0] tmp_351_fu_391_p2;
reg   [15:0] tmp_351_reg_998;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond3_fu_356_p2;
wire   [5:0] h_23_fu_403_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond4_fu_397_p2;
wire   [1:0] ci_9_fu_415_p2;
reg   [1:0] ci_9_reg_1014;
wire    ap_CS_fsm_state5;
wire   [7:0] tmp_355_fu_449_p2;
reg   [7:0] tmp_355_reg_1019;
wire   [0:0] exitcond5_fu_409_p2;
wire   [63:0] tmp_357_fu_476_p2;
reg   [63:0] tmp_357_reg_1024;
wire   [1:0] m_7_fu_488_p2;
reg   [1:0] m_7_reg_1032;
wire    ap_CS_fsm_state6;
wire   [7:0] tmp_360_fu_535_p2;
reg   [7:0] tmp_360_reg_1037;
wire   [0:0] exitcond6_fu_482_p2;
reg   [31:0] weight_V_addr_reg_1043;
wire   [12:0] tmp_361_fu_569_p2;
reg   [12:0] tmp_361_reg_1049;
wire    ap_CS_fsm_state13;
wire   [1:0] n_7_fu_581_p2;
reg   [1:0] n_7_reg_1057;
wire    ap_CS_fsm_state14;
wire   [12:0] tmp_362_fu_607_p2;
reg   [12:0] tmp_362_reg_1062;
wire   [0:0] exitcond_fu_575_p2;
wire    ap_CS_fsm_state15;
reg   [7:0] weight_V_addr_read_reg_1072;
reg   [7:0] input_V_load_reg_1077;
wire   [15:0] p_Val2_6_fu_622_p2;
reg   [15:0] p_Val2_6_reg_1082;
wire    ap_CS_fsm_state17;
reg   [0:0] tmp_306_reg_1087;
wire   [15:0] p_Val2_104_fu_648_p2;
reg   [15:0] p_Val2_104_reg_1092;
wire    ap_CS_fsm_state18;
reg   [0:0] signbit_reg_1097;
wire   [7:0] p_Val2_106_fu_682_p2;
reg   [7:0] p_Val2_106_reg_1104;
wire   [0:0] newsignbit_fu_688_p3;
reg   [0:0] newsignbit_reg_1110;
wire   [0:0] carry_fu_702_p2;
reg   [0:0] carry_reg_1116;
reg   [1:0] tmp_185_reg_1123;
wire   [0:0] p_38_i_i_fu_760_p2;
reg   [0:0] p_38_i_i_reg_1129;
wire    ap_CS_fsm_state19;
wire   [0:0] tmp_220_fu_776_p2;
reg   [0:0] tmp_220_reg_1134;
wire   [0:0] brmerge40_demorgan_i_fu_787_p2;
reg   [0:0] brmerge40_demorgan_i_reg_1139;
wire   [0:0] underflow_fu_804_p2;
reg   [0:0] underflow_reg_1144;
wire   [0:0] brmerge_i_i_i_fu_809_p2;
reg   [0:0] brmerge_i_i_i_reg_1149;
wire   [7:0] sum_V_fu_836_p3;
wire    ap_CS_fsm_state20;
reg   [0:0] isneg_reg_1159;
wire    ap_CS_fsm_state21;
wire   [7:0] result_V_fu_866_p2;
reg   [7:0] result_V_reg_1166;
reg   [0:0] newsignbit_15_reg_1172;
wire   [6:0] tmp_300_fu_926_p1;
reg   [6:0] tmp_300_reg_1179;
wire    ap_CS_fsm_state22;
wire   [0:0] tmp_208_fu_930_p2;
reg   [0:0] tmp_208_reg_1184;
wire   [5:0] w_23_fu_961_p2;
wire    ap_CS_fsm_state23;
reg   [4:0] co_reg_175;
reg   [5:0] h_reg_186;
reg   [5:0] w_reg_198;
reg   [7:0] p_Val2_s_reg_210;
reg   [1:0] ci_reg_222;
reg   [7:0] sum_1_reg_233;
reg   [1:0] m_reg_245;
reg   [7:0] p_Val2_103_reg_256;
reg   [1:0] n_reg_268;
wire   [63:0] tmp_fu_295_p1;
wire   [63:0] tmp_458_cast_fu_612_p1;
wire   [63:0] tmp_443_cast_fu_945_p1;
wire   [63:0] tmp_304_fu_540_p2;
reg    ap_reg_ioackin_m_axi_weight_V_ARREADY;
reg    ap_sig_ioackin_m_axi_weight_V_ARREADY;
wire   [6:0] tmp_s_fu_304_p3;
wire   [7:0] p_shl2_cast_fu_312_p1;
wire   [7:0] tmp_cast_fu_300_p1;
wire   [7:0] tmp_346_fu_316_p2;
wire   [9:0] tmp_347_fu_326_p3;
wire   [5:0] tmp_348_fu_338_p3;
wire   [10:0] p_shl1_cast_fu_346_p1;
wire   [10:0] p_shl_cast_fu_334_p1;
wire   [10:0] tmp_cast_97_fu_362_p1;
wire   [10:0] tmp_350_fu_366_p2;
wire   [11:0] tmp_297_fu_379_p3;
wire   [15:0] p_shl3_cast_fu_371_p3;
wire   [15:0] p_shl4_cast_fu_387_p1;
wire   [6:0] tmp_353_fu_425_p3;
wire   [2:0] tmp_354_fu_437_p3;
wire   [7:0] p_shl7_cast_fu_445_p1;
wire   [7:0] p_shl6_cast_fu_433_p1;
wire   [8:0] tmp_209_cast_fu_421_p1;
wire   [8:0] tmp_356_fu_455_p2;
wire   [10:0] tmp_301_fu_464_p3;
wire  signed [63:0] p_shl5_fu_472_p1;
wire  signed [63:0] tmp_447_cast_fu_460_p1;
wire   [63:0] tmp_210_fu_494_p1;
wire   [63:0] tmp_358_fu_498_p2;
wire   [63:0] tmp_302_fu_503_p2;
wire   [1:0] tmp2_fu_515_p2;
wire  signed [5:0] tmp2_cast_fu_521_p1;
wire   [5:0] tmp_211_fu_525_p2;
wire   [7:0] tmp_212_cast_fu_531_p1;
wire   [63:0] tmp_359_fu_509_p2;
wire   [8:0] tmp_303_fu_558_p3;
wire   [12:0] p_shl9_cast_fu_565_p1;
wire   [12:0] p_shl8_cast_fu_551_p3;
wire   [1:0] tmp3_fu_587_p2;
wire  signed [5:0] tmp3_cast_fu_593_p1;
wire   [5:0] tmp_214_fu_597_p2;
wire   [12:0] tmp_215_cast_fu_603_p1;
wire  signed [7:0] p_Val2_6_fu_622_p0;
wire  signed [7:0] p_Val2_6_fu_622_p1;
wire   [13:0] tmp_216_fu_636_p3;
wire  signed [15:0] tmp_316_cast_fu_644_p1;
wire   [7:0] p_Val2_105_fu_661_p4;
wire   [7:0] tmp_217_fu_671_p1;
wire   [0:0] tmp_307_fu_674_p3;
wire   [0:0] tmp_218_fu_696_p2;
wire   [0:0] Range1_all_ones_fu_725_p2;
wire   [0:0] Range1_all_zeros_fu_730_p2;
wire   [0:0] tmp_309_fu_718_p3;
wire   [0:0] tmp_219_fu_742_p2;
wire   [0:0] p_41_i_i_fu_748_p2;
wire   [0:0] deleted_zeros_fu_735_p3;
wire   [0:0] p_not_i_i_fu_765_p2;
wire   [0:0] brmerge_i_i6_fu_771_p2;
wire   [0:0] deleted_ones_fu_753_p3;
wire   [0:0] tmp4_demorgan_fu_792_p2;
wire   [0:0] tmp4_fu_798_p2;
wire   [0:0] overflow_fu_781_p2;
wire   [0:0] tmp5_fu_815_p2;
wire   [0:0] underflow_not_fu_819_p2;
wire   [7:0] p_Val2_112_mux_fu_824_p3;
wire   [7:0] p_Val2_s_102_fu_830_p3;
wire  signed [8:0] tmp_204_fu_844_p1;
wire  signed [8:0] tmp_205_fu_848_p1;
wire   [8:0] p_Val2_101_fu_852_p2;
wire   [0:0] tmp_206_fu_880_p2;
wire   [0:0] isneg_not_fu_894_p2;
wire   [0:0] brmerge_i_i_fu_890_p2;
wire   [0:0] underflow_15_fu_885_p2;
wire   [0:0] brmerge9_fu_899_p2;
wire   [7:0] result_V_mux_fu_904_p3;
wire   [7:0] p_result_V_fu_911_p3;
wire   [7:0] result_1_fu_918_p3;
wire   [15:0] tmp_207_cast_fu_936_p1;
wire   [15:0] tmp_352_fu_940_p2;
wire   [6:0] p_s_fu_950_p3;
reg   [22:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
#0 ap_reg_ioackin_m_axi_weight_V_ARREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_weight_V_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            if ((ap_sig_ioackin_m_axi_weight_V_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_weight_V_ARREADY <= 1'b0;
            end else if ((1'b1 == m_axi_weight_V_ARREADY)) begin
                ap_reg_ioackin_m_axi_weight_V_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond4_fu_397_p2))) begin
        ci_reg_222 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond6_fu_482_p2))) begin
        ci_reg_222 <= ci_9_reg_1014;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_356_p2 == 1'd1))) begin
        co_reg_175 <= co_24_reg_975;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_175 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond2_fu_283_p2))) begin
        h_reg_186 <= 6'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond4_fu_397_p2 == 1'd1))) begin
        h_reg_186 <= h_23_fu_403_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'd1 == exitcond_fu_575_p2))) begin
        m_reg_245 <= m_7_reg_1032;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond5_fu_409_p2))) begin
        m_reg_245 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        n_reg_268 <= n_7_reg_1057;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        n_reg_268 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        p_Val2_103_reg_256 <= sum_V_fu_836_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        p_Val2_103_reg_256 <= sum_1_reg_233;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond4_fu_397_p2))) begin
        p_Val2_s_reg_210 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond6_fu_482_p2))) begin
        p_Val2_s_reg_210 <= sum_1_reg_233;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'd1 == exitcond_fu_575_p2))) begin
        sum_1_reg_233 <= p_Val2_103_reg_256;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond5_fu_409_p2))) begin
        sum_1_reg_233 <= p_Val2_s_reg_210;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond3_fu_356_p2))) begin
        w_reg_198 <= 6'd1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        w_reg_198 <= w_23_fu_961_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond2_fu_283_p2))) begin
        bias_V_addr_reg_990 <= tmp_fu_295_p1;
        tmp_349_reg_985[10 : 1] <= tmp_349_fu_350_p2[10 : 1];
        tmp_435_cast_reg_980 <= tmp_435_cast_fu_322_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        brmerge40_demorgan_i_reg_1139 <= brmerge40_demorgan_i_fu_787_p2;
        brmerge_i_i_i_reg_1149 <= brmerge_i_i_i_fu_809_p2;
        p_38_i_i_reg_1129 <= p_38_i_i_fu_760_p2;
        tmp_220_reg_1134 <= tmp_220_fu_776_p2;
        underflow_reg_1144 <= underflow_fu_804_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        carry_reg_1116 <= carry_fu_702_p2;
        newsignbit_reg_1110 <= p_Val2_106_fu_682_p2[32'd7];
        p_Val2_104_reg_1092 <= p_Val2_104_fu_648_p2;
        p_Val2_106_reg_1104 <= p_Val2_106_fu_682_p2;
        signbit_reg_1097 <= p_Val2_104_fu_648_p2[32'd15];
        tmp_185_reg_1123 <= {{p_Val2_104_fu_648_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ci_9_reg_1014 <= ci_9_fu_415_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_24_reg_975 <= co_24_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (m_axi_weight_V_RVALID == 1'b1))) begin
        input_V_load_reg_1077 <= input_V_q0;
        weight_V_addr_read_reg_1072 <= m_axi_weight_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        isneg_reg_1159 <= p_Val2_101_fu_852_p2[32'd8];
        newsignbit_15_reg_1172 <= result_V_fu_866_p2[32'd7];
        result_V_reg_1166 <= result_V_fu_866_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        m_7_reg_1032 <= m_7_fu_488_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        n_7_reg_1057 <= n_7_fu_581_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        p_Val2_6_reg_1082 <= p_Val2_6_fu_622_p2;
        tmp_306_reg_1087 <= p_Val2_6_fu_622_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sext_reg_967 <= sext_fu_279_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_208_reg_1184 <= tmp_208_fu_930_p2;
        tmp_300_reg_1179 <= tmp_300_fu_926_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond3_fu_356_p2))) begin
        tmp_351_reg_998[15 : 1] <= tmp_351_fu_391_p2[15 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond5_fu_409_p2))) begin
        tmp_355_reg_1019[7 : 1] <= tmp_355_fu_449_p2[7 : 1];
        tmp_357_reg_1024 <= tmp_357_fu_476_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond6_fu_482_p2))) begin
        tmp_360_reg_1037 <= tmp_360_fu_535_p2;
        weight_V_addr_reg_1043 <= tmp_304_fu_540_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_361_reg_1049[12 : 1] <= tmp_361_fu_569_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'd0 == exitcond_fu_575_p2))) begin
        tmp_362_reg_1062 <= tmp_362_fu_607_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_283_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_283_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_weight_V_ARREADY)) begin
        ap_sig_ioackin_m_axi_weight_V_ARREADY = m_axi_weight_V_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_weight_V_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_reg_ioackin_m_axi_weight_V_ARREADY))) begin
        m_axi_weight_V_ARVALID = 1'b1;
    end else begin
        m_axi_weight_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (m_axi_weight_V_RVALID == 1'b1))) begin
        m_axi_weight_V_RREADY = 1'b1;
    end else begin
        m_axi_weight_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weight_V_blk_n_AR = m_axi_weight_V_ARREADY;
    end else begin
        weight_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        weight_V_blk_n_R = m_axi_weight_V_RVALID;
    end else begin
        weight_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_283_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_356_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond4_fu_397_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond5_fu_409_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond6_fu_482_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (ap_sig_ioackin_m_axi_weight_V_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (1'd1 == exitcond_fu_575_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (m_axi_weight_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_725_p2 = ((tmp_185_reg_1123 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_730_p2 = ((tmp_185_reg_1123 == 2'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign bias_V_address0 = bias_V_addr_reg_990;

assign brmerge40_demorgan_i_fu_787_p2 = (newsignbit_reg_1110 & deleted_ones_fu_753_p3);

assign brmerge9_fu_899_p2 = (newsignbit_15_reg_1172 | isneg_not_fu_894_p2);

assign brmerge_i_i6_fu_771_p2 = (newsignbit_reg_1110 | p_not_i_i_fu_765_p2);

assign brmerge_i_i_fu_890_p2 = (isneg_reg_1159 ^ newsignbit_15_reg_1172);

assign brmerge_i_i_i_fu_809_p2 = (underflow_fu_804_p2 | overflow_fu_781_p2);

assign carry_fu_702_p2 = (tmp_307_fu_674_p3 & tmp_218_fu_696_p2);

assign ci_9_fu_415_p2 = (ci_reg_222 + 2'd1);

assign co_24_fu_289_p2 = (co_reg_175 + 5'd1);

assign deleted_ones_fu_753_p3 = ((carry_reg_1116[0:0] === 1'b1) ? p_41_i_i_fu_748_p2 : Range1_all_ones_fu_725_p2);

assign deleted_zeros_fu_735_p3 = ((carry_reg_1116[0:0] === 1'b1) ? Range1_all_ones_fu_725_p2 : Range1_all_zeros_fu_730_p2);

assign exitcond2_fu_283_p2 = ((co_reg_175 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond3_fu_356_p2 = ((h_reg_186 == 6'd33) ? 1'b1 : 1'b0);

assign exitcond4_fu_397_p2 = ((w_reg_198 == 6'd33) ? 1'b1 : 1'b0);

assign exitcond5_fu_409_p2 = ((ci_reg_222 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond6_fu_482_p2 = ((m_reg_245 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_575_p2 = ((n_reg_268 == 2'd3) ? 1'b1 : 1'b0);

assign h_23_fu_403_p2 = (h_reg_186 + 6'd1);

assign input_V_address0 = tmp_458_cast_fu_612_p1;

assign isneg_not_fu_894_p2 = (isneg_reg_1159 ^ 1'd1);

assign m_7_fu_488_p2 = (m_reg_245 + 2'd1);

assign m_axi_weight_V_ARADDR = weight_V_addr_reg_1043;

assign m_axi_weight_V_ARBURST = 2'd0;

assign m_axi_weight_V_ARCACHE = 4'd0;

assign m_axi_weight_V_ARID = 1'd0;

assign m_axi_weight_V_ARLEN = 32'd3;

assign m_axi_weight_V_ARLOCK = 2'd0;

assign m_axi_weight_V_ARPROT = 3'd0;

assign m_axi_weight_V_ARQOS = 4'd0;

assign m_axi_weight_V_ARREGION = 4'd0;

assign m_axi_weight_V_ARSIZE = 3'd0;

assign m_axi_weight_V_ARUSER = 1'd0;

assign m_axi_weight_V_AWADDR = 32'd0;

assign m_axi_weight_V_AWBURST = 2'd0;

assign m_axi_weight_V_AWCACHE = 4'd0;

assign m_axi_weight_V_AWID = 1'd0;

assign m_axi_weight_V_AWLEN = 32'd0;

assign m_axi_weight_V_AWLOCK = 2'd0;

assign m_axi_weight_V_AWPROT = 3'd0;

assign m_axi_weight_V_AWQOS = 4'd0;

assign m_axi_weight_V_AWREGION = 4'd0;

assign m_axi_weight_V_AWSIZE = 3'd0;

assign m_axi_weight_V_AWUSER = 1'd0;

assign m_axi_weight_V_AWVALID = 1'b0;

assign m_axi_weight_V_BREADY = 1'b0;

assign m_axi_weight_V_WDATA = 8'd0;

assign m_axi_weight_V_WID = 1'd0;

assign m_axi_weight_V_WLAST = 1'b0;

assign m_axi_weight_V_WSTRB = 1'd0;

assign m_axi_weight_V_WUSER = 1'd0;

assign m_axi_weight_V_WVALID = 1'b0;

assign n_7_fu_581_p2 = (n_reg_268 + 2'd1);

assign newsignbit_fu_688_p3 = p_Val2_106_fu_682_p2[32'd7];

assign output_V_address0 = tmp_443_cast_fu_945_p1;

assign output_V_d0 = p_s_fu_950_p3;

assign overflow_fu_781_p2 = (brmerge_i_i6_fu_771_p2 & tmp_220_fu_776_p2);

assign p_38_i_i_fu_760_p2 = (carry_reg_1116 & Range1_all_ones_fu_725_p2);

assign p_41_i_i_fu_748_p2 = (signbit_reg_1097 & tmp_219_fu_742_p2);

assign p_Val2_101_fu_852_p2 = ($signed(tmp_204_fu_844_p1) + $signed(tmp_205_fu_848_p1));

assign p_Val2_104_fu_648_p2 = ($signed(tmp_316_cast_fu_644_p1) + $signed(p_Val2_6_reg_1082));

assign p_Val2_105_fu_661_p4 = {{p_Val2_104_fu_648_p2[13:6]}};

assign p_Val2_106_fu_682_p2 = (p_Val2_105_fu_661_p4 + tmp_217_fu_671_p1);

assign p_Val2_112_mux_fu_824_p3 = ((brmerge_i_i_i_reg_1149[0:0] === 1'b1) ? 8'd127 : p_Val2_106_reg_1104);

assign p_Val2_6_fu_622_p0 = weight_V_addr_read_reg_1072;

assign p_Val2_6_fu_622_p1 = input_V_load_reg_1077;

assign p_Val2_6_fu_622_p2 = ($signed(p_Val2_6_fu_622_p0) * $signed(p_Val2_6_fu_622_p1));

assign p_Val2_s_102_fu_830_p3 = ((underflow_reg_1144[0:0] === 1'b1) ? 8'd128 : p_Val2_106_reg_1104);

assign p_not_i_i_fu_765_p2 = (deleted_zeros_fu_735_p3 ^ 1'd1);

assign p_result_V_fu_911_p3 = ((underflow_15_fu_885_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_1166);

assign p_s_fu_950_p3 = ((tmp_208_reg_1184[0:0] === 1'b1) ? tmp_300_reg_1179 : 7'd0);

assign p_shl1_cast_fu_346_p1 = tmp_348_fu_338_p3;

assign p_shl2_cast_fu_312_p1 = tmp_s_fu_304_p3;

assign p_shl3_cast_fu_371_p3 = {{tmp_350_fu_366_p2}, {5'd0}};

assign p_shl4_cast_fu_387_p1 = tmp_297_fu_379_p3;

assign p_shl5_fu_472_p1 = $signed(tmp_301_fu_464_p3);

assign p_shl6_cast_fu_433_p1 = tmp_353_fu_425_p3;

assign p_shl7_cast_fu_445_p1 = tmp_354_fu_437_p3;

assign p_shl8_cast_fu_551_p3 = {{tmp_360_reg_1037}, {5'd0}};

assign p_shl9_cast_fu_565_p1 = tmp_303_fu_558_p3;

assign p_shl_cast_fu_334_p1 = tmp_347_fu_326_p3;

assign result_1_fu_918_p3 = ((brmerge9_fu_899_p2[0:0] === 1'b1) ? result_V_mux_fu_904_p3 : p_result_V_fu_911_p3);

assign result_V_fu_866_p2 = (p_Val2_s_reg_210 + bias_V_q0);

assign result_V_mux_fu_904_p3 = ((brmerge_i_i_fu_890_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_1166);

assign sext_fu_279_p1 = $signed(conv1_weight_V3);

assign sum_V_fu_836_p3 = ((underflow_not_fu_819_p2[0:0] === 1'b1) ? p_Val2_112_mux_fu_824_p3 : p_Val2_s_102_fu_830_p3);

assign tmp2_cast_fu_521_p1 = $signed(tmp2_fu_515_p2);

assign tmp2_fu_515_p2 = ($signed(2'd3) + $signed(m_reg_245));

assign tmp3_cast_fu_593_p1 = $signed(tmp3_fu_587_p2);

assign tmp3_fu_587_p2 = ($signed(n_reg_268) + $signed(2'd3));

assign tmp4_demorgan_fu_792_p2 = (p_38_i_i_fu_760_p2 | brmerge40_demorgan_i_fu_787_p2);

assign tmp4_fu_798_p2 = (tmp4_demorgan_fu_792_p2 ^ 1'd1);

assign tmp5_fu_815_p2 = (brmerge40_demorgan_i_reg_1139 | tmp_220_reg_1134);

assign tmp_204_fu_844_p1 = $signed(p_Val2_s_reg_210);

assign tmp_205_fu_848_p1 = $signed(bias_V_q0);

assign tmp_206_fu_880_p2 = (newsignbit_15_reg_1172 ^ 1'd1);

assign tmp_207_cast_fu_936_p1 = w_reg_198;

assign tmp_208_fu_930_p2 = (($signed(result_1_fu_918_p3) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign tmp_209_cast_fu_421_p1 = ci_reg_222;

assign tmp_210_fu_494_p1 = m_reg_245;

assign tmp_211_fu_525_p2 = ($signed(h_reg_186) + $signed(tmp2_cast_fu_521_p1));

assign tmp_212_cast_fu_531_p1 = tmp_211_fu_525_p2;

assign tmp_214_fu_597_p2 = ($signed(tmp3_cast_fu_593_p1) + $signed(w_reg_198));

assign tmp_215_cast_fu_603_p1 = tmp_214_fu_597_p2;

assign tmp_216_fu_636_p3 = {{p_Val2_103_reg_256}, {6'd0}};

assign tmp_217_fu_671_p1 = tmp_306_reg_1087;

assign tmp_218_fu_696_p2 = (newsignbit_fu_688_p3 ^ 1'd1);

assign tmp_219_fu_742_p2 = (tmp_309_fu_718_p3 ^ 1'd1);

assign tmp_220_fu_776_p2 = (signbit_reg_1097 ^ 1'd1);

assign tmp_297_fu_379_p3 = {{tmp_350_fu_366_p2}, {1'd0}};

assign tmp_300_fu_926_p1 = result_1_fu_918_p3[6:0];

assign tmp_301_fu_464_p3 = {{tmp_356_fu_455_p2}, {2'd0}};

assign tmp_302_fu_503_p2 = tmp_358_fu_498_p2 << 64'd2;

assign tmp_303_fu_558_p3 = {{tmp_360_reg_1037}, {1'd0}};

assign tmp_304_fu_540_p2 = ($signed(tmp_359_fu_509_p2) + $signed(sext_reg_967));

assign tmp_307_fu_674_p3 = p_Val2_104_fu_648_p2[32'd13];

assign tmp_309_fu_718_p3 = p_Val2_104_reg_1092[32'd14];

assign tmp_316_cast_fu_644_p1 = $signed(tmp_216_fu_636_p3);

assign tmp_346_fu_316_p2 = (p_shl2_cast_fu_312_p1 - tmp_cast_fu_300_p1);

assign tmp_347_fu_326_p3 = {{co_reg_175}, {5'd0}};

assign tmp_348_fu_338_p3 = {{co_reg_175}, {1'd0}};

assign tmp_349_fu_350_p2 = (p_shl1_cast_fu_346_p1 + p_shl_cast_fu_334_p1);

assign tmp_350_fu_366_p2 = (tmp_cast_97_fu_362_p1 + tmp_349_reg_985);

assign tmp_351_fu_391_p2 = (p_shl3_cast_fu_371_p3 + p_shl4_cast_fu_387_p1);

assign tmp_352_fu_940_p2 = (tmp_351_reg_998 + tmp_207_cast_fu_936_p1);

assign tmp_353_fu_425_p3 = {{ci_reg_222}, {5'd0}};

assign tmp_354_fu_437_p3 = {{ci_reg_222}, {1'd0}};

assign tmp_355_fu_449_p2 = (p_shl7_cast_fu_445_p1 + p_shl6_cast_fu_433_p1);

assign tmp_356_fu_455_p2 = ($signed(tmp_435_cast_reg_980) + $signed(tmp_209_cast_fu_421_p1));

assign tmp_357_fu_476_p2 = ($signed(p_shl5_fu_472_p1) - $signed(tmp_447_cast_fu_460_p1));

assign tmp_358_fu_498_p2 = (tmp_357_reg_1024 + tmp_210_fu_494_p1);

assign tmp_359_fu_509_p2 = (tmp_302_fu_503_p2 - tmp_358_fu_498_p2);

assign tmp_360_fu_535_p2 = (tmp_355_reg_1019 + tmp_212_cast_fu_531_p1);

assign tmp_361_fu_569_p2 = (p_shl9_cast_fu_565_p1 + p_shl8_cast_fu_551_p3);

assign tmp_362_fu_607_p2 = (tmp_215_cast_fu_603_p1 + tmp_361_reg_1049);

assign tmp_435_cast_fu_322_p1 = $signed(tmp_346_fu_316_p2);

assign tmp_443_cast_fu_945_p1 = tmp_352_fu_940_p2;

assign tmp_447_cast_fu_460_p1 = $signed(tmp_356_fu_455_p2);

assign tmp_458_cast_fu_612_p1 = tmp_362_reg_1062;

assign tmp_cast_97_fu_362_p1 = h_reg_186;

assign tmp_cast_fu_300_p1 = co_reg_175;

assign tmp_fu_295_p1 = co_reg_175;

assign tmp_s_fu_304_p3 = {{co_reg_175}, {2'd0}};

assign underflow_15_fu_885_p2 = (isneg_reg_1159 & tmp_206_fu_880_p2);

assign underflow_fu_804_p2 = (signbit_reg_1097 & tmp4_fu_798_p2);

assign underflow_not_fu_819_p2 = (tmp5_fu_815_p2 | p_38_i_i_reg_1129);

assign w_23_fu_961_p2 = (6'd1 + w_reg_198);

always @ (posedge ap_clk) begin
    tmp_349_reg_985[0] <= 1'b0;
    tmp_351_reg_998[0] <= 1'b0;
    tmp_355_reg_1019[0] <= 1'b0;
    tmp_361_reg_1049[0] <= 1'b0;
end

endmodule //conv1_p
