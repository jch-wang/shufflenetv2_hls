-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv1_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_weight_V_AWVALID : OUT STD_LOGIC;
    m_axi_weight_V_AWREADY : IN STD_LOGIC;
    m_axi_weight_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_WVALID : OUT STD_LOGIC;
    m_axi_weight_V_WREADY : IN STD_LOGIC;
    m_axi_weight_V_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_weight_V_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_WLAST : OUT STD_LOGIC;
    m_axi_weight_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_ARVALID : OUT STD_LOGIC;
    m_axi_weight_V_ARREADY : IN STD_LOGIC;
    m_axi_weight_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_RVALID : IN STD_LOGIC;
    m_axi_weight_V_RREADY : OUT STD_LOGIC;
    m_axi_weight_V_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_weight_V_RLAST : IN STD_LOGIC;
    m_axi_weight_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_BVALID : IN STD_LOGIC;
    m_axi_weight_V_BREADY : OUT STD_LOGIC;
    m_axi_weight_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    conv1_weight_V3 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of conv1_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weight_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal weight_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal sext_fu_279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_reg_967 : STD_LOGIC_VECTOR (63 downto 0);
    signal co_24_fu_289_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_24_reg_975 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_435_cast_fu_322_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_435_cast_reg_980 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond2_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_349_fu_350_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_349_reg_985 : STD_LOGIC_VECTOR (10 downto 0);
    signal bias_V_addr_reg_990 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_351_fu_391_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_351_reg_998 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond3_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_23_fu_403_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond4_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ci_9_fu_415_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ci_9_reg_1014 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_355_fu_449_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_355_reg_1019 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond5_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_357_fu_476_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_357_reg_1024 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_7_fu_488_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_7_reg_1032 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_360_fu_535_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_360_reg_1037 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond6_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_addr_reg_1043 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_361_fu_569_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_361_reg_1049 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal n_7_fu_581_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_7_reg_1057 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_362_fu_607_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_362_reg_1062 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal weight_V_addr_read_reg_1072 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_V_load_reg_1077 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_6_fu_622_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_6_reg_1082 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_306_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_104_fu_648_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_104_reg_1092 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal signbit_reg_1097 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_106_fu_682_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_106_reg_1104 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_688_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_1110 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_1116 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_185_reg_1123 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_1129 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_220_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_220_reg_1134 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_1139 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_1144 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_1149 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_836_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal isneg_reg_1159 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal result_V_fu_866_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_1166 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_15_reg_1172 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_300_fu_926_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_300_reg_1179 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_208_fu_930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_208_reg_1184 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_23_fu_961_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal co_reg_175 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_186 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_reg_198 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_s_reg_210 : STD_LOGIC_VECTOR (7 downto 0);
    signal ci_reg_222 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_233 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_245 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_103_reg_256 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_268 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_458_cast_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_443_cast_fu_945_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_304_fu_540_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_weight_V_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_weight_V_ARREADY : STD_LOGIC;
    signal tmp_s_fu_304_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_fu_312_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_fu_300_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_346_fu_316_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_347_fu_326_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_348_fu_338_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_346_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_334_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_cast_97_fu_362_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_350_fu_366_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_297_fu_379_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl3_cast_fu_371_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl4_cast_fu_387_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_353_fu_425_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_354_fu_437_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl7_cast_fu_445_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl6_cast_fu_433_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_209_cast_fu_421_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_356_fu_455_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_301_fu_464_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_447_cast_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_210_fu_494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_358_fu_498_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_302_fu_503_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp2_fu_515_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_521_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_211_fu_525_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_212_cast_fu_531_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_359_fu_509_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_303_fu_558_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl9_cast_fu_565_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl8_cast_fu_551_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp3_fu_587_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_593_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_214_fu_597_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_215_cast_fu_603_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_6_fu_622_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_6_fu_622_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_216_fu_636_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_316_cast_fu_644_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_105_fu_661_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_217_fu_671_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_307_fu_674_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_218_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_309_fu_718_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_219_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_735_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i6_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_753_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_112_mux_fu_824_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_102_fu_830_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_204_fu_844_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_205_fu_848_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_101_fu_852_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_206_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_890_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_15_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_904_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_911_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_1_fu_918_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_207_cast_fu_936_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_352_fu_940_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_s_fu_950_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_weight_V_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_weight_V_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    if ((ap_sig_ioackin_m_axi_weight_V_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_weight_V_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_weight_V_ARREADY)) then 
                        ap_reg_ioackin_m_axi_weight_V_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ci_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond4_fu_397_p2))) then 
                ci_reg_222 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond6_fu_482_p2))) then 
                ci_reg_222 <= ci_9_reg_1014;
            end if; 
        end if;
    end process;

    co_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_356_p2 = ap_const_lv1_1))) then 
                co_reg_175 <= co_24_reg_975;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_175 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond2_fu_283_p2))) then 
                h_reg_186 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond4_fu_397_p2 = ap_const_lv1_1))) then 
                h_reg_186 <= h_23_fu_403_p2;
            end if; 
        end if;
    end process;

    m_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = exitcond_fu_575_p2))) then 
                m_reg_245 <= m_7_reg_1032;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond5_fu_409_p2))) then 
                m_reg_245 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                n_reg_268 <= n_7_reg_1057;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                n_reg_268 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_103_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                p_Val2_103_reg_256 <= sum_V_fu_836_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                p_Val2_103_reg_256 <= sum_1_reg_233;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond4_fu_397_p2))) then 
                p_Val2_s_reg_210 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond6_fu_482_p2))) then 
                p_Val2_s_reg_210 <= sum_1_reg_233;
            end if; 
        end if;
    end process;

    sum_1_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = exitcond_fu_575_p2))) then 
                sum_1_reg_233 <= p_Val2_103_reg_256;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond5_fu_409_p2))) then 
                sum_1_reg_233 <= p_Val2_s_reg_210;
            end if; 
        end if;
    end process;

    w_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_356_p2))) then 
                w_reg_198 <= ap_const_lv6_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                w_reg_198 <= w_23_fu_961_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond2_fu_283_p2))) then
                bias_V_addr_reg_990 <= tmp_fu_295_p1(5 - 1 downto 0);
                    tmp_349_reg_985(10 downto 1) <= tmp_349_fu_350_p2(10 downto 1);
                tmp_435_cast_reg_980 <= tmp_435_cast_fu_322_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                brmerge40_demorgan_i_reg_1139 <= brmerge40_demorgan_i_fu_787_p2;
                brmerge_i_i_i_reg_1149 <= brmerge_i_i_i_fu_809_p2;
                p_38_i_i_reg_1129 <= p_38_i_i_fu_760_p2;
                tmp_220_reg_1134 <= tmp_220_fu_776_p2;
                underflow_reg_1144 <= underflow_fu_804_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                carry_reg_1116 <= carry_fu_702_p2;
                newsignbit_reg_1110 <= p_Val2_106_fu_682_p2(7 downto 7);
                p_Val2_104_reg_1092 <= p_Val2_104_fu_648_p2;
                p_Val2_106_reg_1104 <= p_Val2_106_fu_682_p2;
                signbit_reg_1097 <= p_Val2_104_fu_648_p2(15 downto 15);
                tmp_185_reg_1123 <= p_Val2_104_fu_648_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                ci_9_reg_1014 <= ci_9_fu_415_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_24_reg_975 <= co_24_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_weight_V_RVALID = ap_const_logic_1))) then
                input_V_load_reg_1077 <= input_V_q0;
                weight_V_addr_read_reg_1072 <= m_axi_weight_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                isneg_reg_1159 <= p_Val2_101_fu_852_p2(8 downto 8);
                newsignbit_15_reg_1172 <= result_V_fu_866_p2(7 downto 7);
                result_V_reg_1166 <= result_V_fu_866_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                m_7_reg_1032 <= m_7_fu_488_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                n_7_reg_1057 <= n_7_fu_581_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                p_Val2_6_reg_1082 <= p_Val2_6_fu_622_p2;
                tmp_306_reg_1087 <= p_Val2_6_fu_622_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                sext_reg_967 <= sext_fu_279_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_208_reg_1184 <= tmp_208_fu_930_p2;
                tmp_300_reg_1179 <= tmp_300_fu_926_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_356_p2))) then
                    tmp_351_reg_998(15 downto 1) <= tmp_351_fu_391_p2(15 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond5_fu_409_p2))) then
                    tmp_355_reg_1019(7 downto 1) <= tmp_355_fu_449_p2(7 downto 1);
                tmp_357_reg_1024 <= tmp_357_fu_476_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond6_fu_482_p2))) then
                tmp_360_reg_1037 <= tmp_360_fu_535_p2;
                weight_V_addr_reg_1043 <= tmp_304_fu_540_p2(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                    tmp_361_reg_1049(12 downto 1) <= tmp_361_fu_569_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_0 = exitcond_fu_575_p2))) then
                tmp_362_reg_1062 <= tmp_362_fu_607_p2;
            end if;
        end if;
    end process;
    tmp_349_reg_985(0) <= '0';
    tmp_351_reg_998(0) <= '0';
    tmp_355_reg_1019(0) <= '0';
    tmp_361_reg_1049(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_weight_V_RVALID, ap_CS_fsm_state7, ap_CS_fsm_state16, ap_CS_fsm_state2, exitcond2_fu_283_p2, ap_CS_fsm_state3, exitcond3_fu_356_p2, ap_CS_fsm_state4, exitcond4_fu_397_p2, ap_CS_fsm_state5, exitcond5_fu_409_p2, ap_CS_fsm_state6, exitcond6_fu_482_p2, ap_CS_fsm_state14, exitcond_fu_575_p2, ap_sig_ioackin_m_axi_weight_V_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_283_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_356_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond4_fu_397_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond5_fu_409_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond6_fu_482_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_sig_ioackin_m_axi_weight_V_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = exitcond_fu_575_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_weight_V_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_725_p2 <= "1" when (tmp_185_reg_1123 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_730_p2 <= "1" when (tmp_185_reg_1123 = ap_const_lv2_0) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_283_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_283_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_283_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_283_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_weight_V_ARREADY_assign_proc : process(m_axi_weight_V_ARREADY, ap_reg_ioackin_m_axi_weight_V_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_weight_V_ARREADY)) then 
            ap_sig_ioackin_m_axi_weight_V_ARREADY <= m_axi_weight_V_ARREADY;
        else 
            ap_sig_ioackin_m_axi_weight_V_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_990;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_787_p2 <= (newsignbit_reg_1110 and deleted_ones_fu_753_p3);
    brmerge9_fu_899_p2 <= (newsignbit_15_reg_1172 or isneg_not_fu_894_p2);
    brmerge_i_i6_fu_771_p2 <= (newsignbit_reg_1110 or p_not_i_i_fu_765_p2);
    brmerge_i_i_fu_890_p2 <= (isneg_reg_1159 xor newsignbit_15_reg_1172);
    brmerge_i_i_i_fu_809_p2 <= (underflow_fu_804_p2 or overflow_fu_781_p2);
    carry_fu_702_p2 <= (tmp_307_fu_674_p3 and tmp_218_fu_696_p2);
    ci_9_fu_415_p2 <= std_logic_vector(unsigned(ci_reg_222) + unsigned(ap_const_lv2_1));
    co_24_fu_289_p2 <= std_logic_vector(unsigned(co_reg_175) + unsigned(ap_const_lv5_1));
    deleted_ones_fu_753_p3 <= 
        p_41_i_i_fu_748_p2 when (carry_reg_1116(0) = '1') else 
        Range1_all_ones_fu_725_p2;
    deleted_zeros_fu_735_p3 <= 
        Range1_all_ones_fu_725_p2 when (carry_reg_1116(0) = '1') else 
        Range1_all_zeros_fu_730_p2;
    exitcond2_fu_283_p2 <= "1" when (co_reg_175 = ap_const_lv5_18) else "0";
    exitcond3_fu_356_p2 <= "1" when (h_reg_186 = ap_const_lv6_21) else "0";
    exitcond4_fu_397_p2 <= "1" when (w_reg_198 = ap_const_lv6_21) else "0";
    exitcond5_fu_409_p2 <= "1" when (ci_reg_222 = ap_const_lv2_3) else "0";
    exitcond6_fu_482_p2 <= "1" when (m_reg_245 = ap_const_lv2_3) else "0";
    exitcond_fu_575_p2 <= "1" when (n_reg_268 = ap_const_lv2_3) else "0";
    h_23_fu_403_p2 <= std_logic_vector(unsigned(h_reg_186) + unsigned(ap_const_lv6_1));
    input_V_address0 <= tmp_458_cast_fu_612_p1(12 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isneg_not_fu_894_p2 <= (isneg_reg_1159 xor ap_const_lv1_1);
    m_7_fu_488_p2 <= std_logic_vector(unsigned(m_reg_245) + unsigned(ap_const_lv2_1));
    m_axi_weight_V_ARADDR <= weight_V_addr_reg_1043;
    m_axi_weight_V_ARBURST <= ap_const_lv2_0;
    m_axi_weight_V_ARCACHE <= ap_const_lv4_0;
    m_axi_weight_V_ARID <= ap_const_lv1_0;
    m_axi_weight_V_ARLEN <= ap_const_lv32_3;
    m_axi_weight_V_ARLOCK <= ap_const_lv2_0;
    m_axi_weight_V_ARPROT <= ap_const_lv3_0;
    m_axi_weight_V_ARQOS <= ap_const_lv4_0;
    m_axi_weight_V_ARREGION <= ap_const_lv4_0;
    m_axi_weight_V_ARSIZE <= ap_const_lv3_0;
    m_axi_weight_V_ARUSER <= ap_const_lv1_0;

    m_axi_weight_V_ARVALID_assign_proc : process(ap_CS_fsm_state7, ap_reg_ioackin_m_axi_weight_V_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_weight_V_ARREADY))) then 
            m_axi_weight_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_weight_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weight_V_AWADDR <= ap_const_lv32_0;
    m_axi_weight_V_AWBURST <= ap_const_lv2_0;
    m_axi_weight_V_AWCACHE <= ap_const_lv4_0;
    m_axi_weight_V_AWID <= ap_const_lv1_0;
    m_axi_weight_V_AWLEN <= ap_const_lv32_0;
    m_axi_weight_V_AWLOCK <= ap_const_lv2_0;
    m_axi_weight_V_AWPROT <= ap_const_lv3_0;
    m_axi_weight_V_AWQOS <= ap_const_lv4_0;
    m_axi_weight_V_AWREGION <= ap_const_lv4_0;
    m_axi_weight_V_AWSIZE <= ap_const_lv3_0;
    m_axi_weight_V_AWUSER <= ap_const_lv1_0;
    m_axi_weight_V_AWVALID <= ap_const_logic_0;
    m_axi_weight_V_BREADY <= ap_const_logic_0;

    m_axi_weight_V_RREADY_assign_proc : process(m_axi_weight_V_RVALID, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_weight_V_RVALID = ap_const_logic_1))) then 
            m_axi_weight_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_weight_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weight_V_WDATA <= ap_const_lv8_0;
    m_axi_weight_V_WID <= ap_const_lv1_0;
    m_axi_weight_V_WLAST <= ap_const_logic_0;
    m_axi_weight_V_WSTRB <= ap_const_lv1_0;
    m_axi_weight_V_WUSER <= ap_const_lv1_0;
    m_axi_weight_V_WVALID <= ap_const_logic_0;
    n_7_fu_581_p2 <= std_logic_vector(unsigned(n_reg_268) + unsigned(ap_const_lv2_1));
    newsignbit_fu_688_p3 <= p_Val2_106_fu_682_p2(7 downto 7);
    output_V_address0 <= tmp_443_cast_fu_945_p1(15 - 1 downto 0);

    output_V_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_s_fu_950_p3),8));

    output_V_we0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_781_p2 <= (brmerge_i_i6_fu_771_p2 and tmp_220_fu_776_p2);
    p_38_i_i_fu_760_p2 <= (carry_reg_1116 and Range1_all_ones_fu_725_p2);
    p_41_i_i_fu_748_p2 <= (signbit_reg_1097 and tmp_219_fu_742_p2);
    p_Val2_101_fu_852_p2 <= std_logic_vector(signed(tmp_204_fu_844_p1) + signed(tmp_205_fu_848_p1));
    p_Val2_104_fu_648_p2 <= std_logic_vector(signed(tmp_316_cast_fu_644_p1) + signed(p_Val2_6_reg_1082));
    p_Val2_105_fu_661_p4 <= p_Val2_104_fu_648_p2(13 downto 6);
    p_Val2_106_fu_682_p2 <= std_logic_vector(unsigned(p_Val2_105_fu_661_p4) + unsigned(tmp_217_fu_671_p1));
    p_Val2_112_mux_fu_824_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_1149(0) = '1') else 
        p_Val2_106_reg_1104;
    p_Val2_6_fu_622_p0 <= weight_V_addr_read_reg_1072;
    p_Val2_6_fu_622_p1 <= input_V_load_reg_1077;
    p_Val2_6_fu_622_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_6_fu_622_p0) * signed(p_Val2_6_fu_622_p1))), 16));
    p_Val2_s_102_fu_830_p3 <= 
        ap_const_lv8_80 when (underflow_reg_1144(0) = '1') else 
        p_Val2_106_reg_1104;
    p_not_i_i_fu_765_p2 <= (deleted_zeros_fu_735_p3 xor ap_const_lv1_1);
    p_result_V_fu_911_p3 <= 
        ap_const_lv8_80 when (underflow_15_fu_885_p2(0) = '1') else 
        result_V_reg_1166;
    p_s_fu_950_p3 <= 
        tmp_300_reg_1179 when (tmp_208_reg_1184(0) = '1') else 
        ap_const_lv7_0;
    p_shl1_cast_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_348_fu_338_p3),11));
    p_shl2_cast_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_304_p3),8));
    p_shl3_cast_fu_371_p3 <= (tmp_350_fu_366_p2 & ap_const_lv5_0);
    p_shl4_cast_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_297_fu_379_p3),16));
        p_shl5_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_301_fu_464_p3),64));

    p_shl6_cast_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_353_fu_425_p3),8));
    p_shl7_cast_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_354_fu_437_p3),8));
    p_shl8_cast_fu_551_p3 <= (tmp_360_reg_1037 & ap_const_lv5_0);
    p_shl9_cast_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_303_fu_558_p3),13));
    p_shl_cast_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_347_fu_326_p3),11));
    result_1_fu_918_p3 <= 
        result_V_mux_fu_904_p3 when (brmerge9_fu_899_p2(0) = '1') else 
        p_result_V_fu_911_p3;
    result_V_fu_866_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_210) + unsigned(bias_V_q0));
    result_V_mux_fu_904_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_890_p2(0) = '1') else 
        result_V_reg_1166;
        sext_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv1_weight_V3),64));

    sum_V_fu_836_p3 <= 
        p_Val2_112_mux_fu_824_p3 when (underflow_not_fu_819_p2(0) = '1') else 
        p_Val2_s_102_fu_830_p3;
        tmp2_cast_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_515_p2),6));

    tmp2_fu_515_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(m_reg_245));
        tmp3_cast_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_587_p2),6));

    tmp3_fu_587_p2 <= std_logic_vector(unsigned(n_reg_268) + unsigned(ap_const_lv2_3));
    tmp4_demorgan_fu_792_p2 <= (p_38_i_i_fu_760_p2 or brmerge40_demorgan_i_fu_787_p2);
    tmp4_fu_798_p2 <= (tmp4_demorgan_fu_792_p2 xor ap_const_lv1_1);
    tmp5_fu_815_p2 <= (brmerge40_demorgan_i_reg_1139 or tmp_220_reg_1134);
        tmp_204_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_210),9));

        tmp_205_fu_848_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    tmp_206_fu_880_p2 <= (newsignbit_15_reg_1172 xor ap_const_lv1_1);
    tmp_207_cast_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_198),16));
    tmp_208_fu_930_p2 <= "1" when (signed(result_1_fu_918_p3) > signed(ap_const_lv8_0)) else "0";
    tmp_209_cast_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_222),9));
    tmp_210_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_245),64));
    tmp_211_fu_525_p2 <= std_logic_vector(unsigned(h_reg_186) + unsigned(tmp2_cast_fu_521_p1));
    tmp_212_cast_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_211_fu_525_p2),8));
    tmp_214_fu_597_p2 <= std_logic_vector(signed(tmp3_cast_fu_593_p1) + signed(w_reg_198));
    tmp_215_cast_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_214_fu_597_p2),13));
    tmp_216_fu_636_p3 <= (p_Val2_103_reg_256 & ap_const_lv6_0);
    tmp_217_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_306_reg_1087),8));
    tmp_218_fu_696_p2 <= (newsignbit_fu_688_p3 xor ap_const_lv1_1);
    tmp_219_fu_742_p2 <= (tmp_309_fu_718_p3 xor ap_const_lv1_1);
    tmp_220_fu_776_p2 <= (signbit_reg_1097 xor ap_const_lv1_1);
    tmp_297_fu_379_p3 <= (tmp_350_fu_366_p2 & ap_const_lv1_0);
    tmp_300_fu_926_p1 <= result_1_fu_918_p3(7 - 1 downto 0);
    tmp_301_fu_464_p3 <= (tmp_356_fu_455_p2 & ap_const_lv2_0);
    tmp_302_fu_503_p2 <= std_logic_vector(shift_left(unsigned(tmp_358_fu_498_p2),to_integer(unsigned('0' & ap_const_lv64_2(31-1 downto 0)))));
    tmp_303_fu_558_p3 <= (tmp_360_reg_1037 & ap_const_lv1_0);
    tmp_304_fu_540_p2 <= std_logic_vector(unsigned(tmp_359_fu_509_p2) + unsigned(sext_reg_967));
    tmp_307_fu_674_p3 <= p_Val2_104_fu_648_p2(13 downto 13);
    tmp_309_fu_718_p3 <= p_Val2_104_reg_1092(14 downto 14);
        tmp_316_cast_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_216_fu_636_p3),16));

    tmp_346_fu_316_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_312_p1) - unsigned(tmp_cast_fu_300_p1));
    tmp_347_fu_326_p3 <= (co_reg_175 & ap_const_lv5_0);
    tmp_348_fu_338_p3 <= (co_reg_175 & ap_const_lv1_0);
    tmp_349_fu_350_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_346_p1) + unsigned(p_shl_cast_fu_334_p1));
    tmp_350_fu_366_p2 <= std_logic_vector(unsigned(tmp_cast_97_fu_362_p1) + unsigned(tmp_349_reg_985));
    tmp_351_fu_391_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_371_p3) + unsigned(p_shl4_cast_fu_387_p1));
    tmp_352_fu_940_p2 <= std_logic_vector(unsigned(tmp_351_reg_998) + unsigned(tmp_207_cast_fu_936_p1));
    tmp_353_fu_425_p3 <= (ci_reg_222 & ap_const_lv5_0);
    tmp_354_fu_437_p3 <= (ci_reg_222 & ap_const_lv1_0);
    tmp_355_fu_449_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_445_p1) + unsigned(p_shl6_cast_fu_433_p1));
    tmp_356_fu_455_p2 <= std_logic_vector(signed(tmp_435_cast_reg_980) + signed(tmp_209_cast_fu_421_p1));
    tmp_357_fu_476_p2 <= std_logic_vector(signed(p_shl5_fu_472_p1) - signed(tmp_447_cast_fu_460_p1));
    tmp_358_fu_498_p2 <= std_logic_vector(unsigned(tmp_357_reg_1024) + unsigned(tmp_210_fu_494_p1));
    tmp_359_fu_509_p2 <= std_logic_vector(unsigned(tmp_302_fu_503_p2) - unsigned(tmp_358_fu_498_p2));
    tmp_360_fu_535_p2 <= std_logic_vector(unsigned(tmp_355_reg_1019) + unsigned(tmp_212_cast_fu_531_p1));
    tmp_361_fu_569_p2 <= std_logic_vector(unsigned(p_shl9_cast_fu_565_p1) + unsigned(p_shl8_cast_fu_551_p3));
    tmp_362_fu_607_p2 <= std_logic_vector(unsigned(tmp_215_cast_fu_603_p1) + unsigned(tmp_361_reg_1049));
        tmp_435_cast_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_346_fu_316_p2),9));

    tmp_443_cast_fu_945_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_352_fu_940_p2),64));
        tmp_447_cast_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_356_fu_455_p2),64));

    tmp_458_cast_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_362_reg_1062),64));
    tmp_cast_97_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_186),11));
    tmp_cast_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_175),8));
    tmp_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_175),64));
    tmp_s_fu_304_p3 <= (co_reg_175 & ap_const_lv2_0);
    underflow_15_fu_885_p2 <= (isneg_reg_1159 and tmp_206_fu_880_p2);
    underflow_fu_804_p2 <= (signbit_reg_1097 and tmp4_fu_798_p2);
    underflow_not_fu_819_p2 <= (tmp5_fu_815_p2 or p_38_i_i_reg_1129);
    w_23_fu_961_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(w_reg_198));

    weight_V_blk_n_AR_assign_proc : process(m_axi_weight_V_ARREADY, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_V_blk_n_AR <= m_axi_weight_V_ARREADY;
        else 
            weight_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    weight_V_blk_n_R_assign_proc : process(m_axi_weight_V_RVALID, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            weight_V_blk_n_R <= m_axi_weight_V_RVALID;
        else 
            weight_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

end behav;
