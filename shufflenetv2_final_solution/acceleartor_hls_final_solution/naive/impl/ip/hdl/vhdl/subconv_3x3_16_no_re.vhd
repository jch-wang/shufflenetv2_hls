-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_16_no_re is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_16_no_re is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_6_fu_218_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_6_reg_807 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_110_fu_257_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_110_reg_812 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond3_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_127_cast_fu_281_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_127_cast_reg_818 : STD_LOGIC_VECTOR (8 downto 0);
    signal bias_V_addr_reg_823 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_115_fu_320_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_115_reg_831 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond4_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_6_fu_332_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond5_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_6_fu_344_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_6_reg_847 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_117_fu_354_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_117_reg_852 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond6_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_120_fu_379_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_120_reg_858 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_119_fu_389_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_119_reg_864 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_122_fu_412_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_122_reg_869 : STD_LOGIC_VECTOR (13 downto 0);
    signal n_6_fu_424_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_6_reg_877 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_124_fu_464_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_124_reg_887 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal weight_V_load_reg_897 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_V_load_reg_902 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_Val2_5_fu_479_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_5_reg_907 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_126_reg_912 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_41_fu_505_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_41_reg_917 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal signbit_reg_922 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_43_fu_539_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_43_reg_929 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_545_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_935 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_941 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_102_reg_948 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_954 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_103_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_103_reg_959 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_964 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_969 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_974 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_693_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal isneg_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal result_V_fu_723_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_991 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_6_reg_997 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_6_fu_798_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal co_reg_131 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_142 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_154 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Val2_s_reg_166 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_178 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_40_reg_189 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_201 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_140_cast_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_141_cast_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_132_cast_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_233_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_109_fu_245_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_cast_fu_253_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_cast_fu_241_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_111_fu_263_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_271_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_fu_229_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_112_fu_275_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_43_fu_291_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_113_fu_295_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_114_fu_308_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_300_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl4_cast_fu_316_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_92_cast_fu_350_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_359_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_365_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_93_fu_369_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_94_cast_fu_375_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_118_fu_384_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_121_fu_401_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_fu_408_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl5_cast_fu_394_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_95_cast_fu_430_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_123_fu_434_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp3_fu_444_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_450_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_96_fu_454_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_97_cast_fu_460_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_5_fu_479_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_5_fu_479_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_98_fu_493_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_130_cast_fu_501_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_42_fu_518_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_99_fu_528_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_127_fu_531_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_100_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_129_fu_575_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_101_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_592_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i6_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_610_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_48_mux_fu_681_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_47_fu_687_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_88_fu_701_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_89_fu_705_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_38_fu_709_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_90_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_6_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_761_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_768_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_91_cast_fu_784_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_116_fu_788_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_285_p2 = ap_const_lv1_1))) then 
                co_reg_131 <= co_6_reg_807;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_131 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_212_p2 = ap_const_lv1_0))) then 
                h_reg_142 <= ap_const_lv5_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_fu_326_p2 = ap_const_lv1_1))) then 
                h_reg_142 <= h_6_fu_332_p2;
            end if; 
        end if;
    end process;

    m_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond5_fu_326_p2))) then 
                m_reg_178 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_418_p2))) then 
                m_reg_178 <= m_6_reg_847;
            end if; 
        end if;
    end process;

    n_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                n_reg_201 <= n_6_reg_877;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                n_reg_201 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_40_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                p_Val2_40_reg_189 <= sum_V_fu_693_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_40_reg_189 <= p_Val2_s_reg_166;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond5_fu_326_p2))) then 
                p_Val2_s_reg_166 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_418_p2))) then 
                p_Val2_s_reg_166 <= p_Val2_40_reg_189;
            end if; 
        end if;
    end process;

    w_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond4_fu_285_p2))) then 
                w_reg_154 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                w_reg_154 <= w_6_fu_798_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_212_p2 = ap_const_lv1_0))) then
                bias_V_addr_reg_823 <= tmp_fu_224_p1(5 - 1 downto 0);
                    tmp_110_reg_812(9 downto 1) <= tmp_110_fu_257_p2(9 downto 1);
                tmp_127_cast_reg_818 <= tmp_127_cast_fu_281_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                brmerge40_demorgan_i_reg_964 <= brmerge40_demorgan_i_fu_644_p2;
                brmerge_i_i_i_reg_974 <= brmerge_i_i_i_fu_666_p2;
                p_38_i_i_reg_954 <= p_38_i_i_fu_617_p2;
                tmp_103_reg_959 <= tmp_103_fu_633_p2;
                underflow_reg_969 <= underflow_fu_661_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                carry_reg_941 <= carry_fu_559_p2;
                newsignbit_reg_935 <= p_Val2_43_fu_539_p2(7 downto 7);
                p_Val2_41_reg_917 <= p_Val2_41_fu_505_p2;
                p_Val2_43_reg_929 <= p_Val2_43_fu_539_p2;
                signbit_reg_922 <= p_Val2_41_fu_505_p2(15 downto 15);
                tmp_102_reg_948 <= p_Val2_41_fu_505_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_6_reg_807 <= co_6_fu_218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                input_V_load_reg_902 <= input_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                isneg_reg_984 <= p_Val2_38_fu_709_p2(8 downto 8);
                newsignbit_6_reg_997 <= result_V_fu_723_p2(7 downto 7);
                result_V_reg_991 <= result_V_fu_723_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_6_reg_847 <= m_6_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                n_6_reg_877 <= n_6_fu_424_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_Val2_5_reg_907 <= p_Val2_5_fu_479_p2;
                tmp_126_reg_912 <= p_Val2_5_fu_479_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond4_fu_285_p2))) then
                    tmp_115_reg_831(13 downto 1) <= tmp_115_fu_320_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond6_fu_338_p2))) then
                tmp_117_reg_852 <= tmp_117_fu_354_p2;
                tmp_120_reg_858 <= tmp_120_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_119_reg_864 <= tmp_119_fu_389_p2;
                    tmp_122_reg_869(13 downto 1) <= tmp_122_fu_412_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond_fu_418_p2))) then
                tmp_124_reg_887 <= tmp_124_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                weight_V_load_reg_897 <= weight_V_q0;
            end if;
        end if;
    end process;
    tmp_110_reg_812(0) <= '0';
    tmp_115_reg_831(0) <= '0';
    tmp_122_reg_869(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_212_p2, ap_CS_fsm_state3, exitcond4_fu_285_p2, ap_CS_fsm_state4, exitcond5_fu_326_p2, ap_CS_fsm_state5, exitcond6_fu_338_p2, ap_CS_fsm_state7, exitcond_fu_418_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_212_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_285_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond5_fu_326_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond6_fu_338_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_418_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_582_p2 <= "1" when (tmp_102_reg_948 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_587_p2 <= "1" when (tmp_102_reg_948 = ap_const_lv2_0) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_212_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_212_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_212_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_212_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_823;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_644_p2 <= (newsignbit_reg_935 and deleted_ones_fu_610_p3);
    brmerge9_fu_756_p2 <= (newsignbit_6_reg_997 or isneg_not_fu_751_p2);
    brmerge_i_i6_fu_628_p2 <= (newsignbit_reg_935 or p_not_i_i_fu_622_p2);
    brmerge_i_i_fu_747_p2 <= (isneg_reg_984 xor newsignbit_6_reg_997);
    brmerge_i_i_i_fu_666_p2 <= (underflow_fu_661_p2 or overflow_fu_638_p2);
    carry_fu_559_p2 <= (tmp_127_fu_531_p3 and tmp_100_fu_553_p2);
    co_6_fu_218_p2 <= std_logic_vector(unsigned(co_reg_131) + unsigned(ap_const_lv5_1));
    deleted_ones_fu_610_p3 <= 
        p_41_i_i_fu_605_p2 when (carry_reg_941(0) = '1') else 
        Range1_all_ones_fu_582_p2;
    deleted_zeros_fu_592_p3 <= 
        Range1_all_ones_fu_582_p2 when (carry_reg_941(0) = '1') else 
        Range1_all_zeros_fu_587_p2;
    exitcond3_fu_212_p2 <= "1" when (co_reg_131 = ap_const_lv5_18) else "0";
    exitcond4_fu_285_p2 <= "1" when (h_reg_142 = ap_const_lv5_11) else "0";
    exitcond5_fu_326_p2 <= "1" when (w_reg_154 = ap_const_lv5_11) else "0";
    exitcond6_fu_338_p2 <= "1" when (m_reg_178 = ap_const_lv2_3) else "0";
    exitcond_fu_418_p2 <= "1" when (n_reg_201 = ap_const_lv2_3) else "0";
    h_6_fu_332_p2 <= std_logic_vector(unsigned(h_reg_142) + unsigned(ap_const_lv5_1));
    input_V_address0 <= tmp_141_cast_fu_469_p1(13 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isneg_not_fu_751_p2 <= (isneg_reg_984 xor ap_const_lv1_1);
    m_6_fu_344_p2 <= std_logic_vector(unsigned(m_reg_178) + unsigned(ap_const_lv2_1));
    n_6_fu_424_p2 <= std_logic_vector(unsigned(n_reg_201) + unsigned(ap_const_lv2_1));
    newsignbit_fu_545_p3 <= p_Val2_43_fu_539_p2(7 downto 7);
    output_V_address0 <= tmp_132_cast_fu_793_p1(13 - 1 downto 0);

    output_V_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= 
        result_V_mux_fu_761_p3 when (brmerge9_fu_756_p2(0) = '1') else 
        p_result_V_fu_768_p3;

    output_V_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_638_p2 <= (brmerge_i_i6_fu_628_p2 and tmp_103_fu_633_p2);
    p_38_i_i_fu_617_p2 <= (carry_reg_941 and Range1_all_ones_fu_582_p2);
    p_41_i_i_fu_605_p2 <= (signbit_reg_922 and tmp_101_fu_599_p2);
    p_Val2_38_fu_709_p2 <= std_logic_vector(signed(tmp_88_fu_701_p1) + signed(tmp_89_fu_705_p1));
    p_Val2_41_fu_505_p2 <= std_logic_vector(signed(tmp_130_cast_fu_501_p1) + signed(p_Val2_5_reg_907));
    p_Val2_42_fu_518_p4 <= p_Val2_41_fu_505_p2(13 downto 6);
    p_Val2_43_fu_539_p2 <= std_logic_vector(unsigned(p_Val2_42_fu_518_p4) + unsigned(tmp_99_fu_528_p1));
    p_Val2_48_mux_fu_681_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_974(0) = '1') else 
        p_Val2_43_reg_929;
    p_Val2_5_fu_479_p0 <= weight_V_load_reg_897;
    p_Val2_5_fu_479_p1 <= input_V_load_reg_902;
    p_Val2_5_fu_479_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_5_fu_479_p0) * signed(p_Val2_5_fu_479_p1))), 16));
    p_Val2_s_47_fu_687_p3 <= 
        ap_const_lv8_80 when (underflow_reg_969(0) = '1') else 
        p_Val2_43_reg_929;
    p_not_i_i_fu_622_p2 <= (deleted_zeros_fu_592_p3 xor ap_const_lv1_1);
    p_result_V_fu_768_p3 <= 
        ap_const_lv8_80 when (underflow_6_fu_742_p2(0) = '1') else 
        result_V_reg_991;
    p_shl1_cast_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_233_p3),10));
    p_shl2_cast_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_109_fu_245_p3),10));
    p_shl3_cast_fu_300_p3 <= (tmp_113_fu_295_p2 & ap_const_lv4_0);
    p_shl4_cast_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_114_fu_308_p3),14));
    p_shl5_cast_fu_394_p3 <= (tmp_120_reg_858 & ap_const_lv4_0);
    p_shl6_cast_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_121_fu_401_p3),14));
    p_shl_cast_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_111_fu_263_p3),8));
    result_V_fu_723_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_166) + unsigned(bias_V_q0));
    result_V_mux_fu_761_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_747_p2(0) = '1') else 
        result_V_reg_991;
    sum_V_fu_693_p3 <= 
        p_Val2_48_mux_fu_681_p3 when (underflow_not_fu_676_p2(0) = '1') else 
        p_Val2_s_47_fu_687_p3;
        tmp2_cast_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_359_p2),5));

    tmp2_fu_359_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(m_reg_178));
        tmp3_cast_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_444_p2),5));

    tmp3_fu_444_p2 <= std_logic_vector(unsigned(n_reg_201) + unsigned(ap_const_lv2_3));
    tmp4_demorgan_fu_649_p2 <= (p_38_i_i_fu_617_p2 or brmerge40_demorgan_i_fu_644_p2);
    tmp4_fu_655_p2 <= (tmp4_demorgan_fu_649_p2 xor ap_const_lv1_1);
    tmp5_fu_672_p2 <= (brmerge40_demorgan_i_reg_964 or tmp_103_reg_959);
    tmp_100_fu_553_p2 <= (newsignbit_fu_545_p3 xor ap_const_lv1_1);
    tmp_101_fu_599_p2 <= (tmp_129_fu_575_p3 xor ap_const_lv1_1);
    tmp_103_fu_633_p2 <= (signbit_reg_922 xor ap_const_lv1_1);
    tmp_109_fu_245_p3 <= (co_reg_131 & ap_const_lv1_0);
    tmp_110_fu_257_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_253_p1) + unsigned(p_shl1_cast_fu_241_p1));
    tmp_111_fu_263_p3 <= (co_reg_131 & ap_const_lv2_0);
    tmp_112_fu_275_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_271_p1) - unsigned(tmp_cast_fu_229_p1));
    tmp_113_fu_295_p2 <= std_logic_vector(unsigned(tmp_cast_43_fu_291_p1) + unsigned(tmp_110_reg_812));
    tmp_114_fu_308_p3 <= (tmp_113_fu_295_p2 & ap_const_lv1_0);
    tmp_115_fu_320_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_300_p3) + unsigned(p_shl4_cast_fu_316_p1));
    tmp_116_fu_788_p2 <= std_logic_vector(unsigned(tmp_115_reg_831) + unsigned(tmp_91_cast_fu_784_p1));
    tmp_117_fu_354_p2 <= std_logic_vector(signed(tmp_127_cast_reg_818) + signed(tmp_92_cast_fu_350_p1));
    tmp_118_fu_384_p2 <= std_logic_vector(shift_left(unsigned(tmp_117_reg_852),to_integer(unsigned('0' & ap_const_lv9_2(9-1 downto 0)))));
    tmp_119_fu_389_p2 <= std_logic_vector(unsigned(tmp_118_fu_384_p2) - unsigned(tmp_117_reg_852));
    tmp_120_fu_379_p2 <= std_logic_vector(unsigned(tmp_110_reg_812) + unsigned(tmp_94_cast_fu_375_p1));
    tmp_121_fu_401_p3 <= (tmp_120_reg_858 & ap_const_lv1_0);
    tmp_122_fu_412_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_408_p1) + unsigned(p_shl5_cast_fu_394_p3));
    tmp_123_fu_434_p2 <= std_logic_vector(unsigned(tmp_95_cast_fu_430_p1) + unsigned(tmp_119_reg_864));
    tmp_124_fu_464_p2 <= std_logic_vector(unsigned(tmp_97_cast_fu_460_p1) + unsigned(tmp_122_reg_869));
        tmp_127_cast_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_112_fu_275_p2),9));

    tmp_127_fu_531_p3 <= p_Val2_41_fu_505_p2(13 downto 13);
    tmp_129_fu_575_p3 <= p_Val2_41_reg_917(14 downto 14);
        tmp_130_cast_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_98_fu_493_p3),16));

    tmp_132_cast_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_fu_788_p2),64));
    tmp_140_cast_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_123_fu_434_p2),64));
    tmp_141_cast_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_124_reg_887),64));
        tmp_88_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_166),9));

        tmp_89_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    tmp_90_fu_737_p2 <= (newsignbit_6_reg_997 xor ap_const_lv1_1);
    tmp_91_cast_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_154),14));
    tmp_92_cast_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_178),9));
    tmp_93_fu_369_p2 <= std_logic_vector(unsigned(h_reg_142) + unsigned(tmp2_cast_fu_365_p1));
    tmp_94_cast_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_93_fu_369_p2),10));
    tmp_95_cast_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_201),9));
    tmp_96_fu_454_p2 <= std_logic_vector(signed(tmp3_cast_fu_450_p1) + signed(w_reg_154));
    tmp_97_cast_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_96_fu_454_p2),14));
    tmp_98_fu_493_p3 <= (p_Val2_40_reg_189 & ap_const_lv6_0);
    tmp_99_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_126_reg_912),8));
    tmp_cast_43_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_142),10));
    tmp_cast_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_131),8));
    tmp_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_131),64));
    tmp_s_fu_233_p3 <= (co_reg_131 & ap_const_lv4_0);
    underflow_6_fu_742_p2 <= (isneg_reg_984 and tmp_90_fu_737_p2);
    underflow_fu_661_p2 <= (signbit_reg_922 and tmp4_fu_655_p2);
    underflow_not_fu_676_p2 <= (tmp5_fu_672_p2 or p_38_i_i_reg_954);
    w_6_fu_798_p2 <= std_logic_vector(unsigned(w_reg_154) + unsigned(ap_const_lv5_1));
    weight_V_address0 <= tmp_140_cast_fu_439_p1(8 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
