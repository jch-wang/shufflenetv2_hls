-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_1x1_16p_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    shuffleunit0_2_outpu_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    shuffleunit0_2_outpu_ce0 : OUT STD_LOGIC;
    shuffleunit0_2_outpu_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ShuffleConvs_1_Downs_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_we0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_1x1_16p_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_11_fu_190_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal co_11_reg_756 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_201_fu_229_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_201_reg_761 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond1_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_203_fu_247_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_203_reg_766 : STD_LOGIC_VECTOR (10 downto 0);
    signal bias_V_addr_reg_771 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_259_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_cast_reg_779 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond2_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_206_fu_288_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_206_reg_784 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_152_cast_fu_300_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_152_cast_reg_792 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond3_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ShuffleConvs_1_Downs_reg_797 : STD_LOGIC_VECTOR (13 downto 0);
    signal h_11_fu_314_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ci_5_fu_326_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ci_5_reg_810 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_216_fu_407_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_216_reg_820 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_11_fu_412_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_11_reg_825 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal weight_V_load_reg_835 : STD_LOGIC_VECTOR (7 downto 0);
    signal shuffleunit0_2_outpu_1_reg_840 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_Val2_75_fu_428_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_75_reg_845 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_218_reg_850 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_76_fu_454_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_76_reg_855 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal signbit_reg_860 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_78_fu_488_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_78_reg_867 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_494_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_873 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_879 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_162_reg_886 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_892 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_163_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_163_reg_897 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_902 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_907 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_912 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_642_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal isneg_reg_922 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal result_V_fu_672_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_929 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_11_reg_935 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_210_fu_732_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_210_reg_942 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_156_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_156_reg_947 : STD_LOGIC_VECTOR (0 downto 0);
    signal co_reg_126 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_reg_137 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_149 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal p_Val2_s_reg_161 : STD_LOGIC_VECTOR (7 downto 0);
    signal ci_reg_173 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_232_cast_fu_309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_233_cast_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_241_cast_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_201_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_200_fu_213_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_209_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl3_cast_fu_225_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_202_fu_235_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_243_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast1_fu_221_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_204_fu_263_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_205_fu_276_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl4_cast_fu_268_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl5_cast_fu_284_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_207_fu_304_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_157_cast_fu_332_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_208_fu_336_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_209_fu_346_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_211_fu_358_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl8_cast_fu_354_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl9_cast_fu_366_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_212_fu_370_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_213_fu_376_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_214_fu_389_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl6_cast_fu_381_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl7_cast_fu_397_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_215_fu_401_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_75_fu_428_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_75_fu_428_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_158_fu_442_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_208_cast_fu_450_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_77_fu_467_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_159_fu_477_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_219_fu_480_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_160_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_221_fu_524_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_161_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_541_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i2_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_559_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_demorgan_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_83_mux_fu_630_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_67_fu_636_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_154_fu_654_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_153_fu_650_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_73_fu_658_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_155_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_11_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_710_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_717_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_1_fu_724_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_s_fu_742_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ci_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                ci_reg_173 <= ci_5_reg_810;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_294_p2))) then 
                ci_reg_173 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    co_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_253_p2 = ap_const_lv1_1))) then 
                co_reg_126 <= co_11_reg_756;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_126 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    h_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_184_p2 = ap_const_lv1_0))) then 
                h_reg_137 <= ap_const_lv5_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_294_p2 = ap_const_lv1_1))) then 
                h_reg_137 <= h_11_fu_314_p2;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_Val2_s_reg_161 <= sum_V_fu_642_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_294_p2))) then 
                p_Val2_s_reg_161 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    w_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_253_p2))) then 
                w_reg_149 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                w_reg_149 <= w_11_reg_825;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_294_p2))) then
                ShuffleConvs_1_Downs_reg_797 <= tmp_232_cast_fu_309_p1(14 - 1 downto 0);
                    tmp_152_cast_reg_792(4 downto 0) <= tmp_152_cast_fu_300_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_184_p2 = ap_const_lv1_0))) then
                bias_V_addr_reg_771 <= tmp_fu_196_p1(6 - 1 downto 0);
                    tmp_201_reg_761(12 downto 4) <= tmp_201_fu_229_p2(12 downto 4);
                    tmp_203_reg_766(10 downto 1) <= tmp_203_fu_247_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                brmerge40_demorgan_i_reg_902 <= brmerge40_demorgan_i_fu_593_p2;
                brmerge_i_i_i_reg_912 <= brmerge_i_i_i_fu_615_p2;
                p_38_i_i_reg_892 <= p_38_i_i_fu_566_p2;
                tmp_163_reg_897 <= tmp_163_fu_582_p2;
                underflow_reg_907 <= underflow_fu_610_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                carry_reg_879 <= carry_fu_508_p2;
                newsignbit_reg_873 <= p_Val2_78_fu_488_p2(7 downto 7);
                p_Val2_76_reg_855 <= p_Val2_76_fu_454_p2;
                p_Val2_78_reg_867 <= p_Val2_78_fu_488_p2;
                signbit_reg_860 <= p_Val2_76_fu_454_p2(15 downto 15);
                tmp_162_reg_886 <= p_Val2_76_fu_454_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                ci_5_reg_810 <= ci_5_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_11_reg_756 <= co_11_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                isneg_reg_922 <= p_Val2_73_fu_658_p2(8 downto 8);
                newsignbit_11_reg_935 <= result_V_fu_672_p2(7 downto 7);
                result_V_reg_929 <= result_V_fu_672_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_75_reg_845 <= p_Val2_75_fu_428_p2;
                tmp_218_reg_850 <= p_Val2_75_fu_428_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                shuffleunit0_2_outpu_1_reg_840 <= shuffleunit0_2_outpu_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_156_reg_947 <= tmp_156_fu_736_p2;
                tmp_210_reg_942 <= tmp_210_fu_732_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_253_p2))) then
                    tmp_206_reg_784(14 downto 1) <= tmp_206_fu_288_p2(14 downto 1);
                    tmp_cast_reg_779(4 downto 0) <= tmp_cast_fu_259_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond_fu_320_p2))) then
                tmp_216_reg_820 <= tmp_216_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_fu_320_p2))) then
                w_11_reg_825 <= w_11_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                weight_V_load_reg_835 <= weight_V_q0;
            end if;
        end if;
    end process;
    tmp_201_reg_761(3 downto 0) <= "0000";
    tmp_203_reg_766(0) <= '0';
    tmp_cast_reg_779(10 downto 5) <= "000000";
    tmp_206_reg_784(0) <= '0';
    tmp_152_cast_reg_792(14 downto 5) <= "0000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_184_p2, ap_CS_fsm_state3, exitcond2_fu_253_p2, ap_CS_fsm_state4, exitcond3_fu_294_p2, ap_CS_fsm_state5, exitcond_fu_320_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_184_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_253_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_294_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond_fu_320_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_531_p2 <= "1" when (tmp_162_reg_886 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_536_p2 <= "1" when (tmp_162_reg_886 = ap_const_lv2_0) else "0";
    ShuffleConvs_1_Downs_address0 <= ShuffleConvs_1_Downs_reg_797;

    ShuffleConvs_1_Downs_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ShuffleConvs_1_Downs_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_s_fu_742_p3),8));

    ShuffleConvs_1_Downs_we0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ShuffleConvs_1_Downs_we0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_184_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_184_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_184_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_184_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_771;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_593_p2 <= (newsignbit_reg_873 and deleted_ones_fu_559_p3);
    brmerge9_fu_705_p2 <= (newsignbit_11_reg_935 or isneg_not_fu_700_p2);
    brmerge_i_i2_fu_577_p2 <= (newsignbit_reg_873 or p_not_i_i_fu_571_p2);
    brmerge_i_i_fu_696_p2 <= (isneg_reg_922 xor newsignbit_11_reg_935);
    brmerge_i_i_i_fu_615_p2 <= (underflow_fu_610_p2 or overflow_fu_587_p2);
    carry_fu_508_p2 <= (tmp_219_fu_480_p3 and tmp_160_fu_502_p2);
    ci_5_fu_326_p2 <= std_logic_vector(unsigned(ci_reg_173) + unsigned(ap_const_lv6_1));
    co_11_fu_190_p2 <= std_logic_vector(unsigned(co_reg_126) + unsigned(ap_const_lv6_1));
    deleted_ones_fu_559_p3 <= 
        p_41_i_i_fu_554_p2 when (carry_reg_879(0) = '1') else 
        Range1_all_ones_fu_531_p2;
    deleted_zeros_fu_541_p3 <= 
        Range1_all_ones_fu_531_p2 when (carry_reg_879(0) = '1') else 
        Range1_all_zeros_fu_536_p2;
    exitcond1_fu_184_p2 <= "1" when (co_reg_126 = ap_const_lv6_30) else "0";
    exitcond2_fu_253_p2 <= "1" when (h_reg_137 = ap_const_lv5_11) else "0";
    exitcond3_fu_294_p2 <= "1" when (w_reg_149 = ap_const_lv5_11) else "0";
    exitcond_fu_320_p2 <= "1" when (ci_reg_173 = ap_const_lv6_30) else "0";
    h_11_fu_314_p2 <= std_logic_vector(unsigned(h_reg_137) + unsigned(ap_const_lv5_1));
    isneg_not_fu_700_p2 <= (isneg_reg_922 xor ap_const_lv1_1);
    newsignbit_fu_494_p3 <= p_Val2_78_fu_488_p2(7 downto 7);
    overflow_fu_587_p2 <= (brmerge_i_i2_fu_577_p2 and tmp_163_fu_582_p2);
    p_38_i_i_fu_566_p2 <= (carry_reg_879 and Range1_all_ones_fu_531_p2);
    p_41_i_i_fu_554_p2 <= (signbit_reg_860 and tmp_161_fu_548_p2);
    p_Val2_73_fu_658_p2 <= std_logic_vector(signed(tmp_154_fu_654_p1) + signed(tmp_153_fu_650_p1));
    p_Val2_75_fu_428_p0 <= weight_V_load_reg_835;
    p_Val2_75_fu_428_p1 <= shuffleunit0_2_outpu_1_reg_840;
    p_Val2_75_fu_428_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_75_fu_428_p0) * signed(p_Val2_75_fu_428_p1))), 16));
    p_Val2_76_fu_454_p2 <= std_logic_vector(signed(tmp_208_cast_fu_450_p1) + signed(p_Val2_75_reg_845));
    p_Val2_77_fu_467_p4 <= p_Val2_76_fu_454_p2(13 downto 6);
    p_Val2_78_fu_488_p2 <= std_logic_vector(unsigned(p_Val2_77_fu_467_p4) + unsigned(tmp_159_fu_477_p1));
    p_Val2_83_mux_fu_630_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_912(0) = '1') else 
        p_Val2_78_reg_867;
    p_Val2_s_67_fu_636_p3 <= 
        ap_const_lv8_80 when (underflow_reg_907(0) = '1') else 
        p_Val2_78_reg_867;
    p_not_i_i_fu_571_p2 <= (deleted_zeros_fu_541_p3 xor ap_const_lv1_1);
    p_result_V_fu_717_p3 <= 
        ap_const_lv8_80 when (underflow_11_fu_691_p2(0) = '1') else 
        result_V_reg_929;
    p_s_fu_742_p3 <= 
        tmp_210_reg_942 when (tmp_156_reg_947(0) = '1') else 
        ap_const_lv7_0;
    p_shl1_cast_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_202_fu_235_p3),11));
    p_shl2_cast_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_201_p3),13));
    p_shl3_cast1_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_200_fu_213_p3),11));
    p_shl3_cast_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_200_fu_213_p3),13));
    p_shl4_cast_fu_268_p3 <= (tmp_204_fu_263_p2 & ap_const_lv4_0);
    p_shl5_cast_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_205_fu_276_p3),15));
    p_shl6_cast_fu_381_p3 <= (tmp_213_fu_376_p2 & ap_const_lv4_0);
    p_shl7_cast_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_214_fu_389_p3),15));
    p_shl8_cast_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_209_fu_346_p3),11));
    p_shl9_cast_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_211_fu_358_p3),11));
    result_1_fu_724_p3 <= 
        result_V_mux_fu_710_p3 when (brmerge9_fu_705_p2(0) = '1') else 
        p_result_V_fu_717_p3;
    result_V_fu_672_p2 <= std_logic_vector(unsigned(bias_V_q0) + unsigned(p_Val2_s_reg_161));
    result_V_mux_fu_710_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_696_p2(0) = '1') else 
        result_V_reg_929;
    shuffleunit0_2_outpu_address0 <= tmp_241_cast_fu_418_p1(14 - 1 downto 0);

    shuffleunit0_2_outpu_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            shuffleunit0_2_outpu_ce0 <= ap_const_logic_1;
        else 
            shuffleunit0_2_outpu_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_V_fu_642_p3 <= 
        p_Val2_83_mux_fu_630_p3 when (underflow_not_fu_625_p2(0) = '1') else 
        p_Val2_s_67_fu_636_p3;
    tmp2_demorgan_fu_598_p2 <= (p_38_i_i_fu_566_p2 or brmerge40_demorgan_i_fu_593_p2);
    tmp2_fu_604_p2 <= (tmp2_demorgan_fu_598_p2 xor ap_const_lv1_1);
    tmp3_fu_621_p2 <= (brmerge40_demorgan_i_reg_902 or tmp_163_reg_897);
    tmp_152_cast_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_149),15));
        tmp_153_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_161),9));

        tmp_154_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    tmp_155_fu_686_p2 <= (newsignbit_11_reg_935 xor ap_const_lv1_1);
    tmp_156_fu_736_p2 <= "1" when (signed(result_1_fu_724_p3) > signed(ap_const_lv8_0)) else "0";
    tmp_157_cast_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_173),13));
    tmp_158_fu_442_p3 <= (p_Val2_s_reg_161 & ap_const_lv6_0);
    tmp_159_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_218_reg_850),8));
    tmp_160_fu_502_p2 <= (newsignbit_fu_494_p3 xor ap_const_lv1_1);
    tmp_161_fu_548_p2 <= (tmp_221_fu_524_p3 xor ap_const_lv1_1);
    tmp_163_fu_582_p2 <= (signbit_reg_860 xor ap_const_lv1_1);
    tmp_200_fu_213_p3 <= (co_reg_126 & ap_const_lv4_0);
    tmp_201_fu_229_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_209_p1) - unsigned(p_shl3_cast_fu_225_p1));
    tmp_202_fu_235_p3 <= (co_reg_126 & ap_const_lv1_0);
    tmp_203_fu_247_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_243_p1) + unsigned(p_shl3_cast1_fu_221_p1));
    tmp_204_fu_263_p2 <= std_logic_vector(unsigned(tmp_cast_fu_259_p1) + unsigned(tmp_203_reg_766));
    tmp_205_fu_276_p3 <= (tmp_204_fu_263_p2 & ap_const_lv1_0);
    tmp_206_fu_288_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_268_p3) + unsigned(p_shl5_cast_fu_284_p1));
    tmp_207_fu_304_p2 <= std_logic_vector(unsigned(tmp_206_reg_784) + unsigned(tmp_152_cast_fu_300_p1));
        tmp_208_cast_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_158_fu_442_p3),16));

    tmp_208_fu_336_p2 <= std_logic_vector(unsigned(tmp_157_cast_fu_332_p1) + unsigned(tmp_201_reg_761));
    tmp_209_fu_346_p3 <= (ci_reg_173 & ap_const_lv4_0);
    tmp_210_fu_732_p1 <= result_1_fu_724_p3(7 - 1 downto 0);
    tmp_211_fu_358_p3 <= (ci_reg_173 & ap_const_lv1_0);
    tmp_212_fu_370_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_354_p1) + unsigned(p_shl9_cast_fu_366_p1));
    tmp_213_fu_376_p2 <= std_logic_vector(unsigned(tmp_cast_reg_779) + unsigned(tmp_212_fu_370_p2));
    tmp_214_fu_389_p3 <= (tmp_213_fu_376_p2 & ap_const_lv1_0);
    tmp_215_fu_401_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_381_p3) + unsigned(p_shl7_cast_fu_397_p1));
    tmp_216_fu_407_p2 <= std_logic_vector(unsigned(tmp_152_cast_reg_792) + unsigned(tmp_215_fu_401_p2));
    tmp_219_fu_480_p3 <= p_Val2_76_fu_454_p2(13 downto 13);
    tmp_221_fu_524_p3 <= p_Val2_76_reg_855(14 downto 14);
    tmp_232_cast_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_207_fu_304_p2),64));
        tmp_233_cast_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_208_fu_336_p2),64));

    tmp_241_cast_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_216_reg_820),64));
    tmp_cast_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_137),11));
    tmp_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_126),64));
    tmp_s_fu_201_p3 <= (co_reg_126 & ap_const_lv6_0);
    underflow_11_fu_691_p2 <= (isneg_reg_922 and tmp_155_fu_686_p2);
    underflow_fu_610_p2 <= (signbit_reg_860 and tmp2_fu_604_p2);
    underflow_not_fu_625_p2 <= (tmp3_fu_621_p2 or p_38_i_i_reg_892);
    w_11_fu_412_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(w_reg_149));
    weight_V_address0 <= tmp_233_cast_fu_341_p1(12 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
