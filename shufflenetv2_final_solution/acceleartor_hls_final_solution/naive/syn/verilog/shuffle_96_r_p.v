// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shuffle_96_r_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        right_V_address0,
        right_V_ce0,
        right_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] right_V_address0;
output   right_V_ce0;
input  [7:0] right_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg right_V_ce0;
reg output_V_ce0;
reg output_V_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_240_fu_106_p1;
reg   [0:0] tmp_240_reg_321;
wire    ap_CS_fsm_state2;
wire   [7:0] co_13_fu_116_p2;
reg   [7:0] co_13_reg_328;
wire  signed [12:0] tmp_263_cast_fu_152_p1;
reg  signed [12:0] tmp_263_cast_reg_333;
wire   [0:0] exitcond3_fu_110_p2;
wire  signed [11:0] tmp_268_cast_fu_196_p1;
reg  signed [11:0] tmp_268_cast_reg_338;
wire   [2:0] h_13_fu_206_p2;
reg   [2:0] h_13_reg_346;
wire    ap_CS_fsm_state3;
wire   [12:0] tmp_243_fu_245_p2;
reg   [12:0] tmp_243_reg_351;
wire   [0:0] exitcond2_fu_200_p2;
wire   [13:0] tmp_246_fu_276_p2;
reg   [13:0] tmp_246_reg_356;
wire   [2:0] w_13_fu_288_p2;
reg   [2:0] w_13_reg_364;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_282_p2;
wire   [13:0] tmp_248_fu_312_p2;
reg   [13:0] tmp_248_reg_374;
reg   [7:0] co_reg_73;
reg   [2:0] h_reg_84;
reg   [2:0] w_reg_95;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_277_cast_fu_307_p1;
wire   [63:0] tmp_278_cast_fu_317_p1;
wire   [10:0] tmp_fu_122_p3;
wire   [8:0] tmp_s_fu_134_p3;
wire   [11:0] p_shl2_cast_fu_130_p1;
wire   [11:0] p_shl3_cast_fu_142_p1;
wire   [11:0] tmp_235_fu_146_p2;
wire   [6:0] tmp_236_fu_156_p4;
wire   [9:0] tmp_237_fu_166_p3;
wire   [7:0] tmp_238_fu_178_p3;
wire   [10:0] p_shl_cast_fu_174_p1;
wire   [10:0] p_shl1_cast_fu_186_p1;
wire   [10:0] tmp_239_fu_190_p2;
wire   [11:0] tmp_cast_fu_216_p1;
wire   [11:0] tmp_241_fu_220_p2;
wire   [9:0] tmp_242_fu_225_p1;
wire   [12:0] p_shl6_cast_fu_229_p3;
wire   [12:0] p_shl7_cast_fu_237_p3;
wire   [12:0] tmp_cast9_fu_212_p1;
wire   [12:0] tmp_244_fu_251_p2;
wire   [10:0] tmp_245_fu_256_p1;
wire   [13:0] p_shl4_cast_fu_260_p3;
wire   [13:0] p_shl5_cast_fu_268_p3;
wire   [12:0] tmp_176_cast_fu_298_p1;
wire   [12:0] tmp_247_fu_302_p2;
wire   [13:0] tmp_176_cast8_fu_294_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_200_p2 == 1'd1))) begin
        co_reg_73 <= co_13_reg_328;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_73 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_282_p2 == 1'd1))) begin
        h_reg_84 <= h_13_reg_346;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_110_p2 == 1'd0))) begin
        h_reg_84 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_200_p2))) begin
        w_reg_95 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_reg_95 <= w_13_reg_364;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_13_reg_328 <= co_13_fu_116_p2;
        tmp_240_reg_321 <= tmp_240_fu_106_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_13_reg_346 <= h_13_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_200_p2))) begin
        tmp_243_reg_351[12 : 1] <= tmp_243_fu_245_p2[12 : 1];
        tmp_246_reg_356[13 : 1] <= tmp_246_fu_276_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_282_p2) & (tmp_240_reg_321 == 1'd1))) begin
        tmp_248_reg_374 <= tmp_248_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_110_p2 == 1'd0))) begin
        tmp_263_cast_reg_333[12 : 1] <= tmp_263_cast_fu_152_p1[12 : 1];
        tmp_268_cast_reg_338[11 : 1] <= tmp_268_cast_fu_196_p1[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_13_reg_364 <= w_13_fu_288_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_110_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_110_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_240_reg_321 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        right_V_ce0 = 1'b1;
    end else begin
        right_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_110_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_200_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_282_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign co_13_fu_116_p2 = (8'd1 + co_reg_73);

assign exitcond2_fu_200_p2 = ((h_reg_84 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond3_fu_110_p2 = ((co_reg_73 == 8'd192) ? 1'b1 : 1'b0);

assign exitcond_fu_282_p2 = ((w_reg_95 == 3'd6) ? 1'b1 : 1'b0);

assign h_13_fu_206_p2 = (h_reg_84 + 3'd1);

assign output_V_address0 = tmp_278_cast_fu_317_p1;

assign output_V_d0 = right_V_q0;

assign p_shl1_cast_fu_186_p1 = tmp_238_fu_178_p3;

assign p_shl2_cast_fu_130_p1 = tmp_fu_122_p3;

assign p_shl3_cast_fu_142_p1 = tmp_s_fu_134_p3;

assign p_shl4_cast_fu_260_p3 = {{tmp_245_fu_256_p1}, {3'd0}};

assign p_shl5_cast_fu_268_p3 = {{tmp_244_fu_251_p2}, {1'd0}};

assign p_shl6_cast_fu_229_p3 = {{tmp_242_fu_225_p1}, {3'd0}};

assign p_shl7_cast_fu_237_p3 = {{tmp_241_fu_220_p2}, {1'd0}};

assign p_shl_cast_fu_174_p1 = tmp_237_fu_166_p3;

assign right_V_address0 = tmp_277_cast_fu_307_p1;

assign tmp_176_cast8_fu_294_p1 = w_reg_95;

assign tmp_176_cast_fu_298_p1 = w_reg_95;

assign tmp_235_fu_146_p2 = (p_shl2_cast_fu_130_p1 - p_shl3_cast_fu_142_p1);

assign tmp_236_fu_156_p4 = {{co_reg_73[7:1]}};

assign tmp_237_fu_166_p3 = {{tmp_236_fu_156_p4}, {3'd0}};

assign tmp_238_fu_178_p3 = {{tmp_236_fu_156_p4}, {1'd0}};

assign tmp_239_fu_190_p2 = (p_shl_cast_fu_174_p1 - p_shl1_cast_fu_186_p1);

assign tmp_240_fu_106_p1 = co_reg_73[0:0];

assign tmp_241_fu_220_p2 = ($signed(tmp_cast_fu_216_p1) + $signed(tmp_268_cast_reg_338));

assign tmp_242_fu_225_p1 = tmp_241_fu_220_p2[9:0];

assign tmp_243_fu_245_p2 = (p_shl6_cast_fu_229_p3 - p_shl7_cast_fu_237_p3);

assign tmp_244_fu_251_p2 = ($signed(tmp_cast9_fu_212_p1) + $signed(tmp_263_cast_reg_333));

assign tmp_245_fu_256_p1 = tmp_244_fu_251_p2[10:0];

assign tmp_246_fu_276_p2 = (p_shl4_cast_fu_260_p3 - p_shl5_cast_fu_268_p3);

assign tmp_247_fu_302_p2 = (tmp_243_reg_351 + tmp_176_cast_fu_298_p1);

assign tmp_248_fu_312_p2 = (tmp_246_reg_356 + tmp_176_cast8_fu_294_p1);

assign tmp_263_cast_fu_152_p1 = $signed(tmp_235_fu_146_p2);

assign tmp_268_cast_fu_196_p1 = $signed(tmp_239_fu_190_p2);

assign tmp_277_cast_fu_307_p1 = tmp_247_fu_302_p2;

assign tmp_278_cast_fu_317_p1 = tmp_248_reg_374;

assign tmp_cast9_fu_212_p1 = h_reg_84;

assign tmp_cast_fu_216_p1 = h_reg_84;

assign tmp_fu_122_p3 = {{co_reg_73}, {3'd0}};

assign tmp_s_fu_134_p3 = {{co_reg_73}, {1'd0}};

assign w_13_fu_288_p2 = (w_reg_95 + 3'd1);

always @ (posedge ap_clk) begin
    tmp_263_cast_reg_333[0] <= 1'b0;
    tmp_268_cast_reg_338[0] <= 1'b0;
    tmp_243_reg_351[0] <= 1'b0;
    tmp_246_reg_356[0] <= 1'b0;
end

endmodule //shuffle_96_r_p
