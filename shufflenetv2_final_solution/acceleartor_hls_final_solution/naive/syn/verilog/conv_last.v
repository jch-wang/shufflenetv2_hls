// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_last (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        m_axi_weight_V_AWVALID,
        m_axi_weight_V_AWREADY,
        m_axi_weight_V_AWADDR,
        m_axi_weight_V_AWID,
        m_axi_weight_V_AWLEN,
        m_axi_weight_V_AWSIZE,
        m_axi_weight_V_AWBURST,
        m_axi_weight_V_AWLOCK,
        m_axi_weight_V_AWCACHE,
        m_axi_weight_V_AWPROT,
        m_axi_weight_V_AWQOS,
        m_axi_weight_V_AWREGION,
        m_axi_weight_V_AWUSER,
        m_axi_weight_V_WVALID,
        m_axi_weight_V_WREADY,
        m_axi_weight_V_WDATA,
        m_axi_weight_V_WSTRB,
        m_axi_weight_V_WLAST,
        m_axi_weight_V_WID,
        m_axi_weight_V_WUSER,
        m_axi_weight_V_ARVALID,
        m_axi_weight_V_ARREADY,
        m_axi_weight_V_ARADDR,
        m_axi_weight_V_ARID,
        m_axi_weight_V_ARLEN,
        m_axi_weight_V_ARSIZE,
        m_axi_weight_V_ARBURST,
        m_axi_weight_V_ARLOCK,
        m_axi_weight_V_ARCACHE,
        m_axi_weight_V_ARPROT,
        m_axi_weight_V_ARQOS,
        m_axi_weight_V_ARREGION,
        m_axi_weight_V_ARUSER,
        m_axi_weight_V_RVALID,
        m_axi_weight_V_RREADY,
        m_axi_weight_V_RDATA,
        m_axi_weight_V_RLAST,
        m_axi_weight_V_RID,
        m_axi_weight_V_RUSER,
        m_axi_weight_V_RRESP,
        m_axi_weight_V_BVALID,
        m_axi_weight_V_BREADY,
        m_axi_weight_V_BRESP,
        m_axi_weight_V_BID,
        m_axi_weight_V_BUSER,
        conv_last_weight_V9,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_state9 = 20'd256;
parameter    ap_ST_fsm_state10 = 20'd512;
parameter    ap_ST_fsm_state11 = 20'd1024;
parameter    ap_ST_fsm_state12 = 20'd2048;
parameter    ap_ST_fsm_state13 = 20'd4096;
parameter    ap_ST_fsm_state14 = 20'd8192;
parameter    ap_ST_fsm_state15 = 20'd16384;
parameter    ap_ST_fsm_state16 = 20'd32768;
parameter    ap_ST_fsm_state17 = 20'd65536;
parameter    ap_ST_fsm_state18 = 20'd131072;
parameter    ap_ST_fsm_state19 = 20'd262144;
parameter    ap_ST_fsm_state20 = 20'd524288;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_V_address0;
output   input_V_ce0;
input  [7:0] input_V_q0;
output   m_axi_weight_V_AWVALID;
input   m_axi_weight_V_AWREADY;
output  [31:0] m_axi_weight_V_AWADDR;
output  [0:0] m_axi_weight_V_AWID;
output  [31:0] m_axi_weight_V_AWLEN;
output  [2:0] m_axi_weight_V_AWSIZE;
output  [1:0] m_axi_weight_V_AWBURST;
output  [1:0] m_axi_weight_V_AWLOCK;
output  [3:0] m_axi_weight_V_AWCACHE;
output  [2:0] m_axi_weight_V_AWPROT;
output  [3:0] m_axi_weight_V_AWQOS;
output  [3:0] m_axi_weight_V_AWREGION;
output  [0:0] m_axi_weight_V_AWUSER;
output   m_axi_weight_V_WVALID;
input   m_axi_weight_V_WREADY;
output  [7:0] m_axi_weight_V_WDATA;
output  [0:0] m_axi_weight_V_WSTRB;
output   m_axi_weight_V_WLAST;
output  [0:0] m_axi_weight_V_WID;
output  [0:0] m_axi_weight_V_WUSER;
output   m_axi_weight_V_ARVALID;
input   m_axi_weight_V_ARREADY;
output  [31:0] m_axi_weight_V_ARADDR;
output  [0:0] m_axi_weight_V_ARID;
output  [31:0] m_axi_weight_V_ARLEN;
output  [2:0] m_axi_weight_V_ARSIZE;
output  [1:0] m_axi_weight_V_ARBURST;
output  [1:0] m_axi_weight_V_ARLOCK;
output  [3:0] m_axi_weight_V_ARCACHE;
output  [2:0] m_axi_weight_V_ARPROT;
output  [3:0] m_axi_weight_V_ARQOS;
output  [3:0] m_axi_weight_V_ARREGION;
output  [0:0] m_axi_weight_V_ARUSER;
input   m_axi_weight_V_RVALID;
output   m_axi_weight_V_RREADY;
input  [7:0] m_axi_weight_V_RDATA;
input   m_axi_weight_V_RLAST;
input  [0:0] m_axi_weight_V_RID;
input  [0:0] m_axi_weight_V_RUSER;
input  [1:0] m_axi_weight_V_RRESP;
input   m_axi_weight_V_BVALID;
output   m_axi_weight_V_BREADY;
input  [1:0] m_axi_weight_V_BRESP;
input  [0:0] m_axi_weight_V_BID;
input  [0:0] m_axi_weight_V_BUSER;
input  [31:0] conv_last_weight_V9;
output  [8:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg m_axi_weight_V_ARVALID;
reg m_axi_weight_V_RREADY;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;

(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    weight_V_blk_n_AR;
wire    ap_CS_fsm_state5;
reg    weight_V_blk_n_R;
wire    ap_CS_fsm_state13;
wire  signed [32:0] sext_cast_fu_223_p1;
reg  signed [32:0] sext_cast_reg_745;
wire   [9:0] co_23_fu_233_p2;
reg   [9:0] co_23_reg_753;
wire    ap_CS_fsm_state2;
wire   [18:0] tmp_339_fu_268_p2;
reg   [18:0] tmp_339_reg_758;
wire   [0:0] exitcond8_fu_227_p2;
wire   [12:0] tmp_422_cast_fu_282_p1;
reg   [12:0] tmp_422_cast_reg_763;
reg   [8:0] bias_V_addr_reg_768;
wire   [2:0] h_22_fu_292_p2;
reg   [2:0] h_22_reg_776;
wire    ap_CS_fsm_state3;
wire   [10:0] tmp_cast1_fu_298_p1;
reg   [10:0] tmp_cast1_reg_781;
wire   [0:0] exitcond9_fu_286_p2;
wire   [14:0] tmp_425_cast_fu_311_p3;
reg   [14:0] tmp_425_cast_reg_786;
wire   [2:0] w_22_fu_325_p2;
reg   [2:0] w_22_reg_794;
wire    ap_CS_fsm_state4;
reg   [12:0] output_V_addr_reg_799;
wire   [0:0] exitcond1_fu_319_p2;
reg   [31:0] weight_V_addr_reg_804;
wire   [12:0] tmp_193_cast1_fu_363_p1;
reg   [12:0] tmp_193_cast1_reg_810;
wire    ap_CS_fsm_state11;
wire   [7:0] ci_8_fu_373_p2;
reg   [7:0] ci_8_reg_818;
wire    ap_CS_fsm_state12;
wire   [0:0] exitcond_fu_367_p2;
reg   [7:0] weight_V_addr_read_reg_828;
reg   [7:0] input_V_load_reg_833;
wire   [15:0] p_Val2_96_fu_420_p2;
reg   [15:0] p_Val2_96_reg_838;
wire    ap_CS_fsm_state14;
reg   [0:0] tmp_293_reg_843;
wire   [15:0] p_Val2_97_fu_446_p2;
reg   [15:0] p_Val2_97_reg_848;
wire    ap_CS_fsm_state15;
reg   [0:0] signbit_reg_853;
wire   [7:0] p_Val2_99_fu_480_p2;
reg   [7:0] p_Val2_99_reg_860;
wire   [0:0] newsignbit_fu_486_p3;
reg   [0:0] newsignbit_reg_866;
wire   [0:0] carry_fu_500_p2;
reg   [0:0] carry_reg_872;
reg   [1:0] tmp_182_reg_879;
wire   [0:0] p_38_i_i_fu_558_p2;
reg   [0:0] p_38_i_i_reg_885;
wire    ap_CS_fsm_state16;
wire   [0:0] tmp_203_fu_574_p2;
reg   [0:0] tmp_203_reg_890;
wire   [0:0] brmerge40_demorgan_i_fu_585_p2;
reg   [0:0] brmerge40_demorgan_i_reg_895;
wire   [0:0] underflow_fu_602_p2;
reg   [0:0] underflow_reg_900;
wire   [0:0] brmerge_i_i_i_fu_607_p2;
reg   [0:0] brmerge_i_i_i_reg_905;
wire   [7:0] sum_V_fu_634_p3;
wire    ap_CS_fsm_state17;
reg   [0:0] isneg_reg_915;
wire    ap_CS_fsm_state18;
wire   [7:0] result_V_fu_664_p2;
reg   [7:0] result_V_reg_922;
reg   [0:0] newsignbit_14_reg_928;
wire   [6:0] tmp_291_fu_724_p1;
reg   [6:0] tmp_291_reg_935;
wire    ap_CS_fsm_state19;
wire   [0:0] tmp_197_fu_728_p2;
reg   [0:0] tmp_197_reg_940;
reg   [9:0] co_reg_166;
reg   [2:0] h_reg_177;
reg   [2:0] w_reg_188;
wire    ap_CS_fsm_state20;
reg   [7:0] p_Val2_s_reg_200;
reg   [7:0] ci_reg_212;
wire   [63:0] tmp_fu_239_p1;
wire   [63:0] tmp_426_cast_fu_340_p1;
wire   [63:0] tmp_432_cast_fu_409_p1;
wire  signed [63:0] tmp_288_fu_353_p1;
reg    ap_reg_ioackin_m_axi_weight_V_ARREADY;
reg    ap_sig_ioackin_m_axi_weight_V_ARREADY;
wire   [17:0] tmp_s_fu_244_p3;
wire   [15:0] tmp_338_fu_256_p3;
wire   [18:0] p_shl_cast_fu_252_p1;
wire   [18:0] p_shl1_cast_fu_264_p1;
wire   [11:0] tmp_340_fu_274_p3;
wire   [12:0] tmp_cast_fu_302_p1;
wire   [12:0] tmp_341_fu_306_p2;
wire   [14:0] tmp_193_cast_fu_331_p1;
wire   [14:0] tmp_342_fu_335_p2;
wire  signed [32:0] tmp_286_fu_345_p1;
wire   [32:0] tmp_287_fu_348_p2;
wire   [9:0] tmp_343_fu_379_p3;
wire   [10:0] tmp_428_cast_fu_387_p1;
wire   [10:0] tmp_344_fu_391_p2;
wire   [12:0] tmp_431_cast_fu_396_p3;
wire   [12:0] tmp_345_fu_404_p2;
wire  signed [7:0] p_Val2_96_fu_420_p0;
wire  signed [7:0] p_Val2_96_fu_420_p1;
wire   [13:0] tmp_199_fu_434_p3;
wire  signed [15:0] tmp_289_cast_fu_442_p1;
wire   [7:0] p_Val2_98_fu_459_p4;
wire   [7:0] tmp_200_fu_469_p1;
wire   [0:0] tmp_294_fu_472_p3;
wire   [0:0] tmp_201_fu_494_p2;
wire   [0:0] Range1_all_ones_fu_523_p2;
wire   [0:0] Range1_all_zeros_fu_528_p2;
wire   [0:0] tmp_296_fu_516_p3;
wire   [0:0] tmp_202_fu_540_p2;
wire   [0:0] p_41_i_i_fu_546_p2;
wire   [0:0] deleted_zeros_fu_533_p3;
wire   [0:0] p_not_i_i_fu_563_p2;
wire   [0:0] brmerge_i_i5_fu_569_p2;
wire   [0:0] deleted_ones_fu_551_p3;
wire   [0:0] tmp2_demorgan_fu_590_p2;
wire   [0:0] tmp2_fu_596_p2;
wire   [0:0] overflow_fu_579_p2;
wire   [0:0] tmp3_fu_613_p2;
wire   [0:0] underflow_not_fu_617_p2;
wire   [7:0] p_Val2_104_mux_fu_622_p3;
wire   [7:0] p_Val2_s_95_fu_628_p3;
wire  signed [8:0] tmp_195_fu_646_p1;
wire  signed [8:0] tmp_194_fu_642_p1;
wire   [8:0] p_Val2_94_fu_650_p2;
wire   [0:0] tmp_196_fu_678_p2;
wire   [0:0] isneg_not_fu_692_p2;
wire   [0:0] brmerge_i_i_fu_688_p2;
wire   [0:0] underflow_14_fu_683_p2;
wire   [0:0] brmerge9_fu_697_p2;
wire   [7:0] result_V_mux_fu_702_p3;
wire   [7:0] p_result_V_fu_709_p3;
wire   [7:0] result_1_fu_716_p3;
wire   [6:0] p_s_fu_734_p3;
reg   [19:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 20'd1;
#0 ap_reg_ioackin_m_axi_weight_V_ARREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_weight_V_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            if ((ap_sig_ioackin_m_axi_weight_V_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_weight_V_ARREADY <= 1'b0;
            end else if ((1'b1 == m_axi_weight_V_ARREADY)) begin
                ap_reg_ioackin_m_axi_weight_V_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ci_reg_212 <= ci_8_reg_818;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        ci_reg_212 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_286_p2 == 1'd1))) begin
        co_reg_166 <= co_23_reg_753;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_166 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_319_p2 == 1'd1))) begin
        h_reg_177 <= h_22_reg_776;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond8_fu_227_p2))) begin
        h_reg_177 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        p_Val2_s_reg_200 <= sum_V_fu_634_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_s_reg_200 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond9_fu_286_p2))) begin
        w_reg_188 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        w_reg_188 <= w_22_reg_794;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond8_fu_227_p2))) begin
        bias_V_addr_reg_768 <= tmp_fu_239_p1;
        tmp_339_reg_758[18 : 6] <= tmp_339_fu_268_p2[18 : 6];
        tmp_422_cast_reg_763[11 : 2] <= tmp_422_cast_fu_282_p1[11 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        brmerge40_demorgan_i_reg_895 <= brmerge40_demorgan_i_fu_585_p2;
        brmerge_i_i_i_reg_905 <= brmerge_i_i_i_fu_607_p2;
        p_38_i_i_reg_885 <= p_38_i_i_fu_558_p2;
        tmp_203_reg_890 <= tmp_203_fu_574_p2;
        underflow_reg_900 <= underflow_fu_602_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        carry_reg_872 <= carry_fu_500_p2;
        newsignbit_reg_866 <= p_Val2_99_fu_480_p2[32'd7];
        p_Val2_97_reg_848 <= p_Val2_97_fu_446_p2;
        p_Val2_99_reg_860 <= p_Val2_99_fu_480_p2;
        signbit_reg_853 <= p_Val2_97_fu_446_p2[32'd15];
        tmp_182_reg_879 <= {{p_Val2_97_fu_446_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ci_8_reg_818 <= ci_8_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_23_reg_753 <= co_23_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_22_reg_776 <= h_22_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (m_axi_weight_V_RVALID == 1'b1))) begin
        input_V_load_reg_833 <= input_V_q0;
        weight_V_addr_read_reg_828 <= m_axi_weight_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        isneg_reg_915 <= p_Val2_94_fu_650_p2[32'd8];
        newsignbit_14_reg_928 <= result_V_fu_664_p2[32'd7];
        result_V_reg_922 <= result_V_fu_664_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_319_p2))) begin
        output_V_addr_reg_799 <= tmp_426_cast_fu_340_p1;
        weight_V_addr_reg_804 <= tmp_288_fu_353_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        p_Val2_96_reg_838 <= p_Val2_96_fu_420_p2;
        tmp_293_reg_843 <= p_Val2_96_fu_420_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sext_cast_reg_745 <= sext_cast_fu_223_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_193_cast1_reg_810[2 : 0] <= tmp_193_cast1_fu_363_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_197_reg_940 <= tmp_197_fu_728_p2;
        tmp_291_reg_935 <= tmp_291_fu_724_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond9_fu_286_p2))) begin
        tmp_425_cast_reg_786[14 : 2] <= tmp_425_cast_fu_311_p3[14 : 2];
        tmp_cast1_reg_781[2 : 0] <= tmp_cast1_fu_298_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_22_reg_794 <= w_22_fu_325_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_227_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_227_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_weight_V_ARREADY)) begin
        ap_sig_ioackin_m_axi_weight_V_ARREADY = m_axi_weight_V_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_weight_V_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_reg_ioackin_m_axi_weight_V_ARREADY))) begin
        m_axi_weight_V_ARVALID = 1'b1;
    end else begin
        m_axi_weight_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (m_axi_weight_V_RVALID == 1'b1))) begin
        m_axi_weight_V_RREADY = 1'b1;
    end else begin
        m_axi_weight_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weight_V_blk_n_AR = m_axi_weight_V_ARREADY;
    end else begin
        weight_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        weight_V_blk_n_R = m_axi_weight_V_RVALID;
    end else begin
        weight_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_227_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_286_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_319_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (ap_sig_ioackin_m_axi_weight_V_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_367_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (m_axi_weight_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_523_p2 = ((tmp_182_reg_879 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_528_p2 = ((tmp_182_reg_879 == 2'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign bias_V_address0 = bias_V_addr_reg_768;

assign brmerge40_demorgan_i_fu_585_p2 = (newsignbit_reg_866 & deleted_ones_fu_551_p3);

assign brmerge9_fu_697_p2 = (newsignbit_14_reg_928 | isneg_not_fu_692_p2);

assign brmerge_i_i5_fu_569_p2 = (newsignbit_reg_866 | p_not_i_i_fu_563_p2);

assign brmerge_i_i_fu_688_p2 = (isneg_reg_915 ^ newsignbit_14_reg_928);

assign brmerge_i_i_i_fu_607_p2 = (underflow_fu_602_p2 | overflow_fu_579_p2);

assign carry_fu_500_p2 = (tmp_294_fu_472_p3 & tmp_201_fu_494_p2);

assign ci_8_fu_373_p2 = (ci_reg_212 + 8'd1);

assign co_23_fu_233_p2 = (co_reg_166 + 10'd1);

assign deleted_ones_fu_551_p3 = ((carry_reg_872[0:0] === 1'b1) ? p_41_i_i_fu_546_p2 : Range1_all_ones_fu_523_p2);

assign deleted_zeros_fu_533_p3 = ((carry_reg_872[0:0] === 1'b1) ? Range1_all_ones_fu_523_p2 : Range1_all_zeros_fu_528_p2);

assign exitcond1_fu_319_p2 = ((w_reg_188 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond8_fu_227_p2 = ((co_reg_166 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond9_fu_286_p2 = ((h_reg_177 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_367_p2 = ((ci_reg_212 == 8'd192) ? 1'b1 : 1'b0);

assign h_22_fu_292_p2 = (h_reg_177 + 3'd1);

assign input_V_address0 = tmp_432_cast_fu_409_p1;

assign isneg_not_fu_692_p2 = (isneg_reg_915 ^ 1'd1);

assign m_axi_weight_V_ARADDR = weight_V_addr_reg_804;

assign m_axi_weight_V_ARBURST = 2'd0;

assign m_axi_weight_V_ARCACHE = 4'd0;

assign m_axi_weight_V_ARID = 1'd0;

assign m_axi_weight_V_ARLEN = 32'd192;

assign m_axi_weight_V_ARLOCK = 2'd0;

assign m_axi_weight_V_ARPROT = 3'd0;

assign m_axi_weight_V_ARQOS = 4'd0;

assign m_axi_weight_V_ARREGION = 4'd0;

assign m_axi_weight_V_ARSIZE = 3'd0;

assign m_axi_weight_V_ARUSER = 1'd0;

assign m_axi_weight_V_AWADDR = 32'd0;

assign m_axi_weight_V_AWBURST = 2'd0;

assign m_axi_weight_V_AWCACHE = 4'd0;

assign m_axi_weight_V_AWID = 1'd0;

assign m_axi_weight_V_AWLEN = 32'd0;

assign m_axi_weight_V_AWLOCK = 2'd0;

assign m_axi_weight_V_AWPROT = 3'd0;

assign m_axi_weight_V_AWQOS = 4'd0;

assign m_axi_weight_V_AWREGION = 4'd0;

assign m_axi_weight_V_AWSIZE = 3'd0;

assign m_axi_weight_V_AWUSER = 1'd0;

assign m_axi_weight_V_AWVALID = 1'b0;

assign m_axi_weight_V_BREADY = 1'b0;

assign m_axi_weight_V_WDATA = 8'd0;

assign m_axi_weight_V_WID = 1'd0;

assign m_axi_weight_V_WLAST = 1'b0;

assign m_axi_weight_V_WSTRB = 1'd0;

assign m_axi_weight_V_WUSER = 1'd0;

assign m_axi_weight_V_WVALID = 1'b0;

assign newsignbit_fu_486_p3 = p_Val2_99_fu_480_p2[32'd7];

assign output_V_address0 = output_V_addr_reg_799;

assign output_V_d0 = p_s_fu_734_p3;

assign overflow_fu_579_p2 = (brmerge_i_i5_fu_569_p2 & tmp_203_fu_574_p2);

assign p_38_i_i_fu_558_p2 = (carry_reg_872 & Range1_all_ones_fu_523_p2);

assign p_41_i_i_fu_546_p2 = (signbit_reg_853 & tmp_202_fu_540_p2);

assign p_Val2_104_mux_fu_622_p3 = ((brmerge_i_i_i_reg_905[0:0] === 1'b1) ? 8'd127 : p_Val2_99_reg_860);

assign p_Val2_94_fu_650_p2 = ($signed(tmp_195_fu_646_p1) + $signed(tmp_194_fu_642_p1));

assign p_Val2_96_fu_420_p0 = weight_V_addr_read_reg_828;

assign p_Val2_96_fu_420_p1 = input_V_load_reg_833;

assign p_Val2_96_fu_420_p2 = ($signed(p_Val2_96_fu_420_p0) * $signed(p_Val2_96_fu_420_p1));

assign p_Val2_97_fu_446_p2 = ($signed(tmp_289_cast_fu_442_p1) + $signed(p_Val2_96_reg_838));

assign p_Val2_98_fu_459_p4 = {{p_Val2_97_fu_446_p2[13:6]}};

assign p_Val2_99_fu_480_p2 = (p_Val2_98_fu_459_p4 + tmp_200_fu_469_p1);

assign p_Val2_s_95_fu_628_p3 = ((underflow_reg_900[0:0] === 1'b1) ? 8'd128 : p_Val2_99_reg_860);

assign p_not_i_i_fu_563_p2 = (deleted_zeros_fu_533_p3 ^ 1'd1);

assign p_result_V_fu_709_p3 = ((underflow_14_fu_683_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_922);

assign p_s_fu_734_p3 = ((tmp_197_reg_940[0:0] === 1'b1) ? tmp_291_reg_935 : 7'd0);

assign p_shl1_cast_fu_264_p1 = tmp_338_fu_256_p3;

assign p_shl_cast_fu_252_p1 = tmp_s_fu_244_p3;

assign result_1_fu_716_p3 = ((brmerge9_fu_697_p2[0:0] === 1'b1) ? result_V_mux_fu_702_p3 : p_result_V_fu_709_p3);

assign result_V_fu_664_p2 = (bias_V_q0 + p_Val2_s_reg_200);

assign result_V_mux_fu_702_p3 = ((brmerge_i_i_fu_688_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_922);

assign sext_cast_fu_223_p1 = $signed(conv_last_weight_V9);

assign sum_V_fu_634_p3 = ((underflow_not_fu_617_p2[0:0] === 1'b1) ? p_Val2_104_mux_fu_622_p3 : p_Val2_s_95_fu_628_p3);

assign tmp2_demorgan_fu_590_p2 = (p_38_i_i_fu_558_p2 | brmerge40_demorgan_i_fu_585_p2);

assign tmp2_fu_596_p2 = (tmp2_demorgan_fu_590_p2 ^ 1'd1);

assign tmp3_fu_613_p2 = (brmerge40_demorgan_i_reg_895 | tmp_203_reg_890);

assign tmp_193_cast1_fu_363_p1 = w_reg_188;

assign tmp_193_cast_fu_331_p1 = w_reg_188;

assign tmp_194_fu_642_p1 = $signed(p_Val2_s_reg_200);

assign tmp_195_fu_646_p1 = $signed(bias_V_q0);

assign tmp_196_fu_678_p2 = (newsignbit_14_reg_928 ^ 1'd1);

assign tmp_197_fu_728_p2 = (($signed(result_1_fu_716_p3) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign tmp_199_fu_434_p3 = {{p_Val2_s_reg_200}, {6'd0}};

assign tmp_200_fu_469_p1 = tmp_293_reg_843;

assign tmp_201_fu_494_p2 = (newsignbit_fu_486_p3 ^ 1'd1);

assign tmp_202_fu_540_p2 = (tmp_296_fu_516_p3 ^ 1'd1);

assign tmp_203_fu_574_p2 = (signbit_reg_853 ^ 1'd1);

assign tmp_286_fu_345_p1 = $signed(tmp_339_reg_758);

assign tmp_287_fu_348_p2 = ($signed(tmp_286_fu_345_p1) + $signed(sext_cast_reg_745));

assign tmp_288_fu_353_p1 = $signed(tmp_287_fu_348_p2);

assign tmp_289_cast_fu_442_p1 = $signed(tmp_199_fu_434_p3);

assign tmp_291_fu_724_p1 = result_1_fu_716_p3[6:0];

assign tmp_294_fu_472_p3 = p_Val2_97_fu_446_p2[32'd13];

assign tmp_296_fu_516_p3 = p_Val2_97_reg_848[32'd14];

assign tmp_338_fu_256_p3 = {{co_reg_166}, {6'd0}};

assign tmp_339_fu_268_p2 = (p_shl_cast_fu_252_p1 - p_shl1_cast_fu_264_p1);

assign tmp_340_fu_274_p3 = {{co_reg_166}, {2'd0}};

assign tmp_341_fu_306_p2 = (tmp_cast_fu_302_p1 + tmp_422_cast_reg_763);

assign tmp_342_fu_335_p2 = (tmp_425_cast_reg_786 + tmp_193_cast_fu_331_p1);

assign tmp_343_fu_379_p3 = {{ci_reg_212}, {2'd0}};

assign tmp_344_fu_391_p2 = (tmp_cast1_reg_781 + tmp_428_cast_fu_387_p1);

assign tmp_345_fu_404_p2 = (tmp_193_cast1_reg_810 + tmp_431_cast_fu_396_p3);

assign tmp_422_cast_fu_282_p1 = tmp_340_fu_274_p3;

assign tmp_425_cast_fu_311_p3 = {{tmp_341_fu_306_p2}, {2'd0}};

assign tmp_426_cast_fu_340_p1 = tmp_342_fu_335_p2;

assign tmp_428_cast_fu_387_p1 = tmp_343_fu_379_p3;

assign tmp_431_cast_fu_396_p3 = {{tmp_344_fu_391_p2}, {2'd0}};

assign tmp_432_cast_fu_409_p1 = tmp_345_fu_404_p2;

assign tmp_cast1_fu_298_p1 = h_reg_177;

assign tmp_cast_fu_302_p1 = h_reg_177;

assign tmp_fu_239_p1 = co_reg_166;

assign tmp_s_fu_244_p3 = {{co_reg_166}, {8'd0}};

assign underflow_14_fu_683_p2 = (isneg_reg_915 & tmp_196_fu_678_p2);

assign underflow_fu_602_p2 = (signbit_reg_853 & tmp2_fu_596_p2);

assign underflow_not_fu_617_p2 = (tmp3_fu_613_p2 | p_38_i_i_reg_885);

assign w_22_fu_325_p2 = (w_reg_188 + 3'd1);

always @ (posedge ap_clk) begin
    tmp_339_reg_758[5:0] <= 6'b000000;
    tmp_422_cast_reg_763[1:0] <= 2'b00;
    tmp_422_cast_reg_763[12] <= 1'b0;
    tmp_cast1_reg_781[10:3] <= 8'b00000000;
    tmp_425_cast_reg_786[1:0] <= 2'b00;
    tmp_193_cast1_reg_810[12:3] <= 10'b0000000000;
end

endmodule //conv_last
