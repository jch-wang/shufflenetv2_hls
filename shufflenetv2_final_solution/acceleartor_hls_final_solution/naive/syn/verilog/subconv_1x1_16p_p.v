// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_1x1_16p_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        shuffleunit0_2_outpu_address0,
        shuffleunit0_2_outpu_ce0,
        shuffleunit0_2_outpu_q0,
        ShuffleConvs_1_Downs_address0,
        ShuffleConvs_1_Downs_ce0,
        ShuffleConvs_1_Downs_we0,
        ShuffleConvs_1_Downs_d0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [5:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [13:0] shuffleunit0_2_outpu_address0;
output   shuffleunit0_2_outpu_ce0;
input  [7:0] shuffleunit0_2_outpu_q0;
output  [13:0] ShuffleConvs_1_Downs_address0;
output   ShuffleConvs_1_Downs_ce0;
output   ShuffleConvs_1_Downs_we0;
output  [7:0] ShuffleConvs_1_Downs_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg shuffleunit0_2_outpu_ce0;
reg ShuffleConvs_1_Downs_ce0;
reg ShuffleConvs_1_Downs_we0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] co_11_fu_190_p2;
reg   [5:0] co_11_reg_756;
wire    ap_CS_fsm_state2;
wire   [12:0] tmp_201_fu_229_p2;
reg   [12:0] tmp_201_reg_761;
wire   [0:0] exitcond1_fu_184_p2;
wire   [10:0] tmp_203_fu_247_p2;
reg   [10:0] tmp_203_reg_766;
reg   [5:0] bias_V_addr_reg_771;
wire   [10:0] tmp_cast_fu_259_p1;
reg   [10:0] tmp_cast_reg_779;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond2_fu_253_p2;
wire   [14:0] tmp_206_fu_288_p2;
reg   [14:0] tmp_206_reg_784;
wire   [14:0] tmp_152_cast_fu_300_p1;
reg   [14:0] tmp_152_cast_reg_792;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond3_fu_294_p2;
reg   [13:0] ShuffleConvs_1_Downs_reg_797;
wire   [4:0] h_11_fu_314_p2;
wire   [5:0] ci_5_fu_326_p2;
reg   [5:0] ci_5_reg_810;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_fu_320_p2;
wire   [14:0] tmp_216_fu_407_p2;
reg   [14:0] tmp_216_reg_820;
wire   [4:0] w_11_fu_412_p2;
reg   [4:0] w_11_reg_825;
wire    ap_CS_fsm_state6;
reg   [7:0] weight_V_load_reg_835;
reg   [7:0] shuffleunit0_2_outpu_1_reg_840;
wire    ap_CS_fsm_state7;
wire   [15:0] p_Val2_75_fu_428_p2;
reg   [15:0] p_Val2_75_reg_845;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_218_reg_850;
wire   [15:0] p_Val2_76_fu_454_p2;
reg   [15:0] p_Val2_76_reg_855;
wire    ap_CS_fsm_state9;
reg   [0:0] signbit_reg_860;
wire   [7:0] p_Val2_78_fu_488_p2;
reg   [7:0] p_Val2_78_reg_867;
wire   [0:0] newsignbit_fu_494_p3;
reg   [0:0] newsignbit_reg_873;
wire   [0:0] carry_fu_508_p2;
reg   [0:0] carry_reg_879;
reg   [1:0] tmp_162_reg_886;
wire   [0:0] p_38_i_i_fu_566_p2;
reg   [0:0] p_38_i_i_reg_892;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_163_fu_582_p2;
reg   [0:0] tmp_163_reg_897;
wire   [0:0] brmerge40_demorgan_i_fu_593_p2;
reg   [0:0] brmerge40_demorgan_i_reg_902;
wire   [0:0] underflow_fu_610_p2;
reg   [0:0] underflow_reg_907;
wire   [0:0] brmerge_i_i_i_fu_615_p2;
reg   [0:0] brmerge_i_i_i_reg_912;
wire   [7:0] sum_V_fu_642_p3;
wire    ap_CS_fsm_state11;
reg   [0:0] isneg_reg_922;
wire    ap_CS_fsm_state12;
wire   [7:0] result_V_fu_672_p2;
reg   [7:0] result_V_reg_929;
reg   [0:0] newsignbit_11_reg_935;
wire   [6:0] tmp_210_fu_732_p1;
reg   [6:0] tmp_210_reg_942;
wire    ap_CS_fsm_state13;
wire   [0:0] tmp_156_fu_736_p2;
reg   [0:0] tmp_156_reg_947;
reg   [5:0] co_reg_126;
reg   [4:0] h_reg_137;
reg   [4:0] w_reg_149;
wire    ap_CS_fsm_state14;
reg   [7:0] p_Val2_s_reg_161;
reg   [5:0] ci_reg_173;
wire   [63:0] tmp_fu_196_p1;
wire   [63:0] tmp_232_cast_fu_309_p1;
wire  signed [63:0] tmp_233_cast_fu_341_p1;
wire   [63:0] tmp_241_cast_fu_418_p1;
wire   [11:0] tmp_s_fu_201_p3;
wire   [9:0] tmp_200_fu_213_p3;
wire   [12:0] p_shl2_cast_fu_209_p1;
wire   [12:0] p_shl3_cast_fu_225_p1;
wire   [6:0] tmp_202_fu_235_p3;
wire   [10:0] p_shl1_cast_fu_243_p1;
wire   [10:0] p_shl3_cast1_fu_221_p1;
wire   [10:0] tmp_204_fu_263_p2;
wire   [11:0] tmp_205_fu_276_p3;
wire   [14:0] p_shl4_cast_fu_268_p3;
wire   [14:0] p_shl5_cast_fu_284_p1;
wire   [14:0] tmp_207_fu_304_p2;
wire   [12:0] tmp_157_cast_fu_332_p1;
wire   [12:0] tmp_208_fu_336_p2;
wire   [9:0] tmp_209_fu_346_p3;
wire   [6:0] tmp_211_fu_358_p3;
wire   [10:0] p_shl8_cast_fu_354_p1;
wire   [10:0] p_shl9_cast_fu_366_p1;
wire   [10:0] tmp_212_fu_370_p2;
wire   [10:0] tmp_213_fu_376_p2;
wire   [11:0] tmp_214_fu_389_p3;
wire   [14:0] p_shl6_cast_fu_381_p3;
wire   [14:0] p_shl7_cast_fu_397_p1;
wire   [14:0] tmp_215_fu_401_p2;
wire  signed [7:0] p_Val2_75_fu_428_p0;
wire  signed [7:0] p_Val2_75_fu_428_p1;
wire   [13:0] tmp_158_fu_442_p3;
wire  signed [15:0] tmp_208_cast_fu_450_p1;
wire   [7:0] p_Val2_77_fu_467_p4;
wire   [7:0] tmp_159_fu_477_p1;
wire   [0:0] tmp_219_fu_480_p3;
wire   [0:0] tmp_160_fu_502_p2;
wire   [0:0] Range1_all_ones_fu_531_p2;
wire   [0:0] Range1_all_zeros_fu_536_p2;
wire   [0:0] tmp_221_fu_524_p3;
wire   [0:0] tmp_161_fu_548_p2;
wire   [0:0] p_41_i_i_fu_554_p2;
wire   [0:0] deleted_zeros_fu_541_p3;
wire   [0:0] p_not_i_i_fu_571_p2;
wire   [0:0] brmerge_i_i2_fu_577_p2;
wire   [0:0] deleted_ones_fu_559_p3;
wire   [0:0] tmp2_demorgan_fu_598_p2;
wire   [0:0] tmp2_fu_604_p2;
wire   [0:0] overflow_fu_587_p2;
wire   [0:0] tmp3_fu_621_p2;
wire   [0:0] underflow_not_fu_625_p2;
wire   [7:0] p_Val2_83_mux_fu_630_p3;
wire   [7:0] p_Val2_s_67_fu_636_p3;
wire  signed [8:0] tmp_154_fu_654_p1;
wire  signed [8:0] tmp_153_fu_650_p1;
wire   [8:0] p_Val2_73_fu_658_p2;
wire   [0:0] tmp_155_fu_686_p2;
wire   [0:0] isneg_not_fu_700_p2;
wire   [0:0] brmerge_i_i_fu_696_p2;
wire   [0:0] underflow_11_fu_691_p2;
wire   [0:0] brmerge9_fu_705_p2;
wire   [7:0] result_V_mux_fu_710_p3;
wire   [7:0] p_result_V_fu_717_p3;
wire   [7:0] result_1_fu_724_p3;
wire   [6:0] p_s_fu_742_p3;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ci_reg_173 <= ci_5_reg_810;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_294_p2))) begin
        ci_reg_173 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_253_p2 == 1'd1))) begin
        co_reg_126 <= co_11_reg_756;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_126 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_184_p2 == 1'd0))) begin
        h_reg_137 <= 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_294_p2 == 1'd1))) begin
        h_reg_137 <= h_11_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_s_reg_161 <= sum_V_fu_642_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_294_p2))) begin
        p_Val2_s_reg_161 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_253_p2))) begin
        w_reg_149 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        w_reg_149 <= w_11_reg_825;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_294_p2))) begin
        ShuffleConvs_1_Downs_reg_797 <= tmp_232_cast_fu_309_p1;
        tmp_152_cast_reg_792[4 : 0] <= tmp_152_cast_fu_300_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_184_p2 == 1'd0))) begin
        bias_V_addr_reg_771 <= tmp_fu_196_p1;
        tmp_201_reg_761[12 : 4] <= tmp_201_fu_229_p2[12 : 4];
        tmp_203_reg_766[10 : 1] <= tmp_203_fu_247_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        brmerge40_demorgan_i_reg_902 <= brmerge40_demorgan_i_fu_593_p2;
        brmerge_i_i_i_reg_912 <= brmerge_i_i_i_fu_615_p2;
        p_38_i_i_reg_892 <= p_38_i_i_fu_566_p2;
        tmp_163_reg_897 <= tmp_163_fu_582_p2;
        underflow_reg_907 <= underflow_fu_610_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        carry_reg_879 <= carry_fu_508_p2;
        newsignbit_reg_873 <= p_Val2_78_fu_488_p2[32'd7];
        p_Val2_76_reg_855 <= p_Val2_76_fu_454_p2;
        p_Val2_78_reg_867 <= p_Val2_78_fu_488_p2;
        signbit_reg_860 <= p_Val2_76_fu_454_p2[32'd15];
        tmp_162_reg_886 <= {{p_Val2_76_fu_454_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ci_5_reg_810 <= ci_5_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_11_reg_756 <= co_11_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        isneg_reg_922 <= p_Val2_73_fu_658_p2[32'd8];
        newsignbit_11_reg_935 <= result_V_fu_672_p2[32'd7];
        result_V_reg_929 <= result_V_fu_672_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_75_reg_845 <= p_Val2_75_fu_428_p2;
        tmp_218_reg_850 <= p_Val2_75_fu_428_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        shuffleunit0_2_outpu_1_reg_840 <= shuffleunit0_2_outpu_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_156_reg_947 <= tmp_156_fu_736_p2;
        tmp_210_reg_942 <= tmp_210_fu_732_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_253_p2))) begin
        tmp_206_reg_784[14 : 1] <= tmp_206_fu_288_p2[14 : 1];
        tmp_cast_reg_779[4 : 0] <= tmp_cast_fu_259_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond_fu_320_p2))) begin
        tmp_216_reg_820 <= tmp_216_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_fu_320_p2))) begin
        w_11_reg_825 <= w_11_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_load_reg_835 <= weight_V_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ShuffleConvs_1_Downs_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ShuffleConvs_1_Downs_we0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_184_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_184_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        shuffleunit0_2_outpu_ce0 = 1'b1;
    end else begin
        shuffleunit0_2_outpu_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_184_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_253_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_294_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_fu_320_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_531_p2 = ((tmp_162_reg_886 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_536_p2 = ((tmp_162_reg_886 == 2'd0) ? 1'b1 : 1'b0);

assign ShuffleConvs_1_Downs_address0 = ShuffleConvs_1_Downs_reg_797;

assign ShuffleConvs_1_Downs_d0 = p_s_fu_742_p3;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_771;

assign brmerge40_demorgan_i_fu_593_p2 = (newsignbit_reg_873 & deleted_ones_fu_559_p3);

assign brmerge9_fu_705_p2 = (newsignbit_11_reg_935 | isneg_not_fu_700_p2);

assign brmerge_i_i2_fu_577_p2 = (newsignbit_reg_873 | p_not_i_i_fu_571_p2);

assign brmerge_i_i_fu_696_p2 = (isneg_reg_922 ^ newsignbit_11_reg_935);

assign brmerge_i_i_i_fu_615_p2 = (underflow_fu_610_p2 | overflow_fu_587_p2);

assign carry_fu_508_p2 = (tmp_219_fu_480_p3 & tmp_160_fu_502_p2);

assign ci_5_fu_326_p2 = (ci_reg_173 + 6'd1);

assign co_11_fu_190_p2 = (co_reg_126 + 6'd1);

assign deleted_ones_fu_559_p3 = ((carry_reg_879[0:0] === 1'b1) ? p_41_i_i_fu_554_p2 : Range1_all_ones_fu_531_p2);

assign deleted_zeros_fu_541_p3 = ((carry_reg_879[0:0] === 1'b1) ? Range1_all_ones_fu_531_p2 : Range1_all_zeros_fu_536_p2);

assign exitcond1_fu_184_p2 = ((co_reg_126 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond2_fu_253_p2 = ((h_reg_137 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond3_fu_294_p2 = ((w_reg_149 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond_fu_320_p2 = ((ci_reg_173 == 6'd48) ? 1'b1 : 1'b0);

assign h_11_fu_314_p2 = (h_reg_137 + 5'd1);

assign isneg_not_fu_700_p2 = (isneg_reg_922 ^ 1'd1);

assign newsignbit_fu_494_p3 = p_Val2_78_fu_488_p2[32'd7];

assign overflow_fu_587_p2 = (brmerge_i_i2_fu_577_p2 & tmp_163_fu_582_p2);

assign p_38_i_i_fu_566_p2 = (carry_reg_879 & Range1_all_ones_fu_531_p2);

assign p_41_i_i_fu_554_p2 = (signbit_reg_860 & tmp_161_fu_548_p2);

assign p_Val2_73_fu_658_p2 = ($signed(tmp_154_fu_654_p1) + $signed(tmp_153_fu_650_p1));

assign p_Val2_75_fu_428_p0 = weight_V_load_reg_835;

assign p_Val2_75_fu_428_p1 = shuffleunit0_2_outpu_1_reg_840;

assign p_Val2_75_fu_428_p2 = ($signed(p_Val2_75_fu_428_p0) * $signed(p_Val2_75_fu_428_p1));

assign p_Val2_76_fu_454_p2 = ($signed(tmp_208_cast_fu_450_p1) + $signed(p_Val2_75_reg_845));

assign p_Val2_77_fu_467_p4 = {{p_Val2_76_fu_454_p2[13:6]}};

assign p_Val2_78_fu_488_p2 = (p_Val2_77_fu_467_p4 + tmp_159_fu_477_p1);

assign p_Val2_83_mux_fu_630_p3 = ((brmerge_i_i_i_reg_912[0:0] === 1'b1) ? 8'd127 : p_Val2_78_reg_867);

assign p_Val2_s_67_fu_636_p3 = ((underflow_reg_907[0:0] === 1'b1) ? 8'd128 : p_Val2_78_reg_867);

assign p_not_i_i_fu_571_p2 = (deleted_zeros_fu_541_p3 ^ 1'd1);

assign p_result_V_fu_717_p3 = ((underflow_11_fu_691_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_929);

assign p_s_fu_742_p3 = ((tmp_156_reg_947[0:0] === 1'b1) ? tmp_210_reg_942 : 7'd0);

assign p_shl1_cast_fu_243_p1 = tmp_202_fu_235_p3;

assign p_shl2_cast_fu_209_p1 = tmp_s_fu_201_p3;

assign p_shl3_cast1_fu_221_p1 = tmp_200_fu_213_p3;

assign p_shl3_cast_fu_225_p1 = tmp_200_fu_213_p3;

assign p_shl4_cast_fu_268_p3 = {{tmp_204_fu_263_p2}, {4'd0}};

assign p_shl5_cast_fu_284_p1 = tmp_205_fu_276_p3;

assign p_shl6_cast_fu_381_p3 = {{tmp_213_fu_376_p2}, {4'd0}};

assign p_shl7_cast_fu_397_p1 = tmp_214_fu_389_p3;

assign p_shl8_cast_fu_354_p1 = tmp_209_fu_346_p3;

assign p_shl9_cast_fu_366_p1 = tmp_211_fu_358_p3;

assign result_1_fu_724_p3 = ((brmerge9_fu_705_p2[0:0] === 1'b1) ? result_V_mux_fu_710_p3 : p_result_V_fu_717_p3);

assign result_V_fu_672_p2 = (bias_V_q0 + p_Val2_s_reg_161);

assign result_V_mux_fu_710_p3 = ((brmerge_i_i_fu_696_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_929);

assign shuffleunit0_2_outpu_address0 = tmp_241_cast_fu_418_p1;

assign sum_V_fu_642_p3 = ((underflow_not_fu_625_p2[0:0] === 1'b1) ? p_Val2_83_mux_fu_630_p3 : p_Val2_s_67_fu_636_p3);

assign tmp2_demorgan_fu_598_p2 = (p_38_i_i_fu_566_p2 | brmerge40_demorgan_i_fu_593_p2);

assign tmp2_fu_604_p2 = (tmp2_demorgan_fu_598_p2 ^ 1'd1);

assign tmp3_fu_621_p2 = (brmerge40_demorgan_i_reg_902 | tmp_163_reg_897);

assign tmp_152_cast_fu_300_p1 = w_reg_149;

assign tmp_153_fu_650_p1 = $signed(p_Val2_s_reg_161);

assign tmp_154_fu_654_p1 = $signed(bias_V_q0);

assign tmp_155_fu_686_p2 = (newsignbit_11_reg_935 ^ 1'd1);

assign tmp_156_fu_736_p2 = (($signed(result_1_fu_724_p3) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign tmp_157_cast_fu_332_p1 = ci_reg_173;

assign tmp_158_fu_442_p3 = {{p_Val2_s_reg_161}, {6'd0}};

assign tmp_159_fu_477_p1 = tmp_218_reg_850;

assign tmp_160_fu_502_p2 = (newsignbit_fu_494_p3 ^ 1'd1);

assign tmp_161_fu_548_p2 = (tmp_221_fu_524_p3 ^ 1'd1);

assign tmp_163_fu_582_p2 = (signbit_reg_860 ^ 1'd1);

assign tmp_200_fu_213_p3 = {{co_reg_126}, {4'd0}};

assign tmp_201_fu_229_p2 = (p_shl2_cast_fu_209_p1 - p_shl3_cast_fu_225_p1);

assign tmp_202_fu_235_p3 = {{co_reg_126}, {1'd0}};

assign tmp_203_fu_247_p2 = (p_shl1_cast_fu_243_p1 + p_shl3_cast1_fu_221_p1);

assign tmp_204_fu_263_p2 = (tmp_cast_fu_259_p1 + tmp_203_reg_766);

assign tmp_205_fu_276_p3 = {{tmp_204_fu_263_p2}, {1'd0}};

assign tmp_206_fu_288_p2 = (p_shl4_cast_fu_268_p3 + p_shl5_cast_fu_284_p1);

assign tmp_207_fu_304_p2 = (tmp_206_reg_784 + tmp_152_cast_fu_300_p1);

assign tmp_208_cast_fu_450_p1 = $signed(tmp_158_fu_442_p3);

assign tmp_208_fu_336_p2 = (tmp_157_cast_fu_332_p1 + tmp_201_reg_761);

assign tmp_209_fu_346_p3 = {{ci_reg_173}, {4'd0}};

assign tmp_210_fu_732_p1 = result_1_fu_724_p3[6:0];

assign tmp_211_fu_358_p3 = {{ci_reg_173}, {1'd0}};

assign tmp_212_fu_370_p2 = (p_shl8_cast_fu_354_p1 + p_shl9_cast_fu_366_p1);

assign tmp_213_fu_376_p2 = (tmp_cast_reg_779 + tmp_212_fu_370_p2);

assign tmp_214_fu_389_p3 = {{tmp_213_fu_376_p2}, {1'd0}};

assign tmp_215_fu_401_p2 = (p_shl6_cast_fu_381_p3 + p_shl7_cast_fu_397_p1);

assign tmp_216_fu_407_p2 = (tmp_152_cast_reg_792 + tmp_215_fu_401_p2);

assign tmp_219_fu_480_p3 = p_Val2_76_fu_454_p2[32'd13];

assign tmp_221_fu_524_p3 = p_Val2_76_reg_855[32'd14];

assign tmp_232_cast_fu_309_p1 = tmp_207_fu_304_p2;

assign tmp_233_cast_fu_341_p1 = $signed(tmp_208_fu_336_p2);

assign tmp_241_cast_fu_418_p1 = tmp_216_reg_820;

assign tmp_cast_fu_259_p1 = h_reg_137;

assign tmp_fu_196_p1 = co_reg_126;

assign tmp_s_fu_201_p3 = {{co_reg_126}, {6'd0}};

assign underflow_11_fu_691_p2 = (isneg_reg_922 & tmp_155_fu_686_p2);

assign underflow_fu_610_p2 = (signbit_reg_860 & tmp2_fu_604_p2);

assign underflow_not_fu_625_p2 = (tmp3_fu_621_p2 | p_38_i_i_reg_892);

assign w_11_fu_412_p2 = (5'd1 + w_reg_149);

assign weight_V_address0 = tmp_233_cast_fu_341_p1;

always @ (posedge ap_clk) begin
    tmp_201_reg_761[3:0] <= 4'b0000;
    tmp_203_reg_766[0] <= 1'b0;
    tmp_cast_reg_779[10:5] <= 6'b000000;
    tmp_206_reg_784[0] <= 1'b0;
    tmp_152_cast_reg_792[14:5] <= 10'b0000000000;
end

endmodule //subconv_1x1_16p_p
