// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_8_stride_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        ShuffleConvs_2_Downs_7_address0,
        ShuffleConvs_2_Downs_7_ce0,
        ShuffleConvs_2_Downs_7_q0,
        ShuffleConvs_2_Downs_6_address0,
        ShuffleConvs_2_Downs_6_ce0,
        ShuffleConvs_2_Downs_6_q0,
        ShuffleConvs_2_Downs_5_address0,
        ShuffleConvs_2_Downs_5_ce0,
        ShuffleConvs_2_Downs_5_q0,
        ShuffleConvs_2_Downs_4_address0,
        ShuffleConvs_2_Downs_4_ce0,
        ShuffleConvs_2_Downs_4_q0,
        ShuffleConvs_2_Downs_3_address0,
        ShuffleConvs_2_Downs_3_ce0,
        ShuffleConvs_2_Downs_3_q0,
        ShuffleConvs_2_Downs_2_address0,
        ShuffleConvs_2_Downs_2_ce0,
        ShuffleConvs_2_Downs_2_q0,
        ShuffleConvs_2_Downs_1_address0,
        ShuffleConvs_2_Downs_1_ce0,
        ShuffleConvs_2_Downs_1_q0,
        ShuffleConvs_2_Downs_address0,
        ShuffleConvs_2_Downs_ce0,
        ShuffleConvs_2_Downs_q0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [6:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [11:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [10:0] ShuffleConvs_2_Downs_7_address0;
output   ShuffleConvs_2_Downs_7_ce0;
input  [7:0] ShuffleConvs_2_Downs_7_q0;
output  [10:0] ShuffleConvs_2_Downs_6_address0;
output   ShuffleConvs_2_Downs_6_ce0;
input  [7:0] ShuffleConvs_2_Downs_6_q0;
output  [10:0] ShuffleConvs_2_Downs_5_address0;
output   ShuffleConvs_2_Downs_5_ce0;
input  [7:0] ShuffleConvs_2_Downs_5_q0;
output  [10:0] ShuffleConvs_2_Downs_4_address0;
output   ShuffleConvs_2_Downs_4_ce0;
input  [7:0] ShuffleConvs_2_Downs_4_q0;
output  [10:0] ShuffleConvs_2_Downs_3_address0;
output   ShuffleConvs_2_Downs_3_ce0;
input  [7:0] ShuffleConvs_2_Downs_3_q0;
output  [10:0] ShuffleConvs_2_Downs_2_address0;
output   ShuffleConvs_2_Downs_2_ce0;
input  [7:0] ShuffleConvs_2_Downs_2_q0;
output  [10:0] ShuffleConvs_2_Downs_1_address0;
output   ShuffleConvs_2_Downs_1_ce0;
input  [7:0] ShuffleConvs_2_Downs_1_q0;
output  [10:0] ShuffleConvs_2_Downs_address0;
output   ShuffleConvs_2_Downs_ce0;
input  [7:0] ShuffleConvs_2_Downs_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg ShuffleConvs_2_Downs_7_ce0;
reg ShuffleConvs_2_Downs_6_ce0;
reg ShuffleConvs_2_Downs_5_ce0;
reg ShuffleConvs_2_Downs_4_ce0;
reg ShuffleConvs_2_Downs_3_ce0;
reg ShuffleConvs_2_Downs_2_ce0;
reg ShuffleConvs_2_Downs_1_ce0;
reg ShuffleConvs_2_Downs_ce0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] co_1_fu_336_p2;
reg   [6:0] co_1_reg_1023;
wire    ap_CS_fsm_state2;
wire  signed [10:0] tmp_21_cast_fu_369_p1;
reg  signed [10:0] tmp_21_cast_reg_1028;
wire   [0:0] exitcond1_fu_330_p2;
wire  signed [11:0] tmp_24_cast_fu_403_p1;
reg  signed [11:0] tmp_24_cast_reg_1033;
wire   [2:0] tmp_12_fu_407_p1;
reg   [2:0] tmp_12_reg_1038;
wire   [7:0] tmp_22_fu_445_p2;
reg   [7:0] tmp_22_reg_1043;
reg   [6:0] bias_V_addr_reg_1048;
wire   [3:0] tmp_2_fu_457_p3;
reg   [3:0] tmp_2_reg_1056;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond2_fu_451_p2;
wire   [12:0] tmp_25_fu_494_p2;
reg   [12:0] tmp_25_reg_1061;
wire   [3:0] tmp_5_fu_506_p3;
reg   [3:0] tmp_5_reg_1069;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond3_fu_500_p2;
wire   [2:0] h_1_fu_514_p2;
wire   [1:0] m_1_fu_526_p2;
reg   [1:0] m_1_reg_1082;
wire    ap_CS_fsm_state5;
wire   [10:0] tmp_29_fu_547_p2;
reg   [10:0] tmp_29_reg_1087;
wire   [0:0] exitcond4_fu_520_p2;
wire   [11:0] tmp_33_fu_601_p2;
reg   [11:0] tmp_33_reg_1092;
wire   [12:0] tmp_26_fu_611_p2;
reg   [12:0] tmp_26_reg_1097;
wire   [2:0] w_1_fu_616_p2;
reg   [2:0] w_1_reg_1102;
wire   [1:0] n_1_fu_628_p2;
reg   [1:0] n_1_reg_1110;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_622_p2;
reg   [7:0] weight_V_load_reg_1160;
wire    ap_CS_fsm_state7;
wire   [7:0] tmp_13_fu_684_p10;
reg   [7:0] tmp_13_reg_1165;
wire   [15:0] p_Val2_5_fu_711_p2;
reg   [15:0] p_Val2_5_reg_1170;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_37_reg_1175;
wire   [15:0] p_Val2_6_fu_737_p2;
reg   [15:0] p_Val2_6_reg_1180;
wire    ap_CS_fsm_state9;
reg   [0:0] signbit_reg_1185;
wire   [7:0] p_Val2_8_fu_771_p2;
reg   [7:0] p_Val2_8_reg_1192;
wire   [0:0] newsignbit_fu_777_p3;
reg   [0:0] newsignbit_reg_1198;
wire   [0:0] carry_fu_791_p2;
reg   [0:0] carry_reg_1204;
reg   [1:0] tmp_19_reg_1211;
wire   [0:0] p_38_i_i_fu_849_p2;
reg   [0:0] p_38_i_i_reg_1217;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_20_fu_865_p2;
reg   [0:0] tmp_20_reg_1222;
wire   [0:0] brmerge40_demorgan_i_fu_876_p2;
reg   [0:0] brmerge40_demorgan_i_reg_1227;
wire   [0:0] underflow_fu_893_p2;
reg   [0:0] underflow_reg_1232;
wire   [0:0] brmerge_i_i_i_fu_898_p2;
reg   [0:0] brmerge_i_i_i_reg_1237;
wire   [7:0] sum_V_fu_925_p3;
wire    ap_CS_fsm_state11;
reg   [0:0] isneg_reg_1247;
wire    ap_CS_fsm_state12;
wire   [7:0] result_V_fu_955_p2;
reg   [7:0] result_V_reg_1254;
reg   [0:0] newsignbit_1_reg_1260;
reg   [6:0] co_reg_249;
reg   [2:0] h_reg_260;
reg   [2:0] w_reg_272;
wire    ap_CS_fsm_state13;
reg   [7:0] p_Val2_s_reg_284;
reg   [1:0] m_reg_296;
reg   [7:0] p_Val2_4_reg_307;
reg   [1:0] n_reg_319;
wire   [63:0] tmp_fu_342_p1;
wire   [63:0] tmp_40_cast_fu_643_p1;
wire   [63:0] tmp_41_cast_fu_672_p1;
wire   [63:0] tmp_32_cast_fu_1016_p1;
wire   [8:0] tmp_s_fu_351_p3;
wire   [9:0] p_shl4_cast_fu_359_p1;
wire   [9:0] tmp_cast_fu_347_p1;
wire   [9:0] tmp_1_fu_363_p2;
wire   [9:0] tmp_3_fu_373_p3;
wire   [7:0] tmp_9_fu_385_p3;
wire   [10:0] p_shl2_cast_fu_381_p1;
wire   [10:0] p_shl3_cast_fu_393_p1;
wire   [10:0] tmp_10_fu_397_p2;
wire   [3:0] newIndex_fu_411_p4;
wire   [6:0] tmp_15_fu_421_p3;
wire   [4:0] tmp_21_fu_433_p3;
wire   [7:0] p_shl_cast_fu_429_p1;
wire   [7:0] p_shl1_cast_fu_441_p1;
wire   [11:0] tmp_3_cast_fu_465_p1;
wire   [11:0] tmp_23_fu_469_p2;
wire   [9:0] tmp_24_fu_474_p1;
wire   [12:0] p_shl5_cast_fu_478_p3;
wire   [12:0] p_shl6_cast_fu_486_p3;
wire   [10:0] tmp_1_cast_fu_532_p1;
wire   [10:0] tmp_27_fu_536_p2;
wire   [10:0] tmp_28_fu_541_p2;
wire   [1:0] tmp2_fu_553_p2;
wire  signed [3:0] tmp2_cast_fu_559_p1;
wire   [3:0] tmp_8_fu_563_p2;
wire   [7:0] tmp_cast_20_fu_568_p1;
wire   [7:0] tmp_30_fu_572_p2;
wire   [10:0] tmp_31_fu_577_p3;
wire   [8:0] tmp_32_fu_589_p3;
wire   [11:0] p_shl8_cast_fu_597_p1;
wire   [11:0] p_shl7_cast_fu_585_p1;
wire   [12:0] tmp_9_cast_fu_607_p1;
wire   [10:0] tmp_10_cast_fu_634_p1;
wire   [10:0] tmp_34_fu_638_p2;
wire   [1:0] tmp3_fu_648_p2;
wire  signed [3:0] tmp3_cast_fu_654_p1;
wire   [3:0] tmp_11_fu_658_p2;
wire   [11:0] tmp_12_cast_fu_663_p1;
wire   [11:0] tmp_35_fu_667_p2;
wire  signed [7:0] p_Val2_5_fu_711_p0;
wire  signed [7:0] p_Val2_5_fu_711_p1;
wire   [13:0] tmp_14_fu_725_p3;
wire  signed [15:0] tmp_17_cast_fu_733_p1;
wire   [7:0] p_Val2_7_fu_750_p4;
wire   [7:0] tmp_16_fu_760_p1;
wire   [0:0] tmp_38_fu_763_p3;
wire   [0:0] tmp_17_fu_785_p2;
wire   [0:0] Range1_all_ones_fu_814_p2;
wire   [0:0] Range1_all_zeros_fu_819_p2;
wire   [0:0] tmp_40_fu_807_p3;
wire   [0:0] tmp_18_fu_831_p2;
wire   [0:0] p_41_i_i_fu_837_p2;
wire   [0:0] deleted_zeros_fu_824_p3;
wire   [0:0] p_not_i_i_fu_854_p2;
wire   [0:0] brmerge_i_i1_fu_860_p2;
wire   [0:0] deleted_ones_fu_842_p3;
wire   [0:0] tmp4_demorgan_fu_881_p2;
wire   [0:0] tmp4_fu_887_p2;
wire   [0:0] overflow_fu_870_p2;
wire   [0:0] tmp5_fu_904_p2;
wire   [0:0] underflow_not_fu_908_p2;
wire   [7:0] p_Val2_8_mux_fu_913_p3;
wire   [7:0] p_Val2_8_22_fu_919_p3;
wire  signed [8:0] tmp_6_fu_933_p1;
wire  signed [8:0] tmp_7_fu_937_p1;
wire   [8:0] p_Val2_2_fu_941_p2;
wire   [0:0] tmp_4_fu_969_p2;
wire   [0:0] isneg_not_fu_983_p2;
wire   [0:0] brmerge_i_i_fu_979_p2;
wire   [0:0] underflow_1_fu_974_p2;
wire   [0:0] brmerge9_fu_988_p2;
wire   [7:0] result_V_mux_fu_993_p3;
wire   [7:0] p_result_V_fu_1000_p3;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

ShuffleNetV2_mux_jbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_jbC_x_U233(
    .din1(ShuffleConvs_2_Downs_7_q0),
    .din2(ShuffleConvs_2_Downs_6_q0),
    .din3(ShuffleConvs_2_Downs_5_q0),
    .din4(ShuffleConvs_2_Downs_4_q0),
    .din5(ShuffleConvs_2_Downs_3_q0),
    .din6(ShuffleConvs_2_Downs_2_q0),
    .din7(ShuffleConvs_2_Downs_1_q0),
    .din8(ShuffleConvs_2_Downs_q0),
    .din9(tmp_12_reg_1038),
    .dout(tmp_13_fu_684_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_451_p2 == 1'd1))) begin
        co_reg_249 <= co_1_reg_1023;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_249 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_330_p2 == 1'd0))) begin
        h_reg_260 <= 3'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_500_p2 == 1'd1))) begin
        h_reg_260 <= h_1_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_622_p2))) begin
        m_reg_296 <= m_1_reg_1082;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_500_p2))) begin
        m_reg_296 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        n_reg_319 <= n_1_reg_1110;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_520_p2))) begin
        n_reg_319 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_4_reg_307 <= sum_V_fu_925_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_520_p2))) begin
        p_Val2_4_reg_307 <= p_Val2_s_reg_284;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_622_p2))) begin
        p_Val2_s_reg_284 <= p_Val2_4_reg_307;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_500_p2))) begin
        p_Val2_s_reg_284 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_451_p2))) begin
        w_reg_272 <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        w_reg_272 <= w_1_reg_1102;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_330_p2 == 1'd0))) begin
        bias_V_addr_reg_1048 <= tmp_fu_342_p1;
        tmp_12_reg_1038 <= tmp_12_fu_407_p1;
        tmp_21_cast_reg_1028 <= tmp_21_cast_fu_369_p1;
        tmp_22_reg_1043[7 : 1] <= tmp_22_fu_445_p2[7 : 1];
        tmp_24_cast_reg_1033[11 : 1] <= tmp_24_cast_fu_403_p1[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        brmerge40_demorgan_i_reg_1227 <= brmerge40_demorgan_i_fu_876_p2;
        brmerge_i_i_i_reg_1237 <= brmerge_i_i_i_fu_898_p2;
        p_38_i_i_reg_1217 <= p_38_i_i_fu_849_p2;
        tmp_20_reg_1222 <= tmp_20_fu_865_p2;
        underflow_reg_1232 <= underflow_fu_893_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        carry_reg_1204 <= carry_fu_791_p2;
        newsignbit_reg_1198 <= p_Val2_8_fu_771_p2[32'd7];
        p_Val2_6_reg_1180 <= p_Val2_6_fu_737_p2;
        p_Val2_8_reg_1192 <= p_Val2_8_fu_771_p2;
        signbit_reg_1185 <= p_Val2_6_fu_737_p2[32'd15];
        tmp_19_reg_1211 <= {{p_Val2_6_fu_737_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_1_reg_1023 <= co_1_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        isneg_reg_1247 <= p_Val2_2_fu_941_p2[32'd8];
        newsignbit_1_reg_1260 <= result_V_fu_955_p2[32'd7];
        result_V_reg_1254 <= result_V_fu_955_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_1_reg_1082 <= m_1_fu_526_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_1_reg_1110 <= n_1_fu_628_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_5_reg_1170 <= p_Val2_5_fu_711_p2;
        tmp_37_reg_1175 <= p_Val2_5_fu_711_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_13_reg_1165 <= tmp_13_fu_684_p10;
        weight_V_load_reg_1160 <= weight_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_451_p2))) begin
        tmp_25_reg_1061[12 : 1] <= tmp_25_fu_494_p2[12 : 1];
        tmp_2_reg_1056[3 : 1] <= tmp_2_fu_457_p3[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond4_fu_520_p2))) begin
        tmp_26_reg_1097 <= tmp_26_fu_611_p2;
        w_1_reg_1102 <= w_1_fu_616_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_520_p2))) begin
        tmp_29_reg_1087 <= tmp_29_fu_547_p2;
        tmp_33_reg_1092[11 : 1] <= tmp_33_fu_601_p2[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_500_p2))) begin
        tmp_5_reg_1069[3 : 1] <= tmp_5_fu_506_p3[3 : 1];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_1_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_2_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_3_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_4_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_5_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_6_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_7_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_330_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_330_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_330_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_451_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_500_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_520_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_622_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_814_p2 = ((tmp_19_reg_1211 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_819_p2 = ((tmp_19_reg_1211 == 2'd0) ? 1'b1 : 1'b0);

assign ShuffleConvs_2_Downs_1_address0 = tmp_41_cast_fu_672_p1;

assign ShuffleConvs_2_Downs_2_address0 = tmp_41_cast_fu_672_p1;

assign ShuffleConvs_2_Downs_3_address0 = tmp_41_cast_fu_672_p1;

assign ShuffleConvs_2_Downs_4_address0 = tmp_41_cast_fu_672_p1;

assign ShuffleConvs_2_Downs_5_address0 = tmp_41_cast_fu_672_p1;

assign ShuffleConvs_2_Downs_6_address0 = tmp_41_cast_fu_672_p1;

assign ShuffleConvs_2_Downs_7_address0 = tmp_41_cast_fu_672_p1;

assign ShuffleConvs_2_Downs_address0 = tmp_41_cast_fu_672_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_1048;

assign brmerge40_demorgan_i_fu_876_p2 = (newsignbit_reg_1198 & deleted_ones_fu_842_p3);

assign brmerge9_fu_988_p2 = (newsignbit_1_reg_1260 | isneg_not_fu_983_p2);

assign brmerge_i_i1_fu_860_p2 = (newsignbit_reg_1198 | p_not_i_i_fu_854_p2);

assign brmerge_i_i_fu_979_p2 = (isneg_reg_1247 ^ newsignbit_1_reg_1260);

assign brmerge_i_i_i_fu_898_p2 = (underflow_fu_893_p2 | overflow_fu_870_p2);

assign carry_fu_791_p2 = (tmp_38_fu_763_p3 & tmp_17_fu_785_p2);

assign co_1_fu_336_p2 = (co_reg_249 + 7'd1);

assign deleted_ones_fu_842_p3 = ((carry_reg_1204[0:0] === 1'b1) ? p_41_i_i_fu_837_p2 : Range1_all_ones_fu_814_p2);

assign deleted_zeros_fu_824_p3 = ((carry_reg_1204[0:0] === 1'b1) ? Range1_all_ones_fu_814_p2 : Range1_all_zeros_fu_819_p2);

assign exitcond1_fu_330_p2 = ((co_reg_249 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond2_fu_451_p2 = ((h_reg_260 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond3_fu_500_p2 = ((w_reg_272 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond4_fu_520_p2 = ((m_reg_296 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_622_p2 = ((n_reg_319 == 2'd3) ? 1'b1 : 1'b0);

assign h_1_fu_514_p2 = (h_reg_260 + 3'd1);

assign isneg_not_fu_983_p2 = (isneg_reg_1247 ^ 1'd1);

assign m_1_fu_526_p2 = (m_reg_296 + 2'd1);

assign n_1_fu_628_p2 = (n_reg_319 + 2'd1);

assign newIndex_fu_411_p4 = {{co_reg_249[6:3]}};

assign newsignbit_fu_777_p3 = p_Val2_8_fu_771_p2[32'd7];

assign output_V_address0 = tmp_32_cast_fu_1016_p1;

assign output_V_d0 = ((brmerge9_fu_988_p2[0:0] === 1'b1) ? result_V_mux_fu_993_p3 : p_result_V_fu_1000_p3);

assign overflow_fu_870_p2 = (brmerge_i_i1_fu_860_p2 & tmp_20_fu_865_p2);

assign p_38_i_i_fu_849_p2 = (carry_reg_1204 & Range1_all_ones_fu_814_p2);

assign p_41_i_i_fu_837_p2 = (signbit_reg_1185 & tmp_18_fu_831_p2);

assign p_Val2_2_fu_941_p2 = ($signed(tmp_6_fu_933_p1) + $signed(tmp_7_fu_937_p1));

assign p_Val2_5_fu_711_p0 = weight_V_load_reg_1160;

assign p_Val2_5_fu_711_p1 = tmp_13_reg_1165;

assign p_Val2_5_fu_711_p2 = ($signed(p_Val2_5_fu_711_p0) * $signed(p_Val2_5_fu_711_p1));

assign p_Val2_6_fu_737_p2 = ($signed(tmp_17_cast_fu_733_p1) + $signed(p_Val2_5_reg_1170));

assign p_Val2_7_fu_750_p4 = {{p_Val2_6_fu_737_p2[13:6]}};

assign p_Val2_8_22_fu_919_p3 = ((underflow_reg_1232[0:0] === 1'b1) ? 8'd128 : p_Val2_8_reg_1192);

assign p_Val2_8_fu_771_p2 = (p_Val2_7_fu_750_p4 + tmp_16_fu_760_p1);

assign p_Val2_8_mux_fu_913_p3 = ((brmerge_i_i_i_reg_1237[0:0] === 1'b1) ? 8'd127 : p_Val2_8_reg_1192);

assign p_not_i_i_fu_854_p2 = (deleted_zeros_fu_824_p3 ^ 1'd1);

assign p_result_V_fu_1000_p3 = ((underflow_1_fu_974_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_1254);

assign p_shl1_cast_fu_441_p1 = tmp_21_fu_433_p3;

assign p_shl2_cast_fu_381_p1 = tmp_3_fu_373_p3;

assign p_shl3_cast_fu_393_p1 = tmp_9_fu_385_p3;

assign p_shl4_cast_fu_359_p1 = tmp_s_fu_351_p3;

assign p_shl5_cast_fu_478_p3 = {{tmp_24_fu_474_p1}, {3'd0}};

assign p_shl6_cast_fu_486_p3 = {{tmp_23_fu_469_p2}, {1'd0}};

assign p_shl7_cast_fu_585_p1 = tmp_31_fu_577_p3;

assign p_shl8_cast_fu_597_p1 = tmp_32_fu_589_p3;

assign p_shl_cast_fu_429_p1 = tmp_15_fu_421_p3;

assign result_V_fu_955_p2 = (p_Val2_s_reg_284 + bias_V_q0);

assign result_V_mux_fu_993_p3 = ((brmerge_i_i_fu_979_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_1254);

assign sum_V_fu_925_p3 = ((underflow_not_fu_908_p2[0:0] === 1'b1) ? p_Val2_8_mux_fu_913_p3 : p_Val2_8_22_fu_919_p3);

assign tmp2_cast_fu_559_p1 = $signed(tmp2_fu_553_p2);

assign tmp2_fu_553_p2 = (m_reg_296 ^ 2'd2);

assign tmp3_cast_fu_654_p1 = $signed(tmp3_fu_648_p2);

assign tmp3_fu_648_p2 = (n_reg_319 ^ 2'd2);

assign tmp4_demorgan_fu_881_p2 = (p_38_i_i_fu_849_p2 | brmerge40_demorgan_i_fu_876_p2);

assign tmp4_fu_887_p2 = (tmp4_demorgan_fu_881_p2 ^ 1'd1);

assign tmp5_fu_904_p2 = (brmerge40_demorgan_i_reg_1227 | tmp_20_reg_1222);

assign tmp_10_cast_fu_634_p1 = n_reg_319;

assign tmp_10_fu_397_p2 = (p_shl2_cast_fu_381_p1 - p_shl3_cast_fu_393_p1);

assign tmp_11_fu_658_p2 = ($signed(tmp3_cast_fu_654_p1) + $signed(tmp_5_reg_1069));

assign tmp_12_cast_fu_663_p1 = tmp_11_fu_658_p2;

assign tmp_12_fu_407_p1 = co_reg_249[2:0];

assign tmp_14_fu_725_p3 = {{p_Val2_4_reg_307}, {6'd0}};

assign tmp_15_fu_421_p3 = {{newIndex_fu_411_p4}, {3'd0}};

assign tmp_16_fu_760_p1 = tmp_37_reg_1175;

assign tmp_17_cast_fu_733_p1 = $signed(tmp_14_fu_725_p3);

assign tmp_17_fu_785_p2 = (newsignbit_fu_777_p3 ^ 1'd1);

assign tmp_18_fu_831_p2 = (tmp_40_fu_807_p3 ^ 1'd1);

assign tmp_1_cast_fu_532_p1 = m_reg_296;

assign tmp_1_fu_363_p2 = (p_shl4_cast_fu_359_p1 - tmp_cast_fu_347_p1);

assign tmp_20_fu_865_p2 = (signbit_reg_1185 ^ 1'd1);

assign tmp_21_cast_fu_369_p1 = $signed(tmp_1_fu_363_p2);

assign tmp_21_fu_433_p3 = {{newIndex_fu_411_p4}, {1'd0}};

assign tmp_22_fu_445_p2 = (p_shl_cast_fu_429_p1 + p_shl1_cast_fu_441_p1);

assign tmp_23_fu_469_p2 = ($signed(tmp_24_cast_reg_1033) + $signed(tmp_3_cast_fu_465_p1));

assign tmp_24_cast_fu_403_p1 = $signed(tmp_10_fu_397_p2);

assign tmp_24_fu_474_p1 = tmp_23_fu_469_p2[9:0];

assign tmp_25_fu_494_p2 = (p_shl5_cast_fu_478_p3 - p_shl6_cast_fu_486_p3);

assign tmp_26_fu_611_p2 = (tmp_25_reg_1061 + tmp_9_cast_fu_607_p1);

assign tmp_27_fu_536_p2 = ($signed(tmp_21_cast_reg_1028) + $signed(tmp_1_cast_fu_532_p1));

assign tmp_28_fu_541_p2 = tmp_27_fu_536_p2 << 11'd2;

assign tmp_29_fu_547_p2 = (tmp_28_fu_541_p2 - tmp_27_fu_536_p2);

assign tmp_2_fu_457_p3 = {{h_reg_260}, {1'd0}};

assign tmp_30_fu_572_p2 = (tmp_22_reg_1043 + tmp_cast_20_fu_568_p1);

assign tmp_31_fu_577_p3 = {{tmp_30_fu_572_p2}, {3'd0}};

assign tmp_32_cast_fu_1016_p1 = tmp_26_reg_1097;

assign tmp_32_fu_589_p3 = {{tmp_30_fu_572_p2}, {1'd0}};

assign tmp_33_fu_601_p2 = (p_shl8_cast_fu_597_p1 + p_shl7_cast_fu_585_p1);

assign tmp_34_fu_638_p2 = (tmp_10_cast_fu_634_p1 + tmp_29_reg_1087);

assign tmp_35_fu_667_p2 = (tmp_12_cast_fu_663_p1 + tmp_33_reg_1092);

assign tmp_38_fu_763_p3 = p_Val2_6_fu_737_p2[32'd13];

assign tmp_3_cast_fu_465_p1 = h_reg_260;

assign tmp_3_fu_373_p3 = {{co_reg_249}, {3'd0}};

assign tmp_40_cast_fu_643_p1 = tmp_34_fu_638_p2;

assign tmp_40_fu_807_p3 = p_Val2_6_reg_1180[32'd14];

assign tmp_41_cast_fu_672_p1 = tmp_35_fu_667_p2;

assign tmp_4_fu_969_p2 = (newsignbit_1_reg_1260 ^ 1'd1);

assign tmp_5_fu_506_p3 = {{w_reg_272}, {1'd0}};

assign tmp_6_fu_933_p1 = $signed(p_Val2_s_reg_284);

assign tmp_7_fu_937_p1 = $signed(bias_V_q0);

assign tmp_8_fu_563_p2 = ($signed(tmp_2_reg_1056) + $signed(tmp2_cast_fu_559_p1));

assign tmp_9_cast_fu_607_p1 = w_reg_272;

assign tmp_9_fu_385_p3 = {{co_reg_249}, {1'd0}};

assign tmp_cast_20_fu_568_p1 = tmp_8_fu_563_p2;

assign tmp_cast_fu_347_p1 = co_reg_249;

assign tmp_fu_342_p1 = co_reg_249;

assign tmp_s_fu_351_p3 = {{co_reg_249}, {2'd0}};

assign underflow_1_fu_974_p2 = (isneg_reg_1247 & tmp_4_fu_969_p2);

assign underflow_fu_893_p2 = (signbit_reg_1185 & tmp4_fu_887_p2);

assign underflow_not_fu_908_p2 = (tmp5_fu_904_p2 | p_38_i_i_reg_1217);

assign w_1_fu_616_p2 = (w_reg_272 + 3'd1);

assign weight_V_address0 = tmp_40_cast_fu_643_p1;

always @ (posedge ap_clk) begin
    tmp_24_cast_reg_1033[0] <= 1'b0;
    tmp_22_reg_1043[0] <= 1'b0;
    tmp_2_reg_1056[0] <= 1'b0;
    tmp_25_reg_1061[0] <= 1'b0;
    tmp_5_reg_1069[0] <= 1'b0;
    tmp_33_reg_1092[0] <= 1'b0;
end

endmodule //subconv_3x3_8_stride_1
