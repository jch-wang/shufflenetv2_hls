// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_8_stride (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        shuffleunit1_7_outpu_address0,
        shuffleunit1_7_outpu_ce0,
        shuffleunit1_7_outpu_q0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [6:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [11:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [13:0] shuffleunit1_7_outpu_address0;
output   shuffleunit1_7_outpu_ce0;
input  [7:0] shuffleunit1_7_outpu_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg shuffleunit1_7_outpu_ce0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] co_1_fu_228_p2;
reg   [6:0] co_1_reg_849;
wire    ap_CS_fsm_state2;
wire  signed [10:0] tmp_43_cast_fu_261_p1;
reg  signed [10:0] tmp_43_cast_reg_854;
wire   [0:0] exitcond1_fu_222_p2;
wire  signed [11:0] tmp_46_cast_fu_295_p1;
reg  signed [11:0] tmp_46_cast_reg_859;
wire   [10:0] tmp_40_fu_299_p2;
reg   [10:0] tmp_40_reg_864;
reg   [6:0] bias_V_addr_reg_869;
wire   [3:0] tmp_2_fu_311_p3;
reg   [3:0] tmp_2_reg_877;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond2_fu_305_p2;
wire   [12:0] tmp_43_fu_348_p2;
reg   [12:0] tmp_43_reg_882;
wire   [3:0] tmp_5_fu_360_p3;
reg   [3:0] tmp_5_reg_890;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond3_fu_354_p2;
wire   [2:0] h_1_fu_368_p2;
wire   [1:0] m_1_fu_380_p2;
reg   [1:0] m_1_reg_903;
wire    ap_CS_fsm_state5;
wire   [10:0] tmp_47_fu_401_p2;
reg   [10:0] tmp_47_reg_908;
wire   [0:0] exitcond4_fu_374_p2;
wire   [14:0] tmp_51_fu_455_p2;
reg   [14:0] tmp_51_reg_913;
wire   [12:0] tmp_44_fu_465_p2;
reg   [12:0] tmp_44_reg_918;
wire   [2:0] w_1_fu_470_p2;
reg   [2:0] w_1_reg_923;
wire   [1:0] n_1_fu_482_p2;
reg   [1:0] n_1_reg_931;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_476_p2;
reg   [7:0] weight_V_load_reg_946;
wire    ap_CS_fsm_state7;
reg   [7:0] shuffleunit1_7_outpu_1_reg_951;
wire   [15:0] p_Val2_5_fu_537_p2;
reg   [15:0] p_Val2_5_reg_956;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_55_reg_961;
wire   [15:0] p_Val2_6_fu_563_p2;
reg   [15:0] p_Val2_6_reg_966;
wire    ap_CS_fsm_state9;
reg   [0:0] signbit_reg_971;
wire   [7:0] p_Val2_8_fu_597_p2;
reg   [7:0] p_Val2_8_reg_978;
wire   [0:0] newsignbit_fu_603_p3;
reg   [0:0] newsignbit_reg_984;
wire   [0:0] carry_fu_617_p2;
reg   [0:0] carry_reg_990;
reg   [1:0] tmp_24_reg_997;
wire   [0:0] p_38_i_i_fu_675_p2;
reg   [0:0] p_38_i_i_reg_1003;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_25_fu_691_p2;
reg   [0:0] tmp_25_reg_1008;
wire   [0:0] brmerge40_demorgan_i_fu_702_p2;
reg   [0:0] brmerge40_demorgan_i_reg_1013;
wire   [0:0] underflow_fu_719_p2;
reg   [0:0] underflow_reg_1018;
wire   [0:0] brmerge_i_i_i_fu_724_p2;
reg   [0:0] brmerge_i_i_i_reg_1023;
wire   [7:0] sum_V_fu_751_p3;
wire    ap_CS_fsm_state11;
reg   [0:0] isneg_reg_1033;
wire    ap_CS_fsm_state12;
wire   [7:0] result_V_fu_781_p2;
reg   [7:0] result_V_reg_1040;
reg   [0:0] newsignbit_2_reg_1046;
reg   [6:0] co_reg_141;
reg   [2:0] h_reg_152;
reg   [2:0] w_reg_164;
wire    ap_CS_fsm_state13;
reg   [7:0] p_Val2_s_reg_176;
reg   [1:0] m_reg_188;
reg   [7:0] p_Val2_4_reg_199;
reg   [1:0] n_reg_211;
wire   [63:0] tmp_fu_234_p1;
wire   [63:0] tmp_62_cast_fu_497_p1;
wire   [63:0] tmp_63_cast_fu_526_p1;
wire   [63:0] tmp_54_cast_fu_842_p1;
wire   [8:0] tmp_s_fu_243_p3;
wire   [9:0] p_shl4_cast_fu_251_p1;
wire   [9:0] tmp_cast_fu_239_p1;
wire   [9:0] tmp_36_fu_255_p2;
wire   [9:0] tmp_37_fu_265_p3;
wire   [7:0] tmp_38_fu_277_p3;
wire   [10:0] p_shl2_cast_fu_273_p1;
wire   [10:0] p_shl3_cast_fu_285_p1;
wire   [10:0] tmp_39_fu_289_p2;
wire   [11:0] tmp_3_cast_fu_319_p1;
wire   [11:0] tmp_41_fu_323_p2;
wire   [9:0] tmp_42_fu_328_p1;
wire   [12:0] p_shl5_cast_fu_332_p3;
wire   [12:0] p_shl6_cast_fu_340_p3;
wire   [10:0] tmp_1_cast_fu_386_p1;
wire   [10:0] tmp_45_fu_390_p2;
wire   [10:0] tmp_46_fu_395_p2;
wire   [1:0] tmp2_fu_407_p2;
wire  signed [3:0] tmp2_cast_fu_413_p1;
wire   [3:0] tmp_8_fu_417_p2;
wire   [10:0] tmp_10_cast_fu_422_p1;
wire   [10:0] tmp_48_fu_426_p2;
wire   [13:0] tmp_49_fu_431_p3;
wire   [11:0] tmp_50_fu_443_p3;
wire   [14:0] p_shl8_cast_fu_451_p1;
wire   [14:0] p_shl7_cast_fu_439_p1;
wire   [12:0] tmp_cast_28_fu_461_p1;
wire   [10:0] tmp_13_cast_fu_488_p1;
wire   [10:0] tmp_52_fu_492_p2;
wire   [1:0] tmp3_fu_502_p2;
wire  signed [3:0] tmp3_cast_fu_508_p1;
wire   [3:0] tmp_15_fu_512_p2;
wire   [14:0] tmp_16_cast_fu_517_p1;
wire   [14:0] tmp_53_fu_521_p2;
wire  signed [7:0] p_Val2_5_fu_537_p0;
wire  signed [7:0] p_Val2_5_fu_537_p1;
wire   [13:0] tmp_18_fu_551_p3;
wire  signed [15:0] tmp_18_cast_fu_559_p1;
wire   [7:0] p_Val2_7_fu_576_p4;
wire   [7:0] tmp_21_fu_586_p1;
wire   [0:0] tmp_56_fu_589_p3;
wire   [0:0] tmp_22_fu_611_p2;
wire   [0:0] Range1_all_ones_fu_640_p2;
wire   [0:0] Range1_all_zeros_fu_645_p2;
wire   [0:0] tmp_58_fu_633_p3;
wire   [0:0] tmp_23_fu_657_p2;
wire   [0:0] p_41_i_i_fu_663_p2;
wire   [0:0] deleted_zeros_fu_650_p3;
wire   [0:0] p_not_i_i_fu_680_p2;
wire   [0:0] brmerge_i_i1_fu_686_p2;
wire   [0:0] deleted_ones_fu_668_p3;
wire   [0:0] tmp4_demorgan_fu_707_p2;
wire   [0:0] tmp4_fu_713_p2;
wire   [0:0] overflow_fu_696_p2;
wire   [0:0] tmp5_fu_730_p2;
wire   [0:0] underflow_not_fu_734_p2;
wire   [7:0] p_Val2_8_mux_fu_739_p3;
wire   [7:0] p_Val2_8_27_fu_745_p3;
wire  signed [8:0] tmp_6_fu_759_p1;
wire  signed [8:0] tmp_7_fu_763_p1;
wire   [8:0] p_Val2_2_fu_767_p2;
wire   [0:0] tmp_12_fu_795_p2;
wire   [0:0] isneg_not_fu_809_p2;
wire   [0:0] brmerge_i_i_fu_805_p2;
wire   [0:0] underflow_2_fu_800_p2;
wire   [0:0] brmerge9_fu_814_p2;
wire   [7:0] result_V_mux_fu_819_p3;
wire   [7:0] p_result_V_fu_826_p3;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_305_p2 == 1'd1))) begin
        co_reg_141 <= co_1_reg_849;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_141 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_222_p2 == 1'd0))) begin
        h_reg_152 <= 3'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_354_p2 == 1'd1))) begin
        h_reg_152 <= h_1_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_476_p2))) begin
        m_reg_188 <= m_1_reg_903;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_354_p2))) begin
        m_reg_188 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        n_reg_211 <= n_1_reg_931;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_374_p2))) begin
        n_reg_211 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_4_reg_199 <= sum_V_fu_751_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_374_p2))) begin
        p_Val2_4_reg_199 <= p_Val2_s_reg_176;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_476_p2))) begin
        p_Val2_s_reg_176 <= p_Val2_4_reg_199;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_354_p2))) begin
        p_Val2_s_reg_176 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_305_p2))) begin
        w_reg_164 <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        w_reg_164 <= w_1_reg_923;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_222_p2 == 1'd0))) begin
        bias_V_addr_reg_869 <= tmp_fu_234_p1;
        tmp_40_reg_864[10 : 1] <= tmp_40_fu_299_p2[10 : 1];
        tmp_43_cast_reg_854 <= tmp_43_cast_fu_261_p1;
        tmp_46_cast_reg_859[11 : 1] <= tmp_46_cast_fu_295_p1[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        brmerge40_demorgan_i_reg_1013 <= brmerge40_demorgan_i_fu_702_p2;
        brmerge_i_i_i_reg_1023 <= brmerge_i_i_i_fu_724_p2;
        p_38_i_i_reg_1003 <= p_38_i_i_fu_675_p2;
        tmp_25_reg_1008 <= tmp_25_fu_691_p2;
        underflow_reg_1018 <= underflow_fu_719_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        carry_reg_990 <= carry_fu_617_p2;
        newsignbit_reg_984 <= p_Val2_8_fu_597_p2[32'd7];
        p_Val2_6_reg_966 <= p_Val2_6_fu_563_p2;
        p_Val2_8_reg_978 <= p_Val2_8_fu_597_p2;
        signbit_reg_971 <= p_Val2_6_fu_563_p2[32'd15];
        tmp_24_reg_997 <= {{p_Val2_6_fu_563_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_1_reg_849 <= co_1_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        isneg_reg_1033 <= p_Val2_2_fu_767_p2[32'd8];
        newsignbit_2_reg_1046 <= result_V_fu_781_p2[32'd7];
        result_V_reg_1040 <= result_V_fu_781_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_1_reg_903 <= m_1_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_1_reg_931 <= n_1_fu_482_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_5_reg_956 <= p_Val2_5_fu_537_p2;
        tmp_55_reg_961 <= p_Val2_5_fu_537_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        shuffleunit1_7_outpu_1_reg_951 <= shuffleunit1_7_outpu_q0;
        weight_V_load_reg_946 <= weight_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_305_p2))) begin
        tmp_2_reg_877[3 : 1] <= tmp_2_fu_311_p3[3 : 1];
        tmp_43_reg_882[12 : 1] <= tmp_43_fu_348_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond4_fu_374_p2))) begin
        tmp_44_reg_918 <= tmp_44_fu_465_p2;
        w_1_reg_923 <= w_1_fu_470_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_374_p2))) begin
        tmp_47_reg_908 <= tmp_47_fu_401_p2;
        tmp_51_reg_913[14 : 1] <= tmp_51_fu_455_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_354_p2))) begin
        tmp_5_reg_890[3 : 1] <= tmp_5_fu_360_p3[3 : 1];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_222_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_222_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        shuffleunit1_7_outpu_ce0 = 1'b1;
    end else begin
        shuffleunit1_7_outpu_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_222_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_305_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_354_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_374_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_476_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_640_p2 = ((tmp_24_reg_997 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_645_p2 = ((tmp_24_reg_997 == 2'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_869;

assign brmerge40_demorgan_i_fu_702_p2 = (newsignbit_reg_984 & deleted_ones_fu_668_p3);

assign brmerge9_fu_814_p2 = (newsignbit_2_reg_1046 | isneg_not_fu_809_p2);

assign brmerge_i_i1_fu_686_p2 = (newsignbit_reg_984 | p_not_i_i_fu_680_p2);

assign brmerge_i_i_fu_805_p2 = (isneg_reg_1033 ^ newsignbit_2_reg_1046);

assign brmerge_i_i_i_fu_724_p2 = (underflow_fu_719_p2 | overflow_fu_696_p2);

assign carry_fu_617_p2 = (tmp_56_fu_589_p3 & tmp_22_fu_611_p2);

assign co_1_fu_228_p2 = (co_reg_141 + 7'd1);

assign deleted_ones_fu_668_p3 = ((carry_reg_990[0:0] === 1'b1) ? p_41_i_i_fu_663_p2 : Range1_all_ones_fu_640_p2);

assign deleted_zeros_fu_650_p3 = ((carry_reg_990[0:0] === 1'b1) ? Range1_all_ones_fu_640_p2 : Range1_all_zeros_fu_645_p2);

assign exitcond1_fu_222_p2 = ((co_reg_141 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond2_fu_305_p2 = ((h_reg_152 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond3_fu_354_p2 = ((w_reg_164 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond4_fu_374_p2 = ((m_reg_188 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_476_p2 = ((n_reg_211 == 2'd3) ? 1'b1 : 1'b0);

assign h_1_fu_368_p2 = (h_reg_152 + 3'd1);

assign isneg_not_fu_809_p2 = (isneg_reg_1033 ^ 1'd1);

assign m_1_fu_380_p2 = (m_reg_188 + 2'd1);

assign n_1_fu_482_p2 = (n_reg_211 + 2'd1);

assign newsignbit_fu_603_p3 = p_Val2_8_fu_597_p2[32'd7];

assign output_V_address0 = tmp_54_cast_fu_842_p1;

assign output_V_d0 = ((brmerge9_fu_814_p2[0:0] === 1'b1) ? result_V_mux_fu_819_p3 : p_result_V_fu_826_p3);

assign overflow_fu_696_p2 = (brmerge_i_i1_fu_686_p2 & tmp_25_fu_691_p2);

assign p_38_i_i_fu_675_p2 = (carry_reg_990 & Range1_all_ones_fu_640_p2);

assign p_41_i_i_fu_663_p2 = (signbit_reg_971 & tmp_23_fu_657_p2);

assign p_Val2_2_fu_767_p2 = ($signed(tmp_6_fu_759_p1) + $signed(tmp_7_fu_763_p1));

assign p_Val2_5_fu_537_p0 = weight_V_load_reg_946;

assign p_Val2_5_fu_537_p1 = shuffleunit1_7_outpu_1_reg_951;

assign p_Val2_5_fu_537_p2 = ($signed(p_Val2_5_fu_537_p0) * $signed(p_Val2_5_fu_537_p1));

assign p_Val2_6_fu_563_p2 = ($signed(tmp_18_cast_fu_559_p1) + $signed(p_Val2_5_reg_956));

assign p_Val2_7_fu_576_p4 = {{p_Val2_6_fu_563_p2[13:6]}};

assign p_Val2_8_27_fu_745_p3 = ((underflow_reg_1018[0:0] === 1'b1) ? 8'd128 : p_Val2_8_reg_978);

assign p_Val2_8_fu_597_p2 = (p_Val2_7_fu_576_p4 + tmp_21_fu_586_p1);

assign p_Val2_8_mux_fu_739_p3 = ((brmerge_i_i_i_reg_1023[0:0] === 1'b1) ? 8'd127 : p_Val2_8_reg_978);

assign p_not_i_i_fu_680_p2 = (deleted_zeros_fu_650_p3 ^ 1'd1);

assign p_result_V_fu_826_p3 = ((underflow_2_fu_800_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_1040);

assign p_shl2_cast_fu_273_p1 = tmp_37_fu_265_p3;

assign p_shl3_cast_fu_285_p1 = tmp_38_fu_277_p3;

assign p_shl4_cast_fu_251_p1 = tmp_s_fu_243_p3;

assign p_shl5_cast_fu_332_p3 = {{tmp_42_fu_328_p1}, {3'd0}};

assign p_shl6_cast_fu_340_p3 = {{tmp_41_fu_323_p2}, {1'd0}};

assign p_shl7_cast_fu_439_p1 = tmp_49_fu_431_p3;

assign p_shl8_cast_fu_451_p1 = tmp_50_fu_443_p3;

assign result_V_fu_781_p2 = (p_Val2_s_reg_176 + bias_V_q0);

assign result_V_mux_fu_819_p3 = ((brmerge_i_i_fu_805_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_1040);

assign shuffleunit1_7_outpu_address0 = tmp_63_cast_fu_526_p1;

assign sum_V_fu_751_p3 = ((underflow_not_fu_734_p2[0:0] === 1'b1) ? p_Val2_8_mux_fu_739_p3 : p_Val2_8_27_fu_745_p3);

assign tmp2_cast_fu_413_p1 = $signed(tmp2_fu_407_p2);

assign tmp2_fu_407_p2 = (m_reg_188 ^ 2'd2);

assign tmp3_cast_fu_508_p1 = $signed(tmp3_fu_502_p2);

assign tmp3_fu_502_p2 = (n_reg_211 ^ 2'd2);

assign tmp4_demorgan_fu_707_p2 = (p_38_i_i_fu_675_p2 | brmerge40_demorgan_i_fu_702_p2);

assign tmp4_fu_713_p2 = (tmp4_demorgan_fu_707_p2 ^ 1'd1);

assign tmp5_fu_730_p2 = (brmerge40_demorgan_i_reg_1013 | tmp_25_reg_1008);

assign tmp_10_cast_fu_422_p1 = tmp_8_fu_417_p2;

assign tmp_12_fu_795_p2 = (newsignbit_2_reg_1046 ^ 1'd1);

assign tmp_13_cast_fu_488_p1 = n_reg_211;

assign tmp_15_fu_512_p2 = ($signed(tmp3_cast_fu_508_p1) + $signed(tmp_5_reg_890));

assign tmp_16_cast_fu_517_p1 = tmp_15_fu_512_p2;

assign tmp_18_cast_fu_559_p1 = $signed(tmp_18_fu_551_p3);

assign tmp_18_fu_551_p3 = {{p_Val2_4_reg_199}, {6'd0}};

assign tmp_1_cast_fu_386_p1 = m_reg_188;

assign tmp_21_fu_586_p1 = tmp_55_reg_961;

assign tmp_22_fu_611_p2 = (newsignbit_fu_603_p3 ^ 1'd1);

assign tmp_23_fu_657_p2 = (tmp_58_fu_633_p3 ^ 1'd1);

assign tmp_25_fu_691_p2 = (signbit_reg_971 ^ 1'd1);

assign tmp_2_fu_311_p3 = {{h_reg_152}, {1'd0}};

assign tmp_36_fu_255_p2 = (p_shl4_cast_fu_251_p1 - tmp_cast_fu_239_p1);

assign tmp_37_fu_265_p3 = {{co_reg_141}, {3'd0}};

assign tmp_38_fu_277_p3 = {{co_reg_141}, {1'd0}};

assign tmp_39_fu_289_p2 = (p_shl2_cast_fu_273_p1 - p_shl3_cast_fu_285_p1);

assign tmp_3_cast_fu_319_p1 = h_reg_152;

assign tmp_40_fu_299_p2 = (p_shl3_cast_fu_285_p1 + p_shl2_cast_fu_273_p1);

assign tmp_41_fu_323_p2 = ($signed(tmp_46_cast_reg_859) + $signed(tmp_3_cast_fu_319_p1));

assign tmp_42_fu_328_p1 = tmp_41_fu_323_p2[9:0];

assign tmp_43_cast_fu_261_p1 = $signed(tmp_36_fu_255_p2);

assign tmp_43_fu_348_p2 = (p_shl5_cast_fu_332_p3 - p_shl6_cast_fu_340_p3);

assign tmp_44_fu_465_p2 = (tmp_43_reg_882 + tmp_cast_28_fu_461_p1);

assign tmp_45_fu_390_p2 = ($signed(tmp_43_cast_reg_854) + $signed(tmp_1_cast_fu_386_p1));

assign tmp_46_cast_fu_295_p1 = $signed(tmp_39_fu_289_p2);

assign tmp_46_fu_395_p2 = tmp_45_fu_390_p2 << 11'd2;

assign tmp_47_fu_401_p2 = (tmp_46_fu_395_p2 - tmp_45_fu_390_p2);

assign tmp_48_fu_426_p2 = (tmp_40_reg_864 + tmp_10_cast_fu_422_p1);

assign tmp_49_fu_431_p3 = {{tmp_48_fu_426_p2}, {3'd0}};

assign tmp_50_fu_443_p3 = {{tmp_48_fu_426_p2}, {1'd0}};

assign tmp_51_fu_455_p2 = (p_shl8_cast_fu_451_p1 + p_shl7_cast_fu_439_p1);

assign tmp_52_fu_492_p2 = (tmp_13_cast_fu_488_p1 + tmp_47_reg_908);

assign tmp_53_fu_521_p2 = (tmp_16_cast_fu_517_p1 + tmp_51_reg_913);

assign tmp_54_cast_fu_842_p1 = tmp_44_reg_918;

assign tmp_56_fu_589_p3 = p_Val2_6_fu_563_p2[32'd13];

assign tmp_58_fu_633_p3 = p_Val2_6_reg_966[32'd14];

assign tmp_5_fu_360_p3 = {{w_reg_164}, {1'd0}};

assign tmp_62_cast_fu_497_p1 = tmp_52_fu_492_p2;

assign tmp_63_cast_fu_526_p1 = tmp_53_fu_521_p2;

assign tmp_6_fu_759_p1 = $signed(p_Val2_s_reg_176);

assign tmp_7_fu_763_p1 = $signed(bias_V_q0);

assign tmp_8_fu_417_p2 = ($signed(tmp_2_reg_877) + $signed(tmp2_cast_fu_413_p1));

assign tmp_cast_28_fu_461_p1 = w_reg_164;

assign tmp_cast_fu_239_p1 = co_reg_141;

assign tmp_fu_234_p1 = co_reg_141;

assign tmp_s_fu_243_p3 = {{co_reg_141}, {2'd0}};

assign underflow_2_fu_800_p2 = (isneg_reg_1033 & tmp_12_fu_795_p2);

assign underflow_fu_719_p2 = (signbit_reg_971 & tmp4_fu_713_p2);

assign underflow_not_fu_734_p2 = (tmp5_fu_730_p2 | p_38_i_i_reg_1003);

assign w_1_fu_470_p2 = (w_reg_164 + 3'd1);

assign weight_V_address0 = tmp_62_cast_fu_497_p1;

always @ (posedge ap_clk) begin
    tmp_46_cast_reg_859[0] <= 1'b0;
    tmp_40_reg_864[0] <= 1'b0;
    tmp_2_reg_877[0] <= 1'b0;
    tmp_43_reg_882[0] <= 1'b0;
    tmp_5_reg_890[0] <= 1'b0;
    tmp_51_reg_913[0] <= 1'b0;
end

endmodule //subconv_3x3_8_stride
