-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_8_stride_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_7_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_2_Downs_7_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_6_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_2_Downs_6_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_2_Downs_5_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_4_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_2_Downs_4_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_2_Downs_3_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_2_Downs_2_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_2_Downs_1_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_2_Downs_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_8_stride_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_1_fu_336_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_1_reg_1023 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_21_cast_fu_369_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_21_cast_reg_1028 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond1_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_cast_fu_403_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_24_cast_reg_1033 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_fu_407_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_12_reg_1038 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_22_fu_445_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_reg_1043 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_V_addr_reg_1048 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_457_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_reg_1056 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond2_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_494_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_25_reg_1061 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_5_fu_506_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_reg_1069 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond3_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_1_fu_514_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_1_fu_526_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_1_reg_1082 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_29_fu_547_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_29_reg_1087 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond4_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_601_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_33_reg_1092 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_26_fu_611_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_26_reg_1097 : STD_LOGIC_VECTOR (12 downto 0);
    signal w_1_fu_616_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_1_reg_1102 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_1_fu_628_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_1_reg_1110 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_load_reg_1160 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_13_fu_684_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_reg_1165 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_5_fu_711_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_5_reg_1170 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_37_reg_1175 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_fu_737_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_6_reg_1180 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal signbit_reg_1185 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_fu_771_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_8_reg_1192 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_777_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_1198 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_1204 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_1211 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_849_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_1217 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_20_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_1222 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_1227 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_1232 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_1237 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_925_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal isneg_reg_1247 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal result_V_fu_955_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_1254 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_1_reg_1260 : STD_LOGIC_VECTOR (0 downto 0);
    signal co_reg_249 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_reg_260 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_272 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_Val2_s_reg_284 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_296 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_4_reg_307 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_319 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_cast_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_cast_fu_672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_cast_fu_1016_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_351_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_cast_fu_359_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_fu_347_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_363_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_373_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_385_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_fu_381_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_393_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_fu_397_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal newIndex_fu_411_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_15_fu_421_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_fu_433_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_429_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_cast_fu_441_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_cast_fu_465_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_23_fu_469_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_24_fu_474_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_cast_fu_478_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl6_cast_fu_486_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1_cast_fu_532_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_27_fu_536_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_28_fu_541_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_fu_553_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_559_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_563_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast_20_fu_568_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_572_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_577_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_fu_589_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl8_cast_fu_597_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl7_cast_fu_585_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_cast_fu_607_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_10_cast_fu_634_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_34_fu_638_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp3_fu_648_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_654_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_658_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_cast_fu_663_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_35_fu_667_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_5_fu_711_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_5_fu_711_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_725_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_17_cast_fu_733_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_7_fu_750_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_760_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_fu_763_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_807_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_837_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_824_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i1_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_842_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_mux_fu_913_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_8_22_fu_919_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_933_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_fu_937_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_2_fu_941_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_988_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_993_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_1000_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component ShuffleNetV2_mux_jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mux_jbC_x_U233 : component ShuffleNetV2_mux_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din1 => ShuffleConvs_2_Downs_7_q0,
        din2 => ShuffleConvs_2_Downs_6_q0,
        din3 => ShuffleConvs_2_Downs_5_q0,
        din4 => ShuffleConvs_2_Downs_4_q0,
        din5 => ShuffleConvs_2_Downs_3_q0,
        din6 => ShuffleConvs_2_Downs_2_q0,
        din7 => ShuffleConvs_2_Downs_1_q0,
        din8 => ShuffleConvs_2_Downs_q0,
        din9 => tmp_12_reg_1038,
        dout => tmp_13_fu_684_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_451_p2 = ap_const_lv1_1))) then 
                co_reg_249 <= co_1_reg_1023;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_249 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    h_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_330_p2 = ap_const_lv1_0))) then 
                h_reg_260 <= ap_const_lv3_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_500_p2 = ap_const_lv1_1))) then 
                h_reg_260 <= h_1_fu_514_p2;
            end if; 
        end if;
    end process;

    m_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_622_p2))) then 
                m_reg_296 <= m_1_reg_1082;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_500_p2))) then 
                m_reg_296 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                n_reg_319 <= n_1_reg_1110;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_520_p2))) then 
                n_reg_319 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_4_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_Val2_4_reg_307 <= sum_V_fu_925_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_520_p2))) then 
                p_Val2_4_reg_307 <= p_Val2_s_reg_284;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_622_p2))) then 
                p_Val2_s_reg_284 <= p_Val2_4_reg_307;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_500_p2))) then 
                p_Val2_s_reg_284 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    w_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_451_p2))) then 
                w_reg_272 <= ap_const_lv3_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                w_reg_272 <= w_1_reg_1102;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_330_p2 = ap_const_lv1_0))) then
                bias_V_addr_reg_1048 <= tmp_fu_342_p1(7 - 1 downto 0);
                tmp_12_reg_1038 <= tmp_12_fu_407_p1;
                tmp_21_cast_reg_1028 <= tmp_21_cast_fu_369_p1;
                    tmp_22_reg_1043(7 downto 1) <= tmp_22_fu_445_p2(7 downto 1);
                    tmp_24_cast_reg_1033(11 downto 1) <= tmp_24_cast_fu_403_p1(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                brmerge40_demorgan_i_reg_1227 <= brmerge40_demorgan_i_fu_876_p2;
                brmerge_i_i_i_reg_1237 <= brmerge_i_i_i_fu_898_p2;
                p_38_i_i_reg_1217 <= p_38_i_i_fu_849_p2;
                tmp_20_reg_1222 <= tmp_20_fu_865_p2;
                underflow_reg_1232 <= underflow_fu_893_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                carry_reg_1204 <= carry_fu_791_p2;
                newsignbit_reg_1198 <= p_Val2_8_fu_771_p2(7 downto 7);
                p_Val2_6_reg_1180 <= p_Val2_6_fu_737_p2;
                p_Val2_8_reg_1192 <= p_Val2_8_fu_771_p2;
                signbit_reg_1185 <= p_Val2_6_fu_737_p2(15 downto 15);
                tmp_19_reg_1211 <= p_Val2_6_fu_737_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_1_reg_1023 <= co_1_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                isneg_reg_1247 <= p_Val2_2_fu_941_p2(8 downto 8);
                newsignbit_1_reg_1260 <= result_V_fu_955_p2(7 downto 7);
                result_V_reg_1254 <= result_V_fu_955_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_1_reg_1082 <= m_1_fu_526_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_1_reg_1110 <= n_1_fu_628_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_5_reg_1170 <= p_Val2_5_fu_711_p2;
                tmp_37_reg_1175 <= p_Val2_5_fu_711_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_13_reg_1165 <= tmp_13_fu_684_p10;
                weight_V_load_reg_1160 <= weight_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_451_p2))) then
                    tmp_25_reg_1061(12 downto 1) <= tmp_25_fu_494_p2(12 downto 1);
                    tmp_2_reg_1056(3 downto 1) <= tmp_2_fu_457_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond4_fu_520_p2))) then
                tmp_26_reg_1097 <= tmp_26_fu_611_p2;
                w_1_reg_1102 <= w_1_fu_616_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_520_p2))) then
                tmp_29_reg_1087 <= tmp_29_fu_547_p2;
                    tmp_33_reg_1092(11 downto 1) <= tmp_33_fu_601_p2(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_500_p2))) then
                    tmp_5_reg_1069(3 downto 1) <= tmp_5_fu_506_p3(3 downto 1);
            end if;
        end if;
    end process;
    tmp_24_cast_reg_1033(0) <= '0';
    tmp_22_reg_1043(0) <= '0';
    tmp_2_reg_1056(0) <= '0';
    tmp_25_reg_1061(0) <= '0';
    tmp_5_reg_1069(0) <= '0';
    tmp_33_reg_1092(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_330_p2, ap_CS_fsm_state3, exitcond2_fu_451_p2, ap_CS_fsm_state4, exitcond3_fu_500_p2, ap_CS_fsm_state5, exitcond4_fu_520_p2, ap_CS_fsm_state6, exitcond_fu_622_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_330_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_451_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_500_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_520_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_622_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_814_p2 <= "1" when (tmp_19_reg_1211 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_819_p2 <= "1" when (tmp_19_reg_1211 = ap_const_lv2_0) else "0";
    ShuffleConvs_2_Downs_1_address0 <= tmp_41_cast_fu_672_p1(11 - 1 downto 0);

    ShuffleConvs_2_Downs_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_1_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_2_address0 <= tmp_41_cast_fu_672_p1(11 - 1 downto 0);

    ShuffleConvs_2_Downs_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_2_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_3_address0 <= tmp_41_cast_fu_672_p1(11 - 1 downto 0);

    ShuffleConvs_2_Downs_3_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_3_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_4_address0 <= tmp_41_cast_fu_672_p1(11 - 1 downto 0);

    ShuffleConvs_2_Downs_4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_4_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_5_address0 <= tmp_41_cast_fu_672_p1(11 - 1 downto 0);

    ShuffleConvs_2_Downs_5_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_5_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_6_address0 <= tmp_41_cast_fu_672_p1(11 - 1 downto 0);

    ShuffleConvs_2_Downs_6_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_6_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_7_address0 <= tmp_41_cast_fu_672_p1(11 - 1 downto 0);

    ShuffleConvs_2_Downs_7_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_7_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_address0 <= tmp_41_cast_fu_672_p1(11 - 1 downto 0);

    ShuffleConvs_2_Downs_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_330_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_330_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_330_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_330_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_1048;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_876_p2 <= (newsignbit_reg_1198 and deleted_ones_fu_842_p3);
    brmerge9_fu_988_p2 <= (newsignbit_1_reg_1260 or isneg_not_fu_983_p2);
    brmerge_i_i1_fu_860_p2 <= (newsignbit_reg_1198 or p_not_i_i_fu_854_p2);
    brmerge_i_i_fu_979_p2 <= (isneg_reg_1247 xor newsignbit_1_reg_1260);
    brmerge_i_i_i_fu_898_p2 <= (underflow_fu_893_p2 or overflow_fu_870_p2);
    carry_fu_791_p2 <= (tmp_38_fu_763_p3 and tmp_17_fu_785_p2);
    co_1_fu_336_p2 <= std_logic_vector(unsigned(co_reg_249) + unsigned(ap_const_lv7_1));
    deleted_ones_fu_842_p3 <= 
        p_41_i_i_fu_837_p2 when (carry_reg_1204(0) = '1') else 
        Range1_all_ones_fu_814_p2;
    deleted_zeros_fu_824_p3 <= 
        Range1_all_ones_fu_814_p2 when (carry_reg_1204(0) = '1') else 
        Range1_all_zeros_fu_819_p2;
    exitcond1_fu_330_p2 <= "1" when (co_reg_249 = ap_const_lv7_60) else "0";
    exitcond2_fu_451_p2 <= "1" when (h_reg_260 = ap_const_lv3_5) else "0";
    exitcond3_fu_500_p2 <= "1" when (w_reg_272 = ap_const_lv3_5) else "0";
    exitcond4_fu_520_p2 <= "1" when (m_reg_296 = ap_const_lv2_3) else "0";
    exitcond_fu_622_p2 <= "1" when (n_reg_319 = ap_const_lv2_3) else "0";
    h_1_fu_514_p2 <= std_logic_vector(unsigned(h_reg_260) + unsigned(ap_const_lv3_1));
    isneg_not_fu_983_p2 <= (isneg_reg_1247 xor ap_const_lv1_1);
    m_1_fu_526_p2 <= std_logic_vector(unsigned(m_reg_296) + unsigned(ap_const_lv2_1));
    n_1_fu_628_p2 <= std_logic_vector(unsigned(n_reg_319) + unsigned(ap_const_lv2_1));
    newIndex_fu_411_p4 <= co_reg_249(6 downto 3);
    newsignbit_fu_777_p3 <= p_Val2_8_fu_771_p2(7 downto 7);
    output_V_address0 <= tmp_32_cast_fu_1016_p1(12 - 1 downto 0);

    output_V_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= 
        result_V_mux_fu_993_p3 when (brmerge9_fu_988_p2(0) = '1') else 
        p_result_V_fu_1000_p3;

    output_V_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_870_p2 <= (brmerge_i_i1_fu_860_p2 and tmp_20_fu_865_p2);
    p_38_i_i_fu_849_p2 <= (carry_reg_1204 and Range1_all_ones_fu_814_p2);
    p_41_i_i_fu_837_p2 <= (signbit_reg_1185 and tmp_18_fu_831_p2);
    p_Val2_2_fu_941_p2 <= std_logic_vector(signed(tmp_6_fu_933_p1) + signed(tmp_7_fu_937_p1));
    p_Val2_5_fu_711_p0 <= weight_V_load_reg_1160;
    p_Val2_5_fu_711_p1 <= tmp_13_reg_1165;
    p_Val2_5_fu_711_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_5_fu_711_p0) * signed(p_Val2_5_fu_711_p1))), 16));
    p_Val2_6_fu_737_p2 <= std_logic_vector(signed(tmp_17_cast_fu_733_p1) + signed(p_Val2_5_reg_1170));
    p_Val2_7_fu_750_p4 <= p_Val2_6_fu_737_p2(13 downto 6);
    p_Val2_8_22_fu_919_p3 <= 
        ap_const_lv8_80 when (underflow_reg_1232(0) = '1') else 
        p_Val2_8_reg_1192;
    p_Val2_8_fu_771_p2 <= std_logic_vector(unsigned(p_Val2_7_fu_750_p4) + unsigned(tmp_16_fu_760_p1));
    p_Val2_8_mux_fu_913_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_1237(0) = '1') else 
        p_Val2_8_reg_1192;
    p_not_i_i_fu_854_p2 <= (deleted_zeros_fu_824_p3 xor ap_const_lv1_1);
    p_result_V_fu_1000_p3 <= 
        ap_const_lv8_80 when (underflow_1_fu_974_p2(0) = '1') else 
        result_V_reg_1254;
    p_shl1_cast_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_433_p3),8));
    p_shl2_cast_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_373_p3),11));
    p_shl3_cast_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_385_p3),11));
    p_shl4_cast_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_351_p3),10));
    p_shl5_cast_fu_478_p3 <= (tmp_24_fu_474_p1 & ap_const_lv3_0);
    p_shl6_cast_fu_486_p3 <= (tmp_23_fu_469_p2 & ap_const_lv1_0);
    p_shl7_cast_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_577_p3),12));
    p_shl8_cast_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_589_p3),12));
    p_shl_cast_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_421_p3),8));
    result_V_fu_955_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_284) + unsigned(bias_V_q0));
    result_V_mux_fu_993_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_979_p2(0) = '1') else 
        result_V_reg_1254;
    sum_V_fu_925_p3 <= 
        p_Val2_8_mux_fu_913_p3 when (underflow_not_fu_908_p2(0) = '1') else 
        p_Val2_8_22_fu_919_p3;
        tmp2_cast_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_553_p2),4));

    tmp2_fu_553_p2 <= (m_reg_296 xor ap_const_lv2_2);
        tmp3_cast_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_648_p2),4));

    tmp3_fu_648_p2 <= (n_reg_319 xor ap_const_lv2_2);
    tmp4_demorgan_fu_881_p2 <= (p_38_i_i_fu_849_p2 or brmerge40_demorgan_i_fu_876_p2);
    tmp4_fu_887_p2 <= (tmp4_demorgan_fu_881_p2 xor ap_const_lv1_1);
    tmp5_fu_904_p2 <= (brmerge40_demorgan_i_reg_1227 or tmp_20_reg_1222);
    tmp_10_cast_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_319),11));
    tmp_10_fu_397_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_381_p1) - unsigned(p_shl3_cast_fu_393_p1));
    tmp_11_fu_658_p2 <= std_logic_vector(signed(tmp3_cast_fu_654_p1) + signed(tmp_5_reg_1069));
    tmp_12_cast_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_658_p2),12));
    tmp_12_fu_407_p1 <= co_reg_249(3 - 1 downto 0);
    tmp_14_fu_725_p3 <= (p_Val2_4_reg_307 & ap_const_lv6_0);
    tmp_15_fu_421_p3 <= (newIndex_fu_411_p4 & ap_const_lv3_0);
    tmp_16_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_reg_1175),8));
        tmp_17_cast_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_fu_725_p3),16));

    tmp_17_fu_785_p2 <= (newsignbit_fu_777_p3 xor ap_const_lv1_1);
    tmp_18_fu_831_p2 <= (tmp_40_fu_807_p3 xor ap_const_lv1_1);
    tmp_1_cast_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_296),11));
    tmp_1_fu_363_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_359_p1) - unsigned(tmp_cast_fu_347_p1));
    tmp_20_fu_865_p2 <= (signbit_reg_1185 xor ap_const_lv1_1);
        tmp_21_cast_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_363_p2),11));

    tmp_21_fu_433_p3 <= (newIndex_fu_411_p4 & ap_const_lv1_0);
    tmp_22_fu_445_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_429_p1) + unsigned(p_shl1_cast_fu_441_p1));
    tmp_23_fu_469_p2 <= std_logic_vector(signed(tmp_24_cast_reg_1033) + signed(tmp_3_cast_fu_465_p1));
        tmp_24_cast_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_397_p2),12));

    tmp_24_fu_474_p1 <= tmp_23_fu_469_p2(10 - 1 downto 0);
    tmp_25_fu_494_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_478_p3) - unsigned(p_shl6_cast_fu_486_p3));
    tmp_26_fu_611_p2 <= std_logic_vector(unsigned(tmp_25_reg_1061) + unsigned(tmp_9_cast_fu_607_p1));
    tmp_27_fu_536_p2 <= std_logic_vector(signed(tmp_21_cast_reg_1028) + signed(tmp_1_cast_fu_532_p1));
    tmp_28_fu_541_p2 <= std_logic_vector(shift_left(unsigned(tmp_27_fu_536_p2),to_integer(unsigned('0' & ap_const_lv11_2(11-1 downto 0)))));
    tmp_29_fu_547_p2 <= std_logic_vector(unsigned(tmp_28_fu_541_p2) - unsigned(tmp_27_fu_536_p2));
    tmp_2_fu_457_p3 <= (h_reg_260 & ap_const_lv1_0);
    tmp_30_fu_572_p2 <= std_logic_vector(unsigned(tmp_22_reg_1043) + unsigned(tmp_cast_20_fu_568_p1));
    tmp_31_fu_577_p3 <= (tmp_30_fu_572_p2 & ap_const_lv3_0);
    tmp_32_cast_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_reg_1097),64));
    tmp_32_fu_589_p3 <= (tmp_30_fu_572_p2 & ap_const_lv1_0);
    tmp_33_fu_601_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_597_p1) + unsigned(p_shl7_cast_fu_585_p1));
    tmp_34_fu_638_p2 <= std_logic_vector(unsigned(tmp_10_cast_fu_634_p1) + unsigned(tmp_29_reg_1087));
    tmp_35_fu_667_p2 <= std_logic_vector(unsigned(tmp_12_cast_fu_663_p1) + unsigned(tmp_33_reg_1092));
    tmp_38_fu_763_p3 <= p_Val2_6_fu_737_p2(13 downto 13);
    tmp_3_cast_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_260),12));
    tmp_3_fu_373_p3 <= (co_reg_249 & ap_const_lv3_0);
    tmp_40_cast_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_638_p2),64));
    tmp_40_fu_807_p3 <= p_Val2_6_reg_1180(14 downto 14);
    tmp_41_cast_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_667_p2),64));
    tmp_4_fu_969_p2 <= (newsignbit_1_reg_1260 xor ap_const_lv1_1);
    tmp_5_fu_506_p3 <= (w_reg_272 & ap_const_lv1_0);
        tmp_6_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_284),9));

        tmp_7_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    tmp_8_fu_563_p2 <= std_logic_vector(unsigned(tmp_2_reg_1056) + unsigned(tmp2_cast_fu_559_p1));
    tmp_9_cast_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_272),13));
    tmp_9_fu_385_p3 <= (co_reg_249 & ap_const_lv1_0);
    tmp_cast_20_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_563_p2),8));
    tmp_cast_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_249),10));
    tmp_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_249),64));
    tmp_s_fu_351_p3 <= (co_reg_249 & ap_const_lv2_0);
    underflow_1_fu_974_p2 <= (isneg_reg_1247 and tmp_4_fu_969_p2);
    underflow_fu_893_p2 <= (signbit_reg_1185 and tmp4_fu_887_p2);
    underflow_not_fu_908_p2 <= (tmp5_fu_904_p2 or p_38_i_i_reg_1217);
    w_1_fu_616_p2 <= std_logic_vector(unsigned(w_reg_272) + unsigned(ap_const_lv3_1));
    weight_V_address0 <= tmp_40_cast_fu_643_p1(10 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
