-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_32_strid is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_0_V_ce0 : OUT STD_LOGIC;
    input_0_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_1_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_1_V_ce0 : OUT STD_LOGIC;
    input_1_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_2_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_2_V_ce0 : OUT STD_LOGIC;
    input_2_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_3_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_3_V_ce0 : OUT STD_LOGIC;
    input_3_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_4_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_4_V_ce0 : OUT STD_LOGIC;
    input_4_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_5_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_5_V_ce0 : OUT STD_LOGIC;
    input_5_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_6_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_6_V_ce0 : OUT STD_LOGIC;
    input_6_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_7_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_7_V_ce0 : OUT STD_LOGIC;
    input_7_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_32_strid is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_4_fu_334_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_4_reg_1013 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_109_cast_fu_367_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_109_cast_reg_1018 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond4_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_100_fu_395_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_100_reg_1023 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_101_fu_401_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_101_reg_1028 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_104_fu_439_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_104_reg_1033 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_V_addr_reg_1038 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_451_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_reg_1046 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond5_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_107_fu_488_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_107_reg_1051 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_61_fu_500_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_61_reg_1059 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond6_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_4_fu_508_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_4_fu_520_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_4_reg_1072 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_111_fu_541_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_111_reg_1077 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond7_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_114_fu_591_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_114_reg_1082 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_108_fu_601_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_108_reg_1087 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_4_fu_606_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_4_reg_1092 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_4_fu_618_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_4_reg_1100 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_load_reg_1150 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_59_fu_674_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_59_reg_1155 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_3_fu_701_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_3_reg_1160 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_118_reg_1165 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_29_fu_727_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_29_reg_1170 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal signbit_reg_1175 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_31_fu_761_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_31_reg_1182 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_767_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_1188 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_1194 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_75_reg_1201 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_1207 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_77_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_reg_1212 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_1217 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_1222 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_1227 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_915_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal isneg_reg_1237 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal result_V_fu_945_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_1244 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_5_reg_1250 : STD_LOGIC_VECTOR (0 downto 0);
    signal co_reg_247 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_258 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_270 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_Val2_s_reg_282 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_294 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_28_reg_305 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_317 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_128_cast_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_cast_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_120_cast_fu_1006_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_96_fu_349_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl4_cast_fu_357_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_fu_345_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_97_fu_361_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_98_fu_371_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_99_fu_383_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_cast_fu_379_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_cast_fu_391_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal newIndex_fu_405_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_102_fu_415_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_103_fu_427_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_cast_fu_423_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_cast_fu_435_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_cast_fu_459_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_105_fu_463_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_106_fu_476_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_fu_484_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl5_cast_fu_468_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_66_cast_fu_526_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_109_fu_530_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_110_fu_535_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_547_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_553_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_67_fu_557_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_68_cast_fu_562_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_112_fu_566_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_113_fu_579_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl8_cast_fu_587_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl7_cast_fu_571_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_65_cast_fu_597_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_69_cast_fu_624_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_115_fu_628_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp3_fu_638_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_644_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_70_fu_648_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_71_cast_fu_653_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_116_fu_657_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_3_fu_701_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_3_fu_701_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_72_fu_715_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_89_cast_fu_723_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_30_fu_740_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_73_fu_750_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_119_fu_753_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_121_fu_797_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_814_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i4_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_832_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_32_mux_fu_903_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_45_fu_909_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_62_fu_923_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_63_fu_927_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_26_fu_931_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_64_fu_959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_5_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_983_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_990_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component ShuffleNetV2_mux_jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mux_jbC_x_U43 : component ShuffleNetV2_mux_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din1 => input_0_V_q0,
        din2 => input_1_V_q0,
        din3 => input_2_V_q0,
        din4 => input_3_V_q0,
        din5 => input_4_V_q0,
        din6 => input_5_V_q0,
        din7 => input_6_V_q0,
        din8 => input_7_V_q0,
        din9 => tmp_101_reg_1028,
        dout => tmp_59_fu_674_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond5_fu_445_p2 = ap_const_lv1_1))) then 
                co_reg_247 <= co_4_reg_1013;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_247 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_328_p2 = ap_const_lv1_0))) then 
                h_reg_258 <= ap_const_lv5_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_494_p2 = ap_const_lv1_1))) then 
                h_reg_258 <= h_4_fu_508_p2;
            end if; 
        end if;
    end process;

    m_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_612_p2))) then 
                m_reg_294 <= m_4_reg_1072;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_494_p2))) then 
                m_reg_294 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                n_reg_317 <= n_4_reg_1100;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond7_fu_514_p2))) then 
                n_reg_317 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_28_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_Val2_28_reg_305 <= sum_V_fu_915_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond7_fu_514_p2))) then 
                p_Val2_28_reg_305 <= p_Val2_s_reg_282;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_612_p2))) then 
                p_Val2_s_reg_282 <= p_Val2_28_reg_305;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_494_p2))) then 
                p_Val2_s_reg_282 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    w_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond5_fu_445_p2))) then 
                w_reg_270 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                w_reg_270 <= w_4_reg_1092;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_328_p2 = ap_const_lv1_0))) then
                bias_V_addr_reg_1038 <= tmp_fu_340_p1(5 - 1 downto 0);
                    tmp_100_reg_1023(9 downto 1) <= tmp_100_fu_395_p2(9 downto 1);
                tmp_101_reg_1028 <= tmp_101_fu_401_p1;
                    tmp_104_reg_1033(7 downto 1) <= tmp_104_fu_439_p2(7 downto 1);
                tmp_109_cast_reg_1018 <= tmp_109_cast_fu_367_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                brmerge40_demorgan_i_reg_1217 <= brmerge40_demorgan_i_fu_866_p2;
                brmerge_i_i_i_reg_1227 <= brmerge_i_i_i_fu_888_p2;
                p_38_i_i_reg_1207 <= p_38_i_i_fu_839_p2;
                tmp_77_reg_1212 <= tmp_77_fu_855_p2;
                underflow_reg_1222 <= underflow_fu_883_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                carry_reg_1194 <= carry_fu_781_p2;
                newsignbit_reg_1188 <= p_Val2_31_fu_761_p2(7 downto 7);
                p_Val2_29_reg_1170 <= p_Val2_29_fu_727_p2;
                p_Val2_31_reg_1182 <= p_Val2_31_fu_761_p2;
                signbit_reg_1175 <= p_Val2_29_fu_727_p2(15 downto 15);
                tmp_75_reg_1201 <= p_Val2_29_fu_727_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_4_reg_1013 <= co_4_fu_334_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                isneg_reg_1237 <= p_Val2_26_fu_931_p2(8 downto 8);
                newsignbit_5_reg_1250 <= result_V_fu_945_p2(7 downto 7);
                result_V_reg_1244 <= result_V_fu_945_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_4_reg_1072 <= m_4_fu_520_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_4_reg_1100 <= n_4_fu_618_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_3_reg_1160 <= p_Val2_3_fu_701_p2;
                tmp_118_reg_1165 <= p_Val2_3_fu_701_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond5_fu_445_p2))) then
                    tmp_107_reg_1051(13 downto 1) <= tmp_107_fu_488_p2(13 downto 1);
                    tmp_s_reg_1046(5 downto 1) <= tmp_s_fu_451_p3(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond7_fu_514_p2))) then
                tmp_108_reg_1087 <= tmp_108_fu_601_p2;
                w_4_reg_1092 <= w_4_fu_606_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond7_fu_514_p2))) then
                tmp_111_reg_1077 <= tmp_111_fu_541_p2;
                    tmp_114_reg_1082(12 downto 1) <= tmp_114_fu_591_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_59_reg_1155 <= tmp_59_fu_674_p10;
                weight_V_load_reg_1150 <= weight_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_494_p2))) then
                    tmp_61_reg_1059(5 downto 1) <= tmp_61_fu_500_p3(5 downto 1);
            end if;
        end if;
    end process;
    tmp_100_reg_1023(0) <= '0';
    tmp_104_reg_1033(0) <= '0';
    tmp_s_reg_1046(0) <= '0';
    tmp_107_reg_1051(0) <= '0';
    tmp_61_reg_1059(0) <= '0';
    tmp_114_reg_1082(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_328_p2, ap_CS_fsm_state3, exitcond5_fu_445_p2, ap_CS_fsm_state4, exitcond6_fu_494_p2, ap_CS_fsm_state5, exitcond7_fu_514_p2, ap_CS_fsm_state6, exitcond_fu_612_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_328_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond5_fu_445_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_494_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond7_fu_514_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_612_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_804_p2 <= "1" when (tmp_75_reg_1201 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_809_p2 <= "1" when (tmp_75_reg_1201 = ap_const_lv2_0) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_328_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_328_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_328_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_328_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_1038;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_866_p2 <= (newsignbit_reg_1188 and deleted_ones_fu_832_p3);
    brmerge9_fu_978_p2 <= (newsignbit_5_reg_1250 or isneg_not_fu_973_p2);
    brmerge_i_i4_fu_850_p2 <= (newsignbit_reg_1188 or p_not_i_i_fu_844_p2);
    brmerge_i_i_fu_969_p2 <= (isneg_reg_1237 xor newsignbit_5_reg_1250);
    brmerge_i_i_i_fu_888_p2 <= (underflow_fu_883_p2 or overflow_fu_860_p2);
    carry_fu_781_p2 <= (tmp_119_fu_753_p3 and tmp_74_fu_775_p2);
    co_4_fu_334_p2 <= std_logic_vector(unsigned(co_reg_247) + unsigned(ap_const_lv5_1));
    deleted_ones_fu_832_p3 <= 
        p_41_i_i_fu_827_p2 when (carry_reg_1194(0) = '1') else 
        Range1_all_ones_fu_804_p2;
    deleted_zeros_fu_814_p3 <= 
        Range1_all_ones_fu_804_p2 when (carry_reg_1194(0) = '1') else 
        Range1_all_zeros_fu_809_p2;
    exitcond4_fu_328_p2 <= "1" when (co_reg_247 = ap_const_lv5_18) else "0";
    exitcond5_fu_445_p2 <= "1" when (h_reg_258 = ap_const_lv5_11) else "0";
    exitcond6_fu_494_p2 <= "1" when (w_reg_270 = ap_const_lv5_11) else "0";
    exitcond7_fu_514_p2 <= "1" when (m_reg_294 = ap_const_lv2_3) else "0";
    exitcond_fu_612_p2 <= "1" when (n_reg_317 = ap_const_lv2_3) else "0";
    h_4_fu_508_p2 <= std_logic_vector(unsigned(h_reg_258) + unsigned(ap_const_lv5_1));
    input_0_V_address0 <= tmp_129_cast_fu_662_p1(12 - 1 downto 0);

    input_0_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_0_V_ce0 <= ap_const_logic_1;
        else 
            input_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_V_address0 <= tmp_129_cast_fu_662_p1(12 - 1 downto 0);

    input_1_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_1_V_ce0 <= ap_const_logic_1;
        else 
            input_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_2_V_address0 <= tmp_129_cast_fu_662_p1(12 - 1 downto 0);

    input_2_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_2_V_ce0 <= ap_const_logic_1;
        else 
            input_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_3_V_address0 <= tmp_129_cast_fu_662_p1(12 - 1 downto 0);

    input_3_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_3_V_ce0 <= ap_const_logic_1;
        else 
            input_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_4_V_address0 <= tmp_129_cast_fu_662_p1(12 - 1 downto 0);

    input_4_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_4_V_ce0 <= ap_const_logic_1;
        else 
            input_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_5_V_address0 <= tmp_129_cast_fu_662_p1(12 - 1 downto 0);

    input_5_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_5_V_ce0 <= ap_const_logic_1;
        else 
            input_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_6_V_address0 <= tmp_129_cast_fu_662_p1(12 - 1 downto 0);

    input_6_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_6_V_ce0 <= ap_const_logic_1;
        else 
            input_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_7_V_address0 <= tmp_129_cast_fu_662_p1(12 - 1 downto 0);

    input_7_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_7_V_ce0 <= ap_const_logic_1;
        else 
            input_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isneg_not_fu_973_p2 <= (isneg_reg_1237 xor ap_const_lv1_1);
    m_4_fu_520_p2 <= std_logic_vector(unsigned(m_reg_294) + unsigned(ap_const_lv2_1));
    n_4_fu_618_p2 <= std_logic_vector(unsigned(n_reg_317) + unsigned(ap_const_lv2_1));
    newIndex_fu_405_p4 <= co_reg_247(4 downto 3);
    newsignbit_fu_767_p3 <= p_Val2_31_fu_761_p2(7 downto 7);
    output_V_address0 <= tmp_120_cast_fu_1006_p1(13 - 1 downto 0);

    output_V_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= 
        result_V_mux_fu_983_p3 when (brmerge9_fu_978_p2(0) = '1') else 
        p_result_V_fu_990_p3;

    output_V_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_860_p2 <= (brmerge_i_i4_fu_850_p2 and tmp_77_fu_855_p2);
    p_38_i_i_fu_839_p2 <= (carry_reg_1194 and Range1_all_ones_fu_804_p2);
    p_41_i_i_fu_827_p2 <= (signbit_reg_1175 and tmp_76_fu_821_p2);
    p_Val2_26_fu_931_p2 <= std_logic_vector(signed(tmp_62_fu_923_p1) + signed(tmp_63_fu_927_p1));
    p_Val2_29_fu_727_p2 <= std_logic_vector(signed(tmp_89_cast_fu_723_p1) + signed(p_Val2_3_reg_1160));
    p_Val2_30_fu_740_p4 <= p_Val2_29_fu_727_p2(13 downto 6);
    p_Val2_31_fu_761_p2 <= std_logic_vector(unsigned(p_Val2_30_fu_740_p4) + unsigned(tmp_73_fu_750_p1));
    p_Val2_32_mux_fu_903_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_1227(0) = '1') else 
        p_Val2_31_reg_1182;
    p_Val2_3_fu_701_p0 <= weight_V_load_reg_1150;
    p_Val2_3_fu_701_p1 <= tmp_59_reg_1155;
    p_Val2_3_fu_701_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_3_fu_701_p0) * signed(p_Val2_3_fu_701_p1))), 16));
    p_Val2_s_45_fu_909_p3 <= 
        ap_const_lv8_80 when (underflow_reg_1222(0) = '1') else 
        p_Val2_31_reg_1182;
    p_not_i_i_fu_844_p2 <= (deleted_zeros_fu_814_p3 xor ap_const_lv1_1);
    p_result_V_fu_990_p3 <= 
        ap_const_lv8_80 when (underflow_5_fu_964_p2(0) = '1') else 
        result_V_reg_1244;
    p_shl1_cast_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_103_fu_427_p3),8));
    p_shl2_cast_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_98_fu_371_p3),10));
    p_shl3_cast_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_99_fu_383_p3),10));
    p_shl4_cast_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_96_fu_349_p3),8));
    p_shl5_cast_fu_468_p3 <= (tmp_105_fu_463_p2 & ap_const_lv4_0);
    p_shl6_cast_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_106_fu_476_p3),14));
    p_shl7_cast_fu_571_p3 <= (tmp_112_fu_566_p2 & ap_const_lv5_0);
    p_shl8_cast_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_113_fu_579_p3),13));
    p_shl_cast_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_102_fu_415_p3),8));
    result_V_fu_945_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_282) + unsigned(bias_V_q0));
    result_V_mux_fu_983_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_969_p2(0) = '1') else 
        result_V_reg_1244;
    sum_V_fu_915_p3 <= 
        p_Val2_32_mux_fu_903_p3 when (underflow_not_fu_898_p2(0) = '1') else 
        p_Val2_s_45_fu_909_p3;
        tmp2_cast_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_547_p2),6));

    tmp2_fu_547_p2 <= (m_reg_294 xor ap_const_lv2_2);
        tmp3_cast_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_638_p2),6));

    tmp3_fu_638_p2 <= (n_reg_317 xor ap_const_lv2_2);
    tmp4_demorgan_fu_871_p2 <= (p_38_i_i_fu_839_p2 or brmerge40_demorgan_i_fu_866_p2);
    tmp4_fu_877_p2 <= (tmp4_demorgan_fu_871_p2 xor ap_const_lv1_1);
    tmp5_fu_894_p2 <= (brmerge40_demorgan_i_reg_1217 or tmp_77_reg_1212);
    tmp_100_fu_395_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_379_p1) + unsigned(p_shl3_cast_fu_391_p1));
    tmp_101_fu_401_p1 <= co_reg_247(3 - 1 downto 0);
    tmp_102_fu_415_p3 <= (newIndex_fu_405_p4 & ap_const_lv5_0);
    tmp_103_fu_427_p3 <= (newIndex_fu_405_p4 & ap_const_lv1_0);
    tmp_104_fu_439_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_423_p1) + unsigned(p_shl1_cast_fu_435_p1));
    tmp_105_fu_463_p2 <= std_logic_vector(unsigned(tmp_100_reg_1023) + unsigned(tmp_60_cast_fu_459_p1));
    tmp_106_fu_476_p3 <= (tmp_105_fu_463_p2 & ap_const_lv1_0);
    tmp_107_fu_488_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_484_p1) + unsigned(p_shl5_cast_fu_468_p3));
    tmp_108_fu_601_p2 <= std_logic_vector(unsigned(tmp_107_reg_1051) + unsigned(tmp_65_cast_fu_597_p1));
        tmp_109_cast_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_97_fu_361_p2),9));

    tmp_109_fu_530_p2 <= std_logic_vector(signed(tmp_109_cast_reg_1018) + signed(tmp_66_cast_fu_526_p1));
    tmp_110_fu_535_p2 <= std_logic_vector(shift_left(unsigned(tmp_109_fu_530_p2),to_integer(unsigned('0' & ap_const_lv9_2(9-1 downto 0)))));
    tmp_111_fu_541_p2 <= std_logic_vector(unsigned(tmp_110_fu_535_p2) - unsigned(tmp_109_fu_530_p2));
    tmp_112_fu_566_p2 <= std_logic_vector(unsigned(tmp_104_reg_1033) + unsigned(tmp_68_cast_fu_562_p1));
    tmp_113_fu_579_p3 <= (tmp_112_fu_566_p2 & ap_const_lv1_0);
    tmp_114_fu_591_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_587_p1) + unsigned(p_shl7_cast_fu_571_p3));
    tmp_115_fu_628_p2 <= std_logic_vector(unsigned(tmp_69_cast_fu_624_p1) + unsigned(tmp_111_reg_1077));
    tmp_116_fu_657_p2 <= std_logic_vector(unsigned(tmp_71_cast_fu_653_p1) + unsigned(tmp_114_reg_1082));
    tmp_119_fu_753_p3 <= p_Val2_29_fu_727_p2(13 downto 13);
    tmp_120_cast_fu_1006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_108_reg_1087),64));
    tmp_121_fu_797_p3 <= p_Val2_29_reg_1170(14 downto 14);
    tmp_128_cast_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_115_fu_628_p2),64));
    tmp_129_cast_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_fu_657_p2),64));
    tmp_60_cast_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_258),10));
    tmp_61_fu_500_p3 <= (w_reg_270 & ap_const_lv1_0);
        tmp_62_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_282),9));

        tmp_63_fu_927_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    tmp_64_fu_959_p2 <= (newsignbit_5_reg_1250 xor ap_const_lv1_1);
    tmp_65_cast_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_270),14));
    tmp_66_cast_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_294),9));
    tmp_67_fu_557_p2 <= std_logic_vector(unsigned(tmp_s_reg_1046) + unsigned(tmp2_cast_fu_553_p1));
    tmp_68_cast_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_fu_557_p2),8));
    tmp_69_cast_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_317),9));
    tmp_70_fu_648_p2 <= std_logic_vector(signed(tmp3_cast_fu_644_p1) + signed(tmp_61_reg_1059));
    tmp_71_cast_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_70_fu_648_p2),13));
    tmp_72_fu_715_p3 <= (p_Val2_28_reg_305 & ap_const_lv6_0);
    tmp_73_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_118_reg_1165),8));
    tmp_74_fu_775_p2 <= (newsignbit_fu_767_p3 xor ap_const_lv1_1);
    tmp_76_fu_821_p2 <= (tmp_121_fu_797_p3 xor ap_const_lv1_1);
    tmp_77_fu_855_p2 <= (signbit_reg_1175 xor ap_const_lv1_1);
        tmp_89_cast_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_72_fu_715_p3),16));

    tmp_96_fu_349_p3 <= (co_reg_247 & ap_const_lv2_0);
    tmp_97_fu_361_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_357_p1) - unsigned(tmp_cast_fu_345_p1));
    tmp_98_fu_371_p3 <= (co_reg_247 & ap_const_lv4_0);
    tmp_99_fu_383_p3 <= (co_reg_247 & ap_const_lv1_0);
    tmp_cast_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_247),8));
    tmp_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_247),64));
    tmp_s_fu_451_p3 <= (h_reg_258 & ap_const_lv1_0);
    underflow_5_fu_964_p2 <= (isneg_reg_1237 and tmp_64_fu_959_p2);
    underflow_fu_883_p2 <= (signbit_reg_1175 and tmp4_fu_877_p2);
    underflow_not_fu_898_p2 <= (tmp5_fu_894_p2 or p_38_i_i_reg_1207);
    w_4_fu_606_p2 <= std_logic_vector(unsigned(w_reg_270) + unsigned(ap_const_lv5_1));
    weight_V_address0 <= tmp_128_cast_fu_633_p1(8 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
