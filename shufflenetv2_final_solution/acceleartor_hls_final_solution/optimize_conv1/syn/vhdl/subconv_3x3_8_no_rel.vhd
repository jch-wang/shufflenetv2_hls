-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_8_no_rel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_48_8x8_p_V_8_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_48_8x8_p_V_1_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_48_8x8_p_V_2_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_48_8x8_p_V_3_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_48_8x8_p_V_4_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_48_8x8_p_V_5_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_48_8x8_p_V_6_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_48_8x8_p_V_7_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_8_no_rel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_2_fu_330_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal co_2_reg_999 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_65_cast_fu_363_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_65_cast_reg_1004 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond5_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_391_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_57_reg_1009 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_59_fu_397_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_59_reg_1014 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_61_fu_435_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_61_reg_1019 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias_V_addr_reg_1024 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_65_fu_480_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_65_reg_1032 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond6_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_2_fu_492_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond7_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_2_fu_504_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_2_reg_1048 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_67_fu_514_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_67_reg_1053 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond8_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_fu_539_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_70_reg_1059 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_69_fu_549_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_69_reg_1065 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_73_fu_576_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_73_reg_1070 : STD_LOGIC_VECTOR (10 downto 0);
    signal n_2_fu_588_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_2_reg_1078 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_75_fu_628_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_75_reg_1088 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal weight_V_load_reg_1133 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_644_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_reg_1138 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_Val2_1_fu_671_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_reg_1143 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_77_reg_1148 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_15_fu_697_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_15_reg_1153 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal signbit_reg_1158 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_17_fu_731_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_17_reg_1165 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_737_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_1171 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_1177 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_reg_1184 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_1190 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_41_fu_825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_reg_1195 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_1200 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_1205 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_1210 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_885_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal isneg_reg_1220 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal result_V_fu_915_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_1227 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_3_reg_1233 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_2_fu_990_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal co_reg_243 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_reg_254 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_266 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_s_reg_278 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_290 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_14_reg_301 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_313 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_84_cast_fu_603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_85_cast_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_cast_fu_985_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_345_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_cast_fu_353_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_fu_341_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_54_fu_357_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_55_fu_367_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_56_fu_379_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_fu_375_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_cast_fu_387_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal newIndex_fu_401_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_58_fu_411_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_60_fu_423_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_419_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_431_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_30_fu_447_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_62_fu_451_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_63_fu_456_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_64_fu_468_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_464_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl6_cast_fu_476_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_30_cast_fu_510_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp2_fu_519_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_525_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_31_fu_529_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_32_cast_fu_535_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_68_fu_544_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_71_fu_554_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_72_fu_565_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl8_cast_fu_572_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_cast_fu_561_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_33_cast_fu_594_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_74_fu_598_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp3_fu_608_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_614_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_34_fu_618_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_35_cast_fu_624_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_1_fu_671_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_fu_671_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_fu_685_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_43_cast_fu_693_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_16_fu_710_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_fu_720_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_78_fu_723_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_80_fu_767_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_784_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i2_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_802_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_16_mux_fu_873_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_34_fu_879_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_893_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_27_fu_897_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_12_fu_901_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_28_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_3_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_953_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_960_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_cast_fu_976_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_66_fu_980_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component ShuffleNetV2_mux_jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mux_jbC_x_U191 : component ShuffleNetV2_mux_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din1 => buffer1_1_48_8x8_p_V_8_q0,
        din2 => buffer1_1_48_8x8_p_V_1_q0,
        din3 => buffer1_1_48_8x8_p_V_2_q0,
        din4 => buffer1_1_48_8x8_p_V_3_q0,
        din5 => buffer1_1_48_8x8_p_V_4_q0,
        din6 => buffer1_1_48_8x8_p_V_5_q0,
        din7 => buffer1_1_48_8x8_p_V_6_q0,
        din8 => buffer1_1_48_8x8_p_V_7_q0,
        din9 => tmp_59_reg_1014,
        dout => tmp_25_fu_644_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond6_fu_441_p2 = ap_const_lv1_1))) then 
                co_reg_243 <= co_2_reg_999;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_243 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    h_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_324_p2 = ap_const_lv1_0))) then 
                h_reg_254 <= ap_const_lv4_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_486_p2 = ap_const_lv1_1))) then 
                h_reg_254 <= h_2_fu_492_p2;
            end if; 
        end if;
    end process;

    m_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond7_fu_486_p2))) then 
                m_reg_290 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_582_p2))) then 
                m_reg_290 <= m_2_reg_1048;
            end if; 
        end if;
    end process;

    n_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                n_reg_313 <= n_2_reg_1078;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                n_reg_313 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_14_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                p_Val2_14_reg_301 <= sum_V_fu_885_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_14_reg_301 <= p_Val2_s_reg_278;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond7_fu_486_p2))) then 
                p_Val2_s_reg_278 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_582_p2))) then 
                p_Val2_s_reg_278 <= p_Val2_14_reg_301;
            end if; 
        end if;
    end process;

    w_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_441_p2))) then 
                w_reg_266 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                w_reg_266 <= w_2_fu_990_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_324_p2 = ap_const_lv1_0))) then
                bias_V_addr_reg_1024 <= tmp_fu_336_p1(6 - 1 downto 0);
                    tmp_57_reg_1009(9 downto 1) <= tmp_57_fu_391_p2(9 downto 1);
                tmp_59_reg_1014 <= tmp_59_fu_397_p1;
                    tmp_61_reg_1019(6 downto 1) <= tmp_61_fu_435_p2(6 downto 1);
                tmp_65_cast_reg_1004 <= tmp_65_cast_fu_363_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                brmerge40_demorgan_i_reg_1200 <= brmerge40_demorgan_i_fu_836_p2;
                brmerge_i_i_i_reg_1210 <= brmerge_i_i_i_fu_858_p2;
                p_38_i_i_reg_1190 <= p_38_i_i_fu_809_p2;
                tmp_41_reg_1195 <= tmp_41_fu_825_p2;
                underflow_reg_1205 <= underflow_fu_853_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                carry_reg_1177 <= carry_fu_751_p2;
                newsignbit_reg_1171 <= p_Val2_17_fu_731_p2(7 downto 7);
                p_Val2_15_reg_1153 <= p_Val2_15_fu_697_p2;
                p_Val2_17_reg_1165 <= p_Val2_17_fu_731_p2;
                signbit_reg_1158 <= p_Val2_15_fu_697_p2(15 downto 15);
                tmp_39_reg_1184 <= p_Val2_15_fu_697_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_2_reg_999 <= co_2_fu_330_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                isneg_reg_1220 <= p_Val2_12_fu_901_p2(8 downto 8);
                newsignbit_3_reg_1233 <= result_V_fu_915_p2(7 downto 7);
                result_V_reg_1227 <= result_V_fu_915_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_2_reg_1048 <= m_2_fu_504_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                n_2_reg_1078 <= n_2_fu_588_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_Val2_1_reg_1143 <= p_Val2_1_fu_671_p2;
                tmp_77_reg_1148 <= p_Val2_1_fu_671_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_25_reg_1138 <= tmp_25_fu_644_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_441_p2))) then
                    tmp_65_reg_1032(13 downto 1) <= tmp_65_fu_480_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond8_fu_498_p2))) then
                tmp_67_reg_1053 <= tmp_67_fu_514_p2;
                tmp_70_reg_1059 <= tmp_70_fu_539_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_69_reg_1065 <= tmp_69_fu_549_p2;
                    tmp_73_reg_1070(10 downto 1) <= tmp_73_fu_576_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond_fu_582_p2))) then
                tmp_75_reg_1088 <= tmp_75_fu_628_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                weight_V_load_reg_1133 <= weight_V_q0;
            end if;
        end if;
    end process;
    tmp_57_reg_1009(0) <= '0';
    tmp_61_reg_1019(0) <= '0';
    tmp_65_reg_1032(0) <= '0';
    tmp_73_reg_1070(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_324_p2, ap_CS_fsm_state3, exitcond6_fu_441_p2, ap_CS_fsm_state4, exitcond7_fu_486_p2, ap_CS_fsm_state5, exitcond8_fu_498_p2, ap_CS_fsm_state7, exitcond_fu_582_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_324_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond6_fu_441_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_486_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond8_fu_498_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_582_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_774_p2 <= "1" when (tmp_39_reg_1184 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_779_p2 <= "1" when (tmp_39_reg_1184 = ap_const_lv2_0) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_324_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_324_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_324_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_324_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_1024;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_836_p2 <= (newsignbit_reg_1171 and deleted_ones_fu_802_p3);
    brmerge9_fu_948_p2 <= (newsignbit_3_reg_1233 or isneg_not_fu_943_p2);
    brmerge_i_i2_fu_820_p2 <= (newsignbit_reg_1171 or p_not_i_i_fu_814_p2);
    brmerge_i_i_fu_939_p2 <= (isneg_reg_1220 xor newsignbit_3_reg_1233);
    brmerge_i_i_i_fu_858_p2 <= (underflow_fu_853_p2 or overflow_fu_830_p2);
    buffer1_1_48_8x8_p_V_1_address0 <= tmp_85_cast_fu_633_p1(10 - 1 downto 0);

    buffer1_1_48_8x8_p_V_1_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_1_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_2_address0 <= tmp_85_cast_fu_633_p1(10 - 1 downto 0);

    buffer1_1_48_8x8_p_V_2_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_2_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_3_address0 <= tmp_85_cast_fu_633_p1(10 - 1 downto 0);

    buffer1_1_48_8x8_p_V_3_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_3_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_4_address0 <= tmp_85_cast_fu_633_p1(10 - 1 downto 0);

    buffer1_1_48_8x8_p_V_4_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_4_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_5_address0 <= tmp_85_cast_fu_633_p1(10 - 1 downto 0);

    buffer1_1_48_8x8_p_V_5_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_5_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_6_address0 <= tmp_85_cast_fu_633_p1(10 - 1 downto 0);

    buffer1_1_48_8x8_p_V_6_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_6_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_7_address0 <= tmp_85_cast_fu_633_p1(10 - 1 downto 0);

    buffer1_1_48_8x8_p_V_7_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_7_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_8_address0 <= tmp_85_cast_fu_633_p1(10 - 1 downto 0);

    buffer1_1_48_8x8_p_V_8_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_8_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    carry_fu_751_p2 <= (tmp_78_fu_723_p3 and tmp_38_fu_745_p2);
    co_2_fu_330_p2 <= std_logic_vector(unsigned(co_reg_243) + unsigned(ap_const_lv6_1));
    deleted_ones_fu_802_p3 <= 
        p_41_i_i_fu_797_p2 when (carry_reg_1177(0) = '1') else 
        Range1_all_ones_fu_774_p2;
    deleted_zeros_fu_784_p3 <= 
        Range1_all_ones_fu_774_p2 when (carry_reg_1177(0) = '1') else 
        Range1_all_zeros_fu_779_p2;
    exitcond5_fu_324_p2 <= "1" when (co_reg_243 = ap_const_lv6_30) else "0";
    exitcond6_fu_441_p2 <= "1" when (h_reg_254 = ap_const_lv4_9) else "0";
    exitcond7_fu_486_p2 <= "1" when (w_reg_266 = ap_const_lv4_9) else "0";
    exitcond8_fu_498_p2 <= "1" when (m_reg_290 = ap_const_lv2_3) else "0";
    exitcond_fu_582_p2 <= "1" when (n_reg_313 = ap_const_lv2_3) else "0";
    h_2_fu_492_p2 <= std_logic_vector(unsigned(h_reg_254) + unsigned(ap_const_lv4_1));
    isneg_not_fu_943_p2 <= (isneg_reg_1220 xor ap_const_lv1_1);
    m_2_fu_504_p2 <= std_logic_vector(unsigned(m_reg_290) + unsigned(ap_const_lv2_1));
    n_2_fu_588_p2 <= std_logic_vector(unsigned(n_reg_313) + unsigned(ap_const_lv2_1));
    newIndex_fu_401_p4 <= co_reg_243(5 downto 3);
    newsignbit_fu_737_p3 <= p_Val2_17_fu_731_p2(7 downto 7);
    output_V_address0 <= tmp_76_cast_fu_985_p1(13 - 1 downto 0);

    output_V_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= 
        result_V_mux_fu_953_p3 when (brmerge9_fu_948_p2(0) = '1') else 
        p_result_V_fu_960_p3;

    output_V_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_830_p2 <= (brmerge_i_i2_fu_820_p2 and tmp_41_fu_825_p2);
    p_38_i_i_fu_809_p2 <= (carry_reg_1177 and Range1_all_ones_fu_774_p2);
    p_41_i_i_fu_797_p2 <= (signbit_reg_1158 and tmp_40_fu_791_p2);
    p_Val2_12_fu_901_p2 <= std_logic_vector(signed(tmp_26_fu_893_p1) + signed(tmp_27_fu_897_p1));
    p_Val2_15_fu_697_p2 <= std_logic_vector(signed(tmp_43_cast_fu_693_p1) + signed(p_Val2_1_reg_1143));
    p_Val2_16_fu_710_p4 <= p_Val2_15_fu_697_p2(13 downto 6);
    p_Val2_16_mux_fu_873_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_1210(0) = '1') else 
        p_Val2_17_reg_1165;
    p_Val2_17_fu_731_p2 <= std_logic_vector(unsigned(p_Val2_16_fu_710_p4) + unsigned(tmp_37_fu_720_p1));
    p_Val2_1_fu_671_p0 <= weight_V_load_reg_1133;
    p_Val2_1_fu_671_p1 <= tmp_25_reg_1138;
    p_Val2_1_fu_671_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_1_fu_671_p0) * signed(p_Val2_1_fu_671_p1))), 16));
    p_Val2_s_34_fu_879_p3 <= 
        ap_const_lv8_80 when (underflow_reg_1205(0) = '1') else 
        p_Val2_17_reg_1165;
    p_not_i_i_fu_814_p2 <= (deleted_zeros_fu_784_p3 xor ap_const_lv1_1);
    p_result_V_fu_960_p3 <= 
        ap_const_lv8_80 when (underflow_3_fu_934_p2(0) = '1') else 
        result_V_reg_1227;
    p_shl1_cast_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_fu_423_p3),7));
    p_shl2_cast_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_367_p3),10));
    p_shl3_cast_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_379_p3),10));
    p_shl4_cast_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_345_p3),9));
    p_shl5_cast_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_456_p3),14));
    p_shl6_cast_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_fu_468_p3),14));
    p_shl7_cast_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_71_fu_554_p3),11));
    p_shl8_cast_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_72_fu_565_p3),11));
    p_shl_cast_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_fu_411_p3),7));
    result_V_fu_915_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_278) + unsigned(bias_V_q0));
    result_V_mux_fu_953_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_939_p2(0) = '1') else 
        result_V_reg_1227;
    sum_V_fu_885_p3 <= 
        p_Val2_16_mux_fu_873_p3 when (underflow_not_fu_868_p2(0) = '1') else 
        p_Val2_s_34_fu_879_p3;
        tmp2_cast_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_519_p2),4));

    tmp2_fu_519_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(m_reg_290));
        tmp3_cast_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_608_p2),4));

    tmp3_fu_608_p2 <= std_logic_vector(unsigned(n_reg_313) + unsigned(ap_const_lv2_3));
    tmp4_demorgan_fu_841_p2 <= (p_38_i_i_fu_809_p2 or brmerge40_demorgan_i_fu_836_p2);
    tmp4_fu_847_p2 <= (tmp4_demorgan_fu_841_p2 xor ap_const_lv1_1);
    tmp5_fu_864_p2 <= (brmerge40_demorgan_i_reg_1200 or tmp_41_reg_1195);
        tmp_26_fu_893_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_278),9));

        tmp_27_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    tmp_28_fu_929_p2 <= (newsignbit_3_reg_1233 xor ap_const_lv1_1);
    tmp_29_cast_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_266),14));
    tmp_30_cast_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_290),10));
    tmp_31_fu_529_p2 <= std_logic_vector(unsigned(h_reg_254) + unsigned(tmp2_cast_fu_525_p1));
    tmp_32_cast_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_529_p2),7));
    tmp_33_cast_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_313),10));
    tmp_34_fu_618_p2 <= std_logic_vector(signed(tmp3_cast_fu_614_p1) + signed(w_reg_266));
    tmp_35_cast_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_618_p2),11));
    tmp_36_fu_685_p3 <= (p_Val2_14_reg_301 & ap_const_lv6_0);
    tmp_37_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_77_reg_1148),8));
    tmp_38_fu_745_p2 <= (newsignbit_fu_737_p3 xor ap_const_lv1_1);
    tmp_40_fu_791_p2 <= (tmp_80_fu_767_p3 xor ap_const_lv1_1);
    tmp_41_fu_825_p2 <= (signbit_reg_1158 xor ap_const_lv1_1);
        tmp_43_cast_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_36_fu_685_p3),16));

    tmp_54_fu_357_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_353_p1) - unsigned(tmp_cast_fu_341_p1));
    tmp_55_fu_367_p3 <= (co_reg_243 & ap_const_lv3_0);
    tmp_56_fu_379_p3 <= (co_reg_243 & ap_const_lv1_0);
    tmp_57_fu_391_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_375_p1) + unsigned(p_shl3_cast_fu_387_p1));
    tmp_58_fu_411_p3 <= (newIndex_fu_401_p4 & ap_const_lv3_0);
    tmp_59_fu_397_p1 <= co_reg_243(3 - 1 downto 0);
    tmp_60_fu_423_p3 <= (newIndex_fu_401_p4 & ap_const_lv1_0);
    tmp_61_fu_435_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_419_p1) + unsigned(p_shl1_cast_fu_431_p1));
    tmp_62_fu_451_p2 <= std_logic_vector(unsigned(tmp_cast_30_fu_447_p1) + unsigned(tmp_57_reg_1009));
    tmp_63_fu_456_p3 <= (tmp_62_fu_451_p2 & ap_const_lv3_0);
    tmp_64_fu_468_p3 <= (tmp_62_fu_451_p2 & ap_const_lv1_0);
        tmp_65_cast_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_54_fu_357_p2),10));

    tmp_65_fu_480_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_464_p1) + unsigned(p_shl6_cast_fu_476_p1));
    tmp_66_fu_980_p2 <= std_logic_vector(unsigned(tmp_65_reg_1032) + unsigned(tmp_29_cast_fu_976_p1));
    tmp_67_fu_514_p2 <= std_logic_vector(signed(tmp_65_cast_reg_1004) + signed(tmp_30_cast_fu_510_p1));
    tmp_68_fu_544_p2 <= std_logic_vector(shift_left(unsigned(tmp_67_reg_1053),to_integer(unsigned('0' & ap_const_lv10_2(10-1 downto 0)))));
    tmp_69_fu_549_p2 <= std_logic_vector(unsigned(tmp_68_fu_544_p2) - unsigned(tmp_67_reg_1053));
    tmp_70_fu_539_p2 <= std_logic_vector(unsigned(tmp_61_reg_1019) + unsigned(tmp_32_cast_fu_535_p1));
    tmp_71_fu_554_p3 <= (tmp_70_reg_1059 & ap_const_lv3_0);
    tmp_72_fu_565_p3 <= (tmp_70_reg_1059 & ap_const_lv1_0);
    tmp_73_fu_576_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_572_p1) + unsigned(p_shl7_cast_fu_561_p1));
    tmp_74_fu_598_p2 <= std_logic_vector(unsigned(tmp_33_cast_fu_594_p1) + unsigned(tmp_69_reg_1065));
    tmp_75_fu_628_p2 <= std_logic_vector(unsigned(tmp_35_cast_fu_624_p1) + unsigned(tmp_73_reg_1070));
    tmp_76_cast_fu_985_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_fu_980_p2),64));
    tmp_78_fu_723_p3 <= p_Val2_15_fu_697_p2(13 downto 13);
    tmp_80_fu_767_p3 <= p_Val2_15_reg_1153(14 downto 14);
    tmp_84_cast_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_74_fu_598_p2),64));
    tmp_85_cast_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_75_reg_1088),64));
    tmp_cast_30_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_254),10));
    tmp_cast_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_243),9));
    tmp_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_243),64));
    tmp_s_fu_345_p3 <= (co_reg_243 & ap_const_lv2_0);
    underflow_3_fu_934_p2 <= (isneg_reg_1220 and tmp_28_fu_929_p2);
    underflow_fu_853_p2 <= (signbit_reg_1158 and tmp4_fu_847_p2);
    underflow_not_fu_868_p2 <= (tmp5_fu_864_p2 or p_38_i_i_reg_1190);
    w_2_fu_990_p2 <= std_logic_vector(unsigned(w_reg_266) + unsigned(ap_const_lv4_1));
    weight_V_address0 <= tmp_84_cast_fu_603_p1(9 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
