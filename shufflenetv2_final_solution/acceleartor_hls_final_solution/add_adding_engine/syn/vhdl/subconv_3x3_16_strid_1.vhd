-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_16_strid_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    shuffleunit0_2_outpu_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    shuffleunit0_2_outpu_ce0 : OUT STD_LOGIC;
    shuffleunit0_2_outpu_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_16_strid_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_5_fu_230_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal co_5_reg_863 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_152_cast_fu_263_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_152_cast_reg_868 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond8_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_139_fu_295_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_139_reg_873 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_141_fu_313_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_141_reg_878 : STD_LOGIC_VECTOR (10 downto 0);
    signal bias_V_addr_reg_883 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_325_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_reg_891 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond9_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_145_fu_366_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_145_reg_896 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_97_fu_378_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_97_reg_904 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond3_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_5_fu_386_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_5_fu_398_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_5_reg_917 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_149_fu_419_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_149_reg_922 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond4_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_152_fu_469_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_152_reg_927 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_146_fu_479_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_146_reg_932 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_5_fu_484_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_5_reg_937 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_5_fu_496_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_5_reg_945 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_load_reg_960 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal shuffleunit0_2_outpu_1_reg_965 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_6_fu_551_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_6_reg_970 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_156_reg_975 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_43_fu_577_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_43_reg_980 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal signbit_reg_985 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_45_fu_611_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_45_reg_992 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_617_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_998 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_1004 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_111_reg_1011 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_1017 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_113_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_reg_1022 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_1027 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_1032 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_1037 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_765_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal isneg_reg_1047 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal result_V_fu_795_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_1054 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_7_reg_1060 : STD_LOGIC_VECTOR (0 downto 0);
    signal co_reg_143 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_reg_154 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_166 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_Val2_s_reg_178 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_190 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_42_reg_201 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_213 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_171_cast_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_172_cast_fu_540_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_163_cast_fu_856_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_135_fu_245_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_cast_fu_253_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_fu_241_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_136_fu_257_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_137_fu_267_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_138_fu_279_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl3_cast_fu_291_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_275_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_140_fu_301_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_cast2_fu_287_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_309_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_96_cast_fu_333_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_142_fu_337_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_143_fu_342_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_144_fu_354_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_fu_362_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl5_cast_fu_350_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_102_cast_fu_404_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_147_fu_408_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_148_fu_413_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp2_fu_425_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_431_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_103_fu_435_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_104_cast_fu_440_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_150_fu_444_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_151_fu_457_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl8_cast_fu_465_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl7_cast_fu_449_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_101_cast_fu_475_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_105_cast_fu_502_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_153_fu_506_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp3_fu_516_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_522_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_106_fu_526_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_107_cast_fu_531_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_154_fu_535_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_6_fu_551_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_6_fu_551_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_108_fu_565_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_142_cast_fu_573_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_44_fu_590_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_109_fu_600_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_157_fu_603_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_159_fu_647_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_112_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_664_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i5_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_682_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_40_mux_fu_753_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_55_fu_759_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_98_fu_773_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_99_fu_777_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_40_fu_781_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_100_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_7_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_833_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_840_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_319_p2 = ap_const_lv1_1))) then 
                co_reg_143 <= co_5_reg_863;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_143 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    h_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_224_p2 = ap_const_lv1_0))) then 
                h_reg_154 <= ap_const_lv4_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_372_p2 = ap_const_lv1_1))) then 
                h_reg_154 <= h_5_fu_386_p2;
            end if; 
        end if;
    end process;

    m_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_490_p2))) then 
                m_reg_190 <= m_5_reg_917;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_372_p2))) then 
                m_reg_190 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                n_reg_213 <= n_5_reg_945;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_392_p2))) then 
                n_reg_213 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_42_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_Val2_42_reg_201 <= sum_V_fu_765_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_392_p2))) then 
                p_Val2_42_reg_201 <= p_Val2_s_reg_178;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_490_p2))) then 
                p_Val2_s_reg_178 <= p_Val2_42_reg_201;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_372_p2))) then 
                p_Val2_s_reg_178 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    w_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond9_fu_319_p2))) then 
                w_reg_166 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                w_reg_166 <= w_5_reg_937;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_224_p2 = ap_const_lv1_0))) then
                bias_V_addr_reg_883 <= tmp_fu_236_p1(6 - 1 downto 0);
                    tmp_139_reg_873(9 downto 1) <= tmp_139_fu_295_p2(9 downto 1);
                    tmp_141_reg_878(10 downto 1) <= tmp_141_fu_313_p2(10 downto 1);
                tmp_152_cast_reg_868 <= tmp_152_cast_fu_263_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                brmerge40_demorgan_i_reg_1027 <= brmerge40_demorgan_i_fu_716_p2;
                brmerge_i_i_i_reg_1037 <= brmerge_i_i_i_fu_738_p2;
                p_38_i_i_reg_1017 <= p_38_i_i_fu_689_p2;
                tmp_113_reg_1022 <= tmp_113_fu_705_p2;
                underflow_reg_1032 <= underflow_fu_733_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                carry_reg_1004 <= carry_fu_631_p2;
                newsignbit_reg_998 <= p_Val2_45_fu_611_p2(7 downto 7);
                p_Val2_43_reg_980 <= p_Val2_43_fu_577_p2;
                p_Val2_45_reg_992 <= p_Val2_45_fu_611_p2;
                signbit_reg_985 <= p_Val2_43_fu_577_p2(15 downto 15);
                tmp_111_reg_1011 <= p_Val2_43_fu_577_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_5_reg_863 <= co_5_fu_230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                isneg_reg_1047 <= p_Val2_40_fu_781_p2(8 downto 8);
                newsignbit_7_reg_1060 <= result_V_fu_795_p2(7 downto 7);
                result_V_reg_1054 <= result_V_fu_795_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_5_reg_917 <= m_5_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_5_reg_945 <= n_5_fu_496_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_6_reg_970 <= p_Val2_6_fu_551_p2;
                tmp_156_reg_975 <= p_Val2_6_fu_551_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                shuffleunit0_2_outpu_1_reg_965 <= shuffleunit0_2_outpu_q0;
                weight_V_load_reg_960 <= weight_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond9_fu_319_p2))) then
                    tmp_145_reg_896(13 downto 1) <= tmp_145_fu_366_p2(13 downto 1);
                    tmp_s_reg_891(4 downto 1) <= tmp_s_fu_325_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond4_fu_392_p2))) then
                tmp_146_reg_932 <= tmp_146_fu_479_p2;
                w_5_reg_937 <= w_5_fu_484_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_392_p2))) then
                tmp_149_reg_922 <= tmp_149_fu_419_p2;
                    tmp_152_reg_927(14 downto 1) <= tmp_152_fu_469_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_372_p2))) then
                    tmp_97_reg_904(4 downto 1) <= tmp_97_fu_378_p3(4 downto 1);
            end if;
        end if;
    end process;
    tmp_139_reg_873(0) <= '0';
    tmp_141_reg_878(0) <= '0';
    tmp_s_reg_891(0) <= '0';
    tmp_145_reg_896(0) <= '0';
    tmp_97_reg_904(0) <= '0';
    tmp_152_reg_927(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond8_fu_224_p2, ap_CS_fsm_state3, exitcond9_fu_319_p2, ap_CS_fsm_state4, exitcond3_fu_372_p2, ap_CS_fsm_state5, exitcond4_fu_392_p2, ap_CS_fsm_state6, exitcond_fu_490_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_224_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_319_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_372_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_392_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_490_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_654_p2 <= "1" when (tmp_111_reg_1011 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_659_p2 <= "1" when (tmp_111_reg_1011 = ap_const_lv2_0) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond8_fu_224_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_224_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond8_fu_224_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_224_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_883;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_716_p2 <= (newsignbit_reg_998 and deleted_ones_fu_682_p3);
    brmerge9_fu_828_p2 <= (newsignbit_7_reg_1060 or isneg_not_fu_823_p2);
    brmerge_i_i5_fu_700_p2 <= (newsignbit_reg_998 or p_not_i_i_fu_694_p2);
    brmerge_i_i_fu_819_p2 <= (isneg_reg_1047 xor newsignbit_7_reg_1060);
    brmerge_i_i_i_fu_738_p2 <= (underflow_fu_733_p2 or overflow_fu_710_p2);
    carry_fu_631_p2 <= (tmp_157_fu_603_p3 and tmp_110_fu_625_p2);
    co_5_fu_230_p2 <= std_logic_vector(unsigned(co_reg_143) + unsigned(ap_const_lv6_1));
    deleted_ones_fu_682_p3 <= 
        p_41_i_i_fu_677_p2 when (carry_reg_1004(0) = '1') else 
        Range1_all_ones_fu_654_p2;
    deleted_zeros_fu_664_p3 <= 
        Range1_all_ones_fu_654_p2 when (carry_reg_1004(0) = '1') else 
        Range1_all_zeros_fu_659_p2;
    exitcond3_fu_372_p2 <= "1" when (w_reg_166 = ap_const_lv4_9) else "0";
    exitcond4_fu_392_p2 <= "1" when (m_reg_190 = ap_const_lv2_3) else "0";
    exitcond8_fu_224_p2 <= "1" when (co_reg_143 = ap_const_lv6_30) else "0";
    exitcond9_fu_319_p2 <= "1" when (h_reg_154 = ap_const_lv4_9) else "0";
    exitcond_fu_490_p2 <= "1" when (n_reg_213 = ap_const_lv2_3) else "0";
    h_5_fu_386_p2 <= std_logic_vector(unsigned(h_reg_154) + unsigned(ap_const_lv4_1));
    isneg_not_fu_823_p2 <= (isneg_reg_1047 xor ap_const_lv1_1);
    m_5_fu_398_p2 <= std_logic_vector(unsigned(m_reg_190) + unsigned(ap_const_lv2_1));
    n_5_fu_496_p2 <= std_logic_vector(unsigned(n_reg_213) + unsigned(ap_const_lv2_1));
    newsignbit_fu_617_p3 <= p_Val2_45_fu_611_p2(7 downto 7);
    output_V_address0 <= tmp_163_cast_fu_856_p1(13 - 1 downto 0);

    output_V_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= 
        result_V_mux_fu_833_p3 when (brmerge9_fu_828_p2(0) = '1') else 
        p_result_V_fu_840_p3;

    output_V_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_710_p2 <= (brmerge_i_i5_fu_700_p2 and tmp_113_fu_705_p2);
    p_38_i_i_fu_689_p2 <= (carry_reg_1004 and Range1_all_ones_fu_654_p2);
    p_41_i_i_fu_677_p2 <= (signbit_reg_985 and tmp_112_fu_671_p2);
    p_Val2_40_fu_781_p2 <= std_logic_vector(signed(tmp_98_fu_773_p1) + signed(tmp_99_fu_777_p1));
    p_Val2_40_mux_fu_753_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_1037(0) = '1') else 
        p_Val2_45_reg_992;
    p_Val2_43_fu_577_p2 <= std_logic_vector(signed(tmp_142_cast_fu_573_p1) + signed(p_Val2_6_reg_970));
    p_Val2_44_fu_590_p4 <= p_Val2_43_fu_577_p2(13 downto 6);
    p_Val2_45_fu_611_p2 <= std_logic_vector(unsigned(p_Val2_44_fu_590_p4) + unsigned(tmp_109_fu_600_p1));
    p_Val2_6_fu_551_p0 <= weight_V_load_reg_960;
    p_Val2_6_fu_551_p1 <= shuffleunit0_2_outpu_1_reg_965;
    p_Val2_6_fu_551_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_6_fu_551_p0) * signed(p_Val2_6_fu_551_p1))), 16));
    p_Val2_s_55_fu_759_p3 <= 
        ap_const_lv8_80 when (underflow_reg_1032(0) = '1') else 
        p_Val2_45_reg_992;
    p_not_i_i_fu_694_p2 <= (deleted_zeros_fu_664_p3 xor ap_const_lv1_1);
    p_result_V_fu_840_p3 <= 
        ap_const_lv8_80 when (underflow_7_fu_814_p2(0) = '1') else 
        result_V_reg_1054;
    p_shl2_cast_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_137_fu_267_p3),10));
    p_shl3_cast2_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_138_fu_279_p3),11));
    p_shl3_cast_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_138_fu_279_p3),10));
    p_shl4_cast_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_135_fu_245_p3),9));
    p_shl5_cast_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_143_fu_342_p3),14));
    p_shl6_cast_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_144_fu_354_p3),14));
    p_shl7_cast_fu_449_p3 <= (tmp_150_fu_444_p2 & ap_const_lv4_0);
    p_shl8_cast_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_151_fu_457_p3),15));
    p_shl_cast_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_140_fu_301_p3),11));
    result_V_fu_795_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_178) + unsigned(bias_V_q0));
    result_V_mux_fu_833_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_819_p2(0) = '1') else 
        result_V_reg_1054;
    shuffleunit0_2_outpu_address0 <= tmp_172_cast_fu_540_p1(14 - 1 downto 0);

    shuffleunit0_2_outpu_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            shuffleunit0_2_outpu_ce0 <= ap_const_logic_1;
        else 
            shuffleunit0_2_outpu_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_V_fu_765_p3 <= 
        p_Val2_40_mux_fu_753_p3 when (underflow_not_fu_748_p2(0) = '1') else 
        p_Val2_s_55_fu_759_p3;
        tmp2_cast_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_425_p2),5));

    tmp2_fu_425_p2 <= (m_reg_190 xor ap_const_lv2_2);
        tmp3_cast_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_516_p2),5));

    tmp3_fu_516_p2 <= (n_reg_213 xor ap_const_lv2_2);
    tmp4_demorgan_fu_721_p2 <= (p_38_i_i_fu_689_p2 or brmerge40_demorgan_i_fu_716_p2);
    tmp4_fu_727_p2 <= (tmp4_demorgan_fu_721_p2 xor ap_const_lv1_1);
    tmp5_fu_744_p2 <= (brmerge40_demorgan_i_reg_1027 or tmp_113_reg_1022);
    tmp_100_fu_809_p2 <= (newsignbit_7_reg_1060 xor ap_const_lv1_1);
    tmp_101_cast_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_166),14));
    tmp_102_cast_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_190),10));
    tmp_103_fu_435_p2 <= std_logic_vector(unsigned(tmp_s_reg_891) + unsigned(tmp2_cast_fu_431_p1));
    tmp_104_cast_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_103_fu_435_p2),11));
    tmp_105_cast_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_213),10));
    tmp_106_fu_526_p2 <= std_logic_vector(signed(tmp3_cast_fu_522_p1) + signed(tmp_97_reg_904));
    tmp_107_cast_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_106_fu_526_p2),15));
    tmp_108_fu_565_p3 <= (p_Val2_42_reg_201 & ap_const_lv6_0);
    tmp_109_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_156_reg_975),8));
    tmp_110_fu_625_p2 <= (newsignbit_fu_617_p3 xor ap_const_lv1_1);
    tmp_112_fu_671_p2 <= (tmp_159_fu_647_p3 xor ap_const_lv1_1);
    tmp_113_fu_705_p2 <= (signbit_reg_985 xor ap_const_lv1_1);
    tmp_135_fu_245_p3 <= (co_reg_143 & ap_const_lv2_0);
    tmp_136_fu_257_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_253_p1) - unsigned(tmp_cast_fu_241_p1));
    tmp_137_fu_267_p3 <= (co_reg_143 & ap_const_lv3_0);
    tmp_138_fu_279_p3 <= (co_reg_143 & ap_const_lv1_0);
    tmp_139_fu_295_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_291_p1) + unsigned(p_shl2_cast_fu_275_p1));
    tmp_140_fu_301_p3 <= (co_reg_143 & ap_const_lv4_0);
    tmp_141_fu_313_p2 <= std_logic_vector(unsigned(p_shl3_cast2_fu_287_p1) + unsigned(p_shl_cast_fu_309_p1));
        tmp_142_cast_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_108_fu_565_p3),16));

    tmp_142_fu_337_p2 <= std_logic_vector(unsigned(tmp_139_reg_873) + unsigned(tmp_96_cast_fu_333_p1));
    tmp_143_fu_342_p3 <= (tmp_142_fu_337_p2 & ap_const_lv3_0);
    tmp_144_fu_354_p3 <= (tmp_142_fu_337_p2 & ap_const_lv1_0);
    tmp_145_fu_366_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_362_p1) + unsigned(p_shl5_cast_fu_350_p1));
    tmp_146_fu_479_p2 <= std_logic_vector(unsigned(tmp_145_reg_896) + unsigned(tmp_101_cast_fu_475_p1));
    tmp_147_fu_408_p2 <= std_logic_vector(signed(tmp_152_cast_reg_868) + signed(tmp_102_cast_fu_404_p1));
    tmp_148_fu_413_p2 <= std_logic_vector(shift_left(unsigned(tmp_147_fu_408_p2),to_integer(unsigned('0' & ap_const_lv10_2(10-1 downto 0)))));
    tmp_149_fu_419_p2 <= std_logic_vector(unsigned(tmp_148_fu_413_p2) - unsigned(tmp_147_fu_408_p2));
    tmp_150_fu_444_p2 <= std_logic_vector(unsigned(tmp_141_reg_878) + unsigned(tmp_104_cast_fu_440_p1));
    tmp_151_fu_457_p3 <= (tmp_150_fu_444_p2 & ap_const_lv1_0);
        tmp_152_cast_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_136_fu_257_p2),10));

    tmp_152_fu_469_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_465_p1) + unsigned(p_shl7_cast_fu_449_p3));
    tmp_153_fu_506_p2 <= std_logic_vector(unsigned(tmp_105_cast_fu_502_p1) + unsigned(tmp_149_reg_922));
    tmp_154_fu_535_p2 <= std_logic_vector(unsigned(tmp_107_cast_fu_531_p1) + unsigned(tmp_152_reg_927));
    tmp_157_fu_603_p3 <= p_Val2_43_fu_577_p2(13 downto 13);
    tmp_159_fu_647_p3 <= p_Val2_43_reg_980(14 downto 14);
    tmp_163_cast_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_146_reg_932),64));
    tmp_171_cast_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_153_fu_506_p2),64));
    tmp_172_cast_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_154_fu_535_p2),64));
    tmp_96_cast_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_154),10));
    tmp_97_fu_378_p3 <= (w_reg_166 & ap_const_lv1_0);
        tmp_98_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_178),9));

        tmp_99_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    tmp_cast_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_143),9));
    tmp_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_143),64));
    tmp_s_fu_325_p3 <= (h_reg_154 & ap_const_lv1_0);
    underflow_7_fu_814_p2 <= (isneg_reg_1047 and tmp_100_fu_809_p2);
    underflow_fu_733_p2 <= (signbit_reg_985 and tmp4_fu_727_p2);
    underflow_not_fu_748_p2 <= (tmp5_fu_744_p2 or p_38_i_i_reg_1017);
    w_5_fu_484_p2 <= std_logic_vector(unsigned(w_reg_166) + unsigned(ap_const_lv4_1));
    weight_V_address0 <= tmp_171_cast_fu_511_p1(9 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
