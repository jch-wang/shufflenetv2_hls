-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_weight_V_AWVALID : OUT STD_LOGIC;
    m_axi_weight_V_AWREADY : IN STD_LOGIC;
    m_axi_weight_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_WVALID : OUT STD_LOGIC;
    m_axi_weight_V_WREADY : IN STD_LOGIC;
    m_axi_weight_V_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_weight_V_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_WLAST : OUT STD_LOGIC;
    m_axi_weight_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_ARVALID : OUT STD_LOGIC;
    m_axi_weight_V_ARREADY : IN STD_LOGIC;
    m_axi_weight_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_RVALID : IN STD_LOGIC;
    m_axi_weight_V_RREADY : OUT STD_LOGIC;
    m_axi_weight_V_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_weight_V_RLAST : IN STD_LOGIC;
    m_axi_weight_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_BVALID : IN STD_LOGIC;
    m_axi_weight_V_BREADY : OUT STD_LOGIC;
    m_axi_weight_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    fc_weight_V11 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_output_V_AWVALID : OUT STD_LOGIC;
    m_axi_output_V_AWREADY : IN STD_LOGIC;
    m_axi_output_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_output_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_output_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_WVALID : OUT STD_LOGIC;
    m_axi_output_V_WREADY : IN STD_LOGIC;
    m_axi_output_V_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_output_V_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_WLAST : OUT STD_LOGIC;
    m_axi_output_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_ARVALID : OUT STD_LOGIC;
    m_axi_output_V_ARREADY : IN STD_LOGIC;
    m_axi_output_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_output_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_output_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_RVALID : IN STD_LOGIC;
    m_axi_output_V_RREADY : OUT STD_LOGIC;
    m_axi_output_V_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_output_V_RLAST : IN STD_LOGIC;
    m_axi_output_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_V_BVALID : IN STD_LOGIC;
    m_axi_output_V_BREADY : OUT STD_LOGIC;
    m_axi_output_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    fc_output_V15 : IN STD_LOGIC_VECTOR (31 downto 0);
    avgpool_output_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    avgpool_output_V_ce0 : OUT STD_LOGIC;
    avgpool_output_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of fc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weight_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal weight_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal output_V_blk_n_AW : STD_LOGIC;
    signal output_V_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal output_V_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_sig_ioackin_m_axi_output_V_AWREADY : STD_LOGIC;
    signal sext_cast_fu_217_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_cast_reg_602 : STD_LOGIC_VECTOR (32 downto 0);
    signal co_34_fu_227_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal co_34_reg_610 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal weight_V_addr_reg_615 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond24_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_621 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ci_6_fu_270_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ci_6_reg_629 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_addr_read_reg_644 : STD_LOGIC_VECTOR (7 downto 0);
    signal avgpool_output_V_loa_reg_649 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_66_fu_287_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_66_reg_654 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_551_reg_659 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_67_fu_313_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_67_reg_664 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal signbit_reg_669 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_69_fu_347_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_69_reg_676 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_353_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_682 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_688 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_250_reg_695 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_701 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_249_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_249_reg_706 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_711 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_716 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_721 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_501_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal p_Val2_63_reg_731 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal result_1_fu_589_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_1_reg_737 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal co_reg_171 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_ioackin_m_axi_output_V_WREADY : STD_LOGIC;
    signal p_Val2_s_reg_183 : STD_LOGIC_VECTOR (7 downto 0);
    signal ci_reg_195 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_244_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext2_fu_206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_547_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_output_V_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_output_V_WREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_weight_V_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_weight_V_ARREADY : STD_LOGIC;
    signal tmp_527_fu_233_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_545_fu_241_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_546_fu_245_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_66_fu_287_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_66_fu_287_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_245_fu_301_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_253_cast_fu_309_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_246_fu_336_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_68_fu_326_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_552_fu_339_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_247_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_554_fu_383_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_248_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_400_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i7_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_418_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_demorgan_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_78_mux_fu_489_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_170_fu_495_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_242_fu_513_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_509_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_64_fu_516_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_V_fu_530_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_10_fu_535_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_fu_522_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_243_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_10_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_573_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_581_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_output_V_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_output_V_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if (not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_output_V_AWREADY)))) then 
                        ap_reg_ioackin_m_axi_output_V_AWREADY <= ap_const_logic_0;
                    elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = m_axi_output_V_AWREADY))) then 
                        ap_reg_ioackin_m_axi_output_V_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_output_V_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_output_V_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                    if ((ap_sig_ioackin_m_axi_output_V_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_output_V_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_output_V_WREADY)) then 
                        ap_reg_ioackin_m_axi_output_V_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_weight_V_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_weight_V_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    if ((ap_sig_ioackin_m_axi_weight_V_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_weight_V_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_weight_V_ARREADY)) then 
                        ap_reg_ioackin_m_axi_weight_V_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ci_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                ci_reg_195 <= ci_6_reg_629;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                ci_reg_195 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    co_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_sig_ioackin_m_axi_output_V_WREADY = ap_const_logic_1))) then 
                co_reg_171 <= co_34_reg_610;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_output_V_AWREADY))))) then 
                co_reg_171 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                p_Val2_s_reg_183 <= sum_V_fu_501_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_Val2_s_reg_183 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_weight_V_RVALID = ap_const_logic_1))) then
                avgpool_output_V_loa_reg_649 <= avgpool_output_V_q0;
                weight_V_addr_read_reg_644 <= m_axi_weight_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                brmerge40_demorgan_i_reg_711 <= brmerge40_demorgan_i_fu_452_p2;
                brmerge_i_i_i_reg_721 <= brmerge_i_i_i_fu_474_p2;
                p_38_i_i_reg_701 <= p_38_i_i_fu_425_p2;
                tmp_249_reg_706 <= tmp_249_fu_441_p2;
                underflow_reg_716 <= underflow_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                carry_reg_688 <= carry_fu_367_p2;
                newsignbit_reg_682 <= p_Val2_69_fu_347_p2(7 downto 7);
                p_Val2_67_reg_664 <= p_Val2_67_fu_313_p2;
                p_Val2_69_reg_676 <= p_Val2_69_fu_347_p2;
                signbit_reg_669 <= p_Val2_67_fu_313_p2(15 downto 15);
                tmp_250_reg_695 <= p_Val2_67_fu_313_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                ci_6_reg_629 <= ci_6_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_34_reg_610 <= co_34_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                p_Val2_63_reg_731 <= bias_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                p_Val2_66_reg_654 <= p_Val2_66_fu_287_p2;
                tmp_551_reg_659 <= p_Val2_66_fu_287_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                result_1_reg_737 <= result_1_fu_589_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_output_V_AWREADY))))) then
                sext_cast_reg_602 <= sext_cast_fu_217_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    tmp_reg_621(3 downto 0) <= tmp_fu_260_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond24_fu_221_p2))) then
                weight_V_addr_reg_615 <= tmp_547_fu_250_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_621(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_weight_V_RVALID, m_axi_output_V_BVALID, ap_CS_fsm_state3, ap_CS_fsm_state11, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_sig_ioackin_m_axi_output_V_AWREADY, ap_CS_fsm_state2, exitcond24_fu_221_p2, ap_CS_fsm_state10, exitcond_fu_264_p2, ap_sig_ioackin_m_axi_output_V_WREADY, ap_sig_ioackin_m_axi_weight_V_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_output_V_AWREADY))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond24_fu_221_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_sig_ioackin_m_axi_weight_V_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond_fu_264_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_weight_V_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_sig_ioackin_m_axi_output_V_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (m_axi_output_V_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_390_p2 <= "1" when (tmp_250_reg_695 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_395_p2 <= "1" when (tmp_250_reg_695 = ap_const_lv2_0) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_output_V_BVALID, ap_CS_fsm_state22)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (m_axi_output_V_BVALID = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_output_V_BVALID, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) and (m_axi_output_V_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_output_V_AWREADY_assign_proc : process(m_axi_output_V_AWREADY, ap_reg_ioackin_m_axi_output_V_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_output_V_AWREADY)) then 
            ap_sig_ioackin_m_axi_output_V_AWREADY <= m_axi_output_V_AWREADY;
        else 
            ap_sig_ioackin_m_axi_output_V_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_output_V_WREADY_assign_proc : process(m_axi_output_V_WREADY, ap_reg_ioackin_m_axi_output_V_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_output_V_WREADY)) then 
            ap_sig_ioackin_m_axi_output_V_WREADY <= m_axi_output_V_WREADY;
        else 
            ap_sig_ioackin_m_axi_output_V_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_weight_V_ARREADY_assign_proc : process(m_axi_weight_V_ARREADY, ap_reg_ioackin_m_axi_weight_V_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_weight_V_ARREADY)) then 
            ap_sig_ioackin_m_axi_weight_V_ARREADY <= m_axi_weight_V_ARREADY;
        else 
            ap_sig_ioackin_m_axi_weight_V_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    avgpool_output_V_address0 <= tmp_244_fu_276_p1(9 - 1 downto 0);

    avgpool_output_V_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            avgpool_output_V_ce0 <= ap_const_logic_1;
        else 
            avgpool_output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bias_V_address0 <= tmp_reg_621(4 - 1 downto 0);

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge1_fu_567_p2 <= (newsignbit_10_fu_535_p3 or isneg_not_fu_561_p2);
    brmerge40_demorgan_i_fu_452_p2 <= (newsignbit_reg_682 and deleted_ones_fu_418_p3);
    brmerge_i_i7_fu_436_p2 <= (newsignbit_reg_682 or p_not_i_i_fu_430_p2);
    brmerge_i_i_fu_555_p2 <= (isneg_fu_522_p3 xor newsignbit_10_fu_535_p3);
    brmerge_i_i_i_fu_474_p2 <= (underflow_fu_469_p2 or overflow_fu_446_p2);
    carry_fu_367_p2 <= (tmp_552_fu_339_p3 and tmp_247_fu_361_p2);
    ci_6_fu_270_p2 <= std_logic_vector(unsigned(ci_reg_195) + unsigned(ap_const_lv10_1));
    co_34_fu_227_p2 <= std_logic_vector(unsigned(co_reg_171) + unsigned(ap_const_lv4_1));
    deleted_ones_fu_418_p3 <= 
        p_41_i_i_fu_413_p2 when (carry_reg_688(0) = '1') else 
        Range1_all_ones_fu_390_p2;
    deleted_zeros_fu_400_p3 <= 
        Range1_all_ones_fu_390_p2 when (carry_reg_688(0) = '1') else 
        Range1_all_zeros_fu_395_p2;
    exitcond24_fu_221_p2 <= "1" when (co_reg_171 = ap_const_lv4_A) else "0";
    exitcond_fu_264_p2 <= "1" when (ci_reg_195 = ap_const_lv10_200) else "0";
    isneg_fu_522_p3 <= p_Val2_64_fu_516_p2(8 downto 8);
    isneg_not_fu_561_p2 <= (isneg_fu_522_p3 xor ap_const_lv1_1);
    m_axi_output_V_ARADDR <= ap_const_lv32_0;
    m_axi_output_V_ARBURST <= ap_const_lv2_0;
    m_axi_output_V_ARCACHE <= ap_const_lv4_0;
    m_axi_output_V_ARID <= ap_const_lv1_0;
    m_axi_output_V_ARLEN <= ap_const_lv32_0;
    m_axi_output_V_ARLOCK <= ap_const_lv2_0;
    m_axi_output_V_ARPROT <= ap_const_lv3_0;
    m_axi_output_V_ARQOS <= ap_const_lv4_0;
    m_axi_output_V_ARREGION <= ap_const_lv4_0;
    m_axi_output_V_ARSIZE <= ap_const_lv3_0;
    m_axi_output_V_ARUSER <= ap_const_lv1_0;
    m_axi_output_V_ARVALID <= ap_const_logic_0;
    m_axi_output_V_AWADDR <= sext2_fu_206_p1(32 - 1 downto 0);
    m_axi_output_V_AWBURST <= ap_const_lv2_0;
    m_axi_output_V_AWCACHE <= ap_const_lv4_0;
    m_axi_output_V_AWID <= ap_const_lv1_0;
    m_axi_output_V_AWLEN <= ap_const_lv32_A;
    m_axi_output_V_AWLOCK <= ap_const_lv2_0;
    m_axi_output_V_AWPROT <= ap_const_lv3_0;
    m_axi_output_V_AWQOS <= ap_const_lv4_0;
    m_axi_output_V_AWREGION <= ap_const_lv4_0;
    m_axi_output_V_AWSIZE <= ap_const_lv3_0;
    m_axi_output_V_AWUSER <= ap_const_lv1_0;

    m_axi_output_V_AWVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_reg_ioackin_m_axi_output_V_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_output_V_AWREADY))) then 
            m_axi_output_V_AWVALID <= ap_const_logic_1;
        else 
            m_axi_output_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_output_V_BREADY_assign_proc : process(m_axi_output_V_BVALID, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) and (m_axi_output_V_BVALID = ap_const_logic_1))) then 
            m_axi_output_V_BREADY <= ap_const_logic_1;
        else 
            m_axi_output_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_output_V_RREADY <= ap_const_logic_0;
    m_axi_output_V_WDATA <= result_1_reg_737;
    m_axi_output_V_WID <= ap_const_lv1_0;
    m_axi_output_V_WLAST <= ap_const_logic_0;
    m_axi_output_V_WSTRB <= ap_const_lv1_1;
    m_axi_output_V_WUSER <= ap_const_lv1_0;

    m_axi_output_V_WVALID_assign_proc : process(ap_CS_fsm_state18, ap_reg_ioackin_m_axi_output_V_WREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_output_V_WREADY))) then 
            m_axi_output_V_WVALID <= ap_const_logic_1;
        else 
            m_axi_output_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weight_V_ARADDR <= weight_V_addr_reg_615;
    m_axi_weight_V_ARBURST <= ap_const_lv2_0;
    m_axi_weight_V_ARCACHE <= ap_const_lv4_0;
    m_axi_weight_V_ARID <= ap_const_lv1_0;
    m_axi_weight_V_ARLEN <= ap_const_lv32_200;
    m_axi_weight_V_ARLOCK <= ap_const_lv2_0;
    m_axi_weight_V_ARPROT <= ap_const_lv3_0;
    m_axi_weight_V_ARQOS <= ap_const_lv4_0;
    m_axi_weight_V_ARREGION <= ap_const_lv4_0;
    m_axi_weight_V_ARSIZE <= ap_const_lv3_0;
    m_axi_weight_V_ARUSER <= ap_const_lv1_0;

    m_axi_weight_V_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_reg_ioackin_m_axi_weight_V_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_weight_V_ARREADY))) then 
            m_axi_weight_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_weight_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weight_V_AWADDR <= ap_const_lv32_0;
    m_axi_weight_V_AWBURST <= ap_const_lv2_0;
    m_axi_weight_V_AWCACHE <= ap_const_lv4_0;
    m_axi_weight_V_AWID <= ap_const_lv1_0;
    m_axi_weight_V_AWLEN <= ap_const_lv32_0;
    m_axi_weight_V_AWLOCK <= ap_const_lv2_0;
    m_axi_weight_V_AWPROT <= ap_const_lv3_0;
    m_axi_weight_V_AWQOS <= ap_const_lv4_0;
    m_axi_weight_V_AWREGION <= ap_const_lv4_0;
    m_axi_weight_V_AWSIZE <= ap_const_lv3_0;
    m_axi_weight_V_AWUSER <= ap_const_lv1_0;
    m_axi_weight_V_AWVALID <= ap_const_logic_0;
    m_axi_weight_V_BREADY <= ap_const_logic_0;

    m_axi_weight_V_RREADY_assign_proc : process(m_axi_weight_V_RVALID, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_weight_V_RVALID = ap_const_logic_1))) then 
            m_axi_weight_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_weight_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weight_V_WDATA <= ap_const_lv8_0;
    m_axi_weight_V_WID <= ap_const_lv1_0;
    m_axi_weight_V_WLAST <= ap_const_logic_0;
    m_axi_weight_V_WSTRB <= ap_const_lv1_0;
    m_axi_weight_V_WUSER <= ap_const_lv1_0;
    m_axi_weight_V_WVALID <= ap_const_logic_0;
    newsignbit_10_fu_535_p3 <= result_V_fu_530_p2(7 downto 7);
    newsignbit_fu_353_p3 <= p_Val2_69_fu_347_p2(7 downto 7);

    output_V_blk_n_AW_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_output_V_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            output_V_blk_n_AW <= m_axi_output_V_AWREADY;
        else 
            output_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    output_V_blk_n_B_assign_proc : process(m_axi_output_V_BVALID, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            output_V_blk_n_B <= m_axi_output_V_BVALID;
        else 
            output_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    output_V_blk_n_W_assign_proc : process(m_axi_output_V_WREADY, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output_V_blk_n_W <= m_axi_output_V_WREADY;
        else 
            output_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    overflow_fu_446_p2 <= (brmerge_i_i7_fu_436_p2 and tmp_249_fu_441_p2);
    p_38_i_i_fu_425_p2 <= (carry_reg_688 and Range1_all_ones_fu_390_p2);
    p_41_i_i_fu_413_p2 <= (signbit_reg_669 and tmp_248_fu_407_p2);
    p_Val2_64_fu_516_p2 <= std_logic_vector(signed(tmp_242_fu_513_p1) + signed(tmp_s_fu_509_p1));
    p_Val2_66_fu_287_p0 <= avgpool_output_V_loa_reg_649;
    p_Val2_66_fu_287_p1 <= weight_V_addr_read_reg_644;
    p_Val2_66_fu_287_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_66_fu_287_p0) * signed(p_Val2_66_fu_287_p1))), 16));
    p_Val2_67_fu_313_p2 <= std_logic_vector(unsigned(p_Val2_66_reg_654) + unsigned(tmp_253_cast_fu_309_p1));
    p_Val2_68_fu_326_p4 <= p_Val2_67_fu_313_p2(13 downto 6);
    p_Val2_69_fu_347_p2 <= std_logic_vector(unsigned(tmp_246_fu_336_p1) + unsigned(p_Val2_68_fu_326_p4));
    p_Val2_78_mux_fu_489_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_721(0) = '1') else 
        p_Val2_69_reg_676;
    p_Val2_s_170_fu_495_p3 <= 
        ap_const_lv8_80 when (underflow_reg_716(0) = '1') else 
        p_Val2_69_reg_676;
    p_not_i_i_fu_430_p2 <= (deleted_zeros_fu_400_p3 xor ap_const_lv1_1);
    p_result_V_fu_581_p3 <= 
        ap_const_lv8_80 when (underflow_10_fu_549_p2(0) = '1') else 
        result_V_fu_530_p2;
    result_1_fu_589_p3 <= 
        result_V_mux_fu_573_p3 when (brmerge1_fu_567_p2(0) = '1') else 
        p_result_V_fu_581_p3;
    result_V_fu_530_p2 <= std_logic_vector(unsigned(p_Val2_63_reg_731) + unsigned(p_Val2_s_reg_183));
    result_V_mux_fu_573_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_555_p2(0) = '1') else 
        result_V_fu_530_p2;
        sext2_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(fc_output_V15),64));

        sext_cast_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(fc_weight_V11),33));

    sum_V_fu_501_p3 <= 
        p_Val2_78_mux_fu_489_p3 when (underflow_not_fu_484_p2(0) = '1') else 
        p_Val2_s_170_fu_495_p3;
    tmp2_demorgan_fu_457_p2 <= (p_38_i_i_fu_425_p2 or brmerge40_demorgan_i_fu_452_p2);
    tmp2_fu_463_p2 <= (tmp2_demorgan_fu_457_p2 xor ap_const_lv1_1);
    tmp3_fu_480_p2 <= (brmerge40_demorgan_i_reg_711 or tmp_249_reg_706);
        tmp_242_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_63_reg_731),9));

    tmp_243_fu_543_p2 <= (newsignbit_10_fu_535_p3 xor ap_const_lv1_1);
    tmp_244_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_195),64));
    tmp_245_fu_301_p3 <= (p_Val2_s_reg_183 & ap_const_lv6_0);
    tmp_246_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_551_reg_659),8));
    tmp_247_fu_361_p2 <= (newsignbit_fu_353_p3 xor ap_const_lv1_1);
    tmp_248_fu_407_p2 <= (tmp_554_fu_383_p3 xor ap_const_lv1_1);
    tmp_249_fu_441_p2 <= (signbit_reg_669 xor ap_const_lv1_1);
        tmp_253_cast_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_245_fu_301_p3),16));

    tmp_527_fu_233_p3 <= (co_reg_171 & ap_const_lv9_0);
    tmp_545_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_527_fu_233_p3),33));
    tmp_546_fu_245_p2 <= std_logic_vector(unsigned(tmp_545_fu_241_p1) + unsigned(sext_cast_reg_602));
        tmp_547_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_546_fu_245_p2),64));

    tmp_552_fu_339_p3 <= p_Val2_67_fu_313_p2(13 downto 13);
    tmp_554_fu_383_p3 <= p_Val2_67_reg_664(14 downto 14);
    tmp_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_171),64));
        tmp_s_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_183),9));

    underflow_10_fu_549_p2 <= (isneg_fu_522_p3 and tmp_243_fu_543_p2);
    underflow_fu_469_p2 <= (signbit_reg_669 and tmp2_fu_463_p2);
    underflow_not_fu_484_p2 <= (tmp3_fu_480_p2 or p_38_i_i_reg_701);

    weight_V_blk_n_AR_assign_proc : process(m_axi_weight_V_ARREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weight_V_blk_n_AR <= m_axi_weight_V_ARREADY;
        else 
            weight_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    weight_V_blk_n_R_assign_proc : process(m_axi_weight_V_RVALID, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            weight_V_blk_n_R <= m_axi_weight_V_RVALID;
        else 
            weight_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

end behav;
