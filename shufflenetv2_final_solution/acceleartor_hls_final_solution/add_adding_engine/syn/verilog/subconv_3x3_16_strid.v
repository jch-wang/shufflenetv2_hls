// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_16_strid (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        ShuffleConvs_1_Downs_7_address0,
        ShuffleConvs_1_Downs_7_ce0,
        ShuffleConvs_1_Downs_7_q0,
        ShuffleConvs_1_Downs_6_address0,
        ShuffleConvs_1_Downs_6_ce0,
        ShuffleConvs_1_Downs_6_q0,
        ShuffleConvs_1_Downs_5_address0,
        ShuffleConvs_1_Downs_5_ce0,
        ShuffleConvs_1_Downs_5_q0,
        ShuffleConvs_1_Downs_4_address0,
        ShuffleConvs_1_Downs_4_ce0,
        ShuffleConvs_1_Downs_4_q0,
        ShuffleConvs_1_Downs_3_address0,
        ShuffleConvs_1_Downs_3_ce0,
        ShuffleConvs_1_Downs_3_q0,
        ShuffleConvs_1_Downs_2_address0,
        ShuffleConvs_1_Downs_2_ce0,
        ShuffleConvs_1_Downs_2_q0,
        ShuffleConvs_1_Downs_1_address0,
        ShuffleConvs_1_Downs_1_ce0,
        ShuffleConvs_1_Downs_1_q0,
        ShuffleConvs_1_Downs_address0,
        ShuffleConvs_1_Downs_ce0,
        ShuffleConvs_1_Downs_q0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [5:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [10:0] ShuffleConvs_1_Downs_7_address0;
output   ShuffleConvs_1_Downs_7_ce0;
input  [7:0] ShuffleConvs_1_Downs_7_q0;
output  [10:0] ShuffleConvs_1_Downs_6_address0;
output   ShuffleConvs_1_Downs_6_ce0;
input  [7:0] ShuffleConvs_1_Downs_6_q0;
output  [10:0] ShuffleConvs_1_Downs_5_address0;
output   ShuffleConvs_1_Downs_5_ce0;
input  [7:0] ShuffleConvs_1_Downs_5_q0;
output  [10:0] ShuffleConvs_1_Downs_4_address0;
output   ShuffleConvs_1_Downs_4_ce0;
input  [7:0] ShuffleConvs_1_Downs_4_q0;
output  [10:0] ShuffleConvs_1_Downs_3_address0;
output   ShuffleConvs_1_Downs_3_ce0;
input  [7:0] ShuffleConvs_1_Downs_3_q0;
output  [10:0] ShuffleConvs_1_Downs_2_address0;
output   ShuffleConvs_1_Downs_2_ce0;
input  [7:0] ShuffleConvs_1_Downs_2_q0;
output  [10:0] ShuffleConvs_1_Downs_1_address0;
output   ShuffleConvs_1_Downs_1_ce0;
input  [7:0] ShuffleConvs_1_Downs_1_q0;
output  [10:0] ShuffleConvs_1_Downs_address0;
output   ShuffleConvs_1_Downs_ce0;
input  [7:0] ShuffleConvs_1_Downs_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg ShuffleConvs_1_Downs_7_ce0;
reg ShuffleConvs_1_Downs_6_ce0;
reg ShuffleConvs_1_Downs_5_ce0;
reg ShuffleConvs_1_Downs_4_ce0;
reg ShuffleConvs_1_Downs_3_ce0;
reg ShuffleConvs_1_Downs_2_ce0;
reg ShuffleConvs_1_Downs_1_ce0;
reg ShuffleConvs_1_Downs_ce0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] co_5_fu_336_p2;
reg   [5:0] co_5_reg_1019;
wire    ap_CS_fsm_state2;
wire  signed [9:0] tmp_174_cast_fu_369_p1;
reg  signed [9:0] tmp_174_cast_reg_1024;
wire   [0:0] exitcond8_fu_330_p2;
wire   [9:0] tmp_159_fu_397_p2;
reg   [9:0] tmp_159_reg_1029;
wire   [2:0] tmp_160_fu_403_p1;
reg   [2:0] tmp_160_reg_1034;
wire   [7:0] tmp_163_fu_441_p2;
reg   [7:0] tmp_163_reg_1039;
reg   [5:0] bias_V_addr_reg_1044;
wire   [4:0] tmp_s_fu_453_p3;
reg   [4:0] tmp_s_reg_1052;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond9_fu_447_p2;
wire   [13:0] tmp_167_fu_494_p2;
reg   [13:0] tmp_167_reg_1057;
wire   [4:0] tmp_98_fu_506_p3;
reg   [4:0] tmp_98_reg_1065;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond1_fu_500_p2;
wire   [3:0] h_5_fu_514_p2;
wire   [1:0] m_5_fu_526_p2;
reg   [1:0] m_5_reg_1078;
wire    ap_CS_fsm_state5;
wire   [9:0] tmp_171_fu_547_p2;
reg   [9:0] tmp_171_reg_1083;
wire   [0:0] exitcond2_fu_520_p2;
wire   [11:0] tmp_174_fu_597_p2;
reg   [11:0] tmp_174_reg_1088;
wire   [13:0] tmp_168_fu_607_p2;
reg   [13:0] tmp_168_reg_1093;
wire   [3:0] w_5_fu_612_p2;
reg   [3:0] w_5_reg_1098;
wire   [1:0] n_5_fu_624_p2;
reg   [1:0] n_5_reg_1106;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_618_p2;
reg   [7:0] weight_V_load_reg_1156;
wire    ap_CS_fsm_state7;
wire   [7:0] tmp_96_fu_680_p10;
reg   [7:0] tmp_96_reg_1161;
wire   [15:0] p_Val2_5_fu_707_p2;
reg   [15:0] p_Val2_5_reg_1166;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_178_reg_1171;
wire   [15:0] p_Val2_50_fu_733_p2;
reg   [15:0] p_Val2_50_reg_1176;
wire    ap_CS_fsm_state9;
reg   [0:0] signbit_reg_1181;
wire   [7:0] p_Val2_52_fu_767_p2;
reg   [7:0] p_Val2_52_reg_1188;
wire   [0:0] newsignbit_fu_773_p3;
reg   [0:0] newsignbit_reg_1194;
wire   [0:0] carry_fu_787_p2;
reg   [0:0] carry_reg_1200;
reg   [1:0] tmp_114_reg_1207;
wire   [0:0] p_38_i_i_fu_845_p2;
reg   [0:0] p_38_i_i_reg_1213;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_115_fu_861_p2;
reg   [0:0] tmp_115_reg_1218;
wire   [0:0] brmerge40_demorgan_i_fu_872_p2;
reg   [0:0] brmerge40_demorgan_i_reg_1223;
wire   [0:0] underflow_fu_889_p2;
reg   [0:0] underflow_reg_1228;
wire   [0:0] brmerge_i_i_i_fu_894_p2;
reg   [0:0] brmerge_i_i_i_reg_1233;
wire   [7:0] sum_V_fu_921_p3;
wire    ap_CS_fsm_state11;
reg   [0:0] isneg_reg_1243;
wire    ap_CS_fsm_state12;
wire   [7:0] result_V_fu_951_p2;
reg   [7:0] result_V_reg_1250;
reg   [0:0] newsignbit_8_reg_1256;
reg   [5:0] co_reg_249;
reg   [3:0] h_reg_260;
reg   [3:0] w_reg_272;
wire    ap_CS_fsm_state13;
reg   [7:0] p_Val2_s_reg_284;
reg   [1:0] m_reg_296;
reg   [7:0] p_Val2_49_reg_307;
reg   [1:0] n_reg_319;
wire   [63:0] tmp_fu_342_p1;
wire   [63:0] tmp_193_cast_fu_639_p1;
wire   [63:0] tmp_194_cast_fu_668_p1;
wire   [63:0] tmp_185_cast_fu_1012_p1;
wire   [7:0] tmp_155_fu_351_p3;
wire   [8:0] p_shl4_cast_fu_359_p1;
wire   [8:0] tmp_cast_fu_347_p1;
wire   [8:0] tmp_156_fu_363_p2;
wire   [8:0] tmp_157_fu_373_p3;
wire   [6:0] tmp_158_fu_385_p3;
wire   [9:0] p_shl2_cast_fu_381_p1;
wire   [9:0] p_shl3_cast_fu_393_p1;
wire   [2:0] newIndex_fu_407_p4;
wire   [6:0] tmp_161_fu_417_p3;
wire   [3:0] tmp_162_fu_429_p3;
wire   [7:0] p_shl_cast_fu_425_p1;
wire   [7:0] p_shl1_cast_fu_437_p1;
wire   [9:0] tmp_97_cast_fu_461_p1;
wire   [9:0] tmp_164_fu_465_p2;
wire   [12:0] tmp_165_fu_470_p3;
wire   [10:0] tmp_166_fu_482_p3;
wire   [13:0] p_shl6_cast_fu_490_p1;
wire   [13:0] p_shl5_cast_fu_478_p1;
wire   [9:0] tmp_103_cast_fu_532_p1;
wire   [9:0] tmp_169_fu_536_p2;
wire   [9:0] tmp_170_fu_541_p2;
wire   [1:0] tmp2_fu_553_p2;
wire  signed [4:0] tmp2_cast_fu_559_p1;
wire   [4:0] tmp_104_fu_563_p2;
wire   [7:0] tmp_105_cast_fu_568_p1;
wire   [7:0] tmp_172_fu_572_p2;
wire   [8:0] tmp_173_fu_585_p3;
wire   [11:0] p_shl8_cast_fu_593_p1;
wire   [11:0] p_shl7_cast_fu_577_p3;
wire   [13:0] tmp_102_cast_fu_603_p1;
wire   [9:0] tmp_106_cast_fu_630_p1;
wire   [9:0] tmp_175_fu_634_p2;
wire   [1:0] tmp3_fu_644_p2;
wire  signed [4:0] tmp3_cast_fu_650_p1;
wire   [4:0] tmp_107_fu_654_p2;
wire   [11:0] tmp_108_cast_fu_659_p1;
wire   [11:0] tmp_176_fu_663_p2;
wire  signed [7:0] p_Val2_5_fu_707_p0;
wire  signed [7:0] p_Val2_5_fu_707_p1;
wire   [13:0] tmp_109_fu_721_p3;
wire  signed [15:0] tmp_133_cast_fu_729_p1;
wire   [7:0] p_Val2_51_fu_746_p4;
wire   [7:0] tmp_111_fu_756_p1;
wire   [0:0] tmp_179_fu_759_p3;
wire   [0:0] tmp_112_fu_781_p2;
wire   [0:0] Range1_all_ones_fu_810_p2;
wire   [0:0] Range1_all_zeros_fu_815_p2;
wire   [0:0] tmp_181_fu_803_p3;
wire   [0:0] tmp_113_fu_827_p2;
wire   [0:0] p_41_i_i_fu_833_p2;
wire   [0:0] deleted_zeros_fu_820_p3;
wire   [0:0] p_not_i_i_fu_850_p2;
wire   [0:0] brmerge_i_i5_fu_856_p2;
wire   [0:0] deleted_ones_fu_838_p3;
wire   [0:0] tmp4_demorgan_fu_877_p2;
wire   [0:0] tmp4_fu_883_p2;
wire   [0:0] overflow_fu_866_p2;
wire   [0:0] tmp5_fu_900_p2;
wire   [0:0] underflow_not_fu_904_p2;
wire   [7:0] p_Val2_40_mux_fu_909_p3;
wire   [7:0] p_Val2_s_60_fu_915_p3;
wire  signed [8:0] tmp_99_fu_929_p1;
wire  signed [8:0] tmp_100_fu_933_p1;
wire   [8:0] p_Val2_47_fu_937_p2;
wire   [0:0] tmp_101_fu_965_p2;
wire   [0:0] isneg_not_fu_979_p2;
wire   [0:0] brmerge_i_i_fu_975_p2;
wire   [0:0] underflow_8_fu_970_p2;
wire   [0:0] brmerge9_fu_984_p2;
wire   [7:0] result_V_mux_fu_989_p3;
wire   [7:0] p_result_V_fu_996_p3;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

ShuffleNetV2_mux_jbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_jbC_x_U181(
    .din1(ShuffleConvs_1_Downs_7_q0),
    .din2(ShuffleConvs_1_Downs_6_q0),
    .din3(ShuffleConvs_1_Downs_5_q0),
    .din4(ShuffleConvs_1_Downs_4_q0),
    .din5(ShuffleConvs_1_Downs_3_q0),
    .din6(ShuffleConvs_1_Downs_2_q0),
    .din7(ShuffleConvs_1_Downs_1_q0),
    .din8(ShuffleConvs_1_Downs_q0),
    .din9(tmp_160_reg_1034),
    .dout(tmp_96_fu_680_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_447_p2 == 1'd1))) begin
        co_reg_249 <= co_5_reg_1019;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_249 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_330_p2 == 1'd0))) begin
        h_reg_260 <= 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_500_p2 == 1'd1))) begin
        h_reg_260 <= h_5_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_618_p2))) begin
        m_reg_296 <= m_5_reg_1078;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_500_p2))) begin
        m_reg_296 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        n_reg_319 <= n_5_reg_1106;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_520_p2))) begin
        n_reg_319 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_49_reg_307 <= sum_V_fu_921_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_520_p2))) begin
        p_Val2_49_reg_307 <= p_Val2_s_reg_284;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_618_p2))) begin
        p_Val2_s_reg_284 <= p_Val2_49_reg_307;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_500_p2))) begin
        p_Val2_s_reg_284 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond9_fu_447_p2))) begin
        w_reg_272 <= 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        w_reg_272 <= w_5_reg_1098;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_330_p2 == 1'd0))) begin
        bias_V_addr_reg_1044 <= tmp_fu_342_p1;
        tmp_159_reg_1029[9 : 1] <= tmp_159_fu_397_p2[9 : 1];
        tmp_160_reg_1034 <= tmp_160_fu_403_p1;
        tmp_163_reg_1039[7 : 1] <= tmp_163_fu_441_p2[7 : 1];
        tmp_174_cast_reg_1024 <= tmp_174_cast_fu_369_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        brmerge40_demorgan_i_reg_1223 <= brmerge40_demorgan_i_fu_872_p2;
        brmerge_i_i_i_reg_1233 <= brmerge_i_i_i_fu_894_p2;
        p_38_i_i_reg_1213 <= p_38_i_i_fu_845_p2;
        tmp_115_reg_1218 <= tmp_115_fu_861_p2;
        underflow_reg_1228 <= underflow_fu_889_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        carry_reg_1200 <= carry_fu_787_p2;
        newsignbit_reg_1194 <= p_Val2_52_fu_767_p2[32'd7];
        p_Val2_50_reg_1176 <= p_Val2_50_fu_733_p2;
        p_Val2_52_reg_1188 <= p_Val2_52_fu_767_p2;
        signbit_reg_1181 <= p_Val2_50_fu_733_p2[32'd15];
        tmp_114_reg_1207 <= {{p_Val2_50_fu_733_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_5_reg_1019 <= co_5_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        isneg_reg_1243 <= p_Val2_47_fu_937_p2[32'd8];
        newsignbit_8_reg_1256 <= result_V_fu_951_p2[32'd7];
        result_V_reg_1250 <= result_V_fu_951_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_5_reg_1078 <= m_5_fu_526_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_5_reg_1106 <= n_5_fu_624_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_5_reg_1166 <= p_Val2_5_fu_707_p2;
        tmp_178_reg_1171 <= p_Val2_5_fu_707_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond9_fu_447_p2))) begin
        tmp_167_reg_1057[13 : 1] <= tmp_167_fu_494_p2[13 : 1];
        tmp_s_reg_1052[4 : 1] <= tmp_s_fu_453_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond2_fu_520_p2))) begin
        tmp_168_reg_1093 <= tmp_168_fu_607_p2;
        w_5_reg_1098 <= w_5_fu_612_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_520_p2))) begin
        tmp_171_reg_1083 <= tmp_171_fu_547_p2;
        tmp_174_reg_1088[11 : 1] <= tmp_174_fu_597_p2[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_96_reg_1161 <= tmp_96_fu_680_p10;
        weight_V_load_reg_1156 <= weight_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_500_p2))) begin
        tmp_98_reg_1065[4 : 1] <= tmp_98_fu_506_p3[4 : 1];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_1_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_2_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_3_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_4_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_5_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_6_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_7_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_330_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_330_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_330_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_447_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_500_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_520_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_618_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_810_p2 = ((tmp_114_reg_1207 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_815_p2 = ((tmp_114_reg_1207 == 2'd0) ? 1'b1 : 1'b0);

assign ShuffleConvs_1_Downs_1_address0 = tmp_194_cast_fu_668_p1;

assign ShuffleConvs_1_Downs_2_address0 = tmp_194_cast_fu_668_p1;

assign ShuffleConvs_1_Downs_3_address0 = tmp_194_cast_fu_668_p1;

assign ShuffleConvs_1_Downs_4_address0 = tmp_194_cast_fu_668_p1;

assign ShuffleConvs_1_Downs_5_address0 = tmp_194_cast_fu_668_p1;

assign ShuffleConvs_1_Downs_6_address0 = tmp_194_cast_fu_668_p1;

assign ShuffleConvs_1_Downs_7_address0 = tmp_194_cast_fu_668_p1;

assign ShuffleConvs_1_Downs_address0 = tmp_194_cast_fu_668_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_1044;

assign brmerge40_demorgan_i_fu_872_p2 = (newsignbit_reg_1194 & deleted_ones_fu_838_p3);

assign brmerge9_fu_984_p2 = (newsignbit_8_reg_1256 | isneg_not_fu_979_p2);

assign brmerge_i_i5_fu_856_p2 = (newsignbit_reg_1194 | p_not_i_i_fu_850_p2);

assign brmerge_i_i_fu_975_p2 = (isneg_reg_1243 ^ newsignbit_8_reg_1256);

assign brmerge_i_i_i_fu_894_p2 = (underflow_fu_889_p2 | overflow_fu_866_p2);

assign carry_fu_787_p2 = (tmp_179_fu_759_p3 & tmp_112_fu_781_p2);

assign co_5_fu_336_p2 = (co_reg_249 + 6'd1);

assign deleted_ones_fu_838_p3 = ((carry_reg_1200[0:0] === 1'b1) ? p_41_i_i_fu_833_p2 : Range1_all_ones_fu_810_p2);

assign deleted_zeros_fu_820_p3 = ((carry_reg_1200[0:0] === 1'b1) ? Range1_all_ones_fu_810_p2 : Range1_all_zeros_fu_815_p2);

assign exitcond1_fu_500_p2 = ((w_reg_272 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond2_fu_520_p2 = ((m_reg_296 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond8_fu_330_p2 = ((co_reg_249 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond9_fu_447_p2 = ((h_reg_260 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_fu_618_p2 = ((n_reg_319 == 2'd3) ? 1'b1 : 1'b0);

assign h_5_fu_514_p2 = (h_reg_260 + 4'd1);

assign isneg_not_fu_979_p2 = (isneg_reg_1243 ^ 1'd1);

assign m_5_fu_526_p2 = (m_reg_296 + 2'd1);

assign n_5_fu_624_p2 = (n_reg_319 + 2'd1);

assign newIndex_fu_407_p4 = {{co_reg_249[5:3]}};

assign newsignbit_fu_773_p3 = p_Val2_52_fu_767_p2[32'd7];

assign output_V_address0 = tmp_185_cast_fu_1012_p1;

assign output_V_d0 = ((brmerge9_fu_984_p2[0:0] === 1'b1) ? result_V_mux_fu_989_p3 : p_result_V_fu_996_p3);

assign overflow_fu_866_p2 = (brmerge_i_i5_fu_856_p2 & tmp_115_fu_861_p2);

assign p_38_i_i_fu_845_p2 = (carry_reg_1200 & Range1_all_ones_fu_810_p2);

assign p_41_i_i_fu_833_p2 = (signbit_reg_1181 & tmp_113_fu_827_p2);

assign p_Val2_40_mux_fu_909_p3 = ((brmerge_i_i_i_reg_1233[0:0] === 1'b1) ? 8'd127 : p_Val2_52_reg_1188);

assign p_Val2_47_fu_937_p2 = ($signed(tmp_99_fu_929_p1) + $signed(tmp_100_fu_933_p1));

assign p_Val2_50_fu_733_p2 = ($signed(tmp_133_cast_fu_729_p1) + $signed(p_Val2_5_reg_1166));

assign p_Val2_51_fu_746_p4 = {{p_Val2_50_fu_733_p2[13:6]}};

assign p_Val2_52_fu_767_p2 = (p_Val2_51_fu_746_p4 + tmp_111_fu_756_p1);

assign p_Val2_5_fu_707_p0 = weight_V_load_reg_1156;

assign p_Val2_5_fu_707_p1 = tmp_96_reg_1161;

assign p_Val2_5_fu_707_p2 = ($signed(p_Val2_5_fu_707_p0) * $signed(p_Val2_5_fu_707_p1));

assign p_Val2_s_60_fu_915_p3 = ((underflow_reg_1228[0:0] === 1'b1) ? 8'd128 : p_Val2_52_reg_1188);

assign p_not_i_i_fu_850_p2 = (deleted_zeros_fu_820_p3 ^ 1'd1);

assign p_result_V_fu_996_p3 = ((underflow_8_fu_970_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_1250);

assign p_shl1_cast_fu_437_p1 = tmp_162_fu_429_p3;

assign p_shl2_cast_fu_381_p1 = tmp_157_fu_373_p3;

assign p_shl3_cast_fu_393_p1 = tmp_158_fu_385_p3;

assign p_shl4_cast_fu_359_p1 = tmp_155_fu_351_p3;

assign p_shl5_cast_fu_478_p1 = tmp_165_fu_470_p3;

assign p_shl6_cast_fu_490_p1 = tmp_166_fu_482_p3;

assign p_shl7_cast_fu_577_p3 = {{tmp_172_fu_572_p2}, {4'd0}};

assign p_shl8_cast_fu_593_p1 = tmp_173_fu_585_p3;

assign p_shl_cast_fu_425_p1 = tmp_161_fu_417_p3;

assign result_V_fu_951_p2 = (p_Val2_s_reg_284 + bias_V_q0);

assign result_V_mux_fu_989_p3 = ((brmerge_i_i_fu_975_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_1250);

assign sum_V_fu_921_p3 = ((underflow_not_fu_904_p2[0:0] === 1'b1) ? p_Val2_40_mux_fu_909_p3 : p_Val2_s_60_fu_915_p3);

assign tmp2_cast_fu_559_p1 = $signed(tmp2_fu_553_p2);

assign tmp2_fu_553_p2 = (m_reg_296 ^ 2'd2);

assign tmp3_cast_fu_650_p1 = $signed(tmp3_fu_644_p2);

assign tmp3_fu_644_p2 = (n_reg_319 ^ 2'd2);

assign tmp4_demorgan_fu_877_p2 = (p_38_i_i_fu_845_p2 | brmerge40_demorgan_i_fu_872_p2);

assign tmp4_fu_883_p2 = (tmp4_demorgan_fu_877_p2 ^ 1'd1);

assign tmp5_fu_900_p2 = (brmerge40_demorgan_i_reg_1223 | tmp_115_reg_1218);

assign tmp_100_fu_933_p1 = $signed(bias_V_q0);

assign tmp_101_fu_965_p2 = (newsignbit_8_reg_1256 ^ 1'd1);

assign tmp_102_cast_fu_603_p1 = w_reg_272;

assign tmp_103_cast_fu_532_p1 = m_reg_296;

assign tmp_104_fu_563_p2 = ($signed(tmp_s_reg_1052) + $signed(tmp2_cast_fu_559_p1));

assign tmp_105_cast_fu_568_p1 = tmp_104_fu_563_p2;

assign tmp_106_cast_fu_630_p1 = n_reg_319;

assign tmp_107_fu_654_p2 = ($signed(tmp3_cast_fu_650_p1) + $signed(tmp_98_reg_1065));

assign tmp_108_cast_fu_659_p1 = tmp_107_fu_654_p2;

assign tmp_109_fu_721_p3 = {{p_Val2_49_reg_307}, {6'd0}};

assign tmp_111_fu_756_p1 = tmp_178_reg_1171;

assign tmp_112_fu_781_p2 = (newsignbit_fu_773_p3 ^ 1'd1);

assign tmp_113_fu_827_p2 = (tmp_181_fu_803_p3 ^ 1'd1);

assign tmp_115_fu_861_p2 = (signbit_reg_1181 ^ 1'd1);

assign tmp_133_cast_fu_729_p1 = $signed(tmp_109_fu_721_p3);

assign tmp_155_fu_351_p3 = {{co_reg_249}, {2'd0}};

assign tmp_156_fu_363_p2 = (p_shl4_cast_fu_359_p1 - tmp_cast_fu_347_p1);

assign tmp_157_fu_373_p3 = {{co_reg_249}, {3'd0}};

assign tmp_158_fu_385_p3 = {{co_reg_249}, {1'd0}};

assign tmp_159_fu_397_p2 = (p_shl2_cast_fu_381_p1 + p_shl3_cast_fu_393_p1);

assign tmp_160_fu_403_p1 = co_reg_249[2:0];

assign tmp_161_fu_417_p3 = {{newIndex_fu_407_p4}, {4'd0}};

assign tmp_162_fu_429_p3 = {{newIndex_fu_407_p4}, {1'd0}};

assign tmp_163_fu_441_p2 = (p_shl_cast_fu_425_p1 + p_shl1_cast_fu_437_p1);

assign tmp_164_fu_465_p2 = (tmp_159_reg_1029 + tmp_97_cast_fu_461_p1);

assign tmp_165_fu_470_p3 = {{tmp_164_fu_465_p2}, {3'd0}};

assign tmp_166_fu_482_p3 = {{tmp_164_fu_465_p2}, {1'd0}};

assign tmp_167_fu_494_p2 = (p_shl6_cast_fu_490_p1 + p_shl5_cast_fu_478_p1);

assign tmp_168_fu_607_p2 = (tmp_167_reg_1057 + tmp_102_cast_fu_603_p1);

assign tmp_169_fu_536_p2 = ($signed(tmp_174_cast_reg_1024) + $signed(tmp_103_cast_fu_532_p1));

assign tmp_170_fu_541_p2 = tmp_169_fu_536_p2 << 10'd2;

assign tmp_171_fu_547_p2 = (tmp_170_fu_541_p2 - tmp_169_fu_536_p2);

assign tmp_172_fu_572_p2 = (tmp_163_reg_1039 + tmp_105_cast_fu_568_p1);

assign tmp_173_fu_585_p3 = {{tmp_172_fu_572_p2}, {1'd0}};

assign tmp_174_cast_fu_369_p1 = $signed(tmp_156_fu_363_p2);

assign tmp_174_fu_597_p2 = (p_shl8_cast_fu_593_p1 + p_shl7_cast_fu_577_p3);

assign tmp_175_fu_634_p2 = (tmp_106_cast_fu_630_p1 + tmp_171_reg_1083);

assign tmp_176_fu_663_p2 = (tmp_108_cast_fu_659_p1 + tmp_174_reg_1088);

assign tmp_179_fu_759_p3 = p_Val2_50_fu_733_p2[32'd13];

assign tmp_181_fu_803_p3 = p_Val2_50_reg_1176[32'd14];

assign tmp_185_cast_fu_1012_p1 = tmp_168_reg_1093;

assign tmp_193_cast_fu_639_p1 = tmp_175_fu_634_p2;

assign tmp_194_cast_fu_668_p1 = tmp_176_fu_663_p2;

assign tmp_97_cast_fu_461_p1 = h_reg_260;

assign tmp_98_fu_506_p3 = {{w_reg_272}, {1'd0}};

assign tmp_99_fu_929_p1 = $signed(p_Val2_s_reg_284);

assign tmp_cast_fu_347_p1 = co_reg_249;

assign tmp_fu_342_p1 = co_reg_249;

assign tmp_s_fu_453_p3 = {{h_reg_260}, {1'd0}};

assign underflow_8_fu_970_p2 = (isneg_reg_1243 & tmp_101_fu_965_p2);

assign underflow_fu_889_p2 = (signbit_reg_1181 & tmp4_fu_883_p2);

assign underflow_not_fu_904_p2 = (tmp5_fu_900_p2 | p_38_i_i_reg_1213);

assign w_5_fu_612_p2 = (w_reg_272 + 4'd1);

assign weight_V_address0 = tmp_193_cast_fu_639_p1;

always @ (posedge ap_clk) begin
    tmp_159_reg_1029[0] <= 1'b0;
    tmp_163_reg_1039[0] <= 1'b0;
    tmp_s_reg_1052[0] <= 1'b0;
    tmp_167_reg_1057[0] <= 1'b0;
    tmp_98_reg_1065[0] <= 1'b0;
    tmp_174_reg_1088[0] <= 1'b0;
end

endmodule //subconv_3x3_16_strid
