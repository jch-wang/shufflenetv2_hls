// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_32_strid_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        conv1_output_p_V_0_address0,
        conv1_output_p_V_0_ce0,
        conv1_output_p_V_0_q0,
        conv1_output_p_V_1_address0,
        conv1_output_p_V_1_ce0,
        conv1_output_p_V_1_q0,
        conv1_output_p_V_2_address0,
        conv1_output_p_V_2_ce0,
        conv1_output_p_V_2_q0,
        conv1_output_p_V_3_address0,
        conv1_output_p_V_3_ce0,
        conv1_output_p_V_3_q0,
        conv1_output_p_V_4_address0,
        conv1_output_p_V_4_ce0,
        conv1_output_p_V_4_q0,
        conv1_output_p_V_5_address0,
        conv1_output_p_V_5_ce0,
        conv1_output_p_V_5_q0,
        conv1_output_p_V_6_address0,
        conv1_output_p_V_6_ce0,
        conv1_output_p_V_6_q0,
        conv1_output_p_V_7_address0,
        conv1_output_p_V_7_ce0,
        conv1_output_p_V_7_q0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [4:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [11:0] conv1_output_p_V_0_address0;
output   conv1_output_p_V_0_ce0;
input  [7:0] conv1_output_p_V_0_q0;
output  [11:0] conv1_output_p_V_1_address0;
output   conv1_output_p_V_1_ce0;
input  [7:0] conv1_output_p_V_1_q0;
output  [11:0] conv1_output_p_V_2_address0;
output   conv1_output_p_V_2_ce0;
input  [7:0] conv1_output_p_V_2_q0;
output  [11:0] conv1_output_p_V_3_address0;
output   conv1_output_p_V_3_ce0;
input  [7:0] conv1_output_p_V_3_q0;
output  [11:0] conv1_output_p_V_4_address0;
output   conv1_output_p_V_4_ce0;
input  [7:0] conv1_output_p_V_4_q0;
output  [11:0] conv1_output_p_V_5_address0;
output   conv1_output_p_V_5_ce0;
input  [7:0] conv1_output_p_V_5_q0;
output  [11:0] conv1_output_p_V_6_address0;
output   conv1_output_p_V_6_ce0;
input  [7:0] conv1_output_p_V_6_q0;
output  [11:0] conv1_output_p_V_7_address0;
output   conv1_output_p_V_7_ce0;
input  [7:0] conv1_output_p_V_7_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg conv1_output_p_V_0_ce0;
reg conv1_output_p_V_1_ce0;
reg conv1_output_p_V_2_ce0;
reg conv1_output_p_V_3_ce0;
reg conv1_output_p_V_4_ce0;
reg conv1_output_p_V_5_ce0;
reg conv1_output_p_V_6_ce0;
reg conv1_output_p_V_7_ce0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] co_4_fu_334_p2;
reg   [4:0] co_4_reg_1013;
wire    ap_CS_fsm_state2;
wire  signed [8:0] tmp_108_cast_fu_367_p1;
reg  signed [8:0] tmp_108_cast_reg_1018;
wire   [0:0] exitcond4_fu_328_p2;
wire   [9:0] tmp_99_fu_395_p2;
reg   [9:0] tmp_99_reg_1023;
wire   [2:0] tmp_100_fu_401_p1;
reg   [2:0] tmp_100_reg_1028;
wire   [7:0] tmp_103_fu_439_p2;
reg   [7:0] tmp_103_reg_1033;
reg   [4:0] bias_V_addr_reg_1038;
wire   [5:0] tmp_s_fu_451_p3;
reg   [5:0] tmp_s_reg_1046;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond5_fu_445_p2;
wire   [13:0] tmp_106_fu_488_p2;
reg   [13:0] tmp_106_reg_1051;
wire   [5:0] tmp_61_fu_500_p3;
reg   [5:0] tmp_61_reg_1059;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond6_fu_494_p2;
wire   [4:0] h_4_fu_508_p2;
wire   [1:0] m_4_fu_520_p2;
reg   [1:0] m_4_reg_1072;
wire    ap_CS_fsm_state5;
wire   [8:0] tmp_110_fu_541_p2;
reg   [8:0] tmp_110_reg_1077;
wire   [0:0] exitcond7_fu_514_p2;
wire   [12:0] tmp_113_fu_591_p2;
reg   [12:0] tmp_113_reg_1082;
wire   [13:0] tmp_107_fu_601_p2;
reg   [13:0] tmp_107_reg_1087;
wire   [4:0] w_4_fu_606_p2;
reg   [4:0] w_4_reg_1092;
wire   [1:0] n_4_fu_618_p2;
reg   [1:0] n_4_reg_1100;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_612_p2;
reg   [7:0] weight_V_load_reg_1150;
wire    ap_CS_fsm_state7;
wire   [7:0] tmp_59_fu_674_p10;
reg   [7:0] tmp_59_reg_1155;
wire   [15:0] p_Val2_3_fu_701_p2;
reg   [15:0] p_Val2_3_reg_1160;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_117_reg_1165;
wire   [15:0] p_Val2_29_fu_727_p2;
reg   [15:0] p_Val2_29_reg_1170;
wire    ap_CS_fsm_state9;
reg   [0:0] signbit_reg_1175;
wire   [7:0] p_Val2_31_fu_761_p2;
reg   [7:0] p_Val2_31_reg_1182;
wire   [0:0] newsignbit_fu_767_p3;
reg   [0:0] newsignbit_reg_1188;
wire   [0:0] carry_fu_781_p2;
reg   [0:0] carry_reg_1194;
reg   [1:0] tmp_75_reg_1201;
wire   [0:0] p_38_i_i_fu_839_p2;
reg   [0:0] p_38_i_i_reg_1207;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_77_fu_855_p2;
reg   [0:0] tmp_77_reg_1212;
wire   [0:0] brmerge40_demorgan_i_fu_866_p2;
reg   [0:0] brmerge40_demorgan_i_reg_1217;
wire   [0:0] underflow_fu_883_p2;
reg   [0:0] underflow_reg_1222;
wire   [0:0] brmerge_i_i_i_fu_888_p2;
reg   [0:0] brmerge_i_i_i_reg_1227;
wire   [7:0] sum_V_fu_915_p3;
wire    ap_CS_fsm_state11;
reg   [0:0] isneg_reg_1237;
wire    ap_CS_fsm_state12;
wire   [7:0] result_V_fu_945_p2;
reg   [7:0] result_V_reg_1244;
reg   [0:0] newsignbit_5_reg_1250;
reg   [4:0] co_reg_247;
reg   [4:0] h_reg_258;
reg   [4:0] w_reg_270;
wire    ap_CS_fsm_state13;
reg   [7:0] p_Val2_s_reg_282;
reg   [1:0] m_reg_294;
reg   [7:0] p_Val2_28_reg_305;
reg   [1:0] n_reg_317;
wire   [63:0] tmp_fu_340_p1;
wire   [63:0] tmp_127_cast_fu_633_p1;
wire   [63:0] tmp_128_cast_fu_662_p1;
wire   [63:0] tmp_119_cast_fu_1006_p1;
wire   [6:0] tmp_95_fu_349_p3;
wire   [7:0] p_shl4_cast_fu_357_p1;
wire   [7:0] tmp_cast_fu_345_p1;
wire   [7:0] tmp_96_fu_361_p2;
wire   [8:0] tmp_97_fu_371_p3;
wire   [5:0] tmp_98_fu_383_p3;
wire   [9:0] p_shl2_cast_fu_379_p1;
wire   [9:0] p_shl3_cast_fu_391_p1;
wire   [1:0] newIndex_fu_405_p4;
wire   [6:0] tmp_101_fu_415_p3;
wire   [2:0] tmp_102_fu_427_p3;
wire   [7:0] p_shl_cast_fu_423_p1;
wire   [7:0] p_shl1_cast_fu_435_p1;
wire   [9:0] tmp_60_cast_fu_459_p1;
wire   [9:0] tmp_104_fu_463_p2;
wire   [10:0] tmp_105_fu_476_p3;
wire   [13:0] p_shl6_cast_fu_484_p1;
wire   [13:0] p_shl5_cast_fu_468_p3;
wire   [8:0] tmp_66_cast_fu_526_p1;
wire   [8:0] tmp_108_fu_530_p2;
wire   [8:0] tmp_109_fu_535_p2;
wire   [1:0] tmp2_fu_547_p2;
wire  signed [5:0] tmp2_cast_fu_553_p1;
wire   [5:0] tmp_67_fu_557_p2;
wire   [7:0] tmp_68_cast_fu_562_p1;
wire   [7:0] tmp_111_fu_566_p2;
wire   [8:0] tmp_112_fu_579_p3;
wire   [12:0] p_shl8_cast_fu_587_p1;
wire   [12:0] p_shl7_cast_fu_571_p3;
wire   [13:0] tmp_65_cast_fu_597_p1;
wire   [8:0] tmp_69_cast_fu_624_p1;
wire   [8:0] tmp_114_fu_628_p2;
wire   [1:0] tmp3_fu_638_p2;
wire  signed [5:0] tmp3_cast_fu_644_p1;
wire   [5:0] tmp_70_fu_648_p2;
wire   [12:0] tmp_71_cast_fu_653_p1;
wire   [12:0] tmp_115_fu_657_p2;
wire  signed [7:0] p_Val2_3_fu_701_p0;
wire  signed [7:0] p_Val2_3_fu_701_p1;
wire   [13:0] tmp_72_fu_715_p3;
wire  signed [15:0] tmp_89_cast_fu_723_p1;
wire   [7:0] p_Val2_30_fu_740_p4;
wire   [7:0] tmp_73_fu_750_p1;
wire   [0:0] tmp_118_fu_753_p3;
wire   [0:0] tmp_74_fu_775_p2;
wire   [0:0] Range1_all_ones_fu_804_p2;
wire   [0:0] Range1_all_zeros_fu_809_p2;
wire   [0:0] tmp_120_fu_797_p3;
wire   [0:0] tmp_76_fu_821_p2;
wire   [0:0] p_41_i_i_fu_827_p2;
wire   [0:0] deleted_zeros_fu_814_p3;
wire   [0:0] p_not_i_i_fu_844_p2;
wire   [0:0] brmerge_i_i4_fu_850_p2;
wire   [0:0] deleted_ones_fu_832_p3;
wire   [0:0] tmp4_demorgan_fu_871_p2;
wire   [0:0] tmp4_fu_877_p2;
wire   [0:0] overflow_fu_860_p2;
wire   [0:0] tmp5_fu_894_p2;
wire   [0:0] underflow_not_fu_898_p2;
wire   [7:0] p_Val2_32_mux_fu_903_p3;
wire   [7:0] p_Val2_s_45_fu_909_p3;
wire  signed [8:0] tmp_62_fu_923_p1;
wire  signed [8:0] tmp_63_fu_927_p1;
wire   [8:0] p_Val2_26_fu_931_p2;
wire   [0:0] tmp_64_fu_959_p2;
wire   [0:0] isneg_not_fu_973_p2;
wire   [0:0] brmerge_i_i_fu_969_p2;
wire   [0:0] underflow_5_fu_964_p2;
wire   [0:0] brmerge9_fu_978_p2;
wire   [7:0] result_V_mux_fu_983_p3;
wire   [7:0] p_result_V_fu_990_p3;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

ShuffleNetV2_mux_jbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_jbC_x_U117(
    .din1(conv1_output_p_V_0_q0),
    .din2(conv1_output_p_V_1_q0),
    .din3(conv1_output_p_V_2_q0),
    .din4(conv1_output_p_V_3_q0),
    .din5(conv1_output_p_V_4_q0),
    .din6(conv1_output_p_V_5_q0),
    .din7(conv1_output_p_V_6_q0),
    .din8(conv1_output_p_V_7_q0),
    .din9(tmp_100_reg_1028),
    .dout(tmp_59_fu_674_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond5_fu_445_p2 == 1'd1))) begin
        co_reg_247 <= co_4_reg_1013;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_247 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_328_p2 == 1'd0))) begin
        h_reg_258 <= 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond6_fu_494_p2 == 1'd1))) begin
        h_reg_258 <= h_4_fu_508_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_612_p2))) begin
        m_reg_294 <= m_4_reg_1072;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_494_p2))) begin
        m_reg_294 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        n_reg_317 <= n_4_reg_1100;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_514_p2))) begin
        n_reg_317 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_28_reg_305 <= sum_V_fu_915_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_514_p2))) begin
        p_Val2_28_reg_305 <= p_Val2_s_reg_282;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_612_p2))) begin
        p_Val2_s_reg_282 <= p_Val2_28_reg_305;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_494_p2))) begin
        p_Val2_s_reg_282 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond5_fu_445_p2))) begin
        w_reg_270 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        w_reg_270 <= w_4_reg_1092;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_328_p2 == 1'd0))) begin
        bias_V_addr_reg_1038 <= tmp_fu_340_p1;
        tmp_100_reg_1028 <= tmp_100_fu_401_p1;
        tmp_103_reg_1033[7 : 1] <= tmp_103_fu_439_p2[7 : 1];
        tmp_108_cast_reg_1018 <= tmp_108_cast_fu_367_p1;
        tmp_99_reg_1023[9 : 1] <= tmp_99_fu_395_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        brmerge40_demorgan_i_reg_1217 <= brmerge40_demorgan_i_fu_866_p2;
        brmerge_i_i_i_reg_1227 <= brmerge_i_i_i_fu_888_p2;
        p_38_i_i_reg_1207 <= p_38_i_i_fu_839_p2;
        tmp_77_reg_1212 <= tmp_77_fu_855_p2;
        underflow_reg_1222 <= underflow_fu_883_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        carry_reg_1194 <= carry_fu_781_p2;
        newsignbit_reg_1188 <= p_Val2_31_fu_761_p2[32'd7];
        p_Val2_29_reg_1170 <= p_Val2_29_fu_727_p2;
        p_Val2_31_reg_1182 <= p_Val2_31_fu_761_p2;
        signbit_reg_1175 <= p_Val2_29_fu_727_p2[32'd15];
        tmp_75_reg_1201 <= {{p_Val2_29_fu_727_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_4_reg_1013 <= co_4_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        isneg_reg_1237 <= p_Val2_26_fu_931_p2[32'd8];
        newsignbit_5_reg_1250 <= result_V_fu_945_p2[32'd7];
        result_V_reg_1244 <= result_V_fu_945_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_4_reg_1072 <= m_4_fu_520_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_4_reg_1100 <= n_4_fu_618_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_3_reg_1160 <= p_Val2_3_fu_701_p2;
        tmp_117_reg_1165 <= p_Val2_3_fu_701_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond5_fu_445_p2))) begin
        tmp_106_reg_1051[13 : 1] <= tmp_106_fu_488_p2[13 : 1];
        tmp_s_reg_1046[5 : 1] <= tmp_s_fu_451_p3[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond7_fu_514_p2))) begin
        tmp_107_reg_1087 <= tmp_107_fu_601_p2;
        w_4_reg_1092 <= w_4_fu_606_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_514_p2))) begin
        tmp_110_reg_1077 <= tmp_110_fu_541_p2;
        tmp_113_reg_1082[12 : 1] <= tmp_113_fu_591_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_59_reg_1155 <= tmp_59_fu_674_p10;
        weight_V_load_reg_1150 <= weight_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_494_p2))) begin
        tmp_61_reg_1059[5 : 1] <= tmp_61_fu_500_p3[5 : 1];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_328_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_328_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_p_V_0_ce0 = 1'b1;
    end else begin
        conv1_output_p_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_p_V_1_ce0 = 1'b1;
    end else begin
        conv1_output_p_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_p_V_2_ce0 = 1'b1;
    end else begin
        conv1_output_p_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_p_V_3_ce0 = 1'b1;
    end else begin
        conv1_output_p_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_p_V_4_ce0 = 1'b1;
    end else begin
        conv1_output_p_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_p_V_5_ce0 = 1'b1;
    end else begin
        conv1_output_p_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_p_V_6_ce0 = 1'b1;
    end else begin
        conv1_output_p_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_p_V_7_ce0 = 1'b1;
    end else begin
        conv1_output_p_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_328_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond5_fu_445_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond6_fu_494_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_514_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_612_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_804_p2 = ((tmp_75_reg_1201 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_809_p2 = ((tmp_75_reg_1201 == 2'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_1038;

assign brmerge40_demorgan_i_fu_866_p2 = (newsignbit_reg_1188 & deleted_ones_fu_832_p3);

assign brmerge9_fu_978_p2 = (newsignbit_5_reg_1250 | isneg_not_fu_973_p2);

assign brmerge_i_i4_fu_850_p2 = (newsignbit_reg_1188 | p_not_i_i_fu_844_p2);

assign brmerge_i_i_fu_969_p2 = (isneg_reg_1237 ^ newsignbit_5_reg_1250);

assign brmerge_i_i_i_fu_888_p2 = (underflow_fu_883_p2 | overflow_fu_860_p2);

assign carry_fu_781_p2 = (tmp_118_fu_753_p3 & tmp_74_fu_775_p2);

assign co_4_fu_334_p2 = (co_reg_247 + 5'd1);

assign conv1_output_p_V_0_address0 = tmp_128_cast_fu_662_p1;

assign conv1_output_p_V_1_address0 = tmp_128_cast_fu_662_p1;

assign conv1_output_p_V_2_address0 = tmp_128_cast_fu_662_p1;

assign conv1_output_p_V_3_address0 = tmp_128_cast_fu_662_p1;

assign conv1_output_p_V_4_address0 = tmp_128_cast_fu_662_p1;

assign conv1_output_p_V_5_address0 = tmp_128_cast_fu_662_p1;

assign conv1_output_p_V_6_address0 = tmp_128_cast_fu_662_p1;

assign conv1_output_p_V_7_address0 = tmp_128_cast_fu_662_p1;

assign deleted_ones_fu_832_p3 = ((carry_reg_1194[0:0] === 1'b1) ? p_41_i_i_fu_827_p2 : Range1_all_ones_fu_804_p2);

assign deleted_zeros_fu_814_p3 = ((carry_reg_1194[0:0] === 1'b1) ? Range1_all_ones_fu_804_p2 : Range1_all_zeros_fu_809_p2);

assign exitcond4_fu_328_p2 = ((co_reg_247 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond5_fu_445_p2 = ((h_reg_258 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond6_fu_494_p2 = ((w_reg_270 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond7_fu_514_p2 = ((m_reg_294 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_612_p2 = ((n_reg_317 == 2'd3) ? 1'b1 : 1'b0);

assign h_4_fu_508_p2 = (h_reg_258 + 5'd1);

assign isneg_not_fu_973_p2 = (isneg_reg_1237 ^ 1'd1);

assign m_4_fu_520_p2 = (m_reg_294 + 2'd1);

assign n_4_fu_618_p2 = (n_reg_317 + 2'd1);

assign newIndex_fu_405_p4 = {{co_reg_247[4:3]}};

assign newsignbit_fu_767_p3 = p_Val2_31_fu_761_p2[32'd7];

assign output_V_address0 = tmp_119_cast_fu_1006_p1;

assign output_V_d0 = ((brmerge9_fu_978_p2[0:0] === 1'b1) ? result_V_mux_fu_983_p3 : p_result_V_fu_990_p3);

assign overflow_fu_860_p2 = (brmerge_i_i4_fu_850_p2 & tmp_77_fu_855_p2);

assign p_38_i_i_fu_839_p2 = (carry_reg_1194 & Range1_all_ones_fu_804_p2);

assign p_41_i_i_fu_827_p2 = (signbit_reg_1175 & tmp_76_fu_821_p2);

assign p_Val2_26_fu_931_p2 = ($signed(tmp_62_fu_923_p1) + $signed(tmp_63_fu_927_p1));

assign p_Val2_29_fu_727_p2 = ($signed(tmp_89_cast_fu_723_p1) + $signed(p_Val2_3_reg_1160));

assign p_Val2_30_fu_740_p4 = {{p_Val2_29_fu_727_p2[13:6]}};

assign p_Val2_31_fu_761_p2 = (p_Val2_30_fu_740_p4 + tmp_73_fu_750_p1);

assign p_Val2_32_mux_fu_903_p3 = ((brmerge_i_i_i_reg_1227[0:0] === 1'b1) ? 8'd127 : p_Val2_31_reg_1182);

assign p_Val2_3_fu_701_p0 = weight_V_load_reg_1150;

assign p_Val2_3_fu_701_p1 = tmp_59_reg_1155;

assign p_Val2_3_fu_701_p2 = ($signed(p_Val2_3_fu_701_p0) * $signed(p_Val2_3_fu_701_p1));

assign p_Val2_s_45_fu_909_p3 = ((underflow_reg_1222[0:0] === 1'b1) ? 8'd128 : p_Val2_31_reg_1182);

assign p_not_i_i_fu_844_p2 = (deleted_zeros_fu_814_p3 ^ 1'd1);

assign p_result_V_fu_990_p3 = ((underflow_5_fu_964_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_1244);

assign p_shl1_cast_fu_435_p1 = tmp_102_fu_427_p3;

assign p_shl2_cast_fu_379_p1 = tmp_97_fu_371_p3;

assign p_shl3_cast_fu_391_p1 = tmp_98_fu_383_p3;

assign p_shl4_cast_fu_357_p1 = tmp_95_fu_349_p3;

assign p_shl5_cast_fu_468_p3 = {{tmp_104_fu_463_p2}, {4'd0}};

assign p_shl6_cast_fu_484_p1 = tmp_105_fu_476_p3;

assign p_shl7_cast_fu_571_p3 = {{tmp_111_fu_566_p2}, {5'd0}};

assign p_shl8_cast_fu_587_p1 = tmp_112_fu_579_p3;

assign p_shl_cast_fu_423_p1 = tmp_101_fu_415_p3;

assign result_V_fu_945_p2 = (p_Val2_s_reg_282 + bias_V_q0);

assign result_V_mux_fu_983_p3 = ((brmerge_i_i_fu_969_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_1244);

assign sum_V_fu_915_p3 = ((underflow_not_fu_898_p2[0:0] === 1'b1) ? p_Val2_32_mux_fu_903_p3 : p_Val2_s_45_fu_909_p3);

assign tmp2_cast_fu_553_p1 = $signed(tmp2_fu_547_p2);

assign tmp2_fu_547_p2 = (m_reg_294 ^ 2'd2);

assign tmp3_cast_fu_644_p1 = $signed(tmp3_fu_638_p2);

assign tmp3_fu_638_p2 = (n_reg_317 ^ 2'd2);

assign tmp4_demorgan_fu_871_p2 = (p_38_i_i_fu_839_p2 | brmerge40_demorgan_i_fu_866_p2);

assign tmp4_fu_877_p2 = (tmp4_demorgan_fu_871_p2 ^ 1'd1);

assign tmp5_fu_894_p2 = (brmerge40_demorgan_i_reg_1217 | tmp_77_reg_1212);

assign tmp_100_fu_401_p1 = co_reg_247[2:0];

assign tmp_101_fu_415_p3 = {{newIndex_fu_405_p4}, {5'd0}};

assign tmp_102_fu_427_p3 = {{newIndex_fu_405_p4}, {1'd0}};

assign tmp_103_fu_439_p2 = (p_shl_cast_fu_423_p1 + p_shl1_cast_fu_435_p1);

assign tmp_104_fu_463_p2 = (tmp_99_reg_1023 + tmp_60_cast_fu_459_p1);

assign tmp_105_fu_476_p3 = {{tmp_104_fu_463_p2}, {1'd0}};

assign tmp_106_fu_488_p2 = (p_shl6_cast_fu_484_p1 + p_shl5_cast_fu_468_p3);

assign tmp_107_fu_601_p2 = (tmp_106_reg_1051 + tmp_65_cast_fu_597_p1);

assign tmp_108_cast_fu_367_p1 = $signed(tmp_96_fu_361_p2);

assign tmp_108_fu_530_p2 = ($signed(tmp_108_cast_reg_1018) + $signed(tmp_66_cast_fu_526_p1));

assign tmp_109_fu_535_p2 = tmp_108_fu_530_p2 << 9'd2;

assign tmp_110_fu_541_p2 = (tmp_109_fu_535_p2 - tmp_108_fu_530_p2);

assign tmp_111_fu_566_p2 = (tmp_103_reg_1033 + tmp_68_cast_fu_562_p1);

assign tmp_112_fu_579_p3 = {{tmp_111_fu_566_p2}, {1'd0}};

assign tmp_113_fu_591_p2 = (p_shl8_cast_fu_587_p1 + p_shl7_cast_fu_571_p3);

assign tmp_114_fu_628_p2 = (tmp_69_cast_fu_624_p1 + tmp_110_reg_1077);

assign tmp_115_fu_657_p2 = (tmp_71_cast_fu_653_p1 + tmp_113_reg_1082);

assign tmp_118_fu_753_p3 = p_Val2_29_fu_727_p2[32'd13];

assign tmp_119_cast_fu_1006_p1 = tmp_107_reg_1087;

assign tmp_120_fu_797_p3 = p_Val2_29_reg_1170[32'd14];

assign tmp_127_cast_fu_633_p1 = tmp_114_fu_628_p2;

assign tmp_128_cast_fu_662_p1 = tmp_115_fu_657_p2;

assign tmp_60_cast_fu_459_p1 = h_reg_258;

assign tmp_61_fu_500_p3 = {{w_reg_270}, {1'd0}};

assign tmp_62_fu_923_p1 = $signed(p_Val2_s_reg_282);

assign tmp_63_fu_927_p1 = $signed(bias_V_q0);

assign tmp_64_fu_959_p2 = (newsignbit_5_reg_1250 ^ 1'd1);

assign tmp_65_cast_fu_597_p1 = w_reg_270;

assign tmp_66_cast_fu_526_p1 = m_reg_294;

assign tmp_67_fu_557_p2 = ($signed(tmp_s_reg_1046) + $signed(tmp2_cast_fu_553_p1));

assign tmp_68_cast_fu_562_p1 = tmp_67_fu_557_p2;

assign tmp_69_cast_fu_624_p1 = n_reg_317;

assign tmp_70_fu_648_p2 = ($signed(tmp3_cast_fu_644_p1) + $signed(tmp_61_reg_1059));

assign tmp_71_cast_fu_653_p1 = tmp_70_fu_648_p2;

assign tmp_72_fu_715_p3 = {{p_Val2_28_reg_305}, {6'd0}};

assign tmp_73_fu_750_p1 = tmp_117_reg_1165;

assign tmp_74_fu_775_p2 = (newsignbit_fu_767_p3 ^ 1'd1);

assign tmp_76_fu_821_p2 = (tmp_120_fu_797_p3 ^ 1'd1);

assign tmp_77_fu_855_p2 = (signbit_reg_1175 ^ 1'd1);

assign tmp_89_cast_fu_723_p1 = $signed(tmp_72_fu_715_p3);

assign tmp_95_fu_349_p3 = {{co_reg_247}, {2'd0}};

assign tmp_96_fu_361_p2 = (p_shl4_cast_fu_357_p1 - tmp_cast_fu_345_p1);

assign tmp_97_fu_371_p3 = {{co_reg_247}, {4'd0}};

assign tmp_98_fu_383_p3 = {{co_reg_247}, {1'd0}};

assign tmp_99_fu_395_p2 = (p_shl2_cast_fu_379_p1 + p_shl3_cast_fu_391_p1);

assign tmp_cast_fu_345_p1 = co_reg_247;

assign tmp_fu_340_p1 = co_reg_247;

assign tmp_s_fu_451_p3 = {{h_reg_258}, {1'd0}};

assign underflow_5_fu_964_p2 = (isneg_reg_1237 & tmp_64_fu_959_p2);

assign underflow_fu_883_p2 = (signbit_reg_1175 & tmp4_fu_877_p2);

assign underflow_not_fu_898_p2 = (tmp5_fu_894_p2 | p_38_i_i_reg_1207);

assign w_4_fu_606_p2 = (w_reg_270 + 5'd1);

assign weight_V_address0 = tmp_127_cast_fu_633_p1;

always @ (posedge ap_clk) begin
    tmp_99_reg_1023[0] <= 1'b0;
    tmp_103_reg_1033[0] <= 1'b0;
    tmp_s_reg_1046[0] <= 1'b0;
    tmp_106_reg_1051[0] <= 1'b0;
    tmp_61_reg_1059[0] <= 1'b0;
    tmp_113_reg_1082[0] <= 1'b0;
end

endmodule //subconv_3x3_32_strid_1
