// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shuffle_48_r_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        buffer1_1_48_8x8_p_V_8_address0,
        buffer1_1_48_8x8_p_V_8_ce0,
        buffer1_1_48_8x8_p_V_8_q0,
        buffer1_1_48_8x8_p_V_1_address0,
        buffer1_1_48_8x8_p_V_1_ce0,
        buffer1_1_48_8x8_p_V_1_q0,
        buffer1_1_48_8x8_p_V_2_address0,
        buffer1_1_48_8x8_p_V_2_ce0,
        buffer1_1_48_8x8_p_V_2_q0,
        buffer1_1_48_8x8_p_V_3_address0,
        buffer1_1_48_8x8_p_V_3_ce0,
        buffer1_1_48_8x8_p_V_3_q0,
        buffer1_1_48_8x8_p_V_4_address0,
        buffer1_1_48_8x8_p_V_4_ce0,
        buffer1_1_48_8x8_p_V_4_q0,
        buffer1_1_48_8x8_p_V_5_address0,
        buffer1_1_48_8x8_p_V_5_ce0,
        buffer1_1_48_8x8_p_V_5_q0,
        buffer1_1_48_8x8_p_V_6_address0,
        buffer1_1_48_8x8_p_V_6_ce0,
        buffer1_1_48_8x8_p_V_6_q0,
        buffer1_1_48_8x8_p_V_7_address0,
        buffer1_1_48_8x8_p_V_7_ce0,
        buffer1_1_48_8x8_p_V_7_q0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [9:0] buffer1_1_48_8x8_p_V_8_address0;
output   buffer1_1_48_8x8_p_V_8_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_8_q0;
output  [9:0] buffer1_1_48_8x8_p_V_1_address0;
output   buffer1_1_48_8x8_p_V_1_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_1_q0;
output  [9:0] buffer1_1_48_8x8_p_V_2_address0;
output   buffer1_1_48_8x8_p_V_2_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_2_q0;
output  [9:0] buffer1_1_48_8x8_p_V_3_address0;
output   buffer1_1_48_8x8_p_V_3_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_3_q0;
output  [9:0] buffer1_1_48_8x8_p_V_4_address0;
output   buffer1_1_48_8x8_p_V_4_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_4_q0;
output  [9:0] buffer1_1_48_8x8_p_V_5_address0;
output   buffer1_1_48_8x8_p_V_5_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_5_q0;
output  [9:0] buffer1_1_48_8x8_p_V_6_address0;
output   buffer1_1_48_8x8_p_V_6_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_6_q0;
output  [9:0] buffer1_1_48_8x8_p_V_7_address0;
output   buffer1_1_48_8x8_p_V_7_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_7_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_V_ce0;
reg output_V_we0;
reg buffer1_1_48_8x8_p_V_8_ce0;
reg buffer1_1_48_8x8_p_V_1_ce0;
reg buffer1_1_48_8x8_p_V_2_ce0;
reg buffer1_1_48_8x8_p_V_3_ce0;
reg buffer1_1_48_8x8_p_V_4_ce0;
reg buffer1_1_48_8x8_p_V_5_ce0;
reg buffer1_1_48_8x8_p_V_6_ce0;
reg buffer1_1_48_8x8_p_V_7_ce0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_518_fu_207_p1;
reg   [0:0] tmp_518_reg_460;
wire    ap_CS_fsm_state2;
wire   [6:0] co_28_fu_217_p2;
reg   [6:0] co_28_reg_467;
wire   [10:0] tmp_442_fu_247_p2;
reg   [10:0] tmp_442_reg_472;
wire   [0:0] exitcond3_fu_211_p2;
reg   [2:0] arrayNo_reg_477;
wire   [6:0] tmp_446_fu_297_p2;
reg   [6:0] tmp_446_reg_482;
wire   [3:0] h_24_fu_309_p2;
reg   [3:0] h_24_reg_490;
wire    ap_CS_fsm_state3;
wire   [14:0] tmp_448_fu_352_p2;
reg   [14:0] tmp_448_reg_495;
wire   [0:0] exitcond2_fu_303_p2;
wire   [10:0] tmp_450_fu_387_p2;
reg   [10:0] tmp_450_reg_500;
wire   [3:0] w_28_fu_399_p2;
reg   [3:0] w_28_reg_508;
wire    ap_CS_fsm_state4;
wire   [14:0] tmp_451_fu_413_p2;
reg   [14:0] tmp_451_reg_513;
wire   [0:0] exitcond_fu_393_p2;
wire   [7:0] tmp_fu_435_p10;
reg   [7:0] tmp_reg_558;
wire    ap_CS_fsm_state5;
reg   [6:0] co_reg_174;
reg   [3:0] h_reg_185;
reg   [3:0] w_reg_196;
wire    ap_CS_fsm_state6;
wire   [63:0] tmp_541_cast_fu_423_p1;
wire   [63:0] tmp_540_cast_fu_456_p1;
wire   [9:0] tmp_s_fu_223_p3;
wire   [7:0] tmp_441_fu_235_p3;
wire   [10:0] p_shl3_cast_fu_243_p1;
wire   [10:0] p_shl2_cast_fu_231_p1;
wire   [2:0] tmp_443_fu_263_p4;
wire   [5:0] tmp_444_fu_273_p3;
wire   [3:0] tmp_445_fu_285_p3;
wire   [6:0] p_shl1_cast_fu_293_p1;
wire   [6:0] p_shl_cast_fu_281_p1;
wire   [10:0] tmp_228_cast_fu_319_p1;
wire   [10:0] tmp_447_fu_323_p2;
wire   [13:0] tmp_519_fu_328_p3;
wire   [11:0] tmp_520_fu_340_p3;
wire   [14:0] p_shl6_cast_fu_336_p1;
wire   [14:0] p_shl7_cast_fu_348_p1;
wire   [6:0] tmp_228_cast9_fu_315_p1;
wire   [6:0] tmp_449_fu_358_p2;
wire   [9:0] tmp_521_fu_363_p3;
wire   [7:0] tmp_522_fu_375_p3;
wire   [10:0] p_shl4_cast_fu_371_p1;
wire   [10:0] p_shl5_cast_fu_383_p1;
wire   [14:0] tmp_229_cast_fu_409_p1;
wire   [10:0] tmp_229_cast8_fu_405_p1;
wire   [10:0] tmp_452_fu_418_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

ShuffleNetV2_mux_jbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_jbC_x_U226(
    .din1(buffer1_1_48_8x8_p_V_8_q0),
    .din2(buffer1_1_48_8x8_p_V_1_q0),
    .din3(buffer1_1_48_8x8_p_V_2_q0),
    .din4(buffer1_1_48_8x8_p_V_3_q0),
    .din5(buffer1_1_48_8x8_p_V_4_q0),
    .din6(buffer1_1_48_8x8_p_V_5_q0),
    .din7(buffer1_1_48_8x8_p_V_6_q0),
    .din8(buffer1_1_48_8x8_p_V_7_q0),
    .din9(arrayNo_reg_477),
    .dout(tmp_fu_435_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_303_p2 == 1'd1))) begin
        co_reg_174 <= co_28_reg_467;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_174 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_393_p2 == 1'd1))) begin
        h_reg_185 <= h_24_reg_490;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_211_p2 == 1'd0))) begin
        h_reg_185 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_303_p2))) begin
        w_reg_196 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        w_reg_196 <= w_28_reg_508;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_211_p2 == 1'd0))) begin
        arrayNo_reg_477 <= {{co_reg_174[3:1]}};
        tmp_442_reg_472[10 : 1] <= tmp_442_fu_247_p2[10 : 1];
        tmp_446_reg_482[6 : 1] <= tmp_446_fu_297_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_28_reg_467 <= co_28_fu_217_p2;
        tmp_518_reg_460 <= tmp_518_fu_207_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_24_reg_490 <= h_24_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_303_p2))) begin
        tmp_448_reg_495[14 : 1] <= tmp_448_fu_352_p2[14 : 1];
        tmp_450_reg_500[10 : 1] <= tmp_450_fu_387_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_393_p2) & (tmp_518_reg_460 == 1'd1))) begin
        tmp_451_reg_513 <= tmp_451_fu_413_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_reg_558 <= tmp_fu_435_p10;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_28_reg_508 <= w_28_fu_399_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_211_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_211_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_1_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_2_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_3_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_4_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_5_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_6_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_7_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_8_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_518_reg_460 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_211_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_303_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_393_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_393_p2) & (tmp_518_reg_460 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign buffer1_1_48_8x8_p_V_1_address0 = tmp_541_cast_fu_423_p1;

assign buffer1_1_48_8x8_p_V_2_address0 = tmp_541_cast_fu_423_p1;

assign buffer1_1_48_8x8_p_V_3_address0 = tmp_541_cast_fu_423_p1;

assign buffer1_1_48_8x8_p_V_4_address0 = tmp_541_cast_fu_423_p1;

assign buffer1_1_48_8x8_p_V_5_address0 = tmp_541_cast_fu_423_p1;

assign buffer1_1_48_8x8_p_V_6_address0 = tmp_541_cast_fu_423_p1;

assign buffer1_1_48_8x8_p_V_7_address0 = tmp_541_cast_fu_423_p1;

assign buffer1_1_48_8x8_p_V_8_address0 = tmp_541_cast_fu_423_p1;

assign co_28_fu_217_p2 = (7'd1 + co_reg_174);

assign exitcond2_fu_303_p2 = ((h_reg_185 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond3_fu_211_p2 = ((co_reg_174 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond_fu_393_p2 = ((w_reg_196 == 4'd10) ? 1'b1 : 1'b0);

assign h_24_fu_309_p2 = (h_reg_185 + 4'd1);

assign output_V_address0 = tmp_540_cast_fu_456_p1;

assign output_V_d0 = tmp_reg_558;

assign p_shl1_cast_fu_293_p1 = tmp_445_fu_285_p3;

assign p_shl2_cast_fu_231_p1 = tmp_s_fu_223_p3;

assign p_shl3_cast_fu_243_p1 = tmp_441_fu_235_p3;

assign p_shl4_cast_fu_371_p1 = tmp_521_fu_363_p3;

assign p_shl5_cast_fu_383_p1 = tmp_522_fu_375_p3;

assign p_shl6_cast_fu_336_p1 = tmp_519_fu_328_p3;

assign p_shl7_cast_fu_348_p1 = tmp_520_fu_340_p3;

assign p_shl_cast_fu_281_p1 = tmp_444_fu_273_p3;

assign tmp_228_cast9_fu_315_p1 = h_reg_185;

assign tmp_228_cast_fu_319_p1 = h_reg_185;

assign tmp_229_cast8_fu_405_p1 = w_reg_196;

assign tmp_229_cast_fu_409_p1 = w_reg_196;

assign tmp_441_fu_235_p3 = {{co_reg_174}, {1'd0}};

assign tmp_442_fu_247_p2 = (p_shl3_cast_fu_243_p1 + p_shl2_cast_fu_231_p1);

assign tmp_443_fu_263_p4 = {{co_reg_174[6:4]}};

assign tmp_444_fu_273_p3 = {{tmp_443_fu_263_p4}, {3'd0}};

assign tmp_445_fu_285_p3 = {{tmp_443_fu_263_p4}, {1'd0}};

assign tmp_446_fu_297_p2 = (p_shl1_cast_fu_293_p1 + p_shl_cast_fu_281_p1);

assign tmp_447_fu_323_p2 = (tmp_228_cast_fu_319_p1 + tmp_442_reg_472);

assign tmp_448_fu_352_p2 = (p_shl6_cast_fu_336_p1 + p_shl7_cast_fu_348_p1);

assign tmp_449_fu_358_p2 = (tmp_228_cast9_fu_315_p1 + tmp_446_reg_482);

assign tmp_450_fu_387_p2 = (p_shl4_cast_fu_371_p1 + p_shl5_cast_fu_383_p1);

assign tmp_451_fu_413_p2 = (tmp_448_reg_495 + tmp_229_cast_fu_409_p1);

assign tmp_452_fu_418_p2 = (tmp_450_reg_500 + tmp_229_cast8_fu_405_p1);

assign tmp_518_fu_207_p1 = co_reg_174[0:0];

assign tmp_519_fu_328_p3 = {{tmp_447_fu_323_p2}, {3'd0}};

assign tmp_520_fu_340_p3 = {{tmp_447_fu_323_p2}, {1'd0}};

assign tmp_521_fu_363_p3 = {{tmp_449_fu_358_p2}, {3'd0}};

assign tmp_522_fu_375_p3 = {{tmp_449_fu_358_p2}, {1'd0}};

assign tmp_540_cast_fu_456_p1 = tmp_451_reg_513;

assign tmp_541_cast_fu_423_p1 = tmp_452_fu_418_p2;

assign tmp_s_fu_223_p3 = {{co_reg_174}, {3'd0}};

assign w_28_fu_399_p2 = (w_reg_196 + 4'd1);

always @ (posedge ap_clk) begin
    tmp_442_reg_472[0] <= 1'b0;
    tmp_446_reg_482[0] <= 1'b0;
    tmp_448_reg_495[0] <= 1'b0;
    tmp_450_reg_500[0] <= 1'b0;
end

endmodule //shuffle_48_r_p
