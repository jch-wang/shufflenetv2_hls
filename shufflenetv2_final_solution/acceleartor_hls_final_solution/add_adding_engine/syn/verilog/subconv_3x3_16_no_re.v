// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_16_no_re (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        buffer1_1_24_16x16_p_7_address0,
        buffer1_1_24_16x16_p_7_ce0,
        buffer1_1_24_16x16_p_7_q0,
        buffer1_1_24_16x16_p_6_address0,
        buffer1_1_24_16x16_p_6_ce0,
        buffer1_1_24_16x16_p_6_q0,
        buffer1_1_24_16x16_p_5_address0,
        buffer1_1_24_16x16_p_5_ce0,
        buffer1_1_24_16x16_p_5_q0,
        buffer1_1_24_16x16_p_4_address0,
        buffer1_1_24_16x16_p_4_ce0,
        buffer1_1_24_16x16_p_4_q0,
        buffer1_1_24_16x16_p_3_address0,
        buffer1_1_24_16x16_p_3_ce0,
        buffer1_1_24_16x16_p_3_q0,
        buffer1_1_24_16x16_p_2_address0,
        buffer1_1_24_16x16_p_2_ce0,
        buffer1_1_24_16x16_p_2_q0,
        buffer1_1_24_16x16_p_1_address0,
        buffer1_1_24_16x16_p_1_ce0,
        buffer1_1_24_16x16_p_1_q0,
        buffer1_1_24_16x16_p_address0,
        buffer1_1_24_16x16_p_ce0,
        buffer1_1_24_16x16_p_q0
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [4:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [9:0] buffer1_1_24_16x16_p_7_address0;
output   buffer1_1_24_16x16_p_7_ce0;
input  [7:0] buffer1_1_24_16x16_p_7_q0;
output  [9:0] buffer1_1_24_16x16_p_6_address0;
output   buffer1_1_24_16x16_p_6_ce0;
input  [7:0] buffer1_1_24_16x16_p_6_q0;
output  [9:0] buffer1_1_24_16x16_p_5_address0;
output   buffer1_1_24_16x16_p_5_ce0;
input  [7:0] buffer1_1_24_16x16_p_5_q0;
output  [9:0] buffer1_1_24_16x16_p_4_address0;
output   buffer1_1_24_16x16_p_4_ce0;
input  [7:0] buffer1_1_24_16x16_p_4_q0;
output  [9:0] buffer1_1_24_16x16_p_3_address0;
output   buffer1_1_24_16x16_p_3_ce0;
input  [7:0] buffer1_1_24_16x16_p_3_q0;
output  [9:0] buffer1_1_24_16x16_p_2_address0;
output   buffer1_1_24_16x16_p_2_ce0;
input  [7:0] buffer1_1_24_16x16_p_2_q0;
output  [9:0] buffer1_1_24_16x16_p_1_address0;
output   buffer1_1_24_16x16_p_1_ce0;
input  [7:0] buffer1_1_24_16x16_p_1_q0;
output  [9:0] buffer1_1_24_16x16_p_address0;
output   buffer1_1_24_16x16_p_ce0;
input  [7:0] buffer1_1_24_16x16_p_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg buffer1_1_24_16x16_p_7_ce0;
reg buffer1_1_24_16x16_p_6_ce0;
reg buffer1_1_24_16x16_p_5_ce0;
reg buffer1_1_24_16x16_p_4_ce0;
reg buffer1_1_24_16x16_p_3_ce0;
reg buffer1_1_24_16x16_p_2_ce0;
reg buffer1_1_24_16x16_p_1_ce0;
reg buffer1_1_24_16x16_p_ce0;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] co_6_fu_332_p2;
reg   [4:0] co_6_reg_993;
wire    ap_CS_fsm_state2;
wire  signed [8:0] tmp_196_cast_fu_365_p1;
reg  signed [8:0] tmp_196_cast_reg_998;
wire   [0:0] exitcond5_fu_326_p2;
wire   [9:0] tmp_180_fu_393_p2;
reg   [9:0] tmp_180_reg_1003;
wire   [2:0] tmp_182_fu_399_p1;
reg   [2:0] tmp_182_reg_1008;
wire   [6:0] tmp_184_fu_437_p2;
reg   [6:0] tmp_184_reg_1013;
reg   [4:0] bias_V_addr_reg_1018;
wire   [13:0] tmp_187_fu_478_p2;
reg   [13:0] tmp_187_reg_1026;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond6_fu_443_p2;
wire   [4:0] h_6_fu_490_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond7_fu_484_p2;
wire   [1:0] m_6_fu_502_p2;
reg   [1:0] m_6_reg_1042;
wire    ap_CS_fsm_state5;
wire   [8:0] tmp_189_fu_512_p2;
reg   [8:0] tmp_189_reg_1047;
wire   [0:0] exitcond8_fu_496_p2;
wire   [6:0] tmp_192_fu_537_p2;
reg   [6:0] tmp_192_reg_1053;
wire   [8:0] tmp_191_fu_547_p2;
reg   [8:0] tmp_191_reg_1059;
wire    ap_CS_fsm_state6;
wire   [10:0] tmp_194_fu_570_p2;
reg   [10:0] tmp_194_reg_1064;
wire   [1:0] n_6_fu_582_p2;
reg   [1:0] n_6_reg_1072;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond_fu_576_p2;
wire   [10:0] tmp_196_fu_622_p2;
reg   [10:0] tmp_196_reg_1082;
wire    ap_CS_fsm_state8;
reg   [7:0] weight_V_load_reg_1127;
wire   [7:0] tmp_126_fu_638_p10;
reg   [7:0] tmp_126_reg_1132;
wire    ap_CS_fsm_state9;
wire   [15:0] p_Val2_7_fu_665_p2;
reg   [15:0] p_Val2_7_reg_1137;
wire    ap_CS_fsm_state10;
reg   [0:0] tmp_198_reg_1142;
wire   [15:0] p_Val2_57_fu_691_p2;
reg   [15:0] p_Val2_57_reg_1147;
wire    ap_CS_fsm_state11;
reg   [0:0] signbit_reg_1152;
wire   [7:0] p_Val2_59_fu_725_p2;
reg   [7:0] p_Val2_59_reg_1159;
wire   [0:0] newsignbit_fu_731_p3;
reg   [0:0] newsignbit_reg_1165;
wire   [0:0] carry_fu_745_p2;
reg   [0:0] carry_reg_1171;
reg   [1:0] tmp_130_reg_1178;
wire   [0:0] p_38_i_i_fu_803_p2;
reg   [0:0] p_38_i_i_reg_1184;
wire    ap_CS_fsm_state12;
wire   [0:0] tmp_132_fu_819_p2;
reg   [0:0] tmp_132_reg_1189;
wire   [0:0] brmerge40_demorgan_i_fu_830_p2;
reg   [0:0] brmerge40_demorgan_i_reg_1194;
wire   [0:0] underflow_fu_847_p2;
reg   [0:0] underflow_reg_1199;
wire   [0:0] brmerge_i_i_i_fu_852_p2;
reg   [0:0] brmerge_i_i_i_reg_1204;
wire   [7:0] sum_V_fu_879_p3;
wire    ap_CS_fsm_state13;
reg   [0:0] isneg_reg_1214;
wire    ap_CS_fsm_state14;
wire   [7:0] result_V_fu_909_p2;
reg   [7:0] result_V_reg_1221;
reg   [0:0] newsignbit_9_reg_1227;
wire   [4:0] w_6_fu_984_p2;
wire    ap_CS_fsm_state15;
reg   [4:0] co_reg_245;
reg   [4:0] h_reg_256;
reg   [4:0] w_reg_268;
reg   [7:0] p_Val2_s_reg_280;
reg   [1:0] m_reg_292;
reg   [7:0] p_Val2_56_reg_303;
reg   [1:0] n_reg_315;
wire   [63:0] tmp_fu_338_p1;
wire   [63:0] tmp_215_cast_fu_597_p1;
wire   [63:0] tmp_216_cast_fu_627_p1;
wire   [63:0] tmp_207_cast_fu_979_p1;
wire   [6:0] tmp_s_fu_347_p3;
wire   [7:0] p_shl4_cast_fu_355_p1;
wire   [7:0] tmp_cast_fu_343_p1;
wire   [7:0] tmp_177_fu_359_p2;
wire   [8:0] tmp_178_fu_369_p3;
wire   [5:0] tmp_179_fu_381_p3;
wire   [9:0] p_shl2_cast_fu_377_p1;
wire   [9:0] p_shl3_cast_fu_389_p1;
wire   [1:0] newIndex_fu_403_p4;
wire   [5:0] tmp_181_fu_413_p3;
wire   [2:0] tmp_183_fu_425_p3;
wire   [6:0] p_shl_cast_fu_421_p1;
wire   [6:0] p_shl1_cast_fu_433_p1;
wire   [9:0] tmp_cast_62_fu_449_p1;
wire   [9:0] tmp_185_fu_453_p2;
wire   [10:0] tmp_186_fu_466_p3;
wire   [13:0] p_shl5_cast_fu_458_p3;
wire   [13:0] p_shl6_cast_fu_474_p1;
wire   [8:0] tmp_120_cast_fu_508_p1;
wire   [1:0] tmp2_fu_517_p2;
wire  signed [4:0] tmp2_cast_fu_523_p1;
wire   [4:0] tmp_121_fu_527_p2;
wire   [6:0] tmp_122_cast_fu_533_p1;
wire   [8:0] tmp_190_fu_542_p2;
wire   [7:0] tmp_193_fu_559_p3;
wire   [10:0] p_shl8_cast_fu_566_p1;
wire   [10:0] p_shl7_cast_fu_552_p3;
wire   [8:0] tmp_123_cast_fu_588_p1;
wire   [8:0] tmp_195_fu_592_p2;
wire   [1:0] tmp3_fu_602_p2;
wire  signed [4:0] tmp3_cast_fu_608_p1;
wire   [4:0] tmp_124_fu_612_p2;
wire   [10:0] tmp_125_cast_fu_618_p1;
wire  signed [7:0] p_Val2_7_fu_665_p0;
wire  signed [7:0] p_Val2_7_fu_665_p1;
wire   [13:0] tmp_127_fu_679_p3;
wire  signed [15:0] tmp_164_cast_fu_687_p1;
wire   [7:0] p_Val2_58_fu_704_p4;
wire   [7:0] tmp_128_fu_714_p1;
wire   [0:0] tmp_199_fu_717_p3;
wire   [0:0] tmp_129_fu_739_p2;
wire   [0:0] Range1_all_ones_fu_768_p2;
wire   [0:0] Range1_all_zeros_fu_773_p2;
wire   [0:0] tmp_201_fu_761_p3;
wire   [0:0] tmp_131_fu_785_p2;
wire   [0:0] p_41_i_i_fu_791_p2;
wire   [0:0] deleted_zeros_fu_778_p3;
wire   [0:0] p_not_i_i_fu_808_p2;
wire   [0:0] brmerge_i_i6_fu_814_p2;
wire   [0:0] deleted_ones_fu_796_p3;
wire   [0:0] tmp4_demorgan_fu_835_p2;
wire   [0:0] tmp4_fu_841_p2;
wire   [0:0] overflow_fu_824_p2;
wire   [0:0] tmp5_fu_858_p2;
wire   [0:0] underflow_not_fu_862_p2;
wire   [7:0] p_Val2_48_mux_fu_867_p3;
wire   [7:0] p_Val2_s_66_fu_873_p3;
wire  signed [8:0] tmp_116_fu_887_p1;
wire  signed [8:0] tmp_117_fu_891_p1;
wire   [8:0] p_Val2_54_fu_895_p2;
wire   [0:0] tmp_118_fu_923_p2;
wire   [0:0] isneg_not_fu_937_p2;
wire   [0:0] brmerge_i_i_fu_933_p2;
wire   [0:0] underflow_9_fu_928_p2;
wire   [0:0] brmerge9_fu_942_p2;
wire   [7:0] result_V_mux_fu_947_p3;
wire   [7:0] p_result_V_fu_954_p3;
wire   [13:0] tmp_119_cast_fu_970_p1;
wire   [13:0] tmp_188_fu_974_p2;
reg   [14:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

ShuffleNetV2_mux_jbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_jbC_x_U139(
    .din1(buffer1_1_24_16x16_p_7_q0),
    .din2(buffer1_1_24_16x16_p_6_q0),
    .din3(buffer1_1_24_16x16_p_5_q0),
    .din4(buffer1_1_24_16x16_p_4_q0),
    .din5(buffer1_1_24_16x16_p_3_q0),
    .din6(buffer1_1_24_16x16_p_2_q0),
    .din7(buffer1_1_24_16x16_p_1_q0),
    .din8(buffer1_1_24_16x16_p_q0),
    .din9(tmp_182_reg_1008),
    .dout(tmp_126_fu_638_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond6_fu_443_p2 == 1'd1))) begin
        co_reg_245 <= co_6_reg_993;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_245 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_326_p2 == 1'd0))) begin
        h_reg_256 <= 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond7_fu_484_p2 == 1'd1))) begin
        h_reg_256 <= h_6_fu_490_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond7_fu_484_p2))) begin
        m_reg_292 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_576_p2))) begin
        m_reg_292 <= m_6_reg_1042;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        n_reg_315 <= n_6_reg_1072;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        n_reg_315 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        p_Val2_56_reg_303 <= sum_V_fu_879_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_56_reg_303 <= p_Val2_s_reg_280;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond7_fu_484_p2))) begin
        p_Val2_s_reg_280 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_576_p2))) begin
        p_Val2_s_reg_280 <= p_Val2_56_reg_303;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond6_fu_443_p2))) begin
        w_reg_268 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        w_reg_268 <= w_6_fu_984_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_326_p2 == 1'd0))) begin
        bias_V_addr_reg_1018 <= tmp_fu_338_p1;
        tmp_180_reg_1003[9 : 1] <= tmp_180_fu_393_p2[9 : 1];
        tmp_182_reg_1008 <= tmp_182_fu_399_p1;
        tmp_184_reg_1013[6 : 1] <= tmp_184_fu_437_p2[6 : 1];
        tmp_196_cast_reg_998 <= tmp_196_cast_fu_365_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        brmerge40_demorgan_i_reg_1194 <= brmerge40_demorgan_i_fu_830_p2;
        brmerge_i_i_i_reg_1204 <= brmerge_i_i_i_fu_852_p2;
        p_38_i_i_reg_1184 <= p_38_i_i_fu_803_p2;
        tmp_132_reg_1189 <= tmp_132_fu_819_p2;
        underflow_reg_1199 <= underflow_fu_847_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        carry_reg_1171 <= carry_fu_745_p2;
        newsignbit_reg_1165 <= p_Val2_59_fu_725_p2[32'd7];
        p_Val2_57_reg_1147 <= p_Val2_57_fu_691_p2;
        p_Val2_59_reg_1159 <= p_Val2_59_fu_725_p2;
        signbit_reg_1152 <= p_Val2_57_fu_691_p2[32'd15];
        tmp_130_reg_1178 <= {{p_Val2_57_fu_691_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_6_reg_993 <= co_6_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        isneg_reg_1214 <= p_Val2_54_fu_895_p2[32'd8];
        newsignbit_9_reg_1227 <= result_V_fu_909_p2[32'd7];
        result_V_reg_1221 <= result_V_fu_909_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_6_reg_1042 <= m_6_fu_502_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        n_6_reg_1072 <= n_6_fu_582_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Val2_7_reg_1137 <= p_Val2_7_fu_665_p2;
        tmp_198_reg_1142 <= p_Val2_7_fu_665_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_126_reg_1132 <= tmp_126_fu_638_p10;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond6_fu_443_p2))) begin
        tmp_187_reg_1026[13 : 1] <= tmp_187_fu_478_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond8_fu_496_p2))) begin
        tmp_189_reg_1047 <= tmp_189_fu_512_p2;
        tmp_192_reg_1053 <= tmp_192_fu_537_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_191_reg_1059 <= tmp_191_fu_547_p2;
        tmp_194_reg_1064[10 : 1] <= tmp_194_fu_570_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond_fu_576_p2))) begin
        tmp_196_reg_1082 <= tmp_196_fu_622_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        weight_V_load_reg_1127 <= weight_V_q0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_326_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_326_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_24_16x16_p_1_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_24_16x16_p_2_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_24_16x16_p_3_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_24_16x16_p_4_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_24_16x16_p_5_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_24_16x16_p_6_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_24_16x16_p_7_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_24_16x16_p_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_326_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond6_fu_443_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond7_fu_484_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond8_fu_496_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_576_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_768_p2 = ((tmp_130_reg_1178 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_773_p2 = ((tmp_130_reg_1178 == 2'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_1018;

assign brmerge40_demorgan_i_fu_830_p2 = (newsignbit_reg_1165 & deleted_ones_fu_796_p3);

assign brmerge9_fu_942_p2 = (newsignbit_9_reg_1227 | isneg_not_fu_937_p2);

assign brmerge_i_i6_fu_814_p2 = (newsignbit_reg_1165 | p_not_i_i_fu_808_p2);

assign brmerge_i_i_fu_933_p2 = (isneg_reg_1214 ^ newsignbit_9_reg_1227);

assign brmerge_i_i_i_fu_852_p2 = (underflow_fu_847_p2 | overflow_fu_824_p2);

assign buffer1_1_24_16x16_p_1_address0 = tmp_216_cast_fu_627_p1;

assign buffer1_1_24_16x16_p_2_address0 = tmp_216_cast_fu_627_p1;

assign buffer1_1_24_16x16_p_3_address0 = tmp_216_cast_fu_627_p1;

assign buffer1_1_24_16x16_p_4_address0 = tmp_216_cast_fu_627_p1;

assign buffer1_1_24_16x16_p_5_address0 = tmp_216_cast_fu_627_p1;

assign buffer1_1_24_16x16_p_6_address0 = tmp_216_cast_fu_627_p1;

assign buffer1_1_24_16x16_p_7_address0 = tmp_216_cast_fu_627_p1;

assign buffer1_1_24_16x16_p_address0 = tmp_216_cast_fu_627_p1;

assign carry_fu_745_p2 = (tmp_199_fu_717_p3 & tmp_129_fu_739_p2);

assign co_6_fu_332_p2 = (co_reg_245 + 5'd1);

assign deleted_ones_fu_796_p3 = ((carry_reg_1171[0:0] === 1'b1) ? p_41_i_i_fu_791_p2 : Range1_all_ones_fu_768_p2);

assign deleted_zeros_fu_778_p3 = ((carry_reg_1171[0:0] === 1'b1) ? Range1_all_ones_fu_768_p2 : Range1_all_zeros_fu_773_p2);

assign exitcond5_fu_326_p2 = ((co_reg_245 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond6_fu_443_p2 = ((h_reg_256 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond7_fu_484_p2 = ((w_reg_268 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond8_fu_496_p2 = ((m_reg_292 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_576_p2 = ((n_reg_315 == 2'd3) ? 1'b1 : 1'b0);

assign h_6_fu_490_p2 = (h_reg_256 + 5'd1);

assign isneg_not_fu_937_p2 = (isneg_reg_1214 ^ 1'd1);

assign m_6_fu_502_p2 = (m_reg_292 + 2'd1);

assign n_6_fu_582_p2 = (n_reg_315 + 2'd1);

assign newIndex_fu_403_p4 = {{co_reg_245[4:3]}};

assign newsignbit_fu_731_p3 = p_Val2_59_fu_725_p2[32'd7];

assign output_V_address0 = tmp_207_cast_fu_979_p1;

assign output_V_d0 = ((brmerge9_fu_942_p2[0:0] === 1'b1) ? result_V_mux_fu_947_p3 : p_result_V_fu_954_p3);

assign overflow_fu_824_p2 = (brmerge_i_i6_fu_814_p2 & tmp_132_fu_819_p2);

assign p_38_i_i_fu_803_p2 = (carry_reg_1171 & Range1_all_ones_fu_768_p2);

assign p_41_i_i_fu_791_p2 = (signbit_reg_1152 & tmp_131_fu_785_p2);

assign p_Val2_48_mux_fu_867_p3 = ((brmerge_i_i_i_reg_1204[0:0] === 1'b1) ? 8'd127 : p_Val2_59_reg_1159);

assign p_Val2_54_fu_895_p2 = ($signed(tmp_116_fu_887_p1) + $signed(tmp_117_fu_891_p1));

assign p_Val2_57_fu_691_p2 = ($signed(tmp_164_cast_fu_687_p1) + $signed(p_Val2_7_reg_1137));

assign p_Val2_58_fu_704_p4 = {{p_Val2_57_fu_691_p2[13:6]}};

assign p_Val2_59_fu_725_p2 = (p_Val2_58_fu_704_p4 + tmp_128_fu_714_p1);

assign p_Val2_7_fu_665_p0 = weight_V_load_reg_1127;

assign p_Val2_7_fu_665_p1 = tmp_126_reg_1132;

assign p_Val2_7_fu_665_p2 = ($signed(p_Val2_7_fu_665_p0) * $signed(p_Val2_7_fu_665_p1));

assign p_Val2_s_66_fu_873_p3 = ((underflow_reg_1199[0:0] === 1'b1) ? 8'd128 : p_Val2_59_reg_1159);

assign p_not_i_i_fu_808_p2 = (deleted_zeros_fu_778_p3 ^ 1'd1);

assign p_result_V_fu_954_p3 = ((underflow_9_fu_928_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_1221);

assign p_shl1_cast_fu_433_p1 = tmp_183_fu_425_p3;

assign p_shl2_cast_fu_377_p1 = tmp_178_fu_369_p3;

assign p_shl3_cast_fu_389_p1 = tmp_179_fu_381_p3;

assign p_shl4_cast_fu_355_p1 = tmp_s_fu_347_p3;

assign p_shl5_cast_fu_458_p3 = {{tmp_185_fu_453_p2}, {4'd0}};

assign p_shl6_cast_fu_474_p1 = tmp_186_fu_466_p3;

assign p_shl7_cast_fu_552_p3 = {{tmp_192_reg_1053}, {4'd0}};

assign p_shl8_cast_fu_566_p1 = tmp_193_fu_559_p3;

assign p_shl_cast_fu_421_p1 = tmp_181_fu_413_p3;

assign result_V_fu_909_p2 = (p_Val2_s_reg_280 + bias_V_q0);

assign result_V_mux_fu_947_p3 = ((brmerge_i_i_fu_933_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_1221);

assign sum_V_fu_879_p3 = ((underflow_not_fu_862_p2[0:0] === 1'b1) ? p_Val2_48_mux_fu_867_p3 : p_Val2_s_66_fu_873_p3);

assign tmp2_cast_fu_523_p1 = $signed(tmp2_fu_517_p2);

assign tmp2_fu_517_p2 = ($signed(2'd3) + $signed(m_reg_292));

assign tmp3_cast_fu_608_p1 = $signed(tmp3_fu_602_p2);

assign tmp3_fu_602_p2 = ($signed(n_reg_315) + $signed(2'd3));

assign tmp4_demorgan_fu_835_p2 = (p_38_i_i_fu_803_p2 | brmerge40_demorgan_i_fu_830_p2);

assign tmp4_fu_841_p2 = (tmp4_demorgan_fu_835_p2 ^ 1'd1);

assign tmp5_fu_858_p2 = (brmerge40_demorgan_i_reg_1194 | tmp_132_reg_1189);

assign tmp_116_fu_887_p1 = $signed(p_Val2_s_reg_280);

assign tmp_117_fu_891_p1 = $signed(bias_V_q0);

assign tmp_118_fu_923_p2 = (newsignbit_9_reg_1227 ^ 1'd1);

assign tmp_119_cast_fu_970_p1 = w_reg_268;

assign tmp_120_cast_fu_508_p1 = m_reg_292;

assign tmp_121_fu_527_p2 = ($signed(h_reg_256) + $signed(tmp2_cast_fu_523_p1));

assign tmp_122_cast_fu_533_p1 = tmp_121_fu_527_p2;

assign tmp_123_cast_fu_588_p1 = n_reg_315;

assign tmp_124_fu_612_p2 = ($signed(tmp3_cast_fu_608_p1) + $signed(w_reg_268));

assign tmp_125_cast_fu_618_p1 = tmp_124_fu_612_p2;

assign tmp_127_fu_679_p3 = {{p_Val2_56_reg_303}, {6'd0}};

assign tmp_128_fu_714_p1 = tmp_198_reg_1142;

assign tmp_129_fu_739_p2 = (newsignbit_fu_731_p3 ^ 1'd1);

assign tmp_131_fu_785_p2 = (tmp_201_fu_761_p3 ^ 1'd1);

assign tmp_132_fu_819_p2 = (signbit_reg_1152 ^ 1'd1);

assign tmp_164_cast_fu_687_p1 = $signed(tmp_127_fu_679_p3);

assign tmp_177_fu_359_p2 = (p_shl4_cast_fu_355_p1 - tmp_cast_fu_343_p1);

assign tmp_178_fu_369_p3 = {{co_reg_245}, {4'd0}};

assign tmp_179_fu_381_p3 = {{co_reg_245}, {1'd0}};

assign tmp_180_fu_393_p2 = (p_shl2_cast_fu_377_p1 + p_shl3_cast_fu_389_p1);

assign tmp_181_fu_413_p3 = {{newIndex_fu_403_p4}, {4'd0}};

assign tmp_182_fu_399_p1 = co_reg_245[2:0];

assign tmp_183_fu_425_p3 = {{newIndex_fu_403_p4}, {1'd0}};

assign tmp_184_fu_437_p2 = (p_shl_cast_fu_421_p1 + p_shl1_cast_fu_433_p1);

assign tmp_185_fu_453_p2 = (tmp_cast_62_fu_449_p1 + tmp_180_reg_1003);

assign tmp_186_fu_466_p3 = {{tmp_185_fu_453_p2}, {1'd0}};

assign tmp_187_fu_478_p2 = (p_shl5_cast_fu_458_p3 + p_shl6_cast_fu_474_p1);

assign tmp_188_fu_974_p2 = (tmp_187_reg_1026 + tmp_119_cast_fu_970_p1);

assign tmp_189_fu_512_p2 = ($signed(tmp_196_cast_reg_998) + $signed(tmp_120_cast_fu_508_p1));

assign tmp_190_fu_542_p2 = tmp_189_reg_1047 << 9'd2;

assign tmp_191_fu_547_p2 = (tmp_190_fu_542_p2 - tmp_189_reg_1047);

assign tmp_192_fu_537_p2 = (tmp_184_reg_1013 + tmp_122_cast_fu_533_p1);

assign tmp_193_fu_559_p3 = {{tmp_192_reg_1053}, {1'd0}};

assign tmp_194_fu_570_p2 = (p_shl8_cast_fu_566_p1 + p_shl7_cast_fu_552_p3);

assign tmp_195_fu_592_p2 = (tmp_123_cast_fu_588_p1 + tmp_191_reg_1059);

assign tmp_196_cast_fu_365_p1 = $signed(tmp_177_fu_359_p2);

assign tmp_196_fu_622_p2 = (tmp_125_cast_fu_618_p1 + tmp_194_reg_1064);

assign tmp_199_fu_717_p3 = p_Val2_57_fu_691_p2[32'd13];

assign tmp_201_fu_761_p3 = p_Val2_57_reg_1147[32'd14];

assign tmp_207_cast_fu_979_p1 = tmp_188_fu_974_p2;

assign tmp_215_cast_fu_597_p1 = tmp_195_fu_592_p2;

assign tmp_216_cast_fu_627_p1 = tmp_196_reg_1082;

assign tmp_cast_62_fu_449_p1 = h_reg_256;

assign tmp_cast_fu_343_p1 = co_reg_245;

assign tmp_fu_338_p1 = co_reg_245;

assign tmp_s_fu_347_p3 = {{co_reg_245}, {2'd0}};

assign underflow_9_fu_928_p2 = (isneg_reg_1214 & tmp_118_fu_923_p2);

assign underflow_fu_847_p2 = (signbit_reg_1152 & tmp4_fu_841_p2);

assign underflow_not_fu_862_p2 = (tmp5_fu_858_p2 | p_38_i_i_reg_1184);

assign w_6_fu_984_p2 = (w_reg_268 + 5'd1);

assign weight_V_address0 = tmp_215_cast_fu_597_p1;

always @ (posedge ap_clk) begin
    tmp_180_reg_1003[0] <= 1'b0;
    tmp_184_reg_1013[0] <= 1'b0;
    tmp_187_reg_1026[0] <= 1'b0;
    tmp_194_reg_1064[0] <= 1'b0;
end

endmodule //subconv_3x3_16_no_re
