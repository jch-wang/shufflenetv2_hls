-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_16_no_re is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_23_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_23_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_23_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_22_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_22_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_22_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_11_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_11_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_6_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_6_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_5_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_5_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_4_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_4_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_3_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_2_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_1_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_21_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_21_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_21_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_20_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_20_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_20_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_19_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_19_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_19_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_18_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_18_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_18_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_17_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_17_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_17_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_16_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_16_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_16_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_15_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_15_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_15_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_14_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_14_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_14_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_13_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_13_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_13_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_12_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_12_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_10_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_10_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_9_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_9_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_8_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_8_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_7_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_7_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_16_no_re is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_162_cast_fu_528_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_162_cast_reg_871 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_133_fu_556_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_133_reg_876 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_6_fu_568_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_6_reg_884 : STD_LOGIC_VECTOR (4 downto 0);
    signal bias_V_addr_reg_889 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond5_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_135_fu_603_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_135_reg_894 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal output_V_addr_reg_902 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal h_6_fu_635_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond7_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_138_fu_656_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_138_reg_915 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m_6_fu_668_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_6_reg_923 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_141_fu_714_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_141_reg_928 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond8_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_addr_reg_933 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal n_6_fu_740_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_6_reg_941 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_143_fu_766_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_143_reg_946 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal weight_V_load_reg_1071 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_fu_798_p26 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_1076 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_865_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal w_6_fu_859_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal co_reg_419 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond6_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_reg_431 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_443 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_s_reg_455 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_467 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_09_1_reg_478 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_490 : STD_LOGIC_VECTOR (1 downto 0);
    signal co_cast7_fu_501_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_170_cast_fu_624_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_177_cast_fu_729_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_178_cast_fu_771_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_129_fu_510_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_fu_518_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal co_cast7_cast_fu_506_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_130_fu_522_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_131_fu_532_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_132_fu_544_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_552_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_540_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_cast6_cast_fu_574_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_134_fu_578_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_39_fu_591_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_583_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl4_cast_fu_599_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_cast5_cast_fu_615_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_136_fu_619_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal m_cast4_cast_fu_641_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_137_fu_645_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_40_fu_650_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_674_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_cast_fu_680_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_684_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_139_fu_690_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_140_fu_702_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl7_cast_fu_710_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl6_cast_fu_698_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_cast3_cast_fu_720_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_142_fu_724_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_746_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_752_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_756_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_cast_cast_fu_762_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component ShuffleNetV2_mux_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component ShuffleNetV2_mac_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mux_eOg_x_U199 : component ShuffleNetV2_mux_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 5,
        dout_WIDTH => 8)
    port map (
        din1 => buffer1_1_24_16x16_p_23_q0,
        din2 => buffer1_1_24_16x16_p_22_q0,
        din3 => buffer1_1_24_16x16_p_11_q0,
        din4 => buffer1_1_24_16x16_p_6_q0,
        din5 => buffer1_1_24_16x16_p_5_q0,
        din6 => buffer1_1_24_16x16_p_4_q0,
        din7 => buffer1_1_24_16x16_p_3_q0,
        din8 => buffer1_1_24_16x16_p_2_q0,
        din9 => buffer1_1_24_16x16_p_1_q0,
        din10 => buffer1_1_24_16x16_p_q0,
        din11 => buffer1_1_24_16x16_p_21_q0,
        din12 => buffer1_1_24_16x16_p_20_q0,
        din13 => buffer1_1_24_16x16_p_19_q0,
        din14 => buffer1_1_24_16x16_p_18_q0,
        din15 => buffer1_1_24_16x16_p_17_q0,
        din16 => buffer1_1_24_16x16_p_16_q0,
        din17 => buffer1_1_24_16x16_p_15_q0,
        din18 => buffer1_1_24_16x16_p_14_q0,
        din19 => buffer1_1_24_16x16_p_13_q0,
        din20 => buffer1_1_24_16x16_p_12_q0,
        din21 => buffer1_1_24_16x16_p_10_q0,
        din22 => buffer1_1_24_16x16_p_9_q0,
        din23 => buffer1_1_24_16x16_p_8_q0,
        din24 => buffer1_1_24_16x16_p_7_q0,
        din25 => co_reg_419,
        dout => tmp_fu_798_p26);

    ShuffleNetV2_mac_cud_x_U200 : component ShuffleNetV2_mac_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_reg_1076,
        din1 => weight_V_load_reg_1071,
        din2 => p_09_1_reg_478,
        dout => grp_fu_865_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_419_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond6_fu_609_p2))) then 
                co_reg_419 <= co_6_reg_884;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_419 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_reg_431_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_562_p2 = ap_const_lv1_0))) then 
                h_reg_431 <= ap_const_lv5_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_629_p2 = ap_const_lv1_1))) then 
                h_reg_431 <= h_6_fu_635_p2;
            end if; 
        end if;
    end process;

    m_reg_467_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond7_fu_629_p2))) then 
                m_reg_467 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_734_p2))) then 
                m_reg_467 <= m_6_reg_923;
            end if; 
        end if;
    end process;

    n_reg_490_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond8_fu_662_p2))) then 
                n_reg_490 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                n_reg_490 <= n_6_reg_941;
            end if; 
        end if;
    end process;

    p_09_1_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond8_fu_662_p2))) then 
                p_09_1_reg_478 <= p_s_reg_455;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_09_1_reg_478 <= grp_fu_865_p3;
            end if; 
        end if;
    end process;

    p_s_reg_455_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond7_fu_629_p2))) then 
                p_s_reg_455 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_734_p2))) then 
                p_s_reg_455 <= p_09_1_reg_478;
            end if; 
        end if;
    end process;

    w_reg_443_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_609_p2))) then 
                w_reg_443 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                w_reg_443 <= w_6_fu_859_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_562_p2 = ap_const_lv1_0))) then
                bias_V_addr_reg_889 <= co_cast7_fu_501_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_6_reg_884 <= co_6_fu_568_p2;
                    tmp_133_reg_876(9 downto 1) <= tmp_133_fu_556_p2(9 downto 1);
                tmp_162_cast_reg_871 <= tmp_162_cast_fu_528_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_6_reg_923 <= m_6_fu_668_p2;
                tmp_138_reg_915 <= tmp_138_fu_656_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_6_reg_941 <= n_6_fu_740_p2;
                weight_V_addr_reg_933 <= tmp_177_cast_fu_729_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_V_addr_reg_902 <= tmp_170_cast_fu_624_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_135_reg_894(13 downto 1) <= tmp_135_fu_603_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond8_fu_662_p2))) then
                    tmp_141_reg_928(9 downto 1) <= tmp_141_fu_714_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond_fu_734_p2))) then
                tmp_143_reg_946 <= tmp_143_fu_766_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_reg_1076 <= tmp_fu_798_p26;
                weight_V_load_reg_1071 <= weight_V_q0;
            end if;
        end if;
    end process;
    tmp_133_reg_876(0) <= '0';
    tmp_135_reg_894(0) <= '0';
    tmp_141_reg_928(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_562_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond7_fu_629_p2, ap_CS_fsm_state5, exitcond8_fu_662_p2, ap_CS_fsm_state6, exitcond_fu_734_p2, exitcond6_fu_609_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_562_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond6_fu_609_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_629_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond8_fu_662_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_734_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_562_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_562_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_562_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_562_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_889;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_10_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_10_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_10_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_11_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_11_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_11_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_12_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_12_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_12_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_13_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_13_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_13_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_14_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_14_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_14_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_15_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_15_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_15_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_16_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_16_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_16_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_17_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_17_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_17_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_18_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_18_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_18_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_19_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_19_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_19_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_1_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_1_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_1_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_20_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_20_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_20_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_21_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_21_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_21_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_22_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_22_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_22_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_23_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_23_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_23_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_2_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_2_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_2_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_3_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_3_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_3_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_4_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_4_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_4_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_5_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_5_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_5_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_6_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_6_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_6_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_7_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_7_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_7_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_8_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_8_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_8_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_9_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_9_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_9_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_address0 <= tmp_178_cast_fu_771_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_6_fu_568_p2 <= std_logic_vector(unsigned(co_reg_419) + unsigned(ap_const_lv5_1));
    co_cast7_cast_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_419),8));
    co_cast7_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_419),32));
    exitcond5_fu_562_p2 <= "1" when (co_reg_419 = ap_const_lv5_18) else "0";
    exitcond6_fu_609_p2 <= "1" when (h_reg_431 = ap_const_lv5_11) else "0";
    exitcond7_fu_629_p2 <= "1" when (w_reg_443 = ap_const_lv5_11) else "0";
    exitcond8_fu_662_p2 <= "1" when (m_reg_467 = ap_const_lv2_3) else "0";
    exitcond_fu_734_p2 <= "1" when (n_reg_490 = ap_const_lv2_3) else "0";
    h_6_fu_635_p2 <= std_logic_vector(unsigned(h_reg_431) + unsigned(ap_const_lv5_1));
    h_cast6_cast_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_431),10));
    m_6_fu_668_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(m_reg_467));
    m_cast4_cast_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_467),9));
    n_6_fu_740_p2 <= std_logic_vector(unsigned(n_reg_490) + unsigned(ap_const_lv2_1));
    n_cast3_cast_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_490),9));
    output_V_address0 <= output_V_addr_reg_902;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= std_logic_vector(unsigned(bias_V_q0) + unsigned(p_s_reg_455));

    output_V_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_132_fu_544_p3),10));
    p_shl2_cast_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_129_fu_510_p3),8));
    p_shl3_cast_fu_583_p3 <= (tmp_134_fu_578_p2 & ap_const_lv4_0);
    p_shl4_cast_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_591_p3),14));
    p_shl6_cast_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_139_fu_690_p3),10));
    p_shl7_cast_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_140_fu_702_p3),10));
    p_shl_cast_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_131_fu_532_p3),10));
        tmp1_cast_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_674_p2),5));

    tmp1_fu_674_p2 <= std_logic_vector(unsigned(m_reg_467) + unsigned(ap_const_lv2_3));
        tmp2_cast_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_746_p2),5));

    tmp2_fu_746_p2 <= std_logic_vector(unsigned(n_reg_490) + unsigned(ap_const_lv2_3));
    tmp_11_cast_cast_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_756_p2),10));
    tmp_129_fu_510_p3 <= (co_reg_419 & ap_const_lv2_0);
    tmp_130_fu_522_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_518_p1) - unsigned(co_cast7_cast_fu_506_p1));
    tmp_131_fu_532_p3 <= (co_reg_419 & ap_const_lv4_0);
    tmp_132_fu_544_p3 <= (co_reg_419 & ap_const_lv1_0);
    tmp_133_fu_556_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_552_p1) + unsigned(p_shl_cast_fu_540_p1));
    tmp_134_fu_578_p2 <= std_logic_vector(unsigned(h_cast6_cast_fu_574_p1) + unsigned(tmp_133_reg_876));
    tmp_135_fu_603_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_583_p3) + unsigned(p_shl4_cast_fu_599_p1));
    tmp_136_fu_619_p2 <= std_logic_vector(unsigned(tmp_135_reg_894) + unsigned(w_cast5_cast_fu_615_p1));
    tmp_137_fu_645_p2 <= std_logic_vector(unsigned(m_cast4_cast_fu_641_p1) + unsigned(tmp_162_cast_reg_871));
    tmp_138_fu_656_p2 <= std_logic_vector(unsigned(tmp_40_fu_650_p2) - unsigned(tmp_137_fu_645_p2));
    tmp_139_fu_690_p3 <= (tmp_s_fu_684_p2 & ap_const_lv4_0);
    tmp_140_fu_702_p3 <= (tmp_s_fu_684_p2 & ap_const_lv1_0);
    tmp_141_fu_714_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_710_p1) + unsigned(p_shl6_cast_fu_698_p1));
    tmp_142_fu_724_p2 <= std_logic_vector(unsigned(tmp_138_reg_915) + unsigned(n_cast3_cast_fu_720_p1));
    tmp_143_fu_766_p2 <= std_logic_vector(unsigned(tmp_141_reg_928) + unsigned(tmp_11_cast_cast_fu_762_p1));
        tmp_162_cast_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_130_fu_522_p2),9));

    tmp_170_cast_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_136_fu_619_p2),32));
    tmp_177_cast_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_142_fu_724_p2),32));
    tmp_178_cast_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_143_reg_946),32));
    tmp_1_fu_756_p2 <= std_logic_vector(unsigned(w_reg_443) + unsigned(tmp2_cast_fu_752_p1));
    tmp_39_fu_591_p3 <= (tmp_134_fu_578_p2 & ap_const_lv1_0);
    tmp_40_fu_650_p2 <= std_logic_vector(shift_left(unsigned(tmp_137_fu_645_p2),to_integer(unsigned('0' & ap_const_lv9_2(9-1 downto 0)))));
    tmp_s_fu_684_p2 <= std_logic_vector(unsigned(h_reg_431) + unsigned(tmp1_cast_fu_680_p1));
    w_6_fu_859_p2 <= std_logic_vector(unsigned(w_reg_443) + unsigned(ap_const_lv5_1));
    w_cast5_cast_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_443),14));
    weight_V_address0 <= weight_V_addr_reg_933;

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
