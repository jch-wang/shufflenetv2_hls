-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_16_strid is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_47_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_47_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_47_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_46_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_46_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_46_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_35_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_35_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_35_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_24_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_24_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_24_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_13_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_13_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_13_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_4_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_4_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_3_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_2_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_1_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_45_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_45_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_45_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_44_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_44_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_44_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_43_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_43_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_43_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_42_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_42_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_42_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_41_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_41_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_41_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_40_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_40_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_40_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_39_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_39_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_39_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_38_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_38_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_38_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_37_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_37_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_37_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_36_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_36_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_36_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_34_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_34_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_34_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_33_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_33_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_33_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_32_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_32_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_32_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_31_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_31_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_31_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_30_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_30_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_30_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_29_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_29_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_29_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_28_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_28_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_28_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_27_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_27_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_27_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_26_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_26_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_26_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_25_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_25_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_25_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_23_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_23_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_23_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_22_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_22_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_22_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_21_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_21_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_21_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_20_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_20_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_20_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_19_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_19_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_19_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_18_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_18_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_18_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_17_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_17_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_17_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_16_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_16_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_16_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_15_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_15_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_15_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_14_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_14_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_14_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_12_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_12_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_11_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_11_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_10_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_10_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_9_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_9_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_8_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_8_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_7_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_7_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_6_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_6_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_5_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_1_Downs_5_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_16_strid is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_144_cast_fu_877_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_144_cast_reg_1311 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_118_fu_905_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_118_reg_1316 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_5_fu_917_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal co_5_reg_1324 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias_V_addr_reg_1329 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond8_fu_911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_120_fu_956_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_120_reg_1334 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_968_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_1342 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond9_fu_962_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_addr_reg_1347 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_s_fu_996_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_reg_1355 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_5_fu_1004_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_123_fu_1025_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_123_reg_1365 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m_5_fu_1037_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_5_reg_1373 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_126_fu_1082_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_126_reg_1378 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond2_fu_1031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_5_fu_1088_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_5_reg_1383 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal n_5_fu_1114_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_5_reg_1396 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_1108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_load_reg_1641 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_4_fu_1196_p50 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_1646 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1305_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal co_reg_768 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_reg_780 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_792 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_s_reg_804 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_816 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_09_1_reg_827 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_839 : STD_LOGIC_VECTOR (1 downto 0);
    signal co_cast7_fu_850_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_152_cast_fu_985_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_159_cast_fu_1103_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_160_cast_fu_1144_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_114_fu_859_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_fu_867_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal co_cast7_cast_fu_855_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_115_fu_871_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_116_fu_881_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_117_fu_893_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_901_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_889_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_cast6_cast_fu_923_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_119_fu_927_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_36_fu_932_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_37_fu_944_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_940_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl4_cast_fu_952_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_cast5_cast_fu_976_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_121_fu_980_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal m_cast4_cast_fu_1010_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_122_fu_1014_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_38_fu_1019_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_fu_1043_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_cast_fu_1049_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_1053_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_124_fu_1058_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_125_fu_1070_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl7_cast_fu_1078_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl6_cast_fu_1066_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_cast3_cast_fu_1094_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_127_fu_1098_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp2_fu_1120_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_1126_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_1130_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_cast_cast_fu_1135_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_128_fu_1139_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component ShuffleNetV2_mux_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (7 downto 0);
        din26 : IN STD_LOGIC_VECTOR (7 downto 0);
        din27 : IN STD_LOGIC_VECTOR (7 downto 0);
        din28 : IN STD_LOGIC_VECTOR (7 downto 0);
        din29 : IN STD_LOGIC_VECTOR (7 downto 0);
        din30 : IN STD_LOGIC_VECTOR (7 downto 0);
        din31 : IN STD_LOGIC_VECTOR (7 downto 0);
        din32 : IN STD_LOGIC_VECTOR (7 downto 0);
        din33 : IN STD_LOGIC_VECTOR (7 downto 0);
        din34 : IN STD_LOGIC_VECTOR (7 downto 0);
        din35 : IN STD_LOGIC_VECTOR (7 downto 0);
        din36 : IN STD_LOGIC_VECTOR (7 downto 0);
        din37 : IN STD_LOGIC_VECTOR (7 downto 0);
        din38 : IN STD_LOGIC_VECTOR (7 downto 0);
        din39 : IN STD_LOGIC_VECTOR (7 downto 0);
        din40 : IN STD_LOGIC_VECTOR (7 downto 0);
        din41 : IN STD_LOGIC_VECTOR (7 downto 0);
        din42 : IN STD_LOGIC_VECTOR (7 downto 0);
        din43 : IN STD_LOGIC_VECTOR (7 downto 0);
        din44 : IN STD_LOGIC_VECTOR (7 downto 0);
        din45 : IN STD_LOGIC_VECTOR (7 downto 0);
        din46 : IN STD_LOGIC_VECTOR (7 downto 0);
        din47 : IN STD_LOGIC_VECTOR (7 downto 0);
        din48 : IN STD_LOGIC_VECTOR (7 downto 0);
        din49 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component ShuffleNetV2_mac_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mux_fYi_x_U354 : component ShuffleNetV2_mux_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 8,
        din29_WIDTH => 8,
        din30_WIDTH => 8,
        din31_WIDTH => 8,
        din32_WIDTH => 8,
        din33_WIDTH => 8,
        din34_WIDTH => 8,
        din35_WIDTH => 8,
        din36_WIDTH => 8,
        din37_WIDTH => 8,
        din38_WIDTH => 8,
        din39_WIDTH => 8,
        din40_WIDTH => 8,
        din41_WIDTH => 8,
        din42_WIDTH => 8,
        din43_WIDTH => 8,
        din44_WIDTH => 8,
        din45_WIDTH => 8,
        din46_WIDTH => 8,
        din47_WIDTH => 8,
        din48_WIDTH => 8,
        din49_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        din1 => ShuffleConvs_1_Downs_47_q0,
        din2 => ShuffleConvs_1_Downs_46_q0,
        din3 => ShuffleConvs_1_Downs_35_q0,
        din4 => ShuffleConvs_1_Downs_24_q0,
        din5 => ShuffleConvs_1_Downs_13_q0,
        din6 => ShuffleConvs_1_Downs_4_q0,
        din7 => ShuffleConvs_1_Downs_3_q0,
        din8 => ShuffleConvs_1_Downs_2_q0,
        din9 => ShuffleConvs_1_Downs_1_q0,
        din10 => ShuffleConvs_1_Downs_q0,
        din11 => ShuffleConvs_1_Downs_45_q0,
        din12 => ShuffleConvs_1_Downs_44_q0,
        din13 => ShuffleConvs_1_Downs_43_q0,
        din14 => ShuffleConvs_1_Downs_42_q0,
        din15 => ShuffleConvs_1_Downs_41_q0,
        din16 => ShuffleConvs_1_Downs_40_q0,
        din17 => ShuffleConvs_1_Downs_39_q0,
        din18 => ShuffleConvs_1_Downs_38_q0,
        din19 => ShuffleConvs_1_Downs_37_q0,
        din20 => ShuffleConvs_1_Downs_36_q0,
        din21 => ShuffleConvs_1_Downs_34_q0,
        din22 => ShuffleConvs_1_Downs_33_q0,
        din23 => ShuffleConvs_1_Downs_32_q0,
        din24 => ShuffleConvs_1_Downs_31_q0,
        din25 => ShuffleConvs_1_Downs_30_q0,
        din26 => ShuffleConvs_1_Downs_29_q0,
        din27 => ShuffleConvs_1_Downs_28_q0,
        din28 => ShuffleConvs_1_Downs_27_q0,
        din29 => ShuffleConvs_1_Downs_26_q0,
        din30 => ShuffleConvs_1_Downs_25_q0,
        din31 => ShuffleConvs_1_Downs_23_q0,
        din32 => ShuffleConvs_1_Downs_22_q0,
        din33 => ShuffleConvs_1_Downs_21_q0,
        din34 => ShuffleConvs_1_Downs_20_q0,
        din35 => ShuffleConvs_1_Downs_19_q0,
        din36 => ShuffleConvs_1_Downs_18_q0,
        din37 => ShuffleConvs_1_Downs_17_q0,
        din38 => ShuffleConvs_1_Downs_16_q0,
        din39 => ShuffleConvs_1_Downs_15_q0,
        din40 => ShuffleConvs_1_Downs_14_q0,
        din41 => ShuffleConvs_1_Downs_12_q0,
        din42 => ShuffleConvs_1_Downs_11_q0,
        din43 => ShuffleConvs_1_Downs_10_q0,
        din44 => ShuffleConvs_1_Downs_9_q0,
        din45 => ShuffleConvs_1_Downs_8_q0,
        din46 => ShuffleConvs_1_Downs_7_q0,
        din47 => ShuffleConvs_1_Downs_6_q0,
        din48 => ShuffleConvs_1_Downs_5_q0,
        din49 => co_reg_768,
        dout => tmp_4_fu_1196_p50);

    ShuffleNetV2_mac_cud_x_U355 : component ShuffleNetV2_mac_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_4_reg_1646,
        din1 => weight_V_load_reg_1641,
        din2 => p_09_1_reg_827,
        dout => grp_fu_1305_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_768_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_962_p2 = ap_const_lv1_1))) then 
                co_reg_768 <= co_5_reg_1324;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_768 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    h_reg_780_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_911_p2 = ap_const_lv1_0))) then 
                h_reg_780 <= ap_const_lv4_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_990_p2 = ap_const_lv1_1))) then 
                h_reg_780 <= h_5_fu_1004_p2;
            end if; 
        end if;
    end process;

    m_reg_816_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_1108_p2))) then 
                m_reg_816 <= m_5_reg_1373;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_990_p2))) then 
                m_reg_816 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_839_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_1031_p2))) then 
                n_reg_839 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                n_reg_839 <= n_5_reg_1396;
            end if; 
        end if;
    end process;

    p_09_1_reg_827_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_1031_p2))) then 
                p_09_1_reg_827 <= p_s_reg_804;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_09_1_reg_827 <= grp_fu_1305_p3;
            end if; 
        end if;
    end process;

    p_s_reg_804_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_1108_p2))) then 
                p_s_reg_804 <= p_09_1_reg_827;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_990_p2))) then 
                p_s_reg_804 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    w_reg_792_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond9_fu_962_p2))) then 
                w_reg_792 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                w_reg_792 <= w_5_reg_1383;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_911_p2 = ap_const_lv1_0))) then
                bias_V_addr_reg_1329 <= co_cast7_fu_850_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_5_reg_1324 <= co_5_fu_917_p2;
                    tmp_118_reg_1316(9 downto 1) <= tmp_118_fu_905_p2(9 downto 1);
                tmp_144_cast_reg_1311 <= tmp_144_cast_fu_877_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_5_reg_1373 <= m_5_fu_1037_p2;
                tmp_123_reg_1365 <= tmp_123_fu_1025_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_5_reg_1396 <= n_5_fu_1114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_V_addr_reg_1347 <= tmp_152_cast_fu_985_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_120_reg_1334(13 downto 1) <= tmp_120_fu_956_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_1031_p2))) then
                    tmp_126_reg_1378(9 downto 1) <= tmp_126_fu_1082_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_4_reg_1646 <= tmp_4_fu_1196_p50;
                weight_V_load_reg_1641 <= weight_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond9_fu_962_p2))) then
                    tmp_reg_1342(4 downto 1) <= tmp_fu_968_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_990_p2))) then
                    tmp_s_reg_1355(4 downto 1) <= tmp_s_fu_996_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond2_fu_1031_p2))) then
                w_5_reg_1383 <= w_5_fu_1088_p2;
            end if;
        end if;
    end process;
    tmp_118_reg_1316(0) <= '0';
    tmp_120_reg_1334(0) <= '0';
    tmp_reg_1342(0) <= '0';
    tmp_s_reg_1355(0) <= '0';
    tmp_126_reg_1378(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond8_fu_911_p2, ap_CS_fsm_state3, exitcond9_fu_962_p2, ap_CS_fsm_state4, exitcond1_fu_990_p2, ap_CS_fsm_state5, exitcond2_fu_1031_p2, ap_CS_fsm_state6, exitcond_fu_1108_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_911_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_962_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_990_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_1031_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_1108_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ShuffleConvs_1_Downs_10_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_10_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_10_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_11_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_11_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_11_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_12_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_12_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_12_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_13_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_13_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_13_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_14_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_14_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_14_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_15_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_15_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_15_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_16_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_16_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_16_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_17_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_17_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_17_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_18_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_18_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_18_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_19_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_19_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_19_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_1_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_1_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_20_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_20_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_20_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_21_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_21_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_21_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_22_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_22_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_22_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_23_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_23_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_23_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_24_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_24_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_24_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_25_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_25_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_25_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_26_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_26_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_26_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_27_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_27_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_27_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_28_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_28_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_28_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_28_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_29_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_29_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_29_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_29_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_2_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_2_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_30_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_30_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_30_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_30_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_31_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_31_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_31_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_31_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_32_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_32_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_32_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_32_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_33_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_33_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_33_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_33_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_34_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_34_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_34_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_34_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_35_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_35_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_35_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_35_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_36_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_36_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_36_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_36_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_37_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_37_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_37_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_37_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_38_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_38_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_38_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_38_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_39_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_39_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_39_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_39_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_3_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_3_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_3_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_40_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_40_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_40_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_40_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_41_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_41_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_41_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_41_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_42_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_42_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_42_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_42_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_43_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_43_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_43_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_43_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_44_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_44_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_44_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_44_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_45_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_45_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_45_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_45_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_46_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_46_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_46_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_46_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_47_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_47_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_47_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_47_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_4_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_4_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_5_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_5_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_5_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_6_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_6_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_6_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_7_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_7_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_7_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_8_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_8_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_8_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_9_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_9_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_9_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_address0 <= tmp_160_cast_fu_1144_p1(9 - 1 downto 0);

    ShuffleConvs_1_Downs_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond8_fu_911_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_911_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond8_fu_911_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_911_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_1329;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_5_fu_917_p2 <= std_logic_vector(unsigned(co_reg_768) + unsigned(ap_const_lv6_1));
    co_cast7_cast_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_768),9));
    co_cast7_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_768),32));
    exitcond1_fu_990_p2 <= "1" when (w_reg_792 = ap_const_lv4_9) else "0";
    exitcond2_fu_1031_p2 <= "1" when (m_reg_816 = ap_const_lv2_3) else "0";
    exitcond8_fu_911_p2 <= "1" when (co_reg_768 = ap_const_lv6_30) else "0";
    exitcond9_fu_962_p2 <= "1" when (h_reg_780 = ap_const_lv4_9) else "0";
    exitcond_fu_1108_p2 <= "1" when (n_reg_839 = ap_const_lv2_3) else "0";
    h_5_fu_1004_p2 <= std_logic_vector(unsigned(h_reg_780) + unsigned(ap_const_lv4_1));
    h_cast6_cast_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_780),10));
    m_5_fu_1037_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(m_reg_816));
    m_cast4_cast_fu_1010_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_816),10));
    n_5_fu_1114_p2 <= std_logic_vector(unsigned(n_reg_839) + unsigned(ap_const_lv2_1));
    n_cast3_cast_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_839),10));
    output_V_address0 <= output_V_addr_reg_1347;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= std_logic_vector(unsigned(bias_V_q0) + unsigned(p_s_reg_804));

    output_V_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_117_fu_893_p3),10));
    p_shl2_cast_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_114_fu_859_p3),9));
    p_shl3_cast_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_932_p3),14));
    p_shl4_cast_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_944_p3),14));
    p_shl6_cast_fu_1066_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_124_fu_1058_p3),10));
    p_shl7_cast_fu_1078_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_125_fu_1070_p3),10));
    p_shl_cast_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_fu_881_p3),10));
        tmp1_cast_fu_1049_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_1043_p2),5));

    tmp1_fu_1043_p2 <= (m_reg_816 xor ap_const_lv2_2);
        tmp2_cast_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_1120_p2),5));

    tmp2_fu_1120_p2 <= (n_reg_839 xor ap_const_lv2_2);
    tmp_114_fu_859_p3 <= (co_reg_768 & ap_const_lv2_0);
    tmp_115_fu_871_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_867_p1) - unsigned(co_cast7_cast_fu_855_p1));
    tmp_116_fu_881_p3 <= (co_reg_768 & ap_const_lv3_0);
    tmp_117_fu_893_p3 <= (co_reg_768 & ap_const_lv1_0);
    tmp_118_fu_905_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_901_p1) + unsigned(p_shl_cast_fu_889_p1));
    tmp_119_fu_927_p2 <= std_logic_vector(unsigned(h_cast6_cast_fu_923_p1) + unsigned(tmp_118_reg_1316));
    tmp_120_fu_956_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_940_p1) + unsigned(p_shl4_cast_fu_952_p1));
    tmp_121_fu_980_p2 <= std_logic_vector(unsigned(tmp_120_reg_1334) + unsigned(w_cast5_cast_fu_976_p1));
    tmp_122_fu_1014_p2 <= std_logic_vector(unsigned(m_cast4_cast_fu_1010_p1) + unsigned(tmp_144_cast_reg_1311));
    tmp_123_fu_1025_p2 <= std_logic_vector(unsigned(tmp_38_fu_1019_p2) - unsigned(tmp_122_fu_1014_p2));
    tmp_124_fu_1058_p3 <= (tmp_6_fu_1053_p2 & ap_const_lv4_0);
    tmp_125_fu_1070_p3 <= (tmp_6_fu_1053_p2 & ap_const_lv1_0);
    tmp_126_fu_1082_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_1078_p1) + unsigned(p_shl6_cast_fu_1066_p1));
    tmp_127_fu_1098_p2 <= std_logic_vector(unsigned(tmp_123_reg_1365) + unsigned(n_cast3_cast_fu_1094_p1));
    tmp_128_fu_1139_p2 <= std_logic_vector(unsigned(tmp_126_reg_1378) + unsigned(tmp_8_cast_cast_fu_1135_p1));
        tmp_144_cast_fu_877_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_115_fu_871_p2),10));

    tmp_152_cast_fu_985_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_121_fu_980_p2),32));
    tmp_159_cast_fu_1103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_127_fu_1098_p2),32));
    tmp_160_cast_fu_1144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_128_fu_1139_p2),32));
    tmp_36_fu_932_p3 <= (tmp_119_fu_927_p2 & ap_const_lv3_0);
    tmp_37_fu_944_p3 <= (tmp_119_fu_927_p2 & ap_const_lv1_0);
    tmp_38_fu_1019_p2 <= std_logic_vector(shift_left(unsigned(tmp_122_fu_1014_p2),to_integer(unsigned('0' & ap_const_lv10_2(10-1 downto 0)))));
    tmp_6_fu_1053_p2 <= std_logic_vector(unsigned(tmp_reg_1342) + unsigned(tmp1_cast_fu_1049_p1));
    tmp_8_cast_cast_fu_1135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_1130_p2),10));
    tmp_8_fu_1130_p2 <= std_logic_vector(unsigned(tmp_s_reg_1355) + unsigned(tmp2_cast_fu_1126_p1));
    tmp_fu_968_p3 <= (h_reg_780 & ap_const_lv1_0);
    tmp_s_fu_996_p3 <= (w_reg_792 & ap_const_lv1_0);
    w_5_fu_1088_p2 <= std_logic_vector(unsigned(w_reg_792) + unsigned(ap_const_lv4_1));
    w_cast5_cast_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_792),14));
    weight_V_address0 <= tmp_159_cast_fu_1103_p1(9 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
