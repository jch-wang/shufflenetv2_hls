// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_16_strid_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        shuffleunit0_2_outpu_address0,
        shuffleunit0_2_outpu_ce0,
        shuffleunit0_2_outpu_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [5:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [13:0] shuffleunit0_2_outpu_address0;
output   shuffleunit0_2_outpu_ce0;
input  [7:0] shuffleunit0_2_outpu_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg shuffleunit0_2_outpu_ce0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [9:0] tmp_122_cast_fu_218_p1;
reg  signed [9:0] tmp_122_cast_reg_530;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_102_fu_250_p2;
reg   [9:0] tmp_102_reg_535;
wire   [10:0] tmp_104_fu_268_p2;
reg   [10:0] tmp_104_reg_540;
wire   [5:0] co_5_fu_280_p2;
reg   [5:0] co_5_reg_548;
reg   [5:0] bias_V_addr_reg_553;
wire   [0:0] exitcond8_fu_274_p2;
wire   [13:0] tmp_106_fu_319_p2;
reg   [13:0] tmp_106_reg_558;
wire    ap_CS_fsm_state3;
wire   [4:0] tmp_fu_331_p3;
reg   [4:0] tmp_reg_566;
wire   [0:0] exitcond9_fu_325_p2;
reg   [12:0] output_V_addr_reg_571;
wire    ap_CS_fsm_state4;
wire   [4:0] tmp_s_fu_359_p3;
reg   [4:0] tmp_s_reg_579;
wire   [0:0] exitcond3_fu_353_p2;
wire   [3:0] h_5_fu_367_p2;
wire   [9:0] tmp_109_fu_388_p2;
reg   [9:0] tmp_109_reg_589;
wire    ap_CS_fsm_state5;
wire   [1:0] m_5_fu_400_p2;
reg   [1:0] m_5_reg_597;
wire   [14:0] tmp_111_fu_450_p2;
reg   [14:0] tmp_111_reg_602;
wire   [0:0] exitcond4_fu_394_p2;
wire   [3:0] w_5_fu_456_p2;
reg   [3:0] w_5_reg_607;
wire    ap_CS_fsm_state6;
wire   [1:0] n_5_fu_482_p2;
reg   [1:0] n_5_reg_620;
wire   [0:0] exitcond_fu_476_p2;
reg  signed [7:0] weight_V_load_reg_630;
wire    ap_CS_fsm_state7;
reg  signed [7:0] shuffleunit0_2_outpu_1_reg_635;
wire  signed [7:0] grp_fu_524_p3;
wire    ap_CS_fsm_state8;
reg   [5:0] co_reg_110;
reg   [3:0] h_reg_121;
reg   [3:0] w_reg_133;
wire    ap_CS_fsm_state9;
reg   [7:0] p_s_reg_145;
reg   [1:0] m_reg_157;
reg   [7:0] p_09_1_reg_168;
reg   [1:0] n_reg_180;
wire   [31:0] co_cast7_fu_191_p1;
wire   [31:0] tmp_133_cast_fu_348_p1;
wire   [31:0] tmp_141_cast_fu_471_p1;
wire   [31:0] tmp_142_cast_fu_512_p1;
wire   [7:0] tmp_98_fu_200_p3;
wire   [8:0] p_shl4_cast_fu_208_p1;
wire   [8:0] co_cast7_cast_fu_196_p1;
wire   [8:0] tmp_99_fu_212_p2;
wire   [8:0] tmp_100_fu_222_p3;
wire   [6:0] tmp_101_fu_234_p3;
wire   [9:0] p_shl3_cast_fu_246_p1;
wire   [9:0] p_shl2_cast_fu_230_p1;
wire   [9:0] tmp_103_fu_256_p3;
wire   [10:0] p_shl3_cast2_fu_242_p1;
wire   [10:0] p_shl_cast_fu_264_p1;
wire   [9:0] h_cast6_cast_fu_286_p1;
wire   [9:0] tmp_105_fu_290_p2;
wire   [12:0] tmp_32_fu_295_p3;
wire   [10:0] tmp_33_fu_307_p3;
wire   [13:0] p_shl5_cast_fu_303_p1;
wire   [13:0] p_shl6_cast_fu_315_p1;
wire   [13:0] w_cast5_cast_fu_339_p1;
wire   [13:0] tmp_107_fu_343_p2;
wire   [9:0] m_cast4_cast_fu_373_p1;
wire   [9:0] tmp_108_fu_377_p2;
wire   [9:0] tmp_34_fu_382_p2;
wire   [1:0] tmp1_fu_406_p2;
wire  signed [4:0] tmp1_cast_fu_412_p1;
wire   [4:0] tmp_7_fu_416_p2;
wire   [10:0] tmp_7_cast_cast_fu_421_p1;
wire   [10:0] tmp_110_fu_425_p2;
wire   [11:0] tmp_35_fu_438_p3;
wire   [14:0] p_shl8_cast_fu_430_p3;
wire   [14:0] p_shl9_cast_fu_446_p1;
wire   [9:0] n_cast3_cast_fu_462_p1;
wire   [9:0] tmp_112_fu_466_p2;
wire   [1:0] tmp2_fu_488_p2;
wire  signed [4:0] tmp2_cast_fu_494_p1;
wire   [4:0] tmp_8_fu_498_p2;
wire   [14:0] tmp_8_cast_cast_fu_503_p1;
wire   [14:0] tmp_113_fu_507_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

ShuffleNetV2_mac_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mac_cud_x_U556(
    .din0(weight_V_load_reg_630),
    .din1(shuffleunit0_2_outpu_1_reg_635),
    .din2(p_09_1_reg_168),
    .dout(grp_fu_524_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_325_p2 == 1'd1))) begin
        co_reg_110 <= co_5_reg_548;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_110 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_274_p2 == 1'd0))) begin
        h_reg_121 <= 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_353_p2 == 1'd1))) begin
        h_reg_121 <= h_5_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_476_p2))) begin
        m_reg_157 <= m_5_reg_597;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_353_p2))) begin
        m_reg_157 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_394_p2))) begin
        n_reg_180 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        n_reg_180 <= n_5_reg_620;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_394_p2))) begin
        p_09_1_reg_168 <= p_s_reg_145;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        p_09_1_reg_168 <= grp_fu_524_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_476_p2))) begin
        p_s_reg_145 <= p_09_1_reg_168;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_353_p2))) begin
        p_s_reg_145 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond9_fu_325_p2))) begin
        w_reg_133 <= 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        w_reg_133 <= w_5_reg_607;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_274_p2 == 1'd0))) begin
        bias_V_addr_reg_553 <= co_cast7_fu_191_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_5_reg_548 <= co_5_fu_280_p2;
        tmp_102_reg_535[9 : 1] <= tmp_102_fu_250_p2[9 : 1];
        tmp_104_reg_540[10 : 1] <= tmp_104_fu_268_p2[10 : 1];
        tmp_122_cast_reg_530 <= tmp_122_cast_fu_218_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_5_reg_597 <= m_5_fu_400_p2;
        tmp_109_reg_589 <= tmp_109_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_5_reg_620 <= n_5_fu_482_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_addr_reg_571 <= tmp_133_cast_fu_348_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        shuffleunit0_2_outpu_1_reg_635 <= shuffleunit0_2_outpu_q0;
        weight_V_load_reg_630 <= weight_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_106_reg_558[13 : 1] <= tmp_106_fu_319_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_394_p2))) begin
        tmp_111_reg_602[14 : 1] <= tmp_111_fu_450_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond9_fu_325_p2))) begin
        tmp_reg_566[4 : 1] <= tmp_fu_331_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_353_p2))) begin
        tmp_s_reg_579[4 : 1] <= tmp_s_fu_359_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond4_fu_394_p2))) begin
        w_5_reg_607 <= w_5_fu_456_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_274_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_274_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        shuffleunit0_2_outpu_ce0 = 1'b1;
    end else begin
        shuffleunit0_2_outpu_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_274_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_325_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_353_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_394_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_476_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_553;

assign co_5_fu_280_p2 = (co_reg_110 + 6'd1);

assign co_cast7_cast_fu_196_p1 = co_reg_110;

assign co_cast7_fu_191_p1 = co_reg_110;

assign exitcond3_fu_353_p2 = ((w_reg_133 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond4_fu_394_p2 = ((m_reg_157 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond8_fu_274_p2 = ((co_reg_110 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond9_fu_325_p2 = ((h_reg_121 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_fu_476_p2 = ((n_reg_180 == 2'd3) ? 1'b1 : 1'b0);

assign h_5_fu_367_p2 = (h_reg_121 + 4'd1);

assign h_cast6_cast_fu_286_p1 = h_reg_121;

assign m_5_fu_400_p2 = (2'd1 + m_reg_157);

assign m_cast4_cast_fu_373_p1 = m_reg_157;

assign n_5_fu_482_p2 = (n_reg_180 + 2'd1);

assign n_cast3_cast_fu_462_p1 = n_reg_180;

assign output_V_address0 = output_V_addr_reg_571;

assign output_V_d0 = (bias_V_q0 + p_s_reg_145);

assign p_shl2_cast_fu_230_p1 = tmp_100_fu_222_p3;

assign p_shl3_cast2_fu_242_p1 = tmp_101_fu_234_p3;

assign p_shl3_cast_fu_246_p1 = tmp_101_fu_234_p3;

assign p_shl4_cast_fu_208_p1 = tmp_98_fu_200_p3;

assign p_shl5_cast_fu_303_p1 = tmp_32_fu_295_p3;

assign p_shl6_cast_fu_315_p1 = tmp_33_fu_307_p3;

assign p_shl8_cast_fu_430_p3 = {{tmp_110_fu_425_p2}, {4'd0}};

assign p_shl9_cast_fu_446_p1 = tmp_35_fu_438_p3;

assign p_shl_cast_fu_264_p1 = tmp_103_fu_256_p3;

assign shuffleunit0_2_outpu_address0 = tmp_142_cast_fu_512_p1;

assign tmp1_cast_fu_412_p1 = $signed(tmp1_fu_406_p2);

assign tmp1_fu_406_p2 = (m_reg_157 ^ 2'd2);

assign tmp2_cast_fu_494_p1 = $signed(tmp2_fu_488_p2);

assign tmp2_fu_488_p2 = (n_reg_180 ^ 2'd2);

assign tmp_100_fu_222_p3 = {{co_reg_110}, {3'd0}};

assign tmp_101_fu_234_p3 = {{co_reg_110}, {1'd0}};

assign tmp_102_fu_250_p2 = (p_shl3_cast_fu_246_p1 + p_shl2_cast_fu_230_p1);

assign tmp_103_fu_256_p3 = {{co_reg_110}, {4'd0}};

assign tmp_104_fu_268_p2 = (p_shl3_cast2_fu_242_p1 + p_shl_cast_fu_264_p1);

assign tmp_105_fu_290_p2 = (h_cast6_cast_fu_286_p1 + tmp_102_reg_535);

assign tmp_106_fu_319_p2 = (p_shl5_cast_fu_303_p1 + p_shl6_cast_fu_315_p1);

assign tmp_107_fu_343_p2 = (tmp_106_reg_558 + w_cast5_cast_fu_339_p1);

assign tmp_108_fu_377_p2 = ($signed(m_cast4_cast_fu_373_p1) + $signed(tmp_122_cast_reg_530));

assign tmp_109_fu_388_p2 = (tmp_34_fu_382_p2 - tmp_108_fu_377_p2);

assign tmp_110_fu_425_p2 = (tmp_7_cast_cast_fu_421_p1 + tmp_104_reg_540);

assign tmp_111_fu_450_p2 = (p_shl8_cast_fu_430_p3 + p_shl9_cast_fu_446_p1);

assign tmp_112_fu_466_p2 = (tmp_109_reg_589 + n_cast3_cast_fu_462_p1);

assign tmp_113_fu_507_p2 = (tmp_111_reg_602 + tmp_8_cast_cast_fu_503_p1);

assign tmp_122_cast_fu_218_p1 = $signed(tmp_99_fu_212_p2);

assign tmp_133_cast_fu_348_p1 = tmp_107_fu_343_p2;

assign tmp_141_cast_fu_471_p1 = tmp_112_fu_466_p2;

assign tmp_142_cast_fu_512_p1 = tmp_113_fu_507_p2;

assign tmp_32_fu_295_p3 = {{tmp_105_fu_290_p2}, {3'd0}};

assign tmp_33_fu_307_p3 = {{tmp_105_fu_290_p2}, {1'd0}};

assign tmp_34_fu_382_p2 = tmp_108_fu_377_p2 << 10'd2;

assign tmp_35_fu_438_p3 = {{tmp_110_fu_425_p2}, {1'd0}};

assign tmp_7_cast_cast_fu_421_p1 = tmp_7_fu_416_p2;

assign tmp_7_fu_416_p2 = ($signed(tmp1_cast_fu_412_p1) + $signed(tmp_reg_566));

assign tmp_8_cast_cast_fu_503_p1 = tmp_8_fu_498_p2;

assign tmp_8_fu_498_p2 = ($signed(tmp_s_reg_579) + $signed(tmp2_cast_fu_494_p1));

assign tmp_98_fu_200_p3 = {{co_reg_110}, {2'd0}};

assign tmp_99_fu_212_p2 = (p_shl4_cast_fu_208_p1 - co_cast7_cast_fu_196_p1);

assign tmp_fu_331_p3 = {{h_reg_121}, {1'd0}};

assign tmp_s_fu_359_p3 = {{w_reg_133}, {1'd0}};

assign w_5_fu_456_p2 = (w_reg_133 + 4'd1);

assign w_cast5_cast_fu_339_p1 = w_reg_133;

assign weight_V_address0 = tmp_141_cast_fu_471_p1;

always @ (posedge ap_clk) begin
    tmp_102_reg_535[0] <= 1'b0;
    tmp_104_reg_540[0] <= 1'b0;
    tmp_106_reg_558[0] <= 1'b0;
    tmp_reg_566[0] <= 1'b0;
    tmp_s_reg_579[0] <= 1'b0;
    tmp_111_reg_602[0] <= 1'b0;
end

endmodule //subconv_3x3_16_strid_1
