// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_8_no_rel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        buffer1_1_48_8x8_p_V_48_address0,
        buffer1_1_48_8x8_p_V_48_ce0,
        buffer1_1_48_8x8_p_V_48_q0,
        buffer1_1_48_8x8_p_V_1_address0,
        buffer1_1_48_8x8_p_V_1_ce0,
        buffer1_1_48_8x8_p_V_1_q0,
        buffer1_1_48_8x8_p_V_2_address0,
        buffer1_1_48_8x8_p_V_2_ce0,
        buffer1_1_48_8x8_p_V_2_q0,
        buffer1_1_48_8x8_p_V_3_address0,
        buffer1_1_48_8x8_p_V_3_ce0,
        buffer1_1_48_8x8_p_V_3_q0,
        buffer1_1_48_8x8_p_V_4_address0,
        buffer1_1_48_8x8_p_V_4_ce0,
        buffer1_1_48_8x8_p_V_4_q0,
        buffer1_1_48_8x8_p_V_5_address0,
        buffer1_1_48_8x8_p_V_5_ce0,
        buffer1_1_48_8x8_p_V_5_q0,
        buffer1_1_48_8x8_p_V_6_address0,
        buffer1_1_48_8x8_p_V_6_ce0,
        buffer1_1_48_8x8_p_V_6_q0,
        buffer1_1_48_8x8_p_V_7_address0,
        buffer1_1_48_8x8_p_V_7_ce0,
        buffer1_1_48_8x8_p_V_7_q0,
        buffer1_1_48_8x8_p_V_8_address0,
        buffer1_1_48_8x8_p_V_8_ce0,
        buffer1_1_48_8x8_p_V_8_q0,
        buffer1_1_48_8x8_p_V_9_address0,
        buffer1_1_48_8x8_p_V_9_ce0,
        buffer1_1_48_8x8_p_V_9_q0,
        buffer1_1_48_8x8_p_V_10_address0,
        buffer1_1_48_8x8_p_V_10_ce0,
        buffer1_1_48_8x8_p_V_10_q0,
        buffer1_1_48_8x8_p_V_11_address0,
        buffer1_1_48_8x8_p_V_11_ce0,
        buffer1_1_48_8x8_p_V_11_q0,
        buffer1_1_48_8x8_p_V_12_address0,
        buffer1_1_48_8x8_p_V_12_ce0,
        buffer1_1_48_8x8_p_V_12_q0,
        buffer1_1_48_8x8_p_V_13_address0,
        buffer1_1_48_8x8_p_V_13_ce0,
        buffer1_1_48_8x8_p_V_13_q0,
        buffer1_1_48_8x8_p_V_14_address0,
        buffer1_1_48_8x8_p_V_14_ce0,
        buffer1_1_48_8x8_p_V_14_q0,
        buffer1_1_48_8x8_p_V_15_address0,
        buffer1_1_48_8x8_p_V_15_ce0,
        buffer1_1_48_8x8_p_V_15_q0,
        buffer1_1_48_8x8_p_V_16_address0,
        buffer1_1_48_8x8_p_V_16_ce0,
        buffer1_1_48_8x8_p_V_16_q0,
        buffer1_1_48_8x8_p_V_17_address0,
        buffer1_1_48_8x8_p_V_17_ce0,
        buffer1_1_48_8x8_p_V_17_q0,
        buffer1_1_48_8x8_p_V_18_address0,
        buffer1_1_48_8x8_p_V_18_ce0,
        buffer1_1_48_8x8_p_V_18_q0,
        buffer1_1_48_8x8_p_V_19_address0,
        buffer1_1_48_8x8_p_V_19_ce0,
        buffer1_1_48_8x8_p_V_19_q0,
        buffer1_1_48_8x8_p_V_20_address0,
        buffer1_1_48_8x8_p_V_20_ce0,
        buffer1_1_48_8x8_p_V_20_q0,
        buffer1_1_48_8x8_p_V_21_address0,
        buffer1_1_48_8x8_p_V_21_ce0,
        buffer1_1_48_8x8_p_V_21_q0,
        buffer1_1_48_8x8_p_V_22_address0,
        buffer1_1_48_8x8_p_V_22_ce0,
        buffer1_1_48_8x8_p_V_22_q0,
        buffer1_1_48_8x8_p_V_23_address0,
        buffer1_1_48_8x8_p_V_23_ce0,
        buffer1_1_48_8x8_p_V_23_q0,
        buffer1_1_48_8x8_p_V_24_address0,
        buffer1_1_48_8x8_p_V_24_ce0,
        buffer1_1_48_8x8_p_V_24_q0,
        buffer1_1_48_8x8_p_V_25_address0,
        buffer1_1_48_8x8_p_V_25_ce0,
        buffer1_1_48_8x8_p_V_25_q0,
        buffer1_1_48_8x8_p_V_26_address0,
        buffer1_1_48_8x8_p_V_26_ce0,
        buffer1_1_48_8x8_p_V_26_q0,
        buffer1_1_48_8x8_p_V_27_address0,
        buffer1_1_48_8x8_p_V_27_ce0,
        buffer1_1_48_8x8_p_V_27_q0,
        buffer1_1_48_8x8_p_V_28_address0,
        buffer1_1_48_8x8_p_V_28_ce0,
        buffer1_1_48_8x8_p_V_28_q0,
        buffer1_1_48_8x8_p_V_29_address0,
        buffer1_1_48_8x8_p_V_29_ce0,
        buffer1_1_48_8x8_p_V_29_q0,
        buffer1_1_48_8x8_p_V_30_address0,
        buffer1_1_48_8x8_p_V_30_ce0,
        buffer1_1_48_8x8_p_V_30_q0,
        buffer1_1_48_8x8_p_V_31_address0,
        buffer1_1_48_8x8_p_V_31_ce0,
        buffer1_1_48_8x8_p_V_31_q0,
        buffer1_1_48_8x8_p_V_32_address0,
        buffer1_1_48_8x8_p_V_32_ce0,
        buffer1_1_48_8x8_p_V_32_q0,
        buffer1_1_48_8x8_p_V_33_address0,
        buffer1_1_48_8x8_p_V_33_ce0,
        buffer1_1_48_8x8_p_V_33_q0,
        buffer1_1_48_8x8_p_V_34_address0,
        buffer1_1_48_8x8_p_V_34_ce0,
        buffer1_1_48_8x8_p_V_34_q0,
        buffer1_1_48_8x8_p_V_35_address0,
        buffer1_1_48_8x8_p_V_35_ce0,
        buffer1_1_48_8x8_p_V_35_q0,
        buffer1_1_48_8x8_p_V_36_address0,
        buffer1_1_48_8x8_p_V_36_ce0,
        buffer1_1_48_8x8_p_V_36_q0,
        buffer1_1_48_8x8_p_V_37_address0,
        buffer1_1_48_8x8_p_V_37_ce0,
        buffer1_1_48_8x8_p_V_37_q0,
        buffer1_1_48_8x8_p_V_38_address0,
        buffer1_1_48_8x8_p_V_38_ce0,
        buffer1_1_48_8x8_p_V_38_q0,
        buffer1_1_48_8x8_p_V_39_address0,
        buffer1_1_48_8x8_p_V_39_ce0,
        buffer1_1_48_8x8_p_V_39_q0,
        buffer1_1_48_8x8_p_V_40_address0,
        buffer1_1_48_8x8_p_V_40_ce0,
        buffer1_1_48_8x8_p_V_40_q0,
        buffer1_1_48_8x8_p_V_41_address0,
        buffer1_1_48_8x8_p_V_41_ce0,
        buffer1_1_48_8x8_p_V_41_q0,
        buffer1_1_48_8x8_p_V_42_address0,
        buffer1_1_48_8x8_p_V_42_ce0,
        buffer1_1_48_8x8_p_V_42_q0,
        buffer1_1_48_8x8_p_V_43_address0,
        buffer1_1_48_8x8_p_V_43_ce0,
        buffer1_1_48_8x8_p_V_43_q0,
        buffer1_1_48_8x8_p_V_44_address0,
        buffer1_1_48_8x8_p_V_44_ce0,
        buffer1_1_48_8x8_p_V_44_q0,
        buffer1_1_48_8x8_p_V_45_address0,
        buffer1_1_48_8x8_p_V_45_ce0,
        buffer1_1_48_8x8_p_V_45_q0,
        buffer1_1_48_8x8_p_V_46_address0,
        buffer1_1_48_8x8_p_V_46_ce0,
        buffer1_1_48_8x8_p_V_46_q0,
        buffer1_1_48_8x8_p_V_47_address0,
        buffer1_1_48_8x8_p_V_47_ce0,
        buffer1_1_48_8x8_p_V_47_q0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [5:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [6:0] buffer1_1_48_8x8_p_V_48_address0;
output   buffer1_1_48_8x8_p_V_48_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_48_q0;
output  [6:0] buffer1_1_48_8x8_p_V_1_address0;
output   buffer1_1_48_8x8_p_V_1_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_1_q0;
output  [6:0] buffer1_1_48_8x8_p_V_2_address0;
output   buffer1_1_48_8x8_p_V_2_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_2_q0;
output  [6:0] buffer1_1_48_8x8_p_V_3_address0;
output   buffer1_1_48_8x8_p_V_3_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_3_q0;
output  [6:0] buffer1_1_48_8x8_p_V_4_address0;
output   buffer1_1_48_8x8_p_V_4_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_4_q0;
output  [6:0] buffer1_1_48_8x8_p_V_5_address0;
output   buffer1_1_48_8x8_p_V_5_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_5_q0;
output  [6:0] buffer1_1_48_8x8_p_V_6_address0;
output   buffer1_1_48_8x8_p_V_6_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_6_q0;
output  [6:0] buffer1_1_48_8x8_p_V_7_address0;
output   buffer1_1_48_8x8_p_V_7_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_7_q0;
output  [6:0] buffer1_1_48_8x8_p_V_8_address0;
output   buffer1_1_48_8x8_p_V_8_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_8_q0;
output  [6:0] buffer1_1_48_8x8_p_V_9_address0;
output   buffer1_1_48_8x8_p_V_9_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_9_q0;
output  [6:0] buffer1_1_48_8x8_p_V_10_address0;
output   buffer1_1_48_8x8_p_V_10_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_10_q0;
output  [6:0] buffer1_1_48_8x8_p_V_11_address0;
output   buffer1_1_48_8x8_p_V_11_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_11_q0;
output  [6:0] buffer1_1_48_8x8_p_V_12_address0;
output   buffer1_1_48_8x8_p_V_12_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_12_q0;
output  [6:0] buffer1_1_48_8x8_p_V_13_address0;
output   buffer1_1_48_8x8_p_V_13_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_13_q0;
output  [6:0] buffer1_1_48_8x8_p_V_14_address0;
output   buffer1_1_48_8x8_p_V_14_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_14_q0;
output  [6:0] buffer1_1_48_8x8_p_V_15_address0;
output   buffer1_1_48_8x8_p_V_15_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_15_q0;
output  [6:0] buffer1_1_48_8x8_p_V_16_address0;
output   buffer1_1_48_8x8_p_V_16_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_16_q0;
output  [6:0] buffer1_1_48_8x8_p_V_17_address0;
output   buffer1_1_48_8x8_p_V_17_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_17_q0;
output  [6:0] buffer1_1_48_8x8_p_V_18_address0;
output   buffer1_1_48_8x8_p_V_18_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_18_q0;
output  [6:0] buffer1_1_48_8x8_p_V_19_address0;
output   buffer1_1_48_8x8_p_V_19_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_19_q0;
output  [6:0] buffer1_1_48_8x8_p_V_20_address0;
output   buffer1_1_48_8x8_p_V_20_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_20_q0;
output  [6:0] buffer1_1_48_8x8_p_V_21_address0;
output   buffer1_1_48_8x8_p_V_21_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_21_q0;
output  [6:0] buffer1_1_48_8x8_p_V_22_address0;
output   buffer1_1_48_8x8_p_V_22_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_22_q0;
output  [6:0] buffer1_1_48_8x8_p_V_23_address0;
output   buffer1_1_48_8x8_p_V_23_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_23_q0;
output  [6:0] buffer1_1_48_8x8_p_V_24_address0;
output   buffer1_1_48_8x8_p_V_24_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_24_q0;
output  [6:0] buffer1_1_48_8x8_p_V_25_address0;
output   buffer1_1_48_8x8_p_V_25_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_25_q0;
output  [6:0] buffer1_1_48_8x8_p_V_26_address0;
output   buffer1_1_48_8x8_p_V_26_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_26_q0;
output  [6:0] buffer1_1_48_8x8_p_V_27_address0;
output   buffer1_1_48_8x8_p_V_27_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_27_q0;
output  [6:0] buffer1_1_48_8x8_p_V_28_address0;
output   buffer1_1_48_8x8_p_V_28_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_28_q0;
output  [6:0] buffer1_1_48_8x8_p_V_29_address0;
output   buffer1_1_48_8x8_p_V_29_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_29_q0;
output  [6:0] buffer1_1_48_8x8_p_V_30_address0;
output   buffer1_1_48_8x8_p_V_30_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_30_q0;
output  [6:0] buffer1_1_48_8x8_p_V_31_address0;
output   buffer1_1_48_8x8_p_V_31_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_31_q0;
output  [6:0] buffer1_1_48_8x8_p_V_32_address0;
output   buffer1_1_48_8x8_p_V_32_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_32_q0;
output  [6:0] buffer1_1_48_8x8_p_V_33_address0;
output   buffer1_1_48_8x8_p_V_33_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_33_q0;
output  [6:0] buffer1_1_48_8x8_p_V_34_address0;
output   buffer1_1_48_8x8_p_V_34_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_34_q0;
output  [6:0] buffer1_1_48_8x8_p_V_35_address0;
output   buffer1_1_48_8x8_p_V_35_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_35_q0;
output  [6:0] buffer1_1_48_8x8_p_V_36_address0;
output   buffer1_1_48_8x8_p_V_36_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_36_q0;
output  [6:0] buffer1_1_48_8x8_p_V_37_address0;
output   buffer1_1_48_8x8_p_V_37_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_37_q0;
output  [6:0] buffer1_1_48_8x8_p_V_38_address0;
output   buffer1_1_48_8x8_p_V_38_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_38_q0;
output  [6:0] buffer1_1_48_8x8_p_V_39_address0;
output   buffer1_1_48_8x8_p_V_39_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_39_q0;
output  [6:0] buffer1_1_48_8x8_p_V_40_address0;
output   buffer1_1_48_8x8_p_V_40_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_40_q0;
output  [6:0] buffer1_1_48_8x8_p_V_41_address0;
output   buffer1_1_48_8x8_p_V_41_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_41_q0;
output  [6:0] buffer1_1_48_8x8_p_V_42_address0;
output   buffer1_1_48_8x8_p_V_42_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_42_q0;
output  [6:0] buffer1_1_48_8x8_p_V_43_address0;
output   buffer1_1_48_8x8_p_V_43_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_43_q0;
output  [6:0] buffer1_1_48_8x8_p_V_44_address0;
output   buffer1_1_48_8x8_p_V_44_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_44_q0;
output  [6:0] buffer1_1_48_8x8_p_V_45_address0;
output   buffer1_1_48_8x8_p_V_45_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_45_q0;
output  [6:0] buffer1_1_48_8x8_p_V_46_address0;
output   buffer1_1_48_8x8_p_V_46_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_46_q0;
output  [6:0] buffer1_1_48_8x8_p_V_47_address0;
output   buffer1_1_48_8x8_p_V_47_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_47_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg buffer1_1_48_8x8_p_V_48_ce0;
reg buffer1_1_48_8x8_p_V_1_ce0;
reg buffer1_1_48_8x8_p_V_2_ce0;
reg buffer1_1_48_8x8_p_V_3_ce0;
reg buffer1_1_48_8x8_p_V_4_ce0;
reg buffer1_1_48_8x8_p_V_5_ce0;
reg buffer1_1_48_8x8_p_V_6_ce0;
reg buffer1_1_48_8x8_p_V_7_ce0;
reg buffer1_1_48_8x8_p_V_8_ce0;
reg buffer1_1_48_8x8_p_V_9_ce0;
reg buffer1_1_48_8x8_p_V_10_ce0;
reg buffer1_1_48_8x8_p_V_11_ce0;
reg buffer1_1_48_8x8_p_V_12_ce0;
reg buffer1_1_48_8x8_p_V_13_ce0;
reg buffer1_1_48_8x8_p_V_14_ce0;
reg buffer1_1_48_8x8_p_V_15_ce0;
reg buffer1_1_48_8x8_p_V_16_ce0;
reg buffer1_1_48_8x8_p_V_17_ce0;
reg buffer1_1_48_8x8_p_V_18_ce0;
reg buffer1_1_48_8x8_p_V_19_ce0;
reg buffer1_1_48_8x8_p_V_20_ce0;
reg buffer1_1_48_8x8_p_V_21_ce0;
reg buffer1_1_48_8x8_p_V_22_ce0;
reg buffer1_1_48_8x8_p_V_23_ce0;
reg buffer1_1_48_8x8_p_V_24_ce0;
reg buffer1_1_48_8x8_p_V_25_ce0;
reg buffer1_1_48_8x8_p_V_26_ce0;
reg buffer1_1_48_8x8_p_V_27_ce0;
reg buffer1_1_48_8x8_p_V_28_ce0;
reg buffer1_1_48_8x8_p_V_29_ce0;
reg buffer1_1_48_8x8_p_V_30_ce0;
reg buffer1_1_48_8x8_p_V_31_ce0;
reg buffer1_1_48_8x8_p_V_32_ce0;
reg buffer1_1_48_8x8_p_V_33_ce0;
reg buffer1_1_48_8x8_p_V_34_ce0;
reg buffer1_1_48_8x8_p_V_35_ce0;
reg buffer1_1_48_8x8_p_V_36_ce0;
reg buffer1_1_48_8x8_p_V_37_ce0;
reg buffer1_1_48_8x8_p_V_38_ce0;
reg buffer1_1_48_8x8_p_V_39_ce0;
reg buffer1_1_48_8x8_p_V_40_ce0;
reg buffer1_1_48_8x8_p_V_41_ce0;
reg buffer1_1_48_8x8_p_V_42_ce0;
reg buffer1_1_48_8x8_p_V_43_ce0;
reg buffer1_1_48_8x8_p_V_44_ce0;
reg buffer1_1_48_8x8_p_V_45_ce0;
reg buffer1_1_48_8x8_p_V_46_ce0;
reg buffer1_1_48_8x8_p_V_47_ce0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [9:0] tmp_46_cast_fu_871_p1;
reg  signed [9:0] tmp_46_cast_reg_1290;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_41_fu_899_p2;
reg   [9:0] tmp_41_reg_1295;
wire   [5:0] co_2_fu_911_p2;
reg   [5:0] co_2_reg_1303;
reg   [5:0] bias_V_addr_reg_1308;
wire   [0:0] exitcond5_fu_905_p2;
wire   [13:0] tmp_43_fu_950_p2;
reg   [13:0] tmp_43_reg_1313;
wire    ap_CS_fsm_state3;
reg   [12:0] output_V_addr_reg_1321;
wire    ap_CS_fsm_state4;
wire   [3:0] h_2_fu_982_p2;
wire   [0:0] exitcond7_fu_976_p2;
wire   [9:0] tmp_46_fu_1003_p2;
reg   [9:0] tmp_46_reg_1334;
wire    ap_CS_fsm_state5;
wire   [1:0] m_2_fu_1015_p2;
reg   [1:0] m_2_reg_1342;
wire   [7:0] tmp_49_fu_1061_p2;
reg   [7:0] tmp_49_reg_1347;
wire   [0:0] exitcond8_fu_1009_p2;
wire    ap_CS_fsm_state6;
wire   [1:0] n_2_fu_1087_p2;
reg   [1:0] n_2_reg_1360;
wire   [7:0] tmp_51_fu_1113_p2;
reg   [7:0] tmp_51_reg_1365;
wire   [0:0] exitcond_fu_1081_p2;
wire    ap_CS_fsm_state7;
reg  signed [7:0] weight_V_load_reg_1610;
wire  signed [7:0] tmp_fu_1169_p50;
reg  signed [7:0] tmp_reg_1615;
wire    ap_CS_fsm_state8;
wire  signed [7:0] grp_fu_1284_p3;
wire    ap_CS_fsm_state9;
wire   [3:0] w_2_fu_1278_p2;
wire    ap_CS_fsm_state10;
reg   [5:0] co_reg_762;
wire   [0:0] exitcond6_fu_956_p2;
reg   [3:0] h_reg_774;
reg   [3:0] w_reg_786;
reg   [7:0] p_s_reg_798;
reg   [1:0] m_reg_810;
reg   [7:0] p_09_1_reg_821;
reg   [1:0] n_reg_833;
wire   [31:0] co_cast7_fu_844_p1;
wire   [31:0] tmp_54_cast_fu_971_p1;
wire   [31:0] tmp_61_cast_fu_1076_p1;
wire   [31:0] tmp_62_cast_fu_1118_p1;
wire   [7:0] tmp_37_fu_853_p3;
wire   [8:0] p_shl2_cast_fu_861_p1;
wire   [8:0] co_cast7_cast_fu_849_p1;
wire   [8:0] tmp_38_fu_865_p2;
wire   [8:0] tmp_39_fu_875_p3;
wire   [6:0] tmp_40_fu_887_p3;
wire   [9:0] p_shl1_cast_fu_895_p1;
wire   [9:0] p_shl_cast_fu_883_p1;
wire   [9:0] h_cast6_cast_fu_917_p1;
wire   [9:0] tmp_42_fu_921_p2;
wire   [12:0] tmp_22_fu_926_p3;
wire   [10:0] tmp_23_fu_938_p3;
wire   [13:0] p_shl3_cast_fu_934_p1;
wire   [13:0] p_shl4_cast_fu_946_p1;
wire   [13:0] w_cast5_cast_fu_962_p1;
wire   [13:0] tmp_44_fu_966_p2;
wire   [9:0] m_cast4_cast_fu_988_p1;
wire   [9:0] tmp_45_fu_992_p2;
wire   [9:0] tmp_24_fu_997_p2;
wire   [1:0] tmp1_fu_1021_p2;
wire  signed [3:0] tmp1_cast_fu_1027_p1;
wire   [3:0] tmp_s_fu_1031_p2;
wire   [6:0] tmp_47_fu_1037_p3;
wire   [4:0] tmp_48_fu_1049_p3;
wire   [7:0] p_shl7_cast_fu_1057_p1;
wire   [7:0] p_shl6_cast_fu_1045_p1;
wire   [9:0] n_cast3_cast_fu_1067_p1;
wire   [9:0] tmp_50_fu_1071_p2;
wire   [1:0] tmp2_fu_1093_p2;
wire  signed [3:0] tmp2_cast_fu_1099_p1;
wire   [3:0] tmp_2_fu_1103_p2;
wire   [7:0] tmp_2_cast_cast_fu_1109_p1;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

ShuffleNetV2_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_fYi_x_U611(
    .din1(buffer1_1_48_8x8_p_V_48_q0),
    .din2(buffer1_1_48_8x8_p_V_1_q0),
    .din3(buffer1_1_48_8x8_p_V_2_q0),
    .din4(buffer1_1_48_8x8_p_V_3_q0),
    .din5(buffer1_1_48_8x8_p_V_4_q0),
    .din6(buffer1_1_48_8x8_p_V_5_q0),
    .din7(buffer1_1_48_8x8_p_V_6_q0),
    .din8(buffer1_1_48_8x8_p_V_7_q0),
    .din9(buffer1_1_48_8x8_p_V_8_q0),
    .din10(buffer1_1_48_8x8_p_V_9_q0),
    .din11(buffer1_1_48_8x8_p_V_10_q0),
    .din12(buffer1_1_48_8x8_p_V_11_q0),
    .din13(buffer1_1_48_8x8_p_V_12_q0),
    .din14(buffer1_1_48_8x8_p_V_13_q0),
    .din15(buffer1_1_48_8x8_p_V_14_q0),
    .din16(buffer1_1_48_8x8_p_V_15_q0),
    .din17(buffer1_1_48_8x8_p_V_16_q0),
    .din18(buffer1_1_48_8x8_p_V_17_q0),
    .din19(buffer1_1_48_8x8_p_V_18_q0),
    .din20(buffer1_1_48_8x8_p_V_19_q0),
    .din21(buffer1_1_48_8x8_p_V_20_q0),
    .din22(buffer1_1_48_8x8_p_V_21_q0),
    .din23(buffer1_1_48_8x8_p_V_22_q0),
    .din24(buffer1_1_48_8x8_p_V_23_q0),
    .din25(buffer1_1_48_8x8_p_V_24_q0),
    .din26(buffer1_1_48_8x8_p_V_25_q0),
    .din27(buffer1_1_48_8x8_p_V_26_q0),
    .din28(buffer1_1_48_8x8_p_V_27_q0),
    .din29(buffer1_1_48_8x8_p_V_28_q0),
    .din30(buffer1_1_48_8x8_p_V_29_q0),
    .din31(buffer1_1_48_8x8_p_V_30_q0),
    .din32(buffer1_1_48_8x8_p_V_31_q0),
    .din33(buffer1_1_48_8x8_p_V_32_q0),
    .din34(buffer1_1_48_8x8_p_V_33_q0),
    .din35(buffer1_1_48_8x8_p_V_34_q0),
    .din36(buffer1_1_48_8x8_p_V_35_q0),
    .din37(buffer1_1_48_8x8_p_V_36_q0),
    .din38(buffer1_1_48_8x8_p_V_37_q0),
    .din39(buffer1_1_48_8x8_p_V_38_q0),
    .din40(buffer1_1_48_8x8_p_V_39_q0),
    .din41(buffer1_1_48_8x8_p_V_40_q0),
    .din42(buffer1_1_48_8x8_p_V_41_q0),
    .din43(buffer1_1_48_8x8_p_V_42_q0),
    .din44(buffer1_1_48_8x8_p_V_43_q0),
    .din45(buffer1_1_48_8x8_p_V_44_q0),
    .din46(buffer1_1_48_8x8_p_V_45_q0),
    .din47(buffer1_1_48_8x8_p_V_46_q0),
    .din48(buffer1_1_48_8x8_p_V_47_q0),
    .din49(co_reg_762),
    .dout(tmp_fu_1169_p50)
);

ShuffleNetV2_mac_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mac_cud_x_U612(
    .din0(tmp_reg_1615),
    .din1(weight_V_load_reg_1610),
    .din2(p_09_1_reg_821),
    .dout(grp_fu_1284_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond6_fu_956_p2))) begin
        co_reg_762 <= co_2_reg_1303;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_762 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_905_p2 == 1'd0))) begin
        h_reg_774 <= 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond7_fu_976_p2 == 1'd1))) begin
        h_reg_774 <= h_2_fu_982_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond7_fu_976_p2))) begin
        m_reg_810 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_1081_p2))) begin
        m_reg_810 <= m_2_reg_1342;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond8_fu_1009_p2))) begin
        n_reg_833 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        n_reg_833 <= n_2_reg_1360;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond8_fu_1009_p2))) begin
        p_09_1_reg_821 <= p_s_reg_798;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        p_09_1_reg_821 <= grp_fu_1284_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond7_fu_976_p2))) begin
        p_s_reg_798 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_1081_p2))) begin
        p_s_reg_798 <= p_09_1_reg_821;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond6_fu_956_p2))) begin
        w_reg_786 <= 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        w_reg_786 <= w_2_fu_1278_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_905_p2 == 1'd0))) begin
        bias_V_addr_reg_1308 <= co_cast7_fu_844_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_2_reg_1303 <= co_2_fu_911_p2;
        tmp_41_reg_1295[9 : 1] <= tmp_41_fu_899_p2[9 : 1];
        tmp_46_cast_reg_1290 <= tmp_46_cast_fu_871_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_2_reg_1342 <= m_2_fu_1015_p2;
        tmp_46_reg_1334 <= tmp_46_fu_1003_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_2_reg_1360 <= n_2_fu_1087_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_addr_reg_1321 <= tmp_54_cast_fu_971_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_43_reg_1313[13 : 1] <= tmp_43_fu_950_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond8_fu_1009_p2))) begin
        tmp_49_reg_1347[7 : 1] <= tmp_49_fu_1061_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond_fu_1081_p2))) begin
        tmp_51_reg_1365 <= tmp_51_fu_1113_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_reg_1615 <= tmp_fu_1169_p50;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weight_V_load_reg_1610 <= weight_V_q0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_905_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_905_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_10_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_11_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_12_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_13_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_14_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_15_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_16_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_17_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_18_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_19_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_1_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_20_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_21_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_22_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_23_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_24_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_25_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_26_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_27_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_28_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_29_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_2_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_30_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_31_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_32_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_33_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_33_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_34_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_34_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_35_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_35_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_36_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_36_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_37_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_37_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_38_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_38_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_39_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_39_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_3_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_40_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_40_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_41_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_41_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_42_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_42_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_43_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_43_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_44_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_44_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_45_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_45_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_46_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_46_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_47_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_47_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_48_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_48_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_4_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_5_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_6_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_7_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_8_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_48_8x8_p_V_9_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_905_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond6_fu_956_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond7_fu_976_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond8_fu_1009_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_1081_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_1308;

assign buffer1_1_48_8x8_p_V_10_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_11_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_12_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_13_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_14_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_15_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_16_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_17_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_18_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_19_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_1_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_20_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_21_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_22_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_23_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_24_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_25_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_26_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_27_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_28_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_29_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_2_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_30_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_31_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_32_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_33_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_34_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_35_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_36_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_37_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_38_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_39_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_3_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_40_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_41_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_42_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_43_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_44_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_45_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_46_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_47_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_48_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_4_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_5_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_6_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_7_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_8_address0 = tmp_62_cast_fu_1118_p1;

assign buffer1_1_48_8x8_p_V_9_address0 = tmp_62_cast_fu_1118_p1;

assign co_2_fu_911_p2 = (co_reg_762 + 6'd1);

assign co_cast7_cast_fu_849_p1 = co_reg_762;

assign co_cast7_fu_844_p1 = co_reg_762;

assign exitcond5_fu_905_p2 = ((co_reg_762 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond6_fu_956_p2 = ((h_reg_774 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond7_fu_976_p2 = ((w_reg_786 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond8_fu_1009_p2 = ((m_reg_810 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_1081_p2 = ((n_reg_833 == 2'd3) ? 1'b1 : 1'b0);

assign h_2_fu_982_p2 = (h_reg_774 + 4'd1);

assign h_cast6_cast_fu_917_p1 = h_reg_774;

assign m_2_fu_1015_p2 = (2'd1 + m_reg_810);

assign m_cast4_cast_fu_988_p1 = m_reg_810;

assign n_2_fu_1087_p2 = (n_reg_833 + 2'd1);

assign n_cast3_cast_fu_1067_p1 = n_reg_833;

assign output_V_address0 = output_V_addr_reg_1321;

assign output_V_d0 = (bias_V_q0 + p_s_reg_798);

assign p_shl1_cast_fu_895_p1 = tmp_40_fu_887_p3;

assign p_shl2_cast_fu_861_p1 = tmp_37_fu_853_p3;

assign p_shl3_cast_fu_934_p1 = tmp_22_fu_926_p3;

assign p_shl4_cast_fu_946_p1 = tmp_23_fu_938_p3;

assign p_shl6_cast_fu_1045_p1 = tmp_47_fu_1037_p3;

assign p_shl7_cast_fu_1057_p1 = tmp_48_fu_1049_p3;

assign p_shl_cast_fu_883_p1 = tmp_39_fu_875_p3;

assign tmp1_cast_fu_1027_p1 = $signed(tmp1_fu_1021_p2);

assign tmp1_fu_1021_p2 = ($signed(m_reg_810) + $signed(2'd3));

assign tmp2_cast_fu_1099_p1 = $signed(tmp2_fu_1093_p2);

assign tmp2_fu_1093_p2 = ($signed(n_reg_833) + $signed(2'd3));

assign tmp_22_fu_926_p3 = {{tmp_42_fu_921_p2}, {3'd0}};

assign tmp_23_fu_938_p3 = {{tmp_42_fu_921_p2}, {1'd0}};

assign tmp_24_fu_997_p2 = tmp_45_fu_992_p2 << 10'd2;

assign tmp_2_cast_cast_fu_1109_p1 = tmp_2_fu_1103_p2;

assign tmp_2_fu_1103_p2 = ($signed(w_reg_786) + $signed(tmp2_cast_fu_1099_p1));

assign tmp_37_fu_853_p3 = {{co_reg_762}, {2'd0}};

assign tmp_38_fu_865_p2 = (p_shl2_cast_fu_861_p1 - co_cast7_cast_fu_849_p1);

assign tmp_39_fu_875_p3 = {{co_reg_762}, {3'd0}};

assign tmp_40_fu_887_p3 = {{co_reg_762}, {1'd0}};

assign tmp_41_fu_899_p2 = (p_shl1_cast_fu_895_p1 + p_shl_cast_fu_883_p1);

assign tmp_42_fu_921_p2 = (h_cast6_cast_fu_917_p1 + tmp_41_reg_1295);

assign tmp_43_fu_950_p2 = (p_shl3_cast_fu_934_p1 + p_shl4_cast_fu_946_p1);

assign tmp_44_fu_966_p2 = (tmp_43_reg_1313 + w_cast5_cast_fu_962_p1);

assign tmp_45_fu_992_p2 = ($signed(m_cast4_cast_fu_988_p1) + $signed(tmp_46_cast_reg_1290));

assign tmp_46_cast_fu_871_p1 = $signed(tmp_38_fu_865_p2);

assign tmp_46_fu_1003_p2 = (tmp_24_fu_997_p2 - tmp_45_fu_992_p2);

assign tmp_47_fu_1037_p3 = {{tmp_s_fu_1031_p2}, {3'd0}};

assign tmp_48_fu_1049_p3 = {{tmp_s_fu_1031_p2}, {1'd0}};

assign tmp_49_fu_1061_p2 = (p_shl7_cast_fu_1057_p1 + p_shl6_cast_fu_1045_p1);

assign tmp_50_fu_1071_p2 = (tmp_46_reg_1334 + n_cast3_cast_fu_1067_p1);

assign tmp_51_fu_1113_p2 = (tmp_49_reg_1347 + tmp_2_cast_cast_fu_1109_p1);

assign tmp_54_cast_fu_971_p1 = tmp_44_fu_966_p2;

assign tmp_61_cast_fu_1076_p1 = tmp_50_fu_1071_p2;

assign tmp_62_cast_fu_1118_p1 = tmp_51_reg_1365;

assign tmp_s_fu_1031_p2 = ($signed(h_reg_774) + $signed(tmp1_cast_fu_1027_p1));

assign w_2_fu_1278_p2 = (w_reg_786 + 4'd1);

assign w_cast5_cast_fu_962_p1 = w_reg_786;

assign weight_V_address0 = tmp_61_cast_fu_1076_p1;

always @ (posedge ap_clk) begin
    tmp_41_reg_1295[0] <= 1'b0;
    tmp_43_reg_1313[0] <= 1'b0;
    tmp_49_reg_1347[0] <= 1'b0;
end

endmodule //subconv_3x3_8_no_rel
