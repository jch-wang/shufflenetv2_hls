// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shuffle_48_r_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        buffer1_1_48_8x8_p_V_48_address0,
        buffer1_1_48_8x8_p_V_48_ce0,
        buffer1_1_48_8x8_p_V_48_q0,
        buffer1_1_48_8x8_p_V_1_address0,
        buffer1_1_48_8x8_p_V_1_ce0,
        buffer1_1_48_8x8_p_V_1_q0,
        buffer1_1_48_8x8_p_V_2_address0,
        buffer1_1_48_8x8_p_V_2_ce0,
        buffer1_1_48_8x8_p_V_2_q0,
        buffer1_1_48_8x8_p_V_3_address0,
        buffer1_1_48_8x8_p_V_3_ce0,
        buffer1_1_48_8x8_p_V_3_q0,
        buffer1_1_48_8x8_p_V_4_address0,
        buffer1_1_48_8x8_p_V_4_ce0,
        buffer1_1_48_8x8_p_V_4_q0,
        buffer1_1_48_8x8_p_V_5_address0,
        buffer1_1_48_8x8_p_V_5_ce0,
        buffer1_1_48_8x8_p_V_5_q0,
        buffer1_1_48_8x8_p_V_6_address0,
        buffer1_1_48_8x8_p_V_6_ce0,
        buffer1_1_48_8x8_p_V_6_q0,
        buffer1_1_48_8x8_p_V_7_address0,
        buffer1_1_48_8x8_p_V_7_ce0,
        buffer1_1_48_8x8_p_V_7_q0,
        buffer1_1_48_8x8_p_V_8_address0,
        buffer1_1_48_8x8_p_V_8_ce0,
        buffer1_1_48_8x8_p_V_8_q0,
        buffer1_1_48_8x8_p_V_9_address0,
        buffer1_1_48_8x8_p_V_9_ce0,
        buffer1_1_48_8x8_p_V_9_q0,
        buffer1_1_48_8x8_p_V_10_address0,
        buffer1_1_48_8x8_p_V_10_ce0,
        buffer1_1_48_8x8_p_V_10_q0,
        buffer1_1_48_8x8_p_V_11_address0,
        buffer1_1_48_8x8_p_V_11_ce0,
        buffer1_1_48_8x8_p_V_11_q0,
        buffer1_1_48_8x8_p_V_12_address0,
        buffer1_1_48_8x8_p_V_12_ce0,
        buffer1_1_48_8x8_p_V_12_q0,
        buffer1_1_48_8x8_p_V_13_address0,
        buffer1_1_48_8x8_p_V_13_ce0,
        buffer1_1_48_8x8_p_V_13_q0,
        buffer1_1_48_8x8_p_V_14_address0,
        buffer1_1_48_8x8_p_V_14_ce0,
        buffer1_1_48_8x8_p_V_14_q0,
        buffer1_1_48_8x8_p_V_15_address0,
        buffer1_1_48_8x8_p_V_15_ce0,
        buffer1_1_48_8x8_p_V_15_q0,
        buffer1_1_48_8x8_p_V_16_address0,
        buffer1_1_48_8x8_p_V_16_ce0,
        buffer1_1_48_8x8_p_V_16_q0,
        buffer1_1_48_8x8_p_V_17_address0,
        buffer1_1_48_8x8_p_V_17_ce0,
        buffer1_1_48_8x8_p_V_17_q0,
        buffer1_1_48_8x8_p_V_18_address0,
        buffer1_1_48_8x8_p_V_18_ce0,
        buffer1_1_48_8x8_p_V_18_q0,
        buffer1_1_48_8x8_p_V_19_address0,
        buffer1_1_48_8x8_p_V_19_ce0,
        buffer1_1_48_8x8_p_V_19_q0,
        buffer1_1_48_8x8_p_V_20_address0,
        buffer1_1_48_8x8_p_V_20_ce0,
        buffer1_1_48_8x8_p_V_20_q0,
        buffer1_1_48_8x8_p_V_21_address0,
        buffer1_1_48_8x8_p_V_21_ce0,
        buffer1_1_48_8x8_p_V_21_q0,
        buffer1_1_48_8x8_p_V_22_address0,
        buffer1_1_48_8x8_p_V_22_ce0,
        buffer1_1_48_8x8_p_V_22_q0,
        buffer1_1_48_8x8_p_V_23_address0,
        buffer1_1_48_8x8_p_V_23_ce0,
        buffer1_1_48_8x8_p_V_23_q0,
        buffer1_1_48_8x8_p_V_24_address0,
        buffer1_1_48_8x8_p_V_24_ce0,
        buffer1_1_48_8x8_p_V_24_q0,
        buffer1_1_48_8x8_p_V_25_address0,
        buffer1_1_48_8x8_p_V_25_ce0,
        buffer1_1_48_8x8_p_V_25_q0,
        buffer1_1_48_8x8_p_V_26_address0,
        buffer1_1_48_8x8_p_V_26_ce0,
        buffer1_1_48_8x8_p_V_26_q0,
        buffer1_1_48_8x8_p_V_27_address0,
        buffer1_1_48_8x8_p_V_27_ce0,
        buffer1_1_48_8x8_p_V_27_q0,
        buffer1_1_48_8x8_p_V_28_address0,
        buffer1_1_48_8x8_p_V_28_ce0,
        buffer1_1_48_8x8_p_V_28_q0,
        buffer1_1_48_8x8_p_V_29_address0,
        buffer1_1_48_8x8_p_V_29_ce0,
        buffer1_1_48_8x8_p_V_29_q0,
        buffer1_1_48_8x8_p_V_30_address0,
        buffer1_1_48_8x8_p_V_30_ce0,
        buffer1_1_48_8x8_p_V_30_q0,
        buffer1_1_48_8x8_p_V_31_address0,
        buffer1_1_48_8x8_p_V_31_ce0,
        buffer1_1_48_8x8_p_V_31_q0,
        buffer1_1_48_8x8_p_V_32_address0,
        buffer1_1_48_8x8_p_V_32_ce0,
        buffer1_1_48_8x8_p_V_32_q0,
        buffer1_1_48_8x8_p_V_33_address0,
        buffer1_1_48_8x8_p_V_33_ce0,
        buffer1_1_48_8x8_p_V_33_q0,
        buffer1_1_48_8x8_p_V_34_address0,
        buffer1_1_48_8x8_p_V_34_ce0,
        buffer1_1_48_8x8_p_V_34_q0,
        buffer1_1_48_8x8_p_V_35_address0,
        buffer1_1_48_8x8_p_V_35_ce0,
        buffer1_1_48_8x8_p_V_35_q0,
        buffer1_1_48_8x8_p_V_36_address0,
        buffer1_1_48_8x8_p_V_36_ce0,
        buffer1_1_48_8x8_p_V_36_q0,
        buffer1_1_48_8x8_p_V_37_address0,
        buffer1_1_48_8x8_p_V_37_ce0,
        buffer1_1_48_8x8_p_V_37_q0,
        buffer1_1_48_8x8_p_V_38_address0,
        buffer1_1_48_8x8_p_V_38_ce0,
        buffer1_1_48_8x8_p_V_38_q0,
        buffer1_1_48_8x8_p_V_39_address0,
        buffer1_1_48_8x8_p_V_39_ce0,
        buffer1_1_48_8x8_p_V_39_q0,
        buffer1_1_48_8x8_p_V_40_address0,
        buffer1_1_48_8x8_p_V_40_ce0,
        buffer1_1_48_8x8_p_V_40_q0,
        buffer1_1_48_8x8_p_V_41_address0,
        buffer1_1_48_8x8_p_V_41_ce0,
        buffer1_1_48_8x8_p_V_41_q0,
        buffer1_1_48_8x8_p_V_42_address0,
        buffer1_1_48_8x8_p_V_42_ce0,
        buffer1_1_48_8x8_p_V_42_q0,
        buffer1_1_48_8x8_p_V_43_address0,
        buffer1_1_48_8x8_p_V_43_ce0,
        buffer1_1_48_8x8_p_V_43_q0,
        buffer1_1_48_8x8_p_V_44_address0,
        buffer1_1_48_8x8_p_V_44_ce0,
        buffer1_1_48_8x8_p_V_44_q0,
        buffer1_1_48_8x8_p_V_45_address0,
        buffer1_1_48_8x8_p_V_45_ce0,
        buffer1_1_48_8x8_p_V_45_q0,
        buffer1_1_48_8x8_p_V_46_address0,
        buffer1_1_48_8x8_p_V_46_ce0,
        buffer1_1_48_8x8_p_V_46_q0,
        buffer1_1_48_8x8_p_V_47_address0,
        buffer1_1_48_8x8_p_V_47_ce0,
        buffer1_1_48_8x8_p_V_47_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [6:0] buffer1_1_48_8x8_p_V_48_address0;
output   buffer1_1_48_8x8_p_V_48_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_48_q0;
output  [6:0] buffer1_1_48_8x8_p_V_1_address0;
output   buffer1_1_48_8x8_p_V_1_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_1_q0;
output  [6:0] buffer1_1_48_8x8_p_V_2_address0;
output   buffer1_1_48_8x8_p_V_2_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_2_q0;
output  [6:0] buffer1_1_48_8x8_p_V_3_address0;
output   buffer1_1_48_8x8_p_V_3_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_3_q0;
output  [6:0] buffer1_1_48_8x8_p_V_4_address0;
output   buffer1_1_48_8x8_p_V_4_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_4_q0;
output  [6:0] buffer1_1_48_8x8_p_V_5_address0;
output   buffer1_1_48_8x8_p_V_5_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_5_q0;
output  [6:0] buffer1_1_48_8x8_p_V_6_address0;
output   buffer1_1_48_8x8_p_V_6_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_6_q0;
output  [6:0] buffer1_1_48_8x8_p_V_7_address0;
output   buffer1_1_48_8x8_p_V_7_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_7_q0;
output  [6:0] buffer1_1_48_8x8_p_V_8_address0;
output   buffer1_1_48_8x8_p_V_8_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_8_q0;
output  [6:0] buffer1_1_48_8x8_p_V_9_address0;
output   buffer1_1_48_8x8_p_V_9_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_9_q0;
output  [6:0] buffer1_1_48_8x8_p_V_10_address0;
output   buffer1_1_48_8x8_p_V_10_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_10_q0;
output  [6:0] buffer1_1_48_8x8_p_V_11_address0;
output   buffer1_1_48_8x8_p_V_11_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_11_q0;
output  [6:0] buffer1_1_48_8x8_p_V_12_address0;
output   buffer1_1_48_8x8_p_V_12_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_12_q0;
output  [6:0] buffer1_1_48_8x8_p_V_13_address0;
output   buffer1_1_48_8x8_p_V_13_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_13_q0;
output  [6:0] buffer1_1_48_8x8_p_V_14_address0;
output   buffer1_1_48_8x8_p_V_14_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_14_q0;
output  [6:0] buffer1_1_48_8x8_p_V_15_address0;
output   buffer1_1_48_8x8_p_V_15_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_15_q0;
output  [6:0] buffer1_1_48_8x8_p_V_16_address0;
output   buffer1_1_48_8x8_p_V_16_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_16_q0;
output  [6:0] buffer1_1_48_8x8_p_V_17_address0;
output   buffer1_1_48_8x8_p_V_17_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_17_q0;
output  [6:0] buffer1_1_48_8x8_p_V_18_address0;
output   buffer1_1_48_8x8_p_V_18_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_18_q0;
output  [6:0] buffer1_1_48_8x8_p_V_19_address0;
output   buffer1_1_48_8x8_p_V_19_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_19_q0;
output  [6:0] buffer1_1_48_8x8_p_V_20_address0;
output   buffer1_1_48_8x8_p_V_20_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_20_q0;
output  [6:0] buffer1_1_48_8x8_p_V_21_address0;
output   buffer1_1_48_8x8_p_V_21_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_21_q0;
output  [6:0] buffer1_1_48_8x8_p_V_22_address0;
output   buffer1_1_48_8x8_p_V_22_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_22_q0;
output  [6:0] buffer1_1_48_8x8_p_V_23_address0;
output   buffer1_1_48_8x8_p_V_23_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_23_q0;
output  [6:0] buffer1_1_48_8x8_p_V_24_address0;
output   buffer1_1_48_8x8_p_V_24_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_24_q0;
output  [6:0] buffer1_1_48_8x8_p_V_25_address0;
output   buffer1_1_48_8x8_p_V_25_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_25_q0;
output  [6:0] buffer1_1_48_8x8_p_V_26_address0;
output   buffer1_1_48_8x8_p_V_26_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_26_q0;
output  [6:0] buffer1_1_48_8x8_p_V_27_address0;
output   buffer1_1_48_8x8_p_V_27_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_27_q0;
output  [6:0] buffer1_1_48_8x8_p_V_28_address0;
output   buffer1_1_48_8x8_p_V_28_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_28_q0;
output  [6:0] buffer1_1_48_8x8_p_V_29_address0;
output   buffer1_1_48_8x8_p_V_29_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_29_q0;
output  [6:0] buffer1_1_48_8x8_p_V_30_address0;
output   buffer1_1_48_8x8_p_V_30_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_30_q0;
output  [6:0] buffer1_1_48_8x8_p_V_31_address0;
output   buffer1_1_48_8x8_p_V_31_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_31_q0;
output  [6:0] buffer1_1_48_8x8_p_V_32_address0;
output   buffer1_1_48_8x8_p_V_32_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_32_q0;
output  [6:0] buffer1_1_48_8x8_p_V_33_address0;
output   buffer1_1_48_8x8_p_V_33_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_33_q0;
output  [6:0] buffer1_1_48_8x8_p_V_34_address0;
output   buffer1_1_48_8x8_p_V_34_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_34_q0;
output  [6:0] buffer1_1_48_8x8_p_V_35_address0;
output   buffer1_1_48_8x8_p_V_35_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_35_q0;
output  [6:0] buffer1_1_48_8x8_p_V_36_address0;
output   buffer1_1_48_8x8_p_V_36_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_36_q0;
output  [6:0] buffer1_1_48_8x8_p_V_37_address0;
output   buffer1_1_48_8x8_p_V_37_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_37_q0;
output  [6:0] buffer1_1_48_8x8_p_V_38_address0;
output   buffer1_1_48_8x8_p_V_38_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_38_q0;
output  [6:0] buffer1_1_48_8x8_p_V_39_address0;
output   buffer1_1_48_8x8_p_V_39_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_39_q0;
output  [6:0] buffer1_1_48_8x8_p_V_40_address0;
output   buffer1_1_48_8x8_p_V_40_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_40_q0;
output  [6:0] buffer1_1_48_8x8_p_V_41_address0;
output   buffer1_1_48_8x8_p_V_41_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_41_q0;
output  [6:0] buffer1_1_48_8x8_p_V_42_address0;
output   buffer1_1_48_8x8_p_V_42_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_42_q0;
output  [6:0] buffer1_1_48_8x8_p_V_43_address0;
output   buffer1_1_48_8x8_p_V_43_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_43_q0;
output  [6:0] buffer1_1_48_8x8_p_V_44_address0;
output   buffer1_1_48_8x8_p_V_44_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_44_q0;
output  [6:0] buffer1_1_48_8x8_p_V_45_address0;
output   buffer1_1_48_8x8_p_V_45_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_45_q0;
output  [6:0] buffer1_1_48_8x8_p_V_46_address0;
output   buffer1_1_48_8x8_p_V_46_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_46_q0;
output  [6:0] buffer1_1_48_8x8_p_V_47_address0;
output   buffer1_1_48_8x8_p_V_47_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_47_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_V_ce0;
reg output_V_we0;
reg buffer1_1_48_8x8_p_V_48_ce0;
reg buffer1_1_48_8x8_p_V_1_ce0;
reg buffer1_1_48_8x8_p_V_2_ce0;
reg buffer1_1_48_8x8_p_V_3_ce0;
reg buffer1_1_48_8x8_p_V_4_ce0;
reg buffer1_1_48_8x8_p_V_5_ce0;
reg buffer1_1_48_8x8_p_V_6_ce0;
reg buffer1_1_48_8x8_p_V_7_ce0;
reg buffer1_1_48_8x8_p_V_8_ce0;
reg buffer1_1_48_8x8_p_V_9_ce0;
reg buffer1_1_48_8x8_p_V_10_ce0;
reg buffer1_1_48_8x8_p_V_11_ce0;
reg buffer1_1_48_8x8_p_V_12_ce0;
reg buffer1_1_48_8x8_p_V_13_ce0;
reg buffer1_1_48_8x8_p_V_14_ce0;
reg buffer1_1_48_8x8_p_V_15_ce0;
reg buffer1_1_48_8x8_p_V_16_ce0;
reg buffer1_1_48_8x8_p_V_17_ce0;
reg buffer1_1_48_8x8_p_V_18_ce0;
reg buffer1_1_48_8x8_p_V_19_ce0;
reg buffer1_1_48_8x8_p_V_20_ce0;
reg buffer1_1_48_8x8_p_V_21_ce0;
reg buffer1_1_48_8x8_p_V_22_ce0;
reg buffer1_1_48_8x8_p_V_23_ce0;
reg buffer1_1_48_8x8_p_V_24_ce0;
reg buffer1_1_48_8x8_p_V_25_ce0;
reg buffer1_1_48_8x8_p_V_26_ce0;
reg buffer1_1_48_8x8_p_V_27_ce0;
reg buffer1_1_48_8x8_p_V_28_ce0;
reg buffer1_1_48_8x8_p_V_29_ce0;
reg buffer1_1_48_8x8_p_V_30_ce0;
reg buffer1_1_48_8x8_p_V_31_ce0;
reg buffer1_1_48_8x8_p_V_32_ce0;
reg buffer1_1_48_8x8_p_V_33_ce0;
reg buffer1_1_48_8x8_p_V_34_ce0;
reg buffer1_1_48_8x8_p_V_35_ce0;
reg buffer1_1_48_8x8_p_V_36_ce0;
reg buffer1_1_48_8x8_p_V_37_ce0;
reg buffer1_1_48_8x8_p_V_38_ce0;
reg buffer1_1_48_8x8_p_V_39_ce0;
reg buffer1_1_48_8x8_p_V_40_ce0;
reg buffer1_1_48_8x8_p_V_41_ce0;
reg buffer1_1_48_8x8_p_V_42_ce0;
reg buffer1_1_48_8x8_p_V_43_ce0;
reg buffer1_1_48_8x8_p_V_44_ce0;
reg buffer1_1_48_8x8_p_V_45_ce0;
reg buffer1_1_48_8x8_p_V_46_ce0;
reg buffer1_1_48_8x8_p_V_47_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_499_fu_762_p1;
reg   [0:0] tmp_499_reg_1088;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_356_fu_790_p2;
reg   [10:0] tmp_356_reg_1092;
wire   [6:0] co_27_fu_802_p2;
reg   [6:0] co_27_reg_1100;
reg   [5:0] tmp_39_reg_1105;
wire   [0:0] exitcond3_fu_796_p2;
wire   [14:0] tmp_358_fu_851_p2;
reg   [14:0] tmp_358_reg_1110;
wire    ap_CS_fsm_state3;
wire   [7:0] tmp_361_fu_881_p2;
reg   [7:0] tmp_361_reg_1115;
wire   [3:0] h_27_fu_893_p2;
reg   [3:0] h_27_reg_1123;
reg   [13:0] output_V_addr_reg_1128;
wire    ap_CS_fsm_state4;
wire   [3:0] w_37_fu_980_p2;
reg   [3:0] w_37_reg_1376;
reg   [6:0] co_reg_729;
wire   [0:0] exitcond2_fu_887_p2;
reg   [3:0] h_reg_740;
wire   [0:0] exitcond_fu_974_p2;
reg   [3:0] w_reg_751;
wire    ap_CS_fsm_state5;
wire   [31:0] tmp_463_cast_fu_912_p1;
wire   [31:0] tmp_464_cast_fu_922_p1;
wire   [7:0] tmp_fu_986_p50;
wire   [9:0] tmp_s_fu_766_p3;
wire   [7:0] tmp_355_fu_778_p3;
wire   [10:0] p_shl_cast_fu_774_p1;
wire   [10:0] p_shl1_cast_fu_786_p1;
wire   [10:0] h_cast2_cast_fu_818_p1;
wire   [10:0] tmp_357_fu_822_p2;
wire   [13:0] tmp_500_fu_827_p3;
wire   [11:0] tmp_501_fu_839_p3;
wire   [14:0] p_shl4_cast_fu_835_p1;
wire   [14:0] p_shl5_cast_fu_847_p1;
wire   [6:0] tmp_359_fu_857_p3;
wire   [4:0] tmp_360_fu_869_p3;
wire   [7:0] p_shl2_cast_fu_865_p1;
wire   [7:0] p_shl3_cast_fu_877_p1;
wire   [14:0] w_cast1_cast_fu_903_p1;
wire   [14:0] tmp_362_fu_907_p2;
wire   [7:0] w_cast1_cast6_fu_899_p1;
wire   [7:0] tmp_363_fu_917_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

ShuffleNetV2_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_fYi_x_U561(
    .din1(buffer1_1_48_8x8_p_V_48_q0),
    .din2(buffer1_1_48_8x8_p_V_1_q0),
    .din3(buffer1_1_48_8x8_p_V_2_q0),
    .din4(buffer1_1_48_8x8_p_V_3_q0),
    .din5(buffer1_1_48_8x8_p_V_4_q0),
    .din6(buffer1_1_48_8x8_p_V_5_q0),
    .din7(buffer1_1_48_8x8_p_V_6_q0),
    .din8(buffer1_1_48_8x8_p_V_7_q0),
    .din9(buffer1_1_48_8x8_p_V_8_q0),
    .din10(buffer1_1_48_8x8_p_V_9_q0),
    .din11(buffer1_1_48_8x8_p_V_10_q0),
    .din12(buffer1_1_48_8x8_p_V_11_q0),
    .din13(buffer1_1_48_8x8_p_V_12_q0),
    .din14(buffer1_1_48_8x8_p_V_13_q0),
    .din15(buffer1_1_48_8x8_p_V_14_q0),
    .din16(buffer1_1_48_8x8_p_V_15_q0),
    .din17(buffer1_1_48_8x8_p_V_16_q0),
    .din18(buffer1_1_48_8x8_p_V_17_q0),
    .din19(buffer1_1_48_8x8_p_V_18_q0),
    .din20(buffer1_1_48_8x8_p_V_19_q0),
    .din21(buffer1_1_48_8x8_p_V_20_q0),
    .din22(buffer1_1_48_8x8_p_V_21_q0),
    .din23(buffer1_1_48_8x8_p_V_22_q0),
    .din24(buffer1_1_48_8x8_p_V_23_q0),
    .din25(buffer1_1_48_8x8_p_V_24_q0),
    .din26(buffer1_1_48_8x8_p_V_25_q0),
    .din27(buffer1_1_48_8x8_p_V_26_q0),
    .din28(buffer1_1_48_8x8_p_V_27_q0),
    .din29(buffer1_1_48_8x8_p_V_28_q0),
    .din30(buffer1_1_48_8x8_p_V_29_q0),
    .din31(buffer1_1_48_8x8_p_V_30_q0),
    .din32(buffer1_1_48_8x8_p_V_31_q0),
    .din33(buffer1_1_48_8x8_p_V_32_q0),
    .din34(buffer1_1_48_8x8_p_V_33_q0),
    .din35(buffer1_1_48_8x8_p_V_34_q0),
    .din36(buffer1_1_48_8x8_p_V_35_q0),
    .din37(buffer1_1_48_8x8_p_V_36_q0),
    .din38(buffer1_1_48_8x8_p_V_37_q0),
    .din39(buffer1_1_48_8x8_p_V_38_q0),
    .din40(buffer1_1_48_8x8_p_V_39_q0),
    .din41(buffer1_1_48_8x8_p_V_40_q0),
    .din42(buffer1_1_48_8x8_p_V_41_q0),
    .din43(buffer1_1_48_8x8_p_V_42_q0),
    .din44(buffer1_1_48_8x8_p_V_43_q0),
    .din45(buffer1_1_48_8x8_p_V_44_q0),
    .din46(buffer1_1_48_8x8_p_V_45_q0),
    .din47(buffer1_1_48_8x8_p_V_46_q0),
    .din48(buffer1_1_48_8x8_p_V_47_q0),
    .din49(tmp_39_reg_1105),
    .dout(tmp_fu_986_p50)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_887_p2 == 1'd1))) begin
        co_reg_729 <= co_27_reg_1100;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_729 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond_fu_974_p2))) begin
        h_reg_740 <= h_27_reg_1123;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_796_p2 == 1'd0))) begin
        h_reg_740 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_887_p2))) begin
        w_reg_751 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        w_reg_751 <= w_37_reg_1376;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_27_reg_1100 <= co_27_fu_802_p2;
        tmp_356_reg_1092[10 : 1] <= tmp_356_fu_790_p2[10 : 1];
        tmp_499_reg_1088 <= tmp_499_fu_762_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_27_reg_1123 <= h_27_fu_893_p2;
        tmp_358_reg_1110[14 : 1] <= tmp_358_fu_851_p2[14 : 1];
        tmp_361_reg_1115[7 : 1] <= tmp_361_fu_881_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_addr_reg_1128 <= tmp_463_cast_fu_912_p1;
        w_37_reg_1376 <= w_37_fu_980_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_796_p2 == 1'd0))) begin
        tmp_39_reg_1105 <= {{co_reg_729[6:1]}};
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_796_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_796_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_10_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_11_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_12_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_13_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_14_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_15_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_16_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_17_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_18_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_19_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_1_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_20_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_21_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_22_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_23_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_24_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_25_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_26_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_27_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_28_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_29_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_2_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_30_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_31_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_32_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_33_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_33_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_34_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_34_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_35_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_35_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_36_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_36_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_37_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_37_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_38_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_38_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_39_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_39_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_3_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_40_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_40_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_41_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_41_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_42_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_42_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_43_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_43_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_44_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_44_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_45_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_45_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_46_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_46_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_47_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_47_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_48_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_48_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_4_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_5_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_6_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_7_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_8_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_48_8x8_p_V_9_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_499_reg_1088 == 1'd1))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_796_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_887_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond_fu_974_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign buffer1_1_48_8x8_p_V_10_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_11_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_12_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_13_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_14_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_15_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_16_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_17_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_18_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_19_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_1_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_20_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_21_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_22_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_23_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_24_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_25_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_26_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_27_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_28_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_29_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_2_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_30_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_31_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_32_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_33_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_34_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_35_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_36_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_37_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_38_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_39_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_3_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_40_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_41_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_42_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_43_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_44_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_45_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_46_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_47_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_48_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_4_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_5_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_6_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_7_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_8_address0 = tmp_464_cast_fu_922_p1;

assign buffer1_1_48_8x8_p_V_9_address0 = tmp_464_cast_fu_922_p1;

assign co_27_fu_802_p2 = (7'd1 + co_reg_729);

assign exitcond2_fu_887_p2 = ((h_reg_740 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond3_fu_796_p2 = ((co_reg_729 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond_fu_974_p2 = ((w_reg_751 == 4'd10) ? 1'b1 : 1'b0);

assign h_27_fu_893_p2 = (h_reg_740 + 4'd1);

assign h_cast2_cast_fu_818_p1 = h_reg_740;

assign output_V_address0 = output_V_addr_reg_1128;

assign output_V_d0 = tmp_fu_986_p50;

assign p_shl1_cast_fu_786_p1 = tmp_355_fu_778_p3;

assign p_shl2_cast_fu_865_p1 = tmp_359_fu_857_p3;

assign p_shl3_cast_fu_877_p1 = tmp_360_fu_869_p3;

assign p_shl4_cast_fu_835_p1 = tmp_500_fu_827_p3;

assign p_shl5_cast_fu_847_p1 = tmp_501_fu_839_p3;

assign p_shl_cast_fu_774_p1 = tmp_s_fu_766_p3;

assign tmp_355_fu_778_p3 = {{co_reg_729}, {1'd0}};

assign tmp_356_fu_790_p2 = (p_shl_cast_fu_774_p1 + p_shl1_cast_fu_786_p1);

assign tmp_357_fu_822_p2 = (h_cast2_cast_fu_818_p1 + tmp_356_reg_1092);

assign tmp_358_fu_851_p2 = (p_shl4_cast_fu_835_p1 + p_shl5_cast_fu_847_p1);

assign tmp_359_fu_857_p3 = {{h_reg_740}, {3'd0}};

assign tmp_360_fu_869_p3 = {{h_reg_740}, {1'd0}};

assign tmp_361_fu_881_p2 = (p_shl2_cast_fu_865_p1 + p_shl3_cast_fu_877_p1);

assign tmp_362_fu_907_p2 = (tmp_358_reg_1110 + w_cast1_cast_fu_903_p1);

assign tmp_363_fu_917_p2 = (tmp_361_reg_1115 + w_cast1_cast6_fu_899_p1);

assign tmp_463_cast_fu_912_p1 = tmp_362_fu_907_p2;

assign tmp_464_cast_fu_922_p1 = tmp_363_fu_917_p2;

assign tmp_499_fu_762_p1 = co_reg_729[0:0];

assign tmp_500_fu_827_p3 = {{tmp_357_fu_822_p2}, {3'd0}};

assign tmp_501_fu_839_p3 = {{tmp_357_fu_822_p2}, {1'd0}};

assign tmp_s_fu_766_p3 = {{co_reg_729}, {3'd0}};

assign w_37_fu_980_p2 = (w_reg_751 + 4'd1);

assign w_cast1_cast6_fu_899_p1 = w_reg_751;

assign w_cast1_cast_fu_903_p1 = w_reg_751;

always @ (posedge ap_clk) begin
    tmp_356_reg_1092[0] <= 1'b0;
    tmp_358_reg_1110[0] <= 1'b0;
    tmp_361_reg_1115[0] <= 1'b0;
end

endmodule //shuffle_48_r_p
