// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shuffle_24_r_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        buffer1_1_24_16x16_p_23_address0,
        buffer1_1_24_16x16_p_23_ce0,
        buffer1_1_24_16x16_p_23_q0,
        buffer1_1_24_16x16_p_22_address0,
        buffer1_1_24_16x16_p_22_ce0,
        buffer1_1_24_16x16_p_22_q0,
        buffer1_1_24_16x16_p_11_address0,
        buffer1_1_24_16x16_p_11_ce0,
        buffer1_1_24_16x16_p_11_q0,
        buffer1_1_24_16x16_p_6_address0,
        buffer1_1_24_16x16_p_6_ce0,
        buffer1_1_24_16x16_p_6_q0,
        buffer1_1_24_16x16_p_5_address0,
        buffer1_1_24_16x16_p_5_ce0,
        buffer1_1_24_16x16_p_5_q0,
        buffer1_1_24_16x16_p_4_address0,
        buffer1_1_24_16x16_p_4_ce0,
        buffer1_1_24_16x16_p_4_q0,
        buffer1_1_24_16x16_p_3_address0,
        buffer1_1_24_16x16_p_3_ce0,
        buffer1_1_24_16x16_p_3_q0,
        buffer1_1_24_16x16_p_2_address0,
        buffer1_1_24_16x16_p_2_ce0,
        buffer1_1_24_16x16_p_2_q0,
        buffer1_1_24_16x16_p_1_address0,
        buffer1_1_24_16x16_p_1_ce0,
        buffer1_1_24_16x16_p_1_q0,
        buffer1_1_24_16x16_p_address0,
        buffer1_1_24_16x16_p_ce0,
        buffer1_1_24_16x16_p_q0,
        buffer1_1_24_16x16_p_21_address0,
        buffer1_1_24_16x16_p_21_ce0,
        buffer1_1_24_16x16_p_21_q0,
        buffer1_1_24_16x16_p_20_address0,
        buffer1_1_24_16x16_p_20_ce0,
        buffer1_1_24_16x16_p_20_q0,
        buffer1_1_24_16x16_p_19_address0,
        buffer1_1_24_16x16_p_19_ce0,
        buffer1_1_24_16x16_p_19_q0,
        buffer1_1_24_16x16_p_18_address0,
        buffer1_1_24_16x16_p_18_ce0,
        buffer1_1_24_16x16_p_18_q0,
        buffer1_1_24_16x16_p_17_address0,
        buffer1_1_24_16x16_p_17_ce0,
        buffer1_1_24_16x16_p_17_q0,
        buffer1_1_24_16x16_p_16_address0,
        buffer1_1_24_16x16_p_16_ce0,
        buffer1_1_24_16x16_p_16_q0,
        buffer1_1_24_16x16_p_15_address0,
        buffer1_1_24_16x16_p_15_ce0,
        buffer1_1_24_16x16_p_15_q0,
        buffer1_1_24_16x16_p_14_address0,
        buffer1_1_24_16x16_p_14_ce0,
        buffer1_1_24_16x16_p_14_q0,
        buffer1_1_24_16x16_p_13_address0,
        buffer1_1_24_16x16_p_13_ce0,
        buffer1_1_24_16x16_p_13_q0,
        buffer1_1_24_16x16_p_12_address0,
        buffer1_1_24_16x16_p_12_ce0,
        buffer1_1_24_16x16_p_12_q0,
        buffer1_1_24_16x16_p_10_address0,
        buffer1_1_24_16x16_p_10_ce0,
        buffer1_1_24_16x16_p_10_q0,
        buffer1_1_24_16x16_p_9_address0,
        buffer1_1_24_16x16_p_9_ce0,
        buffer1_1_24_16x16_p_9_q0,
        buffer1_1_24_16x16_p_8_address0,
        buffer1_1_24_16x16_p_8_ce0,
        buffer1_1_24_16x16_p_8_q0,
        buffer1_1_24_16x16_p_7_address0,
        buffer1_1_24_16x16_p_7_ce0,
        buffer1_1_24_16x16_p_7_q0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [8:0] buffer1_1_24_16x16_p_23_address0;
output   buffer1_1_24_16x16_p_23_ce0;
input  [7:0] buffer1_1_24_16x16_p_23_q0;
output  [8:0] buffer1_1_24_16x16_p_22_address0;
output   buffer1_1_24_16x16_p_22_ce0;
input  [7:0] buffer1_1_24_16x16_p_22_q0;
output  [8:0] buffer1_1_24_16x16_p_11_address0;
output   buffer1_1_24_16x16_p_11_ce0;
input  [7:0] buffer1_1_24_16x16_p_11_q0;
output  [8:0] buffer1_1_24_16x16_p_6_address0;
output   buffer1_1_24_16x16_p_6_ce0;
input  [7:0] buffer1_1_24_16x16_p_6_q0;
output  [8:0] buffer1_1_24_16x16_p_5_address0;
output   buffer1_1_24_16x16_p_5_ce0;
input  [7:0] buffer1_1_24_16x16_p_5_q0;
output  [8:0] buffer1_1_24_16x16_p_4_address0;
output   buffer1_1_24_16x16_p_4_ce0;
input  [7:0] buffer1_1_24_16x16_p_4_q0;
output  [8:0] buffer1_1_24_16x16_p_3_address0;
output   buffer1_1_24_16x16_p_3_ce0;
input  [7:0] buffer1_1_24_16x16_p_3_q0;
output  [8:0] buffer1_1_24_16x16_p_2_address0;
output   buffer1_1_24_16x16_p_2_ce0;
input  [7:0] buffer1_1_24_16x16_p_2_q0;
output  [8:0] buffer1_1_24_16x16_p_1_address0;
output   buffer1_1_24_16x16_p_1_ce0;
input  [7:0] buffer1_1_24_16x16_p_1_q0;
output  [8:0] buffer1_1_24_16x16_p_address0;
output   buffer1_1_24_16x16_p_ce0;
input  [7:0] buffer1_1_24_16x16_p_q0;
output  [8:0] buffer1_1_24_16x16_p_21_address0;
output   buffer1_1_24_16x16_p_21_ce0;
input  [7:0] buffer1_1_24_16x16_p_21_q0;
output  [8:0] buffer1_1_24_16x16_p_20_address0;
output   buffer1_1_24_16x16_p_20_ce0;
input  [7:0] buffer1_1_24_16x16_p_20_q0;
output  [8:0] buffer1_1_24_16x16_p_19_address0;
output   buffer1_1_24_16x16_p_19_ce0;
input  [7:0] buffer1_1_24_16x16_p_19_q0;
output  [8:0] buffer1_1_24_16x16_p_18_address0;
output   buffer1_1_24_16x16_p_18_ce0;
input  [7:0] buffer1_1_24_16x16_p_18_q0;
output  [8:0] buffer1_1_24_16x16_p_17_address0;
output   buffer1_1_24_16x16_p_17_ce0;
input  [7:0] buffer1_1_24_16x16_p_17_q0;
output  [8:0] buffer1_1_24_16x16_p_16_address0;
output   buffer1_1_24_16x16_p_16_ce0;
input  [7:0] buffer1_1_24_16x16_p_16_q0;
output  [8:0] buffer1_1_24_16x16_p_15_address0;
output   buffer1_1_24_16x16_p_15_ce0;
input  [7:0] buffer1_1_24_16x16_p_15_q0;
output  [8:0] buffer1_1_24_16x16_p_14_address0;
output   buffer1_1_24_16x16_p_14_ce0;
input  [7:0] buffer1_1_24_16x16_p_14_q0;
output  [8:0] buffer1_1_24_16x16_p_13_address0;
output   buffer1_1_24_16x16_p_13_ce0;
input  [7:0] buffer1_1_24_16x16_p_13_q0;
output  [8:0] buffer1_1_24_16x16_p_12_address0;
output   buffer1_1_24_16x16_p_12_ce0;
input  [7:0] buffer1_1_24_16x16_p_12_q0;
output  [8:0] buffer1_1_24_16x16_p_10_address0;
output   buffer1_1_24_16x16_p_10_ce0;
input  [7:0] buffer1_1_24_16x16_p_10_q0;
output  [8:0] buffer1_1_24_16x16_p_9_address0;
output   buffer1_1_24_16x16_p_9_ce0;
input  [7:0] buffer1_1_24_16x16_p_9_q0;
output  [8:0] buffer1_1_24_16x16_p_8_address0;
output   buffer1_1_24_16x16_p_8_ce0;
input  [7:0] buffer1_1_24_16x16_p_8_q0;
output  [8:0] buffer1_1_24_16x16_p_7_address0;
output   buffer1_1_24_16x16_p_7_ce0;
input  [7:0] buffer1_1_24_16x16_p_7_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_V_ce0;
reg output_V_we0;
reg buffer1_1_24_16x16_p_23_ce0;
reg buffer1_1_24_16x16_p_22_ce0;
reg buffer1_1_24_16x16_p_11_ce0;
reg buffer1_1_24_16x16_p_6_ce0;
reg buffer1_1_24_16x16_p_5_ce0;
reg buffer1_1_24_16x16_p_4_ce0;
reg buffer1_1_24_16x16_p_3_ce0;
reg buffer1_1_24_16x16_p_2_ce0;
reg buffer1_1_24_16x16_p_1_ce0;
reg buffer1_1_24_16x16_p_ce0;
reg buffer1_1_24_16x16_p_21_ce0;
reg buffer1_1_24_16x16_p_20_ce0;
reg buffer1_1_24_16x16_p_19_ce0;
reg buffer1_1_24_16x16_p_18_ce0;
reg buffer1_1_24_16x16_p_17_ce0;
reg buffer1_1_24_16x16_p_16_ce0;
reg buffer1_1_24_16x16_p_15_ce0;
reg buffer1_1_24_16x16_p_14_ce0;
reg buffer1_1_24_16x16_p_13_ce0;
reg buffer1_1_24_16x16_p_12_ce0;
reg buffer1_1_24_16x16_p_10_ce0;
reg buffer1_1_24_16x16_p_9_ce0;
reg buffer1_1_24_16x16_p_8_ce0;
reg buffer1_1_24_16x16_p_7_ce0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_511_fu_426_p1;
reg   [0:0] tmp_511_reg_675;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_389_fu_454_p2;
reg   [10:0] tmp_389_reg_679;
wire   [5:0] co_30_fu_466_p2;
reg   [5:0] co_30_reg_687;
reg   [4:0] tmp_49_reg_692;
wire   [0:0] exitcond3_fu_460_p2;
wire   [14:0] tmp_391_fu_511_p2;
reg   [14:0] tmp_391_reg_697;
wire    ap_CS_fsm_state3;
wire   [9:0] tmp_394_fu_541_p2;
reg   [9:0] tmp_394_reg_702;
wire   [4:0] h_30_fu_553_p2;
reg   [4:0] h_30_reg_710;
reg   [13:0] output_V_addr_reg_715;
wire    ap_CS_fsm_state4;
wire   [4:0] w_40_fu_616_p2;
reg   [4:0] w_40_reg_843;
wire   [7:0] tmp_fu_622_p26;
reg   [7:0] tmp_reg_848;
wire    ap_CS_fsm_state5;
reg   [5:0] co_reg_393;
wire   [0:0] exitcond2_fu_547_p2;
reg   [4:0] h_reg_404;
wire   [0:0] exitcond_fu_610_p2;
reg   [4:0] w_reg_415;
wire    ap_CS_fsm_state6;
wire   [31:0] tmp_509_cast_fu_572_p1;
wire   [31:0] tmp_510_cast_fu_582_p1;
wire   [9:0] tmp_s_fu_430_p3;
wire   [6:0] tmp_388_fu_442_p3;
wire   [10:0] p_shl_cast_fu_438_p1;
wire   [10:0] p_shl1_cast_fu_450_p1;
wire   [10:0] h_cast2_cast_fu_482_p1;
wire   [10:0] tmp_390_fu_486_p2;
wire   [11:0] tmp_512_fu_499_p3;
wire   [14:0] p_shl4_cast_fu_491_p3;
wire   [14:0] p_shl5_cast_fu_507_p1;
wire   [8:0] tmp_392_fu_517_p3;
wire   [5:0] tmp_393_fu_529_p3;
wire   [9:0] p_shl2_cast_fu_525_p1;
wire   [9:0] p_shl3_cast_fu_537_p1;
wire   [14:0] w_cast1_cast_fu_563_p1;
wire   [14:0] tmp_395_fu_567_p2;
wire   [9:0] w_cast1_cast6_fu_559_p1;
wire   [9:0] tmp_396_fu_577_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

ShuffleNetV2_mux_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_eOg_x_U173(
    .din1(buffer1_1_24_16x16_p_23_q0),
    .din2(buffer1_1_24_16x16_p_22_q0),
    .din3(buffer1_1_24_16x16_p_11_q0),
    .din4(buffer1_1_24_16x16_p_6_q0),
    .din5(buffer1_1_24_16x16_p_5_q0),
    .din6(buffer1_1_24_16x16_p_4_q0),
    .din7(buffer1_1_24_16x16_p_3_q0),
    .din8(buffer1_1_24_16x16_p_2_q0),
    .din9(buffer1_1_24_16x16_p_1_q0),
    .din10(buffer1_1_24_16x16_p_q0),
    .din11(buffer1_1_24_16x16_p_21_q0),
    .din12(buffer1_1_24_16x16_p_20_q0),
    .din13(buffer1_1_24_16x16_p_19_q0),
    .din14(buffer1_1_24_16x16_p_18_q0),
    .din15(buffer1_1_24_16x16_p_17_q0),
    .din16(buffer1_1_24_16x16_p_16_q0),
    .din17(buffer1_1_24_16x16_p_15_q0),
    .din18(buffer1_1_24_16x16_p_14_q0),
    .din19(buffer1_1_24_16x16_p_13_q0),
    .din20(buffer1_1_24_16x16_p_12_q0),
    .din21(buffer1_1_24_16x16_p_10_q0),
    .din22(buffer1_1_24_16x16_p_9_q0),
    .din23(buffer1_1_24_16x16_p_8_q0),
    .din24(buffer1_1_24_16x16_p_7_q0),
    .din25(tmp_49_reg_692),
    .dout(tmp_fu_622_p26)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_547_p2 == 1'd1))) begin
        co_reg_393 <= co_30_reg_687;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_393 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond_fu_610_p2))) begin
        h_reg_404 <= h_30_reg_710;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_460_p2 == 1'd0))) begin
        h_reg_404 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_547_p2))) begin
        w_reg_415 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        w_reg_415 <= w_40_reg_843;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_30_reg_687 <= co_30_fu_466_p2;
        tmp_389_reg_679[10 : 1] <= tmp_389_fu_454_p2[10 : 1];
        tmp_511_reg_675 <= tmp_511_fu_426_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_30_reg_710 <= h_30_fu_553_p2;
        tmp_391_reg_697[14 : 1] <= tmp_391_fu_511_p2[14 : 1];
        tmp_394_reg_702[9 : 1] <= tmp_394_fu_541_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_addr_reg_715 <= tmp_509_cast_fu_572_p1;
        w_40_reg_843 <= w_40_fu_616_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_460_p2 == 1'd0))) begin
        tmp_49_reg_692 <= {{co_reg_393[5:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_reg_848 <= tmp_fu_622_p26;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_460_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_460_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_10_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_11_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_12_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_13_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_14_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_15_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_16_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_17_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_18_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_19_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_1_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_20_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_21_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_22_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_23_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_2_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_3_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_4_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_5_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_6_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_7_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_8_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_9_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_511_reg_675 == 1'd1))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_460_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_547_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond_fu_610_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_610_p2) & (tmp_511_reg_675 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign buffer1_1_24_16x16_p_10_address0 = tmp_510_cast_fu_582_p1;

assign buffer1_1_24_16x16_p_11_address0 = tmp_510_cast_fu_582_p1;

assign buffer1_1_24_16x16_p_12_address0 = tmp_510_cast_fu_582_p1;

assign buffer1_1_24_16x16_p_13_address0 = tmp_510_cast_fu_582_p1;

assign buffer1_1_24_16x16_p_14_address0 = tmp_510_cast_fu_582_p1;

assign buffer1_1_24_16x16_p_15_address0 = tmp_510_cast_fu_582_p1;

assign buffer1_1_24_16x16_p_16_address0 = tmp_510_cast_fu_582_p1;

assign buffer1_1_24_16x16_p_17_address0 = tmp_510_cast_fu_582_p1;

assign buffer1_1_24_16x16_p_18_address0 = tmp_510_cast_fu_582_p1;

assign buffer1_1_24_16x16_p_19_address0 = tmp_510_cast_fu_582_p1;

assign buffer1_1_24_16x16_p_1_address0 = tmp_510_cast_fu_582_p1;

assign buffer1_1_24_16x16_p_20_address0 = tmp_510_cast_fu_582_p1;

assign buffer1_1_24_16x16_p_21_address0 = tmp_510_cast_fu_582_p1;

assign buffer1_1_24_16x16_p_22_address0 = tmp_510_cast_fu_582_p1;

assign buffer1_1_24_16x16_p_23_address0 = tmp_510_cast_fu_582_p1;

assign buffer1_1_24_16x16_p_2_address0 = tmp_510_cast_fu_582_p1;

assign buffer1_1_24_16x16_p_3_address0 = tmp_510_cast_fu_582_p1;

assign buffer1_1_24_16x16_p_4_address0 = tmp_510_cast_fu_582_p1;

assign buffer1_1_24_16x16_p_5_address0 = tmp_510_cast_fu_582_p1;

assign buffer1_1_24_16x16_p_6_address0 = tmp_510_cast_fu_582_p1;

assign buffer1_1_24_16x16_p_7_address0 = tmp_510_cast_fu_582_p1;

assign buffer1_1_24_16x16_p_8_address0 = tmp_510_cast_fu_582_p1;

assign buffer1_1_24_16x16_p_9_address0 = tmp_510_cast_fu_582_p1;

assign buffer1_1_24_16x16_p_address0 = tmp_510_cast_fu_582_p1;

assign co_30_fu_466_p2 = (6'd1 + co_reg_393);

assign exitcond2_fu_547_p2 = ((h_reg_404 == 5'd18) ? 1'b1 : 1'b0);

assign exitcond3_fu_460_p2 = ((co_reg_393 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond_fu_610_p2 = ((w_reg_415 == 5'd18) ? 1'b1 : 1'b0);

assign h_30_fu_553_p2 = (h_reg_404 + 5'd1);

assign h_cast2_cast_fu_482_p1 = h_reg_404;

assign output_V_address0 = output_V_addr_reg_715;

assign output_V_d0 = tmp_reg_848;

assign p_shl1_cast_fu_450_p1 = tmp_388_fu_442_p3;

assign p_shl2_cast_fu_525_p1 = tmp_392_fu_517_p3;

assign p_shl3_cast_fu_537_p1 = tmp_393_fu_529_p3;

assign p_shl4_cast_fu_491_p3 = {{tmp_390_fu_486_p2}, {4'd0}};

assign p_shl5_cast_fu_507_p1 = tmp_512_fu_499_p3;

assign p_shl_cast_fu_438_p1 = tmp_s_fu_430_p3;

assign tmp_388_fu_442_p3 = {{co_reg_393}, {1'd0}};

assign tmp_389_fu_454_p2 = (p_shl_cast_fu_438_p1 + p_shl1_cast_fu_450_p1);

assign tmp_390_fu_486_p2 = (h_cast2_cast_fu_482_p1 + tmp_389_reg_679);

assign tmp_391_fu_511_p2 = (p_shl4_cast_fu_491_p3 + p_shl5_cast_fu_507_p1);

assign tmp_392_fu_517_p3 = {{h_reg_404}, {4'd0}};

assign tmp_393_fu_529_p3 = {{h_reg_404}, {1'd0}};

assign tmp_394_fu_541_p2 = (p_shl2_cast_fu_525_p1 + p_shl3_cast_fu_537_p1);

assign tmp_395_fu_567_p2 = (tmp_391_reg_697 + w_cast1_cast_fu_563_p1);

assign tmp_396_fu_577_p2 = (tmp_394_reg_702 + w_cast1_cast6_fu_559_p1);

assign tmp_509_cast_fu_572_p1 = tmp_395_fu_567_p2;

assign tmp_510_cast_fu_582_p1 = tmp_396_fu_577_p2;

assign tmp_511_fu_426_p1 = co_reg_393[0:0];

assign tmp_512_fu_499_p3 = {{tmp_390_fu_486_p2}, {1'd0}};

assign tmp_s_fu_430_p3 = {{co_reg_393}, {4'd0}};

assign w_40_fu_616_p2 = (w_reg_415 + 5'd1);

assign w_cast1_cast6_fu_559_p1 = w_reg_415;

assign w_cast1_cast_fu_563_p1 = w_reg_415;

always @ (posedge ap_clk) begin
    tmp_389_reg_679[0] <= 1'b0;
    tmp_391_reg_697[0] <= 1'b0;
    tmp_394_reg_702[0] <= 1'b0;
end

endmodule //shuffle_24_r_p
