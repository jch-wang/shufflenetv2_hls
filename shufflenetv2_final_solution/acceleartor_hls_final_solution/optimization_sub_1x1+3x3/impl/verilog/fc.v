// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_weight_V_AWVALID,
        m_axi_weight_V_AWREADY,
        m_axi_weight_V_AWADDR,
        m_axi_weight_V_AWID,
        m_axi_weight_V_AWLEN,
        m_axi_weight_V_AWSIZE,
        m_axi_weight_V_AWBURST,
        m_axi_weight_V_AWLOCK,
        m_axi_weight_V_AWCACHE,
        m_axi_weight_V_AWPROT,
        m_axi_weight_V_AWQOS,
        m_axi_weight_V_AWREGION,
        m_axi_weight_V_AWUSER,
        m_axi_weight_V_WVALID,
        m_axi_weight_V_WREADY,
        m_axi_weight_V_WDATA,
        m_axi_weight_V_WSTRB,
        m_axi_weight_V_WLAST,
        m_axi_weight_V_WID,
        m_axi_weight_V_WUSER,
        m_axi_weight_V_ARVALID,
        m_axi_weight_V_ARREADY,
        m_axi_weight_V_ARADDR,
        m_axi_weight_V_ARID,
        m_axi_weight_V_ARLEN,
        m_axi_weight_V_ARSIZE,
        m_axi_weight_V_ARBURST,
        m_axi_weight_V_ARLOCK,
        m_axi_weight_V_ARCACHE,
        m_axi_weight_V_ARPROT,
        m_axi_weight_V_ARQOS,
        m_axi_weight_V_ARREGION,
        m_axi_weight_V_ARUSER,
        m_axi_weight_V_RVALID,
        m_axi_weight_V_RREADY,
        m_axi_weight_V_RDATA,
        m_axi_weight_V_RLAST,
        m_axi_weight_V_RID,
        m_axi_weight_V_RUSER,
        m_axi_weight_V_RRESP,
        m_axi_weight_V_BVALID,
        m_axi_weight_V_BREADY,
        m_axi_weight_V_BRESP,
        m_axi_weight_V_BID,
        m_axi_weight_V_BUSER,
        fc_weight_V11,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        m_axi_output_V_AWVALID,
        m_axi_output_V_AWREADY,
        m_axi_output_V_AWADDR,
        m_axi_output_V_AWID,
        m_axi_output_V_AWLEN,
        m_axi_output_V_AWSIZE,
        m_axi_output_V_AWBURST,
        m_axi_output_V_AWLOCK,
        m_axi_output_V_AWCACHE,
        m_axi_output_V_AWPROT,
        m_axi_output_V_AWQOS,
        m_axi_output_V_AWREGION,
        m_axi_output_V_AWUSER,
        m_axi_output_V_WVALID,
        m_axi_output_V_WREADY,
        m_axi_output_V_WDATA,
        m_axi_output_V_WSTRB,
        m_axi_output_V_WLAST,
        m_axi_output_V_WID,
        m_axi_output_V_WUSER,
        m_axi_output_V_ARVALID,
        m_axi_output_V_ARREADY,
        m_axi_output_V_ARADDR,
        m_axi_output_V_ARID,
        m_axi_output_V_ARLEN,
        m_axi_output_V_ARSIZE,
        m_axi_output_V_ARBURST,
        m_axi_output_V_ARLOCK,
        m_axi_output_V_ARCACHE,
        m_axi_output_V_ARPROT,
        m_axi_output_V_ARQOS,
        m_axi_output_V_ARREGION,
        m_axi_output_V_ARUSER,
        m_axi_output_V_RVALID,
        m_axi_output_V_RREADY,
        m_axi_output_V_RDATA,
        m_axi_output_V_RLAST,
        m_axi_output_V_RID,
        m_axi_output_V_RUSER,
        m_axi_output_V_RRESP,
        m_axi_output_V_BVALID,
        m_axi_output_V_BREADY,
        m_axi_output_V_BRESP,
        m_axi_output_V_BID,
        m_axi_output_V_BUSER,
        fc_output_V15,
        avgpool_output_V_address0,
        avgpool_output_V_ce0,
        avgpool_output_V_q0
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_weight_V_AWVALID;
input   m_axi_weight_V_AWREADY;
output  [31:0] m_axi_weight_V_AWADDR;
output  [0:0] m_axi_weight_V_AWID;
output  [31:0] m_axi_weight_V_AWLEN;
output  [2:0] m_axi_weight_V_AWSIZE;
output  [1:0] m_axi_weight_V_AWBURST;
output  [1:0] m_axi_weight_V_AWLOCK;
output  [3:0] m_axi_weight_V_AWCACHE;
output  [2:0] m_axi_weight_V_AWPROT;
output  [3:0] m_axi_weight_V_AWQOS;
output  [3:0] m_axi_weight_V_AWREGION;
output  [0:0] m_axi_weight_V_AWUSER;
output   m_axi_weight_V_WVALID;
input   m_axi_weight_V_WREADY;
output  [7:0] m_axi_weight_V_WDATA;
output  [0:0] m_axi_weight_V_WSTRB;
output   m_axi_weight_V_WLAST;
output  [0:0] m_axi_weight_V_WID;
output  [0:0] m_axi_weight_V_WUSER;
output   m_axi_weight_V_ARVALID;
input   m_axi_weight_V_ARREADY;
output  [31:0] m_axi_weight_V_ARADDR;
output  [0:0] m_axi_weight_V_ARID;
output  [31:0] m_axi_weight_V_ARLEN;
output  [2:0] m_axi_weight_V_ARSIZE;
output  [1:0] m_axi_weight_V_ARBURST;
output  [1:0] m_axi_weight_V_ARLOCK;
output  [3:0] m_axi_weight_V_ARCACHE;
output  [2:0] m_axi_weight_V_ARPROT;
output  [3:0] m_axi_weight_V_ARQOS;
output  [3:0] m_axi_weight_V_ARREGION;
output  [0:0] m_axi_weight_V_ARUSER;
input   m_axi_weight_V_RVALID;
output   m_axi_weight_V_RREADY;
input  [7:0] m_axi_weight_V_RDATA;
input   m_axi_weight_V_RLAST;
input  [0:0] m_axi_weight_V_RID;
input  [0:0] m_axi_weight_V_RUSER;
input  [1:0] m_axi_weight_V_RRESP;
input   m_axi_weight_V_BVALID;
output   m_axi_weight_V_BREADY;
input  [1:0] m_axi_weight_V_BRESP;
input  [0:0] m_axi_weight_V_BID;
input  [0:0] m_axi_weight_V_BUSER;
input  [31:0] fc_weight_V11;
output  [3:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output   m_axi_output_V_AWVALID;
input   m_axi_output_V_AWREADY;
output  [31:0] m_axi_output_V_AWADDR;
output  [0:0] m_axi_output_V_AWID;
output  [31:0] m_axi_output_V_AWLEN;
output  [2:0] m_axi_output_V_AWSIZE;
output  [1:0] m_axi_output_V_AWBURST;
output  [1:0] m_axi_output_V_AWLOCK;
output  [3:0] m_axi_output_V_AWCACHE;
output  [2:0] m_axi_output_V_AWPROT;
output  [3:0] m_axi_output_V_AWQOS;
output  [3:0] m_axi_output_V_AWREGION;
output  [0:0] m_axi_output_V_AWUSER;
output   m_axi_output_V_WVALID;
input   m_axi_output_V_WREADY;
output  [7:0] m_axi_output_V_WDATA;
output  [0:0] m_axi_output_V_WSTRB;
output   m_axi_output_V_WLAST;
output  [0:0] m_axi_output_V_WID;
output  [0:0] m_axi_output_V_WUSER;
output   m_axi_output_V_ARVALID;
input   m_axi_output_V_ARREADY;
output  [31:0] m_axi_output_V_ARADDR;
output  [0:0] m_axi_output_V_ARID;
output  [31:0] m_axi_output_V_ARLEN;
output  [2:0] m_axi_output_V_ARSIZE;
output  [1:0] m_axi_output_V_ARBURST;
output  [1:0] m_axi_output_V_ARLOCK;
output  [3:0] m_axi_output_V_ARCACHE;
output  [2:0] m_axi_output_V_ARPROT;
output  [3:0] m_axi_output_V_ARQOS;
output  [3:0] m_axi_output_V_ARREGION;
output  [0:0] m_axi_output_V_ARUSER;
input   m_axi_output_V_RVALID;
output   m_axi_output_V_RREADY;
input  [7:0] m_axi_output_V_RDATA;
input   m_axi_output_V_RLAST;
input  [0:0] m_axi_output_V_RID;
input  [0:0] m_axi_output_V_RUSER;
input  [1:0] m_axi_output_V_RRESP;
input   m_axi_output_V_BVALID;
output   m_axi_output_V_BREADY;
input  [1:0] m_axi_output_V_BRESP;
input  [0:0] m_axi_output_V_BID;
input  [0:0] m_axi_output_V_BUSER;
input  [31:0] fc_output_V15;
output  [8:0] avgpool_output_V_address0;
output   avgpool_output_V_ce0;
input  [7:0] avgpool_output_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_weight_V_ARVALID;
reg m_axi_weight_V_RREADY;
reg bias_V_ce0;
reg m_axi_output_V_AWVALID;
reg m_axi_output_V_WVALID;
reg m_axi_output_V_BREADY;
reg avgpool_output_V_ce0;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    weight_V_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    weight_V_blk_n_R;
wire    ap_CS_fsm_state11;
reg    output_V_blk_n_AW;
reg    output_V_blk_n_W;
wire    ap_CS_fsm_state14;
reg    output_V_blk_n_B;
wire    ap_CS_fsm_state18;
reg    ap_sig_ioackin_m_axi_output_V_AWREADY;
wire   [31:0] co_cast2_fu_174_p1;
reg   [31:0] co_cast2_reg_252;
wire    ap_CS_fsm_state2;
wire   [3:0] co_33_fu_192_p2;
reg   [3:0] co_33_reg_260;
reg   [31:0] weight_V_addr_reg_265;
wire   [0:0] exitcond42_fu_186_p2;
wire   [9:0] ci_15_fu_224_p2;
reg   [9:0] ci_15_reg_274;
wire    ap_CS_fsm_state10;
wire   [0:0] exitcond_fu_218_p2;
reg  signed [7:0] weight_V_addr_read_reg_289;
reg  signed [7:0] avgpool_output_V_loa_reg_294;
wire  signed [7:0] grp_fu_236_p3;
wire    ap_CS_fsm_state12;
wire   [7:0] result_V_fu_230_p2;
reg   [7:0] result_V_reg_304;
wire    ap_CS_fsm_state13;
reg   [3:0] co_reg_133;
reg    ap_sig_ioackin_m_axi_output_V_WREADY;
reg   [7:0] p_s_reg_144;
wire    ap_CS_fsm_state9;
reg   [9:0] ci_reg_156;
wire   [31:0] ci_cast1_fu_213_p1;
wire   [31:0] tmp_520_fu_202_p2;
reg    ap_reg_ioackin_m_axi_output_V_AWREADY;
reg    ap_reg_ioackin_m_axi_output_V_WREADY;
reg    ap_reg_ioackin_m_axi_weight_V_ARREADY;
reg    ap_sig_ioackin_m_axi_weight_V_ARREADY;
wire   [12:0] tmp_s_fu_178_p3;
wire   [31:0] tmp_519_fu_198_p1;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
#0 ap_reg_ioackin_m_axi_output_V_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_output_V_WREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_weight_V_ARREADY = 1'b0;
end

ShuffleNetV2_mac_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mac_cud_x_U1629(
    .din0(avgpool_output_V_loa_reg_294),
    .din1(weight_V_addr_read_reg_289),
    .din2(p_s_reg_144),
    .dout(grp_fu_236_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_output_V_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if (~((1'b0 == ap_start) | (1'b0 == ap_sig_ioackin_m_axi_output_V_AWREADY))) begin
                ap_reg_ioackin_m_axi_output_V_AWREADY <= 1'b0;
            end else if (((ap_start == 1'b1) & (1'b1 == m_axi_output_V_AWREADY))) begin
                ap_reg_ioackin_m_axi_output_V_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_output_V_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state14)) begin
            if ((ap_sig_ioackin_m_axi_output_V_WREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_output_V_WREADY <= 1'b0;
            end else if ((1'b1 == m_axi_output_V_WREADY)) begin
                ap_reg_ioackin_m_axi_output_V_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_weight_V_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            if ((ap_sig_ioackin_m_axi_weight_V_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_weight_V_ARREADY <= 1'b0;
            end else if ((1'b1 == m_axi_weight_V_ARREADY)) begin
                ap_reg_ioackin_m_axi_weight_V_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ci_reg_156 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ci_reg_156 <= ci_15_reg_274;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (ap_sig_ioackin_m_axi_output_V_WREADY == 1'b1))) begin
        co_reg_133 <= co_33_reg_260;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == ap_sig_ioackin_m_axi_output_V_AWREADY)))) begin
        co_reg_133 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_s_reg_144 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        p_s_reg_144 <= grp_fu_236_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (m_axi_weight_V_RVALID == 1'b1))) begin
        avgpool_output_V_loa_reg_294 <= avgpool_output_V_q0;
        weight_V_addr_read_reg_289 <= m_axi_weight_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ci_15_reg_274 <= ci_15_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_33_reg_260 <= co_33_fu_192_p2;
        co_cast2_reg_252[3 : 0] <= co_cast2_fu_174_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        result_V_reg_304 <= result_V_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond42_fu_186_p2))) begin
        weight_V_addr_reg_265 <= tmp_520_fu_202_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state18) & (m_axi_output_V_BVALID == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (m_axi_output_V_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_output_V_AWREADY)) begin
        ap_sig_ioackin_m_axi_output_V_AWREADY = m_axi_output_V_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_output_V_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_output_V_WREADY)) begin
        ap_sig_ioackin_m_axi_output_V_WREADY = m_axi_output_V_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_output_V_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_weight_V_ARREADY)) begin
        ap_sig_ioackin_m_axi_weight_V_ARREADY = m_axi_weight_V_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_weight_V_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        avgpool_output_V_ce0 = 1'b1;
    end else begin
        avgpool_output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (1'b0 == ap_reg_ioackin_m_axi_output_V_AWREADY))) begin
        m_axi_output_V_AWVALID = 1'b1;
    end else begin
        m_axi_output_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (m_axi_output_V_BVALID == 1'b1))) begin
        m_axi_output_V_BREADY = 1'b1;
    end else begin
        m_axi_output_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_reg_ioackin_m_axi_output_V_WREADY))) begin
        m_axi_output_V_WVALID = 1'b1;
    end else begin
        m_axi_output_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_reg_ioackin_m_axi_weight_V_ARREADY))) begin
        m_axi_weight_V_ARVALID = 1'b1;
    end else begin
        m_axi_weight_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (m_axi_weight_V_RVALID == 1'b1))) begin
        m_axi_weight_V_RREADY = 1'b1;
    end else begin
        m_axi_weight_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        output_V_blk_n_AW = m_axi_output_V_AWREADY;
    end else begin
        output_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        output_V_blk_n_B = m_axi_output_V_BVALID;
    end else begin
        output_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_V_blk_n_W = m_axi_output_V_WREADY;
    end else begin
        output_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weight_V_blk_n_AR = m_axi_weight_V_ARREADY;
    end else begin
        weight_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        weight_V_blk_n_R = m_axi_weight_V_RVALID;
    end else begin
        weight_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == ap_sig_ioackin_m_axi_output_V_AWREADY)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond42_fu_186_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (ap_sig_ioackin_m_axi_weight_V_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (exitcond_fu_218_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (m_axi_weight_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (ap_sig_ioackin_m_axi_output_V_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (m_axi_output_V_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign avgpool_output_V_address0 = ci_cast1_fu_213_p1;

assign bias_V_address0 = co_cast2_reg_252;

assign ci_15_fu_224_p2 = (ci_reg_156 + 10'd1);

assign ci_cast1_fu_213_p1 = ci_reg_156;

assign co_33_fu_192_p2 = (co_reg_133 + 4'd1);

assign co_cast2_fu_174_p1 = co_reg_133;

assign exitcond42_fu_186_p2 = ((co_reg_133 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_fu_218_p2 = ((ci_reg_156 == 10'd512) ? 1'b1 : 1'b0);

assign m_axi_output_V_ARADDR = 32'd0;

assign m_axi_output_V_ARBURST = 2'd0;

assign m_axi_output_V_ARCACHE = 4'd0;

assign m_axi_output_V_ARID = 1'd0;

assign m_axi_output_V_ARLEN = 32'd0;

assign m_axi_output_V_ARLOCK = 2'd0;

assign m_axi_output_V_ARPROT = 3'd0;

assign m_axi_output_V_ARQOS = 4'd0;

assign m_axi_output_V_ARREGION = 4'd0;

assign m_axi_output_V_ARSIZE = 3'd0;

assign m_axi_output_V_ARUSER = 1'd0;

assign m_axi_output_V_ARVALID = 1'b0;

assign m_axi_output_V_AWADDR = fc_output_V15;

assign m_axi_output_V_AWBURST = 2'd0;

assign m_axi_output_V_AWCACHE = 4'd0;

assign m_axi_output_V_AWID = 1'd0;

assign m_axi_output_V_AWLEN = 32'd10;

assign m_axi_output_V_AWLOCK = 2'd0;

assign m_axi_output_V_AWPROT = 3'd0;

assign m_axi_output_V_AWQOS = 4'd0;

assign m_axi_output_V_AWREGION = 4'd0;

assign m_axi_output_V_AWSIZE = 3'd0;

assign m_axi_output_V_AWUSER = 1'd0;

assign m_axi_output_V_RREADY = 1'b0;

assign m_axi_output_V_WDATA = result_V_reg_304;

assign m_axi_output_V_WID = 1'd0;

assign m_axi_output_V_WLAST = 1'b0;

assign m_axi_output_V_WSTRB = 1'd1;

assign m_axi_output_V_WUSER = 1'd0;

assign m_axi_weight_V_ARADDR = weight_V_addr_reg_265;

assign m_axi_weight_V_ARBURST = 2'd0;

assign m_axi_weight_V_ARCACHE = 4'd0;

assign m_axi_weight_V_ARID = 1'd0;

assign m_axi_weight_V_ARLEN = 32'd512;

assign m_axi_weight_V_ARLOCK = 2'd0;

assign m_axi_weight_V_ARPROT = 3'd0;

assign m_axi_weight_V_ARQOS = 4'd0;

assign m_axi_weight_V_ARREGION = 4'd0;

assign m_axi_weight_V_ARSIZE = 3'd0;

assign m_axi_weight_V_ARUSER = 1'd0;

assign m_axi_weight_V_AWADDR = 32'd0;

assign m_axi_weight_V_AWBURST = 2'd0;

assign m_axi_weight_V_AWCACHE = 4'd0;

assign m_axi_weight_V_AWID = 1'd0;

assign m_axi_weight_V_AWLEN = 32'd0;

assign m_axi_weight_V_AWLOCK = 2'd0;

assign m_axi_weight_V_AWPROT = 3'd0;

assign m_axi_weight_V_AWQOS = 4'd0;

assign m_axi_weight_V_AWREGION = 4'd0;

assign m_axi_weight_V_AWSIZE = 3'd0;

assign m_axi_weight_V_AWUSER = 1'd0;

assign m_axi_weight_V_AWVALID = 1'b0;

assign m_axi_weight_V_BREADY = 1'b0;

assign m_axi_weight_V_WDATA = 8'd0;

assign m_axi_weight_V_WID = 1'd0;

assign m_axi_weight_V_WLAST = 1'b0;

assign m_axi_weight_V_WSTRB = 1'd0;

assign m_axi_weight_V_WUSER = 1'd0;

assign m_axi_weight_V_WVALID = 1'b0;

assign result_V_fu_230_p2 = (bias_V_q0 + p_s_reg_144);

assign tmp_519_fu_198_p1 = tmp_s_fu_178_p3;

assign tmp_520_fu_202_p2 = (tmp_519_fu_198_p1 + fc_weight_V11);

assign tmp_s_fu_178_p3 = {{co_reg_133}, {9'd0}};

always @ (posedge ap_clk) begin
    co_cast2_reg_252[31:4] <= 28'b0000000000000000000000000000;
end

endmodule //fc
