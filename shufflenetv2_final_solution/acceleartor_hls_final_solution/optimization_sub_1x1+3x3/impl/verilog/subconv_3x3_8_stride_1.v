// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_8_stride_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        shuffleunit1_7_outpu_address0,
        shuffleunit1_7_outpu_ce0,
        shuffleunit1_7_outpu_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [6:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [11:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [13:0] shuffleunit1_7_outpu_address0;
output   shuffleunit1_7_outpu_ce0;
input  [7:0] shuffleunit1_7_outpu_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg shuffleunit1_7_outpu_ce0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [10:0] tmp_3_cast_fu_214_p1;
reg  signed [10:0] tmp_3_cast_reg_514;
wire    ap_CS_fsm_state2;
wire  signed [11:0] tmp_7_cast_fu_248_p1;
reg  signed [11:0] tmp_7_cast_reg_519;
wire   [10:0] tmp_s_fu_252_p2;
reg   [10:0] tmp_s_reg_524;
wire   [6:0] co_1_fu_264_p2;
reg   [6:0] co_1_reg_532;
reg   [6:0] bias_V_addr_reg_537;
wire   [0:0] exitcond1_fu_258_p2;
wire   [12:0] tmp_12_fu_299_p2;
reg   [12:0] tmp_12_reg_542;
wire    ap_CS_fsm_state3;
wire   [3:0] tmp_fu_311_p3;
reg   [3:0] tmp_reg_550;
wire   [0:0] exitcond2_fu_305_p2;
reg   [11:0] output_V_addr_reg_555;
wire    ap_CS_fsm_state4;
wire   [3:0] tmp_2_fu_339_p3;
reg   [3:0] tmp_2_reg_563;
wire   [0:0] exitcond3_fu_333_p2;
wire   [2:0] h_1_fu_347_p2;
wire   [10:0] tmp_16_fu_368_p2;
reg   [10:0] tmp_16_reg_573;
wire    ap_CS_fsm_state5;
wire   [1:0] m_1_fu_380_p2;
reg   [1:0] m_1_reg_581;
wire   [14:0] tmp_20_fu_434_p2;
reg   [14:0] tmp_20_reg_586;
wire   [0:0] exitcond4_fu_374_p2;
wire   [2:0] w_1_fu_440_p2;
reg   [2:0] w_1_reg_591;
wire    ap_CS_fsm_state6;
wire   [1:0] n_1_fu_466_p2;
reg   [1:0] n_1_reg_604;
wire   [0:0] exitcond_fu_460_p2;
reg  signed [7:0] weight_V_load_reg_614;
wire    ap_CS_fsm_state7;
reg  signed [7:0] shuffleunit1_7_outpu_1_reg_619;
wire  signed [7:0] grp_fu_508_p3;
wire    ap_CS_fsm_state8;
reg   [6:0] co_reg_106;
reg   [2:0] h_reg_117;
reg   [2:0] w_reg_129;
wire    ap_CS_fsm_state9;
reg   [7:0] p_s_reg_141;
reg   [1:0] m_reg_153;
reg   [7:0] p_09_1_reg_164;
reg   [1:0] n_reg_176;
wire   [31:0] co_cast7_fu_187_p1;
wire   [31:0] tmp_17_cast_fu_328_p1;
wire   [31:0] tmp_25_cast_fu_455_p1;
wire   [31:0] tmp_26_cast_fu_496_p1;
wire   [8:0] tmp_1_fu_196_p3;
wire   [9:0] p_shl4_cast_fu_204_p1;
wire   [9:0] co_cast7_cast_fu_192_p1;
wire   [9:0] tmp_3_fu_208_p2;
wire   [9:0] tmp_4_fu_218_p3;
wire   [7:0] tmp_6_fu_230_p3;
wire   [10:0] p_shl2_cast_fu_226_p1;
wire   [10:0] p_shl3_cast_fu_238_p1;
wire   [10:0] tmp_7_fu_242_p2;
wire   [11:0] h_cast6_cast_fu_270_p1;
wire   [11:0] tmp_10_fu_274_p2;
wire   [9:0] tmp_11_fu_279_p1;
wire   [12:0] p_shl5_cast_fu_283_p3;
wire   [12:0] p_shl6_cast_fu_291_p3;
wire   [12:0] w_cast5_cast_fu_319_p1;
wire   [12:0] tmp_13_fu_323_p2;
wire   [10:0] m_cast4_cast_fu_353_p1;
wire   [10:0] tmp_14_fu_357_p2;
wire   [10:0] tmp_15_fu_362_p2;
wire   [1:0] tmp1_fu_386_p2;
wire  signed [3:0] tmp1_cast_fu_392_p1;
wire   [3:0] tmp_5_fu_396_p2;
wire   [10:0] tmp_5_cast_cast_fu_401_p1;
wire   [10:0] tmp_17_fu_405_p2;
wire   [13:0] tmp_18_fu_410_p3;
wire   [11:0] tmp_19_fu_422_p3;
wire   [14:0] p_shl8_cast_fu_418_p1;
wire   [14:0] p_shl9_cast_fu_430_p1;
wire   [10:0] n_cast3_cast_fu_446_p1;
wire   [10:0] tmp_21_fu_450_p2;
wire   [1:0] tmp2_fu_472_p2;
wire  signed [3:0] tmp2_cast_fu_478_p1;
wire   [3:0] tmp_8_fu_482_p2;
wire   [14:0] tmp_8_cast_cast_fu_487_p1;
wire   [14:0] tmp_22_fu_491_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

ShuffleNetV2_mac_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mac_cud_x_U1304(
    .din0(weight_V_load_reg_614),
    .din1(shuffleunit1_7_outpu_1_reg_619),
    .din2(p_09_1_reg_164),
    .dout(grp_fu_508_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_305_p2 == 1'd1))) begin
        co_reg_106 <= co_1_reg_532;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_106 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_258_p2 == 1'd0))) begin
        h_reg_117 <= 3'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_333_p2 == 1'd1))) begin
        h_reg_117 <= h_1_fu_347_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_460_p2))) begin
        m_reg_153 <= m_1_reg_581;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_333_p2))) begin
        m_reg_153 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_374_p2))) begin
        n_reg_176 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        n_reg_176 <= n_1_reg_604;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_374_p2))) begin
        p_09_1_reg_164 <= p_s_reg_141;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        p_09_1_reg_164 <= grp_fu_508_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_460_p2))) begin
        p_s_reg_141 <= p_09_1_reg_164;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_333_p2))) begin
        p_s_reg_141 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_305_p2))) begin
        w_reg_129 <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        w_reg_129 <= w_1_reg_591;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_258_p2 == 1'd0))) begin
        bias_V_addr_reg_537 <= co_cast7_fu_187_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_1_reg_532 <= co_1_fu_264_p2;
        tmp_3_cast_reg_514 <= tmp_3_cast_fu_214_p1;
        tmp_7_cast_reg_519[11 : 1] <= tmp_7_cast_fu_248_p1[11 : 1];
        tmp_s_reg_524[10 : 1] <= tmp_s_fu_252_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_1_reg_581 <= m_1_fu_380_p2;
        tmp_16_reg_573 <= tmp_16_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_1_reg_604 <= n_1_fu_466_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_addr_reg_555 <= tmp_17_cast_fu_328_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        shuffleunit1_7_outpu_1_reg_619 <= shuffleunit1_7_outpu_q0;
        weight_V_load_reg_614 <= weight_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_12_reg_542[12 : 1] <= tmp_12_fu_299_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_374_p2))) begin
        tmp_20_reg_586[14 : 1] <= tmp_20_fu_434_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_333_p2))) begin
        tmp_2_reg_563[3 : 1] <= tmp_2_fu_339_p3[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_305_p2))) begin
        tmp_reg_550[3 : 1] <= tmp_fu_311_p3[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond4_fu_374_p2))) begin
        w_1_reg_591 <= w_1_fu_440_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_258_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_258_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        shuffleunit1_7_outpu_ce0 = 1'b1;
    end else begin
        shuffleunit1_7_outpu_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_258_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_305_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_333_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_374_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_460_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_537;

assign co_1_fu_264_p2 = (co_reg_106 + 7'd1);

assign co_cast7_cast_fu_192_p1 = co_reg_106;

assign co_cast7_fu_187_p1 = co_reg_106;

assign exitcond1_fu_258_p2 = ((co_reg_106 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond2_fu_305_p2 = ((h_reg_117 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond3_fu_333_p2 = ((w_reg_129 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond4_fu_374_p2 = ((m_reg_153 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_460_p2 = ((n_reg_176 == 2'd3) ? 1'b1 : 1'b0);

assign h_1_fu_347_p2 = (h_reg_117 + 3'd1);

assign h_cast6_cast_fu_270_p1 = h_reg_117;

assign m_1_fu_380_p2 = (2'd1 + m_reg_153);

assign m_cast4_cast_fu_353_p1 = m_reg_153;

assign n_1_fu_466_p2 = (n_reg_176 + 2'd1);

assign n_cast3_cast_fu_446_p1 = n_reg_176;

assign output_V_address0 = output_V_addr_reg_555;

assign output_V_d0 = (bias_V_q0 + p_s_reg_141);

assign p_shl2_cast_fu_226_p1 = tmp_4_fu_218_p3;

assign p_shl3_cast_fu_238_p1 = tmp_6_fu_230_p3;

assign p_shl4_cast_fu_204_p1 = tmp_1_fu_196_p3;

assign p_shl5_cast_fu_283_p3 = {{tmp_11_fu_279_p1}, {3'd0}};

assign p_shl6_cast_fu_291_p3 = {{tmp_10_fu_274_p2}, {1'd0}};

assign p_shl8_cast_fu_418_p1 = tmp_18_fu_410_p3;

assign p_shl9_cast_fu_430_p1 = tmp_19_fu_422_p3;

assign shuffleunit1_7_outpu_address0 = tmp_26_cast_fu_496_p1;

assign tmp1_cast_fu_392_p1 = $signed(tmp1_fu_386_p2);

assign tmp1_fu_386_p2 = (m_reg_153 ^ 2'd2);

assign tmp2_cast_fu_478_p1 = $signed(tmp2_fu_472_p2);

assign tmp2_fu_472_p2 = (n_reg_176 ^ 2'd2);

assign tmp_10_fu_274_p2 = ($signed(h_cast6_cast_fu_270_p1) + $signed(tmp_7_cast_reg_519));

assign tmp_11_fu_279_p1 = tmp_10_fu_274_p2[9:0];

assign tmp_12_fu_299_p2 = (p_shl5_cast_fu_283_p3 - p_shl6_cast_fu_291_p3);

assign tmp_13_fu_323_p2 = (tmp_12_reg_542 + w_cast5_cast_fu_319_p1);

assign tmp_14_fu_357_p2 = ($signed(m_cast4_cast_fu_353_p1) + $signed(tmp_3_cast_reg_514));

assign tmp_15_fu_362_p2 = tmp_14_fu_357_p2 << 11'd2;

assign tmp_16_fu_368_p2 = (tmp_15_fu_362_p2 - tmp_14_fu_357_p2);

assign tmp_17_cast_fu_328_p1 = tmp_13_fu_323_p2;

assign tmp_17_fu_405_p2 = (tmp_5_cast_cast_fu_401_p1 + tmp_s_reg_524);

assign tmp_18_fu_410_p3 = {{tmp_17_fu_405_p2}, {3'd0}};

assign tmp_19_fu_422_p3 = {{tmp_17_fu_405_p2}, {1'd0}};

assign tmp_1_fu_196_p3 = {{co_reg_106}, {2'd0}};

assign tmp_20_fu_434_p2 = (p_shl8_cast_fu_418_p1 + p_shl9_cast_fu_430_p1);

assign tmp_21_fu_450_p2 = (tmp_16_reg_573 + n_cast3_cast_fu_446_p1);

assign tmp_22_fu_491_p2 = (tmp_20_reg_586 + tmp_8_cast_cast_fu_487_p1);

assign tmp_25_cast_fu_455_p1 = tmp_21_fu_450_p2;

assign tmp_26_cast_fu_496_p1 = tmp_22_fu_491_p2;

assign tmp_2_fu_339_p3 = {{w_reg_129}, {1'd0}};

assign tmp_3_cast_fu_214_p1 = $signed(tmp_3_fu_208_p2);

assign tmp_3_fu_208_p2 = (p_shl4_cast_fu_204_p1 - co_cast7_cast_fu_192_p1);

assign tmp_4_fu_218_p3 = {{co_reg_106}, {3'd0}};

assign tmp_5_cast_cast_fu_401_p1 = tmp_5_fu_396_p2;

assign tmp_5_fu_396_p2 = ($signed(tmp1_cast_fu_392_p1) + $signed(tmp_reg_550));

assign tmp_6_fu_230_p3 = {{co_reg_106}, {1'd0}};

assign tmp_7_cast_fu_248_p1 = $signed(tmp_7_fu_242_p2);

assign tmp_7_fu_242_p2 = (p_shl2_cast_fu_226_p1 - p_shl3_cast_fu_238_p1);

assign tmp_8_cast_cast_fu_487_p1 = tmp_8_fu_482_p2;

assign tmp_8_fu_482_p2 = ($signed(tmp_2_reg_563) + $signed(tmp2_cast_fu_478_p1));

assign tmp_fu_311_p3 = {{h_reg_117}, {1'd0}};

assign tmp_s_fu_252_p2 = (p_shl3_cast_fu_238_p1 + p_shl2_cast_fu_226_p1);

assign w_1_fu_440_p2 = (w_reg_129 + 3'd1);

assign w_cast5_cast_fu_319_p1 = w_reg_129;

assign weight_V_address0 = tmp_25_cast_fu_455_p1;

always @ (posedge ap_clk) begin
    tmp_7_cast_reg_519[0] <= 1'b0;
    tmp_s_reg_524[0] <= 1'b0;
    tmp_12_reg_542[0] <= 1'b0;
    tmp_reg_550[0] <= 1'b0;
    tmp_2_reg_563[0] <= 1'b0;
    tmp_20_reg_586[0] <= 1'b0;
end

endmodule //subconv_3x3_8_stride_1
