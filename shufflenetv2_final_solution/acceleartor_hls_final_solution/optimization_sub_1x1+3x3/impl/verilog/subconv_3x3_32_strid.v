// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_32_strid (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        conv1_output_p_V_address0,
        conv1_output_p_V_ce0,
        conv1_output_p_V_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [4:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [14:0] conv1_output_p_V_address0;
output   conv1_output_p_V_ce0;
input  [7:0] conv1_output_p_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg conv1_output_p_V_ce0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [8:0] tmp_100_cast_fu_212_p1;
reg  signed [8:0] tmp_100_cast_reg_520;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_86_fu_244_p2;
reg   [9:0] tmp_86_reg_525;
wire   [10:0] tmp_88_fu_262_p2;
reg   [10:0] tmp_88_reg_530;
wire   [4:0] co_4_fu_274_p2;
reg   [4:0] co_4_reg_538;
reg   [4:0] bias_V_addr_reg_543;
wire   [0:0] exitcond4_fu_268_p2;
wire   [13:0] tmp_90_fu_309_p2;
reg   [13:0] tmp_90_reg_548;
wire    ap_CS_fsm_state3;
wire   [5:0] tmp_fu_321_p3;
reg   [5:0] tmp_reg_556;
wire   [0:0] exitcond5_fu_315_p2;
reg   [12:0] output_V_addr_reg_561;
wire    ap_CS_fsm_state4;
wire   [5:0] tmp_s_fu_349_p3;
reg   [5:0] tmp_s_reg_569;
wire   [0:0] exitcond6_fu_343_p2;
wire   [4:0] h_4_fu_357_p2;
wire   [8:0] tmp_93_fu_378_p2;
reg   [8:0] tmp_93_reg_579;
wire    ap_CS_fsm_state5;
wire   [1:0] m_4_fu_390_p2;
reg   [1:0] m_4_reg_587;
wire   [15:0] tmp_95_fu_440_p2;
reg   [15:0] tmp_95_reg_592;
wire   [0:0] exitcond7_fu_384_p2;
wire   [4:0] w_4_fu_446_p2;
reg   [4:0] w_4_reg_597;
wire    ap_CS_fsm_state6;
wire   [1:0] n_4_fu_472_p2;
reg   [1:0] n_4_reg_610;
wire   [0:0] exitcond_fu_466_p2;
reg  signed [7:0] weight_V_load_reg_620;
wire    ap_CS_fsm_state7;
reg  signed [7:0] conv1_output_p_V_loa_reg_625;
wire  signed [7:0] grp_fu_514_p3;
wire    ap_CS_fsm_state8;
reg   [4:0] co_reg_104;
reg   [4:0] h_reg_115;
reg   [4:0] w_reg_127;
wire    ap_CS_fsm_state9;
reg   [7:0] p_s_reg_139;
reg   [1:0] m_reg_151;
reg   [7:0] p_09_1_reg_162;
reg   [1:0] n_reg_174;
wire   [31:0] co_cast7_fu_185_p1;
wire   [31:0] tmp_111_cast_fu_338_p1;
wire   [31:0] tmp_119_cast_fu_461_p1;
wire   [31:0] tmp_120_cast_fu_502_p1;
wire   [6:0] tmp_82_fu_194_p3;
wire   [7:0] p_shl4_cast_fu_202_p1;
wire   [7:0] co_cast7_cast_fu_190_p1;
wire   [7:0] tmp_83_fu_206_p2;
wire   [8:0] tmp_84_fu_216_p3;
wire   [5:0] tmp_85_fu_228_p3;
wire   [9:0] p_shl3_cast_fu_240_p1;
wire   [9:0] p_shl2_cast_fu_224_p1;
wire   [9:0] tmp_87_fu_250_p3;
wire   [10:0] p_shl3_cast1_fu_236_p1;
wire   [10:0] p_shl_cast_fu_258_p1;
wire   [9:0] h_cast6_cast_fu_280_p1;
wire   [9:0] tmp_89_fu_284_p2;
wire   [10:0] tmp_29_fu_297_p3;
wire   [13:0] p_shl5_cast_fu_289_p3;
wire   [13:0] p_shl6_cast_fu_305_p1;
wire   [13:0] w_cast5_cast_fu_329_p1;
wire   [13:0] tmp_91_fu_333_p2;
wire   [8:0] m_cast4_cast_fu_363_p1;
wire   [8:0] tmp_92_fu_367_p2;
wire   [8:0] tmp_30_fu_372_p2;
wire   [1:0] tmp1_fu_396_p2;
wire  signed [5:0] tmp1_cast_fu_402_p1;
wire   [5:0] tmp_8_fu_406_p2;
wire   [10:0] tmp_8_cast_cast_fu_411_p1;
wire   [10:0] tmp_94_fu_415_p2;
wire   [11:0] tmp_31_fu_428_p3;
wire   [15:0] p_shl8_cast_fu_420_p3;
wire   [15:0] p_shl9_cast_fu_436_p1;
wire   [8:0] n_cast3_cast_fu_452_p1;
wire   [8:0] tmp_96_fu_456_p2;
wire   [1:0] tmp2_fu_478_p2;
wire  signed [5:0] tmp2_cast_fu_484_p1;
wire   [5:0] tmp_3_fu_488_p2;
wire   [15:0] tmp_3_cast_cast_fu_493_p1;
wire   [15:0] tmp_97_fu_497_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

ShuffleNetV2_mac_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mac_cud_x_U168(
    .din0(weight_V_load_reg_620),
    .din1(conv1_output_p_V_loa_reg_625),
    .din2(p_09_1_reg_162),
    .dout(grp_fu_514_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond5_fu_315_p2 == 1'd1))) begin
        co_reg_104 <= co_4_reg_538;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_104 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_268_p2 == 1'd0))) begin
        h_reg_115 <= 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond6_fu_343_p2 == 1'd1))) begin
        h_reg_115 <= h_4_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_466_p2))) begin
        m_reg_151 <= m_4_reg_587;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_343_p2))) begin
        m_reg_151 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_384_p2))) begin
        n_reg_174 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        n_reg_174 <= n_4_reg_610;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_384_p2))) begin
        p_09_1_reg_162 <= p_s_reg_139;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        p_09_1_reg_162 <= grp_fu_514_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_466_p2))) begin
        p_s_reg_139 <= p_09_1_reg_162;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_343_p2))) begin
        p_s_reg_139 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond5_fu_315_p2))) begin
        w_reg_127 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        w_reg_127 <= w_4_reg_597;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_268_p2 == 1'd0))) begin
        bias_V_addr_reg_543 <= co_cast7_fu_185_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_4_reg_538 <= co_4_fu_274_p2;
        tmp_100_cast_reg_520 <= tmp_100_cast_fu_212_p1;
        tmp_86_reg_525[9 : 1] <= tmp_86_fu_244_p2[9 : 1];
        tmp_88_reg_530[10 : 1] <= tmp_88_fu_262_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        conv1_output_p_V_loa_reg_625 <= conv1_output_p_V_q0;
        weight_V_load_reg_620 <= weight_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_4_reg_587 <= m_4_fu_390_p2;
        tmp_93_reg_579 <= tmp_93_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_4_reg_610 <= n_4_fu_472_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_addr_reg_561 <= tmp_111_cast_fu_338_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_90_reg_548[13 : 1] <= tmp_90_fu_309_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_384_p2))) begin
        tmp_95_reg_592[15 : 1] <= tmp_95_fu_440_p2[15 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond5_fu_315_p2))) begin
        tmp_reg_556[5 : 1] <= tmp_fu_321_p3[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_343_p2))) begin
        tmp_s_reg_569[5 : 1] <= tmp_s_fu_349_p3[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond7_fu_384_p2))) begin
        w_4_reg_597 <= w_4_fu_446_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_268_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_268_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_p_V_ce0 = 1'b1;
    end else begin
        conv1_output_p_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_268_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond5_fu_315_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond6_fu_343_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_384_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_466_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_543;

assign co_4_fu_274_p2 = (co_reg_104 + 5'd1);

assign co_cast7_cast_fu_190_p1 = co_reg_104;

assign co_cast7_fu_185_p1 = co_reg_104;

assign conv1_output_p_V_address0 = tmp_120_cast_fu_502_p1;

assign exitcond4_fu_268_p2 = ((co_reg_104 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond5_fu_315_p2 = ((h_reg_115 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond6_fu_343_p2 = ((w_reg_127 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond7_fu_384_p2 = ((m_reg_151 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_466_p2 = ((n_reg_174 == 2'd3) ? 1'b1 : 1'b0);

assign h_4_fu_357_p2 = (h_reg_115 + 5'd1);

assign h_cast6_cast_fu_280_p1 = h_reg_115;

assign m_4_fu_390_p2 = (2'd1 + m_reg_151);

assign m_cast4_cast_fu_363_p1 = m_reg_151;

assign n_4_fu_472_p2 = (n_reg_174 + 2'd1);

assign n_cast3_cast_fu_452_p1 = n_reg_174;

assign output_V_address0 = output_V_addr_reg_561;

assign output_V_d0 = (bias_V_q0 + p_s_reg_139);

assign p_shl2_cast_fu_224_p1 = tmp_84_fu_216_p3;

assign p_shl3_cast1_fu_236_p1 = tmp_85_fu_228_p3;

assign p_shl3_cast_fu_240_p1 = tmp_85_fu_228_p3;

assign p_shl4_cast_fu_202_p1 = tmp_82_fu_194_p3;

assign p_shl5_cast_fu_289_p3 = {{tmp_89_fu_284_p2}, {4'd0}};

assign p_shl6_cast_fu_305_p1 = tmp_29_fu_297_p3;

assign p_shl8_cast_fu_420_p3 = {{tmp_94_fu_415_p2}, {5'd0}};

assign p_shl9_cast_fu_436_p1 = tmp_31_fu_428_p3;

assign p_shl_cast_fu_258_p1 = tmp_87_fu_250_p3;

assign tmp1_cast_fu_402_p1 = $signed(tmp1_fu_396_p2);

assign tmp1_fu_396_p2 = (m_reg_151 ^ 2'd2);

assign tmp2_cast_fu_484_p1 = $signed(tmp2_fu_478_p2);

assign tmp2_fu_478_p2 = (n_reg_174 ^ 2'd2);

assign tmp_100_cast_fu_212_p1 = $signed(tmp_83_fu_206_p2);

assign tmp_111_cast_fu_338_p1 = tmp_91_fu_333_p2;

assign tmp_119_cast_fu_461_p1 = tmp_96_fu_456_p2;

assign tmp_120_cast_fu_502_p1 = tmp_97_fu_497_p2;

assign tmp_29_fu_297_p3 = {{tmp_89_fu_284_p2}, {1'd0}};

assign tmp_30_fu_372_p2 = tmp_92_fu_367_p2 << 9'd2;

assign tmp_31_fu_428_p3 = {{tmp_94_fu_415_p2}, {1'd0}};

assign tmp_3_cast_cast_fu_493_p1 = tmp_3_fu_488_p2;

assign tmp_3_fu_488_p2 = ($signed(tmp_s_reg_569) + $signed(tmp2_cast_fu_484_p1));

assign tmp_82_fu_194_p3 = {{co_reg_104}, {2'd0}};

assign tmp_83_fu_206_p2 = (p_shl4_cast_fu_202_p1 - co_cast7_cast_fu_190_p1);

assign tmp_84_fu_216_p3 = {{co_reg_104}, {4'd0}};

assign tmp_85_fu_228_p3 = {{co_reg_104}, {1'd0}};

assign tmp_86_fu_244_p2 = (p_shl3_cast_fu_240_p1 + p_shl2_cast_fu_224_p1);

assign tmp_87_fu_250_p3 = {{co_reg_104}, {5'd0}};

assign tmp_88_fu_262_p2 = (p_shl3_cast1_fu_236_p1 + p_shl_cast_fu_258_p1);

assign tmp_89_fu_284_p2 = (h_cast6_cast_fu_280_p1 + tmp_86_reg_525);

assign tmp_8_cast_cast_fu_411_p1 = tmp_8_fu_406_p2;

assign tmp_8_fu_406_p2 = ($signed(tmp1_cast_fu_402_p1) + $signed(tmp_reg_556));

assign tmp_90_fu_309_p2 = (p_shl5_cast_fu_289_p3 + p_shl6_cast_fu_305_p1);

assign tmp_91_fu_333_p2 = (tmp_90_reg_548 + w_cast5_cast_fu_329_p1);

assign tmp_92_fu_367_p2 = ($signed(m_cast4_cast_fu_363_p1) + $signed(tmp_100_cast_reg_520));

assign tmp_93_fu_378_p2 = (tmp_30_fu_372_p2 - tmp_92_fu_367_p2);

assign tmp_94_fu_415_p2 = (tmp_8_cast_cast_fu_411_p1 + tmp_88_reg_530);

assign tmp_95_fu_440_p2 = (p_shl8_cast_fu_420_p3 + p_shl9_cast_fu_436_p1);

assign tmp_96_fu_456_p2 = (tmp_93_reg_579 + n_cast3_cast_fu_452_p1);

assign tmp_97_fu_497_p2 = (tmp_95_reg_592 + tmp_3_cast_cast_fu_493_p1);

assign tmp_fu_321_p3 = {{h_reg_115}, {1'd0}};

assign tmp_s_fu_349_p3 = {{w_reg_127}, {1'd0}};

assign w_4_fu_446_p2 = (w_reg_127 + 5'd1);

assign w_cast5_cast_fu_329_p1 = w_reg_127;

assign weight_V_address0 = tmp_119_cast_fu_461_p1;

always @ (posedge ap_clk) begin
    tmp_86_reg_525[0] <= 1'b0;
    tmp_88_reg_530[0] <= 1'b0;
    tmp_90_reg_548[0] <= 1'b0;
    tmp_reg_556[0] <= 1'b0;
    tmp_s_reg_569[0] <= 1'b0;
    tmp_95_reg_592[0] <= 1'b0;
end

endmodule //subconv_3x3_32_strid
