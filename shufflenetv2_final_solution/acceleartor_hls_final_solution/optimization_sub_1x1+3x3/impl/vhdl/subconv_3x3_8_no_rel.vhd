-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_8_no_rel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_48_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_48_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_48_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_1_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_2_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_3_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_4_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_5_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_6_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_7_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_8_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_8_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_9_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_9_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_10_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_10_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_11_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_11_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_12_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_12_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_13_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_13_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_13_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_14_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_14_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_14_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_15_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_15_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_15_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_16_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_16_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_16_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_17_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_17_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_17_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_18_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_18_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_18_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_19_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_19_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_19_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_20_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_20_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_20_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_21_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_21_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_21_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_22_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_22_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_22_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_23_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_23_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_23_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_24_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_24_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_24_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_25_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_25_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_25_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_26_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_26_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_26_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_27_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_27_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_27_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_28_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_28_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_28_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_29_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_29_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_29_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_30_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_30_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_30_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_31_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_31_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_31_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_32_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_32_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_32_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_33_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_33_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_33_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_34_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_34_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_34_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_35_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_35_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_35_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_36_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_36_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_36_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_37_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_37_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_37_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_38_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_38_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_38_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_39_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_39_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_39_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_40_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_40_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_40_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_41_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_41_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_41_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_42_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_42_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_42_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_43_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_43_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_43_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_44_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_44_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_44_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_45_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_45_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_45_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_46_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_46_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_46_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_47_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_47_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_47_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_8_no_rel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_46_cast_fu_871_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_46_cast_reg_1290 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_41_fu_899_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_41_reg_1295 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_2_fu_911_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal co_2_reg_1303 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias_V_addr_reg_1308 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond5_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_950_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_43_reg_1313 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal output_V_addr_reg_1321 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal h_2_fu_982_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond7_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_1003_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_46_reg_1334 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m_2_fu_1015_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_2_reg_1342 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_49_fu_1061_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_49_reg_1347 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond8_fu_1009_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal n_2_fu_1087_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_2_reg_1360 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_51_fu_1113_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_51_reg_1365 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_1081_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal weight_V_load_reg_1610 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_1169_p50 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_1615 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_1284_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal w_2_fu_1278_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal co_reg_762 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond6_fu_956_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_reg_774 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_786 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_s_reg_798 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_810 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_09_1_reg_821 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_833 : STD_LOGIC_VECTOR (1 downto 0);
    signal co_cast7_fu_844_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_cast_fu_971_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_cast_fu_1076_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_cast_fu_1118_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_853_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_fu_861_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal co_cast7_cast_fu_849_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_38_fu_865_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_39_fu_875_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_40_fu_887_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_895_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_883_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_cast6_cast_fu_917_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_42_fu_921_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_fu_926_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_23_fu_938_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_934_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl4_cast_fu_946_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_cast5_cast_fu_962_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_44_fu_966_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal m_cast4_cast_fu_988_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_45_fu_992_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_fu_997_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_fu_1021_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_cast_fu_1027_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_1031_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_47_fu_1037_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_48_fu_1049_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl7_cast_fu_1057_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl6_cast_fu_1045_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_cast3_cast_fu_1067_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_50_fu_1071_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp2_fu_1093_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_1099_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_1103_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_cast_cast_fu_1109_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component ShuffleNetV2_mux_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (7 downto 0);
        din26 : IN STD_LOGIC_VECTOR (7 downto 0);
        din27 : IN STD_LOGIC_VECTOR (7 downto 0);
        din28 : IN STD_LOGIC_VECTOR (7 downto 0);
        din29 : IN STD_LOGIC_VECTOR (7 downto 0);
        din30 : IN STD_LOGIC_VECTOR (7 downto 0);
        din31 : IN STD_LOGIC_VECTOR (7 downto 0);
        din32 : IN STD_LOGIC_VECTOR (7 downto 0);
        din33 : IN STD_LOGIC_VECTOR (7 downto 0);
        din34 : IN STD_LOGIC_VECTOR (7 downto 0);
        din35 : IN STD_LOGIC_VECTOR (7 downto 0);
        din36 : IN STD_LOGIC_VECTOR (7 downto 0);
        din37 : IN STD_LOGIC_VECTOR (7 downto 0);
        din38 : IN STD_LOGIC_VECTOR (7 downto 0);
        din39 : IN STD_LOGIC_VECTOR (7 downto 0);
        din40 : IN STD_LOGIC_VECTOR (7 downto 0);
        din41 : IN STD_LOGIC_VECTOR (7 downto 0);
        din42 : IN STD_LOGIC_VECTOR (7 downto 0);
        din43 : IN STD_LOGIC_VECTOR (7 downto 0);
        din44 : IN STD_LOGIC_VECTOR (7 downto 0);
        din45 : IN STD_LOGIC_VECTOR (7 downto 0);
        din46 : IN STD_LOGIC_VECTOR (7 downto 0);
        din47 : IN STD_LOGIC_VECTOR (7 downto 0);
        din48 : IN STD_LOGIC_VECTOR (7 downto 0);
        din49 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component ShuffleNetV2_mac_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mux_fYi_x_U611 : component ShuffleNetV2_mux_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 8,
        din29_WIDTH => 8,
        din30_WIDTH => 8,
        din31_WIDTH => 8,
        din32_WIDTH => 8,
        din33_WIDTH => 8,
        din34_WIDTH => 8,
        din35_WIDTH => 8,
        din36_WIDTH => 8,
        din37_WIDTH => 8,
        din38_WIDTH => 8,
        din39_WIDTH => 8,
        din40_WIDTH => 8,
        din41_WIDTH => 8,
        din42_WIDTH => 8,
        din43_WIDTH => 8,
        din44_WIDTH => 8,
        din45_WIDTH => 8,
        din46_WIDTH => 8,
        din47_WIDTH => 8,
        din48_WIDTH => 8,
        din49_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        din1 => buffer1_1_48_8x8_p_V_48_q0,
        din2 => buffer1_1_48_8x8_p_V_1_q0,
        din3 => buffer1_1_48_8x8_p_V_2_q0,
        din4 => buffer1_1_48_8x8_p_V_3_q0,
        din5 => buffer1_1_48_8x8_p_V_4_q0,
        din6 => buffer1_1_48_8x8_p_V_5_q0,
        din7 => buffer1_1_48_8x8_p_V_6_q0,
        din8 => buffer1_1_48_8x8_p_V_7_q0,
        din9 => buffer1_1_48_8x8_p_V_8_q0,
        din10 => buffer1_1_48_8x8_p_V_9_q0,
        din11 => buffer1_1_48_8x8_p_V_10_q0,
        din12 => buffer1_1_48_8x8_p_V_11_q0,
        din13 => buffer1_1_48_8x8_p_V_12_q0,
        din14 => buffer1_1_48_8x8_p_V_13_q0,
        din15 => buffer1_1_48_8x8_p_V_14_q0,
        din16 => buffer1_1_48_8x8_p_V_15_q0,
        din17 => buffer1_1_48_8x8_p_V_16_q0,
        din18 => buffer1_1_48_8x8_p_V_17_q0,
        din19 => buffer1_1_48_8x8_p_V_18_q0,
        din20 => buffer1_1_48_8x8_p_V_19_q0,
        din21 => buffer1_1_48_8x8_p_V_20_q0,
        din22 => buffer1_1_48_8x8_p_V_21_q0,
        din23 => buffer1_1_48_8x8_p_V_22_q0,
        din24 => buffer1_1_48_8x8_p_V_23_q0,
        din25 => buffer1_1_48_8x8_p_V_24_q0,
        din26 => buffer1_1_48_8x8_p_V_25_q0,
        din27 => buffer1_1_48_8x8_p_V_26_q0,
        din28 => buffer1_1_48_8x8_p_V_27_q0,
        din29 => buffer1_1_48_8x8_p_V_28_q0,
        din30 => buffer1_1_48_8x8_p_V_29_q0,
        din31 => buffer1_1_48_8x8_p_V_30_q0,
        din32 => buffer1_1_48_8x8_p_V_31_q0,
        din33 => buffer1_1_48_8x8_p_V_32_q0,
        din34 => buffer1_1_48_8x8_p_V_33_q0,
        din35 => buffer1_1_48_8x8_p_V_34_q0,
        din36 => buffer1_1_48_8x8_p_V_35_q0,
        din37 => buffer1_1_48_8x8_p_V_36_q0,
        din38 => buffer1_1_48_8x8_p_V_37_q0,
        din39 => buffer1_1_48_8x8_p_V_38_q0,
        din40 => buffer1_1_48_8x8_p_V_39_q0,
        din41 => buffer1_1_48_8x8_p_V_40_q0,
        din42 => buffer1_1_48_8x8_p_V_41_q0,
        din43 => buffer1_1_48_8x8_p_V_42_q0,
        din44 => buffer1_1_48_8x8_p_V_43_q0,
        din45 => buffer1_1_48_8x8_p_V_44_q0,
        din46 => buffer1_1_48_8x8_p_V_45_q0,
        din47 => buffer1_1_48_8x8_p_V_46_q0,
        din48 => buffer1_1_48_8x8_p_V_47_q0,
        din49 => co_reg_762,
        dout => tmp_fu_1169_p50);

    ShuffleNetV2_mac_cud_x_U612 : component ShuffleNetV2_mac_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => tmp_reg_1615,
        din1 => weight_V_load_reg_1610,
        din2 => p_09_1_reg_821,
        dout => grp_fu_1284_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_762_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond6_fu_956_p2))) then 
                co_reg_762 <= co_2_reg_1303;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_762 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    h_reg_774_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_905_p2 = ap_const_lv1_0))) then 
                h_reg_774 <= ap_const_lv4_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_976_p2 = ap_const_lv1_1))) then 
                h_reg_774 <= h_2_fu_982_p2;
            end if; 
        end if;
    end process;

    m_reg_810_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond7_fu_976_p2))) then 
                m_reg_810 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_1081_p2))) then 
                m_reg_810 <= m_2_reg_1342;
            end if; 
        end if;
    end process;

    n_reg_833_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond8_fu_1009_p2))) then 
                n_reg_833 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                n_reg_833 <= n_2_reg_1360;
            end if; 
        end if;
    end process;

    p_09_1_reg_821_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond8_fu_1009_p2))) then 
                p_09_1_reg_821 <= p_s_reg_798;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_09_1_reg_821 <= grp_fu_1284_p3;
            end if; 
        end if;
    end process;

    p_s_reg_798_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond7_fu_976_p2))) then 
                p_s_reg_798 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_1081_p2))) then 
                p_s_reg_798 <= p_09_1_reg_821;
            end if; 
        end if;
    end process;

    w_reg_786_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_956_p2))) then 
                w_reg_786 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                w_reg_786 <= w_2_fu_1278_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_905_p2 = ap_const_lv1_0))) then
                bias_V_addr_reg_1308 <= co_cast7_fu_844_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_2_reg_1303 <= co_2_fu_911_p2;
                    tmp_41_reg_1295(9 downto 1) <= tmp_41_fu_899_p2(9 downto 1);
                tmp_46_cast_reg_1290 <= tmp_46_cast_fu_871_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_2_reg_1342 <= m_2_fu_1015_p2;
                tmp_46_reg_1334 <= tmp_46_fu_1003_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_2_reg_1360 <= n_2_fu_1087_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_V_addr_reg_1321 <= tmp_54_cast_fu_971_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_43_reg_1313(13 downto 1) <= tmp_43_fu_950_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond8_fu_1009_p2))) then
                    tmp_49_reg_1347(7 downto 1) <= tmp_49_fu_1061_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond_fu_1081_p2))) then
                tmp_51_reg_1365 <= tmp_51_fu_1113_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_reg_1615 <= tmp_fu_1169_p50;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                weight_V_load_reg_1610 <= weight_V_q0;
            end if;
        end if;
    end process;
    tmp_41_reg_1295(0) <= '0';
    tmp_43_reg_1313(0) <= '0';
    tmp_49_reg_1347(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_905_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond7_fu_976_p2, ap_CS_fsm_state5, exitcond8_fu_1009_p2, ap_CS_fsm_state6, exitcond_fu_1081_p2, exitcond6_fu_956_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_905_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond6_fu_956_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_976_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond8_fu_1009_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_1081_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_905_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_905_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_905_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_905_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_1308;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_10_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_10_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_10_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_11_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_11_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_11_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_12_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_12_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_12_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_13_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_13_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_13_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_14_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_14_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_14_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_15_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_15_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_15_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_16_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_16_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_16_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_17_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_17_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_17_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_18_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_18_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_18_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_19_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_19_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_19_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_1_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_1_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_1_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_20_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_20_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_20_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_21_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_21_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_21_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_22_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_22_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_22_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_23_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_23_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_23_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_24_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_24_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_24_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_25_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_25_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_25_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_26_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_26_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_26_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_27_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_27_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_27_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_28_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_28_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_28_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_28_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_29_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_29_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_29_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_29_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_2_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_2_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_2_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_30_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_30_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_30_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_30_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_31_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_31_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_31_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_31_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_32_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_32_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_32_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_32_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_33_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_33_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_33_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_33_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_34_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_34_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_34_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_34_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_35_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_35_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_35_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_35_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_36_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_36_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_36_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_36_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_37_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_37_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_37_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_37_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_38_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_38_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_38_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_38_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_39_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_39_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_39_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_39_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_3_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_3_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_3_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_40_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_40_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_40_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_40_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_41_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_41_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_41_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_41_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_42_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_42_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_42_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_42_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_43_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_43_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_43_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_43_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_44_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_44_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_44_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_44_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_45_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_45_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_45_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_45_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_46_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_46_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_46_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_46_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_47_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_47_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_47_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_47_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_48_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_48_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_48_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_48_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_4_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_4_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_4_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_5_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_5_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_5_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_6_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_6_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_6_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_7_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_7_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_7_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_8_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_8_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_8_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_9_address0 <= tmp_62_cast_fu_1118_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_9_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_48_8x8_p_V_9_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_2_fu_911_p2 <= std_logic_vector(unsigned(co_reg_762) + unsigned(ap_const_lv6_1));
    co_cast7_cast_fu_849_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_762),9));
    co_cast7_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_762),32));
    exitcond5_fu_905_p2 <= "1" when (co_reg_762 = ap_const_lv6_30) else "0";
    exitcond6_fu_956_p2 <= "1" when (h_reg_774 = ap_const_lv4_9) else "0";
    exitcond7_fu_976_p2 <= "1" when (w_reg_786 = ap_const_lv4_9) else "0";
    exitcond8_fu_1009_p2 <= "1" when (m_reg_810 = ap_const_lv2_3) else "0";
    exitcond_fu_1081_p2 <= "1" when (n_reg_833 = ap_const_lv2_3) else "0";
    h_2_fu_982_p2 <= std_logic_vector(unsigned(h_reg_774) + unsigned(ap_const_lv4_1));
    h_cast6_cast_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_774),10));
    m_2_fu_1015_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(m_reg_810));
    m_cast4_cast_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_810),10));
    n_2_fu_1087_p2 <= std_logic_vector(unsigned(n_reg_833) + unsigned(ap_const_lv2_1));
    n_cast3_cast_fu_1067_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_833),10));
    output_V_address0 <= output_V_addr_reg_1321;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= std_logic_vector(unsigned(bias_V_q0) + unsigned(p_s_reg_798));

    output_V_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_fu_887_p3),10));
    p_shl2_cast_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_853_p3),9));
    p_shl3_cast_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_926_p3),14));
    p_shl4_cast_fu_946_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_938_p3),14));
    p_shl6_cast_fu_1045_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_fu_1037_p3),8));
    p_shl7_cast_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_1049_p3),8));
    p_shl_cast_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_875_p3),10));
        tmp1_cast_fu_1027_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_1021_p2),4));

    tmp1_fu_1021_p2 <= std_logic_vector(unsigned(m_reg_810) + unsigned(ap_const_lv2_3));
        tmp2_cast_fu_1099_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_1093_p2),4));

    tmp2_fu_1093_p2 <= std_logic_vector(unsigned(n_reg_833) + unsigned(ap_const_lv2_3));
    tmp_22_fu_926_p3 <= (tmp_42_fu_921_p2 & ap_const_lv3_0);
    tmp_23_fu_938_p3 <= (tmp_42_fu_921_p2 & ap_const_lv1_0);
    tmp_24_fu_997_p2 <= std_logic_vector(shift_left(unsigned(tmp_45_fu_992_p2),to_integer(unsigned('0' & ap_const_lv10_2(10-1 downto 0)))));
    tmp_2_cast_cast_fu_1109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_1103_p2),8));
    tmp_2_fu_1103_p2 <= std_logic_vector(unsigned(w_reg_786) + unsigned(tmp2_cast_fu_1099_p1));
    tmp_37_fu_853_p3 <= (co_reg_762 & ap_const_lv2_0);
    tmp_38_fu_865_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_861_p1) - unsigned(co_cast7_cast_fu_849_p1));
    tmp_39_fu_875_p3 <= (co_reg_762 & ap_const_lv3_0);
    tmp_40_fu_887_p3 <= (co_reg_762 & ap_const_lv1_0);
    tmp_41_fu_899_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_895_p1) + unsigned(p_shl_cast_fu_883_p1));
    tmp_42_fu_921_p2 <= std_logic_vector(unsigned(h_cast6_cast_fu_917_p1) + unsigned(tmp_41_reg_1295));
    tmp_43_fu_950_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_934_p1) + unsigned(p_shl4_cast_fu_946_p1));
    tmp_44_fu_966_p2 <= std_logic_vector(unsigned(tmp_43_reg_1313) + unsigned(w_cast5_cast_fu_962_p1));
    tmp_45_fu_992_p2 <= std_logic_vector(unsigned(m_cast4_cast_fu_988_p1) + unsigned(tmp_46_cast_reg_1290));
        tmp_46_cast_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_38_fu_865_p2),10));

    tmp_46_fu_1003_p2 <= std_logic_vector(unsigned(tmp_24_fu_997_p2) - unsigned(tmp_45_fu_992_p2));
    tmp_47_fu_1037_p3 <= (tmp_s_fu_1031_p2 & ap_const_lv3_0);
    tmp_48_fu_1049_p3 <= (tmp_s_fu_1031_p2 & ap_const_lv1_0);
    tmp_49_fu_1061_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_1057_p1) + unsigned(p_shl6_cast_fu_1045_p1));
    tmp_50_fu_1071_p2 <= std_logic_vector(unsigned(tmp_46_reg_1334) + unsigned(n_cast3_cast_fu_1067_p1));
    tmp_51_fu_1113_p2 <= std_logic_vector(unsigned(tmp_49_reg_1347) + unsigned(tmp_2_cast_cast_fu_1109_p1));
    tmp_54_cast_fu_971_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_fu_966_p2),32));
    tmp_61_cast_fu_1076_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_1071_p2),32));
    tmp_62_cast_fu_1118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_reg_1365),32));
    tmp_s_fu_1031_p2 <= std_logic_vector(unsigned(h_reg_774) + unsigned(tmp1_cast_fu_1027_p1));
    w_2_fu_1278_p2 <= std_logic_vector(unsigned(w_reg_786) + unsigned(ap_const_lv4_1));
    w_cast5_cast_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_786),14));
    weight_V_address0 <= tmp_61_cast_fu_1076_p1(9 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
