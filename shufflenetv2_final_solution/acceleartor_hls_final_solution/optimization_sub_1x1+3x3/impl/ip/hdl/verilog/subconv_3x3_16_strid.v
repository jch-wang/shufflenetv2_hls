// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_16_strid (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        ShuffleConvs_1_Downs_47_address0,
        ShuffleConvs_1_Downs_47_ce0,
        ShuffleConvs_1_Downs_47_q0,
        ShuffleConvs_1_Downs_46_address0,
        ShuffleConvs_1_Downs_46_ce0,
        ShuffleConvs_1_Downs_46_q0,
        ShuffleConvs_1_Downs_35_address0,
        ShuffleConvs_1_Downs_35_ce0,
        ShuffleConvs_1_Downs_35_q0,
        ShuffleConvs_1_Downs_24_address0,
        ShuffleConvs_1_Downs_24_ce0,
        ShuffleConvs_1_Downs_24_q0,
        ShuffleConvs_1_Downs_13_address0,
        ShuffleConvs_1_Downs_13_ce0,
        ShuffleConvs_1_Downs_13_q0,
        ShuffleConvs_1_Downs_4_address0,
        ShuffleConvs_1_Downs_4_ce0,
        ShuffleConvs_1_Downs_4_q0,
        ShuffleConvs_1_Downs_3_address0,
        ShuffleConvs_1_Downs_3_ce0,
        ShuffleConvs_1_Downs_3_q0,
        ShuffleConvs_1_Downs_2_address0,
        ShuffleConvs_1_Downs_2_ce0,
        ShuffleConvs_1_Downs_2_q0,
        ShuffleConvs_1_Downs_1_address0,
        ShuffleConvs_1_Downs_1_ce0,
        ShuffleConvs_1_Downs_1_q0,
        ShuffleConvs_1_Downs_address0,
        ShuffleConvs_1_Downs_ce0,
        ShuffleConvs_1_Downs_q0,
        ShuffleConvs_1_Downs_45_address0,
        ShuffleConvs_1_Downs_45_ce0,
        ShuffleConvs_1_Downs_45_q0,
        ShuffleConvs_1_Downs_44_address0,
        ShuffleConvs_1_Downs_44_ce0,
        ShuffleConvs_1_Downs_44_q0,
        ShuffleConvs_1_Downs_43_address0,
        ShuffleConvs_1_Downs_43_ce0,
        ShuffleConvs_1_Downs_43_q0,
        ShuffleConvs_1_Downs_42_address0,
        ShuffleConvs_1_Downs_42_ce0,
        ShuffleConvs_1_Downs_42_q0,
        ShuffleConvs_1_Downs_41_address0,
        ShuffleConvs_1_Downs_41_ce0,
        ShuffleConvs_1_Downs_41_q0,
        ShuffleConvs_1_Downs_40_address0,
        ShuffleConvs_1_Downs_40_ce0,
        ShuffleConvs_1_Downs_40_q0,
        ShuffleConvs_1_Downs_39_address0,
        ShuffleConvs_1_Downs_39_ce0,
        ShuffleConvs_1_Downs_39_q0,
        ShuffleConvs_1_Downs_38_address0,
        ShuffleConvs_1_Downs_38_ce0,
        ShuffleConvs_1_Downs_38_q0,
        ShuffleConvs_1_Downs_37_address0,
        ShuffleConvs_1_Downs_37_ce0,
        ShuffleConvs_1_Downs_37_q0,
        ShuffleConvs_1_Downs_36_address0,
        ShuffleConvs_1_Downs_36_ce0,
        ShuffleConvs_1_Downs_36_q0,
        ShuffleConvs_1_Downs_34_address0,
        ShuffleConvs_1_Downs_34_ce0,
        ShuffleConvs_1_Downs_34_q0,
        ShuffleConvs_1_Downs_33_address0,
        ShuffleConvs_1_Downs_33_ce0,
        ShuffleConvs_1_Downs_33_q0,
        ShuffleConvs_1_Downs_32_address0,
        ShuffleConvs_1_Downs_32_ce0,
        ShuffleConvs_1_Downs_32_q0,
        ShuffleConvs_1_Downs_31_address0,
        ShuffleConvs_1_Downs_31_ce0,
        ShuffleConvs_1_Downs_31_q0,
        ShuffleConvs_1_Downs_30_address0,
        ShuffleConvs_1_Downs_30_ce0,
        ShuffleConvs_1_Downs_30_q0,
        ShuffleConvs_1_Downs_29_address0,
        ShuffleConvs_1_Downs_29_ce0,
        ShuffleConvs_1_Downs_29_q0,
        ShuffleConvs_1_Downs_28_address0,
        ShuffleConvs_1_Downs_28_ce0,
        ShuffleConvs_1_Downs_28_q0,
        ShuffleConvs_1_Downs_27_address0,
        ShuffleConvs_1_Downs_27_ce0,
        ShuffleConvs_1_Downs_27_q0,
        ShuffleConvs_1_Downs_26_address0,
        ShuffleConvs_1_Downs_26_ce0,
        ShuffleConvs_1_Downs_26_q0,
        ShuffleConvs_1_Downs_25_address0,
        ShuffleConvs_1_Downs_25_ce0,
        ShuffleConvs_1_Downs_25_q0,
        ShuffleConvs_1_Downs_23_address0,
        ShuffleConvs_1_Downs_23_ce0,
        ShuffleConvs_1_Downs_23_q0,
        ShuffleConvs_1_Downs_22_address0,
        ShuffleConvs_1_Downs_22_ce0,
        ShuffleConvs_1_Downs_22_q0,
        ShuffleConvs_1_Downs_21_address0,
        ShuffleConvs_1_Downs_21_ce0,
        ShuffleConvs_1_Downs_21_q0,
        ShuffleConvs_1_Downs_20_address0,
        ShuffleConvs_1_Downs_20_ce0,
        ShuffleConvs_1_Downs_20_q0,
        ShuffleConvs_1_Downs_19_address0,
        ShuffleConvs_1_Downs_19_ce0,
        ShuffleConvs_1_Downs_19_q0,
        ShuffleConvs_1_Downs_18_address0,
        ShuffleConvs_1_Downs_18_ce0,
        ShuffleConvs_1_Downs_18_q0,
        ShuffleConvs_1_Downs_17_address0,
        ShuffleConvs_1_Downs_17_ce0,
        ShuffleConvs_1_Downs_17_q0,
        ShuffleConvs_1_Downs_16_address0,
        ShuffleConvs_1_Downs_16_ce0,
        ShuffleConvs_1_Downs_16_q0,
        ShuffleConvs_1_Downs_15_address0,
        ShuffleConvs_1_Downs_15_ce0,
        ShuffleConvs_1_Downs_15_q0,
        ShuffleConvs_1_Downs_14_address0,
        ShuffleConvs_1_Downs_14_ce0,
        ShuffleConvs_1_Downs_14_q0,
        ShuffleConvs_1_Downs_12_address0,
        ShuffleConvs_1_Downs_12_ce0,
        ShuffleConvs_1_Downs_12_q0,
        ShuffleConvs_1_Downs_11_address0,
        ShuffleConvs_1_Downs_11_ce0,
        ShuffleConvs_1_Downs_11_q0,
        ShuffleConvs_1_Downs_10_address0,
        ShuffleConvs_1_Downs_10_ce0,
        ShuffleConvs_1_Downs_10_q0,
        ShuffleConvs_1_Downs_9_address0,
        ShuffleConvs_1_Downs_9_ce0,
        ShuffleConvs_1_Downs_9_q0,
        ShuffleConvs_1_Downs_8_address0,
        ShuffleConvs_1_Downs_8_ce0,
        ShuffleConvs_1_Downs_8_q0,
        ShuffleConvs_1_Downs_7_address0,
        ShuffleConvs_1_Downs_7_ce0,
        ShuffleConvs_1_Downs_7_q0,
        ShuffleConvs_1_Downs_6_address0,
        ShuffleConvs_1_Downs_6_ce0,
        ShuffleConvs_1_Downs_6_q0,
        ShuffleConvs_1_Downs_5_address0,
        ShuffleConvs_1_Downs_5_ce0,
        ShuffleConvs_1_Downs_5_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [5:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [8:0] ShuffleConvs_1_Downs_47_address0;
output   ShuffleConvs_1_Downs_47_ce0;
input  [7:0] ShuffleConvs_1_Downs_47_q0;
output  [8:0] ShuffleConvs_1_Downs_46_address0;
output   ShuffleConvs_1_Downs_46_ce0;
input  [7:0] ShuffleConvs_1_Downs_46_q0;
output  [8:0] ShuffleConvs_1_Downs_35_address0;
output   ShuffleConvs_1_Downs_35_ce0;
input  [7:0] ShuffleConvs_1_Downs_35_q0;
output  [8:0] ShuffleConvs_1_Downs_24_address0;
output   ShuffleConvs_1_Downs_24_ce0;
input  [7:0] ShuffleConvs_1_Downs_24_q0;
output  [8:0] ShuffleConvs_1_Downs_13_address0;
output   ShuffleConvs_1_Downs_13_ce0;
input  [7:0] ShuffleConvs_1_Downs_13_q0;
output  [8:0] ShuffleConvs_1_Downs_4_address0;
output   ShuffleConvs_1_Downs_4_ce0;
input  [7:0] ShuffleConvs_1_Downs_4_q0;
output  [8:0] ShuffleConvs_1_Downs_3_address0;
output   ShuffleConvs_1_Downs_3_ce0;
input  [7:0] ShuffleConvs_1_Downs_3_q0;
output  [8:0] ShuffleConvs_1_Downs_2_address0;
output   ShuffleConvs_1_Downs_2_ce0;
input  [7:0] ShuffleConvs_1_Downs_2_q0;
output  [8:0] ShuffleConvs_1_Downs_1_address0;
output   ShuffleConvs_1_Downs_1_ce0;
input  [7:0] ShuffleConvs_1_Downs_1_q0;
output  [8:0] ShuffleConvs_1_Downs_address0;
output   ShuffleConvs_1_Downs_ce0;
input  [7:0] ShuffleConvs_1_Downs_q0;
output  [8:0] ShuffleConvs_1_Downs_45_address0;
output   ShuffleConvs_1_Downs_45_ce0;
input  [7:0] ShuffleConvs_1_Downs_45_q0;
output  [8:0] ShuffleConvs_1_Downs_44_address0;
output   ShuffleConvs_1_Downs_44_ce0;
input  [7:0] ShuffleConvs_1_Downs_44_q0;
output  [8:0] ShuffleConvs_1_Downs_43_address0;
output   ShuffleConvs_1_Downs_43_ce0;
input  [7:0] ShuffleConvs_1_Downs_43_q0;
output  [8:0] ShuffleConvs_1_Downs_42_address0;
output   ShuffleConvs_1_Downs_42_ce0;
input  [7:0] ShuffleConvs_1_Downs_42_q0;
output  [8:0] ShuffleConvs_1_Downs_41_address0;
output   ShuffleConvs_1_Downs_41_ce0;
input  [7:0] ShuffleConvs_1_Downs_41_q0;
output  [8:0] ShuffleConvs_1_Downs_40_address0;
output   ShuffleConvs_1_Downs_40_ce0;
input  [7:0] ShuffleConvs_1_Downs_40_q0;
output  [8:0] ShuffleConvs_1_Downs_39_address0;
output   ShuffleConvs_1_Downs_39_ce0;
input  [7:0] ShuffleConvs_1_Downs_39_q0;
output  [8:0] ShuffleConvs_1_Downs_38_address0;
output   ShuffleConvs_1_Downs_38_ce0;
input  [7:0] ShuffleConvs_1_Downs_38_q0;
output  [8:0] ShuffleConvs_1_Downs_37_address0;
output   ShuffleConvs_1_Downs_37_ce0;
input  [7:0] ShuffleConvs_1_Downs_37_q0;
output  [8:0] ShuffleConvs_1_Downs_36_address0;
output   ShuffleConvs_1_Downs_36_ce0;
input  [7:0] ShuffleConvs_1_Downs_36_q0;
output  [8:0] ShuffleConvs_1_Downs_34_address0;
output   ShuffleConvs_1_Downs_34_ce0;
input  [7:0] ShuffleConvs_1_Downs_34_q0;
output  [8:0] ShuffleConvs_1_Downs_33_address0;
output   ShuffleConvs_1_Downs_33_ce0;
input  [7:0] ShuffleConvs_1_Downs_33_q0;
output  [8:0] ShuffleConvs_1_Downs_32_address0;
output   ShuffleConvs_1_Downs_32_ce0;
input  [7:0] ShuffleConvs_1_Downs_32_q0;
output  [8:0] ShuffleConvs_1_Downs_31_address0;
output   ShuffleConvs_1_Downs_31_ce0;
input  [7:0] ShuffleConvs_1_Downs_31_q0;
output  [8:0] ShuffleConvs_1_Downs_30_address0;
output   ShuffleConvs_1_Downs_30_ce0;
input  [7:0] ShuffleConvs_1_Downs_30_q0;
output  [8:0] ShuffleConvs_1_Downs_29_address0;
output   ShuffleConvs_1_Downs_29_ce0;
input  [7:0] ShuffleConvs_1_Downs_29_q0;
output  [8:0] ShuffleConvs_1_Downs_28_address0;
output   ShuffleConvs_1_Downs_28_ce0;
input  [7:0] ShuffleConvs_1_Downs_28_q0;
output  [8:0] ShuffleConvs_1_Downs_27_address0;
output   ShuffleConvs_1_Downs_27_ce0;
input  [7:0] ShuffleConvs_1_Downs_27_q0;
output  [8:0] ShuffleConvs_1_Downs_26_address0;
output   ShuffleConvs_1_Downs_26_ce0;
input  [7:0] ShuffleConvs_1_Downs_26_q0;
output  [8:0] ShuffleConvs_1_Downs_25_address0;
output   ShuffleConvs_1_Downs_25_ce0;
input  [7:0] ShuffleConvs_1_Downs_25_q0;
output  [8:0] ShuffleConvs_1_Downs_23_address0;
output   ShuffleConvs_1_Downs_23_ce0;
input  [7:0] ShuffleConvs_1_Downs_23_q0;
output  [8:0] ShuffleConvs_1_Downs_22_address0;
output   ShuffleConvs_1_Downs_22_ce0;
input  [7:0] ShuffleConvs_1_Downs_22_q0;
output  [8:0] ShuffleConvs_1_Downs_21_address0;
output   ShuffleConvs_1_Downs_21_ce0;
input  [7:0] ShuffleConvs_1_Downs_21_q0;
output  [8:0] ShuffleConvs_1_Downs_20_address0;
output   ShuffleConvs_1_Downs_20_ce0;
input  [7:0] ShuffleConvs_1_Downs_20_q0;
output  [8:0] ShuffleConvs_1_Downs_19_address0;
output   ShuffleConvs_1_Downs_19_ce0;
input  [7:0] ShuffleConvs_1_Downs_19_q0;
output  [8:0] ShuffleConvs_1_Downs_18_address0;
output   ShuffleConvs_1_Downs_18_ce0;
input  [7:0] ShuffleConvs_1_Downs_18_q0;
output  [8:0] ShuffleConvs_1_Downs_17_address0;
output   ShuffleConvs_1_Downs_17_ce0;
input  [7:0] ShuffleConvs_1_Downs_17_q0;
output  [8:0] ShuffleConvs_1_Downs_16_address0;
output   ShuffleConvs_1_Downs_16_ce0;
input  [7:0] ShuffleConvs_1_Downs_16_q0;
output  [8:0] ShuffleConvs_1_Downs_15_address0;
output   ShuffleConvs_1_Downs_15_ce0;
input  [7:0] ShuffleConvs_1_Downs_15_q0;
output  [8:0] ShuffleConvs_1_Downs_14_address0;
output   ShuffleConvs_1_Downs_14_ce0;
input  [7:0] ShuffleConvs_1_Downs_14_q0;
output  [8:0] ShuffleConvs_1_Downs_12_address0;
output   ShuffleConvs_1_Downs_12_ce0;
input  [7:0] ShuffleConvs_1_Downs_12_q0;
output  [8:0] ShuffleConvs_1_Downs_11_address0;
output   ShuffleConvs_1_Downs_11_ce0;
input  [7:0] ShuffleConvs_1_Downs_11_q0;
output  [8:0] ShuffleConvs_1_Downs_10_address0;
output   ShuffleConvs_1_Downs_10_ce0;
input  [7:0] ShuffleConvs_1_Downs_10_q0;
output  [8:0] ShuffleConvs_1_Downs_9_address0;
output   ShuffleConvs_1_Downs_9_ce0;
input  [7:0] ShuffleConvs_1_Downs_9_q0;
output  [8:0] ShuffleConvs_1_Downs_8_address0;
output   ShuffleConvs_1_Downs_8_ce0;
input  [7:0] ShuffleConvs_1_Downs_8_q0;
output  [8:0] ShuffleConvs_1_Downs_7_address0;
output   ShuffleConvs_1_Downs_7_ce0;
input  [7:0] ShuffleConvs_1_Downs_7_q0;
output  [8:0] ShuffleConvs_1_Downs_6_address0;
output   ShuffleConvs_1_Downs_6_ce0;
input  [7:0] ShuffleConvs_1_Downs_6_q0;
output  [8:0] ShuffleConvs_1_Downs_5_address0;
output   ShuffleConvs_1_Downs_5_ce0;
input  [7:0] ShuffleConvs_1_Downs_5_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg ShuffleConvs_1_Downs_47_ce0;
reg ShuffleConvs_1_Downs_46_ce0;
reg ShuffleConvs_1_Downs_35_ce0;
reg ShuffleConvs_1_Downs_24_ce0;
reg ShuffleConvs_1_Downs_13_ce0;
reg ShuffleConvs_1_Downs_4_ce0;
reg ShuffleConvs_1_Downs_3_ce0;
reg ShuffleConvs_1_Downs_2_ce0;
reg ShuffleConvs_1_Downs_1_ce0;
reg ShuffleConvs_1_Downs_ce0;
reg ShuffleConvs_1_Downs_45_ce0;
reg ShuffleConvs_1_Downs_44_ce0;
reg ShuffleConvs_1_Downs_43_ce0;
reg ShuffleConvs_1_Downs_42_ce0;
reg ShuffleConvs_1_Downs_41_ce0;
reg ShuffleConvs_1_Downs_40_ce0;
reg ShuffleConvs_1_Downs_39_ce0;
reg ShuffleConvs_1_Downs_38_ce0;
reg ShuffleConvs_1_Downs_37_ce0;
reg ShuffleConvs_1_Downs_36_ce0;
reg ShuffleConvs_1_Downs_34_ce0;
reg ShuffleConvs_1_Downs_33_ce0;
reg ShuffleConvs_1_Downs_32_ce0;
reg ShuffleConvs_1_Downs_31_ce0;
reg ShuffleConvs_1_Downs_30_ce0;
reg ShuffleConvs_1_Downs_29_ce0;
reg ShuffleConvs_1_Downs_28_ce0;
reg ShuffleConvs_1_Downs_27_ce0;
reg ShuffleConvs_1_Downs_26_ce0;
reg ShuffleConvs_1_Downs_25_ce0;
reg ShuffleConvs_1_Downs_23_ce0;
reg ShuffleConvs_1_Downs_22_ce0;
reg ShuffleConvs_1_Downs_21_ce0;
reg ShuffleConvs_1_Downs_20_ce0;
reg ShuffleConvs_1_Downs_19_ce0;
reg ShuffleConvs_1_Downs_18_ce0;
reg ShuffleConvs_1_Downs_17_ce0;
reg ShuffleConvs_1_Downs_16_ce0;
reg ShuffleConvs_1_Downs_15_ce0;
reg ShuffleConvs_1_Downs_14_ce0;
reg ShuffleConvs_1_Downs_12_ce0;
reg ShuffleConvs_1_Downs_11_ce0;
reg ShuffleConvs_1_Downs_10_ce0;
reg ShuffleConvs_1_Downs_9_ce0;
reg ShuffleConvs_1_Downs_8_ce0;
reg ShuffleConvs_1_Downs_7_ce0;
reg ShuffleConvs_1_Downs_6_ce0;
reg ShuffleConvs_1_Downs_5_ce0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [9:0] tmp_144_cast_fu_877_p1;
reg  signed [9:0] tmp_144_cast_reg_1311;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_118_fu_905_p2;
reg   [9:0] tmp_118_reg_1316;
wire   [5:0] co_5_fu_917_p2;
reg   [5:0] co_5_reg_1324;
reg   [5:0] bias_V_addr_reg_1329;
wire   [0:0] exitcond8_fu_911_p2;
wire   [13:0] tmp_120_fu_956_p2;
reg   [13:0] tmp_120_reg_1334;
wire    ap_CS_fsm_state3;
wire   [4:0] tmp_fu_968_p3;
reg   [4:0] tmp_reg_1342;
wire   [0:0] exitcond9_fu_962_p2;
reg   [12:0] output_V_addr_reg_1347;
wire    ap_CS_fsm_state4;
wire   [4:0] tmp_s_fu_996_p3;
reg   [4:0] tmp_s_reg_1355;
wire   [0:0] exitcond1_fu_990_p2;
wire   [3:0] h_5_fu_1004_p2;
wire   [9:0] tmp_123_fu_1025_p2;
reg   [9:0] tmp_123_reg_1365;
wire    ap_CS_fsm_state5;
wire   [1:0] m_5_fu_1037_p2;
reg   [1:0] m_5_reg_1373;
wire   [9:0] tmp_126_fu_1082_p2;
reg   [9:0] tmp_126_reg_1378;
wire   [0:0] exitcond2_fu_1031_p2;
wire   [3:0] w_5_fu_1088_p2;
reg   [3:0] w_5_reg_1383;
wire    ap_CS_fsm_state6;
wire   [1:0] n_5_fu_1114_p2;
reg   [1:0] n_5_reg_1396;
wire   [0:0] exitcond_fu_1108_p2;
reg  signed [7:0] weight_V_load_reg_1641;
wire    ap_CS_fsm_state7;
wire  signed [7:0] tmp_4_fu_1196_p50;
reg  signed [7:0] tmp_4_reg_1646;
wire  signed [7:0] grp_fu_1305_p3;
wire    ap_CS_fsm_state8;
reg   [5:0] co_reg_768;
reg   [3:0] h_reg_780;
reg   [3:0] w_reg_792;
wire    ap_CS_fsm_state9;
reg   [7:0] p_s_reg_804;
reg   [1:0] m_reg_816;
reg   [7:0] p_09_1_reg_827;
reg   [1:0] n_reg_839;
wire   [31:0] co_cast7_fu_850_p1;
wire   [31:0] tmp_152_cast_fu_985_p1;
wire   [31:0] tmp_159_cast_fu_1103_p1;
wire   [31:0] tmp_160_cast_fu_1144_p1;
wire   [7:0] tmp_114_fu_859_p3;
wire   [8:0] p_shl2_cast_fu_867_p1;
wire   [8:0] co_cast7_cast_fu_855_p1;
wire   [8:0] tmp_115_fu_871_p2;
wire   [8:0] tmp_116_fu_881_p3;
wire   [6:0] tmp_117_fu_893_p3;
wire   [9:0] p_shl1_cast_fu_901_p1;
wire   [9:0] p_shl_cast_fu_889_p1;
wire   [9:0] h_cast6_cast_fu_923_p1;
wire   [9:0] tmp_119_fu_927_p2;
wire   [12:0] tmp_36_fu_932_p3;
wire   [10:0] tmp_37_fu_944_p3;
wire   [13:0] p_shl3_cast_fu_940_p1;
wire   [13:0] p_shl4_cast_fu_952_p1;
wire   [13:0] w_cast5_cast_fu_976_p1;
wire   [13:0] tmp_121_fu_980_p2;
wire   [9:0] m_cast4_cast_fu_1010_p1;
wire   [9:0] tmp_122_fu_1014_p2;
wire   [9:0] tmp_38_fu_1019_p2;
wire   [1:0] tmp1_fu_1043_p2;
wire  signed [4:0] tmp1_cast_fu_1049_p1;
wire   [4:0] tmp_6_fu_1053_p2;
wire   [8:0] tmp_124_fu_1058_p3;
wire   [5:0] tmp_125_fu_1070_p3;
wire   [9:0] p_shl7_cast_fu_1078_p1;
wire   [9:0] p_shl6_cast_fu_1066_p1;
wire   [9:0] n_cast3_cast_fu_1094_p1;
wire   [9:0] tmp_127_fu_1098_p2;
wire   [1:0] tmp2_fu_1120_p2;
wire  signed [4:0] tmp2_cast_fu_1126_p1;
wire   [4:0] tmp_8_fu_1130_p2;
wire   [9:0] tmp_8_cast_cast_fu_1135_p1;
wire   [9:0] tmp_128_fu_1139_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

ShuffleNetV2_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_fYi_x_U354(
    .din1(ShuffleConvs_1_Downs_47_q0),
    .din2(ShuffleConvs_1_Downs_46_q0),
    .din3(ShuffleConvs_1_Downs_35_q0),
    .din4(ShuffleConvs_1_Downs_24_q0),
    .din5(ShuffleConvs_1_Downs_13_q0),
    .din6(ShuffleConvs_1_Downs_4_q0),
    .din7(ShuffleConvs_1_Downs_3_q0),
    .din8(ShuffleConvs_1_Downs_2_q0),
    .din9(ShuffleConvs_1_Downs_1_q0),
    .din10(ShuffleConvs_1_Downs_q0),
    .din11(ShuffleConvs_1_Downs_45_q0),
    .din12(ShuffleConvs_1_Downs_44_q0),
    .din13(ShuffleConvs_1_Downs_43_q0),
    .din14(ShuffleConvs_1_Downs_42_q0),
    .din15(ShuffleConvs_1_Downs_41_q0),
    .din16(ShuffleConvs_1_Downs_40_q0),
    .din17(ShuffleConvs_1_Downs_39_q0),
    .din18(ShuffleConvs_1_Downs_38_q0),
    .din19(ShuffleConvs_1_Downs_37_q0),
    .din20(ShuffleConvs_1_Downs_36_q0),
    .din21(ShuffleConvs_1_Downs_34_q0),
    .din22(ShuffleConvs_1_Downs_33_q0),
    .din23(ShuffleConvs_1_Downs_32_q0),
    .din24(ShuffleConvs_1_Downs_31_q0),
    .din25(ShuffleConvs_1_Downs_30_q0),
    .din26(ShuffleConvs_1_Downs_29_q0),
    .din27(ShuffleConvs_1_Downs_28_q0),
    .din28(ShuffleConvs_1_Downs_27_q0),
    .din29(ShuffleConvs_1_Downs_26_q0),
    .din30(ShuffleConvs_1_Downs_25_q0),
    .din31(ShuffleConvs_1_Downs_23_q0),
    .din32(ShuffleConvs_1_Downs_22_q0),
    .din33(ShuffleConvs_1_Downs_21_q0),
    .din34(ShuffleConvs_1_Downs_20_q0),
    .din35(ShuffleConvs_1_Downs_19_q0),
    .din36(ShuffleConvs_1_Downs_18_q0),
    .din37(ShuffleConvs_1_Downs_17_q0),
    .din38(ShuffleConvs_1_Downs_16_q0),
    .din39(ShuffleConvs_1_Downs_15_q0),
    .din40(ShuffleConvs_1_Downs_14_q0),
    .din41(ShuffleConvs_1_Downs_12_q0),
    .din42(ShuffleConvs_1_Downs_11_q0),
    .din43(ShuffleConvs_1_Downs_10_q0),
    .din44(ShuffleConvs_1_Downs_9_q0),
    .din45(ShuffleConvs_1_Downs_8_q0),
    .din46(ShuffleConvs_1_Downs_7_q0),
    .din47(ShuffleConvs_1_Downs_6_q0),
    .din48(ShuffleConvs_1_Downs_5_q0),
    .din49(co_reg_768),
    .dout(tmp_4_fu_1196_p50)
);

ShuffleNetV2_mac_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mac_cud_x_U355(
    .din0(tmp_4_reg_1646),
    .din1(weight_V_load_reg_1641),
    .din2(p_09_1_reg_827),
    .dout(grp_fu_1305_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_962_p2 == 1'd1))) begin
        co_reg_768 <= co_5_reg_1324;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_768 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_911_p2 == 1'd0))) begin
        h_reg_780 <= 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_990_p2 == 1'd1))) begin
        h_reg_780 <= h_5_fu_1004_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_1108_p2))) begin
        m_reg_816 <= m_5_reg_1373;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_990_p2))) begin
        m_reg_816 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_1031_p2))) begin
        n_reg_839 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        n_reg_839 <= n_5_reg_1396;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_1031_p2))) begin
        p_09_1_reg_827 <= p_s_reg_804;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        p_09_1_reg_827 <= grp_fu_1305_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_1108_p2))) begin
        p_s_reg_804 <= p_09_1_reg_827;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_990_p2))) begin
        p_s_reg_804 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond9_fu_962_p2))) begin
        w_reg_792 <= 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        w_reg_792 <= w_5_reg_1383;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_911_p2 == 1'd0))) begin
        bias_V_addr_reg_1329 <= co_cast7_fu_850_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_5_reg_1324 <= co_5_fu_917_p2;
        tmp_118_reg_1316[9 : 1] <= tmp_118_fu_905_p2[9 : 1];
        tmp_144_cast_reg_1311 <= tmp_144_cast_fu_877_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_5_reg_1373 <= m_5_fu_1037_p2;
        tmp_123_reg_1365 <= tmp_123_fu_1025_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_5_reg_1396 <= n_5_fu_1114_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_addr_reg_1347 <= tmp_152_cast_fu_985_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_120_reg_1334[13 : 1] <= tmp_120_fu_956_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_1031_p2))) begin
        tmp_126_reg_1378[9 : 1] <= tmp_126_fu_1082_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_4_reg_1646 <= tmp_4_fu_1196_p50;
        weight_V_load_reg_1641 <= weight_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond9_fu_962_p2))) begin
        tmp_reg_1342[4 : 1] <= tmp_fu_968_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_990_p2))) begin
        tmp_s_reg_1355[4 : 1] <= tmp_s_fu_996_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond2_fu_1031_p2))) begin
        w_5_reg_1383 <= w_5_fu_1088_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_10_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_11_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_12_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_13_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_14_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_15_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_16_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_17_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_18_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_19_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_1_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_20_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_21_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_22_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_23_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_24_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_25_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_26_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_27_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_28_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_29_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_2_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_30_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_31_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_32_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_33_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_33_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_34_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_34_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_35_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_35_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_36_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_36_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_37_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_37_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_38_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_38_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_39_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_39_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_3_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_40_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_40_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_41_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_41_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_42_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_42_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_43_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_43_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_44_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_44_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_45_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_45_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_46_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_46_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_47_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_47_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_4_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_5_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_6_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_7_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_8_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_9_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_911_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_911_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_911_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_962_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_990_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_1031_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_1108_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ShuffleConvs_1_Downs_10_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_11_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_12_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_13_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_14_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_15_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_16_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_17_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_18_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_19_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_1_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_20_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_21_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_22_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_23_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_24_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_25_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_26_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_27_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_28_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_29_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_2_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_30_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_31_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_32_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_33_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_34_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_35_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_36_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_37_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_38_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_39_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_3_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_40_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_41_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_42_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_43_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_44_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_45_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_46_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_47_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_4_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_5_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_6_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_7_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_8_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_9_address0 = tmp_160_cast_fu_1144_p1;

assign ShuffleConvs_1_Downs_address0 = tmp_160_cast_fu_1144_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_1329;

assign co_5_fu_917_p2 = (co_reg_768 + 6'd1);

assign co_cast7_cast_fu_855_p1 = co_reg_768;

assign co_cast7_fu_850_p1 = co_reg_768;

assign exitcond1_fu_990_p2 = ((w_reg_792 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond2_fu_1031_p2 = ((m_reg_816 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond8_fu_911_p2 = ((co_reg_768 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond9_fu_962_p2 = ((h_reg_780 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_fu_1108_p2 = ((n_reg_839 == 2'd3) ? 1'b1 : 1'b0);

assign h_5_fu_1004_p2 = (h_reg_780 + 4'd1);

assign h_cast6_cast_fu_923_p1 = h_reg_780;

assign m_5_fu_1037_p2 = (2'd1 + m_reg_816);

assign m_cast4_cast_fu_1010_p1 = m_reg_816;

assign n_5_fu_1114_p2 = (n_reg_839 + 2'd1);

assign n_cast3_cast_fu_1094_p1 = n_reg_839;

assign output_V_address0 = output_V_addr_reg_1347;

assign output_V_d0 = (bias_V_q0 + p_s_reg_804);

assign p_shl1_cast_fu_901_p1 = tmp_117_fu_893_p3;

assign p_shl2_cast_fu_867_p1 = tmp_114_fu_859_p3;

assign p_shl3_cast_fu_940_p1 = tmp_36_fu_932_p3;

assign p_shl4_cast_fu_952_p1 = tmp_37_fu_944_p3;

assign p_shl6_cast_fu_1066_p1 = tmp_124_fu_1058_p3;

assign p_shl7_cast_fu_1078_p1 = tmp_125_fu_1070_p3;

assign p_shl_cast_fu_889_p1 = tmp_116_fu_881_p3;

assign tmp1_cast_fu_1049_p1 = $signed(tmp1_fu_1043_p2);

assign tmp1_fu_1043_p2 = (m_reg_816 ^ 2'd2);

assign tmp2_cast_fu_1126_p1 = $signed(tmp2_fu_1120_p2);

assign tmp2_fu_1120_p2 = (n_reg_839 ^ 2'd2);

assign tmp_114_fu_859_p3 = {{co_reg_768}, {2'd0}};

assign tmp_115_fu_871_p2 = (p_shl2_cast_fu_867_p1 - co_cast7_cast_fu_855_p1);

assign tmp_116_fu_881_p3 = {{co_reg_768}, {3'd0}};

assign tmp_117_fu_893_p3 = {{co_reg_768}, {1'd0}};

assign tmp_118_fu_905_p2 = (p_shl1_cast_fu_901_p1 + p_shl_cast_fu_889_p1);

assign tmp_119_fu_927_p2 = (h_cast6_cast_fu_923_p1 + tmp_118_reg_1316);

assign tmp_120_fu_956_p2 = (p_shl3_cast_fu_940_p1 + p_shl4_cast_fu_952_p1);

assign tmp_121_fu_980_p2 = (tmp_120_reg_1334 + w_cast5_cast_fu_976_p1);

assign tmp_122_fu_1014_p2 = ($signed(m_cast4_cast_fu_1010_p1) + $signed(tmp_144_cast_reg_1311));

assign tmp_123_fu_1025_p2 = (tmp_38_fu_1019_p2 - tmp_122_fu_1014_p2);

assign tmp_124_fu_1058_p3 = {{tmp_6_fu_1053_p2}, {4'd0}};

assign tmp_125_fu_1070_p3 = {{tmp_6_fu_1053_p2}, {1'd0}};

assign tmp_126_fu_1082_p2 = (p_shl7_cast_fu_1078_p1 + p_shl6_cast_fu_1066_p1);

assign tmp_127_fu_1098_p2 = (tmp_123_reg_1365 + n_cast3_cast_fu_1094_p1);

assign tmp_128_fu_1139_p2 = (tmp_126_reg_1378 + tmp_8_cast_cast_fu_1135_p1);

assign tmp_144_cast_fu_877_p1 = $signed(tmp_115_fu_871_p2);

assign tmp_152_cast_fu_985_p1 = tmp_121_fu_980_p2;

assign tmp_159_cast_fu_1103_p1 = tmp_127_fu_1098_p2;

assign tmp_160_cast_fu_1144_p1 = tmp_128_fu_1139_p2;

assign tmp_36_fu_932_p3 = {{tmp_119_fu_927_p2}, {3'd0}};

assign tmp_37_fu_944_p3 = {{tmp_119_fu_927_p2}, {1'd0}};

assign tmp_38_fu_1019_p2 = tmp_122_fu_1014_p2 << 10'd2;

assign tmp_6_fu_1053_p2 = ($signed(tmp_reg_1342) + $signed(tmp1_cast_fu_1049_p1));

assign tmp_8_cast_cast_fu_1135_p1 = tmp_8_fu_1130_p2;

assign tmp_8_fu_1130_p2 = ($signed(tmp_s_reg_1355) + $signed(tmp2_cast_fu_1126_p1));

assign tmp_fu_968_p3 = {{h_reg_780}, {1'd0}};

assign tmp_s_fu_996_p3 = {{w_reg_792}, {1'd0}};

assign w_5_fu_1088_p2 = (w_reg_792 + 4'd1);

assign w_cast5_cast_fu_976_p1 = w_reg_792;

assign weight_V_address0 = tmp_159_cast_fu_1103_p1;

always @ (posedge ap_clk) begin
    tmp_118_reg_1316[0] <= 1'b0;
    tmp_120_reg_1334[0] <= 1'b0;
    tmp_reg_1342[0] <= 1'b0;
    tmp_s_reg_1355[0] <= 1'b0;
    tmp_126_reg_1378[0] <= 1'b0;
end

endmodule //subconv_3x3_16_strid
