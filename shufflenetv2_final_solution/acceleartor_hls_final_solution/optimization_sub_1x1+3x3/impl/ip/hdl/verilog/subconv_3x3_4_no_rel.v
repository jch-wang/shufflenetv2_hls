// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_4_no_rel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        buffer1_1_96_4x4_p_V_96_address0,
        buffer1_1_96_4x4_p_V_96_ce0,
        buffer1_1_96_4x4_p_V_96_q0,
        buffer1_1_96_4x4_p_V_1_address0,
        buffer1_1_96_4x4_p_V_1_ce0,
        buffer1_1_96_4x4_p_V_1_q0,
        buffer1_1_96_4x4_p_V_2_address0,
        buffer1_1_96_4x4_p_V_2_ce0,
        buffer1_1_96_4x4_p_V_2_q0,
        buffer1_1_96_4x4_p_V_3_address0,
        buffer1_1_96_4x4_p_V_3_ce0,
        buffer1_1_96_4x4_p_V_3_q0,
        buffer1_1_96_4x4_p_V_4_address0,
        buffer1_1_96_4x4_p_V_4_ce0,
        buffer1_1_96_4x4_p_V_4_q0,
        buffer1_1_96_4x4_p_V_5_address0,
        buffer1_1_96_4x4_p_V_5_ce0,
        buffer1_1_96_4x4_p_V_5_q0,
        buffer1_1_96_4x4_p_V_6_address0,
        buffer1_1_96_4x4_p_V_6_ce0,
        buffer1_1_96_4x4_p_V_6_q0,
        buffer1_1_96_4x4_p_V_7_address0,
        buffer1_1_96_4x4_p_V_7_ce0,
        buffer1_1_96_4x4_p_V_7_q0,
        buffer1_1_96_4x4_p_V_8_address0,
        buffer1_1_96_4x4_p_V_8_ce0,
        buffer1_1_96_4x4_p_V_8_q0,
        buffer1_1_96_4x4_p_V_9_address0,
        buffer1_1_96_4x4_p_V_9_ce0,
        buffer1_1_96_4x4_p_V_9_q0,
        buffer1_1_96_4x4_p_V_10_address0,
        buffer1_1_96_4x4_p_V_10_ce0,
        buffer1_1_96_4x4_p_V_10_q0,
        buffer1_1_96_4x4_p_V_11_address0,
        buffer1_1_96_4x4_p_V_11_ce0,
        buffer1_1_96_4x4_p_V_11_q0,
        buffer1_1_96_4x4_p_V_12_address0,
        buffer1_1_96_4x4_p_V_12_ce0,
        buffer1_1_96_4x4_p_V_12_q0,
        buffer1_1_96_4x4_p_V_13_address0,
        buffer1_1_96_4x4_p_V_13_ce0,
        buffer1_1_96_4x4_p_V_13_q0,
        buffer1_1_96_4x4_p_V_14_address0,
        buffer1_1_96_4x4_p_V_14_ce0,
        buffer1_1_96_4x4_p_V_14_q0,
        buffer1_1_96_4x4_p_V_15_address0,
        buffer1_1_96_4x4_p_V_15_ce0,
        buffer1_1_96_4x4_p_V_15_q0,
        buffer1_1_96_4x4_p_V_16_address0,
        buffer1_1_96_4x4_p_V_16_ce0,
        buffer1_1_96_4x4_p_V_16_q0,
        buffer1_1_96_4x4_p_V_17_address0,
        buffer1_1_96_4x4_p_V_17_ce0,
        buffer1_1_96_4x4_p_V_17_q0,
        buffer1_1_96_4x4_p_V_18_address0,
        buffer1_1_96_4x4_p_V_18_ce0,
        buffer1_1_96_4x4_p_V_18_q0,
        buffer1_1_96_4x4_p_V_19_address0,
        buffer1_1_96_4x4_p_V_19_ce0,
        buffer1_1_96_4x4_p_V_19_q0,
        buffer1_1_96_4x4_p_V_20_address0,
        buffer1_1_96_4x4_p_V_20_ce0,
        buffer1_1_96_4x4_p_V_20_q0,
        buffer1_1_96_4x4_p_V_21_address0,
        buffer1_1_96_4x4_p_V_21_ce0,
        buffer1_1_96_4x4_p_V_21_q0,
        buffer1_1_96_4x4_p_V_22_address0,
        buffer1_1_96_4x4_p_V_22_ce0,
        buffer1_1_96_4x4_p_V_22_q0,
        buffer1_1_96_4x4_p_V_23_address0,
        buffer1_1_96_4x4_p_V_23_ce0,
        buffer1_1_96_4x4_p_V_23_q0,
        buffer1_1_96_4x4_p_V_24_address0,
        buffer1_1_96_4x4_p_V_24_ce0,
        buffer1_1_96_4x4_p_V_24_q0,
        buffer1_1_96_4x4_p_V_25_address0,
        buffer1_1_96_4x4_p_V_25_ce0,
        buffer1_1_96_4x4_p_V_25_q0,
        buffer1_1_96_4x4_p_V_26_address0,
        buffer1_1_96_4x4_p_V_26_ce0,
        buffer1_1_96_4x4_p_V_26_q0,
        buffer1_1_96_4x4_p_V_27_address0,
        buffer1_1_96_4x4_p_V_27_ce0,
        buffer1_1_96_4x4_p_V_27_q0,
        buffer1_1_96_4x4_p_V_28_address0,
        buffer1_1_96_4x4_p_V_28_ce0,
        buffer1_1_96_4x4_p_V_28_q0,
        buffer1_1_96_4x4_p_V_29_address0,
        buffer1_1_96_4x4_p_V_29_ce0,
        buffer1_1_96_4x4_p_V_29_q0,
        buffer1_1_96_4x4_p_V_30_address0,
        buffer1_1_96_4x4_p_V_30_ce0,
        buffer1_1_96_4x4_p_V_30_q0,
        buffer1_1_96_4x4_p_V_31_address0,
        buffer1_1_96_4x4_p_V_31_ce0,
        buffer1_1_96_4x4_p_V_31_q0,
        buffer1_1_96_4x4_p_V_32_address0,
        buffer1_1_96_4x4_p_V_32_ce0,
        buffer1_1_96_4x4_p_V_32_q0,
        buffer1_1_96_4x4_p_V_33_address0,
        buffer1_1_96_4x4_p_V_33_ce0,
        buffer1_1_96_4x4_p_V_33_q0,
        buffer1_1_96_4x4_p_V_34_address0,
        buffer1_1_96_4x4_p_V_34_ce0,
        buffer1_1_96_4x4_p_V_34_q0,
        buffer1_1_96_4x4_p_V_35_address0,
        buffer1_1_96_4x4_p_V_35_ce0,
        buffer1_1_96_4x4_p_V_35_q0,
        buffer1_1_96_4x4_p_V_36_address0,
        buffer1_1_96_4x4_p_V_36_ce0,
        buffer1_1_96_4x4_p_V_36_q0,
        buffer1_1_96_4x4_p_V_37_address0,
        buffer1_1_96_4x4_p_V_37_ce0,
        buffer1_1_96_4x4_p_V_37_q0,
        buffer1_1_96_4x4_p_V_38_address0,
        buffer1_1_96_4x4_p_V_38_ce0,
        buffer1_1_96_4x4_p_V_38_q0,
        buffer1_1_96_4x4_p_V_39_address0,
        buffer1_1_96_4x4_p_V_39_ce0,
        buffer1_1_96_4x4_p_V_39_q0,
        buffer1_1_96_4x4_p_V_40_address0,
        buffer1_1_96_4x4_p_V_40_ce0,
        buffer1_1_96_4x4_p_V_40_q0,
        buffer1_1_96_4x4_p_V_41_address0,
        buffer1_1_96_4x4_p_V_41_ce0,
        buffer1_1_96_4x4_p_V_41_q0,
        buffer1_1_96_4x4_p_V_42_address0,
        buffer1_1_96_4x4_p_V_42_ce0,
        buffer1_1_96_4x4_p_V_42_q0,
        buffer1_1_96_4x4_p_V_43_address0,
        buffer1_1_96_4x4_p_V_43_ce0,
        buffer1_1_96_4x4_p_V_43_q0,
        buffer1_1_96_4x4_p_V_44_address0,
        buffer1_1_96_4x4_p_V_44_ce0,
        buffer1_1_96_4x4_p_V_44_q0,
        buffer1_1_96_4x4_p_V_45_address0,
        buffer1_1_96_4x4_p_V_45_ce0,
        buffer1_1_96_4x4_p_V_45_q0,
        buffer1_1_96_4x4_p_V_46_address0,
        buffer1_1_96_4x4_p_V_46_ce0,
        buffer1_1_96_4x4_p_V_46_q0,
        buffer1_1_96_4x4_p_V_47_address0,
        buffer1_1_96_4x4_p_V_47_ce0,
        buffer1_1_96_4x4_p_V_47_q0,
        buffer1_1_96_4x4_p_V_48_address0,
        buffer1_1_96_4x4_p_V_48_ce0,
        buffer1_1_96_4x4_p_V_48_q0,
        buffer1_1_96_4x4_p_V_49_address0,
        buffer1_1_96_4x4_p_V_49_ce0,
        buffer1_1_96_4x4_p_V_49_q0,
        buffer1_1_96_4x4_p_V_50_address0,
        buffer1_1_96_4x4_p_V_50_ce0,
        buffer1_1_96_4x4_p_V_50_q0,
        buffer1_1_96_4x4_p_V_51_address0,
        buffer1_1_96_4x4_p_V_51_ce0,
        buffer1_1_96_4x4_p_V_51_q0,
        buffer1_1_96_4x4_p_V_52_address0,
        buffer1_1_96_4x4_p_V_52_ce0,
        buffer1_1_96_4x4_p_V_52_q0,
        buffer1_1_96_4x4_p_V_53_address0,
        buffer1_1_96_4x4_p_V_53_ce0,
        buffer1_1_96_4x4_p_V_53_q0,
        buffer1_1_96_4x4_p_V_54_address0,
        buffer1_1_96_4x4_p_V_54_ce0,
        buffer1_1_96_4x4_p_V_54_q0,
        buffer1_1_96_4x4_p_V_55_address0,
        buffer1_1_96_4x4_p_V_55_ce0,
        buffer1_1_96_4x4_p_V_55_q0,
        buffer1_1_96_4x4_p_V_56_address0,
        buffer1_1_96_4x4_p_V_56_ce0,
        buffer1_1_96_4x4_p_V_56_q0,
        buffer1_1_96_4x4_p_V_57_address0,
        buffer1_1_96_4x4_p_V_57_ce0,
        buffer1_1_96_4x4_p_V_57_q0,
        buffer1_1_96_4x4_p_V_58_address0,
        buffer1_1_96_4x4_p_V_58_ce0,
        buffer1_1_96_4x4_p_V_58_q0,
        buffer1_1_96_4x4_p_V_59_address0,
        buffer1_1_96_4x4_p_V_59_ce0,
        buffer1_1_96_4x4_p_V_59_q0,
        buffer1_1_96_4x4_p_V_60_address0,
        buffer1_1_96_4x4_p_V_60_ce0,
        buffer1_1_96_4x4_p_V_60_q0,
        buffer1_1_96_4x4_p_V_61_address0,
        buffer1_1_96_4x4_p_V_61_ce0,
        buffer1_1_96_4x4_p_V_61_q0,
        buffer1_1_96_4x4_p_V_62_address0,
        buffer1_1_96_4x4_p_V_62_ce0,
        buffer1_1_96_4x4_p_V_62_q0,
        buffer1_1_96_4x4_p_V_63_address0,
        buffer1_1_96_4x4_p_V_63_ce0,
        buffer1_1_96_4x4_p_V_63_q0,
        buffer1_1_96_4x4_p_V_64_address0,
        buffer1_1_96_4x4_p_V_64_ce0,
        buffer1_1_96_4x4_p_V_64_q0,
        buffer1_1_96_4x4_p_V_65_address0,
        buffer1_1_96_4x4_p_V_65_ce0,
        buffer1_1_96_4x4_p_V_65_q0,
        buffer1_1_96_4x4_p_V_66_address0,
        buffer1_1_96_4x4_p_V_66_ce0,
        buffer1_1_96_4x4_p_V_66_q0,
        buffer1_1_96_4x4_p_V_67_address0,
        buffer1_1_96_4x4_p_V_67_ce0,
        buffer1_1_96_4x4_p_V_67_q0,
        buffer1_1_96_4x4_p_V_68_address0,
        buffer1_1_96_4x4_p_V_68_ce0,
        buffer1_1_96_4x4_p_V_68_q0,
        buffer1_1_96_4x4_p_V_69_address0,
        buffer1_1_96_4x4_p_V_69_ce0,
        buffer1_1_96_4x4_p_V_69_q0,
        buffer1_1_96_4x4_p_V_70_address0,
        buffer1_1_96_4x4_p_V_70_ce0,
        buffer1_1_96_4x4_p_V_70_q0,
        buffer1_1_96_4x4_p_V_71_address0,
        buffer1_1_96_4x4_p_V_71_ce0,
        buffer1_1_96_4x4_p_V_71_q0,
        buffer1_1_96_4x4_p_V_72_address0,
        buffer1_1_96_4x4_p_V_72_ce0,
        buffer1_1_96_4x4_p_V_72_q0,
        buffer1_1_96_4x4_p_V_73_address0,
        buffer1_1_96_4x4_p_V_73_ce0,
        buffer1_1_96_4x4_p_V_73_q0,
        buffer1_1_96_4x4_p_V_74_address0,
        buffer1_1_96_4x4_p_V_74_ce0,
        buffer1_1_96_4x4_p_V_74_q0,
        buffer1_1_96_4x4_p_V_75_address0,
        buffer1_1_96_4x4_p_V_75_ce0,
        buffer1_1_96_4x4_p_V_75_q0,
        buffer1_1_96_4x4_p_V_76_address0,
        buffer1_1_96_4x4_p_V_76_ce0,
        buffer1_1_96_4x4_p_V_76_q0,
        buffer1_1_96_4x4_p_V_77_address0,
        buffer1_1_96_4x4_p_V_77_ce0,
        buffer1_1_96_4x4_p_V_77_q0,
        buffer1_1_96_4x4_p_V_78_address0,
        buffer1_1_96_4x4_p_V_78_ce0,
        buffer1_1_96_4x4_p_V_78_q0,
        buffer1_1_96_4x4_p_V_79_address0,
        buffer1_1_96_4x4_p_V_79_ce0,
        buffer1_1_96_4x4_p_V_79_q0,
        buffer1_1_96_4x4_p_V_80_address0,
        buffer1_1_96_4x4_p_V_80_ce0,
        buffer1_1_96_4x4_p_V_80_q0,
        buffer1_1_96_4x4_p_V_81_address0,
        buffer1_1_96_4x4_p_V_81_ce0,
        buffer1_1_96_4x4_p_V_81_q0,
        buffer1_1_96_4x4_p_V_82_address0,
        buffer1_1_96_4x4_p_V_82_ce0,
        buffer1_1_96_4x4_p_V_82_q0,
        buffer1_1_96_4x4_p_V_83_address0,
        buffer1_1_96_4x4_p_V_83_ce0,
        buffer1_1_96_4x4_p_V_83_q0,
        buffer1_1_96_4x4_p_V_84_address0,
        buffer1_1_96_4x4_p_V_84_ce0,
        buffer1_1_96_4x4_p_V_84_q0,
        buffer1_1_96_4x4_p_V_85_address0,
        buffer1_1_96_4x4_p_V_85_ce0,
        buffer1_1_96_4x4_p_V_85_q0,
        buffer1_1_96_4x4_p_V_86_address0,
        buffer1_1_96_4x4_p_V_86_ce0,
        buffer1_1_96_4x4_p_V_86_q0,
        buffer1_1_96_4x4_p_V_87_address0,
        buffer1_1_96_4x4_p_V_87_ce0,
        buffer1_1_96_4x4_p_V_87_q0,
        buffer1_1_96_4x4_p_V_88_address0,
        buffer1_1_96_4x4_p_V_88_ce0,
        buffer1_1_96_4x4_p_V_88_q0,
        buffer1_1_96_4x4_p_V_89_address0,
        buffer1_1_96_4x4_p_V_89_ce0,
        buffer1_1_96_4x4_p_V_89_q0,
        buffer1_1_96_4x4_p_V_90_address0,
        buffer1_1_96_4x4_p_V_90_ce0,
        buffer1_1_96_4x4_p_V_90_q0,
        buffer1_1_96_4x4_p_V_91_address0,
        buffer1_1_96_4x4_p_V_91_ce0,
        buffer1_1_96_4x4_p_V_91_q0,
        buffer1_1_96_4x4_p_V_92_address0,
        buffer1_1_96_4x4_p_V_92_ce0,
        buffer1_1_96_4x4_p_V_92_q0,
        buffer1_1_96_4x4_p_V_93_address0,
        buffer1_1_96_4x4_p_V_93_ce0,
        buffer1_1_96_4x4_p_V_93_q0,
        buffer1_1_96_4x4_p_V_94_address0,
        buffer1_1_96_4x4_p_V_94_ce0,
        buffer1_1_96_4x4_p_V_94_q0,
        buffer1_1_96_4x4_p_V_95_address0,
        buffer1_1_96_4x4_p_V_95_ce0,
        buffer1_1_96_4x4_p_V_95_q0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [6:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [11:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [5:0] buffer1_1_96_4x4_p_V_96_address0;
output   buffer1_1_96_4x4_p_V_96_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_96_q0;
output  [5:0] buffer1_1_96_4x4_p_V_1_address0;
output   buffer1_1_96_4x4_p_V_1_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_1_q0;
output  [5:0] buffer1_1_96_4x4_p_V_2_address0;
output   buffer1_1_96_4x4_p_V_2_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_2_q0;
output  [5:0] buffer1_1_96_4x4_p_V_3_address0;
output   buffer1_1_96_4x4_p_V_3_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_3_q0;
output  [5:0] buffer1_1_96_4x4_p_V_4_address0;
output   buffer1_1_96_4x4_p_V_4_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_4_q0;
output  [5:0] buffer1_1_96_4x4_p_V_5_address0;
output   buffer1_1_96_4x4_p_V_5_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_5_q0;
output  [5:0] buffer1_1_96_4x4_p_V_6_address0;
output   buffer1_1_96_4x4_p_V_6_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_6_q0;
output  [5:0] buffer1_1_96_4x4_p_V_7_address0;
output   buffer1_1_96_4x4_p_V_7_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_7_q0;
output  [5:0] buffer1_1_96_4x4_p_V_8_address0;
output   buffer1_1_96_4x4_p_V_8_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_8_q0;
output  [5:0] buffer1_1_96_4x4_p_V_9_address0;
output   buffer1_1_96_4x4_p_V_9_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_9_q0;
output  [5:0] buffer1_1_96_4x4_p_V_10_address0;
output   buffer1_1_96_4x4_p_V_10_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_10_q0;
output  [5:0] buffer1_1_96_4x4_p_V_11_address0;
output   buffer1_1_96_4x4_p_V_11_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_11_q0;
output  [5:0] buffer1_1_96_4x4_p_V_12_address0;
output   buffer1_1_96_4x4_p_V_12_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_12_q0;
output  [5:0] buffer1_1_96_4x4_p_V_13_address0;
output   buffer1_1_96_4x4_p_V_13_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_13_q0;
output  [5:0] buffer1_1_96_4x4_p_V_14_address0;
output   buffer1_1_96_4x4_p_V_14_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_14_q0;
output  [5:0] buffer1_1_96_4x4_p_V_15_address0;
output   buffer1_1_96_4x4_p_V_15_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_15_q0;
output  [5:0] buffer1_1_96_4x4_p_V_16_address0;
output   buffer1_1_96_4x4_p_V_16_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_16_q0;
output  [5:0] buffer1_1_96_4x4_p_V_17_address0;
output   buffer1_1_96_4x4_p_V_17_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_17_q0;
output  [5:0] buffer1_1_96_4x4_p_V_18_address0;
output   buffer1_1_96_4x4_p_V_18_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_18_q0;
output  [5:0] buffer1_1_96_4x4_p_V_19_address0;
output   buffer1_1_96_4x4_p_V_19_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_19_q0;
output  [5:0] buffer1_1_96_4x4_p_V_20_address0;
output   buffer1_1_96_4x4_p_V_20_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_20_q0;
output  [5:0] buffer1_1_96_4x4_p_V_21_address0;
output   buffer1_1_96_4x4_p_V_21_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_21_q0;
output  [5:0] buffer1_1_96_4x4_p_V_22_address0;
output   buffer1_1_96_4x4_p_V_22_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_22_q0;
output  [5:0] buffer1_1_96_4x4_p_V_23_address0;
output   buffer1_1_96_4x4_p_V_23_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_23_q0;
output  [5:0] buffer1_1_96_4x4_p_V_24_address0;
output   buffer1_1_96_4x4_p_V_24_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_24_q0;
output  [5:0] buffer1_1_96_4x4_p_V_25_address0;
output   buffer1_1_96_4x4_p_V_25_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_25_q0;
output  [5:0] buffer1_1_96_4x4_p_V_26_address0;
output   buffer1_1_96_4x4_p_V_26_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_26_q0;
output  [5:0] buffer1_1_96_4x4_p_V_27_address0;
output   buffer1_1_96_4x4_p_V_27_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_27_q0;
output  [5:0] buffer1_1_96_4x4_p_V_28_address0;
output   buffer1_1_96_4x4_p_V_28_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_28_q0;
output  [5:0] buffer1_1_96_4x4_p_V_29_address0;
output   buffer1_1_96_4x4_p_V_29_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_29_q0;
output  [5:0] buffer1_1_96_4x4_p_V_30_address0;
output   buffer1_1_96_4x4_p_V_30_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_30_q0;
output  [5:0] buffer1_1_96_4x4_p_V_31_address0;
output   buffer1_1_96_4x4_p_V_31_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_31_q0;
output  [5:0] buffer1_1_96_4x4_p_V_32_address0;
output   buffer1_1_96_4x4_p_V_32_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_32_q0;
output  [5:0] buffer1_1_96_4x4_p_V_33_address0;
output   buffer1_1_96_4x4_p_V_33_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_33_q0;
output  [5:0] buffer1_1_96_4x4_p_V_34_address0;
output   buffer1_1_96_4x4_p_V_34_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_34_q0;
output  [5:0] buffer1_1_96_4x4_p_V_35_address0;
output   buffer1_1_96_4x4_p_V_35_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_35_q0;
output  [5:0] buffer1_1_96_4x4_p_V_36_address0;
output   buffer1_1_96_4x4_p_V_36_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_36_q0;
output  [5:0] buffer1_1_96_4x4_p_V_37_address0;
output   buffer1_1_96_4x4_p_V_37_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_37_q0;
output  [5:0] buffer1_1_96_4x4_p_V_38_address0;
output   buffer1_1_96_4x4_p_V_38_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_38_q0;
output  [5:0] buffer1_1_96_4x4_p_V_39_address0;
output   buffer1_1_96_4x4_p_V_39_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_39_q0;
output  [5:0] buffer1_1_96_4x4_p_V_40_address0;
output   buffer1_1_96_4x4_p_V_40_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_40_q0;
output  [5:0] buffer1_1_96_4x4_p_V_41_address0;
output   buffer1_1_96_4x4_p_V_41_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_41_q0;
output  [5:0] buffer1_1_96_4x4_p_V_42_address0;
output   buffer1_1_96_4x4_p_V_42_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_42_q0;
output  [5:0] buffer1_1_96_4x4_p_V_43_address0;
output   buffer1_1_96_4x4_p_V_43_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_43_q0;
output  [5:0] buffer1_1_96_4x4_p_V_44_address0;
output   buffer1_1_96_4x4_p_V_44_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_44_q0;
output  [5:0] buffer1_1_96_4x4_p_V_45_address0;
output   buffer1_1_96_4x4_p_V_45_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_45_q0;
output  [5:0] buffer1_1_96_4x4_p_V_46_address0;
output   buffer1_1_96_4x4_p_V_46_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_46_q0;
output  [5:0] buffer1_1_96_4x4_p_V_47_address0;
output   buffer1_1_96_4x4_p_V_47_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_47_q0;
output  [5:0] buffer1_1_96_4x4_p_V_48_address0;
output   buffer1_1_96_4x4_p_V_48_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_48_q0;
output  [5:0] buffer1_1_96_4x4_p_V_49_address0;
output   buffer1_1_96_4x4_p_V_49_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_49_q0;
output  [5:0] buffer1_1_96_4x4_p_V_50_address0;
output   buffer1_1_96_4x4_p_V_50_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_50_q0;
output  [5:0] buffer1_1_96_4x4_p_V_51_address0;
output   buffer1_1_96_4x4_p_V_51_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_51_q0;
output  [5:0] buffer1_1_96_4x4_p_V_52_address0;
output   buffer1_1_96_4x4_p_V_52_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_52_q0;
output  [5:0] buffer1_1_96_4x4_p_V_53_address0;
output   buffer1_1_96_4x4_p_V_53_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_53_q0;
output  [5:0] buffer1_1_96_4x4_p_V_54_address0;
output   buffer1_1_96_4x4_p_V_54_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_54_q0;
output  [5:0] buffer1_1_96_4x4_p_V_55_address0;
output   buffer1_1_96_4x4_p_V_55_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_55_q0;
output  [5:0] buffer1_1_96_4x4_p_V_56_address0;
output   buffer1_1_96_4x4_p_V_56_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_56_q0;
output  [5:0] buffer1_1_96_4x4_p_V_57_address0;
output   buffer1_1_96_4x4_p_V_57_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_57_q0;
output  [5:0] buffer1_1_96_4x4_p_V_58_address0;
output   buffer1_1_96_4x4_p_V_58_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_58_q0;
output  [5:0] buffer1_1_96_4x4_p_V_59_address0;
output   buffer1_1_96_4x4_p_V_59_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_59_q0;
output  [5:0] buffer1_1_96_4x4_p_V_60_address0;
output   buffer1_1_96_4x4_p_V_60_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_60_q0;
output  [5:0] buffer1_1_96_4x4_p_V_61_address0;
output   buffer1_1_96_4x4_p_V_61_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_61_q0;
output  [5:0] buffer1_1_96_4x4_p_V_62_address0;
output   buffer1_1_96_4x4_p_V_62_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_62_q0;
output  [5:0] buffer1_1_96_4x4_p_V_63_address0;
output   buffer1_1_96_4x4_p_V_63_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_63_q0;
output  [5:0] buffer1_1_96_4x4_p_V_64_address0;
output   buffer1_1_96_4x4_p_V_64_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_64_q0;
output  [5:0] buffer1_1_96_4x4_p_V_65_address0;
output   buffer1_1_96_4x4_p_V_65_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_65_q0;
output  [5:0] buffer1_1_96_4x4_p_V_66_address0;
output   buffer1_1_96_4x4_p_V_66_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_66_q0;
output  [5:0] buffer1_1_96_4x4_p_V_67_address0;
output   buffer1_1_96_4x4_p_V_67_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_67_q0;
output  [5:0] buffer1_1_96_4x4_p_V_68_address0;
output   buffer1_1_96_4x4_p_V_68_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_68_q0;
output  [5:0] buffer1_1_96_4x4_p_V_69_address0;
output   buffer1_1_96_4x4_p_V_69_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_69_q0;
output  [5:0] buffer1_1_96_4x4_p_V_70_address0;
output   buffer1_1_96_4x4_p_V_70_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_70_q0;
output  [5:0] buffer1_1_96_4x4_p_V_71_address0;
output   buffer1_1_96_4x4_p_V_71_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_71_q0;
output  [5:0] buffer1_1_96_4x4_p_V_72_address0;
output   buffer1_1_96_4x4_p_V_72_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_72_q0;
output  [5:0] buffer1_1_96_4x4_p_V_73_address0;
output   buffer1_1_96_4x4_p_V_73_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_73_q0;
output  [5:0] buffer1_1_96_4x4_p_V_74_address0;
output   buffer1_1_96_4x4_p_V_74_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_74_q0;
output  [5:0] buffer1_1_96_4x4_p_V_75_address0;
output   buffer1_1_96_4x4_p_V_75_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_75_q0;
output  [5:0] buffer1_1_96_4x4_p_V_76_address0;
output   buffer1_1_96_4x4_p_V_76_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_76_q0;
output  [5:0] buffer1_1_96_4x4_p_V_77_address0;
output   buffer1_1_96_4x4_p_V_77_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_77_q0;
output  [5:0] buffer1_1_96_4x4_p_V_78_address0;
output   buffer1_1_96_4x4_p_V_78_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_78_q0;
output  [5:0] buffer1_1_96_4x4_p_V_79_address0;
output   buffer1_1_96_4x4_p_V_79_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_79_q0;
output  [5:0] buffer1_1_96_4x4_p_V_80_address0;
output   buffer1_1_96_4x4_p_V_80_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_80_q0;
output  [5:0] buffer1_1_96_4x4_p_V_81_address0;
output   buffer1_1_96_4x4_p_V_81_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_81_q0;
output  [5:0] buffer1_1_96_4x4_p_V_82_address0;
output   buffer1_1_96_4x4_p_V_82_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_82_q0;
output  [5:0] buffer1_1_96_4x4_p_V_83_address0;
output   buffer1_1_96_4x4_p_V_83_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_83_q0;
output  [5:0] buffer1_1_96_4x4_p_V_84_address0;
output   buffer1_1_96_4x4_p_V_84_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_84_q0;
output  [5:0] buffer1_1_96_4x4_p_V_85_address0;
output   buffer1_1_96_4x4_p_V_85_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_85_q0;
output  [5:0] buffer1_1_96_4x4_p_V_86_address0;
output   buffer1_1_96_4x4_p_V_86_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_86_q0;
output  [5:0] buffer1_1_96_4x4_p_V_87_address0;
output   buffer1_1_96_4x4_p_V_87_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_87_q0;
output  [5:0] buffer1_1_96_4x4_p_V_88_address0;
output   buffer1_1_96_4x4_p_V_88_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_88_q0;
output  [5:0] buffer1_1_96_4x4_p_V_89_address0;
output   buffer1_1_96_4x4_p_V_89_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_89_q0;
output  [5:0] buffer1_1_96_4x4_p_V_90_address0;
output   buffer1_1_96_4x4_p_V_90_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_90_q0;
output  [5:0] buffer1_1_96_4x4_p_V_91_address0;
output   buffer1_1_96_4x4_p_V_91_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_91_q0;
output  [5:0] buffer1_1_96_4x4_p_V_92_address0;
output   buffer1_1_96_4x4_p_V_92_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_92_q0;
output  [5:0] buffer1_1_96_4x4_p_V_93_address0;
output   buffer1_1_96_4x4_p_V_93_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_93_q0;
output  [5:0] buffer1_1_96_4x4_p_V_94_address0;
output   buffer1_1_96_4x4_p_V_94_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_94_q0;
output  [5:0] buffer1_1_96_4x4_p_V_95_address0;
output   buffer1_1_96_4x4_p_V_95_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_95_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg buffer1_1_96_4x4_p_V_96_ce0;
reg buffer1_1_96_4x4_p_V_1_ce0;
reg buffer1_1_96_4x4_p_V_2_ce0;
reg buffer1_1_96_4x4_p_V_3_ce0;
reg buffer1_1_96_4x4_p_V_4_ce0;
reg buffer1_1_96_4x4_p_V_5_ce0;
reg buffer1_1_96_4x4_p_V_6_ce0;
reg buffer1_1_96_4x4_p_V_7_ce0;
reg buffer1_1_96_4x4_p_V_8_ce0;
reg buffer1_1_96_4x4_p_V_9_ce0;
reg buffer1_1_96_4x4_p_V_10_ce0;
reg buffer1_1_96_4x4_p_V_11_ce0;
reg buffer1_1_96_4x4_p_V_12_ce0;
reg buffer1_1_96_4x4_p_V_13_ce0;
reg buffer1_1_96_4x4_p_V_14_ce0;
reg buffer1_1_96_4x4_p_V_15_ce0;
reg buffer1_1_96_4x4_p_V_16_ce0;
reg buffer1_1_96_4x4_p_V_17_ce0;
reg buffer1_1_96_4x4_p_V_18_ce0;
reg buffer1_1_96_4x4_p_V_19_ce0;
reg buffer1_1_96_4x4_p_V_20_ce0;
reg buffer1_1_96_4x4_p_V_21_ce0;
reg buffer1_1_96_4x4_p_V_22_ce0;
reg buffer1_1_96_4x4_p_V_23_ce0;
reg buffer1_1_96_4x4_p_V_24_ce0;
reg buffer1_1_96_4x4_p_V_25_ce0;
reg buffer1_1_96_4x4_p_V_26_ce0;
reg buffer1_1_96_4x4_p_V_27_ce0;
reg buffer1_1_96_4x4_p_V_28_ce0;
reg buffer1_1_96_4x4_p_V_29_ce0;
reg buffer1_1_96_4x4_p_V_30_ce0;
reg buffer1_1_96_4x4_p_V_31_ce0;
reg buffer1_1_96_4x4_p_V_32_ce0;
reg buffer1_1_96_4x4_p_V_33_ce0;
reg buffer1_1_96_4x4_p_V_34_ce0;
reg buffer1_1_96_4x4_p_V_35_ce0;
reg buffer1_1_96_4x4_p_V_36_ce0;
reg buffer1_1_96_4x4_p_V_37_ce0;
reg buffer1_1_96_4x4_p_V_38_ce0;
reg buffer1_1_96_4x4_p_V_39_ce0;
reg buffer1_1_96_4x4_p_V_40_ce0;
reg buffer1_1_96_4x4_p_V_41_ce0;
reg buffer1_1_96_4x4_p_V_42_ce0;
reg buffer1_1_96_4x4_p_V_43_ce0;
reg buffer1_1_96_4x4_p_V_44_ce0;
reg buffer1_1_96_4x4_p_V_45_ce0;
reg buffer1_1_96_4x4_p_V_46_ce0;
reg buffer1_1_96_4x4_p_V_47_ce0;
reg buffer1_1_96_4x4_p_V_48_ce0;
reg buffer1_1_96_4x4_p_V_49_ce0;
reg buffer1_1_96_4x4_p_V_50_ce0;
reg buffer1_1_96_4x4_p_V_51_ce0;
reg buffer1_1_96_4x4_p_V_52_ce0;
reg buffer1_1_96_4x4_p_V_53_ce0;
reg buffer1_1_96_4x4_p_V_54_ce0;
reg buffer1_1_96_4x4_p_V_55_ce0;
reg buffer1_1_96_4x4_p_V_56_ce0;
reg buffer1_1_96_4x4_p_V_57_ce0;
reg buffer1_1_96_4x4_p_V_58_ce0;
reg buffer1_1_96_4x4_p_V_59_ce0;
reg buffer1_1_96_4x4_p_V_60_ce0;
reg buffer1_1_96_4x4_p_V_61_ce0;
reg buffer1_1_96_4x4_p_V_62_ce0;
reg buffer1_1_96_4x4_p_V_63_ce0;
reg buffer1_1_96_4x4_p_V_64_ce0;
reg buffer1_1_96_4x4_p_V_65_ce0;
reg buffer1_1_96_4x4_p_V_66_ce0;
reg buffer1_1_96_4x4_p_V_67_ce0;
reg buffer1_1_96_4x4_p_V_68_ce0;
reg buffer1_1_96_4x4_p_V_69_ce0;
reg buffer1_1_96_4x4_p_V_70_ce0;
reg buffer1_1_96_4x4_p_V_71_ce0;
reg buffer1_1_96_4x4_p_V_72_ce0;
reg buffer1_1_96_4x4_p_V_73_ce0;
reg buffer1_1_96_4x4_p_V_74_ce0;
reg buffer1_1_96_4x4_p_V_75_ce0;
reg buffer1_1_96_4x4_p_V_76_ce0;
reg buffer1_1_96_4x4_p_V_77_ce0;
reg buffer1_1_96_4x4_p_V_78_ce0;
reg buffer1_1_96_4x4_p_V_79_ce0;
reg buffer1_1_96_4x4_p_V_80_ce0;
reg buffer1_1_96_4x4_p_V_81_ce0;
reg buffer1_1_96_4x4_p_V_82_ce0;
reg buffer1_1_96_4x4_p_V_83_ce0;
reg buffer1_1_96_4x4_p_V_84_ce0;
reg buffer1_1_96_4x4_p_V_85_ce0;
reg buffer1_1_96_4x4_p_V_86_ce0;
reg buffer1_1_96_4x4_p_V_87_ce0;
reg buffer1_1_96_4x4_p_V_88_ce0;
reg buffer1_1_96_4x4_p_V_89_ce0;
reg buffer1_1_96_4x4_p_V_90_ce0;
reg buffer1_1_96_4x4_p_V_91_ce0;
reg buffer1_1_96_4x4_p_V_92_ce0;
reg buffer1_1_96_4x4_p_V_93_ce0;
reg buffer1_1_96_4x4_p_V_94_ce0;
reg buffer1_1_96_4x4_p_V_95_ce0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [10:0] tmp_64_cast_fu_1543_p1;
reg  signed [10:0] tmp_64_cast_reg_2106;
wire    ap_CS_fsm_state2;
wire  signed [11:0] tmp_67_cast_fu_1577_p1;
reg  signed [11:0] tmp_67_cast_reg_2111;
wire   [6:0] co_3_fu_1587_p2;
reg   [6:0] co_3_reg_2119;
reg   [6:0] bias_V_addr_reg_2124;
wire   [0:0] exitcond9_fu_1581_p2;
wire   [12:0] tmp_58_fu_1622_p2;
reg   [12:0] tmp_58_reg_2129;
wire    ap_CS_fsm_state3;
reg   [11:0] output_V_addr_reg_2137;
wire    ap_CS_fsm_state4;
wire   [2:0] h_3_fu_1654_p2;
wire   [0:0] exitcond2_fu_1648_p2;
wire   [10:0] tmp_61_fu_1675_p2;
reg   [10:0] tmp_61_reg_2150;
wire    ap_CS_fsm_state5;
wire   [1:0] m_3_fu_1687_p2;
reg   [1:0] m_3_reg_2158;
wire   [6:0] tmp_64_fu_1733_p2;
reg   [6:0] tmp_64_reg_2163;
wire   [0:0] exitcond3_fu_1681_p2;
wire    ap_CS_fsm_state6;
wire   [1:0] n_3_fu_1759_p2;
reg   [1:0] n_3_reg_2176;
wire   [6:0] tmp_66_fu_1785_p2;
reg   [6:0] tmp_66_reg_2181;
wire   [0:0] exitcond_fu_1753_p2;
wire    ap_CS_fsm_state7;
reg  signed [7:0] weight_V_load_reg_2666;
wire  signed [7:0] tmp_fu_1889_p98;
reg  signed [7:0] tmp_reg_2671;
wire    ap_CS_fsm_state8;
wire  signed [7:0] grp_fu_2100_p3;
wire    ap_CS_fsm_state9;
wire   [2:0] w_3_fu_2094_p2;
wire    ap_CS_fsm_state10;
reg   [6:0] co_reg_1434;
wire   [0:0] exitcond1_fu_1628_p2;
reg   [2:0] h_reg_1446;
reg   [2:0] w_reg_1458;
reg   [7:0] p_s_reg_1470;
reg   [1:0] m_reg_1482;
reg   [7:0] p_09_1_reg_1493;
reg   [1:0] n_reg_1505;
wire   [31:0] co_cast7_fu_1516_p1;
wire   [31:0] tmp_72_cast_fu_1643_p1;
wire   [31:0] tmp_79_cast_fu_1748_p1;
wire  signed [31:0] tmp_80_cast_fu_1790_p1;
wire   [8:0] tmp_52_fu_1525_p3;
wire   [9:0] p_shl2_cast_fu_1533_p1;
wire   [9:0] co_cast7_cast_fu_1521_p1;
wire   [9:0] tmp_53_fu_1537_p2;
wire   [9:0] tmp_54_fu_1547_p3;
wire   [7:0] tmp_55_fu_1559_p3;
wire   [10:0] p_shl_cast_fu_1555_p1;
wire   [10:0] p_shl1_cast_fu_1567_p1;
wire   [10:0] tmp_56_fu_1571_p2;
wire   [11:0] h_cast6_cast_fu_1593_p1;
wire   [11:0] tmp_57_fu_1597_p2;
wire   [9:0] tmp_25_fu_1602_p1;
wire   [12:0] p_shl3_cast_fu_1606_p3;
wire   [12:0] p_shl4_cast_fu_1614_p3;
wire   [12:0] w_cast5_cast_fu_1634_p1;
wire   [12:0] tmp_59_fu_1638_p2;
wire   [10:0] m_cast4_cast_fu_1660_p1;
wire   [10:0] tmp_60_fu_1664_p2;
wire   [10:0] tmp_26_fu_1669_p2;
wire   [1:0] tmp1_fu_1693_p2;
wire  signed [2:0] tmp1_cast_fu_1699_p1;
wire   [2:0] tmp_s_fu_1703_p2;
wire   [5:0] tmp_62_fu_1709_p3;
wire   [3:0] tmp_63_fu_1721_p3;
wire   [6:0] p_shl6_cast_fu_1717_p1;
wire   [6:0] p_shl7_cast_fu_1729_p1;
wire   [10:0] n_cast3_cast_fu_1739_p1;
wire   [10:0] tmp_65_fu_1743_p2;
wire   [1:0] tmp2_fu_1765_p2;
wire  signed [2:0] tmp2_cast_fu_1771_p1;
wire   [2:0] tmp_5_fu_1775_p2;
wire   [6:0] tmp_5_cast_cast_fu_1781_p1;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

ShuffleNetV2_mux_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 8 ),
    .din50_WIDTH( 8 ),
    .din51_WIDTH( 8 ),
    .din52_WIDTH( 8 ),
    .din53_WIDTH( 8 ),
    .din54_WIDTH( 8 ),
    .din55_WIDTH( 8 ),
    .din56_WIDTH( 8 ),
    .din57_WIDTH( 8 ),
    .din58_WIDTH( 8 ),
    .din59_WIDTH( 8 ),
    .din60_WIDTH( 8 ),
    .din61_WIDTH( 8 ),
    .din62_WIDTH( 8 ),
    .din63_WIDTH( 8 ),
    .din64_WIDTH( 8 ),
    .din65_WIDTH( 8 ),
    .din66_WIDTH( 8 ),
    .din67_WIDTH( 8 ),
    .din68_WIDTH( 8 ),
    .din69_WIDTH( 8 ),
    .din70_WIDTH( 8 ),
    .din71_WIDTH( 8 ),
    .din72_WIDTH( 8 ),
    .din73_WIDTH( 8 ),
    .din74_WIDTH( 8 ),
    .din75_WIDTH( 8 ),
    .din76_WIDTH( 8 ),
    .din77_WIDTH( 8 ),
    .din78_WIDTH( 8 ),
    .din79_WIDTH( 8 ),
    .din80_WIDTH( 8 ),
    .din81_WIDTH( 8 ),
    .din82_WIDTH( 8 ),
    .din83_WIDTH( 8 ),
    .din84_WIDTH( 8 ),
    .din85_WIDTH( 8 ),
    .din86_WIDTH( 8 ),
    .din87_WIDTH( 8 ),
    .din88_WIDTH( 8 ),
    .din89_WIDTH( 8 ),
    .din90_WIDTH( 8 ),
    .din91_WIDTH( 8 ),
    .din92_WIDTH( 8 ),
    .din93_WIDTH( 8 ),
    .din94_WIDTH( 8 ),
    .din95_WIDTH( 8 ),
    .din96_WIDTH( 8 ),
    .din97_WIDTH( 7 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_g8j_x_U1407(
    .din1(buffer1_1_96_4x4_p_V_96_q0),
    .din2(buffer1_1_96_4x4_p_V_1_q0),
    .din3(buffer1_1_96_4x4_p_V_2_q0),
    .din4(buffer1_1_96_4x4_p_V_3_q0),
    .din5(buffer1_1_96_4x4_p_V_4_q0),
    .din6(buffer1_1_96_4x4_p_V_5_q0),
    .din7(buffer1_1_96_4x4_p_V_6_q0),
    .din8(buffer1_1_96_4x4_p_V_7_q0),
    .din9(buffer1_1_96_4x4_p_V_8_q0),
    .din10(buffer1_1_96_4x4_p_V_9_q0),
    .din11(buffer1_1_96_4x4_p_V_10_q0),
    .din12(buffer1_1_96_4x4_p_V_11_q0),
    .din13(buffer1_1_96_4x4_p_V_12_q0),
    .din14(buffer1_1_96_4x4_p_V_13_q0),
    .din15(buffer1_1_96_4x4_p_V_14_q0),
    .din16(buffer1_1_96_4x4_p_V_15_q0),
    .din17(buffer1_1_96_4x4_p_V_16_q0),
    .din18(buffer1_1_96_4x4_p_V_17_q0),
    .din19(buffer1_1_96_4x4_p_V_18_q0),
    .din20(buffer1_1_96_4x4_p_V_19_q0),
    .din21(buffer1_1_96_4x4_p_V_20_q0),
    .din22(buffer1_1_96_4x4_p_V_21_q0),
    .din23(buffer1_1_96_4x4_p_V_22_q0),
    .din24(buffer1_1_96_4x4_p_V_23_q0),
    .din25(buffer1_1_96_4x4_p_V_24_q0),
    .din26(buffer1_1_96_4x4_p_V_25_q0),
    .din27(buffer1_1_96_4x4_p_V_26_q0),
    .din28(buffer1_1_96_4x4_p_V_27_q0),
    .din29(buffer1_1_96_4x4_p_V_28_q0),
    .din30(buffer1_1_96_4x4_p_V_29_q0),
    .din31(buffer1_1_96_4x4_p_V_30_q0),
    .din32(buffer1_1_96_4x4_p_V_31_q0),
    .din33(buffer1_1_96_4x4_p_V_32_q0),
    .din34(buffer1_1_96_4x4_p_V_33_q0),
    .din35(buffer1_1_96_4x4_p_V_34_q0),
    .din36(buffer1_1_96_4x4_p_V_35_q0),
    .din37(buffer1_1_96_4x4_p_V_36_q0),
    .din38(buffer1_1_96_4x4_p_V_37_q0),
    .din39(buffer1_1_96_4x4_p_V_38_q0),
    .din40(buffer1_1_96_4x4_p_V_39_q0),
    .din41(buffer1_1_96_4x4_p_V_40_q0),
    .din42(buffer1_1_96_4x4_p_V_41_q0),
    .din43(buffer1_1_96_4x4_p_V_42_q0),
    .din44(buffer1_1_96_4x4_p_V_43_q0),
    .din45(buffer1_1_96_4x4_p_V_44_q0),
    .din46(buffer1_1_96_4x4_p_V_45_q0),
    .din47(buffer1_1_96_4x4_p_V_46_q0),
    .din48(buffer1_1_96_4x4_p_V_47_q0),
    .din49(buffer1_1_96_4x4_p_V_48_q0),
    .din50(buffer1_1_96_4x4_p_V_49_q0),
    .din51(buffer1_1_96_4x4_p_V_50_q0),
    .din52(buffer1_1_96_4x4_p_V_51_q0),
    .din53(buffer1_1_96_4x4_p_V_52_q0),
    .din54(buffer1_1_96_4x4_p_V_53_q0),
    .din55(buffer1_1_96_4x4_p_V_54_q0),
    .din56(buffer1_1_96_4x4_p_V_55_q0),
    .din57(buffer1_1_96_4x4_p_V_56_q0),
    .din58(buffer1_1_96_4x4_p_V_57_q0),
    .din59(buffer1_1_96_4x4_p_V_58_q0),
    .din60(buffer1_1_96_4x4_p_V_59_q0),
    .din61(buffer1_1_96_4x4_p_V_60_q0),
    .din62(buffer1_1_96_4x4_p_V_61_q0),
    .din63(buffer1_1_96_4x4_p_V_62_q0),
    .din64(buffer1_1_96_4x4_p_V_63_q0),
    .din65(buffer1_1_96_4x4_p_V_64_q0),
    .din66(buffer1_1_96_4x4_p_V_65_q0),
    .din67(buffer1_1_96_4x4_p_V_66_q0),
    .din68(buffer1_1_96_4x4_p_V_67_q0),
    .din69(buffer1_1_96_4x4_p_V_68_q0),
    .din70(buffer1_1_96_4x4_p_V_69_q0),
    .din71(buffer1_1_96_4x4_p_V_70_q0),
    .din72(buffer1_1_96_4x4_p_V_71_q0),
    .din73(buffer1_1_96_4x4_p_V_72_q0),
    .din74(buffer1_1_96_4x4_p_V_73_q0),
    .din75(buffer1_1_96_4x4_p_V_74_q0),
    .din76(buffer1_1_96_4x4_p_V_75_q0),
    .din77(buffer1_1_96_4x4_p_V_76_q0),
    .din78(buffer1_1_96_4x4_p_V_77_q0),
    .din79(buffer1_1_96_4x4_p_V_78_q0),
    .din80(buffer1_1_96_4x4_p_V_79_q0),
    .din81(buffer1_1_96_4x4_p_V_80_q0),
    .din82(buffer1_1_96_4x4_p_V_81_q0),
    .din83(buffer1_1_96_4x4_p_V_82_q0),
    .din84(buffer1_1_96_4x4_p_V_83_q0),
    .din85(buffer1_1_96_4x4_p_V_84_q0),
    .din86(buffer1_1_96_4x4_p_V_85_q0),
    .din87(buffer1_1_96_4x4_p_V_86_q0),
    .din88(buffer1_1_96_4x4_p_V_87_q0),
    .din89(buffer1_1_96_4x4_p_V_88_q0),
    .din90(buffer1_1_96_4x4_p_V_89_q0),
    .din91(buffer1_1_96_4x4_p_V_90_q0),
    .din92(buffer1_1_96_4x4_p_V_91_q0),
    .din93(buffer1_1_96_4x4_p_V_92_q0),
    .din94(buffer1_1_96_4x4_p_V_93_q0),
    .din95(buffer1_1_96_4x4_p_V_94_q0),
    .din96(buffer1_1_96_4x4_p_V_95_q0),
    .din97(co_reg_1434),
    .dout(tmp_fu_1889_p98)
);

ShuffleNetV2_mac_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mac_cud_x_U1408(
    .din0(tmp_reg_2671),
    .din1(weight_V_load_reg_2666),
    .din2(p_09_1_reg_1493),
    .dout(grp_fu_2100_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond1_fu_1628_p2))) begin
        co_reg_1434 <= co_3_reg_2119;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_1434 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_1581_p2 == 1'd0))) begin
        h_reg_1446 <= 3'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_1648_p2 == 1'd1))) begin
        h_reg_1446 <= h_3_fu_1654_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_1648_p2))) begin
        m_reg_1482 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_1753_p2))) begin
        m_reg_1482 <= m_3_reg_2158;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond3_fu_1681_p2))) begin
        n_reg_1505 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        n_reg_1505 <= n_3_reg_2176;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond3_fu_1681_p2))) begin
        p_09_1_reg_1493 <= p_s_reg_1470;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        p_09_1_reg_1493 <= grp_fu_2100_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_1648_p2))) begin
        p_s_reg_1470 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_1753_p2))) begin
        p_s_reg_1470 <= p_09_1_reg_1493;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond1_fu_1628_p2))) begin
        w_reg_1458 <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        w_reg_1458 <= w_3_fu_2094_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_1581_p2 == 1'd0))) begin
        bias_V_addr_reg_2124 <= co_cast7_fu_1516_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_3_reg_2119 <= co_3_fu_1587_p2;
        tmp_64_cast_reg_2106 <= tmp_64_cast_fu_1543_p1;
        tmp_67_cast_reg_2111[11 : 1] <= tmp_67_cast_fu_1577_p1[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_3_reg_2158 <= m_3_fu_1687_p2;
        tmp_61_reg_2150 <= tmp_61_fu_1675_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_3_reg_2176 <= n_3_fu_1759_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_addr_reg_2137 <= tmp_72_cast_fu_1643_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_58_reg_2129[12 : 1] <= tmp_58_fu_1622_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond3_fu_1681_p2))) begin
        tmp_64_reg_2163[6 : 1] <= tmp_64_fu_1733_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond_fu_1753_p2))) begin
        tmp_66_reg_2181 <= tmp_66_fu_1785_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_reg_2671 <= tmp_fu_1889_p98;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weight_V_load_reg_2666 <= weight_V_q0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_1581_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_1581_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_10_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_11_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_12_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_13_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_14_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_15_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_16_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_17_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_18_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_19_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_1_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_20_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_21_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_22_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_23_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_24_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_25_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_26_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_27_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_28_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_29_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_2_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_30_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_31_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_32_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_32_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_33_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_33_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_34_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_34_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_35_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_35_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_36_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_36_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_37_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_37_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_38_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_38_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_39_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_39_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_3_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_40_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_40_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_41_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_41_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_42_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_42_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_43_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_43_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_44_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_44_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_45_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_45_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_46_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_46_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_47_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_47_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_48_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_48_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_49_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_49_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_4_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_50_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_50_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_51_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_51_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_52_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_52_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_53_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_53_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_54_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_54_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_55_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_55_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_56_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_56_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_57_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_57_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_58_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_58_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_59_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_59_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_5_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_60_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_60_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_61_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_61_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_62_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_62_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_63_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_63_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_64_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_64_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_65_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_65_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_66_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_66_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_67_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_67_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_68_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_68_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_69_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_69_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_6_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_70_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_70_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_71_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_71_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_72_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_72_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_73_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_73_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_74_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_74_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_75_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_75_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_76_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_76_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_77_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_77_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_78_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_78_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_79_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_79_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_7_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_80_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_80_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_81_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_81_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_82_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_82_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_83_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_83_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_84_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_84_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_85_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_85_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_86_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_86_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_87_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_87_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_88_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_88_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_89_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_89_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_8_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_90_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_90_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_91_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_91_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_92_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_92_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_93_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_93_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_94_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_94_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_95_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_95_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_96_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_96_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_96_4x4_p_V_9_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_1581_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond1_fu_1628_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_1648_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond3_fu_1681_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_1753_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_2124;

assign buffer1_1_96_4x4_p_V_10_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_11_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_12_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_13_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_14_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_15_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_16_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_17_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_18_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_19_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_1_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_20_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_21_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_22_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_23_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_24_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_25_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_26_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_27_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_28_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_29_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_2_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_30_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_31_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_32_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_33_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_34_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_35_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_36_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_37_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_38_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_39_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_3_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_40_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_41_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_42_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_43_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_44_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_45_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_46_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_47_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_48_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_49_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_4_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_50_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_51_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_52_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_53_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_54_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_55_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_56_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_57_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_58_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_59_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_5_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_60_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_61_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_62_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_63_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_64_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_65_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_66_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_67_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_68_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_69_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_6_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_70_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_71_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_72_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_73_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_74_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_75_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_76_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_77_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_78_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_79_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_7_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_80_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_81_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_82_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_83_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_84_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_85_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_86_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_87_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_88_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_89_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_8_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_90_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_91_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_92_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_93_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_94_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_95_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_96_address0 = tmp_80_cast_fu_1790_p1;

assign buffer1_1_96_4x4_p_V_9_address0 = tmp_80_cast_fu_1790_p1;

assign co_3_fu_1587_p2 = (co_reg_1434 + 7'd1);

assign co_cast7_cast_fu_1521_p1 = co_reg_1434;

assign co_cast7_fu_1516_p1 = co_reg_1434;

assign exitcond1_fu_1628_p2 = ((h_reg_1446 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond2_fu_1648_p2 = ((w_reg_1458 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond3_fu_1681_p2 = ((m_reg_1482 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond9_fu_1581_p2 = ((co_reg_1434 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond_fu_1753_p2 = ((n_reg_1505 == 2'd3) ? 1'b1 : 1'b0);

assign h_3_fu_1654_p2 = (h_reg_1446 + 3'd1);

assign h_cast6_cast_fu_1593_p1 = h_reg_1446;

assign m_3_fu_1687_p2 = (2'd1 + m_reg_1482);

assign m_cast4_cast_fu_1660_p1 = m_reg_1482;

assign n_3_fu_1759_p2 = (n_reg_1505 + 2'd1);

assign n_cast3_cast_fu_1739_p1 = n_reg_1505;

assign output_V_address0 = output_V_addr_reg_2137;

assign output_V_d0 = (bias_V_q0 + p_s_reg_1470);

assign p_shl1_cast_fu_1567_p1 = tmp_55_fu_1559_p3;

assign p_shl2_cast_fu_1533_p1 = tmp_52_fu_1525_p3;

assign p_shl3_cast_fu_1606_p3 = {{tmp_25_fu_1602_p1}, {3'd0}};

assign p_shl4_cast_fu_1614_p3 = {{tmp_57_fu_1597_p2}, {1'd0}};

assign p_shl6_cast_fu_1717_p1 = tmp_62_fu_1709_p3;

assign p_shl7_cast_fu_1729_p1 = tmp_63_fu_1721_p3;

assign p_shl_cast_fu_1555_p1 = tmp_54_fu_1547_p3;

assign tmp1_cast_fu_1699_p1 = $signed(tmp1_fu_1693_p2);

assign tmp1_fu_1693_p2 = ($signed(m_reg_1482) + $signed(2'd3));

assign tmp2_cast_fu_1771_p1 = $signed(tmp2_fu_1765_p2);

assign tmp2_fu_1765_p2 = ($signed(n_reg_1505) + $signed(2'd3));

assign tmp_25_fu_1602_p1 = tmp_57_fu_1597_p2[9:0];

assign tmp_26_fu_1669_p2 = tmp_60_fu_1664_p2 << 11'd2;

assign tmp_52_fu_1525_p3 = {{co_reg_1434}, {2'd0}};

assign tmp_53_fu_1537_p2 = (p_shl2_cast_fu_1533_p1 - co_cast7_cast_fu_1521_p1);

assign tmp_54_fu_1547_p3 = {{co_reg_1434}, {3'd0}};

assign tmp_55_fu_1559_p3 = {{co_reg_1434}, {1'd0}};

assign tmp_56_fu_1571_p2 = (p_shl_cast_fu_1555_p1 - p_shl1_cast_fu_1567_p1);

assign tmp_57_fu_1597_p2 = ($signed(h_cast6_cast_fu_1593_p1) + $signed(tmp_67_cast_reg_2111));

assign tmp_58_fu_1622_p2 = (p_shl3_cast_fu_1606_p3 - p_shl4_cast_fu_1614_p3);

assign tmp_59_fu_1638_p2 = (tmp_58_reg_2129 + w_cast5_cast_fu_1634_p1);

assign tmp_5_cast_cast_fu_1781_p1 = tmp_5_fu_1775_p2;

assign tmp_5_fu_1775_p2 = ($signed(w_reg_1458) + $signed(tmp2_cast_fu_1771_p1));

assign tmp_60_fu_1664_p2 = ($signed(m_cast4_cast_fu_1660_p1) + $signed(tmp_64_cast_reg_2106));

assign tmp_61_fu_1675_p2 = (tmp_26_fu_1669_p2 - tmp_60_fu_1664_p2);

assign tmp_62_fu_1709_p3 = {{tmp_s_fu_1703_p2}, {3'd0}};

assign tmp_63_fu_1721_p3 = {{tmp_s_fu_1703_p2}, {1'd0}};

assign tmp_64_cast_fu_1543_p1 = $signed(tmp_53_fu_1537_p2);

assign tmp_64_fu_1733_p2 = (p_shl6_cast_fu_1717_p1 - p_shl7_cast_fu_1729_p1);

assign tmp_65_fu_1743_p2 = (tmp_61_reg_2150 + n_cast3_cast_fu_1739_p1);

assign tmp_66_fu_1785_p2 = (tmp_64_reg_2163 + tmp_5_cast_cast_fu_1781_p1);

assign tmp_67_cast_fu_1577_p1 = $signed(tmp_56_fu_1571_p2);

assign tmp_72_cast_fu_1643_p1 = tmp_59_fu_1638_p2;

assign tmp_79_cast_fu_1748_p1 = tmp_65_fu_1743_p2;

assign tmp_80_cast_fu_1790_p1 = $signed(tmp_66_reg_2181);

assign tmp_s_fu_1703_p2 = ($signed(h_reg_1446) + $signed(tmp1_cast_fu_1699_p1));

assign w_3_fu_2094_p2 = (w_reg_1458 + 3'd1);

assign w_cast5_cast_fu_1634_p1 = w_reg_1458;

assign weight_V_address0 = tmp_79_cast_fu_1748_p1;

always @ (posedge ap_clk) begin
    tmp_67_cast_reg_2111[0] <= 1'b0;
    tmp_58_reg_2129[0] <= 1'b0;
    tmp_64_reg_2163[0] <= 1'b0;
end

endmodule //subconv_3x3_4_no_rel
