-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shuffle_48_l_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_48_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_48_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_48_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_1_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_2_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_3_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_4_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_5_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_6_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_7_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_7_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_8_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_8_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_9_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_9_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_10_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_10_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_11_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_11_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_12_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_12_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_13_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_13_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_13_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_14_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_14_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_14_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_15_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_15_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_15_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_16_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_16_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_16_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_17_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_17_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_17_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_18_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_18_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_18_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_19_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_19_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_19_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_20_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_20_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_20_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_21_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_21_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_21_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_22_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_22_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_22_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_23_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_23_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_23_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_24_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_24_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_24_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_25_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_25_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_25_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_26_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_26_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_26_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_27_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_27_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_27_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_28_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_28_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_28_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_29_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_29_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_29_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_30_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_30_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_30_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_31_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_31_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_31_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_32_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_32_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_32_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_33_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_33_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_33_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_34_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_34_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_34_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_35_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_35_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_35_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_36_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_36_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_36_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_37_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_37_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_37_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_38_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_38_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_38_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_39_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_39_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_39_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_40_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_40_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_40_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_41_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_41_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_41_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_42_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_42_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_42_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_43_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_43_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_43_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_44_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_44_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_44_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_45_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_45_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_45_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_46_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_46_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_46_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_47_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buffer1_1_48_8x8_p_V_47_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_47_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of shuffle_48_l_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_507_fu_762_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_507_reg_1088 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_380_fu_790_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_380_reg_1092 : STD_LOGIC_VECTOR (10 downto 0);
    signal co_29_fu_802_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_29_reg_1100 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_45_reg_1105 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond3_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_382_fu_851_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_382_reg_1110 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_385_fu_881_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_385_reg_1115 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_29_fu_893_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal h_29_reg_1123 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_V_addr_reg_1128 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal w_39_fu_980_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_39_reg_1376 : STD_LOGIC_VECTOR (3 downto 0);
    signal co_reg_729 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond2_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_reg_740 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_fu_974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_reg_751 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_497_cast_fu_912_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_498_cast_fu_922_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_986_p50 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_766_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_379_fu_778_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_774_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_786_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal h_cast2_cast_fu_818_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_381_fu_822_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_508_fu_827_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_509_fu_839_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl4_cast_fu_835_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl5_cast_fu_847_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_383_fu_857_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_384_fu_869_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_cast_fu_865_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast_fu_877_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_cast1_cast_fu_903_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_386_fu_907_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_cast1_cast6_fu_899_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_387_fu_917_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component ShuffleNetV2_mux_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (7 downto 0);
        din26 : IN STD_LOGIC_VECTOR (7 downto 0);
        din27 : IN STD_LOGIC_VECTOR (7 downto 0);
        din28 : IN STD_LOGIC_VECTOR (7 downto 0);
        din29 : IN STD_LOGIC_VECTOR (7 downto 0);
        din30 : IN STD_LOGIC_VECTOR (7 downto 0);
        din31 : IN STD_LOGIC_VECTOR (7 downto 0);
        din32 : IN STD_LOGIC_VECTOR (7 downto 0);
        din33 : IN STD_LOGIC_VECTOR (7 downto 0);
        din34 : IN STD_LOGIC_VECTOR (7 downto 0);
        din35 : IN STD_LOGIC_VECTOR (7 downto 0);
        din36 : IN STD_LOGIC_VECTOR (7 downto 0);
        din37 : IN STD_LOGIC_VECTOR (7 downto 0);
        din38 : IN STD_LOGIC_VECTOR (7 downto 0);
        din39 : IN STD_LOGIC_VECTOR (7 downto 0);
        din40 : IN STD_LOGIC_VECTOR (7 downto 0);
        din41 : IN STD_LOGIC_VECTOR (7 downto 0);
        din42 : IN STD_LOGIC_VECTOR (7 downto 0);
        din43 : IN STD_LOGIC_VECTOR (7 downto 0);
        din44 : IN STD_LOGIC_VECTOR (7 downto 0);
        din45 : IN STD_LOGIC_VECTOR (7 downto 0);
        din46 : IN STD_LOGIC_VECTOR (7 downto 0);
        din47 : IN STD_LOGIC_VECTOR (7 downto 0);
        din48 : IN STD_LOGIC_VECTOR (7 downto 0);
        din49 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mux_fYi_x_U506 : component ShuffleNetV2_mux_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 8,
        din29_WIDTH => 8,
        din30_WIDTH => 8,
        din31_WIDTH => 8,
        din32_WIDTH => 8,
        din33_WIDTH => 8,
        din34_WIDTH => 8,
        din35_WIDTH => 8,
        din36_WIDTH => 8,
        din37_WIDTH => 8,
        din38_WIDTH => 8,
        din39_WIDTH => 8,
        din40_WIDTH => 8,
        din41_WIDTH => 8,
        din42_WIDTH => 8,
        din43_WIDTH => 8,
        din44_WIDTH => 8,
        din45_WIDTH => 8,
        din46_WIDTH => 8,
        din47_WIDTH => 8,
        din48_WIDTH => 8,
        din49_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        din1 => buffer1_1_48_8x8_p_V_48_q0,
        din2 => buffer1_1_48_8x8_p_V_1_q0,
        din3 => buffer1_1_48_8x8_p_V_2_q0,
        din4 => buffer1_1_48_8x8_p_V_3_q0,
        din5 => buffer1_1_48_8x8_p_V_4_q0,
        din6 => buffer1_1_48_8x8_p_V_5_q0,
        din7 => buffer1_1_48_8x8_p_V_6_q0,
        din8 => buffer1_1_48_8x8_p_V_7_q0,
        din9 => buffer1_1_48_8x8_p_V_8_q0,
        din10 => buffer1_1_48_8x8_p_V_9_q0,
        din11 => buffer1_1_48_8x8_p_V_10_q0,
        din12 => buffer1_1_48_8x8_p_V_11_q0,
        din13 => buffer1_1_48_8x8_p_V_12_q0,
        din14 => buffer1_1_48_8x8_p_V_13_q0,
        din15 => buffer1_1_48_8x8_p_V_14_q0,
        din16 => buffer1_1_48_8x8_p_V_15_q0,
        din17 => buffer1_1_48_8x8_p_V_16_q0,
        din18 => buffer1_1_48_8x8_p_V_17_q0,
        din19 => buffer1_1_48_8x8_p_V_18_q0,
        din20 => buffer1_1_48_8x8_p_V_19_q0,
        din21 => buffer1_1_48_8x8_p_V_20_q0,
        din22 => buffer1_1_48_8x8_p_V_21_q0,
        din23 => buffer1_1_48_8x8_p_V_22_q0,
        din24 => buffer1_1_48_8x8_p_V_23_q0,
        din25 => buffer1_1_48_8x8_p_V_24_q0,
        din26 => buffer1_1_48_8x8_p_V_25_q0,
        din27 => buffer1_1_48_8x8_p_V_26_q0,
        din28 => buffer1_1_48_8x8_p_V_27_q0,
        din29 => buffer1_1_48_8x8_p_V_28_q0,
        din30 => buffer1_1_48_8x8_p_V_29_q0,
        din31 => buffer1_1_48_8x8_p_V_30_q0,
        din32 => buffer1_1_48_8x8_p_V_31_q0,
        din33 => buffer1_1_48_8x8_p_V_32_q0,
        din34 => buffer1_1_48_8x8_p_V_33_q0,
        din35 => buffer1_1_48_8x8_p_V_34_q0,
        din36 => buffer1_1_48_8x8_p_V_35_q0,
        din37 => buffer1_1_48_8x8_p_V_36_q0,
        din38 => buffer1_1_48_8x8_p_V_37_q0,
        din39 => buffer1_1_48_8x8_p_V_38_q0,
        din40 => buffer1_1_48_8x8_p_V_39_q0,
        din41 => buffer1_1_48_8x8_p_V_40_q0,
        din42 => buffer1_1_48_8x8_p_V_41_q0,
        din43 => buffer1_1_48_8x8_p_V_42_q0,
        din44 => buffer1_1_48_8x8_p_V_43_q0,
        din45 => buffer1_1_48_8x8_p_V_44_q0,
        din46 => buffer1_1_48_8x8_p_V_45_q0,
        din47 => buffer1_1_48_8x8_p_V_46_q0,
        din48 => buffer1_1_48_8x8_p_V_47_q0,
        din49 => tmp_45_reg_1105,
        dout => tmp_fu_986_p50);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_729_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_887_p2 = ap_const_lv1_1))) then 
                co_reg_729 <= co_29_reg_1100;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_729 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    h_reg_740_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond_fu_974_p2))) then 
                h_reg_740 <= h_29_reg_1123;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_796_p2 = ap_const_lv1_0))) then 
                h_reg_740 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_reg_751_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_887_p2))) then 
                w_reg_751 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                w_reg_751 <= w_39_reg_1376;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_29_reg_1100 <= co_29_fu_802_p2;
                    tmp_380_reg_1092(10 downto 1) <= tmp_380_fu_790_p2(10 downto 1);
                tmp_507_reg_1088 <= tmp_507_fu_762_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_29_reg_1123 <= h_29_fu_893_p2;
                    tmp_382_reg_1110(14 downto 1) <= tmp_382_fu_851_p2(14 downto 1);
                    tmp_385_reg_1115(7 downto 1) <= tmp_385_fu_881_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_V_addr_reg_1128 <= tmp_497_cast_fu_912_p1(14 - 1 downto 0);
                w_39_reg_1376 <= w_39_fu_980_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_796_p2 = ap_const_lv1_0))) then
                tmp_45_reg_1105 <= co_reg_729(6 downto 1);
            end if;
        end if;
    end process;
    tmp_380_reg_1092(0) <= '0';
    tmp_382_reg_1110(0) <= '0';
    tmp_385_reg_1115(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_796_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond2_fu_887_p2, exitcond_fu_974_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_796_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_887_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond_fu_974_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_796_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_796_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_796_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_796_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_10_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_10_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_10_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_11_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_11_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_11_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_12_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_12_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_12_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_13_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_13_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_13_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_14_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_14_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_14_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_15_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_15_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_15_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_16_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_16_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_16_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_17_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_17_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_17_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_18_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_18_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_18_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_19_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_19_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_19_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_1_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_1_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_20_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_20_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_20_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_21_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_21_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_21_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_22_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_22_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_22_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_23_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_23_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_23_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_24_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_24_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_24_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_25_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_25_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_25_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_26_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_26_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_26_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_27_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_27_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_27_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_28_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_28_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_28_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_28_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_29_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_29_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_29_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_29_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_2_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_2_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_30_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_30_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_30_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_30_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_31_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_31_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_31_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_31_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_32_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_32_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_32_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_32_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_33_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_33_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_33_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_33_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_34_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_34_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_34_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_34_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_35_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_35_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_35_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_35_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_36_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_36_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_36_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_36_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_37_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_37_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_37_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_37_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_38_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_38_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_38_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_38_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_39_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_39_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_39_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_39_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_3_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_3_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_40_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_40_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_40_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_40_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_41_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_41_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_41_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_41_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_42_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_42_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_42_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_42_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_43_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_43_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_43_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_43_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_44_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_44_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_44_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_44_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_45_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_45_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_45_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_45_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_46_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_46_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_46_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_46_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_47_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_47_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_47_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_47_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_48_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_48_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_48_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_48_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_4_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_4_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_4_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_5_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_5_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_5_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_6_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_6_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_6_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_7_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_7_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_7_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_8_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_8_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_8_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_9_address0 <= tmp_498_cast_fu_922_p1(7 - 1 downto 0);

    buffer1_1_48_8x8_p_V_9_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_9_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_29_fu_802_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(co_reg_729));
    exitcond2_fu_887_p2 <= "1" when (h_reg_740 = ap_const_lv4_A) else "0";
    exitcond3_fu_796_p2 <= "1" when (co_reg_729 = ap_const_lv7_60) else "0";
    exitcond_fu_974_p2 <= "1" when (w_reg_751 = ap_const_lv4_A) else "0";
    h_29_fu_893_p2 <= std_logic_vector(unsigned(h_reg_740) + unsigned(ap_const_lv4_1));
    h_cast2_cast_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_740),11));
    output_V_address0 <= output_V_addr_reg_1128;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= tmp_fu_986_p50;

    output_V_we0_assign_proc : process(tmp_507_reg_1088, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_507_reg_1088 = ap_const_lv1_0))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_379_fu_778_p3),11));
    p_shl2_cast_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_383_fu_857_p3),8));
    p_shl3_cast_fu_877_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_384_fu_869_p3),8));
    p_shl4_cast_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_508_fu_827_p3),15));
    p_shl5_cast_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_509_fu_839_p3),15));
    p_shl_cast_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_766_p3),11));
    tmp_379_fu_778_p3 <= (co_reg_729 & ap_const_lv1_0);
    tmp_380_fu_790_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_774_p1) + unsigned(p_shl1_cast_fu_786_p1));
    tmp_381_fu_822_p2 <= std_logic_vector(unsigned(h_cast2_cast_fu_818_p1) + unsigned(tmp_380_reg_1092));
    tmp_382_fu_851_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_835_p1) + unsigned(p_shl5_cast_fu_847_p1));
    tmp_383_fu_857_p3 <= (h_reg_740 & ap_const_lv3_0);
    tmp_384_fu_869_p3 <= (h_reg_740 & ap_const_lv1_0);
    tmp_385_fu_881_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_865_p1) + unsigned(p_shl3_cast_fu_877_p1));
    tmp_386_fu_907_p2 <= std_logic_vector(unsigned(tmp_382_reg_1110) + unsigned(w_cast1_cast_fu_903_p1));
    tmp_387_fu_917_p2 <= std_logic_vector(unsigned(tmp_385_reg_1115) + unsigned(w_cast1_cast6_fu_899_p1));
    tmp_497_cast_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_386_fu_907_p2),32));
    tmp_498_cast_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_387_fu_917_p2),32));
    tmp_507_fu_762_p1 <= co_reg_729(1 - 1 downto 0);
    tmp_508_fu_827_p3 <= (tmp_381_fu_822_p2 & ap_const_lv3_0);
    tmp_509_fu_839_p3 <= (tmp_381_fu_822_p2 & ap_const_lv1_0);
    tmp_s_fu_766_p3 <= (co_reg_729 & ap_const_lv3_0);
    w_39_fu_980_p2 <= std_logic_vector(unsigned(w_reg_751) + unsigned(ap_const_lv4_1));
    w_cast1_cast6_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_751),8));
    w_cast1_cast_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_751),15));
end behav;
