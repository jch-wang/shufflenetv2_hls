-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shuffle_96_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    left_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    left_V_ce0 : OUT STD_LOGIC;
    left_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_24_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_24_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_24_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_1_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_2_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_3_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_4_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_5_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_6_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_7_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_7_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_8_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_8_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_9_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_9_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_10_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_10_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_11_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_11_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_12_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_12_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_13_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_13_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_13_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_14_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_14_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_14_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_15_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_15_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_15_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_16_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_16_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_16_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_17_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_17_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_17_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_18_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_18_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_18_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_19_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_19_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_19_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_20_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_20_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_20_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_21_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_21_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_21_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_22_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_22_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_22_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_23_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_23_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_23_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of shuffle_96_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_18 : STD_LOGIC_VECTOR (6 downto 0) := "0011000";
    constant ap_const_lv16_AB : STD_LOGIC_VECTOR (15 downto 0) := "0000000010101011";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_2018_fu_468_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2018_reg_876 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_521_cast_fu_502_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_521_cast_reg_880 : STD_LOGIC_VECTOR (12 downto 0);
    signal co_25_fu_512_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal co_25_reg_888 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_lshr_f_cast_reg_893 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond5_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2019_reg_901 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_526_cast_fu_581_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_526_cast_reg_907 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal arrayNo_cast_fu_585_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal arrayNo_cast_reg_912 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_531_cast_fu_625_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_531_cast_reg_917 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_473_fu_662_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_473_reg_922 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_475_fu_693_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_475_reg_927 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_477_fu_728_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_477_reg_932 : STD_LOGIC_VECTOR (8 downto 0);
    signal h_25_fu_740_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_25_reg_940 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal output_V_addr_reg_950 : STD_LOGIC_VECTOR (12 downto 0);
    signal w_35_fu_817_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_35_reg_1078 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_fu_823_p26 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal co_reg_425 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond4_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_reg_436 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_reg_447 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal storemerge_reg_458 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_544_cast_fu_763_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_545_cast_fu_773_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_546_cast_fu_783_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_472_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_464_fu_484_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_480_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_cast_fu_492_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_465_fu_496_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_528_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_528_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_fu_537_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_fu_537_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_466_fu_553_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_467_fu_564_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_cast_fu_560_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_571_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_468_fu_575_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_528_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2020_fu_589_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_469_fu_596_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2021_fu_604_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_470_fu_611_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_fu_600_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_615_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_471_fu_619_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal h_cast2_cast_fu_633_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_472_fu_637_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2022_fu_642_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl10_cast_fu_646_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl11_cast_fu_654_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal h_cast2_cast1_fu_629_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_474_fu_668_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2023_fu_673_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl8_cast_fu_677_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl9_cast_fu_685_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_476_fu_699_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2024_fu_704_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2025_fu_716_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl6_cast_fu_708_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl7_cast_fu_720_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal w_cast1_cast_fu_754_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_478_fu_758_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal w_cast1_cast2_fu_750_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_479_fu_768_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_cast1_cast1_fu_746_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_480_fu_778_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_528_ap_start : STD_LOGIC;
    signal grp_fu_528_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_fu_537_p00 : STD_LOGIC_VECTOR (15 downto 0);

    component ShuffleNetV2_uremHfu IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component ShuffleNetV2_mux_IfE IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_uremHfu_x_U764 : component ShuffleNetV2_uremHfu
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 6,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_528_ap_start,
        done => grp_fu_528_ap_done,
        din0 => grp_fu_528_p0,
        din1 => grp_fu_528_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_528_p2);

    ShuffleNetV2_mux_IfE_x_U765 : component ShuffleNetV2_mux_IfE
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 9,
        dout_WIDTH => 8)
    port map (
        din1 => buffer1_1_96_4x4_p_V_24_q0,
        din2 => buffer1_1_96_4x4_p_V_1_q0,
        din3 => buffer1_1_96_4x4_p_V_2_q0,
        din4 => buffer1_1_96_4x4_p_V_3_q0,
        din5 => buffer1_1_96_4x4_p_V_4_q0,
        din6 => buffer1_1_96_4x4_p_V_5_q0,
        din7 => buffer1_1_96_4x4_p_V_6_q0,
        din8 => buffer1_1_96_4x4_p_V_7_q0,
        din9 => buffer1_1_96_4x4_p_V_8_q0,
        din10 => buffer1_1_96_4x4_p_V_9_q0,
        din11 => buffer1_1_96_4x4_p_V_10_q0,
        din12 => buffer1_1_96_4x4_p_V_11_q0,
        din13 => buffer1_1_96_4x4_p_V_12_q0,
        din14 => buffer1_1_96_4x4_p_V_13_q0,
        din15 => buffer1_1_96_4x4_p_V_14_q0,
        din16 => buffer1_1_96_4x4_p_V_15_q0,
        din17 => buffer1_1_96_4x4_p_V_16_q0,
        din18 => buffer1_1_96_4x4_p_V_17_q0,
        din19 => buffer1_1_96_4x4_p_V_18_q0,
        din20 => buffer1_1_96_4x4_p_V_19_q0,
        din21 => buffer1_1_96_4x4_p_V_20_q0,
        din22 => buffer1_1_96_4x4_p_V_21_q0,
        din23 => buffer1_1_96_4x4_p_V_22_q0,
        din24 => buffer1_1_96_4x4_p_V_23_q0,
        din25 => arrayNo_cast_reg_912,
        dout => tmp_fu_823_p26);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond4_fu_734_p2 = ap_const_lv1_1))) then 
                co_reg_425 <= co_25_reg_888;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_425 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    h_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = exitcond_fu_811_p2))) then 
                h_reg_436 <= h_25_reg_940;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                h_reg_436 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    storemerge_reg_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                storemerge_reg_458 <= tmp_fu_823_p26;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                storemerge_reg_458 <= left_V_q0;
            end if; 
        end if;
    end process;

    w_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = exitcond4_fu_734_p2))) then 
                w_reg_447 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                w_reg_447 <= w_35_reg_1078;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    arrayNo_cast_reg_912(6 downto 0) <= arrayNo_cast_fu_585_p1(6 downto 0);
                    tmp_526_cast_reg_907(11 downto 1) <= tmp_526_cast_fu_581_p1(11 downto 1);
                    tmp_531_cast_reg_917(11 downto 1) <= tmp_531_cast_fu_625_p1(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_25_reg_888 <= co_25_fu_512_p2;
                tmp_2018_reg_876 <= tmp_2018_fu_468_p1;
                    tmp_521_cast_reg_880(12 downto 1) <= tmp_521_cast_fu_502_p1(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                h_25_reg_940 <= h_25_fu_740_p2;
                    tmp_473_reg_922(12 downto 1) <= tmp_473_fu_662_p2(12 downto 1);
                    tmp_475_reg_927(13 downto 1) <= tmp_475_fu_693_p2(13 downto 1);
                    tmp_477_reg_932(8 downto 1) <= tmp_477_fu_728_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                output_V_addr_reg_950 <= tmp_545_cast_fu_773_p1(13 - 1 downto 0);
                w_35_reg_1078 <= w_35_fu_817_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_506_p2 = ap_const_lv1_0))) then
                p_lshr_f_cast_reg_893 <= co_reg_425(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_2019_reg_901 <= mul_fu_537_p2(15 downto 12);
            end if;
        end if;
    end process;
    tmp_521_cast_reg_880(0) <= '0';
    tmp_526_cast_reg_907(0) <= '0';
    arrayNo_cast_reg_912(8 downto 7) <= "00";
    tmp_531_cast_reg_917(0) <= '0';
    tmp_473_reg_922(0) <= '0';
    tmp_475_reg_927(0) <= '0';
    tmp_477_reg_932(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_2018_reg_876, ap_CS_fsm_state2, exitcond5_fu_506_p2, ap_CS_fsm_state13, ap_CS_fsm_state14, exitcond4_fu_734_p2, exitcond_fu_811_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_506_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond4_fu_734_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = exitcond_fu_811_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_0 = exitcond_fu_811_p2) and (tmp_2018_reg_876 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_506_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_506_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_506_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_506_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayNo_cast_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_528_p2),9));
    buffer1_1_96_4x4_p_V_10_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_10_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_10_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_11_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_11_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_11_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_12_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_12_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_12_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_13_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_13_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_13_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_14_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_14_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_14_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_15_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_15_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_15_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_16_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_16_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_16_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_17_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_17_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_17_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_18_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_18_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_18_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_19_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_19_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_19_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_1_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_1_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_1_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_20_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_20_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_20_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_21_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_21_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_21_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_22_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_22_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_22_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_23_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_23_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_23_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_24_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_24_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_24_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_2_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_2_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_2_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_3_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_3_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_3_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_4_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_4_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_4_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_5_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_5_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_5_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_6_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_6_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_6_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_7_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_7_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_7_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_8_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_8_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_8_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_9_address0 <= tmp_546_cast_fu_783_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_9_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_9_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_25_fu_512_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(co_reg_425));
    exitcond4_fu_734_p2 <= "1" when (h_reg_436 = ap_const_lv3_6) else "0";
    exitcond5_fu_506_p2 <= "1" when (co_reg_425 = ap_const_lv8_C0) else "0";
    exitcond_fu_811_p2 <= "1" when (w_reg_447 = ap_const_lv3_6) else "0";

    grp_fu_528_ap_start_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_506_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_506_p2 = ap_const_lv1_0))) then 
            grp_fu_528_ap_start <= ap_const_logic_1;
        else 
            grp_fu_528_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_528_p0 <= co_reg_425(7 downto 1);
    grp_fu_528_p1 <= ap_const_lv7_18(6 - 1 downto 0);
    h_25_fu_740_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(h_reg_436));
    h_cast2_cast1_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_436),13));
    h_cast2_cast_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_436),12));
    left_V_address0 <= tmp_544_cast_fu_763_p1(12 - 1 downto 0);

    left_V_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            left_V_ce0 <= ap_const_logic_1;
        else 
            left_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_fu_537_p0 <= mul_fu_537_p00(7 - 1 downto 0);
    mul_fu_537_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_cast_reg_893),16));
    mul_fu_537_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_fu_537_p0) * unsigned(ap_const_lv16_AB), 16));
    output_V_address0 <= output_V_addr_reg_950;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= storemerge_reg_458;

    output_V_we0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl10_cast_fu_646_p3 <= (tmp_2022_fu_642_p1 & ap_const_lv3_0);
    p_shl11_cast_fu_654_p3 <= (tmp_472_fu_637_p2 & ap_const_lv1_0);
    p_shl1_cast_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_464_fu_484_p3),12));
    p_shl2_cast_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_469_fu_596_p1),11));
    p_shl3_cast_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_470_fu_611_p1),11));
    p_shl4_cast_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_466_fu_553_p3),11));
    p_shl5_cast_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_467_fu_564_p3),11));
    p_shl6_cast_fu_708_p3 <= (tmp_2024_fu_704_p1 & ap_const_lv3_0);
    p_shl7_cast_fu_720_p3 <= (tmp_2025_fu_716_p1 & ap_const_lv1_0);
    p_shl8_cast_fu_677_p3 <= (tmp_2023_fu_673_p1 & ap_const_lv3_0);
    p_shl9_cast_fu_685_p3 <= (tmp_474_fu_668_p2 & ap_const_lv1_0);
    p_shl_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_472_p3),12));
    tmp_2018_fu_468_p1 <= co_reg_425(1 - 1 downto 0);
    tmp_2020_fu_589_p3 <= (tmp_2019_reg_901 & ap_const_lv3_0);
    tmp_2021_fu_604_p3 <= (tmp_2019_reg_901 & ap_const_lv1_0);
    tmp_2022_fu_642_p1 <= tmp_472_fu_637_p2(10 - 1 downto 0);
    tmp_2023_fu_673_p1 <= tmp_474_fu_668_p2(11 - 1 downto 0);
    tmp_2024_fu_704_p1 <= tmp_476_fu_699_p2(6 - 1 downto 0);
    tmp_2025_fu_716_p1 <= tmp_476_fu_699_p2(8 - 1 downto 0);
    tmp_464_fu_484_p3 <= (co_reg_425 & ap_const_lv1_0);
    tmp_465_fu_496_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_480_p1) - unsigned(p_shl1_cast_fu_492_p1));
    tmp_466_fu_553_p3 <= (p_lshr_f_cast_reg_893 & ap_const_lv3_0);
    tmp_467_fu_564_p3 <= (p_lshr_f_cast_reg_893 & ap_const_lv1_0);
    tmp_468_fu_575_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_560_p1) - unsigned(p_shl5_cast_fu_571_p1));
        tmp_469_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2020_fu_589_p3),10));

        tmp_470_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2021_fu_604_p3),8));

    tmp_471_fu_619_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_600_p1) - unsigned(p_shl3_cast_fu_615_p1));
    tmp_472_fu_637_p2 <= std_logic_vector(unsigned(h_cast2_cast_fu_633_p1) + unsigned(tmp_526_cast_reg_907));
    tmp_473_fu_662_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_646_p3) - unsigned(p_shl11_cast_fu_654_p3));
    tmp_474_fu_668_p2 <= std_logic_vector(unsigned(h_cast2_cast1_fu_629_p1) + unsigned(tmp_521_cast_reg_880));
    tmp_475_fu_693_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_677_p3) - unsigned(p_shl9_cast_fu_685_p3));
    tmp_476_fu_699_p2 <= std_logic_vector(unsigned(h_cast2_cast_fu_633_p1) + unsigned(tmp_531_cast_reg_917));
    tmp_477_fu_728_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_708_p3) - unsigned(p_shl7_cast_fu_720_p3));
    tmp_478_fu_758_p2 <= std_logic_vector(unsigned(tmp_473_reg_922) + unsigned(w_cast1_cast_fu_754_p1));
    tmp_479_fu_768_p2 <= std_logic_vector(unsigned(tmp_475_reg_927) + unsigned(w_cast1_cast2_fu_750_p1));
    tmp_480_fu_778_p2 <= std_logic_vector(unsigned(tmp_477_reg_932) + unsigned(w_cast1_cast1_fu_746_p1));
        tmp_521_cast_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_465_fu_496_p2),13));

        tmp_526_cast_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_468_fu_575_p2),12));

        tmp_531_cast_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_471_fu_619_p2),12));

    tmp_544_cast_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_478_fu_758_p2),32));
    tmp_545_cast_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_479_fu_768_p2),32));
    tmp_546_cast_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_480_fu_778_p2),32));
    tmp_s_fu_472_p3 <= (co_reg_425 & ap_const_lv3_0);
    w_35_fu_817_p2 <= std_logic_vector(unsigned(w_reg_447) + unsigned(ap_const_lv3_1));
    w_cast1_cast1_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_447),9));
    w_cast1_cast2_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_447),14));
    w_cast1_cast_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_447),13));
end behav;
