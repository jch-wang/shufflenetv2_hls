// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_8_stride (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_V_address0;
output   input_V_ce0;
input  [7:0] input_V_q0;
output  [9:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [6:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [11:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] tmp_37_fu_254_p2;
reg   [10:0] tmp_37_reg_846;
wire    ap_CS_fsm_state2;
wire  signed [10:0] tmp_41_cast_fu_278_p1;
reg  signed [10:0] tmp_41_cast_reg_851;
wire  signed [11:0] tmp_44_cast_fu_288_p1;
reg  signed [11:0] tmp_44_cast_reg_856;
wire   [6:0] co_1_fu_298_p2;
reg   [6:0] co_1_reg_864;
reg   [6:0] bias_V_addr_reg_869;
wire   [0:0] exitcond1_fu_292_p2;
wire   [12:0] tmp_42_fu_333_p2;
reg   [12:0] tmp_42_reg_874;
wire    ap_CS_fsm_state3;
wire   [3:0] tmp_fu_345_p3;
reg   [3:0] tmp_reg_882;
wire   [0:0] exitcond2_fu_339_p2;
reg   [11:0] output_V_addr_reg_887;
wire    ap_CS_fsm_state4;
wire   [3:0] tmp_2_fu_373_p3;
reg   [3:0] tmp_2_reg_895;
wire   [0:0] exitcond3_fu_367_p2;
wire   [2:0] h_1_fu_381_p2;
wire   [10:0] tmp_47_fu_402_p2;
reg   [10:0] tmp_47_reg_905;
wire    ap_CS_fsm_state5;
wire   [1:0] m_1_fu_414_p2;
reg   [1:0] m_1_reg_913;
wire   [14:0] tmp_49_fu_468_p2;
reg   [14:0] tmp_49_reg_918;
wire   [0:0] exitcond4_fu_408_p2;
wire   [2:0] w_1_fu_474_p2;
reg   [2:0] w_1_reg_923;
wire    ap_CS_fsm_state6;
wire   [1:0] n_1_fu_500_p2;
reg   [1:0] n_1_reg_936;
wire   [0:0] exitcond_fu_494_p2;
reg   [7:0] weight_V_load_reg_946;
wire    ap_CS_fsm_state7;
reg   [7:0] input_V_load_reg_951;
wire   [15:0] p_Val2_5_fu_541_p2;
reg   [15:0] p_Val2_5_reg_956;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_55_reg_961;
wire   [15:0] p_Val2_6_fu_567_p2;
reg   [15:0] p_Val2_6_reg_966;
wire    ap_CS_fsm_state9;
reg   [0:0] signbit_reg_971;
wire   [7:0] p_Val2_8_fu_601_p2;
reg   [7:0] p_Val2_8_reg_978;
wire   [0:0] newsignbit_fu_607_p3;
reg   [0:0] newsignbit_reg_984;
wire   [0:0] carry_fu_621_p2;
reg   [0:0] carry_reg_990;
reg   [1:0] tmp_17_reg_997;
wire   [0:0] p_38_i_i_fu_679_p2;
reg   [0:0] p_38_i_i_reg_1003;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_18_fu_695_p2;
reg   [0:0] tmp_18_reg_1008;
wire   [0:0] brmerge40_demorgan_i_fu_706_p2;
reg   [0:0] brmerge40_demorgan_i_reg_1013;
wire   [0:0] underflow_fu_723_p2;
reg   [0:0] underflow_reg_1018;
wire   [0:0] brmerge_i_i_i_fu_728_p2;
reg   [0:0] brmerge_i_i_i_reg_1023;
wire   [7:0] sum_V_fu_755_p3;
wire    ap_CS_fsm_state11;
reg   [0:0] isneg_reg_1033;
wire    ap_CS_fsm_state12;
wire   [7:0] result_V_fu_785_p2;
reg   [7:0] result_V_reg_1040;
reg   [0:0] newsignbit_2_reg_1046;
reg   [6:0] co_reg_140;
reg   [2:0] h_reg_151;
reg   [2:0] w_reg_163;
wire    ap_CS_fsm_state13;
reg   [7:0] p_Val2_s_reg_175;
reg   [1:0] m_reg_187;
reg   [7:0] p_Val2_4_reg_198;
reg   [1:0] n_reg_210;
wire   [31:0] co_cast_fu_221_p1;
wire   [31:0] tmp_49_cast_fu_362_p1;
wire   [31:0] tmp_57_cast_fu_489_p1;
wire   [31:0] tmp_58_cast_fu_530_p1;
wire   [9:0] tmp_35_fu_230_p3;
wire   [7:0] tmp_36_fu_242_p3;
wire   [10:0] p_shl4_cast_fu_250_p1;
wire   [10:0] p_shl3_cast_fu_238_p1;
wire   [8:0] tmp_38_fu_260_p3;
wire   [9:0] p_shl2_cast_fu_268_p1;
wire   [9:0] co_cast_cast_fu_226_p1;
wire   [9:0] tmp_39_fu_272_p2;
wire   [10:0] tmp_40_fu_282_p2;
wire   [11:0] h_cast9_cast_fu_304_p1;
wire   [11:0] tmp_41_fu_308_p2;
wire   [9:0] tmp_43_fu_313_p1;
wire   [12:0] p_shl5_cast_fu_317_p3;
wire   [12:0] p_shl6_cast_fu_325_p3;
wire   [12:0] w_cast8_cast_fu_353_p1;
wire   [12:0] tmp_44_fu_357_p2;
wire   [10:0] m_cast7_cast_fu_387_p1;
wire   [10:0] tmp_45_fu_391_p2;
wire   [10:0] tmp_46_fu_396_p2;
wire   [1:0] tmp2_fu_420_p2;
wire  signed [3:0] tmp2_cast_fu_426_p1;
wire   [3:0] tmp_s_fu_430_p2;
wire   [10:0] tmp_cast_cast_fu_435_p1;
wire   [10:0] tmp_48_fu_439_p2;
wire   [13:0] tmp_50_fu_444_p3;
wire   [11:0] tmp_51_fu_456_p3;
wire   [14:0] p_shl8_cast_fu_452_p1;
wire   [14:0] p_shl9_cast_fu_464_p1;
wire   [10:0] n_cast6_cast_fu_480_p1;
wire   [10:0] tmp_52_fu_484_p2;
wire   [1:0] tmp3_fu_506_p2;
wire  signed [3:0] tmp3_cast_fu_512_p1;
wire   [3:0] tmp_10_fu_516_p2;
wire   [14:0] tmp_10_cast_cast_fu_521_p1;
wire   [14:0] tmp_53_fu_525_p2;
wire  signed [7:0] p_Val2_5_fu_541_p0;
wire  signed [7:0] p_Val2_5_fu_541_p1;
wire   [13:0] tmp_12_fu_555_p3;
wire  signed [15:0] tmp_12_cast_fu_563_p1;
wire   [7:0] p_Val2_7_fu_580_p4;
wire   [7:0] tmp_14_fu_590_p1;
wire   [0:0] tmp_56_fu_593_p3;
wire   [0:0] tmp_15_fu_615_p2;
wire   [0:0] Range1_all_ones_fu_644_p2;
wire   [0:0] Range1_all_zeros_fu_649_p2;
wire   [0:0] tmp_58_fu_637_p3;
wire   [0:0] tmp_16_fu_661_p2;
wire   [0:0] p_41_i_i_fu_667_p2;
wire   [0:0] deleted_zeros_fu_654_p3;
wire   [0:0] p_not_i_i_fu_684_p2;
wire   [0:0] brmerge_i_i1_fu_690_p2;
wire   [0:0] deleted_ones_fu_672_p3;
wire   [0:0] tmp4_demorgan_fu_711_p2;
wire   [0:0] tmp4_fu_717_p2;
wire   [0:0] overflow_fu_700_p2;
wire   [0:0] tmp5_fu_734_p2;
wire   [0:0] underflow_not_fu_738_p2;
wire   [7:0] p_Val2_8_mux_fu_743_p3;
wire   [7:0] p_Val2_8_40_fu_749_p3;
wire  signed [8:0] tmp_4_fu_767_p1;
wire  signed [8:0] tmp_3_fu_763_p1;
wire   [8:0] p_Val2_2_fu_771_p2;
wire   [0:0] tmp_5_fu_799_p2;
wire   [0:0] isneg_not_fu_813_p2;
wire   [0:0] brmerge_i_i_fu_809_p2;
wire   [0:0] underflow_2_fu_804_p2;
wire   [0:0] brmerge9_fu_818_p2;
wire   [7:0] result_V_mux_fu_823_p3;
wire   [7:0] p_result_V_fu_830_p3;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_339_p2 == 1'd1))) begin
        co_reg_140 <= co_1_reg_864;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_140 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_292_p2 == 1'd0))) begin
        h_reg_151 <= 3'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_367_p2 == 1'd1))) begin
        h_reg_151 <= h_1_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_494_p2))) begin
        m_reg_187 <= m_1_reg_913;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_367_p2))) begin
        m_reg_187 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        n_reg_210 <= n_1_reg_936;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_408_p2))) begin
        n_reg_210 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_4_reg_198 <= sum_V_fu_755_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_408_p2))) begin
        p_Val2_4_reg_198 <= p_Val2_s_reg_175;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_494_p2))) begin
        p_Val2_s_reg_175 <= p_Val2_4_reg_198;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_367_p2))) begin
        p_Val2_s_reg_175 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_339_p2))) begin
        w_reg_163 <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        w_reg_163 <= w_1_reg_923;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_292_p2 == 1'd0))) begin
        bias_V_addr_reg_869 <= co_cast_fu_221_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        brmerge40_demorgan_i_reg_1013 <= brmerge40_demorgan_i_fu_706_p2;
        brmerge_i_i_i_reg_1023 <= brmerge_i_i_i_fu_728_p2;
        p_38_i_i_reg_1003 <= p_38_i_i_fu_679_p2;
        tmp_18_reg_1008 <= tmp_18_fu_695_p2;
        underflow_reg_1018 <= underflow_fu_723_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        carry_reg_990 <= carry_fu_621_p2;
        newsignbit_reg_984 <= p_Val2_8_fu_601_p2[32'd7];
        p_Val2_6_reg_966 <= p_Val2_6_fu_567_p2;
        p_Val2_8_reg_978 <= p_Val2_8_fu_601_p2;
        signbit_reg_971 <= p_Val2_6_fu_567_p2[32'd15];
        tmp_17_reg_997 <= {{p_Val2_6_fu_567_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_1_reg_864 <= co_1_fu_298_p2;
        tmp_37_reg_846[10 : 1] <= tmp_37_fu_254_p2[10 : 1];
        tmp_41_cast_reg_851 <= tmp_41_cast_fu_278_p1;
        tmp_44_cast_reg_856[11 : 1] <= tmp_44_cast_fu_288_p1[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_V_load_reg_951 <= input_V_q0;
        weight_V_load_reg_946 <= weight_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        isneg_reg_1033 <= p_Val2_2_fu_771_p2[32'd8];
        newsignbit_2_reg_1046 <= result_V_fu_785_p2[32'd7];
        result_V_reg_1040 <= result_V_fu_785_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_1_reg_913 <= m_1_fu_414_p2;
        tmp_47_reg_905 <= tmp_47_fu_402_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_1_reg_936 <= n_1_fu_500_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_addr_reg_887 <= tmp_49_cast_fu_362_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_5_reg_956 <= p_Val2_5_fu_541_p2;
        tmp_55_reg_961 <= p_Val2_5_fu_541_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_367_p2))) begin
        tmp_2_reg_895[3 : 1] <= tmp_2_fu_373_p3[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_42_reg_874[12 : 1] <= tmp_42_fu_333_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_408_p2))) begin
        tmp_49_reg_918[14 : 1] <= tmp_49_fu_468_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_339_p2))) begin
        tmp_reg_882[3 : 1] <= tmp_fu_345_p3[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond4_fu_408_p2))) begin
        w_1_reg_923 <= w_1_fu_474_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_292_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_292_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_292_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_339_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_367_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_408_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_494_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_644_p2 = ((tmp_17_reg_997 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_649_p2 = ((tmp_17_reg_997 == 2'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_869;

assign brmerge40_demorgan_i_fu_706_p2 = (newsignbit_reg_984 & deleted_ones_fu_672_p3);

assign brmerge9_fu_818_p2 = (newsignbit_2_reg_1046 | isneg_not_fu_813_p2);

assign brmerge_i_i1_fu_690_p2 = (newsignbit_reg_984 | p_not_i_i_fu_684_p2);

assign brmerge_i_i_fu_809_p2 = (isneg_reg_1033 ^ newsignbit_2_reg_1046);

assign brmerge_i_i_i_fu_728_p2 = (underflow_fu_723_p2 | overflow_fu_700_p2);

assign carry_fu_621_p2 = (tmp_56_fu_593_p3 & tmp_15_fu_615_p2);

assign co_1_fu_298_p2 = (co_reg_140 + 7'd1);

assign co_cast_cast_fu_226_p1 = co_reg_140;

assign co_cast_fu_221_p1 = co_reg_140;

assign deleted_ones_fu_672_p3 = ((carry_reg_990[0:0] === 1'b1) ? p_41_i_i_fu_667_p2 : Range1_all_ones_fu_644_p2);

assign deleted_zeros_fu_654_p3 = ((carry_reg_990[0:0] === 1'b1) ? Range1_all_ones_fu_644_p2 : Range1_all_zeros_fu_649_p2);

assign exitcond1_fu_292_p2 = ((co_reg_140 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond2_fu_339_p2 = ((h_reg_151 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond3_fu_367_p2 = ((w_reg_163 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond4_fu_408_p2 = ((m_reg_187 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_494_p2 = ((n_reg_210 == 2'd3) ? 1'b1 : 1'b0);

assign h_1_fu_381_p2 = (h_reg_151 + 3'd1);

assign h_cast9_cast_fu_304_p1 = h_reg_151;

assign input_V_address0 = tmp_58_cast_fu_530_p1;

assign isneg_not_fu_813_p2 = (isneg_reg_1033 ^ 1'd1);

assign m_1_fu_414_p2 = (2'd1 + m_reg_187);

assign m_cast7_cast_fu_387_p1 = m_reg_187;

assign n_1_fu_500_p2 = (n_reg_210 + 2'd1);

assign n_cast6_cast_fu_480_p1 = n_reg_210;

assign newsignbit_fu_607_p3 = p_Val2_8_fu_601_p2[32'd7];

assign output_V_address0 = output_V_addr_reg_887;

assign output_V_d0 = ((brmerge9_fu_818_p2[0:0] === 1'b1) ? result_V_mux_fu_823_p3 : p_result_V_fu_830_p3);

assign overflow_fu_700_p2 = (brmerge_i_i1_fu_690_p2 & tmp_18_fu_695_p2);

assign p_38_i_i_fu_679_p2 = (carry_reg_990 & Range1_all_ones_fu_644_p2);

assign p_41_i_i_fu_667_p2 = (signbit_reg_971 & tmp_16_fu_661_p2);

assign p_Val2_2_fu_771_p2 = ($signed(tmp_4_fu_767_p1) + $signed(tmp_3_fu_763_p1));

assign p_Val2_5_fu_541_p0 = weight_V_load_reg_946;

assign p_Val2_5_fu_541_p1 = input_V_load_reg_951;

assign p_Val2_5_fu_541_p2 = ($signed(p_Val2_5_fu_541_p0) * $signed(p_Val2_5_fu_541_p1));

assign p_Val2_6_fu_567_p2 = ($signed(tmp_12_cast_fu_563_p1) + $signed(p_Val2_5_reg_956));

assign p_Val2_7_fu_580_p4 = {{p_Val2_6_fu_567_p2[13:6]}};

assign p_Val2_8_40_fu_749_p3 = ((underflow_reg_1018[0:0] === 1'b1) ? 8'd128 : p_Val2_8_reg_978);

assign p_Val2_8_fu_601_p2 = (p_Val2_7_fu_580_p4 + tmp_14_fu_590_p1);

assign p_Val2_8_mux_fu_743_p3 = ((brmerge_i_i_i_reg_1023[0:0] === 1'b1) ? 8'd127 : p_Val2_8_reg_978);

assign p_not_i_i_fu_684_p2 = (deleted_zeros_fu_654_p3 ^ 1'd1);

assign p_result_V_fu_830_p3 = ((underflow_2_fu_804_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_1040);

assign p_shl2_cast_fu_268_p1 = tmp_38_fu_260_p3;

assign p_shl3_cast_fu_238_p1 = tmp_35_fu_230_p3;

assign p_shl4_cast_fu_250_p1 = tmp_36_fu_242_p3;

assign p_shl5_cast_fu_317_p3 = {{tmp_43_fu_313_p1}, {3'd0}};

assign p_shl6_cast_fu_325_p3 = {{tmp_41_fu_308_p2}, {1'd0}};

assign p_shl8_cast_fu_452_p1 = tmp_50_fu_444_p3;

assign p_shl9_cast_fu_464_p1 = tmp_51_fu_456_p3;

assign result_V_fu_785_p2 = (bias_V_q0 + p_Val2_s_reg_175);

assign result_V_mux_fu_823_p3 = ((brmerge_i_i_fu_809_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_1040);

assign sum_V_fu_755_p3 = ((underflow_not_fu_738_p2[0:0] === 1'b1) ? p_Val2_8_mux_fu_743_p3 : p_Val2_8_40_fu_749_p3);

assign tmp2_cast_fu_426_p1 = $signed(tmp2_fu_420_p2);

assign tmp2_fu_420_p2 = (m_reg_187 ^ 2'd2);

assign tmp3_cast_fu_512_p1 = $signed(tmp3_fu_506_p2);

assign tmp3_fu_506_p2 = (n_reg_210 ^ 2'd2);

assign tmp4_demorgan_fu_711_p2 = (p_38_i_i_fu_679_p2 | brmerge40_demorgan_i_fu_706_p2);

assign tmp4_fu_717_p2 = (tmp4_demorgan_fu_711_p2 ^ 1'd1);

assign tmp5_fu_734_p2 = (brmerge40_demorgan_i_reg_1013 | tmp_18_reg_1008);

assign tmp_10_cast_cast_fu_521_p1 = tmp_10_fu_516_p2;

assign tmp_10_fu_516_p2 = ($signed(tmp3_cast_fu_512_p1) + $signed(tmp_2_reg_895));

assign tmp_12_cast_fu_563_p1 = $signed(tmp_12_fu_555_p3);

assign tmp_12_fu_555_p3 = {{p_Val2_4_reg_198}, {6'd0}};

assign tmp_14_fu_590_p1 = tmp_55_reg_961;

assign tmp_15_fu_615_p2 = (newsignbit_fu_607_p3 ^ 1'd1);

assign tmp_16_fu_661_p2 = (tmp_58_fu_637_p3 ^ 1'd1);

assign tmp_18_fu_695_p2 = (signbit_reg_971 ^ 1'd1);

assign tmp_2_fu_373_p3 = {{w_reg_163}, {1'd0}};

assign tmp_35_fu_230_p3 = {{co_reg_140}, {3'd0}};

assign tmp_36_fu_242_p3 = {{co_reg_140}, {1'd0}};

assign tmp_37_fu_254_p2 = (p_shl4_cast_fu_250_p1 + p_shl3_cast_fu_238_p1);

assign tmp_38_fu_260_p3 = {{co_reg_140}, {2'd0}};

assign tmp_39_fu_272_p2 = (p_shl2_cast_fu_268_p1 - co_cast_cast_fu_226_p1);

assign tmp_3_fu_763_p1 = $signed(p_Val2_s_reg_175);

assign tmp_40_fu_282_p2 = (p_shl3_cast_fu_238_p1 - p_shl4_cast_fu_250_p1);

assign tmp_41_cast_fu_278_p1 = $signed(tmp_39_fu_272_p2);

assign tmp_41_fu_308_p2 = ($signed(h_cast9_cast_fu_304_p1) + $signed(tmp_44_cast_reg_856));

assign tmp_42_fu_333_p2 = (p_shl5_cast_fu_317_p3 - p_shl6_cast_fu_325_p3);

assign tmp_43_fu_313_p1 = tmp_41_fu_308_p2[9:0];

assign tmp_44_cast_fu_288_p1 = $signed(tmp_40_fu_282_p2);

assign tmp_44_fu_357_p2 = (tmp_42_reg_874 + w_cast8_cast_fu_353_p1);

assign tmp_45_fu_391_p2 = ($signed(m_cast7_cast_fu_387_p1) + $signed(tmp_41_cast_reg_851));

assign tmp_46_fu_396_p2 = tmp_45_fu_391_p2 << 11'd2;

assign tmp_47_fu_402_p2 = (tmp_46_fu_396_p2 - tmp_45_fu_391_p2);

assign tmp_48_fu_439_p2 = (tmp_cast_cast_fu_435_p1 + tmp_37_reg_846);

assign tmp_49_cast_fu_362_p1 = tmp_44_fu_357_p2;

assign tmp_49_fu_468_p2 = (p_shl8_cast_fu_452_p1 + p_shl9_cast_fu_464_p1);

assign tmp_4_fu_767_p1 = $signed(bias_V_q0);

assign tmp_50_fu_444_p3 = {{tmp_48_fu_439_p2}, {3'd0}};

assign tmp_51_fu_456_p3 = {{tmp_48_fu_439_p2}, {1'd0}};

assign tmp_52_fu_484_p2 = (tmp_47_reg_905 + n_cast6_cast_fu_480_p1);

assign tmp_53_fu_525_p2 = (tmp_10_cast_cast_fu_521_p1 + tmp_49_reg_918);

assign tmp_56_fu_593_p3 = p_Val2_6_fu_567_p2[32'd13];

assign tmp_57_cast_fu_489_p1 = tmp_52_fu_484_p2;

assign tmp_58_cast_fu_530_p1 = tmp_53_fu_525_p2;

assign tmp_58_fu_637_p3 = p_Val2_6_reg_966[32'd14];

assign tmp_5_fu_799_p2 = (newsignbit_2_reg_1046 ^ 1'd1);

assign tmp_cast_cast_fu_435_p1 = tmp_s_fu_430_p2;

assign tmp_fu_345_p3 = {{h_reg_151}, {1'd0}};

assign tmp_s_fu_430_p2 = ($signed(tmp2_cast_fu_426_p1) + $signed(tmp_reg_882));

assign underflow_2_fu_804_p2 = (isneg_reg_1033 & tmp_5_fu_799_p2);

assign underflow_fu_723_p2 = (signbit_reg_971 & tmp4_fu_717_p2);

assign underflow_not_fu_738_p2 = (tmp5_fu_734_p2 | p_38_i_i_reg_1003);

assign w_1_fu_474_p2 = (w_reg_163 + 3'd1);

assign w_cast8_cast_fu_353_p1 = w_reg_163;

assign weight_V_address0 = tmp_57_cast_fu_489_p1;

always @ (posedge ap_clk) begin
    tmp_37_reg_846[0] <= 1'b0;
    tmp_44_cast_reg_856[0] <= 1'b0;
    tmp_42_reg_874[0] <= 1'b0;
    tmp_reg_882[0] <= 1'b0;
    tmp_2_reg_895[0] <= 1'b0;
    tmp_49_reg_918[0] <= 1'b0;
end

endmodule //subconv_3x3_8_stride
