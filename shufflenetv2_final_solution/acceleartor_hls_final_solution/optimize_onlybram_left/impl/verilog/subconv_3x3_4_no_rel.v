// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_4_no_rel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        buffer1_1_96_4x4_p_V_24_address0,
        buffer1_1_96_4x4_p_V_24_ce0,
        buffer1_1_96_4x4_p_V_24_q0,
        buffer1_1_96_4x4_p_V_1_address0,
        buffer1_1_96_4x4_p_V_1_ce0,
        buffer1_1_96_4x4_p_V_1_q0,
        buffer1_1_96_4x4_p_V_2_address0,
        buffer1_1_96_4x4_p_V_2_ce0,
        buffer1_1_96_4x4_p_V_2_q0,
        buffer1_1_96_4x4_p_V_3_address0,
        buffer1_1_96_4x4_p_V_3_ce0,
        buffer1_1_96_4x4_p_V_3_q0,
        buffer1_1_96_4x4_p_V_4_address0,
        buffer1_1_96_4x4_p_V_4_ce0,
        buffer1_1_96_4x4_p_V_4_q0,
        buffer1_1_96_4x4_p_V_5_address0,
        buffer1_1_96_4x4_p_V_5_ce0,
        buffer1_1_96_4x4_p_V_5_q0,
        buffer1_1_96_4x4_p_V_6_address0,
        buffer1_1_96_4x4_p_V_6_ce0,
        buffer1_1_96_4x4_p_V_6_q0,
        buffer1_1_96_4x4_p_V_7_address0,
        buffer1_1_96_4x4_p_V_7_ce0,
        buffer1_1_96_4x4_p_V_7_q0,
        buffer1_1_96_4x4_p_V_8_address0,
        buffer1_1_96_4x4_p_V_8_ce0,
        buffer1_1_96_4x4_p_V_8_q0,
        buffer1_1_96_4x4_p_V_9_address0,
        buffer1_1_96_4x4_p_V_9_ce0,
        buffer1_1_96_4x4_p_V_9_q0,
        buffer1_1_96_4x4_p_V_10_address0,
        buffer1_1_96_4x4_p_V_10_ce0,
        buffer1_1_96_4x4_p_V_10_q0,
        buffer1_1_96_4x4_p_V_11_address0,
        buffer1_1_96_4x4_p_V_11_ce0,
        buffer1_1_96_4x4_p_V_11_q0,
        buffer1_1_96_4x4_p_V_12_address0,
        buffer1_1_96_4x4_p_V_12_ce0,
        buffer1_1_96_4x4_p_V_12_q0,
        buffer1_1_96_4x4_p_V_13_address0,
        buffer1_1_96_4x4_p_V_13_ce0,
        buffer1_1_96_4x4_p_V_13_q0,
        buffer1_1_96_4x4_p_V_14_address0,
        buffer1_1_96_4x4_p_V_14_ce0,
        buffer1_1_96_4x4_p_V_14_q0,
        buffer1_1_96_4x4_p_V_15_address0,
        buffer1_1_96_4x4_p_V_15_ce0,
        buffer1_1_96_4x4_p_V_15_q0,
        buffer1_1_96_4x4_p_V_16_address0,
        buffer1_1_96_4x4_p_V_16_ce0,
        buffer1_1_96_4x4_p_V_16_q0,
        buffer1_1_96_4x4_p_V_17_address0,
        buffer1_1_96_4x4_p_V_17_ce0,
        buffer1_1_96_4x4_p_V_17_q0,
        buffer1_1_96_4x4_p_V_18_address0,
        buffer1_1_96_4x4_p_V_18_ce0,
        buffer1_1_96_4x4_p_V_18_q0,
        buffer1_1_96_4x4_p_V_19_address0,
        buffer1_1_96_4x4_p_V_19_ce0,
        buffer1_1_96_4x4_p_V_19_q0,
        buffer1_1_96_4x4_p_V_20_address0,
        buffer1_1_96_4x4_p_V_20_ce0,
        buffer1_1_96_4x4_p_V_20_q0,
        buffer1_1_96_4x4_p_V_21_address0,
        buffer1_1_96_4x4_p_V_21_ce0,
        buffer1_1_96_4x4_p_V_21_q0,
        buffer1_1_96_4x4_p_V_22_address0,
        buffer1_1_96_4x4_p_V_22_ce0,
        buffer1_1_96_4x4_p_V_22_q0,
        buffer1_1_96_4x4_p_V_23_address0,
        buffer1_1_96_4x4_p_V_23_ce0,
        buffer1_1_96_4x4_p_V_23_q0
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [6:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [11:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [7:0] buffer1_1_96_4x4_p_V_24_address0;
output   buffer1_1_96_4x4_p_V_24_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_24_q0;
output  [7:0] buffer1_1_96_4x4_p_V_1_address0;
output   buffer1_1_96_4x4_p_V_1_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_1_q0;
output  [7:0] buffer1_1_96_4x4_p_V_2_address0;
output   buffer1_1_96_4x4_p_V_2_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_2_q0;
output  [7:0] buffer1_1_96_4x4_p_V_3_address0;
output   buffer1_1_96_4x4_p_V_3_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_3_q0;
output  [7:0] buffer1_1_96_4x4_p_V_4_address0;
output   buffer1_1_96_4x4_p_V_4_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_4_q0;
output  [7:0] buffer1_1_96_4x4_p_V_5_address0;
output   buffer1_1_96_4x4_p_V_5_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_5_q0;
output  [7:0] buffer1_1_96_4x4_p_V_6_address0;
output   buffer1_1_96_4x4_p_V_6_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_6_q0;
output  [7:0] buffer1_1_96_4x4_p_V_7_address0;
output   buffer1_1_96_4x4_p_V_7_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_7_q0;
output  [7:0] buffer1_1_96_4x4_p_V_8_address0;
output   buffer1_1_96_4x4_p_V_8_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_8_q0;
output  [7:0] buffer1_1_96_4x4_p_V_9_address0;
output   buffer1_1_96_4x4_p_V_9_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_9_q0;
output  [7:0] buffer1_1_96_4x4_p_V_10_address0;
output   buffer1_1_96_4x4_p_V_10_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_10_q0;
output  [7:0] buffer1_1_96_4x4_p_V_11_address0;
output   buffer1_1_96_4x4_p_V_11_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_11_q0;
output  [7:0] buffer1_1_96_4x4_p_V_12_address0;
output   buffer1_1_96_4x4_p_V_12_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_12_q0;
output  [7:0] buffer1_1_96_4x4_p_V_13_address0;
output   buffer1_1_96_4x4_p_V_13_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_13_q0;
output  [7:0] buffer1_1_96_4x4_p_V_14_address0;
output   buffer1_1_96_4x4_p_V_14_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_14_q0;
output  [7:0] buffer1_1_96_4x4_p_V_15_address0;
output   buffer1_1_96_4x4_p_V_15_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_15_q0;
output  [7:0] buffer1_1_96_4x4_p_V_16_address0;
output   buffer1_1_96_4x4_p_V_16_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_16_q0;
output  [7:0] buffer1_1_96_4x4_p_V_17_address0;
output   buffer1_1_96_4x4_p_V_17_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_17_q0;
output  [7:0] buffer1_1_96_4x4_p_V_18_address0;
output   buffer1_1_96_4x4_p_V_18_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_18_q0;
output  [7:0] buffer1_1_96_4x4_p_V_19_address0;
output   buffer1_1_96_4x4_p_V_19_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_19_q0;
output  [7:0] buffer1_1_96_4x4_p_V_20_address0;
output   buffer1_1_96_4x4_p_V_20_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_20_q0;
output  [7:0] buffer1_1_96_4x4_p_V_21_address0;
output   buffer1_1_96_4x4_p_V_21_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_21_q0;
output  [7:0] buffer1_1_96_4x4_p_V_22_address0;
output   buffer1_1_96_4x4_p_V_22_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_22_q0;
output  [7:0] buffer1_1_96_4x4_p_V_23_address0;
output   buffer1_1_96_4x4_p_V_23_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_23_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg buffer1_1_96_4x4_p_V_24_ce0;
reg buffer1_1_96_4x4_p_V_1_ce0;
reg buffer1_1_96_4x4_p_V_2_ce0;
reg buffer1_1_96_4x4_p_V_3_ce0;
reg buffer1_1_96_4x4_p_V_4_ce0;
reg buffer1_1_96_4x4_p_V_5_ce0;
reg buffer1_1_96_4x4_p_V_6_ce0;
reg buffer1_1_96_4x4_p_V_7_ce0;
reg buffer1_1_96_4x4_p_V_8_ce0;
reg buffer1_1_96_4x4_p_V_9_ce0;
reg buffer1_1_96_4x4_p_V_10_ce0;
reg buffer1_1_96_4x4_p_V_11_ce0;
reg buffer1_1_96_4x4_p_V_12_ce0;
reg buffer1_1_96_4x4_p_V_13_ce0;
reg buffer1_1_96_4x4_p_V_14_ce0;
reg buffer1_1_96_4x4_p_V_15_ce0;
reg buffer1_1_96_4x4_p_V_16_ce0;
reg buffer1_1_96_4x4_p_V_17_ce0;
reg buffer1_1_96_4x4_p_V_18_ce0;
reg buffer1_1_96_4x4_p_V_19_ce0;
reg buffer1_1_96_4x4_p_V_20_ce0;
reg buffer1_1_96_4x4_p_V_21_ce0;
reg buffer1_1_96_4x4_p_V_22_ce0;
reg buffer1_1_96_4x4_p_V_23_ce0;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [14:0] next_mul_fu_578_p2;
reg   [14:0] next_mul_reg_1330;
wire    ap_CS_fsm_state2;
wire  signed [10:0] tmp_86_cast_fu_611_p1;
reg  signed [10:0] tmp_86_cast_reg_1335;
wire  signed [11:0] tmp_89_cast_fu_645_p1;
reg  signed [11:0] tmp_89_cast_reg_1340;
wire   [6:0] co_3_fu_655_p2;
reg   [6:0] co_3_reg_1348;
wire   [31:0] arrayNo_cast_fu_661_p1;
reg   [31:0] arrayNo_cast_reg_1353;
wire   [0:0] exitcond9_fu_649_p2;
wire  signed [11:0] tmp_94_cast_fu_705_p1;
reg  signed [11:0] tmp_94_cast_reg_1358;
reg   [6:0] bias_V_addr_reg_1363;
wire   [12:0] tmp_90_fu_738_p2;
reg   [12:0] tmp_90_reg_1368;
wire    ap_CS_fsm_state3;
wire   [6:0] idx_urem_fu_762_p3;
wire   [0:0] exitcond1_fu_744_p2;
reg   [11:0] output_V_addr_reg_1381;
wire    ap_CS_fsm_state4;
wire   [2:0] h_3_fu_790_p2;
wire   [0:0] exitcond2_fu_784_p2;
wire   [10:0] tmp_95_fu_811_p2;
reg   [10:0] tmp_95_reg_1394;
wire    ap_CS_fsm_state5;
wire   [1:0] m_3_fu_823_p2;
reg   [1:0] m_3_reg_1402;
wire   [5:0] tmp_98_fu_854_p1;
reg   [5:0] tmp_98_reg_1407;
wire   [0:0] exitcond3_fu_817_p2;
wire   [7:0] tmp_99_fu_858_p1;
reg   [7:0] tmp_99_reg_1412;
wire   [8:0] tmp_97_fu_876_p2;
reg   [8:0] tmp_97_reg_1417;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [1:0] n_3_fu_902_p2;
reg   [1:0] n_3_reg_1430;
wire   [8:0] tmp_101_fu_928_p2;
reg   [8:0] tmp_101_reg_1435;
wire   [0:0] exitcond_fu_896_p2;
wire    ap_CS_fsm_state8;
reg   [7:0] weight_V_load_reg_1560;
wire   [7:0] tmp_28_fu_960_p26;
reg   [7:0] tmp_28_reg_1565;
wire    ap_CS_fsm_state9;
wire   [15:0] p_Val2_2_fu_1019_p2;
reg   [15:0] p_Val2_2_reg_1570;
wire    ap_CS_fsm_state10;
reg   [0:0] tmp_103_reg_1575;
wire   [15:0] p_Val2_22_fu_1045_p2;
reg   [15:0] p_Val2_22_reg_1580;
wire    ap_CS_fsm_state11;
reg   [0:0] signbit_reg_1585;
wire   [7:0] p_Val2_24_fu_1079_p2;
reg   [7:0] p_Val2_24_reg_1592;
wire   [0:0] newsignbit_fu_1085_p3;
reg   [0:0] newsignbit_reg_1598;
wire   [0:0] carry_fu_1099_p2;
reg   [0:0] carry_reg_1604;
reg   [1:0] tmp_35_reg_1611;
wire   [0:0] p_38_i_i_fu_1157_p2;
reg   [0:0] p_38_i_i_reg_1617;
wire    ap_CS_fsm_state12;
wire   [0:0] tmp_37_fu_1173_p2;
reg   [0:0] tmp_37_reg_1622;
wire   [0:0] brmerge40_demorgan_i_fu_1184_p2;
reg   [0:0] brmerge40_demorgan_i_reg_1627;
wire   [0:0] underflow_fu_1201_p2;
reg   [0:0] underflow_reg_1632;
wire   [0:0] brmerge_i_i_i_fu_1206_p2;
reg   [0:0] brmerge_i_i_i_reg_1637;
wire   [7:0] sum_V_fu_1233_p3;
wire    ap_CS_fsm_state13;
reg   [0:0] isneg_reg_1647;
wire    ap_CS_fsm_state14;
wire   [7:0] result_V_fu_1263_p2;
reg   [7:0] result_V_reg_1654;
reg   [0:0] newsignbit_4_reg_1660;
wire   [2:0] w_3_fu_1324_p2;
wire    ap_CS_fsm_state15;
reg   [6:0] co_reg_474;
reg   [14:0] phi_mul_reg_485;
reg   [6:0] phi_urem_reg_496;
reg   [2:0] h_reg_508;
reg   [2:0] w_reg_520;
reg   [7:0] p_Val2_s_reg_532;
reg   [1:0] m_reg_544;
reg   [7:0] p_Val2_21_reg_555;
reg   [1:0] n_reg_567;
wire   [31:0] co_cast_fu_584_p1;
wire   [31:0] tmp_99_cast_fu_779_p1;
wire   [31:0] tmp_107_cast_fu_891_p1;
wire   [31:0] tmp_108_cast_fu_933_p1;
wire   [8:0] tmp_79_fu_593_p3;
wire   [9:0] p_shl2_cast_fu_601_p1;
wire   [9:0] co_cast_cast_fu_589_p1;
wire   [9:0] tmp_80_fu_605_p2;
wire   [9:0] tmp_81_fu_615_p3;
wire   [7:0] tmp_82_fu_627_p3;
wire   [10:0] p_shl_cast_fu_623_p1;
wire   [10:0] p_shl1_cast_fu_635_p1;
wire   [10:0] tmp_83_fu_639_p2;
wire   [2:0] tmp_84_fu_665_p4;
wire   [5:0] tmp_85_fu_675_p3;
wire   [3:0] tmp_86_fu_687_p3;
wire   [10:0] p_shl3_cast_fu_683_p1;
wire   [10:0] p_shl4_cast_fu_695_p1;
wire   [10:0] tmp_87_fu_699_p2;
wire   [11:0] h_cast9_cast_fu_709_p1;
wire   [11:0] tmp_88_fu_713_p2;
wire   [9:0] tmp_89_fu_718_p1;
wire   [12:0] p_shl5_cast_fu_722_p3;
wire   [12:0] p_shl6_cast_fu_730_p3;
wire   [6:0] next_urem_fu_750_p2;
wire   [0:0] tmp_91_fu_756_p2;
wire   [12:0] w_cast8_cast_fu_770_p1;
wire   [12:0] tmp_92_fu_774_p2;
wire   [10:0] m_cast7_cast_fu_796_p1;
wire   [10:0] tmp_93_fu_800_p2;
wire   [10:0] tmp_94_fu_805_p2;
wire   [1:0] tmp2_fu_829_p2;
wire  signed [2:0] tmp2_cast_fu_835_p1;
wire   [2:0] tmp_30_fu_839_p2;
wire   [11:0] tmp_39_cast_cast_fu_845_p1;
wire   [11:0] tmp_96_fu_849_p2;
wire   [8:0] p_shl8_cast_fu_862_p3;
wire   [8:0] p_shl9_cast_fu_869_p3;
wire   [10:0] n_cast6_cast_fu_882_p1;
wire   [10:0] tmp_100_fu_886_p2;
wire   [1:0] tmp3_fu_908_p2;
wire  signed [2:0] tmp3_cast_fu_914_p1;
wire   [2:0] tmp_31_fu_918_p2;
wire   [8:0] tmp_43_cast_cast_fu_924_p1;
wire  signed [7:0] p_Val2_2_fu_1019_p0;
wire  signed [7:0] p_Val2_2_fu_1019_p1;
wire   [13:0] tmp_32_fu_1033_p3;
wire  signed [15:0] tmp_45_cast_fu_1041_p1;
wire   [7:0] p_Val2_23_fu_1058_p4;
wire   [7:0] tmp_33_fu_1068_p1;
wire   [0:0] tmp_104_fu_1071_p3;
wire   [0:0] tmp_34_fu_1093_p2;
wire   [0:0] Range1_all_ones_fu_1122_p2;
wire   [0:0] Range1_all_zeros_fu_1127_p2;
wire   [0:0] tmp_106_fu_1115_p3;
wire   [0:0] tmp_36_fu_1139_p2;
wire   [0:0] p_41_i_i_fu_1145_p2;
wire   [0:0] deleted_zeros_fu_1132_p3;
wire   [0:0] p_not_i_i_fu_1162_p2;
wire   [0:0] brmerge_i_i3_fu_1168_p2;
wire   [0:0] deleted_ones_fu_1150_p3;
wire   [0:0] tmp4_demorgan_fu_1189_p2;
wire   [0:0] tmp4_fu_1195_p2;
wire   [0:0] overflow_fu_1178_p2;
wire   [0:0] tmp5_fu_1212_p2;
wire   [0:0] underflow_not_fu_1216_p2;
wire   [7:0] p_Val2_24_mux_fu_1221_p3;
wire   [7:0] p_Val2_s_50_fu_1227_p3;
wire  signed [8:0] tmp_s_fu_1245_p1;
wire  signed [8:0] tmp_fu_1241_p1;
wire   [8:0] p_Val2_19_fu_1249_p2;
wire   [0:0] tmp_29_fu_1277_p2;
wire   [0:0] isneg_not_fu_1291_p2;
wire   [0:0] brmerge_i_i_fu_1287_p2;
wire   [0:0] underflow_4_fu_1282_p2;
wire   [0:0] brmerge9_fu_1296_p2;
wire   [7:0] result_V_mux_fu_1301_p3;
wire   [7:0] p_result_V_fu_1308_p3;
reg   [14:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

ShuffleNetV2_mux_CeG #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_CeG_x_U736(
    .din1(buffer1_1_96_4x4_p_V_24_q0),
    .din2(buffer1_1_96_4x4_p_V_1_q0),
    .din3(buffer1_1_96_4x4_p_V_2_q0),
    .din4(buffer1_1_96_4x4_p_V_3_q0),
    .din5(buffer1_1_96_4x4_p_V_4_q0),
    .din6(buffer1_1_96_4x4_p_V_5_q0),
    .din7(buffer1_1_96_4x4_p_V_6_q0),
    .din8(buffer1_1_96_4x4_p_V_7_q0),
    .din9(buffer1_1_96_4x4_p_V_8_q0),
    .din10(buffer1_1_96_4x4_p_V_9_q0),
    .din11(buffer1_1_96_4x4_p_V_10_q0),
    .din12(buffer1_1_96_4x4_p_V_11_q0),
    .din13(buffer1_1_96_4x4_p_V_12_q0),
    .din14(buffer1_1_96_4x4_p_V_13_q0),
    .din15(buffer1_1_96_4x4_p_V_14_q0),
    .din16(buffer1_1_96_4x4_p_V_15_q0),
    .din17(buffer1_1_96_4x4_p_V_16_q0),
    .din18(buffer1_1_96_4x4_p_V_17_q0),
    .din19(buffer1_1_96_4x4_p_V_18_q0),
    .din20(buffer1_1_96_4x4_p_V_19_q0),
    .din21(buffer1_1_96_4x4_p_V_20_q0),
    .din22(buffer1_1_96_4x4_p_V_21_q0),
    .din23(buffer1_1_96_4x4_p_V_22_q0),
    .din24(buffer1_1_96_4x4_p_V_23_q0),
    .din25(arrayNo_cast_reg_1353),
    .dout(tmp_28_fu_960_p26)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_744_p2 == 1'd1))) begin
        co_reg_474 <= co_3_reg_1348;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_474 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_649_p2 == 1'd0))) begin
        h_reg_508 <= 3'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond2_fu_784_p2))) begin
        h_reg_508 <= h_3_fu_790_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_784_p2))) begin
        m_reg_544 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_896_p2))) begin
        m_reg_544 <= m_3_reg_1402;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        n_reg_567 <= n_3_reg_1430;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        n_reg_567 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        p_Val2_21_reg_555 <= sum_V_fu_1233_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_21_reg_555 <= p_Val2_s_reg_532;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_784_p2))) begin
        p_Val2_s_reg_532 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_896_p2))) begin
        p_Val2_s_reg_532 <= p_Val2_21_reg_555;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_744_p2 == 1'd1))) begin
        phi_mul_reg_485 <= next_mul_reg_1330;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_485 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_744_p2 == 1'd1))) begin
        phi_urem_reg_496 <= idx_urem_fu_762_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_urem_reg_496 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond1_fu_744_p2))) begin
        w_reg_520 <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        w_reg_520 <= w_3_fu_1324_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_649_p2 == 1'd0))) begin
        arrayNo_cast_reg_1353[6 : 0] <= arrayNo_cast_fu_661_p1[6 : 0];
        bias_V_addr_reg_1363 <= co_cast_fu_584_p1;
        tmp_94_cast_reg_1358[11 : 1] <= tmp_94_cast_fu_705_p1[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        brmerge40_demorgan_i_reg_1627 <= brmerge40_demorgan_i_fu_1184_p2;
        brmerge_i_i_i_reg_1637 <= brmerge_i_i_i_fu_1206_p2;
        p_38_i_i_reg_1617 <= p_38_i_i_fu_1157_p2;
        tmp_37_reg_1622 <= tmp_37_fu_1173_p2;
        underflow_reg_1632 <= underflow_fu_1201_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        carry_reg_1604 <= carry_fu_1099_p2;
        newsignbit_reg_1598 <= p_Val2_24_fu_1079_p2[32'd7];
        p_Val2_22_reg_1580 <= p_Val2_22_fu_1045_p2;
        p_Val2_24_reg_1592 <= p_Val2_24_fu_1079_p2;
        signbit_reg_1585 <= p_Val2_22_fu_1045_p2[32'd15];
        tmp_35_reg_1611 <= {{p_Val2_22_fu_1045_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_3_reg_1348 <= co_3_fu_655_p2;
        next_mul_reg_1330 <= next_mul_fu_578_p2;
        tmp_86_cast_reg_1335 <= tmp_86_cast_fu_611_p1;
        tmp_89_cast_reg_1340[11 : 1] <= tmp_89_cast_fu_645_p1[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        isneg_reg_1647 <= p_Val2_19_fu_1249_p2[32'd8];
        newsignbit_4_reg_1660 <= result_V_fu_1263_p2[32'd7];
        result_V_reg_1654 <= result_V_fu_1263_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_3_reg_1402 <= m_3_fu_823_p2;
        tmp_95_reg_1394 <= tmp_95_fu_811_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        n_3_reg_1430 <= n_3_fu_902_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_addr_reg_1381 <= tmp_99_cast_fu_779_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Val2_2_reg_1570 <= p_Val2_2_fu_1019_p2;
        tmp_103_reg_1575 <= p_Val2_2_fu_1019_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond_fu_896_p2))) begin
        tmp_101_reg_1435 <= tmp_101_fu_928_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_28_reg_1565 <= tmp_28_fu_960_p26;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_90_reg_1368[12 : 1] <= tmp_90_fu_738_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_97_reg_1417[8 : 1] <= tmp_97_fu_876_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond3_fu_817_p2))) begin
        tmp_98_reg_1407 <= tmp_98_fu_854_p1;
        tmp_99_reg_1412 <= tmp_99_fu_858_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        weight_V_load_reg_1560 <= weight_V_q0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_649_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_649_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_10_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_11_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_12_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_13_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_14_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_15_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_16_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_17_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_18_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_19_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_1_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_20_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_21_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_22_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_23_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_24_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_2_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_3_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_4_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_5_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_6_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_7_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_8_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_96_4x4_p_V_9_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond9_fu_649_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_744_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond2_fu_784_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond3_fu_817_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_896_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_1122_p2 = ((tmp_35_reg_1611 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_1127_p2 = ((tmp_35_reg_1611 == 2'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign arrayNo_cast_fu_661_p1 = phi_urem_reg_496;

assign bias_V_address0 = bias_V_addr_reg_1363;

assign brmerge40_demorgan_i_fu_1184_p2 = (newsignbit_reg_1598 & deleted_ones_fu_1150_p3);

assign brmerge9_fu_1296_p2 = (newsignbit_4_reg_1660 | isneg_not_fu_1291_p2);

assign brmerge_i_i3_fu_1168_p2 = (newsignbit_reg_1598 | p_not_i_i_fu_1162_p2);

assign brmerge_i_i_fu_1287_p2 = (isneg_reg_1647 ^ newsignbit_4_reg_1660);

assign brmerge_i_i_i_fu_1206_p2 = (underflow_fu_1201_p2 | overflow_fu_1178_p2);

assign buffer1_1_96_4x4_p_V_10_address0 = tmp_108_cast_fu_933_p1;

assign buffer1_1_96_4x4_p_V_11_address0 = tmp_108_cast_fu_933_p1;

assign buffer1_1_96_4x4_p_V_12_address0 = tmp_108_cast_fu_933_p1;

assign buffer1_1_96_4x4_p_V_13_address0 = tmp_108_cast_fu_933_p1;

assign buffer1_1_96_4x4_p_V_14_address0 = tmp_108_cast_fu_933_p1;

assign buffer1_1_96_4x4_p_V_15_address0 = tmp_108_cast_fu_933_p1;

assign buffer1_1_96_4x4_p_V_16_address0 = tmp_108_cast_fu_933_p1;

assign buffer1_1_96_4x4_p_V_17_address0 = tmp_108_cast_fu_933_p1;

assign buffer1_1_96_4x4_p_V_18_address0 = tmp_108_cast_fu_933_p1;

assign buffer1_1_96_4x4_p_V_19_address0 = tmp_108_cast_fu_933_p1;

assign buffer1_1_96_4x4_p_V_1_address0 = tmp_108_cast_fu_933_p1;

assign buffer1_1_96_4x4_p_V_20_address0 = tmp_108_cast_fu_933_p1;

assign buffer1_1_96_4x4_p_V_21_address0 = tmp_108_cast_fu_933_p1;

assign buffer1_1_96_4x4_p_V_22_address0 = tmp_108_cast_fu_933_p1;

assign buffer1_1_96_4x4_p_V_23_address0 = tmp_108_cast_fu_933_p1;

assign buffer1_1_96_4x4_p_V_24_address0 = tmp_108_cast_fu_933_p1;

assign buffer1_1_96_4x4_p_V_2_address0 = tmp_108_cast_fu_933_p1;

assign buffer1_1_96_4x4_p_V_3_address0 = tmp_108_cast_fu_933_p1;

assign buffer1_1_96_4x4_p_V_4_address0 = tmp_108_cast_fu_933_p1;

assign buffer1_1_96_4x4_p_V_5_address0 = tmp_108_cast_fu_933_p1;

assign buffer1_1_96_4x4_p_V_6_address0 = tmp_108_cast_fu_933_p1;

assign buffer1_1_96_4x4_p_V_7_address0 = tmp_108_cast_fu_933_p1;

assign buffer1_1_96_4x4_p_V_8_address0 = tmp_108_cast_fu_933_p1;

assign buffer1_1_96_4x4_p_V_9_address0 = tmp_108_cast_fu_933_p1;

assign carry_fu_1099_p2 = (tmp_104_fu_1071_p3 & tmp_34_fu_1093_p2);

assign co_3_fu_655_p2 = (co_reg_474 + 7'd1);

assign co_cast_cast_fu_589_p1 = co_reg_474;

assign co_cast_fu_584_p1 = co_reg_474;

assign deleted_ones_fu_1150_p3 = ((carry_reg_1604[0:0] === 1'b1) ? p_41_i_i_fu_1145_p2 : Range1_all_ones_fu_1122_p2);

assign deleted_zeros_fu_1132_p3 = ((carry_reg_1604[0:0] === 1'b1) ? Range1_all_ones_fu_1122_p2 : Range1_all_zeros_fu_1127_p2);

assign exitcond1_fu_744_p2 = ((h_reg_508 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond2_fu_784_p2 = ((w_reg_520 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond3_fu_817_p2 = ((m_reg_544 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond9_fu_649_p2 = ((co_reg_474 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond_fu_896_p2 = ((n_reg_567 == 2'd3) ? 1'b1 : 1'b0);

assign h_3_fu_790_p2 = (h_reg_508 + 3'd1);

assign h_cast9_cast_fu_709_p1 = h_reg_508;

assign idx_urem_fu_762_p3 = ((tmp_91_fu_756_p2[0:0] === 1'b1) ? next_urem_fu_750_p2 : 7'd0);

assign isneg_not_fu_1291_p2 = (isneg_reg_1647 ^ 1'd1);

assign m_3_fu_823_p2 = (2'd1 + m_reg_544);

assign m_cast7_cast_fu_796_p1 = m_reg_544;

assign n_3_fu_902_p2 = (n_reg_567 + 2'd1);

assign n_cast6_cast_fu_882_p1 = n_reg_567;

assign newsignbit_fu_1085_p3 = p_Val2_24_fu_1079_p2[32'd7];

assign next_mul_fu_578_p2 = (phi_mul_reg_485 + 15'd171);

assign next_urem_fu_750_p2 = (phi_urem_reg_496 + 7'd1);

assign output_V_address0 = output_V_addr_reg_1381;

assign output_V_d0 = ((brmerge9_fu_1296_p2[0:0] === 1'b1) ? result_V_mux_fu_1301_p3 : p_result_V_fu_1308_p3);

assign overflow_fu_1178_p2 = (brmerge_i_i3_fu_1168_p2 & tmp_37_fu_1173_p2);

assign p_38_i_i_fu_1157_p2 = (carry_reg_1604 & Range1_all_ones_fu_1122_p2);

assign p_41_i_i_fu_1145_p2 = (signbit_reg_1585 & tmp_36_fu_1139_p2);

assign p_Val2_19_fu_1249_p2 = ($signed(tmp_s_fu_1245_p1) + $signed(tmp_fu_1241_p1));

assign p_Val2_22_fu_1045_p2 = ($signed(tmp_45_cast_fu_1041_p1) + $signed(p_Val2_2_reg_1570));

assign p_Val2_23_fu_1058_p4 = {{p_Val2_22_fu_1045_p2[13:6]}};

assign p_Val2_24_fu_1079_p2 = (p_Val2_23_fu_1058_p4 + tmp_33_fu_1068_p1);

assign p_Val2_24_mux_fu_1221_p3 = ((brmerge_i_i_i_reg_1637[0:0] === 1'b1) ? 8'd127 : p_Val2_24_reg_1592);

assign p_Val2_2_fu_1019_p0 = weight_V_load_reg_1560;

assign p_Val2_2_fu_1019_p1 = tmp_28_reg_1565;

assign p_Val2_2_fu_1019_p2 = ($signed(p_Val2_2_fu_1019_p0) * $signed(p_Val2_2_fu_1019_p1));

assign p_Val2_s_50_fu_1227_p3 = ((underflow_reg_1632[0:0] === 1'b1) ? 8'd128 : p_Val2_24_reg_1592);

assign p_not_i_i_fu_1162_p2 = (deleted_zeros_fu_1132_p3 ^ 1'd1);

assign p_result_V_fu_1308_p3 = ((underflow_4_fu_1282_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_1654);

assign p_shl1_cast_fu_635_p1 = tmp_82_fu_627_p3;

assign p_shl2_cast_fu_601_p1 = tmp_79_fu_593_p3;

assign p_shl3_cast_fu_683_p1 = tmp_85_fu_675_p3;

assign p_shl4_cast_fu_695_p1 = tmp_86_fu_687_p3;

assign p_shl5_cast_fu_722_p3 = {{tmp_89_fu_718_p1}, {3'd0}};

assign p_shl6_cast_fu_730_p3 = {{tmp_88_fu_713_p2}, {1'd0}};

assign p_shl8_cast_fu_862_p3 = {{tmp_98_reg_1407}, {3'd0}};

assign p_shl9_cast_fu_869_p3 = {{tmp_99_reg_1412}, {1'd0}};

assign p_shl_cast_fu_623_p1 = tmp_81_fu_615_p3;

assign result_V_fu_1263_p2 = (bias_V_q0 + p_Val2_s_reg_532);

assign result_V_mux_fu_1301_p3 = ((brmerge_i_i_fu_1287_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_1654);

assign sum_V_fu_1233_p3 = ((underflow_not_fu_1216_p2[0:0] === 1'b1) ? p_Val2_24_mux_fu_1221_p3 : p_Val2_s_50_fu_1227_p3);

assign tmp2_cast_fu_835_p1 = $signed(tmp2_fu_829_p2);

assign tmp2_fu_829_p2 = ($signed(2'd3) + $signed(m_reg_544));

assign tmp3_cast_fu_914_p1 = $signed(tmp3_fu_908_p2);

assign tmp3_fu_908_p2 = ($signed(n_reg_567) + $signed(2'd3));

assign tmp4_demorgan_fu_1189_p2 = (p_38_i_i_fu_1157_p2 | brmerge40_demorgan_i_fu_1184_p2);

assign tmp4_fu_1195_p2 = (tmp4_demorgan_fu_1189_p2 ^ 1'd1);

assign tmp5_fu_1212_p2 = (brmerge40_demorgan_i_reg_1627 | tmp_37_reg_1622);

assign tmp_100_fu_886_p2 = (tmp_95_reg_1394 + n_cast6_cast_fu_882_p1);

assign tmp_101_fu_928_p2 = (tmp_43_cast_cast_fu_924_p1 + tmp_97_reg_1417);

assign tmp_104_fu_1071_p3 = p_Val2_22_fu_1045_p2[32'd13];

assign tmp_106_fu_1115_p3 = p_Val2_22_reg_1580[32'd14];

assign tmp_107_cast_fu_891_p1 = tmp_100_fu_886_p2;

assign tmp_108_cast_fu_933_p1 = tmp_101_reg_1435;

assign tmp_29_fu_1277_p2 = (newsignbit_4_reg_1660 ^ 1'd1);

assign tmp_30_fu_839_p2 = ($signed(tmp2_cast_fu_835_p1) + $signed(h_reg_508));

assign tmp_31_fu_918_p2 = ($signed(tmp3_cast_fu_914_p1) + $signed(w_reg_520));

assign tmp_32_fu_1033_p3 = {{p_Val2_21_reg_555}, {6'd0}};

assign tmp_33_fu_1068_p1 = tmp_103_reg_1575;

assign tmp_34_fu_1093_p2 = (newsignbit_fu_1085_p3 ^ 1'd1);

assign tmp_36_fu_1139_p2 = (tmp_106_fu_1115_p3 ^ 1'd1);

assign tmp_37_fu_1173_p2 = (signbit_reg_1585 ^ 1'd1);

assign tmp_39_cast_cast_fu_845_p1 = tmp_30_fu_839_p2;

assign tmp_43_cast_cast_fu_924_p1 = tmp_31_fu_918_p2;

assign tmp_45_cast_fu_1041_p1 = $signed(tmp_32_fu_1033_p3);

assign tmp_79_fu_593_p3 = {{co_reg_474}, {2'd0}};

assign tmp_80_fu_605_p2 = (p_shl2_cast_fu_601_p1 - co_cast_cast_fu_589_p1);

assign tmp_81_fu_615_p3 = {{co_reg_474}, {3'd0}};

assign tmp_82_fu_627_p3 = {{co_reg_474}, {1'd0}};

assign tmp_83_fu_639_p2 = (p_shl_cast_fu_623_p1 - p_shl1_cast_fu_635_p1);

assign tmp_84_fu_665_p4 = {{phi_mul_reg_485[14:12]}};

assign tmp_85_fu_675_p3 = {{tmp_84_fu_665_p4}, {3'd0}};

assign tmp_86_cast_fu_611_p1 = $signed(tmp_80_fu_605_p2);

assign tmp_86_fu_687_p3 = {{tmp_84_fu_665_p4}, {1'd0}};

assign tmp_87_fu_699_p2 = (p_shl3_cast_fu_683_p1 - p_shl4_cast_fu_695_p1);

assign tmp_88_fu_713_p2 = ($signed(h_cast9_cast_fu_709_p1) + $signed(tmp_89_cast_reg_1340));

assign tmp_89_cast_fu_645_p1 = $signed(tmp_83_fu_639_p2);

assign tmp_89_fu_718_p1 = tmp_88_fu_713_p2[9:0];

assign tmp_90_fu_738_p2 = (p_shl5_cast_fu_722_p3 - p_shl6_cast_fu_730_p3);

assign tmp_91_fu_756_p2 = ((next_urem_fu_750_p2 < 7'd24) ? 1'b1 : 1'b0);

assign tmp_92_fu_774_p2 = (tmp_90_reg_1368 + w_cast8_cast_fu_770_p1);

assign tmp_93_fu_800_p2 = ($signed(m_cast7_cast_fu_796_p1) + $signed(tmp_86_cast_reg_1335));

assign tmp_94_cast_fu_705_p1 = $signed(tmp_87_fu_699_p2);

assign tmp_94_fu_805_p2 = tmp_93_fu_800_p2 << 11'd2;

assign tmp_95_fu_811_p2 = (tmp_94_fu_805_p2 - tmp_93_fu_800_p2);

assign tmp_96_fu_849_p2 = ($signed(tmp_39_cast_cast_fu_845_p1) + $signed(tmp_94_cast_reg_1358));

assign tmp_97_fu_876_p2 = (p_shl8_cast_fu_862_p3 - p_shl9_cast_fu_869_p3);

assign tmp_98_fu_854_p1 = tmp_96_fu_849_p2[5:0];

assign tmp_99_cast_fu_779_p1 = tmp_92_fu_774_p2;

assign tmp_99_fu_858_p1 = tmp_96_fu_849_p2[7:0];

assign tmp_fu_1241_p1 = $signed(p_Val2_s_reg_532);

assign tmp_s_fu_1245_p1 = $signed(bias_V_q0);

assign underflow_4_fu_1282_p2 = (isneg_reg_1647 & tmp_29_fu_1277_p2);

assign underflow_fu_1201_p2 = (signbit_reg_1585 & tmp4_fu_1195_p2);

assign underflow_not_fu_1216_p2 = (tmp5_fu_1212_p2 | p_38_i_i_reg_1617);

assign w_3_fu_1324_p2 = (w_reg_520 + 3'd1);

assign w_cast8_cast_fu_770_p1 = w_reg_520;

assign weight_V_address0 = tmp_107_cast_fu_891_p1;

always @ (posedge ap_clk) begin
    tmp_89_cast_reg_1340[0] <= 1'b0;
    arrayNo_cast_reg_1353[31:7] <= 25'b0000000000000000000000000;
    tmp_94_cast_reg_1358[0] <= 1'b0;
    tmp_90_reg_1368[0] <= 1'b0;
    tmp_97_reg_1417[0] <= 1'b0;
end

endmodule //subconv_3x3_4_no_rel
