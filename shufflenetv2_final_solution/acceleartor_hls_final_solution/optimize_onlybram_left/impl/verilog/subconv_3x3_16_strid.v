// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_16_strid (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_V_address0;
output   input_V_ce0;
input  [7:0] input_V_q0;
output  [8:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [5:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] tmp_146_fu_260_p2;
reg   [10:0] tmp_146_reg_860;
wire    ap_CS_fsm_state2;
wire  signed [9:0] tmp_157_cast_fu_284_p1;
reg  signed [9:0] tmp_157_cast_reg_865;
wire   [9:0] tmp_150_fu_300_p2;
reg   [9:0] tmp_150_reg_870;
wire   [5:0] co_5_fu_312_p2;
reg   [5:0] co_5_reg_878;
reg   [5:0] bias_V_addr_reg_883;
wire   [0:0] exitcond8_fu_306_p2;
wire   [13:0] tmp_154_fu_351_p2;
reg   [13:0] tmp_154_reg_888;
wire    ap_CS_fsm_state3;
wire   [4:0] tmp_fu_363_p3;
reg   [4:0] tmp_reg_896;
wire   [0:0] exitcond9_fu_357_p2;
reg   [12:0] output_V_addr_reg_901;
wire    ap_CS_fsm_state4;
wire   [4:0] tmp_s_fu_391_p3;
reg   [4:0] tmp_s_reg_909;
wire   [0:0] exitcond3_fu_385_p2;
wire   [3:0] h_5_fu_399_p2;
wire   [9:0] tmp_158_fu_420_p2;
reg   [9:0] tmp_158_reg_919;
wire    ap_CS_fsm_state5;
wire   [1:0] m_5_fu_432_p2;
reg   [1:0] m_5_reg_927;
wire   [14:0] tmp_160_fu_482_p2;
reg   [14:0] tmp_160_reg_932;
wire   [0:0] exitcond4_fu_426_p2;
wire   [3:0] w_5_fu_488_p2;
reg   [3:0] w_5_reg_937;
wire    ap_CS_fsm_state6;
wire   [1:0] n_5_fu_514_p2;
reg   [1:0] n_5_reg_950;
wire   [0:0] exitcond_fu_508_p2;
reg   [7:0] weight_V_load_reg_960;
wire    ap_CS_fsm_state7;
reg   [7:0] input_V_load_reg_965;
wire   [15:0] p_Val2_5_fu_555_p2;
reg   [15:0] p_Val2_5_reg_970;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_165_reg_975;
wire   [15:0] p_Val2_43_fu_581_p2;
reg   [15:0] p_Val2_43_reg_980;
wire    ap_CS_fsm_state9;
reg   [0:0] signbit_reg_985;
wire   [7:0] p_Val2_45_fu_615_p2;
reg   [7:0] p_Val2_45_reg_992;
wire   [0:0] newsignbit_fu_621_p3;
reg   [0:0] newsignbit_reg_998;
wire   [0:0] carry_fu_635_p2;
reg   [0:0] carry_reg_1004;
reg   [1:0] tmp_70_reg_1011;
wire   [0:0] p_38_i_i_fu_693_p2;
reg   [0:0] p_38_i_i_reg_1017;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_72_fu_709_p2;
reg   [0:0] tmp_72_reg_1022;
wire   [0:0] brmerge40_demorgan_i_fu_720_p2;
reg   [0:0] brmerge40_demorgan_i_reg_1027;
wire   [0:0] underflow_fu_737_p2;
reg   [0:0] underflow_reg_1032;
wire   [0:0] brmerge_i_i_i_fu_742_p2;
reg   [0:0] brmerge_i_i_i_reg_1037;
wire   [7:0] sum_V_fu_769_p3;
wire    ap_CS_fsm_state11;
reg   [0:0] isneg_reg_1047;
wire    ap_CS_fsm_state12;
wire   [7:0] result_V_fu_799_p2;
reg   [7:0] result_V_reg_1054;
reg   [0:0] newsignbit_7_reg_1060;
reg   [5:0] co_reg_142;
reg   [3:0] h_reg_153;
reg   [3:0] w_reg_165;
wire    ap_CS_fsm_state13;
reg   [7:0] p_Val2_s_reg_177;
reg   [1:0] m_reg_189;
reg   [7:0] p_Val2_42_reg_200;
reg   [1:0] n_reg_212;
wire   [31:0] co_cast_fu_223_p1;
wire   [31:0] tmp_165_cast_fu_380_p1;
wire   [31:0] tmp_173_cast_fu_503_p1;
wire   [31:0] tmp_174_cast_fu_544_p1;
wire   [9:0] tmp_144_fu_232_p3;
wire   [6:0] tmp_145_fu_244_p3;
wire   [10:0] p_shl4_cast_fu_256_p1;
wire   [10:0] p_shl3_cast_fu_240_p1;
wire   [7:0] tmp_147_fu_266_p3;
wire   [8:0] p_shl2_cast_fu_274_p1;
wire   [8:0] co_cast_cast_fu_228_p1;
wire   [8:0] tmp_148_fu_278_p2;
wire   [8:0] tmp_149_fu_288_p3;
wire   [9:0] p_shl4_cast1_fu_252_p1;
wire   [9:0] p_shl_cast_fu_296_p1;
wire   [9:0] h_cast9_cast_fu_318_p1;
wire   [9:0] tmp_151_fu_322_p2;
wire   [12:0] tmp_152_fu_327_p3;
wire   [10:0] tmp_153_fu_339_p3;
wire   [13:0] p_shl5_cast_fu_335_p1;
wire   [13:0] p_shl6_cast_fu_347_p1;
wire   [13:0] w_cast8_cast_fu_371_p1;
wire   [13:0] tmp_155_fu_375_p2;
wire   [9:0] m_cast7_cast_fu_405_p1;
wire   [9:0] tmp_156_fu_409_p2;
wire   [9:0] tmp_157_fu_414_p2;
wire   [1:0] tmp2_fu_438_p2;
wire  signed [4:0] tmp2_cast_fu_444_p1;
wire   [4:0] tmp_65_fu_448_p2;
wire   [10:0] tmp_90_cast_cast_fu_453_p1;
wire   [10:0] tmp_159_fu_457_p2;
wire   [11:0] tmp_161_fu_470_p3;
wire   [14:0] p_shl8_cast_fu_462_p3;
wire   [14:0] p_shl9_cast_fu_478_p1;
wire   [9:0] n_cast6_cast_fu_494_p1;
wire   [9:0] tmp_162_fu_498_p2;
wire   [1:0] tmp3_fu_520_p2;
wire  signed [4:0] tmp3_cast_fu_526_p1;
wire   [4:0] tmp_66_fu_530_p2;
wire   [14:0] tmp_94_cast_cast_fu_535_p1;
wire   [14:0] tmp_163_fu_539_p2;
wire  signed [7:0] p_Val2_5_fu_555_p0;
wire  signed [7:0] p_Val2_5_fu_555_p1;
wire   [13:0] tmp_67_fu_569_p3;
wire  signed [15:0] tmp_96_cast_fu_577_p1;
wire   [7:0] p_Val2_44_fu_594_p4;
wire   [7:0] tmp_68_fu_604_p1;
wire   [0:0] tmp_166_fu_607_p3;
wire   [0:0] tmp_69_fu_629_p2;
wire   [0:0] Range1_all_ones_fu_658_p2;
wire   [0:0] Range1_all_zeros_fu_663_p2;
wire   [0:0] tmp_168_fu_651_p3;
wire   [0:0] tmp_71_fu_675_p2;
wire   [0:0] p_41_i_i_fu_681_p2;
wire   [0:0] deleted_zeros_fu_668_p3;
wire   [0:0] p_not_i_i_fu_698_p2;
wire   [0:0] brmerge_i_i5_fu_704_p2;
wire   [0:0] deleted_ones_fu_686_p3;
wire   [0:0] tmp4_demorgan_fu_725_p2;
wire   [0:0] tmp4_fu_731_p2;
wire   [0:0] overflow_fu_714_p2;
wire   [0:0] tmp5_fu_748_p2;
wire   [0:0] underflow_not_fu_752_p2;
wire   [7:0] p_Val2_40_mux_fu_757_p3;
wire   [7:0] p_Val2_s_65_fu_763_p3;
wire  signed [8:0] tmp_63_fu_781_p1;
wire  signed [8:0] tmp_62_fu_777_p1;
wire   [8:0] p_Val2_40_fu_785_p2;
wire   [0:0] tmp_64_fu_813_p2;
wire   [0:0] isneg_not_fu_827_p2;
wire   [0:0] brmerge_i_i_fu_823_p2;
wire   [0:0] underflow_7_fu_818_p2;
wire   [0:0] brmerge9_fu_832_p2;
wire   [7:0] result_V_mux_fu_837_p3;
wire   [7:0] p_result_V_fu_844_p3;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_357_p2 == 1'd1))) begin
        co_reg_142 <= co_5_reg_878;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_142 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_306_p2 == 1'd0))) begin
        h_reg_153 <= 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_385_p2 == 1'd1))) begin
        h_reg_153 <= h_5_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_508_p2))) begin
        m_reg_189 <= m_5_reg_927;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_385_p2))) begin
        m_reg_189 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        n_reg_212 <= n_5_reg_950;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_426_p2))) begin
        n_reg_212 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_42_reg_200 <= sum_V_fu_769_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_426_p2))) begin
        p_Val2_42_reg_200 <= p_Val2_s_reg_177;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_508_p2))) begin
        p_Val2_s_reg_177 <= p_Val2_42_reg_200;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_385_p2))) begin
        p_Val2_s_reg_177 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond9_fu_357_p2))) begin
        w_reg_165 <= 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        w_reg_165 <= w_5_reg_937;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_306_p2 == 1'd0))) begin
        bias_V_addr_reg_883 <= co_cast_fu_223_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        brmerge40_demorgan_i_reg_1027 <= brmerge40_demorgan_i_fu_720_p2;
        brmerge_i_i_i_reg_1037 <= brmerge_i_i_i_fu_742_p2;
        p_38_i_i_reg_1017 <= p_38_i_i_fu_693_p2;
        tmp_72_reg_1022 <= tmp_72_fu_709_p2;
        underflow_reg_1032 <= underflow_fu_737_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        carry_reg_1004 <= carry_fu_635_p2;
        newsignbit_reg_998 <= p_Val2_45_fu_615_p2[32'd7];
        p_Val2_43_reg_980 <= p_Val2_43_fu_581_p2;
        p_Val2_45_reg_992 <= p_Val2_45_fu_615_p2;
        signbit_reg_985 <= p_Val2_43_fu_581_p2[32'd15];
        tmp_70_reg_1011 <= {{p_Val2_43_fu_581_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_5_reg_878 <= co_5_fu_312_p2;
        tmp_146_reg_860[10 : 1] <= tmp_146_fu_260_p2[10 : 1];
        tmp_150_reg_870[9 : 1] <= tmp_150_fu_300_p2[9 : 1];
        tmp_157_cast_reg_865 <= tmp_157_cast_fu_284_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_V_load_reg_965 <= input_V_q0;
        weight_V_load_reg_960 <= weight_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        isneg_reg_1047 <= p_Val2_40_fu_785_p2[32'd8];
        newsignbit_7_reg_1060 <= result_V_fu_799_p2[32'd7];
        result_V_reg_1054 <= result_V_fu_799_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_5_reg_927 <= m_5_fu_432_p2;
        tmp_158_reg_919 <= tmp_158_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_5_reg_950 <= n_5_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_addr_reg_901 <= tmp_165_cast_fu_380_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_5_reg_970 <= p_Val2_5_fu_555_p2;
        tmp_165_reg_975 <= p_Val2_5_fu_555_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_154_reg_888[13 : 1] <= tmp_154_fu_351_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_426_p2))) begin
        tmp_160_reg_932[14 : 1] <= tmp_160_fu_482_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond9_fu_357_p2))) begin
        tmp_reg_896[4 : 1] <= tmp_fu_363_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_385_p2))) begin
        tmp_s_reg_909[4 : 1] <= tmp_s_fu_391_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond4_fu_426_p2))) begin
        w_5_reg_937 <= w_5_fu_488_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_306_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_306_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_306_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_357_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_385_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_426_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_508_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_658_p2 = ((tmp_70_reg_1011 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_663_p2 = ((tmp_70_reg_1011 == 2'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_883;

assign brmerge40_demorgan_i_fu_720_p2 = (newsignbit_reg_998 & deleted_ones_fu_686_p3);

assign brmerge9_fu_832_p2 = (newsignbit_7_reg_1060 | isneg_not_fu_827_p2);

assign brmerge_i_i5_fu_704_p2 = (newsignbit_reg_998 | p_not_i_i_fu_698_p2);

assign brmerge_i_i_fu_823_p2 = (isneg_reg_1047 ^ newsignbit_7_reg_1060);

assign brmerge_i_i_i_fu_742_p2 = (underflow_fu_737_p2 | overflow_fu_714_p2);

assign carry_fu_635_p2 = (tmp_166_fu_607_p3 & tmp_69_fu_629_p2);

assign co_5_fu_312_p2 = (co_reg_142 + 6'd1);

assign co_cast_cast_fu_228_p1 = co_reg_142;

assign co_cast_fu_223_p1 = co_reg_142;

assign deleted_ones_fu_686_p3 = ((carry_reg_1004[0:0] === 1'b1) ? p_41_i_i_fu_681_p2 : Range1_all_ones_fu_658_p2);

assign deleted_zeros_fu_668_p3 = ((carry_reg_1004[0:0] === 1'b1) ? Range1_all_ones_fu_658_p2 : Range1_all_zeros_fu_663_p2);

assign exitcond3_fu_385_p2 = ((w_reg_165 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond4_fu_426_p2 = ((m_reg_189 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond8_fu_306_p2 = ((co_reg_142 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond9_fu_357_p2 = ((h_reg_153 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_fu_508_p2 = ((n_reg_212 == 2'd3) ? 1'b1 : 1'b0);

assign h_5_fu_399_p2 = (h_reg_153 + 4'd1);

assign h_cast9_cast_fu_318_p1 = h_reg_153;

assign input_V_address0 = tmp_174_cast_fu_544_p1;

assign isneg_not_fu_827_p2 = (isneg_reg_1047 ^ 1'd1);

assign m_5_fu_432_p2 = (2'd1 + m_reg_189);

assign m_cast7_cast_fu_405_p1 = m_reg_189;

assign n_5_fu_514_p2 = (n_reg_212 + 2'd1);

assign n_cast6_cast_fu_494_p1 = n_reg_212;

assign newsignbit_fu_621_p3 = p_Val2_45_fu_615_p2[32'd7];

assign output_V_address0 = output_V_addr_reg_901;

assign output_V_d0 = ((brmerge9_fu_832_p2[0:0] === 1'b1) ? result_V_mux_fu_837_p3 : p_result_V_fu_844_p3);

assign overflow_fu_714_p2 = (brmerge_i_i5_fu_704_p2 & tmp_72_fu_709_p2);

assign p_38_i_i_fu_693_p2 = (carry_reg_1004 & Range1_all_ones_fu_658_p2);

assign p_41_i_i_fu_681_p2 = (signbit_reg_985 & tmp_71_fu_675_p2);

assign p_Val2_40_fu_785_p2 = ($signed(tmp_63_fu_781_p1) + $signed(tmp_62_fu_777_p1));

assign p_Val2_40_mux_fu_757_p3 = ((brmerge_i_i_i_reg_1037[0:0] === 1'b1) ? 8'd127 : p_Val2_45_reg_992);

assign p_Val2_43_fu_581_p2 = ($signed(tmp_96_cast_fu_577_p1) + $signed(p_Val2_5_reg_970));

assign p_Val2_44_fu_594_p4 = {{p_Val2_43_fu_581_p2[13:6]}};

assign p_Val2_45_fu_615_p2 = (p_Val2_44_fu_594_p4 + tmp_68_fu_604_p1);

assign p_Val2_5_fu_555_p0 = weight_V_load_reg_960;

assign p_Val2_5_fu_555_p1 = input_V_load_reg_965;

assign p_Val2_5_fu_555_p2 = ($signed(p_Val2_5_fu_555_p0) * $signed(p_Val2_5_fu_555_p1));

assign p_Val2_s_65_fu_763_p3 = ((underflow_reg_1032[0:0] === 1'b1) ? 8'd128 : p_Val2_45_reg_992);

assign p_not_i_i_fu_698_p2 = (deleted_zeros_fu_668_p3 ^ 1'd1);

assign p_result_V_fu_844_p3 = ((underflow_7_fu_818_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_1054);

assign p_shl2_cast_fu_274_p1 = tmp_147_fu_266_p3;

assign p_shl3_cast_fu_240_p1 = tmp_144_fu_232_p3;

assign p_shl4_cast1_fu_252_p1 = tmp_145_fu_244_p3;

assign p_shl4_cast_fu_256_p1 = tmp_145_fu_244_p3;

assign p_shl5_cast_fu_335_p1 = tmp_152_fu_327_p3;

assign p_shl6_cast_fu_347_p1 = tmp_153_fu_339_p3;

assign p_shl8_cast_fu_462_p3 = {{tmp_159_fu_457_p2}, {4'd0}};

assign p_shl9_cast_fu_478_p1 = tmp_161_fu_470_p3;

assign p_shl_cast_fu_296_p1 = tmp_149_fu_288_p3;

assign result_V_fu_799_p2 = (bias_V_q0 + p_Val2_s_reg_177);

assign result_V_mux_fu_837_p3 = ((brmerge_i_i_fu_823_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_1054);

assign sum_V_fu_769_p3 = ((underflow_not_fu_752_p2[0:0] === 1'b1) ? p_Val2_40_mux_fu_757_p3 : p_Val2_s_65_fu_763_p3);

assign tmp2_cast_fu_444_p1 = $signed(tmp2_fu_438_p2);

assign tmp2_fu_438_p2 = (m_reg_189 ^ 2'd2);

assign tmp3_cast_fu_526_p1 = $signed(tmp3_fu_520_p2);

assign tmp3_fu_520_p2 = (n_reg_212 ^ 2'd2);

assign tmp4_demorgan_fu_725_p2 = (p_38_i_i_fu_693_p2 | brmerge40_demorgan_i_fu_720_p2);

assign tmp4_fu_731_p2 = (tmp4_demorgan_fu_725_p2 ^ 1'd1);

assign tmp5_fu_748_p2 = (brmerge40_demorgan_i_reg_1027 | tmp_72_reg_1022);

assign tmp_144_fu_232_p3 = {{co_reg_142}, {4'd0}};

assign tmp_145_fu_244_p3 = {{co_reg_142}, {1'd0}};

assign tmp_146_fu_260_p2 = (p_shl4_cast_fu_256_p1 + p_shl3_cast_fu_240_p1);

assign tmp_147_fu_266_p3 = {{co_reg_142}, {2'd0}};

assign tmp_148_fu_278_p2 = (p_shl2_cast_fu_274_p1 - co_cast_cast_fu_228_p1);

assign tmp_149_fu_288_p3 = {{co_reg_142}, {3'd0}};

assign tmp_150_fu_300_p2 = (p_shl4_cast1_fu_252_p1 + p_shl_cast_fu_296_p1);

assign tmp_151_fu_322_p2 = (h_cast9_cast_fu_318_p1 + tmp_150_reg_870);

assign tmp_152_fu_327_p3 = {{tmp_151_fu_322_p2}, {3'd0}};

assign tmp_153_fu_339_p3 = {{tmp_151_fu_322_p2}, {1'd0}};

assign tmp_154_fu_351_p2 = (p_shl5_cast_fu_335_p1 + p_shl6_cast_fu_347_p1);

assign tmp_155_fu_375_p2 = (tmp_154_reg_888 + w_cast8_cast_fu_371_p1);

assign tmp_156_fu_409_p2 = ($signed(m_cast7_cast_fu_405_p1) + $signed(tmp_157_cast_reg_865));

assign tmp_157_cast_fu_284_p1 = $signed(tmp_148_fu_278_p2);

assign tmp_157_fu_414_p2 = tmp_156_fu_409_p2 << 10'd2;

assign tmp_158_fu_420_p2 = (tmp_157_fu_414_p2 - tmp_156_fu_409_p2);

assign tmp_159_fu_457_p2 = (tmp_90_cast_cast_fu_453_p1 + tmp_146_reg_860);

assign tmp_160_fu_482_p2 = (p_shl8_cast_fu_462_p3 + p_shl9_cast_fu_478_p1);

assign tmp_161_fu_470_p3 = {{tmp_159_fu_457_p2}, {1'd0}};

assign tmp_162_fu_498_p2 = (tmp_158_reg_919 + n_cast6_cast_fu_494_p1);

assign tmp_163_fu_539_p2 = (tmp_94_cast_cast_fu_535_p1 + tmp_160_reg_932);

assign tmp_165_cast_fu_380_p1 = tmp_155_fu_375_p2;

assign tmp_166_fu_607_p3 = p_Val2_43_fu_581_p2[32'd13];

assign tmp_168_fu_651_p3 = p_Val2_43_reg_980[32'd14];

assign tmp_173_cast_fu_503_p1 = tmp_162_fu_498_p2;

assign tmp_174_cast_fu_544_p1 = tmp_163_fu_539_p2;

assign tmp_62_fu_777_p1 = $signed(p_Val2_s_reg_177);

assign tmp_63_fu_781_p1 = $signed(bias_V_q0);

assign tmp_64_fu_813_p2 = (newsignbit_7_reg_1060 ^ 1'd1);

assign tmp_65_fu_448_p2 = ($signed(tmp2_cast_fu_444_p1) + $signed(tmp_reg_896));

assign tmp_66_fu_530_p2 = ($signed(tmp3_cast_fu_526_p1) + $signed(tmp_s_reg_909));

assign tmp_67_fu_569_p3 = {{p_Val2_42_reg_200}, {6'd0}};

assign tmp_68_fu_604_p1 = tmp_165_reg_975;

assign tmp_69_fu_629_p2 = (newsignbit_fu_621_p3 ^ 1'd1);

assign tmp_71_fu_675_p2 = (tmp_168_fu_651_p3 ^ 1'd1);

assign tmp_72_fu_709_p2 = (signbit_reg_985 ^ 1'd1);

assign tmp_90_cast_cast_fu_453_p1 = tmp_65_fu_448_p2;

assign tmp_94_cast_cast_fu_535_p1 = tmp_66_fu_530_p2;

assign tmp_96_cast_fu_577_p1 = $signed(tmp_67_fu_569_p3);

assign tmp_fu_363_p3 = {{h_reg_153}, {1'd0}};

assign tmp_s_fu_391_p3 = {{w_reg_165}, {1'd0}};

assign underflow_7_fu_818_p2 = (isneg_reg_1047 & tmp_64_fu_813_p2);

assign underflow_fu_737_p2 = (signbit_reg_985 & tmp4_fu_731_p2);

assign underflow_not_fu_752_p2 = (tmp5_fu_748_p2 | p_38_i_i_reg_1017);

assign w_5_fu_488_p2 = (w_reg_165 + 4'd1);

assign w_cast8_cast_fu_371_p1 = w_reg_165;

assign weight_V_address0 = tmp_173_cast_fu_503_p1;

always @ (posedge ap_clk) begin
    tmp_146_reg_860[0] <= 1'b0;
    tmp_150_reg_870[0] <= 1'b0;
    tmp_154_reg_888[0] <= 1'b0;
    tmp_reg_896[0] <= 1'b0;
    tmp_s_reg_909[0] <= 1'b0;
    tmp_160_reg_932[0] <= 1'b0;
end

endmodule //subconv_3x3_16_strid
