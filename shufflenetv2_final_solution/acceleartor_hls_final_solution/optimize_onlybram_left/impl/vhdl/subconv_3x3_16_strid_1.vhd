-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_16_strid_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_23_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_23_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_23_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_22_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_22_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_22_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_11_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_11_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_6_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_5_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_4_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_3_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_2_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_1_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_21_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_21_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_21_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_20_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_20_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_20_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_19_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_19_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_19_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_18_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_18_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_18_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_17_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_17_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_17_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_16_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_16_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_16_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_15_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_15_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_15_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_14_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_14_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_14_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_13_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_13_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_13_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_12_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_12_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_10_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_9_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_8_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_1_Downs_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_1_Downs_7_ce0 : OUT STD_LOGIC;
    ShuffleConvs_1_Downs_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_16_strid_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_56 : STD_LOGIC_VECTOR (12 downto 0) := "0000001010110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul_fu_574_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul_reg_1327 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_128_cast_fu_607_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_128_cast_reg_1332 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_123_fu_635_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_123_reg_1337 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_5_fu_647_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal co_5_reg_1345 : STD_LOGIC_VECTOR (5 downto 0);
    signal arrayNo_cast_fu_673_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayNo_cast_reg_1350 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond8_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_129_fu_711_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_129_reg_1355 : STD_LOGIC_VECTOR (10 downto 0);
    signal bias_V_addr_reg_1360 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_133_fu_750_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_133_reg_1365 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_762_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_1373 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond9_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_addr_reg_1378 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_s_fu_790_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_reg_1386 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_5_fu_798_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_137_fu_819_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_137_reg_1396 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m_5_fu_831_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_5_reg_1404 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_139_fu_873_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_139_reg_1409 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond2_fu_825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_5_fu_879_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_5_reg_1414 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal n_5_fu_905_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_5_reg_1427 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_load_reg_1552 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_50_fu_963_p26 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_reg_1557 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_4_fu_1022_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_4_reg_1562 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_145_reg_1567 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_36_fu_1048_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_36_reg_1572 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal signbit_reg_1577 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_38_fu_1082_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_38_reg_1584 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_1088_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_1590 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_1102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_1596 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_reg_1603 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_1160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_1609 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_61_fu_1176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_reg_1614 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_1187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_1619 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_1624 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_1209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_1629 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_1236_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal isneg_reg_1639 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal result_V_fu_1266_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_1646 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_6_reg_1652 : STD_LOGIC_VECTOR (0 downto 0);
    signal co_reg_482 : STD_LOGIC_VECTOR (5 downto 0);
    signal phi_mul_reg_493 : STD_LOGIC_VECTOR (12 downto 0);
    signal h_reg_504 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_516 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_Val2_s_reg_528 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_540 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_35_reg_551 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_563 : STD_LOGIC_VECTOR (1 downto 0);
    signal co_cast_fu_580_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_143_cast_fu_779_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_151_cast_fu_894_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_152_cast_fu_935_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_119_fu_589_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_fu_597_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal co_cast_cast_fu_585_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_120_fu_601_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_121_fu_611_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_122_fu_623_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_631_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_619_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_124_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_125_fu_659_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal arrayNo_fu_665_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_126_fu_677_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_127_fu_687_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_128_fu_699_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl3_cast_fu_695_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_707_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal h_cast9_cast_fu_717_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_130_fu_721_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_131_fu_726_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_132_fu_738_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_734_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl6_cast_fu_746_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_cast8_cast_fu_770_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_134_fu_774_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal m_cast7_cast_fu_804_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_135_fu_808_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_136_fu_813_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp2_fu_837_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_843_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_54_fu_847_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_73_cast_cast_fu_852_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_138_fu_856_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_140_fu_861_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_141_fu_867_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal n_cast6_cast_fu_885_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_142_fu_889_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp3_fu_911_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_917_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_55_fu_921_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_77_cast_cast_fu_926_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_143_fu_930_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_4_fu_1022_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_4_fu_1022_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_56_fu_1036_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_79_cast_fu_1044_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_37_fu_1061_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_fu_1071_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_146_fu_1074_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_1096_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_1125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_1130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_148_fu_1118_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_1142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_1148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_1135_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_1165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i5_fu_1171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_1153_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_1192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_1198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_1181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_1215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_1219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_40_mux_fu_1224_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_60_fu_1230_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_fu_1248_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_51_fu_1244_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_33_fu_1252_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_53_fu_1280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_1294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_1290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_6_fu_1285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_1299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_1304_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_1311_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component ShuffleNetV2_mux_CeG IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mux_CeG_x_U349 : component ShuffleNetV2_mux_CeG
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din1 => ShuffleConvs_1_Downs_23_q0,
        din2 => ShuffleConvs_1_Downs_22_q0,
        din3 => ShuffleConvs_1_Downs_11_q0,
        din4 => ShuffleConvs_1_Downs_6_q0,
        din5 => ShuffleConvs_1_Downs_5_q0,
        din6 => ShuffleConvs_1_Downs_4_q0,
        din7 => ShuffleConvs_1_Downs_3_q0,
        din8 => ShuffleConvs_1_Downs_2_q0,
        din9 => ShuffleConvs_1_Downs_1_q0,
        din10 => ShuffleConvs_1_Downs_q0,
        din11 => ShuffleConvs_1_Downs_21_q0,
        din12 => ShuffleConvs_1_Downs_20_q0,
        din13 => ShuffleConvs_1_Downs_19_q0,
        din14 => ShuffleConvs_1_Downs_18_q0,
        din15 => ShuffleConvs_1_Downs_17_q0,
        din16 => ShuffleConvs_1_Downs_16_q0,
        din17 => ShuffleConvs_1_Downs_15_q0,
        din18 => ShuffleConvs_1_Downs_14_q0,
        din19 => ShuffleConvs_1_Downs_13_q0,
        din20 => ShuffleConvs_1_Downs_12_q0,
        din21 => ShuffleConvs_1_Downs_10_q0,
        din22 => ShuffleConvs_1_Downs_9_q0,
        din23 => ShuffleConvs_1_Downs_8_q0,
        din24 => ShuffleConvs_1_Downs_7_q0,
        din25 => arrayNo_cast_reg_1350,
        dout => tmp_50_fu_963_p26);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_482_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_756_p2 = ap_const_lv1_1))) then 
                co_reg_482 <= co_5_reg_1345;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_482 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    h_reg_504_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_641_p2 = ap_const_lv1_0))) then 
                h_reg_504 <= ap_const_lv4_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_784_p2 = ap_const_lv1_1))) then 
                h_reg_504 <= h_5_fu_798_p2;
            end if; 
        end if;
    end process;

    m_reg_540_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_899_p2))) then 
                m_reg_540 <= m_5_reg_1404;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_784_p2))) then 
                m_reg_540 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_563_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                n_reg_563 <= n_5_reg_1427;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_825_p2))) then 
                n_reg_563 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_35_reg_551_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_Val2_35_reg_551 <= sum_V_fu_1236_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_825_p2))) then 
                p_Val2_35_reg_551 <= p_Val2_s_reg_528;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_528_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_899_p2))) then 
                p_Val2_s_reg_528 <= p_Val2_35_reg_551;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_784_p2))) then 
                p_Val2_s_reg_528 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_493_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_756_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_493 <= next_mul_reg_1327;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_493 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    w_reg_516_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond9_fu_756_p2))) then 
                w_reg_516 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                w_reg_516 <= w_5_reg_1414;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_641_p2 = ap_const_lv1_0))) then
                    arrayNo_cast_reg_1350(5 downto 0) <= arrayNo_cast_fu_673_p1(5 downto 0);
                bias_V_addr_reg_1360 <= co_cast_fu_580_p1(6 - 1 downto 0);
                    tmp_129_reg_1355(10 downto 1) <= tmp_129_fu_711_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                brmerge40_demorgan_i_reg_1619 <= brmerge40_demorgan_i_fu_1187_p2;
                brmerge_i_i_i_reg_1629 <= brmerge_i_i_i_fu_1209_p2;
                p_38_i_i_reg_1609 <= p_38_i_i_fu_1160_p2;
                tmp_61_reg_1614 <= tmp_61_fu_1176_p2;
                underflow_reg_1624 <= underflow_fu_1204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                carry_reg_1596 <= carry_fu_1102_p2;
                newsignbit_reg_1590 <= p_Val2_38_fu_1082_p2(7 downto 7);
                p_Val2_36_reg_1572 <= p_Val2_36_fu_1048_p2;
                p_Val2_38_reg_1584 <= p_Val2_38_fu_1082_p2;
                signbit_reg_1577 <= p_Val2_36_fu_1048_p2(15 downto 15);
                tmp_59_reg_1603 <= p_Val2_36_fu_1048_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_5_reg_1345 <= co_5_fu_647_p2;
                next_mul_reg_1327 <= next_mul_fu_574_p2;
                    tmp_123_reg_1337(9 downto 1) <= tmp_123_fu_635_p2(9 downto 1);
                tmp_128_cast_reg_1332 <= tmp_128_cast_fu_607_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                isneg_reg_1639 <= p_Val2_33_fu_1252_p2(8 downto 8);
                newsignbit_6_reg_1652 <= result_V_fu_1266_p2(7 downto 7);
                result_V_reg_1646 <= result_V_fu_1266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_5_reg_1404 <= m_5_fu_831_p2;
                tmp_137_reg_1396 <= tmp_137_fu_819_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_5_reg_1427 <= n_5_fu_905_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_V_addr_reg_1378 <= tmp_143_cast_fu_779_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_4_reg_1562 <= p_Val2_4_fu_1022_p2;
                tmp_145_reg_1567 <= p_Val2_4_fu_1022_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_133_reg_1365(13 downto 1) <= tmp_133_fu_750_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_825_p2))) then
                    tmp_139_reg_1409(10 downto 1) <= tmp_139_fu_873_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_50_reg_1557 <= tmp_50_fu_963_p26;
                weight_V_load_reg_1552 <= weight_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond9_fu_756_p2))) then
                    tmp_reg_1373(4 downto 1) <= tmp_fu_762_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond1_fu_784_p2))) then
                    tmp_s_reg_1386(4 downto 1) <= tmp_s_fu_790_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond2_fu_825_p2))) then
                w_5_reg_1414 <= w_5_fu_879_p2;
            end if;
        end if;
    end process;
    tmp_123_reg_1337(0) <= '0';
    arrayNo_cast_reg_1350(31 downto 6) <= "00000000000000000000000000";
    tmp_129_reg_1355(0) <= '0';
    tmp_133_reg_1365(0) <= '0';
    tmp_reg_1373(0) <= '0';
    tmp_s_reg_1386(0) <= '0';
    tmp_139_reg_1409(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond8_fu_641_p2, ap_CS_fsm_state3, exitcond9_fu_756_p2, ap_CS_fsm_state4, exitcond1_fu_784_p2, ap_CS_fsm_state5, exitcond2_fu_825_p2, ap_CS_fsm_state6, exitcond_fu_899_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_641_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_756_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_784_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_825_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_899_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_1125_p2 <= "1" when (tmp_59_reg_1603 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_1130_p2 <= "1" when (tmp_59_reg_1603 = ap_const_lv2_0) else "0";
    ShuffleConvs_1_Downs_10_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_10_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_10_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_11_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_11_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_11_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_12_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_12_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_12_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_13_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_13_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_13_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_14_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_14_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_14_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_15_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_15_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_15_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_16_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_16_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_16_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_17_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_17_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_17_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_18_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_18_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_18_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_19_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_19_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_19_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_1_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_1_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_20_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_20_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_20_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_21_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_21_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_21_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_22_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_22_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_22_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_23_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_23_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_23_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_2_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_2_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_3_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_3_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_3_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_4_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_4_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_5_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_5_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_5_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_6_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_6_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_6_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_7_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_7_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_7_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_8_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_8_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_8_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_9_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_9_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_9_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_1_Downs_address0 <= tmp_152_cast_fu_935_p1(10 - 1 downto 0);

    ShuffleConvs_1_Downs_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_1_Downs_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_1_Downs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond8_fu_641_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_641_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond8_fu_641_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_641_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayNo_cast_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayNo_fu_665_p3),32));
    arrayNo_fu_665_p3 <= 
        co_reg_482 when (tmp_124_fu_653_p2(0) = '1') else 
        tmp_125_fu_659_p2;
    bias_V_address0 <= bias_V_addr_reg_1360;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_1187_p2 <= (newsignbit_reg_1590 and deleted_ones_fu_1153_p3);
    brmerge9_fu_1299_p2 <= (newsignbit_6_reg_1652 or isneg_not_fu_1294_p2);
    brmerge_i_i5_fu_1171_p2 <= (newsignbit_reg_1590 or p_not_i_i_fu_1165_p2);
    brmerge_i_i_fu_1290_p2 <= (isneg_reg_1639 xor newsignbit_6_reg_1652);
    brmerge_i_i_i_fu_1209_p2 <= (underflow_fu_1204_p2 or overflow_fu_1181_p2);
    carry_fu_1102_p2 <= (tmp_146_fu_1074_p3 and tmp_58_fu_1096_p2);
    co_5_fu_647_p2 <= std_logic_vector(unsigned(co_reg_482) + unsigned(ap_const_lv6_1));
    co_cast_cast_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_482),9));
    co_cast_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_482),32));
    deleted_ones_fu_1153_p3 <= 
        p_41_i_i_fu_1148_p2 when (carry_reg_1596(0) = '1') else 
        Range1_all_ones_fu_1125_p2;
    deleted_zeros_fu_1135_p3 <= 
        Range1_all_ones_fu_1125_p2 when (carry_reg_1596(0) = '1') else 
        Range1_all_zeros_fu_1130_p2;
    exitcond1_fu_784_p2 <= "1" when (w_reg_516 = ap_const_lv4_9) else "0";
    exitcond2_fu_825_p2 <= "1" when (m_reg_540 = ap_const_lv2_3) else "0";
    exitcond8_fu_641_p2 <= "1" when (co_reg_482 = ap_const_lv6_30) else "0";
    exitcond9_fu_756_p2 <= "1" when (h_reg_504 = ap_const_lv4_9) else "0";
    exitcond_fu_899_p2 <= "1" when (n_reg_563 = ap_const_lv2_3) else "0";
    h_5_fu_798_p2 <= std_logic_vector(unsigned(h_reg_504) + unsigned(ap_const_lv4_1));
    h_cast9_cast_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_504),10));
    isneg_not_fu_1294_p2 <= (isneg_reg_1639 xor ap_const_lv1_1);
    m_5_fu_831_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(m_reg_540));
    m_cast7_cast_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_540),10));
    n_5_fu_905_p2 <= std_logic_vector(unsigned(n_reg_563) + unsigned(ap_const_lv2_1));
    n_cast6_cast_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_563),10));
    newsignbit_fu_1088_p3 <= p_Val2_38_fu_1082_p2(7 downto 7);
    next_mul_fu_574_p2 <= std_logic_vector(unsigned(phi_mul_reg_493) + unsigned(ap_const_lv13_56));
    output_V_address0 <= output_V_addr_reg_1378;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= 
        result_V_mux_fu_1304_p3 when (brmerge9_fu_1299_p2(0) = '1') else 
        p_result_V_fu_1311_p3;

    output_V_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_1181_p2 <= (brmerge_i_i5_fu_1171_p2 and tmp_61_fu_1176_p2);
    p_38_i_i_fu_1160_p2 <= (carry_reg_1596 and Range1_all_ones_fu_1125_p2);
    p_41_i_i_fu_1148_p2 <= (signbit_reg_1577 and tmp_60_fu_1142_p2);
    p_Val2_33_fu_1252_p2 <= std_logic_vector(signed(tmp_52_fu_1248_p1) + signed(tmp_51_fu_1244_p1));
    p_Val2_36_fu_1048_p2 <= std_logic_vector(signed(tmp_79_cast_fu_1044_p1) + signed(p_Val2_4_reg_1562));
    p_Val2_37_fu_1061_p4 <= p_Val2_36_fu_1048_p2(13 downto 6);
    p_Val2_38_fu_1082_p2 <= std_logic_vector(unsigned(p_Val2_37_fu_1061_p4) + unsigned(tmp_57_fu_1071_p1));
    p_Val2_40_mux_fu_1224_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_1629(0) = '1') else 
        p_Val2_38_reg_1584;
    p_Val2_4_fu_1022_p0 <= weight_V_load_reg_1552;
    p_Val2_4_fu_1022_p1 <= tmp_50_reg_1557;
    p_Val2_4_fu_1022_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_4_fu_1022_p0) * signed(p_Val2_4_fu_1022_p1))), 16));
    p_Val2_s_60_fu_1230_p3 <= 
        ap_const_lv8_80 when (underflow_reg_1624(0) = '1') else 
        p_Val2_38_reg_1584;
    p_not_i_i_fu_1165_p2 <= (deleted_zeros_fu_1135_p3 xor ap_const_lv1_1);
    p_result_V_fu_1311_p3 <= 
        ap_const_lv8_80 when (underflow_6_fu_1285_p2(0) = '1') else 
        result_V_reg_1646;
    p_shl1_cast_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_122_fu_623_p3),10));
    p_shl2_cast_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_119_fu_589_p3),9));
    p_shl3_cast_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_127_fu_687_p3),11));
    p_shl4_cast_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_128_fu_699_p3),11));
    p_shl5_cast_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_131_fu_726_p3),14));
    p_shl6_cast_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_132_fu_738_p3),14));
    p_shl_cast_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_121_fu_611_p3),10));
    result_V_fu_1266_p2 <= std_logic_vector(unsigned(bias_V_q0) + unsigned(p_Val2_s_reg_528));
    result_V_mux_fu_1304_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_1290_p2(0) = '1') else 
        result_V_reg_1646;
    sum_V_fu_1236_p3 <= 
        p_Val2_40_mux_fu_1224_p3 when (underflow_not_fu_1219_p2(0) = '1') else 
        p_Val2_s_60_fu_1230_p3;
        tmp2_cast_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_837_p2),5));

    tmp2_fu_837_p2 <= (m_reg_540 xor ap_const_lv2_2);
        tmp3_cast_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_911_p2),5));

    tmp3_fu_911_p2 <= (n_reg_563 xor ap_const_lv2_2);
    tmp4_demorgan_fu_1192_p2 <= (p_38_i_i_fu_1160_p2 or brmerge40_demorgan_i_fu_1187_p2);
    tmp4_fu_1198_p2 <= (tmp4_demorgan_fu_1192_p2 xor ap_const_lv1_1);
    tmp5_fu_1215_p2 <= (brmerge40_demorgan_i_reg_1619 or tmp_61_reg_1614);
    tmp_119_fu_589_p3 <= (co_reg_482 & ap_const_lv2_0);
    tmp_120_fu_601_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_597_p1) - unsigned(co_cast_cast_fu_585_p1));
    tmp_121_fu_611_p3 <= (co_reg_482 & ap_const_lv3_0);
    tmp_122_fu_623_p3 <= (co_reg_482 & ap_const_lv1_0);
    tmp_123_fu_635_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_631_p1) + unsigned(p_shl_cast_fu_619_p1));
    tmp_124_fu_653_p2 <= "1" when (unsigned(co_reg_482) < unsigned(ap_const_lv6_18)) else "0";
    tmp_125_fu_659_p2 <= std_logic_vector(unsigned(co_reg_482) + unsigned(ap_const_lv6_28));
    tmp_126_fu_677_p4 <= phi_mul_reg_493(12 downto 11);
    tmp_127_fu_687_p3 <= (tmp_126_fu_677_p4 & ap_const_lv4_0);
        tmp_128_cast_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_120_fu_601_p2),10));

    tmp_128_fu_699_p3 <= (tmp_126_fu_677_p4 & ap_const_lv1_0);
    tmp_129_fu_711_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_695_p1) + unsigned(p_shl4_cast_fu_707_p1));
    tmp_130_fu_721_p2 <= std_logic_vector(unsigned(h_cast9_cast_fu_717_p1) + unsigned(tmp_123_reg_1337));
    tmp_131_fu_726_p3 <= (tmp_130_fu_721_p2 & ap_const_lv3_0);
    tmp_132_fu_738_p3 <= (tmp_130_fu_721_p2 & ap_const_lv1_0);
    tmp_133_fu_750_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_734_p1) + unsigned(p_shl6_cast_fu_746_p1));
    tmp_134_fu_774_p2 <= std_logic_vector(unsigned(tmp_133_reg_1365) + unsigned(w_cast8_cast_fu_770_p1));
    tmp_135_fu_808_p2 <= std_logic_vector(unsigned(m_cast7_cast_fu_804_p1) + unsigned(tmp_128_cast_reg_1332));
    tmp_136_fu_813_p2 <= std_logic_vector(shift_left(unsigned(tmp_135_fu_808_p2),to_integer(unsigned('0' & ap_const_lv10_2(10-1 downto 0)))));
    tmp_137_fu_819_p2 <= std_logic_vector(unsigned(tmp_136_fu_813_p2) - unsigned(tmp_135_fu_808_p2));
    tmp_138_fu_856_p2 <= std_logic_vector(unsigned(tmp_73_cast_cast_fu_852_p1) + unsigned(tmp_129_reg_1355));
    tmp_139_fu_873_p2 <= std_logic_vector(unsigned(tmp_140_fu_861_p2) + unsigned(tmp_141_fu_867_p2));
    tmp_140_fu_861_p2 <= std_logic_vector(shift_left(unsigned(tmp_138_fu_856_p2),to_integer(unsigned('0' & ap_const_lv11_4(11-1 downto 0)))));
    tmp_141_fu_867_p2 <= std_logic_vector(shift_left(unsigned(tmp_138_fu_856_p2),to_integer(unsigned('0' & ap_const_lv11_1(11-1 downto 0)))));
    tmp_142_fu_889_p2 <= std_logic_vector(unsigned(tmp_137_reg_1396) + unsigned(n_cast6_cast_fu_885_p1));
    tmp_143_cast_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_134_fu_774_p2),32));
    tmp_143_fu_930_p2 <= std_logic_vector(unsigned(tmp_77_cast_cast_fu_926_p1) + unsigned(tmp_139_reg_1409));
    tmp_146_fu_1074_p3 <= p_Val2_36_fu_1048_p2(13 downto 13);
    tmp_148_fu_1118_p3 <= p_Val2_36_reg_1572(14 downto 14);
    tmp_151_cast_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_142_fu_889_p2),32));
    tmp_152_cast_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_143_fu_930_p2),32));
        tmp_51_fu_1244_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_528),9));

        tmp_52_fu_1248_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    tmp_53_fu_1280_p2 <= (newsignbit_6_reg_1652 xor ap_const_lv1_1);
    tmp_54_fu_847_p2 <= std_logic_vector(signed(tmp2_cast_fu_843_p1) + signed(tmp_reg_1373));
    tmp_55_fu_921_p2 <= std_logic_vector(signed(tmp3_cast_fu_917_p1) + signed(tmp_s_reg_1386));
    tmp_56_fu_1036_p3 <= (p_Val2_35_reg_551 & ap_const_lv6_0);
    tmp_57_fu_1071_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_145_reg_1567),8));
    tmp_58_fu_1096_p2 <= (newsignbit_fu_1088_p3 xor ap_const_lv1_1);
    tmp_60_fu_1142_p2 <= (tmp_148_fu_1118_p3 xor ap_const_lv1_1);
    tmp_61_fu_1176_p2 <= (signbit_reg_1577 xor ap_const_lv1_1);
    tmp_73_cast_cast_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_847_p2),11));
    tmp_77_cast_cast_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_921_p2),11));
        tmp_79_cast_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_56_fu_1036_p3),16));

    tmp_fu_762_p3 <= (h_reg_504 & ap_const_lv1_0);
    tmp_s_fu_790_p3 <= (w_reg_516 & ap_const_lv1_0);
    underflow_6_fu_1285_p2 <= (isneg_reg_1639 and tmp_53_fu_1280_p2);
    underflow_fu_1204_p2 <= (signbit_reg_1577 and tmp4_fu_1198_p2);
    underflow_not_fu_1219_p2 <= (tmp5_fu_1215_p2 or p_38_i_i_reg_1609);
    w_5_fu_879_p2 <= std_logic_vector(unsigned(w_reg_516) + unsigned(ap_const_lv4_1));
    w_cast8_cast_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_516),14));
    weight_V_address0 <= tmp_151_cast_fu_894_p1(9 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
