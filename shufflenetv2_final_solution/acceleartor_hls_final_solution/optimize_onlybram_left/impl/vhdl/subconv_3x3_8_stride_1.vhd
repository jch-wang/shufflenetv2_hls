-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_8_stride_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_23_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_23_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_23_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_22_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_22_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_22_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_11_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_11_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_6_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_6_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_5_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_5_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_4_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_4_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_3_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_2_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_1_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_21_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_21_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_21_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_20_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_20_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_20_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_19_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_19_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_19_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_18_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_18_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_18_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_17_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_17_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_17_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_16_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_16_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_16_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_15_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_15_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_15_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_14_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_14_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_14_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_13_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_13_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_13_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_12_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_12_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_10_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_10_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_9_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_9_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_8_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_8_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_7_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    ShuffleConvs_2_Downs_7_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_8_stride_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv15_AB : STD_LOGIC_VECTOR (14 downto 0) := "000000010101011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv7_18 : STD_LOGIC_VECTOR (6 downto 0) := "0011000";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul_fu_578_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal next_mul_reg_1343 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_14_cast_fu_611_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_cast_reg_1348 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_17_cast_fu_645_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_17_cast_reg_1353 : STD_LOGIC_VECTOR (11 downto 0);
    signal co_1_fu_655_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_1_reg_1361 : STD_LOGIC_VECTOR (6 downto 0);
    signal arrayNo_cast_fu_661_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayNo_cast_reg_1366 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_699_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_21_reg_1371 : STD_LOGIC_VECTOR (10 downto 0);
    signal bias_V_addr_reg_1376 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_24_fu_734_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_24_reg_1381 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_746_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_1389 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_urem_fu_766_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_V_addr_reg_1399 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_2_fu_794_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_reg_1407 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond3_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_1_fu_802_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_29_fu_823_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_29_reg_1417 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m_1_fu_835_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_1_reg_1425 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_31_fu_889_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_31_reg_1430 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond4_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_1_fu_895_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_1_reg_1435 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal n_1_fu_921_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_1_reg_1448 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_load_reg_1573 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_1_fu_979_p26 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1578 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_5_fu_1038_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_5_reg_1583 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_39_reg_1588 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_fu_1064_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_6_reg_1593 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal signbit_reg_1598 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_fu_1098_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_8_reg_1605 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_1104_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_1611 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_1118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_1617 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1624 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_1176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_1630 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_13_fu_1192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1635 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_1203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_1640 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_1220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_1645 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_1225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_1650 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_1252_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal isneg_reg_1660 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal result_V_fu_1282_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_1667 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_1_reg_1673 : STD_LOGIC_VECTOR (0 downto 0);
    signal co_reg_474 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul_reg_485 : STD_LOGIC_VECTOR (14 downto 0);
    signal phi_urem_reg_496 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_reg_508 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_520 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_Val2_s_reg_532 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_544 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_4_reg_555 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_567 : STD_LOGIC_VECTOR (1 downto 0);
    signal co_cast_fu_584_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_cast_fu_783_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_cast_fu_910_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_cast_fu_951_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_593_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_601_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_cast_cast_fu_589_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_fu_605_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_fu_615_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_16_fu_627_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_623_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_635_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_17_fu_639_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_18_fu_665_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_19_fu_675_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_fu_687_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl3_cast_fu_683_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_695_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal h_cast9_cast_fu_705_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_fu_709_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_23_fu_714_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_cast_fu_718_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl6_cast_fu_726_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_urem_fu_754_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_25_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_cast8_cast_fu_774_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_26_fu_778_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal m_cast7_cast_fu_808_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_27_fu_812_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_28_fu_817_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_fu_841_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_847_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_851_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast_cast_fu_856_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_30_fu_860_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_33_fu_865_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_37_fu_877_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl8_cast_fu_869_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl9_cast_fu_881_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_cast6_cast_fu_901_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_fu_905_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp3_fu_927_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_933_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_937_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_cast_cast_fu_942_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_34_fu_946_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_5_fu_1038_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_5_fu_1038_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_1052_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_11_cast_fu_1060_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_7_fu_1077_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_1087_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_40_fu_1090_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_1112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_1141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_1146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_1134_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_1158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_1164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_1151_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_1181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i1_fu_1187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_1169_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_1208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_1214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_1197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_1231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_1235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_mux_fu_1240_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_8_35_fu_1246_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_1264_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_fu_1260_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_2_fu_1268_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_1296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_1310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_1306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_1301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_1315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_1320_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_1327_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component ShuffleNetV2_mux_CeG IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mux_CeG_x_U597 : component ShuffleNetV2_mux_CeG
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din1 => ShuffleConvs_2_Downs_23_q0,
        din2 => ShuffleConvs_2_Downs_22_q0,
        din3 => ShuffleConvs_2_Downs_11_q0,
        din4 => ShuffleConvs_2_Downs_6_q0,
        din5 => ShuffleConvs_2_Downs_5_q0,
        din6 => ShuffleConvs_2_Downs_4_q0,
        din7 => ShuffleConvs_2_Downs_3_q0,
        din8 => ShuffleConvs_2_Downs_2_q0,
        din9 => ShuffleConvs_2_Downs_1_q0,
        din10 => ShuffleConvs_2_Downs_q0,
        din11 => ShuffleConvs_2_Downs_21_q0,
        din12 => ShuffleConvs_2_Downs_20_q0,
        din13 => ShuffleConvs_2_Downs_19_q0,
        din14 => ShuffleConvs_2_Downs_18_q0,
        din15 => ShuffleConvs_2_Downs_17_q0,
        din16 => ShuffleConvs_2_Downs_16_q0,
        din17 => ShuffleConvs_2_Downs_15_q0,
        din18 => ShuffleConvs_2_Downs_14_q0,
        din19 => ShuffleConvs_2_Downs_13_q0,
        din20 => ShuffleConvs_2_Downs_12_q0,
        din21 => ShuffleConvs_2_Downs_10_q0,
        din22 => ShuffleConvs_2_Downs_9_q0,
        din23 => ShuffleConvs_2_Downs_8_q0,
        din24 => ShuffleConvs_2_Downs_7_q0,
        din25 => arrayNo_cast_reg_1366,
        dout => tmp_1_fu_979_p26);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_474_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_740_p2 = ap_const_lv1_1))) then 
                co_reg_474 <= co_1_reg_1361;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_474 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    h_reg_508_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_649_p2 = ap_const_lv1_0))) then 
                h_reg_508 <= ap_const_lv3_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond3_fu_788_p2))) then 
                h_reg_508 <= h_1_fu_802_p2;
            end if; 
        end if;
    end process;

    m_reg_544_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_915_p2))) then 
                m_reg_544 <= m_1_reg_1425;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_788_p2))) then 
                m_reg_544 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_567_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                n_reg_567 <= n_1_reg_1448;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_829_p2))) then 
                n_reg_567 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_4_reg_555_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_Val2_4_reg_555 <= sum_V_fu_1252_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_829_p2))) then 
                p_Val2_4_reg_555 <= p_Val2_s_reg_532;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_532_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_915_p2))) then 
                p_Val2_s_reg_532 <= p_Val2_4_reg_555;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_788_p2))) then 
                p_Val2_s_reg_532 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_485_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_740_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_485 <= next_mul_reg_1343;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_485 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    phi_urem_reg_496_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_740_p2 = ap_const_lv1_1))) then 
                phi_urem_reg_496 <= idx_urem_fu_766_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_urem_reg_496 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    w_reg_520_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_740_p2))) then 
                w_reg_520 <= ap_const_lv3_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                w_reg_520 <= w_1_reg_1435;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_649_p2 = ap_const_lv1_0))) then
                    arrayNo_cast_reg_1366(6 downto 0) <= arrayNo_cast_fu_661_p1(6 downto 0);
                bias_V_addr_reg_1376 <= co_cast_fu_584_p1(7 - 1 downto 0);
                    tmp_21_reg_1371(10 downto 1) <= tmp_21_fu_699_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                brmerge40_demorgan_i_reg_1640 <= brmerge40_demorgan_i_fu_1203_p2;
                brmerge_i_i_i_reg_1650 <= brmerge_i_i_i_fu_1225_p2;
                p_38_i_i_reg_1630 <= p_38_i_i_fu_1176_p2;
                tmp_13_reg_1635 <= tmp_13_fu_1192_p2;
                underflow_reg_1645 <= underflow_fu_1220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                carry_reg_1617 <= carry_fu_1118_p2;
                newsignbit_reg_1611 <= p_Val2_8_fu_1098_p2(7 downto 7);
                p_Val2_6_reg_1593 <= p_Val2_6_fu_1064_p2;
                p_Val2_8_reg_1605 <= p_Val2_8_fu_1098_p2;
                signbit_reg_1598 <= p_Val2_6_fu_1064_p2(15 downto 15);
                tmp_12_reg_1624 <= p_Val2_6_fu_1064_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_1_reg_1361 <= co_1_fu_655_p2;
                next_mul_reg_1343 <= next_mul_fu_578_p2;
                tmp_14_cast_reg_1348 <= tmp_14_cast_fu_611_p1;
                    tmp_17_cast_reg_1353(11 downto 1) <= tmp_17_cast_fu_645_p1(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                isneg_reg_1660 <= p_Val2_2_fu_1268_p2(8 downto 8);
                newsignbit_1_reg_1673 <= result_V_fu_1282_p2(7 downto 7);
                result_V_reg_1667 <= result_V_fu_1282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_1_reg_1425 <= m_1_fu_835_p2;
                tmp_29_reg_1417 <= tmp_29_fu_823_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_1_reg_1448 <= n_1_fu_921_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_V_addr_reg_1399 <= tmp_27_cast_fu_783_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_5_reg_1583 <= p_Val2_5_fu_1038_p2;
                tmp_39_reg_1588 <= p_Val2_5_fu_1038_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_1_reg_1578 <= tmp_1_fu_979_p26;
                weight_V_load_reg_1573 <= weight_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_24_reg_1381(12 downto 1) <= tmp_24_fu_734_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_788_p2))) then
                    tmp_2_reg_1407(3 downto 1) <= tmp_2_fu_794_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_829_p2))) then
                    tmp_31_reg_1430(9 downto 1) <= tmp_31_fu_889_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_740_p2))) then
                    tmp_reg_1389(3 downto 1) <= tmp_fu_746_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond4_fu_829_p2))) then
                w_1_reg_1435 <= w_1_fu_895_p2;
            end if;
        end if;
    end process;
    tmp_17_cast_reg_1353(0) <= '0';
    arrayNo_cast_reg_1366(31 downto 7) <= "0000000000000000000000000";
    tmp_21_reg_1371(0) <= '0';
    tmp_24_reg_1381(0) <= '0';
    tmp_reg_1389(0) <= '0';
    tmp_2_reg_1407(0) <= '0';
    tmp_31_reg_1430(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_649_p2, ap_CS_fsm_state3, exitcond2_fu_740_p2, ap_CS_fsm_state4, exitcond3_fu_788_p2, ap_CS_fsm_state5, exitcond4_fu_829_p2, ap_CS_fsm_state6, exitcond_fu_915_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_649_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_740_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond3_fu_788_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_829_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_915_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_1141_p2 <= "1" when (tmp_12_reg_1624 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_1146_p2 <= "1" when (tmp_12_reg_1624 = ap_const_lv2_0) else "0";
    ShuffleConvs_2_Downs_10_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_10_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_10_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_11_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_11_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_11_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_12_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_12_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_12_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_13_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_13_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_13_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_14_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_14_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_14_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_15_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_15_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_15_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_16_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_16_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_16_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_17_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_17_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_17_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_18_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_18_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_18_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_19_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_19_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_19_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_1_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_1_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_20_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_20_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_20_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_21_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_21_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_21_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_22_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_22_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_22_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_23_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_23_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_23_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_2_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_2_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_3_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_3_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_3_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_4_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_4_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_5_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_5_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_5_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_6_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_6_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_6_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_7_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_7_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_7_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_8_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_8_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_8_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_9_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_9_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_9_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_address0 <= tmp_36_cast_fu_951_p1(9 - 1 downto 0);

    ShuffleConvs_2_Downs_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_649_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_649_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_649_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_649_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayNo_cast_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_urem_reg_496),32));
    bias_V_address0 <= bias_V_addr_reg_1376;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_1203_p2 <= (newsignbit_reg_1611 and deleted_ones_fu_1169_p3);
    brmerge9_fu_1315_p2 <= (newsignbit_1_reg_1673 or isneg_not_fu_1310_p2);
    brmerge_i_i1_fu_1187_p2 <= (newsignbit_reg_1611 or p_not_i_i_fu_1181_p2);
    brmerge_i_i_fu_1306_p2 <= (isneg_reg_1660 xor newsignbit_1_reg_1673);
    brmerge_i_i_i_fu_1225_p2 <= (underflow_fu_1220_p2 or overflow_fu_1197_p2);
    carry_fu_1118_p2 <= (tmp_40_fu_1090_p3 and tmp_10_fu_1112_p2);
    co_1_fu_655_p2 <= std_logic_vector(unsigned(co_reg_474) + unsigned(ap_const_lv7_1));
    co_cast_cast_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_474),10));
    co_cast_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_474),32));
    deleted_ones_fu_1169_p3 <= 
        p_41_i_i_fu_1164_p2 when (carry_reg_1617(0) = '1') else 
        Range1_all_ones_fu_1141_p2;
    deleted_zeros_fu_1151_p3 <= 
        Range1_all_ones_fu_1141_p2 when (carry_reg_1617(0) = '1') else 
        Range1_all_zeros_fu_1146_p2;
    exitcond1_fu_649_p2 <= "1" when (co_reg_474 = ap_const_lv7_60) else "0";
    exitcond2_fu_740_p2 <= "1" when (h_reg_508 = ap_const_lv3_5) else "0";
    exitcond3_fu_788_p2 <= "1" when (w_reg_520 = ap_const_lv3_5) else "0";
    exitcond4_fu_829_p2 <= "1" when (m_reg_544 = ap_const_lv2_3) else "0";
    exitcond_fu_915_p2 <= "1" when (n_reg_567 = ap_const_lv2_3) else "0";
    h_1_fu_802_p2 <= std_logic_vector(unsigned(h_reg_508) + unsigned(ap_const_lv3_1));
    h_cast9_cast_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_508),12));
    idx_urem_fu_766_p3 <= 
        next_urem_fu_754_p2 when (tmp_25_fu_760_p2(0) = '1') else 
        ap_const_lv7_0;
    isneg_not_fu_1310_p2 <= (isneg_reg_1660 xor ap_const_lv1_1);
    m_1_fu_835_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(m_reg_544));
    m_cast7_cast_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_544),11));
    n_1_fu_921_p2 <= std_logic_vector(unsigned(n_reg_567) + unsigned(ap_const_lv2_1));
    n_cast6_cast_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_567),11));
    newsignbit_fu_1104_p3 <= p_Val2_8_fu_1098_p2(7 downto 7);
    next_mul_fu_578_p2 <= std_logic_vector(unsigned(phi_mul_reg_485) + unsigned(ap_const_lv15_AB));
    next_urem_fu_754_p2 <= std_logic_vector(unsigned(phi_urem_reg_496) + unsigned(ap_const_lv7_1));
    output_V_address0 <= output_V_addr_reg_1399;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= 
        result_V_mux_fu_1320_p3 when (brmerge9_fu_1315_p2(0) = '1') else 
        p_result_V_fu_1327_p3;

    output_V_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_1197_p2 <= (brmerge_i_i1_fu_1187_p2 and tmp_13_fu_1192_p2);
    p_38_i_i_fu_1176_p2 <= (carry_reg_1617 and Range1_all_ones_fu_1141_p2);
    p_41_i_i_fu_1164_p2 <= (signbit_reg_1598 and tmp_11_fu_1158_p2);
    p_Val2_2_fu_1268_p2 <= std_logic_vector(signed(tmp_4_fu_1264_p1) + signed(tmp_3_fu_1260_p1));
    p_Val2_5_fu_1038_p0 <= weight_V_load_reg_1573;
    p_Val2_5_fu_1038_p1 <= tmp_1_reg_1578;
    p_Val2_5_fu_1038_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_5_fu_1038_p0) * signed(p_Val2_5_fu_1038_p1))), 16));
    p_Val2_6_fu_1064_p2 <= std_logic_vector(signed(tmp_11_cast_fu_1060_p1) + signed(p_Val2_5_reg_1583));
    p_Val2_7_fu_1077_p4 <= p_Val2_6_fu_1064_p2(13 downto 6);
    p_Val2_8_35_fu_1246_p3 <= 
        ap_const_lv8_80 when (underflow_reg_1645(0) = '1') else 
        p_Val2_8_reg_1605;
    p_Val2_8_fu_1098_p2 <= std_logic_vector(unsigned(p_Val2_7_fu_1077_p4) + unsigned(tmp_9_fu_1087_p1));
    p_Val2_8_mux_fu_1240_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_1650(0) = '1') else 
        p_Val2_8_reg_1605;
    p_not_i_i_fu_1181_p2 <= (deleted_zeros_fu_1151_p3 xor ap_const_lv1_1);
    p_result_V_fu_1327_p3 <= 
        ap_const_lv8_80 when (underflow_1_fu_1301_p2(0) = '1') else 
        result_V_reg_1667;
    p_shl1_cast_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_627_p3),11));
    p_shl2_cast_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_593_p3),10));
    p_shl3_cast_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_675_p3),11));
    p_shl4_cast_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_687_p3),11));
    p_shl5_cast_fu_718_p3 <= (tmp_23_fu_714_p1 & ap_const_lv3_0);
    p_shl6_cast_fu_726_p3 <= (tmp_22_fu_709_p2 & ap_const_lv1_0);
    p_shl8_cast_fu_869_p3 <= (tmp_33_fu_865_p1 & ap_const_lv3_0);
    p_shl9_cast_fu_881_p3 <= (tmp_37_fu_877_p1 & ap_const_lv1_0);
    p_shl_cast_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_615_p3),11));
    result_V_fu_1282_p2 <= std_logic_vector(unsigned(bias_V_q0) + unsigned(p_Val2_s_reg_532));
    result_V_mux_fu_1320_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_1306_p2(0) = '1') else 
        result_V_reg_1667;
    sum_V_fu_1252_p3 <= 
        p_Val2_8_mux_fu_1240_p3 when (underflow_not_fu_1235_p2(0) = '1') else 
        p_Val2_8_35_fu_1246_p3;
        tmp2_cast_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_841_p2),4));

    tmp2_fu_841_p2 <= (m_reg_544 xor ap_const_lv2_2);
        tmp3_cast_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_927_p2),4));

    tmp3_fu_927_p2 <= (n_reg_567 xor ap_const_lv2_2);
    tmp4_demorgan_fu_1208_p2 <= (p_38_i_i_fu_1176_p2 or brmerge40_demorgan_i_fu_1203_p2);
    tmp4_fu_1214_p2 <= (tmp4_demorgan_fu_1208_p2 xor ap_const_lv1_1);
    tmp5_fu_1231_p2 <= (brmerge40_demorgan_i_reg_1640 or tmp_13_reg_1635);
    tmp_10_fu_1112_p2 <= (newsignbit_fu_1104_p3 xor ap_const_lv1_1);
        tmp_11_cast_fu_1060_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_1052_p3),16));

    tmp_11_fu_1158_p2 <= (tmp_42_fu_1134_p3 xor ap_const_lv1_1);
    tmp_13_fu_1192_p2 <= (signbit_reg_1598 xor ap_const_lv1_1);
        tmp_14_cast_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_fu_605_p2),11));

    tmp_14_fu_605_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_601_p1) - unsigned(co_cast_cast_fu_589_p1));
    tmp_15_fu_615_p3 <= (co_reg_474 & ap_const_lv3_0);
    tmp_16_fu_627_p3 <= (co_reg_474 & ap_const_lv1_0);
        tmp_17_cast_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_fu_639_p2),12));

    tmp_17_fu_639_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_623_p1) - unsigned(p_shl1_cast_fu_635_p1));
    tmp_18_fu_665_p4 <= phi_mul_reg_485(14 downto 12);
    tmp_19_fu_675_p3 <= (tmp_18_fu_665_p4 & ap_const_lv3_0);
    tmp_20_fu_687_p3 <= (tmp_18_fu_665_p4 & ap_const_lv1_0);
    tmp_21_fu_699_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_683_p1) + unsigned(p_shl4_cast_fu_695_p1));
    tmp_22_fu_709_p2 <= std_logic_vector(unsigned(h_cast9_cast_fu_705_p1) + unsigned(tmp_17_cast_reg_1353));
    tmp_23_fu_714_p1 <= tmp_22_fu_709_p2(10 - 1 downto 0);
    tmp_24_fu_734_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_718_p3) - unsigned(p_shl6_cast_fu_726_p3));
    tmp_25_fu_760_p2 <= "1" when (unsigned(next_urem_fu_754_p2) < unsigned(ap_const_lv7_18)) else "0";
    tmp_26_fu_778_p2 <= std_logic_vector(unsigned(tmp_24_reg_1381) + unsigned(w_cast8_cast_fu_774_p1));
    tmp_27_cast_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_778_p2),32));
    tmp_27_fu_812_p2 <= std_logic_vector(unsigned(m_cast7_cast_fu_808_p1) + unsigned(tmp_14_cast_reg_1348));
    tmp_28_fu_817_p2 <= std_logic_vector(shift_left(unsigned(tmp_27_fu_812_p2),to_integer(unsigned('0' & ap_const_lv11_2(11-1 downto 0)))));
    tmp_29_fu_823_p2 <= std_logic_vector(unsigned(tmp_28_fu_817_p2) - unsigned(tmp_27_fu_812_p2));
    tmp_2_fu_794_p3 <= (w_reg_520 & ap_const_lv1_0);
    tmp_30_fu_860_p2 <= std_logic_vector(unsigned(tmp_cast_cast_fu_856_p1) + unsigned(tmp_21_reg_1371));
    tmp_31_fu_889_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_869_p3) + unsigned(p_shl9_cast_fu_881_p3));
    tmp_32_fu_905_p2 <= std_logic_vector(unsigned(tmp_29_reg_1417) + unsigned(n_cast6_cast_fu_901_p1));
    tmp_33_fu_865_p1 <= tmp_30_fu_860_p2(7 - 1 downto 0);
    tmp_34_fu_946_p2 <= std_logic_vector(unsigned(tmp_6_cast_cast_fu_942_p1) + unsigned(tmp_31_reg_1430));
    tmp_35_cast_fu_910_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_905_p2),32));
    tmp_36_cast_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_946_p2),32));
    tmp_37_fu_877_p1 <= tmp_30_fu_860_p2(9 - 1 downto 0);
        tmp_3_fu_1260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_532),9));

    tmp_40_fu_1090_p3 <= p_Val2_6_fu_1064_p2(13 downto 13);
    tmp_42_fu_1134_p3 <= p_Val2_6_reg_1593(14 downto 14);
        tmp_4_fu_1264_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    tmp_5_fu_1296_p2 <= (newsignbit_1_reg_1673 xor ap_const_lv1_1);
    tmp_6_cast_cast_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_937_p2),10));
    tmp_6_fu_937_p2 <= std_logic_vector(signed(tmp3_cast_fu_933_p1) + signed(tmp_2_reg_1407));
    tmp_7_fu_1052_p3 <= (p_Val2_4_reg_555 & ap_const_lv6_0);
    tmp_8_fu_593_p3 <= (co_reg_474 & ap_const_lv2_0);
    tmp_9_fu_1087_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_reg_1588),8));
    tmp_cast_cast_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_851_p2),11));
    tmp_fu_746_p3 <= (h_reg_508 & ap_const_lv1_0);
    tmp_s_fu_851_p2 <= std_logic_vector(signed(tmp2_cast_fu_847_p1) + signed(tmp_reg_1389));
    underflow_1_fu_1301_p2 <= (isneg_reg_1660 and tmp_5_fu_1296_p2);
    underflow_fu_1220_p2 <= (signbit_reg_1598 and tmp4_fu_1214_p2);
    underflow_not_fu_1235_p2 <= (tmp5_fu_1231_p2 or p_38_i_i_reg_1630);
    w_1_fu_895_p2 <= std_logic_vector(unsigned(w_reg_520) + unsigned(ap_const_lv3_1));
    w_cast8_cast_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_520),13));
    weight_V_address0 <= tmp_35_cast_fu_910_p1(10 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
