// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_16_strid_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        ShuffleConvs_1_Downs_23_address0,
        ShuffleConvs_1_Downs_23_ce0,
        ShuffleConvs_1_Downs_23_q0,
        ShuffleConvs_1_Downs_22_address0,
        ShuffleConvs_1_Downs_22_ce0,
        ShuffleConvs_1_Downs_22_q0,
        ShuffleConvs_1_Downs_11_address0,
        ShuffleConvs_1_Downs_11_ce0,
        ShuffleConvs_1_Downs_11_q0,
        ShuffleConvs_1_Downs_6_address0,
        ShuffleConvs_1_Downs_6_ce0,
        ShuffleConvs_1_Downs_6_q0,
        ShuffleConvs_1_Downs_5_address0,
        ShuffleConvs_1_Downs_5_ce0,
        ShuffleConvs_1_Downs_5_q0,
        ShuffleConvs_1_Downs_4_address0,
        ShuffleConvs_1_Downs_4_ce0,
        ShuffleConvs_1_Downs_4_q0,
        ShuffleConvs_1_Downs_3_address0,
        ShuffleConvs_1_Downs_3_ce0,
        ShuffleConvs_1_Downs_3_q0,
        ShuffleConvs_1_Downs_2_address0,
        ShuffleConvs_1_Downs_2_ce0,
        ShuffleConvs_1_Downs_2_q0,
        ShuffleConvs_1_Downs_1_address0,
        ShuffleConvs_1_Downs_1_ce0,
        ShuffleConvs_1_Downs_1_q0,
        ShuffleConvs_1_Downs_address0,
        ShuffleConvs_1_Downs_ce0,
        ShuffleConvs_1_Downs_q0,
        ShuffleConvs_1_Downs_21_address0,
        ShuffleConvs_1_Downs_21_ce0,
        ShuffleConvs_1_Downs_21_q0,
        ShuffleConvs_1_Downs_20_address0,
        ShuffleConvs_1_Downs_20_ce0,
        ShuffleConvs_1_Downs_20_q0,
        ShuffleConvs_1_Downs_19_address0,
        ShuffleConvs_1_Downs_19_ce0,
        ShuffleConvs_1_Downs_19_q0,
        ShuffleConvs_1_Downs_18_address0,
        ShuffleConvs_1_Downs_18_ce0,
        ShuffleConvs_1_Downs_18_q0,
        ShuffleConvs_1_Downs_17_address0,
        ShuffleConvs_1_Downs_17_ce0,
        ShuffleConvs_1_Downs_17_q0,
        ShuffleConvs_1_Downs_16_address0,
        ShuffleConvs_1_Downs_16_ce0,
        ShuffleConvs_1_Downs_16_q0,
        ShuffleConvs_1_Downs_15_address0,
        ShuffleConvs_1_Downs_15_ce0,
        ShuffleConvs_1_Downs_15_q0,
        ShuffleConvs_1_Downs_14_address0,
        ShuffleConvs_1_Downs_14_ce0,
        ShuffleConvs_1_Downs_14_q0,
        ShuffleConvs_1_Downs_13_address0,
        ShuffleConvs_1_Downs_13_ce0,
        ShuffleConvs_1_Downs_13_q0,
        ShuffleConvs_1_Downs_12_address0,
        ShuffleConvs_1_Downs_12_ce0,
        ShuffleConvs_1_Downs_12_q0,
        ShuffleConvs_1_Downs_10_address0,
        ShuffleConvs_1_Downs_10_ce0,
        ShuffleConvs_1_Downs_10_q0,
        ShuffleConvs_1_Downs_9_address0,
        ShuffleConvs_1_Downs_9_ce0,
        ShuffleConvs_1_Downs_9_q0,
        ShuffleConvs_1_Downs_8_address0,
        ShuffleConvs_1_Downs_8_ce0,
        ShuffleConvs_1_Downs_8_q0,
        ShuffleConvs_1_Downs_7_address0,
        ShuffleConvs_1_Downs_7_ce0,
        ShuffleConvs_1_Downs_7_q0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [5:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [9:0] ShuffleConvs_1_Downs_23_address0;
output   ShuffleConvs_1_Downs_23_ce0;
input  [7:0] ShuffleConvs_1_Downs_23_q0;
output  [9:0] ShuffleConvs_1_Downs_22_address0;
output   ShuffleConvs_1_Downs_22_ce0;
input  [7:0] ShuffleConvs_1_Downs_22_q0;
output  [9:0] ShuffleConvs_1_Downs_11_address0;
output   ShuffleConvs_1_Downs_11_ce0;
input  [7:0] ShuffleConvs_1_Downs_11_q0;
output  [9:0] ShuffleConvs_1_Downs_6_address0;
output   ShuffleConvs_1_Downs_6_ce0;
input  [7:0] ShuffleConvs_1_Downs_6_q0;
output  [9:0] ShuffleConvs_1_Downs_5_address0;
output   ShuffleConvs_1_Downs_5_ce0;
input  [7:0] ShuffleConvs_1_Downs_5_q0;
output  [9:0] ShuffleConvs_1_Downs_4_address0;
output   ShuffleConvs_1_Downs_4_ce0;
input  [7:0] ShuffleConvs_1_Downs_4_q0;
output  [9:0] ShuffleConvs_1_Downs_3_address0;
output   ShuffleConvs_1_Downs_3_ce0;
input  [7:0] ShuffleConvs_1_Downs_3_q0;
output  [9:0] ShuffleConvs_1_Downs_2_address0;
output   ShuffleConvs_1_Downs_2_ce0;
input  [7:0] ShuffleConvs_1_Downs_2_q0;
output  [9:0] ShuffleConvs_1_Downs_1_address0;
output   ShuffleConvs_1_Downs_1_ce0;
input  [7:0] ShuffleConvs_1_Downs_1_q0;
output  [9:0] ShuffleConvs_1_Downs_address0;
output   ShuffleConvs_1_Downs_ce0;
input  [7:0] ShuffleConvs_1_Downs_q0;
output  [9:0] ShuffleConvs_1_Downs_21_address0;
output   ShuffleConvs_1_Downs_21_ce0;
input  [7:0] ShuffleConvs_1_Downs_21_q0;
output  [9:0] ShuffleConvs_1_Downs_20_address0;
output   ShuffleConvs_1_Downs_20_ce0;
input  [7:0] ShuffleConvs_1_Downs_20_q0;
output  [9:0] ShuffleConvs_1_Downs_19_address0;
output   ShuffleConvs_1_Downs_19_ce0;
input  [7:0] ShuffleConvs_1_Downs_19_q0;
output  [9:0] ShuffleConvs_1_Downs_18_address0;
output   ShuffleConvs_1_Downs_18_ce0;
input  [7:0] ShuffleConvs_1_Downs_18_q0;
output  [9:0] ShuffleConvs_1_Downs_17_address0;
output   ShuffleConvs_1_Downs_17_ce0;
input  [7:0] ShuffleConvs_1_Downs_17_q0;
output  [9:0] ShuffleConvs_1_Downs_16_address0;
output   ShuffleConvs_1_Downs_16_ce0;
input  [7:0] ShuffleConvs_1_Downs_16_q0;
output  [9:0] ShuffleConvs_1_Downs_15_address0;
output   ShuffleConvs_1_Downs_15_ce0;
input  [7:0] ShuffleConvs_1_Downs_15_q0;
output  [9:0] ShuffleConvs_1_Downs_14_address0;
output   ShuffleConvs_1_Downs_14_ce0;
input  [7:0] ShuffleConvs_1_Downs_14_q0;
output  [9:0] ShuffleConvs_1_Downs_13_address0;
output   ShuffleConvs_1_Downs_13_ce0;
input  [7:0] ShuffleConvs_1_Downs_13_q0;
output  [9:0] ShuffleConvs_1_Downs_12_address0;
output   ShuffleConvs_1_Downs_12_ce0;
input  [7:0] ShuffleConvs_1_Downs_12_q0;
output  [9:0] ShuffleConvs_1_Downs_10_address0;
output   ShuffleConvs_1_Downs_10_ce0;
input  [7:0] ShuffleConvs_1_Downs_10_q0;
output  [9:0] ShuffleConvs_1_Downs_9_address0;
output   ShuffleConvs_1_Downs_9_ce0;
input  [7:0] ShuffleConvs_1_Downs_9_q0;
output  [9:0] ShuffleConvs_1_Downs_8_address0;
output   ShuffleConvs_1_Downs_8_ce0;
input  [7:0] ShuffleConvs_1_Downs_8_q0;
output  [9:0] ShuffleConvs_1_Downs_7_address0;
output   ShuffleConvs_1_Downs_7_ce0;
input  [7:0] ShuffleConvs_1_Downs_7_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg ShuffleConvs_1_Downs_23_ce0;
reg ShuffleConvs_1_Downs_22_ce0;
reg ShuffleConvs_1_Downs_11_ce0;
reg ShuffleConvs_1_Downs_6_ce0;
reg ShuffleConvs_1_Downs_5_ce0;
reg ShuffleConvs_1_Downs_4_ce0;
reg ShuffleConvs_1_Downs_3_ce0;
reg ShuffleConvs_1_Downs_2_ce0;
reg ShuffleConvs_1_Downs_1_ce0;
reg ShuffleConvs_1_Downs_ce0;
reg ShuffleConvs_1_Downs_21_ce0;
reg ShuffleConvs_1_Downs_20_ce0;
reg ShuffleConvs_1_Downs_19_ce0;
reg ShuffleConvs_1_Downs_18_ce0;
reg ShuffleConvs_1_Downs_17_ce0;
reg ShuffleConvs_1_Downs_16_ce0;
reg ShuffleConvs_1_Downs_15_ce0;
reg ShuffleConvs_1_Downs_14_ce0;
reg ShuffleConvs_1_Downs_13_ce0;
reg ShuffleConvs_1_Downs_12_ce0;
reg ShuffleConvs_1_Downs_10_ce0;
reg ShuffleConvs_1_Downs_9_ce0;
reg ShuffleConvs_1_Downs_8_ce0;
reg ShuffleConvs_1_Downs_7_ce0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [12:0] next_mul_fu_574_p2;
reg   [12:0] next_mul_reg_1327;
wire    ap_CS_fsm_state2;
wire  signed [9:0] tmp_154_cast_fu_607_p1;
reg  signed [9:0] tmp_154_cast_reg_1332;
wire   [9:0] tmp_147_fu_635_p2;
reg   [9:0] tmp_147_reg_1337;
wire   [5:0] co_5_fu_647_p2;
reg   [5:0] co_5_reg_1345;
wire   [31:0] arrayNo_cast_fu_673_p1;
reg   [31:0] arrayNo_cast_reg_1350;
wire   [0:0] exitcond8_fu_641_p2;
wire   [10:0] tmp_153_fu_711_p2;
reg   [10:0] tmp_153_reg_1355;
reg   [5:0] bias_V_addr_reg_1360;
wire   [13:0] tmp_157_fu_750_p2;
reg   [13:0] tmp_157_reg_1365;
wire    ap_CS_fsm_state3;
wire   [4:0] tmp_fu_762_p3;
reg   [4:0] tmp_reg_1373;
wire   [0:0] exitcond9_fu_756_p2;
reg   [12:0] output_V_addr_reg_1378;
wire    ap_CS_fsm_state4;
wire   [4:0] tmp_s_fu_790_p3;
reg   [4:0] tmp_s_reg_1386;
wire   [0:0] exitcond1_fu_784_p2;
wire   [3:0] h_5_fu_798_p2;
wire   [9:0] tmp_161_fu_819_p2;
reg   [9:0] tmp_161_reg_1396;
wire    ap_CS_fsm_state5;
wire   [1:0] m_5_fu_831_p2;
reg   [1:0] m_5_reg_1404;
wire   [10:0] tmp_163_fu_873_p2;
reg   [10:0] tmp_163_reg_1409;
wire   [0:0] exitcond2_fu_825_p2;
wire   [3:0] w_5_fu_879_p2;
reg   [3:0] w_5_reg_1414;
wire    ap_CS_fsm_state6;
wire   [1:0] n_5_fu_905_p2;
reg   [1:0] n_5_reg_1427;
wire   [0:0] exitcond_fu_899_p2;
reg   [7:0] weight_V_load_reg_1552;
wire    ap_CS_fsm_state7;
wire   [7:0] tmp_56_fu_963_p26;
reg   [7:0] tmp_56_reg_1557;
wire   [15:0] p_Val2_5_fu_1022_p2;
reg   [15:0] p_Val2_5_reg_1562;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_169_reg_1567;
wire   [15:0] p_Val2_43_fu_1048_p2;
reg   [15:0] p_Val2_43_reg_1572;
wire    ap_CS_fsm_state9;
reg   [0:0] signbit_reg_1577;
wire   [7:0] p_Val2_45_fu_1082_p2;
reg   [7:0] p_Val2_45_reg_1584;
wire   [0:0] newsignbit_fu_1088_p3;
reg   [0:0] newsignbit_reg_1590;
wire   [0:0] carry_fu_1102_p2;
reg   [0:0] carry_reg_1596;
reg   [1:0] tmp_60_reg_1603;
wire   [0:0] p_38_i_i_fu_1160_p2;
reg   [0:0] p_38_i_i_reg_1609;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_62_fu_1176_p2;
reg   [0:0] tmp_62_reg_1614;
wire   [0:0] brmerge40_demorgan_i_fu_1187_p2;
reg   [0:0] brmerge40_demorgan_i_reg_1619;
wire   [0:0] underflow_fu_1204_p2;
reg   [0:0] underflow_reg_1624;
wire   [0:0] brmerge_i_i_i_fu_1209_p2;
reg   [0:0] brmerge_i_i_i_reg_1629;
wire   [7:0] sum_V_fu_1236_p3;
wire    ap_CS_fsm_state11;
reg   [0:0] isneg_reg_1639;
wire    ap_CS_fsm_state12;
wire   [7:0] result_V_fu_1266_p2;
reg   [7:0] result_V_reg_1646;
reg   [0:0] newsignbit_7_reg_1652;
reg   [5:0] co_reg_482;
reg   [12:0] phi_mul_reg_493;
reg   [3:0] h_reg_504;
reg   [3:0] w_reg_516;
wire    ap_CS_fsm_state13;
reg   [7:0] p_Val2_s_reg_528;
reg   [1:0] m_reg_540;
reg   [7:0] p_Val2_42_reg_551;
reg   [1:0] n_reg_563;
wire   [31:0] co_cast_fu_580_p1;
wire   [31:0] tmp_169_cast_fu_779_p1;
wire   [31:0] tmp_177_cast_fu_894_p1;
wire   [31:0] tmp_178_cast_fu_935_p1;
wire   [7:0] tmp_143_fu_589_p3;
wire   [8:0] p_shl2_cast_fu_597_p1;
wire   [8:0] co_cast_cast_fu_585_p1;
wire   [8:0] tmp_144_fu_601_p2;
wire   [8:0] tmp_145_fu_611_p3;
wire   [6:0] tmp_146_fu_623_p3;
wire   [9:0] p_shl1_cast_fu_631_p1;
wire   [9:0] p_shl_cast_fu_619_p1;
wire   [0:0] tmp_148_fu_653_p2;
wire   [5:0] tmp_149_fu_659_p2;
wire   [5:0] arrayNo_fu_665_p3;
wire   [1:0] tmp_150_fu_677_p4;
wire   [5:0] tmp_151_fu_687_p3;
wire   [2:0] tmp_152_fu_699_p3;
wire   [10:0] p_shl3_cast_fu_695_p1;
wire   [10:0] p_shl4_cast_fu_707_p1;
wire   [9:0] h_cast9_cast_fu_717_p1;
wire   [9:0] tmp_154_fu_721_p2;
wire   [12:0] tmp_155_fu_726_p3;
wire   [10:0] tmp_156_fu_738_p3;
wire   [13:0] p_shl5_cast_fu_734_p1;
wire   [13:0] p_shl6_cast_fu_746_p1;
wire   [13:0] w_cast8_cast_fu_770_p1;
wire   [13:0] tmp_158_fu_774_p2;
wire   [9:0] m_cast7_cast_fu_804_p1;
wire   [9:0] tmp_159_fu_808_p2;
wire   [9:0] tmp_160_fu_813_p2;
wire   [1:0] tmp2_fu_837_p2;
wire  signed [4:0] tmp2_cast_fu_843_p1;
wire   [4:0] tmp_54_fu_847_p2;
wire   [10:0] tmp_90_cast_cast_fu_852_p1;
wire   [10:0] tmp_162_fu_856_p2;
wire   [10:0] tmp_164_fu_861_p2;
wire   [10:0] tmp_165_fu_867_p2;
wire   [9:0] n_cast6_cast_fu_885_p1;
wire   [9:0] tmp_166_fu_889_p2;
wire   [1:0] tmp3_fu_911_p2;
wire  signed [4:0] tmp3_cast_fu_917_p1;
wire   [4:0] tmp_55_fu_921_p2;
wire   [10:0] tmp_94_cast_cast_fu_926_p1;
wire   [10:0] tmp_167_fu_930_p2;
wire  signed [7:0] p_Val2_5_fu_1022_p0;
wire  signed [7:0] p_Val2_5_fu_1022_p1;
wire   [13:0] tmp_57_fu_1036_p3;
wire  signed [15:0] tmp_96_cast_fu_1044_p1;
wire   [7:0] p_Val2_44_fu_1061_p4;
wire   [7:0] tmp_58_fu_1071_p1;
wire   [0:0] tmp_170_fu_1074_p3;
wire   [0:0] tmp_59_fu_1096_p2;
wire   [0:0] Range1_all_ones_fu_1125_p2;
wire   [0:0] Range1_all_zeros_fu_1130_p2;
wire   [0:0] tmp_172_fu_1118_p3;
wire   [0:0] tmp_61_fu_1142_p2;
wire   [0:0] p_41_i_i_fu_1148_p2;
wire   [0:0] deleted_zeros_fu_1135_p3;
wire   [0:0] p_not_i_i_fu_1165_p2;
wire   [0:0] brmerge_i_i5_fu_1171_p2;
wire   [0:0] deleted_ones_fu_1153_p3;
wire   [0:0] tmp4_demorgan_fu_1192_p2;
wire   [0:0] tmp4_fu_1198_p2;
wire   [0:0] overflow_fu_1181_p2;
wire   [0:0] tmp5_fu_1215_p2;
wire   [0:0] underflow_not_fu_1219_p2;
wire   [7:0] p_Val2_40_mux_fu_1224_p3;
wire   [7:0] p_Val2_s_69_fu_1230_p3;
wire  signed [8:0] tmp_52_fu_1248_p1;
wire  signed [8:0] tmp_51_fu_1244_p1;
wire   [8:0] p_Val2_40_fu_1252_p2;
wire   [0:0] tmp_53_fu_1280_p2;
wire   [0:0] isneg_not_fu_1294_p2;
wire   [0:0] brmerge_i_i_fu_1290_p2;
wire   [0:0] underflow_7_fu_1285_p2;
wire   [0:0] brmerge9_fu_1299_p2;
wire   [7:0] result_V_mux_fu_1304_p3;
wire   [7:0] p_result_V_fu_1311_p3;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

ShuffleNetV2_mux_sc4 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_sc4_x_U344(
    .din1(ShuffleConvs_1_Downs_23_q0),
    .din2(ShuffleConvs_1_Downs_22_q0),
    .din3(ShuffleConvs_1_Downs_11_q0),
    .din4(ShuffleConvs_1_Downs_6_q0),
    .din5(ShuffleConvs_1_Downs_5_q0),
    .din6(ShuffleConvs_1_Downs_4_q0),
    .din7(ShuffleConvs_1_Downs_3_q0),
    .din8(ShuffleConvs_1_Downs_2_q0),
    .din9(ShuffleConvs_1_Downs_1_q0),
    .din10(ShuffleConvs_1_Downs_q0),
    .din11(ShuffleConvs_1_Downs_21_q0),
    .din12(ShuffleConvs_1_Downs_20_q0),
    .din13(ShuffleConvs_1_Downs_19_q0),
    .din14(ShuffleConvs_1_Downs_18_q0),
    .din15(ShuffleConvs_1_Downs_17_q0),
    .din16(ShuffleConvs_1_Downs_16_q0),
    .din17(ShuffleConvs_1_Downs_15_q0),
    .din18(ShuffleConvs_1_Downs_14_q0),
    .din19(ShuffleConvs_1_Downs_13_q0),
    .din20(ShuffleConvs_1_Downs_12_q0),
    .din21(ShuffleConvs_1_Downs_10_q0),
    .din22(ShuffleConvs_1_Downs_9_q0),
    .din23(ShuffleConvs_1_Downs_8_q0),
    .din24(ShuffleConvs_1_Downs_7_q0),
    .din25(arrayNo_cast_reg_1350),
    .dout(tmp_56_fu_963_p26)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_756_p2 == 1'd1))) begin
        co_reg_482 <= co_5_reg_1345;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_482 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_641_p2 == 1'd0))) begin
        h_reg_504 <= 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_784_p2 == 1'd1))) begin
        h_reg_504 <= h_5_fu_798_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_899_p2))) begin
        m_reg_540 <= m_5_reg_1404;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_784_p2))) begin
        m_reg_540 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        n_reg_563 <= n_5_reg_1427;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_825_p2))) begin
        n_reg_563 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_42_reg_551 <= sum_V_fu_1236_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_825_p2))) begin
        p_Val2_42_reg_551 <= p_Val2_s_reg_528;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_899_p2))) begin
        p_Val2_s_reg_528 <= p_Val2_42_reg_551;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_784_p2))) begin
        p_Val2_s_reg_528 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_756_p2 == 1'd1))) begin
        phi_mul_reg_493 <= next_mul_reg_1327;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_493 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond9_fu_756_p2))) begin
        w_reg_516 <= 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        w_reg_516 <= w_5_reg_1414;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_641_p2 == 1'd0))) begin
        arrayNo_cast_reg_1350[5 : 0] <= arrayNo_cast_fu_673_p1[5 : 0];
        bias_V_addr_reg_1360 <= co_cast_fu_580_p1;
        tmp_153_reg_1355[10 : 1] <= tmp_153_fu_711_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        brmerge40_demorgan_i_reg_1619 <= brmerge40_demorgan_i_fu_1187_p2;
        brmerge_i_i_i_reg_1629 <= brmerge_i_i_i_fu_1209_p2;
        p_38_i_i_reg_1609 <= p_38_i_i_fu_1160_p2;
        tmp_62_reg_1614 <= tmp_62_fu_1176_p2;
        underflow_reg_1624 <= underflow_fu_1204_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        carry_reg_1596 <= carry_fu_1102_p2;
        newsignbit_reg_1590 <= p_Val2_45_fu_1082_p2[32'd7];
        p_Val2_43_reg_1572 <= p_Val2_43_fu_1048_p2;
        p_Val2_45_reg_1584 <= p_Val2_45_fu_1082_p2;
        signbit_reg_1577 <= p_Val2_43_fu_1048_p2[32'd15];
        tmp_60_reg_1603 <= {{p_Val2_43_fu_1048_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_5_reg_1345 <= co_5_fu_647_p2;
        next_mul_reg_1327 <= next_mul_fu_574_p2;
        tmp_147_reg_1337[9 : 1] <= tmp_147_fu_635_p2[9 : 1];
        tmp_154_cast_reg_1332 <= tmp_154_cast_fu_607_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        isneg_reg_1639 <= p_Val2_40_fu_1252_p2[32'd8];
        newsignbit_7_reg_1652 <= result_V_fu_1266_p2[32'd7];
        result_V_reg_1646 <= result_V_fu_1266_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_5_reg_1404 <= m_5_fu_831_p2;
        tmp_161_reg_1396 <= tmp_161_fu_819_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_5_reg_1427 <= n_5_fu_905_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_addr_reg_1378 <= tmp_169_cast_fu_779_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_5_reg_1562 <= p_Val2_5_fu_1022_p2;
        tmp_169_reg_1567 <= p_Val2_5_fu_1022_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_157_reg_1365[13 : 1] <= tmp_157_fu_750_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_825_p2))) begin
        tmp_163_reg_1409[10 : 1] <= tmp_163_fu_873_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_56_reg_1557 <= tmp_56_fu_963_p26;
        weight_V_load_reg_1552 <= weight_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond9_fu_756_p2))) begin
        tmp_reg_1373[4 : 1] <= tmp_fu_762_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond1_fu_784_p2))) begin
        tmp_s_reg_1386[4 : 1] <= tmp_s_fu_790_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond2_fu_825_p2))) begin
        w_5_reg_1414 <= w_5_fu_879_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_10_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_11_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_12_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_13_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_14_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_15_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_16_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_17_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_18_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_19_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_1_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_20_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_21_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_22_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_23_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_2_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_3_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_4_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_5_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_6_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_7_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_8_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_9_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_1_Downs_ce0 = 1'b1;
    end else begin
        ShuffleConvs_1_Downs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_641_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_641_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_641_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond9_fu_756_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_784_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_825_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_899_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_1125_p2 = ((tmp_60_reg_1603 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_1130_p2 = ((tmp_60_reg_1603 == 2'd0) ? 1'b1 : 1'b0);

assign ShuffleConvs_1_Downs_10_address0 = tmp_178_cast_fu_935_p1;

assign ShuffleConvs_1_Downs_11_address0 = tmp_178_cast_fu_935_p1;

assign ShuffleConvs_1_Downs_12_address0 = tmp_178_cast_fu_935_p1;

assign ShuffleConvs_1_Downs_13_address0 = tmp_178_cast_fu_935_p1;

assign ShuffleConvs_1_Downs_14_address0 = tmp_178_cast_fu_935_p1;

assign ShuffleConvs_1_Downs_15_address0 = tmp_178_cast_fu_935_p1;

assign ShuffleConvs_1_Downs_16_address0 = tmp_178_cast_fu_935_p1;

assign ShuffleConvs_1_Downs_17_address0 = tmp_178_cast_fu_935_p1;

assign ShuffleConvs_1_Downs_18_address0 = tmp_178_cast_fu_935_p1;

assign ShuffleConvs_1_Downs_19_address0 = tmp_178_cast_fu_935_p1;

assign ShuffleConvs_1_Downs_1_address0 = tmp_178_cast_fu_935_p1;

assign ShuffleConvs_1_Downs_20_address0 = tmp_178_cast_fu_935_p1;

assign ShuffleConvs_1_Downs_21_address0 = tmp_178_cast_fu_935_p1;

assign ShuffleConvs_1_Downs_22_address0 = tmp_178_cast_fu_935_p1;

assign ShuffleConvs_1_Downs_23_address0 = tmp_178_cast_fu_935_p1;

assign ShuffleConvs_1_Downs_2_address0 = tmp_178_cast_fu_935_p1;

assign ShuffleConvs_1_Downs_3_address0 = tmp_178_cast_fu_935_p1;

assign ShuffleConvs_1_Downs_4_address0 = tmp_178_cast_fu_935_p1;

assign ShuffleConvs_1_Downs_5_address0 = tmp_178_cast_fu_935_p1;

assign ShuffleConvs_1_Downs_6_address0 = tmp_178_cast_fu_935_p1;

assign ShuffleConvs_1_Downs_7_address0 = tmp_178_cast_fu_935_p1;

assign ShuffleConvs_1_Downs_8_address0 = tmp_178_cast_fu_935_p1;

assign ShuffleConvs_1_Downs_9_address0 = tmp_178_cast_fu_935_p1;

assign ShuffleConvs_1_Downs_address0 = tmp_178_cast_fu_935_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign arrayNo_cast_fu_673_p1 = arrayNo_fu_665_p3;

assign arrayNo_fu_665_p3 = ((tmp_148_fu_653_p2[0:0] === 1'b1) ? co_reg_482 : tmp_149_fu_659_p2);

assign bias_V_address0 = bias_V_addr_reg_1360;

assign brmerge40_demorgan_i_fu_1187_p2 = (newsignbit_reg_1590 & deleted_ones_fu_1153_p3);

assign brmerge9_fu_1299_p2 = (newsignbit_7_reg_1652 | isneg_not_fu_1294_p2);

assign brmerge_i_i5_fu_1171_p2 = (newsignbit_reg_1590 | p_not_i_i_fu_1165_p2);

assign brmerge_i_i_fu_1290_p2 = (isneg_reg_1639 ^ newsignbit_7_reg_1652);

assign brmerge_i_i_i_fu_1209_p2 = (underflow_fu_1204_p2 | overflow_fu_1181_p2);

assign carry_fu_1102_p2 = (tmp_170_fu_1074_p3 & tmp_59_fu_1096_p2);

assign co_5_fu_647_p2 = (co_reg_482 + 6'd1);

assign co_cast_cast_fu_585_p1 = co_reg_482;

assign co_cast_fu_580_p1 = co_reg_482;

assign deleted_ones_fu_1153_p3 = ((carry_reg_1596[0:0] === 1'b1) ? p_41_i_i_fu_1148_p2 : Range1_all_ones_fu_1125_p2);

assign deleted_zeros_fu_1135_p3 = ((carry_reg_1596[0:0] === 1'b1) ? Range1_all_ones_fu_1125_p2 : Range1_all_zeros_fu_1130_p2);

assign exitcond1_fu_784_p2 = ((w_reg_516 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond2_fu_825_p2 = ((m_reg_540 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond8_fu_641_p2 = ((co_reg_482 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond9_fu_756_p2 = ((h_reg_504 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_fu_899_p2 = ((n_reg_563 == 2'd3) ? 1'b1 : 1'b0);

assign h_5_fu_798_p2 = (h_reg_504 + 4'd1);

assign h_cast9_cast_fu_717_p1 = h_reg_504;

assign isneg_not_fu_1294_p2 = (isneg_reg_1639 ^ 1'd1);

assign m_5_fu_831_p2 = (2'd1 + m_reg_540);

assign m_cast7_cast_fu_804_p1 = m_reg_540;

assign n_5_fu_905_p2 = (n_reg_563 + 2'd1);

assign n_cast6_cast_fu_885_p1 = n_reg_563;

assign newsignbit_fu_1088_p3 = p_Val2_45_fu_1082_p2[32'd7];

assign next_mul_fu_574_p2 = (phi_mul_reg_493 + 13'd86);

assign output_V_address0 = output_V_addr_reg_1378;

assign output_V_d0 = ((brmerge9_fu_1299_p2[0:0] === 1'b1) ? result_V_mux_fu_1304_p3 : p_result_V_fu_1311_p3);

assign overflow_fu_1181_p2 = (brmerge_i_i5_fu_1171_p2 & tmp_62_fu_1176_p2);

assign p_38_i_i_fu_1160_p2 = (carry_reg_1596 & Range1_all_ones_fu_1125_p2);

assign p_41_i_i_fu_1148_p2 = (signbit_reg_1577 & tmp_61_fu_1142_p2);

assign p_Val2_40_fu_1252_p2 = ($signed(tmp_52_fu_1248_p1) + $signed(tmp_51_fu_1244_p1));

assign p_Val2_40_mux_fu_1224_p3 = ((brmerge_i_i_i_reg_1629[0:0] === 1'b1) ? 8'd127 : p_Val2_45_reg_1584);

assign p_Val2_43_fu_1048_p2 = ($signed(tmp_96_cast_fu_1044_p1) + $signed(p_Val2_5_reg_1562));

assign p_Val2_44_fu_1061_p4 = {{p_Val2_43_fu_1048_p2[13:6]}};

assign p_Val2_45_fu_1082_p2 = (p_Val2_44_fu_1061_p4 + tmp_58_fu_1071_p1);

assign p_Val2_5_fu_1022_p0 = weight_V_load_reg_1552;

assign p_Val2_5_fu_1022_p1 = tmp_56_reg_1557;

assign p_Val2_5_fu_1022_p2 = ($signed(p_Val2_5_fu_1022_p0) * $signed(p_Val2_5_fu_1022_p1));

assign p_Val2_s_69_fu_1230_p3 = ((underflow_reg_1624[0:0] === 1'b1) ? 8'd128 : p_Val2_45_reg_1584);

assign p_not_i_i_fu_1165_p2 = (deleted_zeros_fu_1135_p3 ^ 1'd1);

assign p_result_V_fu_1311_p3 = ((underflow_7_fu_1285_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_1646);

assign p_shl1_cast_fu_631_p1 = tmp_146_fu_623_p3;

assign p_shl2_cast_fu_597_p1 = tmp_143_fu_589_p3;

assign p_shl3_cast_fu_695_p1 = tmp_151_fu_687_p3;

assign p_shl4_cast_fu_707_p1 = tmp_152_fu_699_p3;

assign p_shl5_cast_fu_734_p1 = tmp_155_fu_726_p3;

assign p_shl6_cast_fu_746_p1 = tmp_156_fu_738_p3;

assign p_shl_cast_fu_619_p1 = tmp_145_fu_611_p3;

assign result_V_fu_1266_p2 = (bias_V_q0 + p_Val2_s_reg_528);

assign result_V_mux_fu_1304_p3 = ((brmerge_i_i_fu_1290_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_1646);

assign sum_V_fu_1236_p3 = ((underflow_not_fu_1219_p2[0:0] === 1'b1) ? p_Val2_40_mux_fu_1224_p3 : p_Val2_s_69_fu_1230_p3);

assign tmp2_cast_fu_843_p1 = $signed(tmp2_fu_837_p2);

assign tmp2_fu_837_p2 = (m_reg_540 ^ 2'd2);

assign tmp3_cast_fu_917_p1 = $signed(tmp3_fu_911_p2);

assign tmp3_fu_911_p2 = (n_reg_563 ^ 2'd2);

assign tmp4_demorgan_fu_1192_p2 = (p_38_i_i_fu_1160_p2 | brmerge40_demorgan_i_fu_1187_p2);

assign tmp4_fu_1198_p2 = (tmp4_demorgan_fu_1192_p2 ^ 1'd1);

assign tmp5_fu_1215_p2 = (brmerge40_demorgan_i_reg_1619 | tmp_62_reg_1614);

assign tmp_143_fu_589_p3 = {{co_reg_482}, {2'd0}};

assign tmp_144_fu_601_p2 = (p_shl2_cast_fu_597_p1 - co_cast_cast_fu_585_p1);

assign tmp_145_fu_611_p3 = {{co_reg_482}, {3'd0}};

assign tmp_146_fu_623_p3 = {{co_reg_482}, {1'd0}};

assign tmp_147_fu_635_p2 = (p_shl1_cast_fu_631_p1 + p_shl_cast_fu_619_p1);

assign tmp_148_fu_653_p2 = ((co_reg_482 < 6'd24) ? 1'b1 : 1'b0);

assign tmp_149_fu_659_p2 = ($signed(co_reg_482) + $signed(6'd40));

assign tmp_150_fu_677_p4 = {{phi_mul_reg_493[12:11]}};

assign tmp_151_fu_687_p3 = {{tmp_150_fu_677_p4}, {4'd0}};

assign tmp_152_fu_699_p3 = {{tmp_150_fu_677_p4}, {1'd0}};

assign tmp_153_fu_711_p2 = (p_shl3_cast_fu_695_p1 + p_shl4_cast_fu_707_p1);

assign tmp_154_cast_fu_607_p1 = $signed(tmp_144_fu_601_p2);

assign tmp_154_fu_721_p2 = (h_cast9_cast_fu_717_p1 + tmp_147_reg_1337);

assign tmp_155_fu_726_p3 = {{tmp_154_fu_721_p2}, {3'd0}};

assign tmp_156_fu_738_p3 = {{tmp_154_fu_721_p2}, {1'd0}};

assign tmp_157_fu_750_p2 = (p_shl5_cast_fu_734_p1 + p_shl6_cast_fu_746_p1);

assign tmp_158_fu_774_p2 = (tmp_157_reg_1365 + w_cast8_cast_fu_770_p1);

assign tmp_159_fu_808_p2 = ($signed(m_cast7_cast_fu_804_p1) + $signed(tmp_154_cast_reg_1332));

assign tmp_160_fu_813_p2 = tmp_159_fu_808_p2 << 10'd2;

assign tmp_161_fu_819_p2 = (tmp_160_fu_813_p2 - tmp_159_fu_808_p2);

assign tmp_162_fu_856_p2 = (tmp_90_cast_cast_fu_852_p1 + tmp_153_reg_1355);

assign tmp_163_fu_873_p2 = (tmp_164_fu_861_p2 + tmp_165_fu_867_p2);

assign tmp_164_fu_861_p2 = tmp_162_fu_856_p2 << 11'd4;

assign tmp_165_fu_867_p2 = tmp_162_fu_856_p2 << 11'd1;

assign tmp_166_fu_889_p2 = (tmp_161_reg_1396 + n_cast6_cast_fu_885_p1);

assign tmp_167_fu_930_p2 = (tmp_94_cast_cast_fu_926_p1 + tmp_163_reg_1409);

assign tmp_169_cast_fu_779_p1 = tmp_158_fu_774_p2;

assign tmp_170_fu_1074_p3 = p_Val2_43_fu_1048_p2[32'd13];

assign tmp_172_fu_1118_p3 = p_Val2_43_reg_1572[32'd14];

assign tmp_177_cast_fu_894_p1 = tmp_166_fu_889_p2;

assign tmp_178_cast_fu_935_p1 = tmp_167_fu_930_p2;

assign tmp_51_fu_1244_p1 = $signed(p_Val2_s_reg_528);

assign tmp_52_fu_1248_p1 = $signed(bias_V_q0);

assign tmp_53_fu_1280_p2 = (newsignbit_7_reg_1652 ^ 1'd1);

assign tmp_54_fu_847_p2 = ($signed(tmp2_cast_fu_843_p1) + $signed(tmp_reg_1373));

assign tmp_55_fu_921_p2 = ($signed(tmp3_cast_fu_917_p1) + $signed(tmp_s_reg_1386));

assign tmp_57_fu_1036_p3 = {{p_Val2_42_reg_551}, {6'd0}};

assign tmp_58_fu_1071_p1 = tmp_169_reg_1567;

assign tmp_59_fu_1096_p2 = (newsignbit_fu_1088_p3 ^ 1'd1);

assign tmp_61_fu_1142_p2 = (tmp_172_fu_1118_p3 ^ 1'd1);

assign tmp_62_fu_1176_p2 = (signbit_reg_1577 ^ 1'd1);

assign tmp_90_cast_cast_fu_852_p1 = tmp_54_fu_847_p2;

assign tmp_94_cast_cast_fu_926_p1 = tmp_55_fu_921_p2;

assign tmp_96_cast_fu_1044_p1 = $signed(tmp_57_fu_1036_p3);

assign tmp_fu_762_p3 = {{h_reg_504}, {1'd0}};

assign tmp_s_fu_790_p3 = {{w_reg_516}, {1'd0}};

assign underflow_7_fu_1285_p2 = (isneg_reg_1639 & tmp_53_fu_1280_p2);

assign underflow_fu_1204_p2 = (signbit_reg_1577 & tmp4_fu_1198_p2);

assign underflow_not_fu_1219_p2 = (tmp5_fu_1215_p2 | p_38_i_i_reg_1609);

assign w_5_fu_879_p2 = (w_reg_516 + 4'd1);

assign w_cast8_cast_fu_770_p1 = w_reg_516;

assign weight_V_address0 = tmp_177_cast_fu_894_p1;

always @ (posedge ap_clk) begin
    tmp_147_reg_1337[0] <= 1'b0;
    arrayNo_cast_reg_1350[31:6] <= 26'b00000000000000000000000000;
    tmp_153_reg_1355[0] <= 1'b0;
    tmp_157_reg_1365[0] <= 1'b0;
    tmp_reg_1373[0] <= 1'b0;
    tmp_s_reg_1386[0] <= 1'b0;
    tmp_163_reg_1409[0] <= 1'b0;
end

endmodule //subconv_3x3_16_strid_1
