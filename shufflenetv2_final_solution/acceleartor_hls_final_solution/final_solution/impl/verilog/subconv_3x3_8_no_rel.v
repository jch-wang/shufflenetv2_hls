// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_8_no_rel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        buffer1_1_48_8x8_p_V_24_address0,
        buffer1_1_48_8x8_p_V_24_ce0,
        buffer1_1_48_8x8_p_V_24_q0,
        buffer1_1_48_8x8_p_V_1_address0,
        buffer1_1_48_8x8_p_V_1_ce0,
        buffer1_1_48_8x8_p_V_1_q0,
        buffer1_1_48_8x8_p_V_2_address0,
        buffer1_1_48_8x8_p_V_2_ce0,
        buffer1_1_48_8x8_p_V_2_q0,
        buffer1_1_48_8x8_p_V_3_address0,
        buffer1_1_48_8x8_p_V_3_ce0,
        buffer1_1_48_8x8_p_V_3_q0,
        buffer1_1_48_8x8_p_V_4_address0,
        buffer1_1_48_8x8_p_V_4_ce0,
        buffer1_1_48_8x8_p_V_4_q0,
        buffer1_1_48_8x8_p_V_5_address0,
        buffer1_1_48_8x8_p_V_5_ce0,
        buffer1_1_48_8x8_p_V_5_q0,
        buffer1_1_48_8x8_p_V_6_address0,
        buffer1_1_48_8x8_p_V_6_ce0,
        buffer1_1_48_8x8_p_V_6_q0,
        buffer1_1_48_8x8_p_V_7_address0,
        buffer1_1_48_8x8_p_V_7_ce0,
        buffer1_1_48_8x8_p_V_7_q0,
        buffer1_1_48_8x8_p_V_8_address0,
        buffer1_1_48_8x8_p_V_8_ce0,
        buffer1_1_48_8x8_p_V_8_q0,
        buffer1_1_48_8x8_p_V_9_address0,
        buffer1_1_48_8x8_p_V_9_ce0,
        buffer1_1_48_8x8_p_V_9_q0,
        buffer1_1_48_8x8_p_V_10_address0,
        buffer1_1_48_8x8_p_V_10_ce0,
        buffer1_1_48_8x8_p_V_10_q0,
        buffer1_1_48_8x8_p_V_11_address0,
        buffer1_1_48_8x8_p_V_11_ce0,
        buffer1_1_48_8x8_p_V_11_q0,
        buffer1_1_48_8x8_p_V_12_address0,
        buffer1_1_48_8x8_p_V_12_ce0,
        buffer1_1_48_8x8_p_V_12_q0,
        buffer1_1_48_8x8_p_V_13_address0,
        buffer1_1_48_8x8_p_V_13_ce0,
        buffer1_1_48_8x8_p_V_13_q0,
        buffer1_1_48_8x8_p_V_14_address0,
        buffer1_1_48_8x8_p_V_14_ce0,
        buffer1_1_48_8x8_p_V_14_q0,
        buffer1_1_48_8x8_p_V_15_address0,
        buffer1_1_48_8x8_p_V_15_ce0,
        buffer1_1_48_8x8_p_V_15_q0,
        buffer1_1_48_8x8_p_V_16_address0,
        buffer1_1_48_8x8_p_V_16_ce0,
        buffer1_1_48_8x8_p_V_16_q0,
        buffer1_1_48_8x8_p_V_17_address0,
        buffer1_1_48_8x8_p_V_17_ce0,
        buffer1_1_48_8x8_p_V_17_q0,
        buffer1_1_48_8x8_p_V_18_address0,
        buffer1_1_48_8x8_p_V_18_ce0,
        buffer1_1_48_8x8_p_V_18_q0,
        buffer1_1_48_8x8_p_V_19_address0,
        buffer1_1_48_8x8_p_V_19_ce0,
        buffer1_1_48_8x8_p_V_19_q0,
        buffer1_1_48_8x8_p_V_20_address0,
        buffer1_1_48_8x8_p_V_20_ce0,
        buffer1_1_48_8x8_p_V_20_q0,
        buffer1_1_48_8x8_p_V_21_address0,
        buffer1_1_48_8x8_p_V_21_ce0,
        buffer1_1_48_8x8_p_V_21_q0,
        buffer1_1_48_8x8_p_V_22_address0,
        buffer1_1_48_8x8_p_V_22_ce0,
        buffer1_1_48_8x8_p_V_22_q0,
        buffer1_1_48_8x8_p_V_23_address0,
        buffer1_1_48_8x8_p_V_23_ce0,
        buffer1_1_48_8x8_p_V_23_q0
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [5:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [7:0] buffer1_1_48_8x8_p_V_24_address0;
output   buffer1_1_48_8x8_p_V_24_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_24_q0;
output  [7:0] buffer1_1_48_8x8_p_V_1_address0;
output   buffer1_1_48_8x8_p_V_1_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_1_q0;
output  [7:0] buffer1_1_48_8x8_p_V_2_address0;
output   buffer1_1_48_8x8_p_V_2_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_2_q0;
output  [7:0] buffer1_1_48_8x8_p_V_3_address0;
output   buffer1_1_48_8x8_p_V_3_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_3_q0;
output  [7:0] buffer1_1_48_8x8_p_V_4_address0;
output   buffer1_1_48_8x8_p_V_4_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_4_q0;
output  [7:0] buffer1_1_48_8x8_p_V_5_address0;
output   buffer1_1_48_8x8_p_V_5_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_5_q0;
output  [7:0] buffer1_1_48_8x8_p_V_6_address0;
output   buffer1_1_48_8x8_p_V_6_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_6_q0;
output  [7:0] buffer1_1_48_8x8_p_V_7_address0;
output   buffer1_1_48_8x8_p_V_7_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_7_q0;
output  [7:0] buffer1_1_48_8x8_p_V_8_address0;
output   buffer1_1_48_8x8_p_V_8_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_8_q0;
output  [7:0] buffer1_1_48_8x8_p_V_9_address0;
output   buffer1_1_48_8x8_p_V_9_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_9_q0;
output  [7:0] buffer1_1_48_8x8_p_V_10_address0;
output   buffer1_1_48_8x8_p_V_10_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_10_q0;
output  [7:0] buffer1_1_48_8x8_p_V_11_address0;
output   buffer1_1_48_8x8_p_V_11_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_11_q0;
output  [7:0] buffer1_1_48_8x8_p_V_12_address0;
output   buffer1_1_48_8x8_p_V_12_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_12_q0;
output  [7:0] buffer1_1_48_8x8_p_V_13_address0;
output   buffer1_1_48_8x8_p_V_13_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_13_q0;
output  [7:0] buffer1_1_48_8x8_p_V_14_address0;
output   buffer1_1_48_8x8_p_V_14_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_14_q0;
output  [7:0] buffer1_1_48_8x8_p_V_15_address0;
output   buffer1_1_48_8x8_p_V_15_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_15_q0;
output  [7:0] buffer1_1_48_8x8_p_V_16_address0;
output   buffer1_1_48_8x8_p_V_16_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_16_q0;
output  [7:0] buffer1_1_48_8x8_p_V_17_address0;
output   buffer1_1_48_8x8_p_V_17_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_17_q0;
output  [7:0] buffer1_1_48_8x8_p_V_18_address0;
output   buffer1_1_48_8x8_p_V_18_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_18_q0;
output  [7:0] buffer1_1_48_8x8_p_V_19_address0;
output   buffer1_1_48_8x8_p_V_19_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_19_q0;
output  [7:0] buffer1_1_48_8x8_p_V_20_address0;
output   buffer1_1_48_8x8_p_V_20_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_20_q0;
output  [7:0] buffer1_1_48_8x8_p_V_21_address0;
output   buffer1_1_48_8x8_p_V_21_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_21_q0;
output  [7:0] buffer1_1_48_8x8_p_V_22_address0;
output   buffer1_1_48_8x8_p_V_22_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_22_q0;
output  [7:0] buffer1_1_48_8x8_p_V_23_address0;
output   buffer1_1_48_8x8_p_V_23_ce0;
input  [7:0] buffer1_1_48_8x8_p_V_23_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg buffer1_1_48_8x8_p_V_24_ce0;
reg buffer1_1_48_8x8_p_V_1_ce0;
reg buffer1_1_48_8x8_p_V_2_ce0;
reg buffer1_1_48_8x8_p_V_3_ce0;
reg buffer1_1_48_8x8_p_V_4_ce0;
reg buffer1_1_48_8x8_p_V_5_ce0;
reg buffer1_1_48_8x8_p_V_6_ce0;
reg buffer1_1_48_8x8_p_V_7_ce0;
reg buffer1_1_48_8x8_p_V_8_ce0;
reg buffer1_1_48_8x8_p_V_9_ce0;
reg buffer1_1_48_8x8_p_V_10_ce0;
reg buffer1_1_48_8x8_p_V_11_ce0;
reg buffer1_1_48_8x8_p_V_12_ce0;
reg buffer1_1_48_8x8_p_V_13_ce0;
reg buffer1_1_48_8x8_p_V_14_ce0;
reg buffer1_1_48_8x8_p_V_15_ce0;
reg buffer1_1_48_8x8_p_V_16_ce0;
reg buffer1_1_48_8x8_p_V_17_ce0;
reg buffer1_1_48_8x8_p_V_18_ce0;
reg buffer1_1_48_8x8_p_V_19_ce0;
reg buffer1_1_48_8x8_p_V_20_ce0;
reg buffer1_1_48_8x8_p_V_21_ce0;
reg buffer1_1_48_8x8_p_V_22_ce0;
reg buffer1_1_48_8x8_p_V_23_ce0;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [12:0] next_mul_fu_566_p2;
reg   [12:0] next_mul_reg_1315;
wire    ap_CS_fsm_state2;
wire  signed [9:0] tmp_60_cast_fu_599_p1;
reg  signed [9:0] tmp_60_cast_reg_1320;
wire   [9:0] tmp_58_fu_627_p2;
reg   [9:0] tmp_58_reg_1325;
wire   [5:0] co_2_fu_639_p2;
reg   [5:0] co_2_reg_1333;
wire   [31:0] arrayNo_cast_fu_665_p1;
reg   [31:0] arrayNo_cast_reg_1338;
wire   [0:0] exitcond5_fu_633_p2;
wire   [9:0] tmp_64_fu_703_p2;
reg   [9:0] tmp_64_reg_1343;
reg   [5:0] bias_V_addr_reg_1348;
wire   [13:0] tmp_68_fu_742_p2;
reg   [13:0] tmp_68_reg_1353;
wire    ap_CS_fsm_state3;
reg   [12:0] output_V_addr_reg_1361;
wire    ap_CS_fsm_state4;
wire   [3:0] h_2_fu_774_p2;
wire   [0:0] exitcond7_fu_768_p2;
wire   [9:0] tmp_72_fu_795_p2;
reg   [9:0] tmp_72_reg_1374;
wire    ap_CS_fsm_state5;
wire   [1:0] m_2_fu_807_p2;
reg   [1:0] m_2_reg_1382;
wire   [3:0] tmp_20_fu_823_p2;
reg   [3:0] tmp_20_reg_1387;
wire   [0:0] exitcond8_fu_801_p2;
wire   [8:0] tmp_74_fu_861_p2;
reg   [8:0] tmp_74_reg_1392;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [1:0] n_2_fu_887_p2;
reg   [1:0] n_2_reg_1405;
wire   [8:0] tmp_78_fu_913_p2;
reg   [8:0] tmp_78_reg_1410;
wire   [0:0] exitcond_fu_881_p2;
wire    ap_CS_fsm_state8;
reg   [7:0] weight_V_load_reg_1535;
wire   [7:0] tmp_18_fu_945_p26;
reg   [7:0] tmp_18_reg_1540;
wire    ap_CS_fsm_state9;
wire   [15:0] p_Val2_1_fu_1004_p2;
reg   [15:0] p_Val2_1_reg_1545;
wire    ap_CS_fsm_state10;
reg   [0:0] tmp_80_reg_1550;
wire   [15:0] p_Val2_15_fu_1030_p2;
reg   [15:0] p_Val2_15_reg_1555;
wire    ap_CS_fsm_state11;
reg   [0:0] signbit_reg_1560;
wire   [7:0] p_Val2_17_fu_1064_p2;
reg   [7:0] p_Val2_17_reg_1567;
wire   [0:0] newsignbit_fu_1070_p3;
reg   [0:0] newsignbit_reg_1573;
wire   [0:0] carry_fu_1084_p2;
reg   [0:0] carry_reg_1579;
reg   [1:0] tmp_25_reg_1586;
wire   [0:0] p_38_i_i_fu_1142_p2;
reg   [0:0] p_38_i_i_reg_1592;
wire    ap_CS_fsm_state12;
wire   [0:0] tmp_27_fu_1158_p2;
reg   [0:0] tmp_27_reg_1597;
wire   [0:0] brmerge40_demorgan_i_fu_1169_p2;
reg   [0:0] brmerge40_demorgan_i_reg_1602;
wire   [0:0] underflow_fu_1186_p2;
reg   [0:0] underflow_reg_1607;
wire   [0:0] brmerge_i_i_i_fu_1191_p2;
reg   [0:0] brmerge_i_i_i_reg_1612;
wire   [7:0] sum_V_fu_1218_p3;
wire    ap_CS_fsm_state13;
reg   [0:0] isneg_reg_1622;
wire    ap_CS_fsm_state14;
wire   [7:0] result_V_fu_1248_p2;
reg   [7:0] result_V_reg_1629;
reg   [0:0] newsignbit_3_reg_1635;
wire   [3:0] w_2_fu_1309_p2;
wire    ap_CS_fsm_state15;
reg   [5:0] co_reg_474;
wire   [0:0] exitcond6_fu_748_p2;
reg   [12:0] phi_mul_reg_485;
reg   [3:0] h_reg_496;
reg   [3:0] w_reg_508;
reg   [7:0] p_Val2_s_reg_520;
reg   [1:0] m_reg_532;
reg   [7:0] p_Val2_14_reg_543;
reg   [1:0] n_reg_555;
wire   [31:0] co_cast_fu_572_p1;
wire   [31:0] tmp_75_cast_fu_763_p1;
wire   [31:0] tmp_83_cast_fu_876_p1;
wire   [31:0] tmp_84_cast_fu_918_p1;
wire   [7:0] tmp_54_fu_581_p3;
wire   [8:0] p_shl2_cast_fu_589_p1;
wire   [8:0] co_cast_cast_fu_577_p1;
wire   [8:0] tmp_55_fu_593_p2;
wire   [8:0] tmp_56_fu_603_p3;
wire   [6:0] tmp_57_fu_615_p3;
wire   [9:0] p_shl1_cast_fu_623_p1;
wire   [9:0] p_shl_cast_fu_611_p1;
wire   [0:0] tmp_59_fu_645_p2;
wire   [5:0] tmp_60_fu_651_p2;
wire   [5:0] arrayNo_fu_657_p3;
wire   [1:0] tmp_61_fu_669_p4;
wire   [4:0] tmp_62_fu_679_p3;
wire   [2:0] tmp_63_fu_691_p3;
wire   [9:0] p_shl3_cast_fu_687_p1;
wire   [9:0] p_shl4_cast_fu_699_p1;
wire   [9:0] h_cast9_cast_fu_709_p1;
wire   [9:0] tmp_65_fu_713_p2;
wire   [12:0] tmp_66_fu_718_p3;
wire   [10:0] tmp_67_fu_730_p3;
wire   [13:0] p_shl5_cast_fu_726_p1;
wire   [13:0] p_shl6_cast_fu_738_p1;
wire   [13:0] w_cast8_cast_fu_754_p1;
wire   [13:0] tmp_69_fu_758_p2;
wire   [9:0] m_cast7_cast_fu_780_p1;
wire   [9:0] tmp_70_fu_784_p2;
wire   [9:0] tmp_71_fu_789_p2;
wire   [1:0] tmp2_fu_813_p2;
wire  signed [3:0] tmp2_cast_fu_819_p1;
wire   [9:0] tmp_24_cast_cast_fu_829_p1;
wire   [9:0] tmp_73_fu_832_p2;
wire   [5:0] tmp_75_fu_837_p1;
wire   [7:0] tmp_76_fu_849_p1;
wire   [8:0] p_shl8_cast_fu_841_p3;
wire   [8:0] p_shl9_cast_fu_853_p3;
wire   [9:0] n_cast6_cast_fu_867_p1;
wire   [9:0] tmp_77_fu_871_p2;
wire   [1:0] tmp3_fu_893_p2;
wire  signed [3:0] tmp3_cast_fu_899_p1;
wire   [3:0] tmp_21_fu_903_p2;
wire   [8:0] tmp_28_cast_cast_fu_909_p1;
wire  signed [7:0] p_Val2_1_fu_1004_p0;
wire  signed [7:0] p_Val2_1_fu_1004_p1;
wire   [13:0] tmp_22_fu_1018_p3;
wire  signed [15:0] tmp_30_cast_fu_1026_p1;
wire   [7:0] p_Val2_16_fu_1043_p4;
wire   [7:0] tmp_23_fu_1053_p1;
wire   [0:0] tmp_81_fu_1056_p3;
wire   [0:0] tmp_24_fu_1078_p2;
wire   [0:0] Range1_all_ones_fu_1107_p2;
wire   [0:0] Range1_all_zeros_fu_1112_p2;
wire   [0:0] tmp_83_fu_1100_p3;
wire   [0:0] tmp_26_fu_1124_p2;
wire   [0:0] p_41_i_i_fu_1130_p2;
wire   [0:0] deleted_zeros_fu_1117_p3;
wire   [0:0] p_not_i_i_fu_1147_p2;
wire   [0:0] brmerge_i_i2_fu_1153_p2;
wire   [0:0] deleted_ones_fu_1135_p3;
wire   [0:0] tmp4_demorgan_fu_1174_p2;
wire   [0:0] tmp4_fu_1180_p2;
wire   [0:0] overflow_fu_1163_p2;
wire   [0:0] tmp5_fu_1197_p2;
wire   [0:0] underflow_not_fu_1201_p2;
wire   [7:0] p_Val2_16_mux_fu_1206_p3;
wire   [7:0] p_Val2_s_49_fu_1212_p3;
wire  signed [8:0] tmp_s_fu_1230_p1;
wire  signed [8:0] tmp_fu_1226_p1;
wire   [8:0] p_Val2_12_fu_1234_p2;
wire   [0:0] tmp_19_fu_1262_p2;
wire   [0:0] isneg_not_fu_1276_p2;
wire   [0:0] brmerge_i_i_fu_1272_p2;
wire   [0:0] underflow_3_fu_1267_p2;
wire   [0:0] brmerge9_fu_1281_p2;
wire   [7:0] result_V_mux_fu_1286_p3;
wire   [7:0] p_result_V_fu_1293_p3;
reg   [14:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

ShuffleNetV2_mux_sc4 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_sc4_x_U483(
    .din1(buffer1_1_48_8x8_p_V_24_q0),
    .din2(buffer1_1_48_8x8_p_V_1_q0),
    .din3(buffer1_1_48_8x8_p_V_2_q0),
    .din4(buffer1_1_48_8x8_p_V_3_q0),
    .din5(buffer1_1_48_8x8_p_V_4_q0),
    .din6(buffer1_1_48_8x8_p_V_5_q0),
    .din7(buffer1_1_48_8x8_p_V_6_q0),
    .din8(buffer1_1_48_8x8_p_V_7_q0),
    .din9(buffer1_1_48_8x8_p_V_8_q0),
    .din10(buffer1_1_48_8x8_p_V_9_q0),
    .din11(buffer1_1_48_8x8_p_V_10_q0),
    .din12(buffer1_1_48_8x8_p_V_11_q0),
    .din13(buffer1_1_48_8x8_p_V_12_q0),
    .din14(buffer1_1_48_8x8_p_V_13_q0),
    .din15(buffer1_1_48_8x8_p_V_14_q0),
    .din16(buffer1_1_48_8x8_p_V_15_q0),
    .din17(buffer1_1_48_8x8_p_V_16_q0),
    .din18(buffer1_1_48_8x8_p_V_17_q0),
    .din19(buffer1_1_48_8x8_p_V_18_q0),
    .din20(buffer1_1_48_8x8_p_V_19_q0),
    .din21(buffer1_1_48_8x8_p_V_20_q0),
    .din22(buffer1_1_48_8x8_p_V_21_q0),
    .din23(buffer1_1_48_8x8_p_V_22_q0),
    .din24(buffer1_1_48_8x8_p_V_23_q0),
    .din25(arrayNo_cast_reg_1338),
    .dout(tmp_18_fu_945_p26)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond6_fu_748_p2))) begin
        co_reg_474 <= co_2_reg_1333;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_474 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_633_p2 == 1'd0))) begin
        h_reg_496 <= 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond7_fu_768_p2 == 1'd1))) begin
        h_reg_496 <= h_2_fu_774_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond7_fu_768_p2))) begin
        m_reg_532 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_881_p2))) begin
        m_reg_532 <= m_2_reg_1382;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        n_reg_555 <= n_2_reg_1405;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        n_reg_555 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        p_Val2_14_reg_543 <= sum_V_fu_1218_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_14_reg_543 <= p_Val2_s_reg_520;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond7_fu_768_p2))) begin
        p_Val2_s_reg_520 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_881_p2))) begin
        p_Val2_s_reg_520 <= p_Val2_14_reg_543;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond6_fu_748_p2))) begin
        phi_mul_reg_485 <= next_mul_reg_1315;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_485 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond6_fu_748_p2))) begin
        w_reg_508 <= 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        w_reg_508 <= w_2_fu_1309_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_633_p2 == 1'd0))) begin
        arrayNo_cast_reg_1338[5 : 0] <= arrayNo_cast_fu_665_p1[5 : 0];
        bias_V_addr_reg_1348 <= co_cast_fu_572_p1;
        tmp_64_reg_1343[9 : 1] <= tmp_64_fu_703_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        brmerge40_demorgan_i_reg_1602 <= brmerge40_demorgan_i_fu_1169_p2;
        brmerge_i_i_i_reg_1612 <= brmerge_i_i_i_fu_1191_p2;
        p_38_i_i_reg_1592 <= p_38_i_i_fu_1142_p2;
        tmp_27_reg_1597 <= tmp_27_fu_1158_p2;
        underflow_reg_1607 <= underflow_fu_1186_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        carry_reg_1579 <= carry_fu_1084_p2;
        newsignbit_reg_1573 <= p_Val2_17_fu_1064_p2[32'd7];
        p_Val2_15_reg_1555 <= p_Val2_15_fu_1030_p2;
        p_Val2_17_reg_1567 <= p_Val2_17_fu_1064_p2;
        signbit_reg_1560 <= p_Val2_15_fu_1030_p2[32'd15];
        tmp_25_reg_1586 <= {{p_Val2_15_fu_1030_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_2_reg_1333 <= co_2_fu_639_p2;
        next_mul_reg_1315 <= next_mul_fu_566_p2;
        tmp_58_reg_1325[9 : 1] <= tmp_58_fu_627_p2[9 : 1];
        tmp_60_cast_reg_1320 <= tmp_60_cast_fu_599_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        isneg_reg_1622 <= p_Val2_12_fu_1234_p2[32'd8];
        newsignbit_3_reg_1635 <= result_V_fu_1248_p2[32'd7];
        result_V_reg_1629 <= result_V_fu_1248_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_2_reg_1382 <= m_2_fu_807_p2;
        tmp_72_reg_1374 <= tmp_72_fu_795_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        n_2_reg_1405 <= n_2_fu_887_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_addr_reg_1361 <= tmp_75_cast_fu_763_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Val2_1_reg_1545 <= p_Val2_1_fu_1004_p2;
        tmp_80_reg_1550 <= p_Val2_1_fu_1004_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_18_reg_1540 <= tmp_18_fu_945_p26;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond8_fu_801_p2))) begin
        tmp_20_reg_1387 <= tmp_20_fu_823_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_68_reg_1353[13 : 1] <= tmp_68_fu_742_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_74_reg_1392[8 : 1] <= tmp_74_fu_861_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond_fu_881_p2))) begin
        tmp_78_reg_1410 <= tmp_78_fu_913_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        weight_V_load_reg_1535 <= weight_V_q0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_633_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_633_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_10_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_11_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_12_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_13_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_14_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_15_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_16_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_17_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_18_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_19_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_1_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_20_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_21_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_22_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_23_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_24_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_2_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_3_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_4_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_5_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_6_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_7_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_8_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_1_48_8x8_p_V_9_ce0 = 1'b1;
    end else begin
        buffer1_1_48_8x8_p_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_633_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond6_fu_748_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond7_fu_768_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond8_fu_801_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_881_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_1107_p2 = ((tmp_25_reg_1586 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_1112_p2 = ((tmp_25_reg_1586 == 2'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign arrayNo_cast_fu_665_p1 = arrayNo_fu_657_p3;

assign arrayNo_fu_657_p3 = ((tmp_59_fu_645_p2[0:0] === 1'b1) ? co_reg_474 : tmp_60_fu_651_p2);

assign bias_V_address0 = bias_V_addr_reg_1348;

assign brmerge40_demorgan_i_fu_1169_p2 = (newsignbit_reg_1573 & deleted_ones_fu_1135_p3);

assign brmerge9_fu_1281_p2 = (newsignbit_3_reg_1635 | isneg_not_fu_1276_p2);

assign brmerge_i_i2_fu_1153_p2 = (newsignbit_reg_1573 | p_not_i_i_fu_1147_p2);

assign brmerge_i_i_fu_1272_p2 = (isneg_reg_1622 ^ newsignbit_3_reg_1635);

assign brmerge_i_i_i_fu_1191_p2 = (underflow_fu_1186_p2 | overflow_fu_1163_p2);

assign buffer1_1_48_8x8_p_V_10_address0 = tmp_84_cast_fu_918_p1;

assign buffer1_1_48_8x8_p_V_11_address0 = tmp_84_cast_fu_918_p1;

assign buffer1_1_48_8x8_p_V_12_address0 = tmp_84_cast_fu_918_p1;

assign buffer1_1_48_8x8_p_V_13_address0 = tmp_84_cast_fu_918_p1;

assign buffer1_1_48_8x8_p_V_14_address0 = tmp_84_cast_fu_918_p1;

assign buffer1_1_48_8x8_p_V_15_address0 = tmp_84_cast_fu_918_p1;

assign buffer1_1_48_8x8_p_V_16_address0 = tmp_84_cast_fu_918_p1;

assign buffer1_1_48_8x8_p_V_17_address0 = tmp_84_cast_fu_918_p1;

assign buffer1_1_48_8x8_p_V_18_address0 = tmp_84_cast_fu_918_p1;

assign buffer1_1_48_8x8_p_V_19_address0 = tmp_84_cast_fu_918_p1;

assign buffer1_1_48_8x8_p_V_1_address0 = tmp_84_cast_fu_918_p1;

assign buffer1_1_48_8x8_p_V_20_address0 = tmp_84_cast_fu_918_p1;

assign buffer1_1_48_8x8_p_V_21_address0 = tmp_84_cast_fu_918_p1;

assign buffer1_1_48_8x8_p_V_22_address0 = tmp_84_cast_fu_918_p1;

assign buffer1_1_48_8x8_p_V_23_address0 = tmp_84_cast_fu_918_p1;

assign buffer1_1_48_8x8_p_V_24_address0 = tmp_84_cast_fu_918_p1;

assign buffer1_1_48_8x8_p_V_2_address0 = tmp_84_cast_fu_918_p1;

assign buffer1_1_48_8x8_p_V_3_address0 = tmp_84_cast_fu_918_p1;

assign buffer1_1_48_8x8_p_V_4_address0 = tmp_84_cast_fu_918_p1;

assign buffer1_1_48_8x8_p_V_5_address0 = tmp_84_cast_fu_918_p1;

assign buffer1_1_48_8x8_p_V_6_address0 = tmp_84_cast_fu_918_p1;

assign buffer1_1_48_8x8_p_V_7_address0 = tmp_84_cast_fu_918_p1;

assign buffer1_1_48_8x8_p_V_8_address0 = tmp_84_cast_fu_918_p1;

assign buffer1_1_48_8x8_p_V_9_address0 = tmp_84_cast_fu_918_p1;

assign carry_fu_1084_p2 = (tmp_81_fu_1056_p3 & tmp_24_fu_1078_p2);

assign co_2_fu_639_p2 = (co_reg_474 + 6'd1);

assign co_cast_cast_fu_577_p1 = co_reg_474;

assign co_cast_fu_572_p1 = co_reg_474;

assign deleted_ones_fu_1135_p3 = ((carry_reg_1579[0:0] === 1'b1) ? p_41_i_i_fu_1130_p2 : Range1_all_ones_fu_1107_p2);

assign deleted_zeros_fu_1117_p3 = ((carry_reg_1579[0:0] === 1'b1) ? Range1_all_ones_fu_1107_p2 : Range1_all_zeros_fu_1112_p2);

assign exitcond5_fu_633_p2 = ((co_reg_474 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond6_fu_748_p2 = ((h_reg_496 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond7_fu_768_p2 = ((w_reg_508 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond8_fu_801_p2 = ((m_reg_532 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_881_p2 = ((n_reg_555 == 2'd3) ? 1'b1 : 1'b0);

assign h_2_fu_774_p2 = (h_reg_496 + 4'd1);

assign h_cast9_cast_fu_709_p1 = h_reg_496;

assign isneg_not_fu_1276_p2 = (isneg_reg_1622 ^ 1'd1);

assign m_2_fu_807_p2 = (2'd1 + m_reg_532);

assign m_cast7_cast_fu_780_p1 = m_reg_532;

assign n_2_fu_887_p2 = (n_reg_555 + 2'd1);

assign n_cast6_cast_fu_867_p1 = n_reg_555;

assign newsignbit_fu_1070_p3 = p_Val2_17_fu_1064_p2[32'd7];

assign next_mul_fu_566_p2 = (phi_mul_reg_485 + 13'd86);

assign output_V_address0 = output_V_addr_reg_1361;

assign output_V_d0 = ((brmerge9_fu_1281_p2[0:0] === 1'b1) ? result_V_mux_fu_1286_p3 : p_result_V_fu_1293_p3);

assign overflow_fu_1163_p2 = (brmerge_i_i2_fu_1153_p2 & tmp_27_fu_1158_p2);

assign p_38_i_i_fu_1142_p2 = (carry_reg_1579 & Range1_all_ones_fu_1107_p2);

assign p_41_i_i_fu_1130_p2 = (signbit_reg_1560 & tmp_26_fu_1124_p2);

assign p_Val2_12_fu_1234_p2 = ($signed(tmp_s_fu_1230_p1) + $signed(tmp_fu_1226_p1));

assign p_Val2_15_fu_1030_p2 = ($signed(tmp_30_cast_fu_1026_p1) + $signed(p_Val2_1_reg_1545));

assign p_Val2_16_fu_1043_p4 = {{p_Val2_15_fu_1030_p2[13:6]}};

assign p_Val2_16_mux_fu_1206_p3 = ((brmerge_i_i_i_reg_1612[0:0] === 1'b1) ? 8'd127 : p_Val2_17_reg_1567);

assign p_Val2_17_fu_1064_p2 = (p_Val2_16_fu_1043_p4 + tmp_23_fu_1053_p1);

assign p_Val2_1_fu_1004_p0 = weight_V_load_reg_1535;

assign p_Val2_1_fu_1004_p1 = tmp_18_reg_1540;

assign p_Val2_1_fu_1004_p2 = ($signed(p_Val2_1_fu_1004_p0) * $signed(p_Val2_1_fu_1004_p1));

assign p_Val2_s_49_fu_1212_p3 = ((underflow_reg_1607[0:0] === 1'b1) ? 8'd128 : p_Val2_17_reg_1567);

assign p_not_i_i_fu_1147_p2 = (deleted_zeros_fu_1117_p3 ^ 1'd1);

assign p_result_V_fu_1293_p3 = ((underflow_3_fu_1267_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_1629);

assign p_shl1_cast_fu_623_p1 = tmp_57_fu_615_p3;

assign p_shl2_cast_fu_589_p1 = tmp_54_fu_581_p3;

assign p_shl3_cast_fu_687_p1 = tmp_62_fu_679_p3;

assign p_shl4_cast_fu_699_p1 = tmp_63_fu_691_p3;

assign p_shl5_cast_fu_726_p1 = tmp_66_fu_718_p3;

assign p_shl6_cast_fu_738_p1 = tmp_67_fu_730_p3;

assign p_shl8_cast_fu_841_p3 = {{tmp_75_fu_837_p1}, {3'd0}};

assign p_shl9_cast_fu_853_p3 = {{tmp_76_fu_849_p1}, {1'd0}};

assign p_shl_cast_fu_611_p1 = tmp_56_fu_603_p3;

assign result_V_fu_1248_p2 = (bias_V_q0 + p_Val2_s_reg_520);

assign result_V_mux_fu_1286_p3 = ((brmerge_i_i_fu_1272_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_1629);

assign sum_V_fu_1218_p3 = ((underflow_not_fu_1201_p2[0:0] === 1'b1) ? p_Val2_16_mux_fu_1206_p3 : p_Val2_s_49_fu_1212_p3);

assign tmp2_cast_fu_819_p1 = $signed(tmp2_fu_813_p2);

assign tmp2_fu_813_p2 = ($signed(2'd3) + $signed(m_reg_532));

assign tmp3_cast_fu_899_p1 = $signed(tmp3_fu_893_p2);

assign tmp3_fu_893_p2 = ($signed(n_reg_555) + $signed(2'd3));

assign tmp4_demorgan_fu_1174_p2 = (p_38_i_i_fu_1142_p2 | brmerge40_demorgan_i_fu_1169_p2);

assign tmp4_fu_1180_p2 = (tmp4_demorgan_fu_1174_p2 ^ 1'd1);

assign tmp5_fu_1197_p2 = (brmerge40_demorgan_i_reg_1602 | tmp_27_reg_1597);

assign tmp_19_fu_1262_p2 = (newsignbit_3_reg_1635 ^ 1'd1);

assign tmp_20_fu_823_p2 = ($signed(tmp2_cast_fu_819_p1) + $signed(h_reg_496));

assign tmp_21_fu_903_p2 = ($signed(tmp3_cast_fu_899_p1) + $signed(w_reg_508));

assign tmp_22_fu_1018_p3 = {{p_Val2_14_reg_543}, {6'd0}};

assign tmp_23_fu_1053_p1 = tmp_80_reg_1550;

assign tmp_24_cast_cast_fu_829_p1 = tmp_20_reg_1387;

assign tmp_24_fu_1078_p2 = (newsignbit_fu_1070_p3 ^ 1'd1);

assign tmp_26_fu_1124_p2 = (tmp_83_fu_1100_p3 ^ 1'd1);

assign tmp_27_fu_1158_p2 = (signbit_reg_1560 ^ 1'd1);

assign tmp_28_cast_cast_fu_909_p1 = tmp_21_fu_903_p2;

assign tmp_30_cast_fu_1026_p1 = $signed(tmp_22_fu_1018_p3);

assign tmp_54_fu_581_p3 = {{co_reg_474}, {2'd0}};

assign tmp_55_fu_593_p2 = (p_shl2_cast_fu_589_p1 - co_cast_cast_fu_577_p1);

assign tmp_56_fu_603_p3 = {{co_reg_474}, {3'd0}};

assign tmp_57_fu_615_p3 = {{co_reg_474}, {1'd0}};

assign tmp_58_fu_627_p2 = (p_shl1_cast_fu_623_p1 + p_shl_cast_fu_611_p1);

assign tmp_59_fu_645_p2 = ((co_reg_474 < 6'd24) ? 1'b1 : 1'b0);

assign tmp_60_cast_fu_599_p1 = $signed(tmp_55_fu_593_p2);

assign tmp_60_fu_651_p2 = ($signed(co_reg_474) + $signed(6'd40));

assign tmp_61_fu_669_p4 = {{phi_mul_reg_485[12:11]}};

assign tmp_62_fu_679_p3 = {{tmp_61_fu_669_p4}, {3'd0}};

assign tmp_63_fu_691_p3 = {{tmp_61_fu_669_p4}, {1'd0}};

assign tmp_64_fu_703_p2 = (p_shl3_cast_fu_687_p1 + p_shl4_cast_fu_699_p1);

assign tmp_65_fu_713_p2 = (h_cast9_cast_fu_709_p1 + tmp_58_reg_1325);

assign tmp_66_fu_718_p3 = {{tmp_65_fu_713_p2}, {3'd0}};

assign tmp_67_fu_730_p3 = {{tmp_65_fu_713_p2}, {1'd0}};

assign tmp_68_fu_742_p2 = (p_shl5_cast_fu_726_p1 + p_shl6_cast_fu_738_p1);

assign tmp_69_fu_758_p2 = (tmp_68_reg_1353 + w_cast8_cast_fu_754_p1);

assign tmp_70_fu_784_p2 = ($signed(m_cast7_cast_fu_780_p1) + $signed(tmp_60_cast_reg_1320));

assign tmp_71_fu_789_p2 = tmp_70_fu_784_p2 << 10'd2;

assign tmp_72_fu_795_p2 = (tmp_71_fu_789_p2 - tmp_70_fu_784_p2);

assign tmp_73_fu_832_p2 = (tmp_24_cast_cast_fu_829_p1 + tmp_64_reg_1343);

assign tmp_74_fu_861_p2 = (p_shl8_cast_fu_841_p3 + p_shl9_cast_fu_853_p3);

assign tmp_75_cast_fu_763_p1 = tmp_69_fu_758_p2;

assign tmp_75_fu_837_p1 = tmp_73_fu_832_p2[5:0];

assign tmp_76_fu_849_p1 = tmp_73_fu_832_p2[7:0];

assign tmp_77_fu_871_p2 = (tmp_72_reg_1374 + n_cast6_cast_fu_867_p1);

assign tmp_78_fu_913_p2 = (tmp_28_cast_cast_fu_909_p1 + tmp_74_reg_1392);

assign tmp_81_fu_1056_p3 = p_Val2_15_fu_1030_p2[32'd13];

assign tmp_83_cast_fu_876_p1 = tmp_77_fu_871_p2;

assign tmp_83_fu_1100_p3 = p_Val2_15_reg_1555[32'd14];

assign tmp_84_cast_fu_918_p1 = tmp_78_reg_1410;

assign tmp_fu_1226_p1 = $signed(p_Val2_s_reg_520);

assign tmp_s_fu_1230_p1 = $signed(bias_V_q0);

assign underflow_3_fu_1267_p2 = (isneg_reg_1622 & tmp_19_fu_1262_p2);

assign underflow_fu_1186_p2 = (signbit_reg_1560 & tmp4_fu_1180_p2);

assign underflow_not_fu_1201_p2 = (tmp5_fu_1197_p2 | p_38_i_i_reg_1592);

assign w_2_fu_1309_p2 = (w_reg_508 + 4'd1);

assign w_cast8_cast_fu_754_p1 = w_reg_508;

assign weight_V_address0 = tmp_83_cast_fu_876_p1;

always @ (posedge ap_clk) begin
    tmp_58_reg_1325[0] <= 1'b0;
    arrayNo_cast_reg_1338[31:6] <= 26'b00000000000000000000000000;
    tmp_64_reg_1343[0] <= 1'b0;
    tmp_68_reg_1353[0] <= 1'b0;
    tmp_74_reg_1392[0] <= 1'b0;
end

endmodule //subconv_3x3_8_no_rel
