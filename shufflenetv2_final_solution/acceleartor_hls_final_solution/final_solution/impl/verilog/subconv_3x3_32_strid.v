// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_32_strid (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        conv1_output_p_V_0_address0,
        conv1_output_p_V_0_ce0,
        conv1_output_p_V_0_q0,
        conv1_output_p_V_1_address0,
        conv1_output_p_V_1_ce0,
        conv1_output_p_V_1_q0,
        conv1_output_p_V_2_address0,
        conv1_output_p_V_2_ce0,
        conv1_output_p_V_2_q0,
        conv1_output_p_V_3_address0,
        conv1_output_p_V_3_ce0,
        conv1_output_p_V_3_q0,
        conv1_output_p_V_4_address0,
        conv1_output_p_V_4_ce0,
        conv1_output_p_V_4_q0,
        conv1_output_p_V_5_address0,
        conv1_output_p_V_5_ce0,
        conv1_output_p_V_5_q0,
        conv1_output_p_V_6_address0,
        conv1_output_p_V_6_ce0,
        conv1_output_p_V_6_q0,
        conv1_output_p_V_7_address0,
        conv1_output_p_V_7_ce0,
        conv1_output_p_V_7_q0,
        conv1_output_p_V_8_address0,
        conv1_output_p_V_8_ce0,
        conv1_output_p_V_8_q0,
        conv1_output_p_V_9_address0,
        conv1_output_p_V_9_ce0,
        conv1_output_p_V_9_q0,
        conv1_output_p_V_10_address0,
        conv1_output_p_V_10_ce0,
        conv1_output_p_V_10_q0,
        conv1_output_p_V_11_address0,
        conv1_output_p_V_11_ce0,
        conv1_output_p_V_11_q0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [4:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [11:0] conv1_output_p_V_0_address0;
output   conv1_output_p_V_0_ce0;
input  [7:0] conv1_output_p_V_0_q0;
output  [11:0] conv1_output_p_V_1_address0;
output   conv1_output_p_V_1_ce0;
input  [7:0] conv1_output_p_V_1_q0;
output  [11:0] conv1_output_p_V_2_address0;
output   conv1_output_p_V_2_ce0;
input  [7:0] conv1_output_p_V_2_q0;
output  [11:0] conv1_output_p_V_3_address0;
output   conv1_output_p_V_3_ce0;
input  [7:0] conv1_output_p_V_3_q0;
output  [11:0] conv1_output_p_V_4_address0;
output   conv1_output_p_V_4_ce0;
input  [7:0] conv1_output_p_V_4_q0;
output  [11:0] conv1_output_p_V_5_address0;
output   conv1_output_p_V_5_ce0;
input  [7:0] conv1_output_p_V_5_q0;
output  [11:0] conv1_output_p_V_6_address0;
output   conv1_output_p_V_6_ce0;
input  [7:0] conv1_output_p_V_6_q0;
output  [11:0] conv1_output_p_V_7_address0;
output   conv1_output_p_V_7_ce0;
input  [7:0] conv1_output_p_V_7_q0;
output  [11:0] conv1_output_p_V_8_address0;
output   conv1_output_p_V_8_ce0;
input  [7:0] conv1_output_p_V_8_q0;
output  [11:0] conv1_output_p_V_9_address0;
output   conv1_output_p_V_9_ce0;
input  [7:0] conv1_output_p_V_9_q0;
output  [11:0] conv1_output_p_V_10_address0;
output   conv1_output_p_V_10_ce0;
input  [7:0] conv1_output_p_V_10_q0;
output  [11:0] conv1_output_p_V_11_address0;
output   conv1_output_p_V_11_ce0;
input  [7:0] conv1_output_p_V_11_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg conv1_output_p_V_0_ce0;
reg conv1_output_p_V_1_ce0;
reg conv1_output_p_V_2_ce0;
reg conv1_output_p_V_3_ce0;
reg conv1_output_p_V_4_ce0;
reg conv1_output_p_V_5_ce0;
reg conv1_output_p_V_6_ce0;
reg conv1_output_p_V_7_ce0;
reg conv1_output_p_V_8_ce0;
reg conv1_output_p_V_9_ce0;
reg conv1_output_p_V_10_ce0;
reg conv1_output_p_V_11_ce0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] next_mul_fu_402_p2;
reg   [10:0] next_mul_reg_1127;
wire    ap_CS_fsm_state2;
wire  signed [8:0] tmp_128_cast_fu_435_p1;
reg  signed [8:0] tmp_128_cast_reg_1132;
wire   [9:0] tmp_123_fu_463_p2;
reg   [9:0] tmp_123_reg_1137;
wire   [4:0] co_4_fu_475_p2;
reg   [4:0] co_4_reg_1145;
wire   [31:0] arrayNo_cast_fu_501_p1;
reg   [31:0] arrayNo_cast_reg_1150;
wire   [0:0] exitcond4_fu_469_p2;
wire   [10:0] tmp_129_fu_539_p2;
reg   [10:0] tmp_129_reg_1155;
reg   [4:0] bias_V_addr_reg_1160;
wire   [13:0] tmp_132_fu_574_p2;
reg   [13:0] tmp_132_reg_1165;
wire    ap_CS_fsm_state3;
wire   [5:0] tmp_fu_586_p3;
reg   [5:0] tmp_reg_1173;
wire   [0:0] exitcond5_fu_580_p2;
reg   [12:0] output_V_addr_reg_1178;
wire    ap_CS_fsm_state4;
wire   [5:0] tmp_s_fu_614_p3;
reg   [5:0] tmp_s_reg_1186;
wire   [0:0] exitcond6_fu_608_p2;
wire   [4:0] h_4_fu_622_p2;
wire   [8:0] tmp_136_fu_643_p2;
reg   [8:0] tmp_136_reg_1196;
wire    ap_CS_fsm_state5;
wire   [1:0] m_4_fu_655_p2;
reg   [1:0] m_4_reg_1204;
wire   [12:0] tmp_138_fu_709_p2;
reg   [12:0] tmp_138_reg_1209;
wire   [0:0] exitcond7_fu_649_p2;
wire   [4:0] w_4_fu_715_p2;
reg   [4:0] w_4_reg_1214;
wire    ap_CS_fsm_state6;
wire   [1:0] n_4_fu_741_p2;
reg   [1:0] n_4_reg_1227;
wire   [0:0] exitcond_fu_735_p2;
reg   [7:0] weight_V_load_reg_1292;
wire    ap_CS_fsm_state7;
wire   [7:0] tmp_38_fu_787_p14;
reg   [7:0] tmp_38_reg_1297;
wire   [15:0] p_Val2_3_fu_822_p2;
reg   [15:0] p_Val2_3_reg_1302;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_144_reg_1307;
wire   [15:0] p_Val2_36_fu_848_p2;
reg   [15:0] p_Val2_36_reg_1312;
wire    ap_CS_fsm_state9;
reg   [0:0] signbit_reg_1317;
wire   [7:0] p_Val2_38_fu_882_p2;
reg   [7:0] p_Val2_38_reg_1324;
wire   [0:0] newsignbit_fu_888_p3;
reg   [0:0] newsignbit_reg_1330;
wire   [0:0] carry_fu_902_p2;
reg   [0:0] carry_reg_1336;
reg   [1:0] tmp_49_reg_1343;
wire   [0:0] p_38_i_i_fu_960_p2;
reg   [0:0] p_38_i_i_reg_1349;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_50_fu_976_p2;
reg   [0:0] tmp_50_reg_1354;
wire   [0:0] brmerge40_demorgan_i_fu_987_p2;
reg   [0:0] brmerge40_demorgan_i_reg_1359;
wire   [0:0] underflow_fu_1004_p2;
reg   [0:0] underflow_reg_1364;
wire   [0:0] brmerge_i_i_i_fu_1009_p2;
reg   [0:0] brmerge_i_i_i_reg_1369;
wire   [7:0] sum_V_fu_1036_p3;
wire    ap_CS_fsm_state11;
reg   [0:0] isneg_reg_1379;
wire    ap_CS_fsm_state12;
wire   [7:0] result_V_fu_1066_p2;
reg   [7:0] result_V_reg_1386;
reg   [0:0] newsignbit_6_reg_1392;
reg   [4:0] co_reg_310;
reg   [10:0] phi_mul_reg_321;
reg   [4:0] h_reg_332;
reg   [4:0] w_reg_344;
wire    ap_CS_fsm_state13;
reg   [7:0] p_Val2_s_reg_356;
reg   [1:0] m_reg_368;
reg   [7:0] p_Val2_35_reg_379;
reg   [1:0] n_reg_391;
wire   [31:0] co_cast_fu_408_p1;
wire   [31:0] tmp_143_cast_fu_603_p1;
wire   [31:0] tmp_151_cast_fu_730_p1;
wire   [31:0] tmp_152_cast_fu_771_p1;
wire   [6:0] tmp_119_fu_417_p3;
wire   [7:0] p_shl2_cast_fu_425_p1;
wire   [7:0] co_cast_cast_fu_413_p1;
wire   [7:0] tmp_120_fu_429_p2;
wire   [8:0] tmp_121_fu_439_p3;
wire   [5:0] tmp_122_fu_451_p3;
wire   [9:0] p_shl1_cast_fu_459_p1;
wire   [9:0] p_shl_cast_fu_447_p1;
wire   [0:0] tmp_124_fu_481_p2;
wire   [4:0] tmp_125_fu_487_p2;
wire   [4:0] arrayNo_fu_493_p3;
wire   [1:0] tmp_126_fu_505_p4;
wire   [6:0] tmp_127_fu_515_p3;
wire   [2:0] tmp_128_fu_527_p3;
wire   [10:0] p_shl3_cast_fu_523_p1;
wire   [10:0] p_shl4_cast_fu_535_p1;
wire   [9:0] h_cast9_cast_fu_545_p1;
wire   [9:0] tmp_130_fu_549_p2;
wire   [10:0] tmp_131_fu_562_p3;
wire   [13:0] p_shl5_cast_fu_554_p3;
wire   [13:0] p_shl6_cast_fu_570_p1;
wire   [13:0] w_cast8_cast_fu_594_p1;
wire   [13:0] tmp_133_fu_598_p2;
wire   [8:0] m_cast7_cast_fu_628_p1;
wire   [8:0] tmp_134_fu_632_p2;
wire   [8:0] tmp_135_fu_637_p2;
wire   [1:0] tmp2_fu_661_p2;
wire  signed [5:0] tmp2_cast_fu_667_p1;
wire   [5:0] tmp_42_fu_671_p2;
wire   [10:0] tmp_56_cast_cast_fu_676_p1;
wire   [10:0] tmp_137_fu_680_p2;
wire   [7:0] tmp_139_fu_685_p1;
wire   [11:0] tmp_140_fu_697_p3;
wire   [12:0] p_shl9_cast_fu_705_p1;
wire   [12:0] p_shl8_cast_fu_689_p3;
wire   [8:0] n_cast6_cast_fu_721_p1;
wire   [8:0] tmp_141_fu_725_p2;
wire   [1:0] tmp3_fu_747_p2;
wire  signed [5:0] tmp3_cast_fu_753_p1;
wire   [5:0] tmp_43_fu_757_p2;
wire   [12:0] tmp_60_cast_cast_fu_762_p1;
wire   [12:0] tmp_142_fu_766_p2;
wire  signed [7:0] p_Val2_3_fu_822_p0;
wire  signed [7:0] p_Val2_3_fu_822_p1;
wire   [13:0] tmp_44_fu_836_p3;
wire  signed [15:0] tmp_62_cast_fu_844_p1;
wire   [7:0] p_Val2_37_fu_861_p4;
wire   [7:0] tmp_46_fu_871_p1;
wire   [0:0] tmp_145_fu_874_p3;
wire   [0:0] tmp_47_fu_896_p2;
wire   [0:0] Range1_all_ones_fu_925_p2;
wire   [0:0] Range1_all_zeros_fu_930_p2;
wire   [0:0] tmp_147_fu_918_p3;
wire   [0:0] tmp_48_fu_942_p2;
wire   [0:0] p_41_i_i_fu_948_p2;
wire   [0:0] deleted_zeros_fu_935_p3;
wire   [0:0] p_not_i_i_fu_965_p2;
wire   [0:0] brmerge_i_i4_fu_971_p2;
wire   [0:0] deleted_ones_fu_953_p3;
wire   [0:0] tmp4_demorgan_fu_992_p2;
wire   [0:0] tmp4_fu_998_p2;
wire   [0:0] overflow_fu_981_p2;
wire   [0:0] tmp5_fu_1015_p2;
wire   [0:0] underflow_not_fu_1019_p2;
wire   [7:0] p_Val2_32_mux_fu_1024_p3;
wire   [7:0] p_Val2_s_64_fu_1030_p3;
wire  signed [8:0] tmp_40_fu_1048_p1;
wire  signed [8:0] tmp_39_fu_1044_p1;
wire   [8:0] p_Val2_33_fu_1052_p2;
wire   [0:0] tmp_41_fu_1080_p2;
wire   [0:0] isneg_not_fu_1094_p2;
wire   [0:0] brmerge_i_i_fu_1090_p2;
wire   [0:0] underflow_6_fu_1085_p2;
wire   [0:0] brmerge9_fu_1099_p2;
wire   [7:0] result_V_mux_fu_1104_p3;
wire   [7:0] p_result_V_fu_1111_p3;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

ShuffleNetV2_mux_pcA #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_pcA_x_U194(
    .din1(conv1_output_p_V_0_q0),
    .din2(conv1_output_p_V_1_q0),
    .din3(conv1_output_p_V_2_q0),
    .din4(conv1_output_p_V_3_q0),
    .din5(conv1_output_p_V_4_q0),
    .din6(conv1_output_p_V_5_q0),
    .din7(conv1_output_p_V_6_q0),
    .din8(conv1_output_p_V_7_q0),
    .din9(conv1_output_p_V_8_q0),
    .din10(conv1_output_p_V_9_q0),
    .din11(conv1_output_p_V_10_q0),
    .din12(conv1_output_p_V_11_q0),
    .din13(arrayNo_cast_reg_1150),
    .dout(tmp_38_fu_787_p14)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond5_fu_580_p2 == 1'd1))) begin
        co_reg_310 <= co_4_reg_1145;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_310 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_469_p2 == 1'd0))) begin
        h_reg_332 <= 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond6_fu_608_p2 == 1'd1))) begin
        h_reg_332 <= h_4_fu_622_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_735_p2))) begin
        m_reg_368 <= m_4_reg_1204;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_608_p2))) begin
        m_reg_368 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        n_reg_391 <= n_4_reg_1227;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_649_p2))) begin
        n_reg_391 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_35_reg_379 <= sum_V_fu_1036_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_649_p2))) begin
        p_Val2_35_reg_379 <= p_Val2_s_reg_356;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_735_p2))) begin
        p_Val2_s_reg_356 <= p_Val2_35_reg_379;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_608_p2))) begin
        p_Val2_s_reg_356 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond5_fu_580_p2 == 1'd1))) begin
        phi_mul_reg_321 <= next_mul_reg_1127;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_321 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond5_fu_580_p2))) begin
        w_reg_344 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        w_reg_344 <= w_4_reg_1214;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_469_p2 == 1'd0))) begin
        arrayNo_cast_reg_1150[4 : 0] <= arrayNo_cast_fu_501_p1[4 : 0];
        bias_V_addr_reg_1160 <= co_cast_fu_408_p1;
        tmp_129_reg_1155[10 : 1] <= tmp_129_fu_539_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        brmerge40_demorgan_i_reg_1359 <= brmerge40_demorgan_i_fu_987_p2;
        brmerge_i_i_i_reg_1369 <= brmerge_i_i_i_fu_1009_p2;
        p_38_i_i_reg_1349 <= p_38_i_i_fu_960_p2;
        tmp_50_reg_1354 <= tmp_50_fu_976_p2;
        underflow_reg_1364 <= underflow_fu_1004_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        carry_reg_1336 <= carry_fu_902_p2;
        newsignbit_reg_1330 <= p_Val2_38_fu_882_p2[32'd7];
        p_Val2_36_reg_1312 <= p_Val2_36_fu_848_p2;
        p_Val2_38_reg_1324 <= p_Val2_38_fu_882_p2;
        signbit_reg_1317 <= p_Val2_36_fu_848_p2[32'd15];
        tmp_49_reg_1343 <= {{p_Val2_36_fu_848_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_4_reg_1145 <= co_4_fu_475_p2;
        next_mul_reg_1127 <= next_mul_fu_402_p2;
        tmp_123_reg_1137[9 : 1] <= tmp_123_fu_463_p2[9 : 1];
        tmp_128_cast_reg_1132 <= tmp_128_cast_fu_435_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        isneg_reg_1379 <= p_Val2_33_fu_1052_p2[32'd8];
        newsignbit_6_reg_1392 <= result_V_fu_1066_p2[32'd7];
        result_V_reg_1386 <= result_V_fu_1066_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_4_reg_1204 <= m_4_fu_655_p2;
        tmp_136_reg_1196 <= tmp_136_fu_643_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_4_reg_1227 <= n_4_fu_741_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_addr_reg_1178 <= tmp_143_cast_fu_603_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_3_reg_1302 <= p_Val2_3_fu_822_p2;
        tmp_144_reg_1307 <= p_Val2_3_fu_822_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_132_reg_1165[13 : 1] <= tmp_132_fu_574_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_649_p2))) begin
        tmp_138_reg_1209[12 : 1] <= tmp_138_fu_709_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_38_reg_1297 <= tmp_38_fu_787_p14;
        weight_V_load_reg_1292 <= weight_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond5_fu_580_p2))) begin
        tmp_reg_1173[5 : 1] <= tmp_fu_586_p3[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_608_p2))) begin
        tmp_s_reg_1186[5 : 1] <= tmp_s_fu_614_p3[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond7_fu_649_p2))) begin
        w_4_reg_1214 <= w_4_fu_715_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_469_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_469_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_p_V_0_ce0 = 1'b1;
    end else begin
        conv1_output_p_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_p_V_10_ce0 = 1'b1;
    end else begin
        conv1_output_p_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_p_V_11_ce0 = 1'b1;
    end else begin
        conv1_output_p_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_p_V_1_ce0 = 1'b1;
    end else begin
        conv1_output_p_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_p_V_2_ce0 = 1'b1;
    end else begin
        conv1_output_p_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_p_V_3_ce0 = 1'b1;
    end else begin
        conv1_output_p_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_p_V_4_ce0 = 1'b1;
    end else begin
        conv1_output_p_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_p_V_5_ce0 = 1'b1;
    end else begin
        conv1_output_p_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_p_V_6_ce0 = 1'b1;
    end else begin
        conv1_output_p_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_p_V_7_ce0 = 1'b1;
    end else begin
        conv1_output_p_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_p_V_8_ce0 = 1'b1;
    end else begin
        conv1_output_p_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_p_V_9_ce0 = 1'b1;
    end else begin
        conv1_output_p_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_469_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond5_fu_580_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond6_fu_608_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_649_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_735_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_925_p2 = ((tmp_49_reg_1343 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_930_p2 = ((tmp_49_reg_1343 == 2'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign arrayNo_cast_fu_501_p1 = arrayNo_fu_493_p3;

assign arrayNo_fu_493_p3 = ((tmp_124_fu_481_p2[0:0] === 1'b1) ? co_reg_310 : tmp_125_fu_487_p2);

assign bias_V_address0 = bias_V_addr_reg_1160;

assign brmerge40_demorgan_i_fu_987_p2 = (newsignbit_reg_1330 & deleted_ones_fu_953_p3);

assign brmerge9_fu_1099_p2 = (newsignbit_6_reg_1392 | isneg_not_fu_1094_p2);

assign brmerge_i_i4_fu_971_p2 = (newsignbit_reg_1330 | p_not_i_i_fu_965_p2);

assign brmerge_i_i_fu_1090_p2 = (isneg_reg_1379 ^ newsignbit_6_reg_1392);

assign brmerge_i_i_i_fu_1009_p2 = (underflow_fu_1004_p2 | overflow_fu_981_p2);

assign carry_fu_902_p2 = (tmp_145_fu_874_p3 & tmp_47_fu_896_p2);

assign co_4_fu_475_p2 = (co_reg_310 + 5'd1);

assign co_cast_cast_fu_413_p1 = co_reg_310;

assign co_cast_fu_408_p1 = co_reg_310;

assign conv1_output_p_V_0_address0 = tmp_152_cast_fu_771_p1;

assign conv1_output_p_V_10_address0 = tmp_152_cast_fu_771_p1;

assign conv1_output_p_V_11_address0 = tmp_152_cast_fu_771_p1;

assign conv1_output_p_V_1_address0 = tmp_152_cast_fu_771_p1;

assign conv1_output_p_V_2_address0 = tmp_152_cast_fu_771_p1;

assign conv1_output_p_V_3_address0 = tmp_152_cast_fu_771_p1;

assign conv1_output_p_V_4_address0 = tmp_152_cast_fu_771_p1;

assign conv1_output_p_V_5_address0 = tmp_152_cast_fu_771_p1;

assign conv1_output_p_V_6_address0 = tmp_152_cast_fu_771_p1;

assign conv1_output_p_V_7_address0 = tmp_152_cast_fu_771_p1;

assign conv1_output_p_V_8_address0 = tmp_152_cast_fu_771_p1;

assign conv1_output_p_V_9_address0 = tmp_152_cast_fu_771_p1;

assign deleted_ones_fu_953_p3 = ((carry_reg_1336[0:0] === 1'b1) ? p_41_i_i_fu_948_p2 : Range1_all_ones_fu_925_p2);

assign deleted_zeros_fu_935_p3 = ((carry_reg_1336[0:0] === 1'b1) ? Range1_all_ones_fu_925_p2 : Range1_all_zeros_fu_930_p2);

assign exitcond4_fu_469_p2 = ((co_reg_310 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond5_fu_580_p2 = ((h_reg_332 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond6_fu_608_p2 = ((w_reg_344 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond7_fu_649_p2 = ((m_reg_368 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_735_p2 = ((n_reg_391 == 2'd3) ? 1'b1 : 1'b0);

assign h_4_fu_622_p2 = (h_reg_332 + 5'd1);

assign h_cast9_cast_fu_545_p1 = h_reg_332;

assign isneg_not_fu_1094_p2 = (isneg_reg_1379 ^ 1'd1);

assign m_4_fu_655_p2 = (2'd1 + m_reg_368);

assign m_cast7_cast_fu_628_p1 = m_reg_368;

assign n_4_fu_741_p2 = (n_reg_391 + 2'd1);

assign n_cast6_cast_fu_721_p1 = n_reg_391;

assign newsignbit_fu_888_p3 = p_Val2_38_fu_882_p2[32'd7];

assign next_mul_fu_402_p2 = (phi_mul_reg_321 + 11'd43);

assign output_V_address0 = output_V_addr_reg_1178;

assign output_V_d0 = ((brmerge9_fu_1099_p2[0:0] === 1'b1) ? result_V_mux_fu_1104_p3 : p_result_V_fu_1111_p3);

assign overflow_fu_981_p2 = (brmerge_i_i4_fu_971_p2 & tmp_50_fu_976_p2);

assign p_38_i_i_fu_960_p2 = (carry_reg_1336 & Range1_all_ones_fu_925_p2);

assign p_41_i_i_fu_948_p2 = (signbit_reg_1317 & tmp_48_fu_942_p2);

assign p_Val2_32_mux_fu_1024_p3 = ((brmerge_i_i_i_reg_1369[0:0] === 1'b1) ? 8'd127 : p_Val2_38_reg_1324);

assign p_Val2_33_fu_1052_p2 = ($signed(tmp_40_fu_1048_p1) + $signed(tmp_39_fu_1044_p1));

assign p_Val2_36_fu_848_p2 = ($signed(tmp_62_cast_fu_844_p1) + $signed(p_Val2_3_reg_1302));

assign p_Val2_37_fu_861_p4 = {{p_Val2_36_fu_848_p2[13:6]}};

assign p_Val2_38_fu_882_p2 = (p_Val2_37_fu_861_p4 + tmp_46_fu_871_p1);

assign p_Val2_3_fu_822_p0 = weight_V_load_reg_1292;

assign p_Val2_3_fu_822_p1 = tmp_38_reg_1297;

assign p_Val2_3_fu_822_p2 = ($signed(p_Val2_3_fu_822_p0) * $signed(p_Val2_3_fu_822_p1));

assign p_Val2_s_64_fu_1030_p3 = ((underflow_reg_1364[0:0] === 1'b1) ? 8'd128 : p_Val2_38_reg_1324);

assign p_not_i_i_fu_965_p2 = (deleted_zeros_fu_935_p3 ^ 1'd1);

assign p_result_V_fu_1111_p3 = ((underflow_6_fu_1085_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_1386);

assign p_shl1_cast_fu_459_p1 = tmp_122_fu_451_p3;

assign p_shl2_cast_fu_425_p1 = tmp_119_fu_417_p3;

assign p_shl3_cast_fu_523_p1 = tmp_127_fu_515_p3;

assign p_shl4_cast_fu_535_p1 = tmp_128_fu_527_p3;

assign p_shl5_cast_fu_554_p3 = {{tmp_130_fu_549_p2}, {4'd0}};

assign p_shl6_cast_fu_570_p1 = tmp_131_fu_562_p3;

assign p_shl8_cast_fu_689_p3 = {{tmp_139_fu_685_p1}, {5'd0}};

assign p_shl9_cast_fu_705_p1 = tmp_140_fu_697_p3;

assign p_shl_cast_fu_447_p1 = tmp_121_fu_439_p3;

assign result_V_fu_1066_p2 = (bias_V_q0 + p_Val2_s_reg_356);

assign result_V_mux_fu_1104_p3 = ((brmerge_i_i_fu_1090_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_1386);

assign sum_V_fu_1036_p3 = ((underflow_not_fu_1019_p2[0:0] === 1'b1) ? p_Val2_32_mux_fu_1024_p3 : p_Val2_s_64_fu_1030_p3);

assign tmp2_cast_fu_667_p1 = $signed(tmp2_fu_661_p2);

assign tmp2_fu_661_p2 = (m_reg_368 ^ 2'd2);

assign tmp3_cast_fu_753_p1 = $signed(tmp3_fu_747_p2);

assign tmp3_fu_747_p2 = (n_reg_391 ^ 2'd2);

assign tmp4_demorgan_fu_992_p2 = (p_38_i_i_fu_960_p2 | brmerge40_demorgan_i_fu_987_p2);

assign tmp4_fu_998_p2 = (tmp4_demorgan_fu_992_p2 ^ 1'd1);

assign tmp5_fu_1015_p2 = (brmerge40_demorgan_i_reg_1359 | tmp_50_reg_1354);

assign tmp_119_fu_417_p3 = {{co_reg_310}, {2'd0}};

assign tmp_120_fu_429_p2 = (p_shl2_cast_fu_425_p1 - co_cast_cast_fu_413_p1);

assign tmp_121_fu_439_p3 = {{co_reg_310}, {4'd0}};

assign tmp_122_fu_451_p3 = {{co_reg_310}, {1'd0}};

assign tmp_123_fu_463_p2 = (p_shl1_cast_fu_459_p1 + p_shl_cast_fu_447_p1);

assign tmp_124_fu_481_p2 = ((co_reg_310 < 5'd12) ? 1'b1 : 1'b0);

assign tmp_125_fu_487_p2 = ($signed(co_reg_310) + $signed(5'd20));

assign tmp_126_fu_505_p4 = {{phi_mul_reg_321[10:9]}};

assign tmp_127_fu_515_p3 = {{tmp_126_fu_505_p4}, {5'd0}};

assign tmp_128_cast_fu_435_p1 = $signed(tmp_120_fu_429_p2);

assign tmp_128_fu_527_p3 = {{tmp_126_fu_505_p4}, {1'd0}};

assign tmp_129_fu_539_p2 = (p_shl3_cast_fu_523_p1 + p_shl4_cast_fu_535_p1);

assign tmp_130_fu_549_p2 = (h_cast9_cast_fu_545_p1 + tmp_123_reg_1137);

assign tmp_131_fu_562_p3 = {{tmp_130_fu_549_p2}, {1'd0}};

assign tmp_132_fu_574_p2 = (p_shl5_cast_fu_554_p3 + p_shl6_cast_fu_570_p1);

assign tmp_133_fu_598_p2 = (tmp_132_reg_1165 + w_cast8_cast_fu_594_p1);

assign tmp_134_fu_632_p2 = ($signed(m_cast7_cast_fu_628_p1) + $signed(tmp_128_cast_reg_1132));

assign tmp_135_fu_637_p2 = tmp_134_fu_632_p2 << 9'd2;

assign tmp_136_fu_643_p2 = (tmp_135_fu_637_p2 - tmp_134_fu_632_p2);

assign tmp_137_fu_680_p2 = (tmp_129_reg_1155 + tmp_56_cast_cast_fu_676_p1);

assign tmp_138_fu_709_p2 = (p_shl9_cast_fu_705_p1 + p_shl8_cast_fu_689_p3);

assign tmp_139_fu_685_p1 = tmp_137_fu_680_p2[7:0];

assign tmp_140_fu_697_p3 = {{tmp_137_fu_680_p2}, {1'd0}};

assign tmp_141_fu_725_p2 = (tmp_136_reg_1196 + n_cast6_cast_fu_721_p1);

assign tmp_142_fu_766_p2 = (tmp_60_cast_cast_fu_762_p1 + tmp_138_reg_1209);

assign tmp_143_cast_fu_603_p1 = tmp_133_fu_598_p2;

assign tmp_145_fu_874_p3 = p_Val2_36_fu_848_p2[32'd13];

assign tmp_147_fu_918_p3 = p_Val2_36_reg_1312[32'd14];

assign tmp_151_cast_fu_730_p1 = tmp_141_fu_725_p2;

assign tmp_152_cast_fu_771_p1 = tmp_142_fu_766_p2;

assign tmp_39_fu_1044_p1 = $signed(p_Val2_s_reg_356);

assign tmp_40_fu_1048_p1 = $signed(bias_V_q0);

assign tmp_41_fu_1080_p2 = (newsignbit_6_reg_1392 ^ 1'd1);

assign tmp_42_fu_671_p2 = ($signed(tmp_reg_1173) + $signed(tmp2_cast_fu_667_p1));

assign tmp_43_fu_757_p2 = ($signed(tmp3_cast_fu_753_p1) + $signed(tmp_s_reg_1186));

assign tmp_44_fu_836_p3 = {{p_Val2_35_reg_379}, {6'd0}};

assign tmp_46_fu_871_p1 = tmp_144_reg_1307;

assign tmp_47_fu_896_p2 = (newsignbit_fu_888_p3 ^ 1'd1);

assign tmp_48_fu_942_p2 = (tmp_147_fu_918_p3 ^ 1'd1);

assign tmp_50_fu_976_p2 = (signbit_reg_1317 ^ 1'd1);

assign tmp_56_cast_cast_fu_676_p1 = tmp_42_fu_671_p2;

assign tmp_60_cast_cast_fu_762_p1 = tmp_43_fu_757_p2;

assign tmp_62_cast_fu_844_p1 = $signed(tmp_44_fu_836_p3);

assign tmp_fu_586_p3 = {{h_reg_332}, {1'd0}};

assign tmp_s_fu_614_p3 = {{w_reg_344}, {1'd0}};

assign underflow_6_fu_1085_p2 = (isneg_reg_1379 & tmp_41_fu_1080_p2);

assign underflow_fu_1004_p2 = (signbit_reg_1317 & tmp4_fu_998_p2);

assign underflow_not_fu_1019_p2 = (tmp5_fu_1015_p2 | p_38_i_i_reg_1349);

assign w_4_fu_715_p2 = (w_reg_344 + 5'd1);

assign w_cast8_cast_fu_594_p1 = w_reg_344;

assign weight_V_address0 = tmp_151_cast_fu_730_p1;

always @ (posedge ap_clk) begin
    tmp_123_reg_1137[0] <= 1'b0;
    arrayNo_cast_reg_1150[31:5] <= 27'b000000000000000000000000000;
    tmp_129_reg_1155[0] <= 1'b0;
    tmp_132_reg_1165[0] <= 1'b0;
    tmp_reg_1173[0] <= 1'b0;
    tmp_s_reg_1186[0] <= 1'b0;
    tmp_138_reg_1209[0] <= 1'b0;
end

endmodule //subconv_3x3_32_strid
