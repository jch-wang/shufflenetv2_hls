-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_16_strid is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_16_strid is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_170_fu_260_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_170_reg_860 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_183_cast_fu_284_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_183_cast_reg_865 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_174_fu_300_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_174_reg_870 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_5_fu_312_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal co_5_reg_878 : STD_LOGIC_VECTOR (5 downto 0);
    signal bias_V_addr_reg_883 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond8_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_178_fu_351_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_178_reg_888 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_363_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_896 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond9_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_addr_reg_901 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_s_fu_391_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_reg_909 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_5_fu_399_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_182_fu_420_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_182_reg_919 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m_5_fu_432_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_5_reg_927 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_184_fu_482_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_184_reg_932 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond4_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_5_fu_488_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_5_reg_937 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal n_5_fu_514_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_5_reg_950 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_load_reg_960 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal input_V_load_reg_965 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_6_fu_555_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_6_reg_970 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_189_reg_975 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_50_fu_581_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_50_reg_980 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal signbit_reg_985 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_52_fu_615_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_52_reg_992 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_621_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_998 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_1004 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_reg_1011 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_1017 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_73_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_73_reg_1022 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_1027 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_1032 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_1037 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_769_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal isneg_reg_1047 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal result_V_fu_799_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_1054 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_8_reg_1060 : STD_LOGIC_VECTOR (0 downto 0);
    signal co_reg_142 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_reg_153 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_165 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_Val2_s_reg_177 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_189 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_49_reg_200 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_212 : STD_LOGIC_VECTOR (1 downto 0);
    signal co_cast_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_191_cast_fu_380_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_199_cast_fu_503_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_200_cast_fu_544_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_168_fu_232_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_169_fu_244_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl4_cast_fu_256_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_240_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_171_fu_266_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_fu_274_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal co_cast_cast_fu_228_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_172_fu_278_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_173_fu_288_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_cast1_fu_252_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_296_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_cast9_cast_fu_318_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_175_fu_322_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_176_fu_327_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_177_fu_339_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_335_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl6_cast_fu_347_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_cast8_cast_fu_371_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_179_fu_375_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal m_cast7_cast_fu_405_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_180_fu_409_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_181_fu_414_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp2_fu_438_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_444_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_66_fu_448_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_102_cast_cast_fu_453_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_183_fu_457_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_185_fu_470_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl8_cast_fu_462_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl9_cast_fu_478_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal n_cast6_cast_fu_494_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_186_fu_498_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp3_fu_520_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_526_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_67_fu_530_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_106_cast_cast_fu_535_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_187_fu_539_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_6_fu_555_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_6_fu_555_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_68_fu_569_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_108_cast_fu_577_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_51_fu_594_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_69_fu_604_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_190_fu_607_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_192_fu_651_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_72_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_668_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i5_fu_704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_686_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_40_mux_fu_757_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_74_fu_763_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_64_fu_781_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_63_fu_777_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_47_fu_785_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_65_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_8_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_837_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_844_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_357_p2 = ap_const_lv1_1))) then 
                co_reg_142 <= co_5_reg_878;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_142 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    h_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_306_p2 = ap_const_lv1_0))) then 
                h_reg_153 <= ap_const_lv4_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_385_p2 = ap_const_lv1_1))) then 
                h_reg_153 <= h_5_fu_399_p2;
            end if; 
        end if;
    end process;

    m_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_508_p2))) then 
                m_reg_189 <= m_5_reg_927;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_385_p2))) then 
                m_reg_189 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                n_reg_212 <= n_5_reg_950;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_426_p2))) then 
                n_reg_212 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_49_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_Val2_49_reg_200 <= sum_V_fu_769_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_426_p2))) then 
                p_Val2_49_reg_200 <= p_Val2_s_reg_177;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_508_p2))) then 
                p_Val2_s_reg_177 <= p_Val2_49_reg_200;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_385_p2))) then 
                p_Val2_s_reg_177 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    w_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond9_fu_357_p2))) then 
                w_reg_165 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                w_reg_165 <= w_5_reg_937;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_306_p2 = ap_const_lv1_0))) then
                bias_V_addr_reg_883 <= co_cast_fu_223_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                brmerge40_demorgan_i_reg_1027 <= brmerge40_demorgan_i_fu_720_p2;
                brmerge_i_i_i_reg_1037 <= brmerge_i_i_i_fu_742_p2;
                p_38_i_i_reg_1017 <= p_38_i_i_fu_693_p2;
                tmp_73_reg_1022 <= tmp_73_fu_709_p2;
                underflow_reg_1032 <= underflow_fu_737_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                carry_reg_1004 <= carry_fu_635_p2;
                newsignbit_reg_998 <= p_Val2_52_fu_615_p2(7 downto 7);
                p_Val2_50_reg_980 <= p_Val2_50_fu_581_p2;
                p_Val2_52_reg_992 <= p_Val2_52_fu_615_p2;
                signbit_reg_985 <= p_Val2_50_fu_581_p2(15 downto 15);
                tmp_71_reg_1011 <= p_Val2_50_fu_581_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_5_reg_878 <= co_5_fu_312_p2;
                    tmp_170_reg_860(10 downto 1) <= tmp_170_fu_260_p2(10 downto 1);
                    tmp_174_reg_870(9 downto 1) <= tmp_174_fu_300_p2(9 downto 1);
                tmp_183_cast_reg_865 <= tmp_183_cast_fu_284_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                input_V_load_reg_965 <= input_V_q0;
                weight_V_load_reg_960 <= weight_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                isneg_reg_1047 <= p_Val2_47_fu_785_p2(8 downto 8);
                newsignbit_8_reg_1060 <= result_V_fu_799_p2(7 downto 7);
                result_V_reg_1054 <= result_V_fu_799_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_5_reg_927 <= m_5_fu_432_p2;
                tmp_182_reg_919 <= tmp_182_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_5_reg_950 <= n_5_fu_514_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_V_addr_reg_901 <= tmp_191_cast_fu_380_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_6_reg_970 <= p_Val2_6_fu_555_p2;
                tmp_189_reg_975 <= p_Val2_6_fu_555_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_178_reg_888(13 downto 1) <= tmp_178_fu_351_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_426_p2))) then
                    tmp_184_reg_932(14 downto 1) <= tmp_184_fu_482_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond9_fu_357_p2))) then
                    tmp_reg_896(4 downto 1) <= tmp_fu_363_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_385_p2))) then
                    tmp_s_reg_909(4 downto 1) <= tmp_s_fu_391_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond4_fu_426_p2))) then
                w_5_reg_937 <= w_5_fu_488_p2;
            end if;
        end if;
    end process;
    tmp_170_reg_860(0) <= '0';
    tmp_174_reg_870(0) <= '0';
    tmp_178_reg_888(0) <= '0';
    tmp_reg_896(0) <= '0';
    tmp_s_reg_909(0) <= '0';
    tmp_184_reg_932(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond8_fu_306_p2, ap_CS_fsm_state3, exitcond9_fu_357_p2, ap_CS_fsm_state4, exitcond3_fu_385_p2, ap_CS_fsm_state5, exitcond4_fu_426_p2, ap_CS_fsm_state6, exitcond_fu_508_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_306_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond9_fu_357_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_385_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_426_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_508_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_658_p2 <= "1" when (tmp_71_reg_1011 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_663_p2 <= "1" when (tmp_71_reg_1011 = ap_const_lv2_0) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond8_fu_306_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_306_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond8_fu_306_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_306_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_883;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_720_p2 <= (newsignbit_reg_998 and deleted_ones_fu_686_p3);
    brmerge9_fu_832_p2 <= (newsignbit_8_reg_1060 or isneg_not_fu_827_p2);
    brmerge_i_i5_fu_704_p2 <= (newsignbit_reg_998 or p_not_i_i_fu_698_p2);
    brmerge_i_i_fu_823_p2 <= (isneg_reg_1047 xor newsignbit_8_reg_1060);
    brmerge_i_i_i_fu_742_p2 <= (underflow_fu_737_p2 or overflow_fu_714_p2);
    carry_fu_635_p2 <= (tmp_190_fu_607_p3 and tmp_70_fu_629_p2);
    co_5_fu_312_p2 <= std_logic_vector(unsigned(co_reg_142) + unsigned(ap_const_lv6_1));
    co_cast_cast_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_142),9));
    co_cast_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_142),32));
    deleted_ones_fu_686_p3 <= 
        p_41_i_i_fu_681_p2 when (carry_reg_1004(0) = '1') else 
        Range1_all_ones_fu_658_p2;
    deleted_zeros_fu_668_p3 <= 
        Range1_all_ones_fu_658_p2 when (carry_reg_1004(0) = '1') else 
        Range1_all_zeros_fu_663_p2;
    exitcond3_fu_385_p2 <= "1" when (w_reg_165 = ap_const_lv4_9) else "0";
    exitcond4_fu_426_p2 <= "1" when (m_reg_189 = ap_const_lv2_3) else "0";
    exitcond8_fu_306_p2 <= "1" when (co_reg_142 = ap_const_lv6_30) else "0";
    exitcond9_fu_357_p2 <= "1" when (h_reg_153 = ap_const_lv4_9) else "0";
    exitcond_fu_508_p2 <= "1" when (n_reg_212 = ap_const_lv2_3) else "0";
    h_5_fu_399_p2 <= std_logic_vector(unsigned(h_reg_153) + unsigned(ap_const_lv4_1));
    h_cast9_cast_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_153),10));
    input_V_address0 <= tmp_200_cast_fu_544_p1(14 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isneg_not_fu_827_p2 <= (isneg_reg_1047 xor ap_const_lv1_1);
    m_5_fu_432_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(m_reg_189));
    m_cast7_cast_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_189),10));
    n_5_fu_514_p2 <= std_logic_vector(unsigned(n_reg_212) + unsigned(ap_const_lv2_1));
    n_cast6_cast_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_212),10));
    newsignbit_fu_621_p3 <= p_Val2_52_fu_615_p2(7 downto 7);
    output_V_address0 <= output_V_addr_reg_901;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= 
        result_V_mux_fu_837_p3 when (brmerge9_fu_832_p2(0) = '1') else 
        p_result_V_fu_844_p3;

    output_V_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_714_p2 <= (brmerge_i_i5_fu_704_p2 and tmp_73_fu_709_p2);
    p_38_i_i_fu_693_p2 <= (carry_reg_1004 and Range1_all_ones_fu_658_p2);
    p_41_i_i_fu_681_p2 <= (signbit_reg_985 and tmp_72_fu_675_p2);
    p_Val2_40_mux_fu_757_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_1037(0) = '1') else 
        p_Val2_52_reg_992;
    p_Val2_47_fu_785_p2 <= std_logic_vector(signed(tmp_64_fu_781_p1) + signed(tmp_63_fu_777_p1));
    p_Val2_50_fu_581_p2 <= std_logic_vector(signed(tmp_108_cast_fu_577_p1) + signed(p_Val2_6_reg_970));
    p_Val2_51_fu_594_p4 <= p_Val2_50_fu_581_p2(13 downto 6);
    p_Val2_52_fu_615_p2 <= std_logic_vector(unsigned(p_Val2_51_fu_594_p4) + unsigned(tmp_69_fu_604_p1));
    p_Val2_6_fu_555_p0 <= weight_V_load_reg_960;
    p_Val2_6_fu_555_p1 <= input_V_load_reg_965;
    p_Val2_6_fu_555_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_6_fu_555_p0) * signed(p_Val2_6_fu_555_p1))), 16));
    p_Val2_s_74_fu_763_p3 <= 
        ap_const_lv8_80 when (underflow_reg_1032(0) = '1') else 
        p_Val2_52_reg_992;
    p_not_i_i_fu_698_p2 <= (deleted_zeros_fu_668_p3 xor ap_const_lv1_1);
    p_result_V_fu_844_p3 <= 
        ap_const_lv8_80 when (underflow_8_fu_818_p2(0) = '1') else 
        result_V_reg_1054;
    p_shl2_cast_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_171_fu_266_p3),9));
    p_shl3_cast_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_168_fu_232_p3),11));
    p_shl4_cast1_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_169_fu_244_p3),10));
    p_shl4_cast_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_169_fu_244_p3),11));
    p_shl5_cast_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_176_fu_327_p3),14));
    p_shl6_cast_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_177_fu_339_p3),14));
    p_shl8_cast_fu_462_p3 <= (tmp_183_fu_457_p2 & ap_const_lv4_0);
    p_shl9_cast_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_185_fu_470_p3),15));
    p_shl_cast_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_173_fu_288_p3),10));
    result_V_fu_799_p2 <= std_logic_vector(unsigned(bias_V_q0) + unsigned(p_Val2_s_reg_177));
    result_V_mux_fu_837_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_823_p2(0) = '1') else 
        result_V_reg_1054;
    sum_V_fu_769_p3 <= 
        p_Val2_40_mux_fu_757_p3 when (underflow_not_fu_752_p2(0) = '1') else 
        p_Val2_s_74_fu_763_p3;
        tmp2_cast_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_438_p2),5));

    tmp2_fu_438_p2 <= (m_reg_189 xor ap_const_lv2_2);
        tmp3_cast_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_520_p2),5));

    tmp3_fu_520_p2 <= (n_reg_212 xor ap_const_lv2_2);
    tmp4_demorgan_fu_725_p2 <= (p_38_i_i_fu_693_p2 or brmerge40_demorgan_i_fu_720_p2);
    tmp4_fu_731_p2 <= (tmp4_demorgan_fu_725_p2 xor ap_const_lv1_1);
    tmp5_fu_748_p2 <= (brmerge40_demorgan_i_reg_1027 or tmp_73_reg_1022);
    tmp_102_cast_cast_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_fu_448_p2),11));
    tmp_106_cast_cast_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_fu_530_p2),15));
        tmp_108_cast_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_68_fu_569_p3),16));

    tmp_168_fu_232_p3 <= (co_reg_142 & ap_const_lv4_0);
    tmp_169_fu_244_p3 <= (co_reg_142 & ap_const_lv1_0);
    tmp_170_fu_260_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_256_p1) + unsigned(p_shl3_cast_fu_240_p1));
    tmp_171_fu_266_p3 <= (co_reg_142 & ap_const_lv2_0);
    tmp_172_fu_278_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_274_p1) - unsigned(co_cast_cast_fu_228_p1));
    tmp_173_fu_288_p3 <= (co_reg_142 & ap_const_lv3_0);
    tmp_174_fu_300_p2 <= std_logic_vector(unsigned(p_shl4_cast1_fu_252_p1) + unsigned(p_shl_cast_fu_296_p1));
    tmp_175_fu_322_p2 <= std_logic_vector(unsigned(h_cast9_cast_fu_318_p1) + unsigned(tmp_174_reg_870));
    tmp_176_fu_327_p3 <= (tmp_175_fu_322_p2 & ap_const_lv3_0);
    tmp_177_fu_339_p3 <= (tmp_175_fu_322_p2 & ap_const_lv1_0);
    tmp_178_fu_351_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_335_p1) + unsigned(p_shl6_cast_fu_347_p1));
    tmp_179_fu_375_p2 <= std_logic_vector(unsigned(tmp_178_reg_888) + unsigned(w_cast8_cast_fu_371_p1));
    tmp_180_fu_409_p2 <= std_logic_vector(unsigned(m_cast7_cast_fu_405_p1) + unsigned(tmp_183_cast_reg_865));
    tmp_181_fu_414_p2 <= std_logic_vector(shift_left(unsigned(tmp_180_fu_409_p2),to_integer(unsigned('0' & ap_const_lv10_2(10-1 downto 0)))));
    tmp_182_fu_420_p2 <= std_logic_vector(unsigned(tmp_181_fu_414_p2) - unsigned(tmp_180_fu_409_p2));
        tmp_183_cast_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_172_fu_278_p2),10));

    tmp_183_fu_457_p2 <= std_logic_vector(unsigned(tmp_102_cast_cast_fu_453_p1) + unsigned(tmp_170_reg_860));
    tmp_184_fu_482_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_462_p3) + unsigned(p_shl9_cast_fu_478_p1));
    tmp_185_fu_470_p3 <= (tmp_183_fu_457_p2 & ap_const_lv1_0);
    tmp_186_fu_498_p2 <= std_logic_vector(unsigned(tmp_182_reg_919) + unsigned(n_cast6_cast_fu_494_p1));
    tmp_187_fu_539_p2 <= std_logic_vector(unsigned(tmp_106_cast_cast_fu_535_p1) + unsigned(tmp_184_reg_932));
    tmp_190_fu_607_p3 <= p_Val2_50_fu_581_p2(13 downto 13);
    tmp_191_cast_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_179_fu_375_p2),32));
    tmp_192_fu_651_p3 <= p_Val2_50_reg_980(14 downto 14);
    tmp_199_cast_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_186_fu_498_p2),32));
    tmp_200_cast_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_187_fu_539_p2),32));
        tmp_63_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_177),9));

        tmp_64_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    tmp_65_fu_813_p2 <= (newsignbit_8_reg_1060 xor ap_const_lv1_1);
    tmp_66_fu_448_p2 <= std_logic_vector(signed(tmp2_cast_fu_444_p1) + signed(tmp_reg_896));
    tmp_67_fu_530_p2 <= std_logic_vector(signed(tmp3_cast_fu_526_p1) + signed(tmp_s_reg_909));
    tmp_68_fu_569_p3 <= (p_Val2_49_reg_200 & ap_const_lv6_0);
    tmp_69_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_189_reg_975),8));
    tmp_70_fu_629_p2 <= (newsignbit_fu_621_p3 xor ap_const_lv1_1);
    tmp_72_fu_675_p2 <= (tmp_192_fu_651_p3 xor ap_const_lv1_1);
    tmp_73_fu_709_p2 <= (signbit_reg_985 xor ap_const_lv1_1);
    tmp_fu_363_p3 <= (h_reg_153 & ap_const_lv1_0);
    tmp_s_fu_391_p3 <= (w_reg_165 & ap_const_lv1_0);
    underflow_8_fu_818_p2 <= (isneg_reg_1047 and tmp_65_fu_813_p2);
    underflow_fu_737_p2 <= (signbit_reg_985 and tmp4_fu_731_p2);
    underflow_not_fu_752_p2 <= (tmp5_fu_748_p2 or p_38_i_i_reg_1017);
    w_5_fu_488_p2 <= std_logic_vector(unsigned(w_reg_165) + unsigned(ap_const_lv4_1));
    w_cast8_cast_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_165),14));
    weight_V_address0 <= tmp_199_cast_fu_503_p1(9 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
