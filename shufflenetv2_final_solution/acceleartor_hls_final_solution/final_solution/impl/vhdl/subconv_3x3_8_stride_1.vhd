-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_8_stride_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_11_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_2_Downs_11_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_2_Downs_10_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_2_Downs_7_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_2_Downs_6_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_2_Downs_5_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_2_Downs_4_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_2_Downs_3_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_2_Downs_2_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_2_Downs_1_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_2_Downs_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_2_Downs_9_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_2_Downs_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ShuffleConvs_2_Downs_8_ce0 : OUT STD_LOGIC;
    ShuffleConvs_2_Downs_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_8_stride_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv15_AB : STD_LOGIC_VECTOR (14 downto 0) := "000000010101011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv7_C : STD_LOGIC_VECTOR (6 downto 0) := "0001100";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul_fu_414_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal next_mul_reg_1131 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_14_cast_fu_447_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_cast_reg_1136 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_17_cast_fu_481_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_17_cast_reg_1141 : STD_LOGIC_VECTOR (11 downto 0);
    signal co_1_fu_491_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_1_reg_1149 : STD_LOGIC_VECTOR (6 downto 0);
    signal arrayNo_cast_fu_497_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayNo_cast_reg_1154 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_535_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_21_reg_1159 : STD_LOGIC_VECTOR (10 downto 0);
    signal bias_V_addr_reg_1164 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_24_fu_570_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_24_reg_1169 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_582_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_1177 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_urem_fu_602_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_V_addr_reg_1187 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_2_fu_630_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_reg_1195 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond3_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_1_fu_638_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_29_fu_659_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_29_reg_1205 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m_1_fu_671_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_1_reg_1213 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_31_fu_713_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_31_reg_1218 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond4_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_1_fu_719_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_1_reg_1223 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal n_1_fu_745_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_1_reg_1236 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_load_reg_1301 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_1_fu_791_p14 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1306 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_5_fu_826_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_5_reg_1311 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_39_reg_1316 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_fu_852_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_6_reg_1321 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal signbit_reg_1326 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_fu_886_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_8_reg_1333 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_892_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_1339 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_906_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_1345 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1352 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_1358 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_13_fu_980_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1363 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_991_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_1368 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_1008_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_1373 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_1013_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_1378 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_1040_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal isneg_reg_1388 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal result_V_fu_1070_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_1395 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_1_reg_1401 : STD_LOGIC_VECTOR (0 downto 0);
    signal co_reg_310 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul_reg_321 : STD_LOGIC_VECTOR (14 downto 0);
    signal phi_urem_reg_332 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_reg_344 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_356 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_Val2_s_reg_368 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_380 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_4_reg_391 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_403 : STD_LOGIC_VECTOR (1 downto 0);
    signal co_cast_fu_420_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_cast_fu_619_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_cast_fu_734_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_cast_fu_775_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_429_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_437_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_cast_cast_fu_425_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_fu_441_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_fu_451_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_16_fu_463_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_459_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_471_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_17_fu_475_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_18_fu_501_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_19_fu_511_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_fu_523_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl3_cast_fu_519_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_531_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal h_cast9_cast_fu_541_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_fu_545_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_23_fu_550_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_cast_fu_554_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl6_cast_fu_562_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_urem_fu_590_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_25_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_cast8_cast_fu_610_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_26_fu_614_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal m_cast7_cast_fu_644_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_27_fu_648_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_28_fu_653_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_fu_677_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_683_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_687_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast_cast_fu_692_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_30_fu_696_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_33_fu_701_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_37_fu_707_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal n_cast6_cast_fu_725_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_32_fu_729_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp3_fu_751_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_757_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_761_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_cast_cast_fu_766_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_34_fu_770_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_5_fu_826_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_5_fu_826_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_840_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_11_cast_fu_848_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_7_fu_865_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_875_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_40_fu_878_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_922_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_952_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_939_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i1_fu_975_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_957_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_996_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_985_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_1019_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_mux_fu_1028_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_8_39_fu_1034_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_1052_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_fu_1048_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_2_fu_1056_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_1084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_1098_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_1094_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_1089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_1103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_1108_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_1115_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component ShuffleNetV2_mux_pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mux_pcA_x_U568 : component ShuffleNetV2_mux_pcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din1 => ShuffleConvs_2_Downs_11_q0,
        din2 => ShuffleConvs_2_Downs_10_q0,
        din3 => ShuffleConvs_2_Downs_7_q0,
        din4 => ShuffleConvs_2_Downs_6_q0,
        din5 => ShuffleConvs_2_Downs_5_q0,
        din6 => ShuffleConvs_2_Downs_4_q0,
        din7 => ShuffleConvs_2_Downs_3_q0,
        din8 => ShuffleConvs_2_Downs_2_q0,
        din9 => ShuffleConvs_2_Downs_1_q0,
        din10 => ShuffleConvs_2_Downs_q0,
        din11 => ShuffleConvs_2_Downs_9_q0,
        din12 => ShuffleConvs_2_Downs_8_q0,
        din13 => arrayNo_cast_reg_1154,
        dout => tmp_1_fu_791_p14);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_576_p2 = ap_const_lv1_1))) then 
                co_reg_310 <= co_1_reg_1149;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_310 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    h_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_485_p2 = ap_const_lv1_0))) then 
                h_reg_344 <= ap_const_lv3_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond3_fu_624_p2))) then 
                h_reg_344 <= h_1_fu_638_p2;
            end if; 
        end if;
    end process;

    m_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_739_p2))) then 
                m_reg_380 <= m_1_reg_1213;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_624_p2))) then 
                m_reg_380 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                n_reg_403 <= n_1_reg_1236;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_665_p2))) then 
                n_reg_403 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_4_reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_Val2_4_reg_391 <= sum_V_fu_1040_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_665_p2))) then 
                p_Val2_4_reg_391 <= p_Val2_s_reg_368;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_739_p2))) then 
                p_Val2_s_reg_368 <= p_Val2_4_reg_391;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_624_p2))) then 
                p_Val2_s_reg_368 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_576_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_321 <= next_mul_reg_1131;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_321 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    phi_urem_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_576_p2 = ap_const_lv1_1))) then 
                phi_urem_reg_332 <= idx_urem_fu_602_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_urem_reg_332 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    w_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_576_p2))) then 
                w_reg_356 <= ap_const_lv3_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                w_reg_356 <= w_1_reg_1223;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_485_p2 = ap_const_lv1_0))) then
                    arrayNo_cast_reg_1154(6 downto 0) <= arrayNo_cast_fu_497_p1(6 downto 0);
                bias_V_addr_reg_1164 <= co_cast_fu_420_p1(7 - 1 downto 0);
                    tmp_21_reg_1159(10 downto 1) <= tmp_21_fu_535_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                brmerge40_demorgan_i_reg_1368 <= brmerge40_demorgan_i_fu_991_p2;
                brmerge_i_i_i_reg_1378 <= brmerge_i_i_i_fu_1013_p2;
                p_38_i_i_reg_1358 <= p_38_i_i_fu_964_p2;
                tmp_13_reg_1363 <= tmp_13_fu_980_p2;
                underflow_reg_1373 <= underflow_fu_1008_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                carry_reg_1345 <= carry_fu_906_p2;
                newsignbit_reg_1339 <= p_Val2_8_fu_886_p2(7 downto 7);
                p_Val2_6_reg_1321 <= p_Val2_6_fu_852_p2;
                p_Val2_8_reg_1333 <= p_Val2_8_fu_886_p2;
                signbit_reg_1326 <= p_Val2_6_fu_852_p2(15 downto 15);
                tmp_12_reg_1352 <= p_Val2_6_fu_852_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_1_reg_1149 <= co_1_fu_491_p2;
                next_mul_reg_1131 <= next_mul_fu_414_p2;
                tmp_14_cast_reg_1136 <= tmp_14_cast_fu_447_p1;
                    tmp_17_cast_reg_1141(11 downto 1) <= tmp_17_cast_fu_481_p1(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                isneg_reg_1388 <= p_Val2_2_fu_1056_p2(8 downto 8);
                newsignbit_1_reg_1401 <= result_V_fu_1070_p2(7 downto 7);
                result_V_reg_1395 <= result_V_fu_1070_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_1_reg_1213 <= m_1_fu_671_p2;
                tmp_29_reg_1205 <= tmp_29_fu_659_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_1_reg_1236 <= n_1_fu_745_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_V_addr_reg_1187 <= tmp_27_cast_fu_619_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_5_reg_1311 <= p_Val2_5_fu_826_p2;
                tmp_39_reg_1316 <= p_Val2_5_fu_826_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_1_reg_1306 <= tmp_1_fu_791_p14;
                weight_V_load_reg_1301 <= weight_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_24_reg_1169(12 downto 1) <= tmp_24_fu_570_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_624_p2))) then
                    tmp_2_reg_1195(3 downto 1) <= tmp_2_fu_630_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_665_p2))) then
                    tmp_31_reg_1218(10 downto 1) <= tmp_31_fu_713_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_576_p2))) then
                    tmp_reg_1177(3 downto 1) <= tmp_fu_582_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond4_fu_665_p2))) then
                w_1_reg_1223 <= w_1_fu_719_p2;
            end if;
        end if;
    end process;
    tmp_17_cast_reg_1141(0) <= '0';
    arrayNo_cast_reg_1154(31 downto 7) <= "0000000000000000000000000";
    tmp_21_reg_1159(0) <= '0';
    tmp_24_reg_1169(0) <= '0';
    tmp_reg_1177(0) <= '0';
    tmp_2_reg_1195(0) <= '0';
    tmp_31_reg_1218(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_485_p2, ap_CS_fsm_state3, exitcond2_fu_576_p2, ap_CS_fsm_state4, exitcond3_fu_624_p2, ap_CS_fsm_state5, exitcond4_fu_665_p2, ap_CS_fsm_state6, exitcond_fu_739_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_485_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_576_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond3_fu_624_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_665_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_739_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_929_p2 <= "1" when (tmp_12_reg_1352 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_934_p2 <= "1" when (tmp_12_reg_1352 = ap_const_lv2_0) else "0";
    ShuffleConvs_2_Downs_10_address0 <= tmp_36_cast_fu_775_p1(10 - 1 downto 0);

    ShuffleConvs_2_Downs_10_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_10_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_11_address0 <= tmp_36_cast_fu_775_p1(10 - 1 downto 0);

    ShuffleConvs_2_Downs_11_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_11_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_1_address0 <= tmp_36_cast_fu_775_p1(10 - 1 downto 0);

    ShuffleConvs_2_Downs_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_1_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_2_address0 <= tmp_36_cast_fu_775_p1(10 - 1 downto 0);

    ShuffleConvs_2_Downs_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_2_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_3_address0 <= tmp_36_cast_fu_775_p1(10 - 1 downto 0);

    ShuffleConvs_2_Downs_3_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_3_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_4_address0 <= tmp_36_cast_fu_775_p1(10 - 1 downto 0);

    ShuffleConvs_2_Downs_4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_4_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_5_address0 <= tmp_36_cast_fu_775_p1(10 - 1 downto 0);

    ShuffleConvs_2_Downs_5_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_5_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_6_address0 <= tmp_36_cast_fu_775_p1(10 - 1 downto 0);

    ShuffleConvs_2_Downs_6_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_6_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_7_address0 <= tmp_36_cast_fu_775_p1(10 - 1 downto 0);

    ShuffleConvs_2_Downs_7_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_7_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_8_address0 <= tmp_36_cast_fu_775_p1(10 - 1 downto 0);

    ShuffleConvs_2_Downs_8_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_8_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_9_address0 <= tmp_36_cast_fu_775_p1(10 - 1 downto 0);

    ShuffleConvs_2_Downs_9_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_9_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_2_Downs_address0 <= tmp_36_cast_fu_775_p1(10 - 1 downto 0);

    ShuffleConvs_2_Downs_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_2_Downs_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_2_Downs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_485_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_485_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_485_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_485_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayNo_cast_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_urem_reg_332),32));
    bias_V_address0 <= bias_V_addr_reg_1164;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_991_p2 <= (newsignbit_reg_1339 and deleted_ones_fu_957_p3);
    brmerge9_fu_1103_p2 <= (newsignbit_1_reg_1401 or isneg_not_fu_1098_p2);
    brmerge_i_i1_fu_975_p2 <= (newsignbit_reg_1339 or p_not_i_i_fu_969_p2);
    brmerge_i_i_fu_1094_p2 <= (isneg_reg_1388 xor newsignbit_1_reg_1401);
    brmerge_i_i_i_fu_1013_p2 <= (underflow_fu_1008_p2 or overflow_fu_985_p2);
    carry_fu_906_p2 <= (tmp_40_fu_878_p3 and tmp_10_fu_900_p2);
    co_1_fu_491_p2 <= std_logic_vector(unsigned(co_reg_310) + unsigned(ap_const_lv7_1));
    co_cast_cast_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_310),10));
    co_cast_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_310),32));
    deleted_ones_fu_957_p3 <= 
        p_41_i_i_fu_952_p2 when (carry_reg_1345(0) = '1') else 
        Range1_all_ones_fu_929_p2;
    deleted_zeros_fu_939_p3 <= 
        Range1_all_ones_fu_929_p2 when (carry_reg_1345(0) = '1') else 
        Range1_all_zeros_fu_934_p2;
    exitcond1_fu_485_p2 <= "1" when (co_reg_310 = ap_const_lv7_60) else "0";
    exitcond2_fu_576_p2 <= "1" when (h_reg_344 = ap_const_lv3_5) else "0";
    exitcond3_fu_624_p2 <= "1" when (w_reg_356 = ap_const_lv3_5) else "0";
    exitcond4_fu_665_p2 <= "1" when (m_reg_380 = ap_const_lv2_3) else "0";
    exitcond_fu_739_p2 <= "1" when (n_reg_403 = ap_const_lv2_3) else "0";
    h_1_fu_638_p2 <= std_logic_vector(unsigned(h_reg_344) + unsigned(ap_const_lv3_1));
    h_cast9_cast_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_344),12));
    idx_urem_fu_602_p3 <= 
        next_urem_fu_590_p2 when (tmp_25_fu_596_p2(0) = '1') else 
        ap_const_lv7_0;
    isneg_not_fu_1098_p2 <= (isneg_reg_1388 xor ap_const_lv1_1);
    m_1_fu_671_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(m_reg_380));
    m_cast7_cast_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_380),11));
    n_1_fu_745_p2 <= std_logic_vector(unsigned(n_reg_403) + unsigned(ap_const_lv2_1));
    n_cast6_cast_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_403),11));
    newsignbit_fu_892_p3 <= p_Val2_8_fu_886_p2(7 downto 7);
    next_mul_fu_414_p2 <= std_logic_vector(unsigned(phi_mul_reg_321) + unsigned(ap_const_lv15_AB));
    next_urem_fu_590_p2 <= std_logic_vector(unsigned(phi_urem_reg_332) + unsigned(ap_const_lv7_1));
    output_V_address0 <= output_V_addr_reg_1187;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= 
        result_V_mux_fu_1108_p3 when (brmerge9_fu_1103_p2(0) = '1') else 
        p_result_V_fu_1115_p3;

    output_V_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_985_p2 <= (brmerge_i_i1_fu_975_p2 and tmp_13_fu_980_p2);
    p_38_i_i_fu_964_p2 <= (carry_reg_1345 and Range1_all_ones_fu_929_p2);
    p_41_i_i_fu_952_p2 <= (signbit_reg_1326 and tmp_11_fu_946_p2);
    p_Val2_2_fu_1056_p2 <= std_logic_vector(signed(tmp_4_fu_1052_p1) + signed(tmp_3_fu_1048_p1));
    p_Val2_5_fu_826_p0 <= weight_V_load_reg_1301;
    p_Val2_5_fu_826_p1 <= tmp_1_reg_1306;
    p_Val2_5_fu_826_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_5_fu_826_p0) * signed(p_Val2_5_fu_826_p1))), 16));
    p_Val2_6_fu_852_p2 <= std_logic_vector(signed(tmp_11_cast_fu_848_p1) + signed(p_Val2_5_reg_1311));
    p_Val2_7_fu_865_p4 <= p_Val2_6_fu_852_p2(13 downto 6);
    p_Val2_8_39_fu_1034_p3 <= 
        ap_const_lv8_80 when (underflow_reg_1373(0) = '1') else 
        p_Val2_8_reg_1333;
    p_Val2_8_fu_886_p2 <= std_logic_vector(unsigned(p_Val2_7_fu_865_p4) + unsigned(tmp_9_fu_875_p1));
    p_Val2_8_mux_fu_1028_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_1378(0) = '1') else 
        p_Val2_8_reg_1333;
    p_not_i_i_fu_969_p2 <= (deleted_zeros_fu_939_p3 xor ap_const_lv1_1);
    p_result_V_fu_1115_p3 <= 
        ap_const_lv8_80 when (underflow_1_fu_1089_p2(0) = '1') else 
        result_V_reg_1395;
    p_shl1_cast_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_463_p3),11));
    p_shl2_cast_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_429_p3),10));
    p_shl3_cast_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_511_p3),11));
    p_shl4_cast_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_523_p3),11));
    p_shl5_cast_fu_554_p3 <= (tmp_23_fu_550_p1 & ap_const_lv3_0);
    p_shl6_cast_fu_562_p3 <= (tmp_22_fu_545_p2 & ap_const_lv1_0);
    p_shl_cast_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_451_p3),11));
    result_V_fu_1070_p2 <= std_logic_vector(unsigned(bias_V_q0) + unsigned(p_Val2_s_reg_368));
    result_V_mux_fu_1108_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_1094_p2(0) = '1') else 
        result_V_reg_1395;
    sum_V_fu_1040_p3 <= 
        p_Val2_8_mux_fu_1028_p3 when (underflow_not_fu_1023_p2(0) = '1') else 
        p_Val2_8_39_fu_1034_p3;
        tmp2_cast_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_677_p2),4));

    tmp2_fu_677_p2 <= (m_reg_380 xor ap_const_lv2_2);
        tmp3_cast_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_751_p2),4));

    tmp3_fu_751_p2 <= (n_reg_403 xor ap_const_lv2_2);
    tmp4_demorgan_fu_996_p2 <= (p_38_i_i_fu_964_p2 or brmerge40_demorgan_i_fu_991_p2);
    tmp4_fu_1002_p2 <= (tmp4_demorgan_fu_996_p2 xor ap_const_lv1_1);
    tmp5_fu_1019_p2 <= (brmerge40_demorgan_i_reg_1368 or tmp_13_reg_1363);
    tmp_10_fu_900_p2 <= (newsignbit_fu_892_p3 xor ap_const_lv1_1);
        tmp_11_cast_fu_848_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_840_p3),16));

    tmp_11_fu_946_p2 <= (tmp_42_fu_922_p3 xor ap_const_lv1_1);
    tmp_13_fu_980_p2 <= (signbit_reg_1326 xor ap_const_lv1_1);
        tmp_14_cast_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_fu_441_p2),11));

    tmp_14_fu_441_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_437_p1) - unsigned(co_cast_cast_fu_425_p1));
    tmp_15_fu_451_p3 <= (co_reg_310 & ap_const_lv3_0);
    tmp_16_fu_463_p3 <= (co_reg_310 & ap_const_lv1_0);
        tmp_17_cast_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_fu_475_p2),12));

    tmp_17_fu_475_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_459_p1) - unsigned(p_shl1_cast_fu_471_p1));
    tmp_18_fu_501_p4 <= phi_mul_reg_321(14 downto 11);
    tmp_19_fu_511_p3 <= (tmp_18_fu_501_p4 & ap_const_lv3_0);
    tmp_20_fu_523_p3 <= (tmp_18_fu_501_p4 & ap_const_lv1_0);
    tmp_21_fu_535_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_519_p1) + unsigned(p_shl4_cast_fu_531_p1));
    tmp_22_fu_545_p2 <= std_logic_vector(unsigned(h_cast9_cast_fu_541_p1) + unsigned(tmp_17_cast_reg_1141));
    tmp_23_fu_550_p1 <= tmp_22_fu_545_p2(10 - 1 downto 0);
    tmp_24_fu_570_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_554_p3) - unsigned(p_shl6_cast_fu_562_p3));
    tmp_25_fu_596_p2 <= "1" when (unsigned(next_urem_fu_590_p2) < unsigned(ap_const_lv7_C)) else "0";
    tmp_26_fu_614_p2 <= std_logic_vector(unsigned(tmp_24_reg_1169) + unsigned(w_cast8_cast_fu_610_p1));
    tmp_27_cast_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_614_p2),32));
    tmp_27_fu_648_p2 <= std_logic_vector(unsigned(m_cast7_cast_fu_644_p1) + unsigned(tmp_14_cast_reg_1136));
    tmp_28_fu_653_p2 <= std_logic_vector(shift_left(unsigned(tmp_27_fu_648_p2),to_integer(unsigned('0' & ap_const_lv11_2(11-1 downto 0)))));
    tmp_29_fu_659_p2 <= std_logic_vector(unsigned(tmp_28_fu_653_p2) - unsigned(tmp_27_fu_648_p2));
    tmp_2_fu_630_p3 <= (w_reg_356 & ap_const_lv1_0);
    tmp_30_fu_696_p2 <= std_logic_vector(unsigned(tmp_cast_cast_fu_692_p1) + unsigned(tmp_21_reg_1159));
    tmp_31_fu_713_p2 <= std_logic_vector(unsigned(tmp_33_fu_701_p2) + unsigned(tmp_37_fu_707_p2));
    tmp_32_fu_729_p2 <= std_logic_vector(unsigned(tmp_29_reg_1205) + unsigned(n_cast6_cast_fu_725_p1));
    tmp_33_fu_701_p2 <= std_logic_vector(shift_left(unsigned(tmp_30_fu_696_p2),to_integer(unsigned('0' & ap_const_lv11_3(11-1 downto 0)))));
    tmp_34_fu_770_p2 <= std_logic_vector(unsigned(tmp_6_cast_cast_fu_766_p1) + unsigned(tmp_31_reg_1218));
    tmp_35_cast_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_729_p2),32));
    tmp_36_cast_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_770_p2),32));
    tmp_37_fu_707_p2 <= std_logic_vector(shift_left(unsigned(tmp_30_fu_696_p2),to_integer(unsigned('0' & ap_const_lv11_1(11-1 downto 0)))));
        tmp_3_fu_1048_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_368),9));

    tmp_40_fu_878_p3 <= p_Val2_6_fu_852_p2(13 downto 13);
    tmp_42_fu_922_p3 <= p_Val2_6_reg_1321(14 downto 14);
        tmp_4_fu_1052_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    tmp_5_fu_1084_p2 <= (newsignbit_1_reg_1401 xor ap_const_lv1_1);
    tmp_6_cast_cast_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_761_p2),11));
    tmp_6_fu_761_p2 <= std_logic_vector(signed(tmp3_cast_fu_757_p1) + signed(tmp_2_reg_1195));
    tmp_7_fu_840_p3 <= (p_Val2_4_reg_391 & ap_const_lv6_0);
    tmp_8_fu_429_p3 <= (co_reg_310 & ap_const_lv2_0);
    tmp_9_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_reg_1316),8));
    tmp_cast_cast_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_687_p2),11));
    tmp_fu_582_p3 <= (h_reg_344 & ap_const_lv1_0);
    tmp_s_fu_687_p2 <= std_logic_vector(signed(tmp2_cast_fu_683_p1) + signed(tmp_reg_1177));
    underflow_1_fu_1089_p2 <= (isneg_reg_1388 and tmp_5_fu_1084_p2);
    underflow_fu_1008_p2 <= (signbit_reg_1326 and tmp4_fu_1002_p2);
    underflow_not_fu_1023_p2 <= (tmp5_fu_1019_p2 or p_38_i_i_reg_1358);
    w_1_fu_719_p2 <= std_logic_vector(unsigned(w_reg_356) + unsigned(ap_const_lv3_1));
    w_cast8_cast_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_356),13));
    weight_V_address0 <= tmp_35_cast_fu_734_p1(10 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
