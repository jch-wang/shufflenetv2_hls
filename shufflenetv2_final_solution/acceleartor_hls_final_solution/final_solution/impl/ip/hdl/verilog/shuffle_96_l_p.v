// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shuffle_96_l_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        buffer1_1_96_4x4_p_V_12_address0,
        buffer1_1_96_4x4_p_V_12_ce0,
        buffer1_1_96_4x4_p_V_12_q0,
        buffer1_1_96_4x4_p_V_1_address0,
        buffer1_1_96_4x4_p_V_1_ce0,
        buffer1_1_96_4x4_p_V_1_q0,
        buffer1_1_96_4x4_p_V_2_address0,
        buffer1_1_96_4x4_p_V_2_ce0,
        buffer1_1_96_4x4_p_V_2_q0,
        buffer1_1_96_4x4_p_V_3_address0,
        buffer1_1_96_4x4_p_V_3_ce0,
        buffer1_1_96_4x4_p_V_3_q0,
        buffer1_1_96_4x4_p_V_4_address0,
        buffer1_1_96_4x4_p_V_4_ce0,
        buffer1_1_96_4x4_p_V_4_q0,
        buffer1_1_96_4x4_p_V_5_address0,
        buffer1_1_96_4x4_p_V_5_ce0,
        buffer1_1_96_4x4_p_V_5_q0,
        buffer1_1_96_4x4_p_V_6_address0,
        buffer1_1_96_4x4_p_V_6_ce0,
        buffer1_1_96_4x4_p_V_6_q0,
        buffer1_1_96_4x4_p_V_7_address0,
        buffer1_1_96_4x4_p_V_7_ce0,
        buffer1_1_96_4x4_p_V_7_q0,
        buffer1_1_96_4x4_p_V_8_address0,
        buffer1_1_96_4x4_p_V_8_ce0,
        buffer1_1_96_4x4_p_V_8_q0,
        buffer1_1_96_4x4_p_V_9_address0,
        buffer1_1_96_4x4_p_V_9_ce0,
        buffer1_1_96_4x4_p_V_9_q0,
        buffer1_1_96_4x4_p_V_10_address0,
        buffer1_1_96_4x4_p_V_10_ce0,
        buffer1_1_96_4x4_p_V_10_q0,
        buffer1_1_96_4x4_p_V_11_address0,
        buffer1_1_96_4x4_p_V_11_ce0,
        buffer1_1_96_4x4_p_V_11_q0
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [8:0] buffer1_1_96_4x4_p_V_12_address0;
output   buffer1_1_96_4x4_p_V_12_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_12_q0;
output  [8:0] buffer1_1_96_4x4_p_V_1_address0;
output   buffer1_1_96_4x4_p_V_1_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_1_q0;
output  [8:0] buffer1_1_96_4x4_p_V_2_address0;
output   buffer1_1_96_4x4_p_V_2_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_2_q0;
output  [8:0] buffer1_1_96_4x4_p_V_3_address0;
output   buffer1_1_96_4x4_p_V_3_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_3_q0;
output  [8:0] buffer1_1_96_4x4_p_V_4_address0;
output   buffer1_1_96_4x4_p_V_4_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_4_q0;
output  [8:0] buffer1_1_96_4x4_p_V_5_address0;
output   buffer1_1_96_4x4_p_V_5_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_5_q0;
output  [8:0] buffer1_1_96_4x4_p_V_6_address0;
output   buffer1_1_96_4x4_p_V_6_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_6_q0;
output  [8:0] buffer1_1_96_4x4_p_V_7_address0;
output   buffer1_1_96_4x4_p_V_7_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_7_q0;
output  [8:0] buffer1_1_96_4x4_p_V_8_address0;
output   buffer1_1_96_4x4_p_V_8_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_8_q0;
output  [8:0] buffer1_1_96_4x4_p_V_9_address0;
output   buffer1_1_96_4x4_p_V_9_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_9_q0;
output  [8:0] buffer1_1_96_4x4_p_V_10_address0;
output   buffer1_1_96_4x4_p_V_10_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_10_q0;
output  [8:0] buffer1_1_96_4x4_p_V_11_address0;
output   buffer1_1_96_4x4_p_V_11_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_11_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_V_ce0;
reg output_V_we0;
reg buffer1_1_96_4x4_p_V_12_ce0;
reg buffer1_1_96_4x4_p_V_1_ce0;
reg buffer1_1_96_4x4_p_V_2_ce0;
reg buffer1_1_96_4x4_p_V_3_ce0;
reg buffer1_1_96_4x4_p_V_4_ce0;
reg buffer1_1_96_4x4_p_V_5_ce0;
reg buffer1_1_96_4x4_p_V_6_ce0;
reg buffer1_1_96_4x4_p_V_7_ce0;
reg buffer1_1_96_4x4_p_V_8_ce0;
reg buffer1_1_96_4x4_p_V_9_ce0;
reg buffer1_1_96_4x4_p_V_10_ce0;
reg buffer1_1_96_4x4_p_V_11_ce0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_1481_fu_270_p1;
reg   [0:0] tmp_1481_reg_566;
wire    ap_CS_fsm_state2;
wire  signed [12:0] tmp_1393_cast_fu_304_p1;
reg  signed [12:0] tmp_1393_cast_reg_570;
wire   [7:0] co_25_fu_314_p2;
reg   [7:0] co_25_reg_578;
wire   [6:0] p_lshr_f_cast_fu_320_p4;
wire   [0:0] exitcond3_fu_308_p2;
reg   [4:0] tmp_1482_reg_588;
wire   [8:0] arrayNo_cast_fu_356_p1;
reg   [8:0] arrayNo_cast_reg_594;
wire    ap_CS_fsm_state12;
wire  signed [11:0] tmp_1398_cast_fu_396_p1;
reg  signed [11:0] tmp_1398_cast_reg_599;
wire   [13:0] tmp_457_fu_433_p2;
reg   [13:0] tmp_457_reg_604;
wire    ap_CS_fsm_state13;
wire   [9:0] tmp_459_fu_468_p2;
reg   [9:0] tmp_459_reg_609;
wire   [2:0] h_22_fu_480_p2;
reg   [2:0] h_22_reg_617;
reg   [12:0] output_V_addr_reg_622;
wire    ap_CS_fsm_state14;
wire   [2:0] w_28_fu_531_p2;
reg   [2:0] w_28_reg_690;
wire   [7:0] tmp_fu_537_p14;
reg   [7:0] tmp_reg_695;
wire    ap_CS_fsm_state15;
reg   [7:0] co_reg_237;
wire   [0:0] exitcond2_fu_474_p2;
reg   [2:0] h_reg_248;
wire   [0:0] exitcond_fu_525_p2;
reg   [2:0] w_reg_259;
wire    ap_CS_fsm_state16;
wire   [31:0] tmp_1407_cast_fu_499_p1;
wire   [31:0] tmp_1408_cast_fu_509_p1;
wire   [10:0] tmp_s_fu_274_p3;
wire   [8:0] tmp_451_fu_286_p3;
wire   [11:0] p_shl_cast_fu_282_p1;
wire   [11:0] p_shl1_cast_fu_294_p1;
wire   [11:0] tmp_452_fu_298_p2;
wire   [6:0] grp_fu_330_p0;
wire   [4:0] grp_fu_330_p1;
wire   [6:0] mul_fu_340_p0;
wire   [15:0] mul_fu_340_p2;
wire   [6:0] grp_fu_330_p2;
wire   [7:0] tmp_1483_fu_360_p3;
wire  signed [9:0] tmp_453_fu_367_p1;
wire   [5:0] tmp_1484_fu_375_p3;
wire  signed [7:0] tmp_454_fu_382_p1;
wire   [10:0] p_shl2_cast_fu_371_p1;
wire   [10:0] p_shl3_cast_fu_386_p1;
wire   [10:0] tmp_455_fu_390_p2;
wire   [12:0] h_cast2_cast_fu_404_p1;
wire   [12:0] tmp_456_fu_408_p2;
wire   [10:0] tmp_1485_fu_413_p1;
wire   [13:0] p_shl6_cast_fu_417_p3;
wire   [13:0] p_shl7_cast_fu_425_p3;
wire   [11:0] h_cast2_cast9_fu_400_p1;
wire   [11:0] tmp_458_fu_439_p2;
wire   [6:0] tmp_1486_fu_444_p1;
wire   [8:0] tmp_1487_fu_456_p1;
wire   [9:0] p_shl4_cast_fu_448_p3;
wire   [9:0] p_shl5_cast_fu_460_p3;
wire   [13:0] w_cast1_cast_fu_490_p1;
wire   [13:0] tmp_460_fu_494_p2;
wire   [9:0] w_cast1_cast8_fu_486_p1;
wire   [9:0] tmp_461_fu_504_p2;
reg    grp_fu_330_ap_start;
wire    grp_fu_330_ap_done;
reg   [15:0] ap_NS_fsm;
wire   [15:0] mul_fu_340_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

ShuffleNetV2_uremxdS #(
    .ID( 1 ),
    .NUM_STAGE( 11 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 7 ))
ShuffleNetV2_uremxdS_U613(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_330_ap_start),
    .done(grp_fu_330_ap_done),
    .din0(grp_fu_330_p0),
    .din1(grp_fu_330_p1),
    .ce(1'b1),
    .dout(grp_fu_330_p2)
);

ShuffleNetV2_mux_yd2 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 9 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_yd2_U614(
    .din1(buffer1_1_96_4x4_p_V_12_q0),
    .din2(buffer1_1_96_4x4_p_V_1_q0),
    .din3(buffer1_1_96_4x4_p_V_2_q0),
    .din4(buffer1_1_96_4x4_p_V_3_q0),
    .din5(buffer1_1_96_4x4_p_V_4_q0),
    .din6(buffer1_1_96_4x4_p_V_5_q0),
    .din7(buffer1_1_96_4x4_p_V_6_q0),
    .din8(buffer1_1_96_4x4_p_V_7_q0),
    .din9(buffer1_1_96_4x4_p_V_8_q0),
    .din10(buffer1_1_96_4x4_p_V_9_q0),
    .din11(buffer1_1_96_4x4_p_V_10_q0),
    .din12(buffer1_1_96_4x4_p_V_11_q0),
    .din13(arrayNo_cast_reg_594),
    .dout(tmp_fu_537_p14)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (exitcond2_fu_474_p2 == 1'd1))) begin
        co_reg_237 <= co_25_reg_578;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_237 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'd1 == exitcond_fu_525_p2))) begin
        h_reg_248 <= h_22_reg_617;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        h_reg_248 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (1'd0 == exitcond2_fu_474_p2))) begin
        w_reg_259 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        w_reg_259 <= w_28_reg_690;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        arrayNo_cast_reg_594[6 : 0] <= arrayNo_cast_fu_356_p1[6 : 0];
        tmp_1398_cast_reg_599[11 : 1] <= tmp_1398_cast_fu_396_p1[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_25_reg_578 <= co_25_fu_314_p2;
        tmp_1393_cast_reg_570[12 : 1] <= tmp_1393_cast_fu_304_p1[12 : 1];
        tmp_1481_reg_566 <= tmp_1481_fu_270_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        h_22_reg_617 <= h_22_fu_480_p2;
        tmp_457_reg_604[13 : 1] <= tmp_457_fu_433_p2[13 : 1];
        tmp_459_reg_609[9 : 1] <= tmp_459_fu_468_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_V_addr_reg_622 <= tmp_1407_cast_fu_499_p1;
        w_28_reg_690 <= w_28_fu_531_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_308_p2 == 1'd0))) begin
        tmp_1482_reg_588 <= {{mul_fu_340_p2[15:11]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_reg_695 <= tmp_fu_537_p14;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_308_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_308_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_10_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_11_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_12_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_1_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_2_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_3_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_4_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_5_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_6_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_7_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_8_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_9_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_308_p2 == 1'd0))) begin
        grp_fu_330_ap_start = 1'b1;
    end else begin
        grp_fu_330_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (tmp_1481_reg_566 == 1'd0))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_308_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (exitcond2_fu_474_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (1'd1 == exitcond_fu_525_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else if (((1'b1 == ap_CS_fsm_state14) & (1'd0 == exitcond_fu_525_p2) & (tmp_1481_reg_566 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign arrayNo_cast_fu_356_p1 = grp_fu_330_p2;

assign buffer1_1_96_4x4_p_V_10_address0 = tmp_1408_cast_fu_509_p1;

assign buffer1_1_96_4x4_p_V_11_address0 = tmp_1408_cast_fu_509_p1;

assign buffer1_1_96_4x4_p_V_12_address0 = tmp_1408_cast_fu_509_p1;

assign buffer1_1_96_4x4_p_V_1_address0 = tmp_1408_cast_fu_509_p1;

assign buffer1_1_96_4x4_p_V_2_address0 = tmp_1408_cast_fu_509_p1;

assign buffer1_1_96_4x4_p_V_3_address0 = tmp_1408_cast_fu_509_p1;

assign buffer1_1_96_4x4_p_V_4_address0 = tmp_1408_cast_fu_509_p1;

assign buffer1_1_96_4x4_p_V_5_address0 = tmp_1408_cast_fu_509_p1;

assign buffer1_1_96_4x4_p_V_6_address0 = tmp_1408_cast_fu_509_p1;

assign buffer1_1_96_4x4_p_V_7_address0 = tmp_1408_cast_fu_509_p1;

assign buffer1_1_96_4x4_p_V_8_address0 = tmp_1408_cast_fu_509_p1;

assign buffer1_1_96_4x4_p_V_9_address0 = tmp_1408_cast_fu_509_p1;

assign co_25_fu_314_p2 = (8'd1 + co_reg_237);

assign exitcond2_fu_474_p2 = ((h_reg_248 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond3_fu_308_p2 = ((co_reg_237 == 8'd192) ? 1'b1 : 1'b0);

assign exitcond_fu_525_p2 = ((w_reg_259 == 3'd6) ? 1'b1 : 1'b0);

assign grp_fu_330_p0 = {{co_reg_237[7:1]}};

assign grp_fu_330_p1 = 7'd12;

assign h_22_fu_480_p2 = (3'd1 + h_reg_248);

assign h_cast2_cast9_fu_400_p1 = h_reg_248;

assign h_cast2_cast_fu_404_p1 = h_reg_248;

assign mul_fu_340_p0 = mul_fu_340_p00;

assign mul_fu_340_p00 = p_lshr_f_cast_fu_320_p4;

assign mul_fu_340_p2 = (mul_fu_340_p0 * $signed('hAB));

assign output_V_address0 = output_V_addr_reg_622;

assign output_V_d0 = tmp_reg_695;

assign p_lshr_f_cast_fu_320_p4 = {{co_reg_237[7:1]}};

assign p_shl1_cast_fu_294_p1 = tmp_451_fu_286_p3;

assign p_shl2_cast_fu_371_p1 = $unsigned(tmp_453_fu_367_p1);

assign p_shl3_cast_fu_386_p1 = $unsigned(tmp_454_fu_382_p1);

assign p_shl4_cast_fu_448_p3 = {{tmp_1486_fu_444_p1}, {3'd0}};

assign p_shl5_cast_fu_460_p3 = {{tmp_1487_fu_456_p1}, {1'd0}};

assign p_shl6_cast_fu_417_p3 = {{tmp_1485_fu_413_p1}, {3'd0}};

assign p_shl7_cast_fu_425_p3 = {{tmp_456_fu_408_p2}, {1'd0}};

assign p_shl_cast_fu_282_p1 = tmp_s_fu_274_p3;

assign tmp_1393_cast_fu_304_p1 = $signed(tmp_452_fu_298_p2);

assign tmp_1398_cast_fu_396_p1 = $signed(tmp_455_fu_390_p2);

assign tmp_1407_cast_fu_499_p1 = tmp_460_fu_494_p2;

assign tmp_1408_cast_fu_509_p1 = tmp_461_fu_504_p2;

assign tmp_1481_fu_270_p1 = co_reg_237[0:0];

assign tmp_1483_fu_360_p3 = {{tmp_1482_reg_588}, {3'd0}};

assign tmp_1484_fu_375_p3 = {{tmp_1482_reg_588}, {1'd0}};

assign tmp_1485_fu_413_p1 = tmp_456_fu_408_p2[10:0];

assign tmp_1486_fu_444_p1 = tmp_458_fu_439_p2[6:0];

assign tmp_1487_fu_456_p1 = tmp_458_fu_439_p2[8:0];

assign tmp_451_fu_286_p3 = {{co_reg_237}, {1'd0}};

assign tmp_452_fu_298_p2 = (p_shl_cast_fu_282_p1 - p_shl1_cast_fu_294_p1);

assign tmp_453_fu_367_p1 = $signed(tmp_1483_fu_360_p3);

assign tmp_454_fu_382_p1 = $signed(tmp_1484_fu_375_p3);

assign tmp_455_fu_390_p2 = (p_shl2_cast_fu_371_p1 - p_shl3_cast_fu_386_p1);

assign tmp_456_fu_408_p2 = ($signed(h_cast2_cast_fu_404_p1) + $signed(tmp_1393_cast_reg_570));

assign tmp_457_fu_433_p2 = (p_shl6_cast_fu_417_p3 - p_shl7_cast_fu_425_p3);

assign tmp_458_fu_439_p2 = ($signed(h_cast2_cast9_fu_400_p1) + $signed(tmp_1398_cast_reg_599));

assign tmp_459_fu_468_p2 = (p_shl4_cast_fu_448_p3 - p_shl5_cast_fu_460_p3);

assign tmp_460_fu_494_p2 = (tmp_457_reg_604 + w_cast1_cast_fu_490_p1);

assign tmp_461_fu_504_p2 = (tmp_459_reg_609 + w_cast1_cast8_fu_486_p1);

assign tmp_s_fu_274_p3 = {{co_reg_237}, {3'd0}};

assign w_28_fu_531_p2 = (w_reg_259 + 3'd1);

assign w_cast1_cast8_fu_486_p1 = w_reg_259;

assign w_cast1_cast_fu_490_p1 = w_reg_259;

always @ (posedge ap_clk) begin
    tmp_1393_cast_reg_570[0] <= 1'b0;
    arrayNo_cast_reg_594[8:7] <= 2'b00;
    tmp_1398_cast_reg_599[0] <= 1'b0;
    tmp_457_reg_604[0] <= 1'b0;
    tmp_459_reg_609[0] <= 1'b0;
end

endmodule //shuffle_96_l_p
