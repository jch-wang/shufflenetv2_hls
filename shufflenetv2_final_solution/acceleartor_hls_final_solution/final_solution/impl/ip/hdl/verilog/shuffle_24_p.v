// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shuffle_24_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        left_V_address0,
        left_V_ce0,
        left_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        buffer1_1_24_16x16_p_23_address0,
        buffer1_1_24_16x16_p_23_ce0,
        buffer1_1_24_16x16_p_23_q0,
        buffer1_1_24_16x16_p_22_address0,
        buffer1_1_24_16x16_p_22_ce0,
        buffer1_1_24_16x16_p_22_q0,
        buffer1_1_24_16x16_p_11_address0,
        buffer1_1_24_16x16_p_11_ce0,
        buffer1_1_24_16x16_p_11_q0,
        buffer1_1_24_16x16_p_6_address0,
        buffer1_1_24_16x16_p_6_ce0,
        buffer1_1_24_16x16_p_6_q0,
        buffer1_1_24_16x16_p_5_address0,
        buffer1_1_24_16x16_p_5_ce0,
        buffer1_1_24_16x16_p_5_q0,
        buffer1_1_24_16x16_p_4_address0,
        buffer1_1_24_16x16_p_4_ce0,
        buffer1_1_24_16x16_p_4_q0,
        buffer1_1_24_16x16_p_3_address0,
        buffer1_1_24_16x16_p_3_ce0,
        buffer1_1_24_16x16_p_3_q0,
        buffer1_1_24_16x16_p_2_address0,
        buffer1_1_24_16x16_p_2_ce0,
        buffer1_1_24_16x16_p_2_q0,
        buffer1_1_24_16x16_p_1_address0,
        buffer1_1_24_16x16_p_1_ce0,
        buffer1_1_24_16x16_p_1_q0,
        buffer1_1_24_16x16_p_address0,
        buffer1_1_24_16x16_p_ce0,
        buffer1_1_24_16x16_p_q0,
        buffer1_1_24_16x16_p_21_address0,
        buffer1_1_24_16x16_p_21_ce0,
        buffer1_1_24_16x16_p_21_q0,
        buffer1_1_24_16x16_p_20_address0,
        buffer1_1_24_16x16_p_20_ce0,
        buffer1_1_24_16x16_p_20_q0,
        buffer1_1_24_16x16_p_19_address0,
        buffer1_1_24_16x16_p_19_ce0,
        buffer1_1_24_16x16_p_19_q0,
        buffer1_1_24_16x16_p_18_address0,
        buffer1_1_24_16x16_p_18_ce0,
        buffer1_1_24_16x16_p_18_q0,
        buffer1_1_24_16x16_p_17_address0,
        buffer1_1_24_16x16_p_17_ce0,
        buffer1_1_24_16x16_p_17_q0,
        buffer1_1_24_16x16_p_16_address0,
        buffer1_1_24_16x16_p_16_ce0,
        buffer1_1_24_16x16_p_16_q0,
        buffer1_1_24_16x16_p_15_address0,
        buffer1_1_24_16x16_p_15_ce0,
        buffer1_1_24_16x16_p_15_q0,
        buffer1_1_24_16x16_p_14_address0,
        buffer1_1_24_16x16_p_14_ce0,
        buffer1_1_24_16x16_p_14_q0,
        buffer1_1_24_16x16_p_13_address0,
        buffer1_1_24_16x16_p_13_ce0,
        buffer1_1_24_16x16_p_13_q0,
        buffer1_1_24_16x16_p_12_address0,
        buffer1_1_24_16x16_p_12_ce0,
        buffer1_1_24_16x16_p_12_q0,
        buffer1_1_24_16x16_p_10_address0,
        buffer1_1_24_16x16_p_10_ce0,
        buffer1_1_24_16x16_p_10_q0,
        buffer1_1_24_16x16_p_9_address0,
        buffer1_1_24_16x16_p_9_ce0,
        buffer1_1_24_16x16_p_9_q0,
        buffer1_1_24_16x16_p_8_address0,
        buffer1_1_24_16x16_p_8_ce0,
        buffer1_1_24_16x16_p_8_q0,
        buffer1_1_24_16x16_p_7_address0,
        buffer1_1_24_16x16_p_7_ce0,
        buffer1_1_24_16x16_p_7_q0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] left_V_address0;
output   left_V_ce0;
input  [7:0] left_V_q0;
output  [13:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [8:0] buffer1_1_24_16x16_p_23_address0;
output   buffer1_1_24_16x16_p_23_ce0;
input  [7:0] buffer1_1_24_16x16_p_23_q0;
output  [8:0] buffer1_1_24_16x16_p_22_address0;
output   buffer1_1_24_16x16_p_22_ce0;
input  [7:0] buffer1_1_24_16x16_p_22_q0;
output  [8:0] buffer1_1_24_16x16_p_11_address0;
output   buffer1_1_24_16x16_p_11_ce0;
input  [7:0] buffer1_1_24_16x16_p_11_q0;
output  [8:0] buffer1_1_24_16x16_p_6_address0;
output   buffer1_1_24_16x16_p_6_ce0;
input  [7:0] buffer1_1_24_16x16_p_6_q0;
output  [8:0] buffer1_1_24_16x16_p_5_address0;
output   buffer1_1_24_16x16_p_5_ce0;
input  [7:0] buffer1_1_24_16x16_p_5_q0;
output  [8:0] buffer1_1_24_16x16_p_4_address0;
output   buffer1_1_24_16x16_p_4_ce0;
input  [7:0] buffer1_1_24_16x16_p_4_q0;
output  [8:0] buffer1_1_24_16x16_p_3_address0;
output   buffer1_1_24_16x16_p_3_ce0;
input  [7:0] buffer1_1_24_16x16_p_3_q0;
output  [8:0] buffer1_1_24_16x16_p_2_address0;
output   buffer1_1_24_16x16_p_2_ce0;
input  [7:0] buffer1_1_24_16x16_p_2_q0;
output  [8:0] buffer1_1_24_16x16_p_1_address0;
output   buffer1_1_24_16x16_p_1_ce0;
input  [7:0] buffer1_1_24_16x16_p_1_q0;
output  [8:0] buffer1_1_24_16x16_p_address0;
output   buffer1_1_24_16x16_p_ce0;
input  [7:0] buffer1_1_24_16x16_p_q0;
output  [8:0] buffer1_1_24_16x16_p_21_address0;
output   buffer1_1_24_16x16_p_21_ce0;
input  [7:0] buffer1_1_24_16x16_p_21_q0;
output  [8:0] buffer1_1_24_16x16_p_20_address0;
output   buffer1_1_24_16x16_p_20_ce0;
input  [7:0] buffer1_1_24_16x16_p_20_q0;
output  [8:0] buffer1_1_24_16x16_p_19_address0;
output   buffer1_1_24_16x16_p_19_ce0;
input  [7:0] buffer1_1_24_16x16_p_19_q0;
output  [8:0] buffer1_1_24_16x16_p_18_address0;
output   buffer1_1_24_16x16_p_18_ce0;
input  [7:0] buffer1_1_24_16x16_p_18_q0;
output  [8:0] buffer1_1_24_16x16_p_17_address0;
output   buffer1_1_24_16x16_p_17_ce0;
input  [7:0] buffer1_1_24_16x16_p_17_q0;
output  [8:0] buffer1_1_24_16x16_p_16_address0;
output   buffer1_1_24_16x16_p_16_ce0;
input  [7:0] buffer1_1_24_16x16_p_16_q0;
output  [8:0] buffer1_1_24_16x16_p_15_address0;
output   buffer1_1_24_16x16_p_15_ce0;
input  [7:0] buffer1_1_24_16x16_p_15_q0;
output  [8:0] buffer1_1_24_16x16_p_14_address0;
output   buffer1_1_24_16x16_p_14_ce0;
input  [7:0] buffer1_1_24_16x16_p_14_q0;
output  [8:0] buffer1_1_24_16x16_p_13_address0;
output   buffer1_1_24_16x16_p_13_ce0;
input  [7:0] buffer1_1_24_16x16_p_13_q0;
output  [8:0] buffer1_1_24_16x16_p_12_address0;
output   buffer1_1_24_16x16_p_12_ce0;
input  [7:0] buffer1_1_24_16x16_p_12_q0;
output  [8:0] buffer1_1_24_16x16_p_10_address0;
output   buffer1_1_24_16x16_p_10_ce0;
input  [7:0] buffer1_1_24_16x16_p_10_q0;
output  [8:0] buffer1_1_24_16x16_p_9_address0;
output   buffer1_1_24_16x16_p_9_ce0;
input  [7:0] buffer1_1_24_16x16_p_9_q0;
output  [8:0] buffer1_1_24_16x16_p_8_address0;
output   buffer1_1_24_16x16_p_8_ce0;
input  [7:0] buffer1_1_24_16x16_p_8_q0;
output  [8:0] buffer1_1_24_16x16_p_7_address0;
output   buffer1_1_24_16x16_p_7_ce0;
input  [7:0] buffer1_1_24_16x16_p_7_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg left_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg buffer1_1_24_16x16_p_23_ce0;
reg buffer1_1_24_16x16_p_22_ce0;
reg buffer1_1_24_16x16_p_11_ce0;
reg buffer1_1_24_16x16_p_6_ce0;
reg buffer1_1_24_16x16_p_5_ce0;
reg buffer1_1_24_16x16_p_4_ce0;
reg buffer1_1_24_16x16_p_3_ce0;
reg buffer1_1_24_16x16_p_2_ce0;
reg buffer1_1_24_16x16_p_1_ce0;
reg buffer1_1_24_16x16_p_ce0;
reg buffer1_1_24_16x16_p_21_ce0;
reg buffer1_1_24_16x16_p_20_ce0;
reg buffer1_1_24_16x16_p_19_ce0;
reg buffer1_1_24_16x16_p_18_ce0;
reg buffer1_1_24_16x16_p_17_ce0;
reg buffer1_1_24_16x16_p_16_ce0;
reg buffer1_1_24_16x16_p_15_ce0;
reg buffer1_1_24_16x16_p_14_ce0;
reg buffer1_1_24_16x16_p_13_ce0;
reg buffer1_1_24_16x16_p_12_ce0;
reg buffer1_1_24_16x16_p_10_ce0;
reg buffer1_1_24_16x16_p_9_ce0;
reg buffer1_1_24_16x16_p_8_ce0;
reg buffer1_1_24_16x16_p_7_ce0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_1516_fu_454_p1;
reg   [0:0] tmp_1516_reg_782;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_511_fu_482_p2;
reg   [10:0] tmp_511_reg_786;
wire   [5:0] co_30_fu_494_p2;
reg   [5:0] co_30_reg_794;
wire   [4:0] p_lshr_f_cast_fu_500_p4;
reg   [4:0] p_lshr_f_cast_reg_799;
wire   [0:0] exitcond5_fu_488_p2;
wire   [9:0] tmp_514_fu_534_p2;
reg   [9:0] tmp_514_reg_804;
wire   [13:0] tmp_516_fu_573_p2;
reg   [13:0] tmp_516_reg_809;
wire    ap_CS_fsm_state3;
wire   [14:0] tmp_518_fu_604_p2;
reg   [14:0] tmp_518_reg_814;
wire   [9:0] tmp_521_fu_634_p2;
reg   [9:0] tmp_521_reg_819;
wire   [4:0] h_27_fu_646_p2;
reg   [4:0] h_27_reg_827;
wire    ap_CS_fsm_state4;
reg   [13:0] output_V_addr_reg_837;
wire   [4:0] w_33_fu_723_p2;
reg   [4:0] w_33_reg_965;
wire    ap_CS_fsm_state5;
wire   [7:0] tmp_fu_729_p26;
wire    ap_CS_fsm_state6;
reg   [5:0] co_reg_411;
wire   [0:0] exitcond4_fu_640_p2;
reg   [4:0] h_reg_422;
wire   [0:0] exitcond_fu_717_p2;
reg   [4:0] w_reg_433;
wire    ap_CS_fsm_state7;
reg   [7:0] storemerge_reg_444;
wire   [31:0] tmp_1504_cast_fu_669_p1;
wire   [31:0] tmp_1505_cast_fu_679_p1;
wire   [31:0] tmp_1506_cast_fu_689_p1;
wire   [9:0] tmp_s_fu_458_p3;
wire   [6:0] tmp_510_fu_470_p3;
wire   [10:0] p_shl_cast_fu_466_p1;
wire   [10:0] p_shl1_cast_fu_478_p1;
wire   [8:0] tmp_512_fu_510_p3;
wire   [5:0] tmp_513_fu_522_p3;
wire   [9:0] p_shl3_cast_fu_530_p1;
wire   [9:0] p_shl2_cast_fu_518_p1;
wire   [9:0] h_cast2_cast_fu_544_p1;
wire   [9:0] tmp_515_fu_548_p2;
wire   [10:0] tmp_1517_fu_561_p3;
wire   [13:0] p_shl8_cast_fu_553_p3;
wire   [13:0] p_shl9_cast_fu_569_p1;
wire   [10:0] h_cast2_cast3_fu_540_p1;
wire   [10:0] tmp_517_fu_579_p2;
wire   [11:0] tmp_1518_fu_592_p3;
wire   [14:0] p_shl6_cast_fu_584_p3;
wire   [14:0] p_shl7_cast_fu_600_p1;
wire   [8:0] tmp_519_fu_610_p3;
wire   [5:0] tmp_520_fu_622_p3;
wire   [9:0] p_shl4_cast_fu_618_p1;
wire   [9:0] p_shl5_cast_fu_630_p1;
wire   [13:0] w_cast1_cast_fu_660_p1;
wire   [13:0] tmp_522_fu_664_p2;
wire   [14:0] w_cast1_cast6_fu_656_p1;
wire   [14:0] tmp_523_fu_674_p2;
wire   [9:0] w_cast1_cast5_fu_652_p1;
wire   [9:0] tmp_524_fu_684_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

ShuffleNetV2_mux_qcK #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_qcK_x_U264(
    .din1(buffer1_1_24_16x16_p_23_q0),
    .din2(buffer1_1_24_16x16_p_22_q0),
    .din3(buffer1_1_24_16x16_p_11_q0),
    .din4(buffer1_1_24_16x16_p_6_q0),
    .din5(buffer1_1_24_16x16_p_5_q0),
    .din6(buffer1_1_24_16x16_p_4_q0),
    .din7(buffer1_1_24_16x16_p_3_q0),
    .din8(buffer1_1_24_16x16_p_2_q0),
    .din9(buffer1_1_24_16x16_p_1_q0),
    .din10(buffer1_1_24_16x16_p_q0),
    .din11(buffer1_1_24_16x16_p_21_q0),
    .din12(buffer1_1_24_16x16_p_20_q0),
    .din13(buffer1_1_24_16x16_p_19_q0),
    .din14(buffer1_1_24_16x16_p_18_q0),
    .din15(buffer1_1_24_16x16_p_17_q0),
    .din16(buffer1_1_24_16x16_p_16_q0),
    .din17(buffer1_1_24_16x16_p_15_q0),
    .din18(buffer1_1_24_16x16_p_14_q0),
    .din19(buffer1_1_24_16x16_p_13_q0),
    .din20(buffer1_1_24_16x16_p_12_q0),
    .din21(buffer1_1_24_16x16_p_10_q0),
    .din22(buffer1_1_24_16x16_p_9_q0),
    .din23(buffer1_1_24_16x16_p_8_q0),
    .din24(buffer1_1_24_16x16_p_7_q0),
    .din25(p_lshr_f_cast_reg_799),
    .dout(tmp_fu_729_p26)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_640_p2 == 1'd1))) begin
        co_reg_411 <= co_30_reg_794;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_411 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond_fu_717_p2))) begin
        h_reg_422 <= h_27_reg_827;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_488_p2 == 1'd0))) begin
        h_reg_422 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        storemerge_reg_444 <= tmp_fu_729_p26;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        storemerge_reg_444 <= left_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond4_fu_640_p2))) begin
        w_reg_433 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        w_reg_433 <= w_33_reg_965;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_30_reg_794 <= co_30_fu_494_p2;
        tmp_1516_reg_782 <= tmp_1516_fu_454_p1;
        tmp_511_reg_786[10 : 1] <= tmp_511_fu_482_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_27_reg_827 <= h_27_fu_646_p2;
        tmp_516_reg_809[13 : 1] <= tmp_516_fu_573_p2[13 : 1];
        tmp_518_reg_814[14 : 1] <= tmp_518_fu_604_p2[14 : 1];
        tmp_521_reg_819[9 : 1] <= tmp_521_fu_634_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_addr_reg_837 <= tmp_1505_cast_fu_679_p1;
        w_33_reg_965 <= w_33_fu_723_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_488_p2 == 1'd0))) begin
        p_lshr_f_cast_reg_799 <= {{co_reg_411[5:1]}};
        tmp_514_reg_804[9 : 1] <= tmp_514_fu_534_p2[9 : 1];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_488_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_488_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_10_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_11_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_12_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_13_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_14_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_15_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_16_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_17_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_18_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_19_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_1_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_20_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_21_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_22_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_23_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_2_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_3_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_4_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_5_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_6_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_7_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_8_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_9_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        left_V_ce0 = 1'b1;
    end else begin
        left_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_488_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_640_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond_fu_717_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_717_p2) & (tmp_1516_reg_782 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign buffer1_1_24_16x16_p_10_address0 = tmp_1506_cast_fu_689_p1;

assign buffer1_1_24_16x16_p_11_address0 = tmp_1506_cast_fu_689_p1;

assign buffer1_1_24_16x16_p_12_address0 = tmp_1506_cast_fu_689_p1;

assign buffer1_1_24_16x16_p_13_address0 = tmp_1506_cast_fu_689_p1;

assign buffer1_1_24_16x16_p_14_address0 = tmp_1506_cast_fu_689_p1;

assign buffer1_1_24_16x16_p_15_address0 = tmp_1506_cast_fu_689_p1;

assign buffer1_1_24_16x16_p_16_address0 = tmp_1506_cast_fu_689_p1;

assign buffer1_1_24_16x16_p_17_address0 = tmp_1506_cast_fu_689_p1;

assign buffer1_1_24_16x16_p_18_address0 = tmp_1506_cast_fu_689_p1;

assign buffer1_1_24_16x16_p_19_address0 = tmp_1506_cast_fu_689_p1;

assign buffer1_1_24_16x16_p_1_address0 = tmp_1506_cast_fu_689_p1;

assign buffer1_1_24_16x16_p_20_address0 = tmp_1506_cast_fu_689_p1;

assign buffer1_1_24_16x16_p_21_address0 = tmp_1506_cast_fu_689_p1;

assign buffer1_1_24_16x16_p_22_address0 = tmp_1506_cast_fu_689_p1;

assign buffer1_1_24_16x16_p_23_address0 = tmp_1506_cast_fu_689_p1;

assign buffer1_1_24_16x16_p_2_address0 = tmp_1506_cast_fu_689_p1;

assign buffer1_1_24_16x16_p_3_address0 = tmp_1506_cast_fu_689_p1;

assign buffer1_1_24_16x16_p_4_address0 = tmp_1506_cast_fu_689_p1;

assign buffer1_1_24_16x16_p_5_address0 = tmp_1506_cast_fu_689_p1;

assign buffer1_1_24_16x16_p_6_address0 = tmp_1506_cast_fu_689_p1;

assign buffer1_1_24_16x16_p_7_address0 = tmp_1506_cast_fu_689_p1;

assign buffer1_1_24_16x16_p_8_address0 = tmp_1506_cast_fu_689_p1;

assign buffer1_1_24_16x16_p_9_address0 = tmp_1506_cast_fu_689_p1;

assign buffer1_1_24_16x16_p_address0 = tmp_1506_cast_fu_689_p1;

assign co_30_fu_494_p2 = (6'd1 + co_reg_411);

assign exitcond4_fu_640_p2 = ((h_reg_422 == 5'd18) ? 1'b1 : 1'b0);

assign exitcond5_fu_488_p2 = ((co_reg_411 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond_fu_717_p2 = ((w_reg_433 == 5'd18) ? 1'b1 : 1'b0);

assign h_27_fu_646_p2 = (h_reg_422 + 5'd1);

assign h_cast2_cast3_fu_540_p1 = h_reg_422;

assign h_cast2_cast_fu_544_p1 = h_reg_422;

assign left_V_address0 = tmp_1504_cast_fu_669_p1;

assign output_V_address0 = output_V_addr_reg_837;

assign output_V_d0 = storemerge_reg_444;

assign p_lshr_f_cast_fu_500_p4 = {{co_reg_411[5:1]}};

assign p_shl1_cast_fu_478_p1 = tmp_510_fu_470_p3;

assign p_shl2_cast_fu_518_p1 = tmp_512_fu_510_p3;

assign p_shl3_cast_fu_530_p1 = tmp_513_fu_522_p3;

assign p_shl4_cast_fu_618_p1 = tmp_519_fu_610_p3;

assign p_shl5_cast_fu_630_p1 = tmp_520_fu_622_p3;

assign p_shl6_cast_fu_584_p3 = {{tmp_517_fu_579_p2}, {4'd0}};

assign p_shl7_cast_fu_600_p1 = tmp_1518_fu_592_p3;

assign p_shl8_cast_fu_553_p3 = {{tmp_515_fu_548_p2}, {4'd0}};

assign p_shl9_cast_fu_569_p1 = tmp_1517_fu_561_p3;

assign p_shl_cast_fu_466_p1 = tmp_s_fu_458_p3;

assign tmp_1504_cast_fu_669_p1 = tmp_522_fu_664_p2;

assign tmp_1505_cast_fu_679_p1 = tmp_523_fu_674_p2;

assign tmp_1506_cast_fu_689_p1 = tmp_524_fu_684_p2;

assign tmp_1516_fu_454_p1 = co_reg_411[0:0];

assign tmp_1517_fu_561_p3 = {{tmp_515_fu_548_p2}, {1'd0}};

assign tmp_1518_fu_592_p3 = {{tmp_517_fu_579_p2}, {1'd0}};

assign tmp_510_fu_470_p3 = {{co_reg_411}, {1'd0}};

assign tmp_511_fu_482_p2 = (p_shl_cast_fu_466_p1 + p_shl1_cast_fu_478_p1);

assign tmp_512_fu_510_p3 = {{p_lshr_f_cast_fu_500_p4}, {4'd0}};

assign tmp_513_fu_522_p3 = {{p_lshr_f_cast_fu_500_p4}, {1'd0}};

assign tmp_514_fu_534_p2 = (p_shl3_cast_fu_530_p1 + p_shl2_cast_fu_518_p1);

assign tmp_515_fu_548_p2 = (h_cast2_cast_fu_544_p1 + tmp_514_reg_804);

assign tmp_516_fu_573_p2 = (p_shl8_cast_fu_553_p3 + p_shl9_cast_fu_569_p1);

assign tmp_517_fu_579_p2 = (h_cast2_cast3_fu_540_p1 + tmp_511_reg_786);

assign tmp_518_fu_604_p2 = (p_shl6_cast_fu_584_p3 + p_shl7_cast_fu_600_p1);

assign tmp_519_fu_610_p3 = {{h_reg_422}, {4'd0}};

assign tmp_520_fu_622_p3 = {{h_reg_422}, {1'd0}};

assign tmp_521_fu_634_p2 = (p_shl4_cast_fu_618_p1 + p_shl5_cast_fu_630_p1);

assign tmp_522_fu_664_p2 = (tmp_516_reg_809 + w_cast1_cast_fu_660_p1);

assign tmp_523_fu_674_p2 = (tmp_518_reg_814 + w_cast1_cast6_fu_656_p1);

assign tmp_524_fu_684_p2 = (tmp_521_reg_819 + w_cast1_cast5_fu_652_p1);

assign tmp_s_fu_458_p3 = {{co_reg_411}, {4'd0}};

assign w_33_fu_723_p2 = (w_reg_433 + 5'd1);

assign w_cast1_cast5_fu_652_p1 = w_reg_433;

assign w_cast1_cast6_fu_656_p1 = w_reg_433;

assign w_cast1_cast_fu_660_p1 = w_reg_433;

always @ (posedge ap_clk) begin
    tmp_511_reg_786[0] <= 1'b0;
    tmp_514_reg_804[0] <= 1'b0;
    tmp_516_reg_809[0] <= 1'b0;
    tmp_518_reg_814[0] <= 1'b0;
    tmp_521_reg_819[0] <= 1'b0;
end

endmodule //shuffle_24_p
