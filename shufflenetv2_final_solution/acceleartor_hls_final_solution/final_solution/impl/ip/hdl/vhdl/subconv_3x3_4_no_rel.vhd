-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_4_no_rel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_12_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_12_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_1_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_2_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_3_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_4_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_4_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_5_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_5_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_6_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_6_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_7_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_7_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_8_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_8_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_9_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_9_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_10_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_10_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_11_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_11_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_4_no_rel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv15_AB : STD_LOGIC_VECTOR (14 downto 0) := "000000010101011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv7_C : STD_LOGIC_VECTOR (6 downto 0) := "0001100";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul_fu_408_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal next_mul_reg_1125 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_86_cast_fu_441_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_86_cast_reg_1130 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_89_cast_fu_475_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_89_cast_reg_1135 : STD_LOGIC_VECTOR (11 downto 0);
    signal co_3_fu_485_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_3_reg_1143 : STD_LOGIC_VECTOR (6 downto 0);
    signal arrayNo_cast_fu_491_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayNo_cast_reg_1148 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond9_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_cast_fu_535_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_94_cast_reg_1153 : STD_LOGIC_VECTOR (11 downto 0);
    signal bias_V_addr_reg_1158 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_90_fu_568_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_90_reg_1163 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal idx_urem_fu_592_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_addr_reg_1176 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal h_3_fu_620_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond2_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_95_fu_641_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_95_reg_1189 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m_3_fu_653_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_3_reg_1197 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_30_fu_669_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_30_reg_1202 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond3_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_97_fu_707_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_97_reg_1207 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal n_3_fu_733_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_3_reg_1220 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_101_fu_759_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_101_reg_1225 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal weight_V_load_reg_1290 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_779_p14 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_reg_1295 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_Val2_2_fu_814_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_2_reg_1300 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_103_reg_1305 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_22_fu_840_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_22_reg_1310 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal signbit_reg_1315 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_24_fu_874_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_24_reg_1322 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_880_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_1328 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_1334 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_reg_1341 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_952_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_1347 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_37_fu_968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_reg_1352 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_1357 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_996_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_1362 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_1001_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_1367 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_1028_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal isneg_reg_1377 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal result_V_fu_1058_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_1384 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_4_reg_1390 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_3_fu_1119_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal co_reg_304 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul_reg_315 : STD_LOGIC_VECTOR (14 downto 0);
    signal phi_urem_reg_326 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_reg_338 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_350 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_s_reg_362 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_374 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_21_reg_385 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_397 : STD_LOGIC_VECTOR (1 downto 0);
    signal co_cast_fu_414_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_99_cast_fu_609_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_107_cast_fu_722_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_108_cast_fu_764_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_79_fu_423_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_431_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_cast_cast_fu_419_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_80_fu_435_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_81_fu_445_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_82_fu_457_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_453_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_465_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_83_fu_469_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_84_fu_495_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_85_fu_505_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_86_fu_517_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl3_cast_fu_513_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_525_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_87_fu_529_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal h_cast9_cast_fu_539_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_88_fu_543_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_89_fu_548_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_cast_fu_552_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl6_cast_fu_560_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_urem_fu_580_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_91_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_cast8_cast_fu_600_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_92_fu_604_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal m_cast7_cast_fu_626_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_93_fu_630_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_94_fu_635_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_fu_659_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_665_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_39_cast_cast_fu_675_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_96_fu_678_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_98_fu_683_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_99_fu_695_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl8_cast_fu_687_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl9_cast_fu_699_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_cast6_cast_fu_713_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_100_fu_717_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp3_fu_739_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_745_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_31_fu_749_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_43_cast_cast_fu_755_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_2_fu_814_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_fu_814_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_fu_828_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_45_cast_fu_836_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_23_fu_853_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_fu_863_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_104_fu_866_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_106_fu_910_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_927_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_957_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i3_fu_963_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_945_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_1007_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_1011_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_24_mux_fu_1016_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_54_fu_1022_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_1040_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_1036_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_19_fu_1044_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_29_fu_1072_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_1086_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_1082_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_4_fu_1077_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_1091_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_1096_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_1103_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component ShuffleNetV2_mux_pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mux_pcA_x_U647 : component ShuffleNetV2_mux_pcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din1 => buffer1_1_96_4x4_p_V_12_q0,
        din2 => buffer1_1_96_4x4_p_V_1_q0,
        din3 => buffer1_1_96_4x4_p_V_2_q0,
        din4 => buffer1_1_96_4x4_p_V_3_q0,
        din5 => buffer1_1_96_4x4_p_V_4_q0,
        din6 => buffer1_1_96_4x4_p_V_5_q0,
        din7 => buffer1_1_96_4x4_p_V_6_q0,
        din8 => buffer1_1_96_4x4_p_V_7_q0,
        din9 => buffer1_1_96_4x4_p_V_8_q0,
        din10 => buffer1_1_96_4x4_p_V_9_q0,
        din11 => buffer1_1_96_4x4_p_V_10_q0,
        din12 => buffer1_1_96_4x4_p_V_11_q0,
        din13 => arrayNo_cast_reg_1148,
        dout => tmp_28_fu_779_p14);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_574_p2 = ap_const_lv1_1))) then 
                co_reg_304 <= co_3_reg_1143;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_304 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    h_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_479_p2 = ap_const_lv1_0))) then 
                h_reg_338 <= ap_const_lv3_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond2_fu_614_p2))) then 
                h_reg_338 <= h_3_fu_620_p2;
            end if; 
        end if;
    end process;

    m_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_614_p2))) then 
                m_reg_374 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_727_p2))) then 
                m_reg_374 <= m_3_reg_1197;
            end if; 
        end if;
    end process;

    n_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                n_reg_397 <= n_3_reg_1220;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                n_reg_397 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_21_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                p_Val2_21_reg_385 <= sum_V_fu_1028_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_21_reg_385 <= p_Val2_s_reg_362;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_614_p2))) then 
                p_Val2_s_reg_362 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_727_p2))) then 
                p_Val2_s_reg_362 <= p_Val2_21_reg_385;
            end if; 
        end if;
    end process;

    phi_mul_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_574_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_315 <= next_mul_reg_1125;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_315 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    phi_urem_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_574_p2 = ap_const_lv1_1))) then 
                phi_urem_reg_326 <= idx_urem_fu_592_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_urem_reg_326 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    w_reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond1_fu_574_p2))) then 
                w_reg_350 <= ap_const_lv3_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                w_reg_350 <= w_3_fu_1119_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_479_p2 = ap_const_lv1_0))) then
                    arrayNo_cast_reg_1148(6 downto 0) <= arrayNo_cast_fu_491_p1(6 downto 0);
                bias_V_addr_reg_1158 <= co_cast_fu_414_p1(7 - 1 downto 0);
                    tmp_94_cast_reg_1153(11 downto 1) <= tmp_94_cast_fu_535_p1(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                brmerge40_demorgan_i_reg_1357 <= brmerge40_demorgan_i_fu_979_p2;
                brmerge_i_i_i_reg_1367 <= brmerge_i_i_i_fu_1001_p2;
                p_38_i_i_reg_1347 <= p_38_i_i_fu_952_p2;
                tmp_37_reg_1352 <= tmp_37_fu_968_p2;
                underflow_reg_1362 <= underflow_fu_996_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                carry_reg_1334 <= carry_fu_894_p2;
                newsignbit_reg_1328 <= p_Val2_24_fu_874_p2(7 downto 7);
                p_Val2_22_reg_1310 <= p_Val2_22_fu_840_p2;
                p_Val2_24_reg_1322 <= p_Val2_24_fu_874_p2;
                signbit_reg_1315 <= p_Val2_22_fu_840_p2(15 downto 15);
                tmp_35_reg_1341 <= p_Val2_22_fu_840_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_3_reg_1143 <= co_3_fu_485_p2;
                next_mul_reg_1125 <= next_mul_fu_408_p2;
                tmp_86_cast_reg_1130 <= tmp_86_cast_fu_441_p1;
                    tmp_89_cast_reg_1135(11 downto 1) <= tmp_89_cast_fu_475_p1(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                isneg_reg_1377 <= p_Val2_19_fu_1044_p2(8 downto 8);
                newsignbit_4_reg_1390 <= result_V_fu_1058_p2(7 downto 7);
                result_V_reg_1384 <= result_V_fu_1058_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_3_reg_1197 <= m_3_fu_653_p2;
                tmp_95_reg_1189 <= tmp_95_fu_641_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                n_3_reg_1220 <= n_3_fu_733_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_V_addr_reg_1176 <= tmp_99_cast_fu_609_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_Val2_2_reg_1300 <= p_Val2_2_fu_814_p2;
                tmp_103_reg_1305 <= p_Val2_2_fu_814_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond_fu_727_p2))) then
                tmp_101_reg_1225 <= tmp_101_fu_759_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_28_reg_1295 <= tmp_28_fu_779_p14;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond3_fu_647_p2))) then
                tmp_30_reg_1202 <= tmp_30_fu_669_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_90_reg_1163(12 downto 1) <= tmp_90_fu_568_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    tmp_97_reg_1207(9 downto 1) <= tmp_97_fu_707_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                weight_V_load_reg_1290 <= weight_V_q0;
            end if;
        end if;
    end process;
    tmp_89_cast_reg_1135(0) <= '0';
    arrayNo_cast_reg_1148(31 downto 7) <= "0000000000000000000000000";
    tmp_94_cast_reg_1153(0) <= '0';
    tmp_90_reg_1163(0) <= '0';
    tmp_97_reg_1207(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond9_fu_479_p2, ap_CS_fsm_state3, exitcond1_fu_574_p2, ap_CS_fsm_state4, exitcond2_fu_614_p2, ap_CS_fsm_state5, exitcond3_fu_647_p2, ap_CS_fsm_state7, exitcond_fu_727_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_479_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_574_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond2_fu_614_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond3_fu_647_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_727_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_917_p2 <= "1" when (tmp_35_reg_1341 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_922_p2 <= "1" when (tmp_35_reg_1341 = ap_const_lv2_0) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond9_fu_479_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_479_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond9_fu_479_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_479_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayNo_cast_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_urem_reg_326),32));
    bias_V_address0 <= bias_V_addr_reg_1158;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_979_p2 <= (newsignbit_reg_1328 and deleted_ones_fu_945_p3);
    brmerge9_fu_1091_p2 <= (newsignbit_4_reg_1390 or isneg_not_fu_1086_p2);
    brmerge_i_i3_fu_963_p2 <= (newsignbit_reg_1328 or p_not_i_i_fu_957_p2);
    brmerge_i_i_fu_1082_p2 <= (isneg_reg_1377 xor newsignbit_4_reg_1390);
    brmerge_i_i_i_fu_1001_p2 <= (underflow_fu_996_p2 or overflow_fu_973_p2);
    buffer1_1_96_4x4_p_V_10_address0 <= tmp_108_cast_fu_764_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_10_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_10_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_11_address0 <= tmp_108_cast_fu_764_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_11_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_11_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_12_address0 <= tmp_108_cast_fu_764_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_12_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_12_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_1_address0 <= tmp_108_cast_fu_764_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_1_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_1_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_2_address0 <= tmp_108_cast_fu_764_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_2_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_2_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_3_address0 <= tmp_108_cast_fu_764_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_3_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_3_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_4_address0 <= tmp_108_cast_fu_764_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_4_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_4_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_5_address0 <= tmp_108_cast_fu_764_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_5_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_5_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_6_address0 <= tmp_108_cast_fu_764_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_6_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_6_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_7_address0 <= tmp_108_cast_fu_764_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_7_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_7_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_8_address0 <= tmp_108_cast_fu_764_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_8_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_8_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_9_address0 <= tmp_108_cast_fu_764_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_9_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_9_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    carry_fu_894_p2 <= (tmp_104_fu_866_p3 and tmp_34_fu_888_p2);
    co_3_fu_485_p2 <= std_logic_vector(unsigned(co_reg_304) + unsigned(ap_const_lv7_1));
    co_cast_cast_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_304),10));
    co_cast_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_304),32));
    deleted_ones_fu_945_p3 <= 
        p_41_i_i_fu_940_p2 when (carry_reg_1334(0) = '1') else 
        Range1_all_ones_fu_917_p2;
    deleted_zeros_fu_927_p3 <= 
        Range1_all_ones_fu_917_p2 when (carry_reg_1334(0) = '1') else 
        Range1_all_zeros_fu_922_p2;
    exitcond1_fu_574_p2 <= "1" when (h_reg_338 = ap_const_lv3_5) else "0";
    exitcond2_fu_614_p2 <= "1" when (w_reg_350 = ap_const_lv3_5) else "0";
    exitcond3_fu_647_p2 <= "1" when (m_reg_374 = ap_const_lv2_3) else "0";
    exitcond9_fu_479_p2 <= "1" when (co_reg_304 = ap_const_lv7_60) else "0";
    exitcond_fu_727_p2 <= "1" when (n_reg_397 = ap_const_lv2_3) else "0";
    h_3_fu_620_p2 <= std_logic_vector(unsigned(h_reg_338) + unsigned(ap_const_lv3_1));
    h_cast9_cast_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_338),12));
    idx_urem_fu_592_p3 <= 
        next_urem_fu_580_p2 when (tmp_91_fu_586_p2(0) = '1') else 
        ap_const_lv7_0;
    isneg_not_fu_1086_p2 <= (isneg_reg_1377 xor ap_const_lv1_1);
    m_3_fu_653_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(m_reg_374));
    m_cast7_cast_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_374),11));
    n_3_fu_733_p2 <= std_logic_vector(unsigned(n_reg_397) + unsigned(ap_const_lv2_1));
    n_cast6_cast_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_397),11));
    newsignbit_fu_880_p3 <= p_Val2_24_fu_874_p2(7 downto 7);
    next_mul_fu_408_p2 <= std_logic_vector(unsigned(phi_mul_reg_315) + unsigned(ap_const_lv15_AB));
    next_urem_fu_580_p2 <= std_logic_vector(unsigned(phi_urem_reg_326) + unsigned(ap_const_lv7_1));
    output_V_address0 <= output_V_addr_reg_1176;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= 
        result_V_mux_fu_1096_p3 when (brmerge9_fu_1091_p2(0) = '1') else 
        p_result_V_fu_1103_p3;

    output_V_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_973_p2 <= (brmerge_i_i3_fu_963_p2 and tmp_37_fu_968_p2);
    p_38_i_i_fu_952_p2 <= (carry_reg_1334 and Range1_all_ones_fu_917_p2);
    p_41_i_i_fu_940_p2 <= (signbit_reg_1315 and tmp_36_fu_934_p2);
    p_Val2_19_fu_1044_p2 <= std_logic_vector(signed(tmp_s_fu_1040_p1) + signed(tmp_fu_1036_p1));
    p_Val2_22_fu_840_p2 <= std_logic_vector(signed(tmp_45_cast_fu_836_p1) + signed(p_Val2_2_reg_1300));
    p_Val2_23_fu_853_p4 <= p_Val2_22_fu_840_p2(13 downto 6);
    p_Val2_24_fu_874_p2 <= std_logic_vector(unsigned(p_Val2_23_fu_853_p4) + unsigned(tmp_33_fu_863_p1));
    p_Val2_24_mux_fu_1016_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_1367(0) = '1') else 
        p_Val2_24_reg_1322;
    p_Val2_2_fu_814_p0 <= weight_V_load_reg_1290;
    p_Val2_2_fu_814_p1 <= tmp_28_reg_1295;
    p_Val2_2_fu_814_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_2_fu_814_p0) * signed(p_Val2_2_fu_814_p1))), 16));
    p_Val2_s_54_fu_1022_p3 <= 
        ap_const_lv8_80 when (underflow_reg_1362(0) = '1') else 
        p_Val2_24_reg_1322;
    p_not_i_i_fu_957_p2 <= (deleted_zeros_fu_927_p3 xor ap_const_lv1_1);
    p_result_V_fu_1103_p3 <= 
        ap_const_lv8_80 when (underflow_4_fu_1077_p2(0) = '1') else 
        result_V_reg_1384;
    p_shl1_cast_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_82_fu_457_p3),11));
    p_shl2_cast_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_79_fu_423_p3),10));
    p_shl3_cast_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_85_fu_505_p3),11));
    p_shl4_cast_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_86_fu_517_p3),11));
    p_shl5_cast_fu_552_p3 <= (tmp_89_fu_548_p1 & ap_const_lv3_0);
    p_shl6_cast_fu_560_p3 <= (tmp_88_fu_543_p2 & ap_const_lv1_0);
    p_shl8_cast_fu_687_p3 <= (tmp_98_fu_683_p1 & ap_const_lv3_0);
    p_shl9_cast_fu_699_p3 <= (tmp_99_fu_695_p1 & ap_const_lv1_0);
    p_shl_cast_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_81_fu_445_p3),11));
    result_V_fu_1058_p2 <= std_logic_vector(unsigned(bias_V_q0) + unsigned(p_Val2_s_reg_362));
    result_V_mux_fu_1096_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_1082_p2(0) = '1') else 
        result_V_reg_1384;
    sum_V_fu_1028_p3 <= 
        p_Val2_24_mux_fu_1016_p3 when (underflow_not_fu_1011_p2(0) = '1') else 
        p_Val2_s_54_fu_1022_p3;
        tmp2_cast_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_659_p2),3));

    tmp2_fu_659_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(m_reg_374));
        tmp3_cast_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_739_p2),3));

    tmp3_fu_739_p2 <= std_logic_vector(unsigned(n_reg_397) + unsigned(ap_const_lv2_3));
    tmp4_demorgan_fu_984_p2 <= (p_38_i_i_fu_952_p2 or brmerge40_demorgan_i_fu_979_p2);
    tmp4_fu_990_p2 <= (tmp4_demorgan_fu_984_p2 xor ap_const_lv1_1);
    tmp5_fu_1007_p2 <= (brmerge40_demorgan_i_reg_1357 or tmp_37_reg_1352);
    tmp_100_fu_717_p2 <= std_logic_vector(unsigned(tmp_95_reg_1189) + unsigned(n_cast6_cast_fu_713_p1));
    tmp_101_fu_759_p2 <= std_logic_vector(unsigned(tmp_43_cast_cast_fu_755_p1) + unsigned(tmp_97_reg_1207));
    tmp_104_fu_866_p3 <= p_Val2_22_fu_840_p2(13 downto 13);
    tmp_106_fu_910_p3 <= p_Val2_22_reg_1310(14 downto 14);
    tmp_107_cast_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_100_fu_717_p2),32));
    tmp_108_cast_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_101_reg_1225),32));
    tmp_29_fu_1072_p2 <= (newsignbit_4_reg_1390 xor ap_const_lv1_1);
    tmp_30_fu_669_p2 <= std_logic_vector(signed(tmp2_cast_fu_665_p1) + signed(h_reg_338));
    tmp_31_fu_749_p2 <= std_logic_vector(signed(tmp3_cast_fu_745_p1) + signed(w_reg_350));
    tmp_32_fu_828_p3 <= (p_Val2_21_reg_385 & ap_const_lv6_0);
    tmp_33_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_103_reg_1305),8));
    tmp_34_fu_888_p2 <= (newsignbit_fu_880_p3 xor ap_const_lv1_1);
    tmp_36_fu_934_p2 <= (tmp_106_fu_910_p3 xor ap_const_lv1_1);
    tmp_37_fu_968_p2 <= (signbit_reg_1315 xor ap_const_lv1_1);
    tmp_39_cast_cast_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_reg_1202),12));
    tmp_43_cast_cast_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_749_p2),10));
        tmp_45_cast_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_32_fu_828_p3),16));

    tmp_79_fu_423_p3 <= (co_reg_304 & ap_const_lv2_0);
    tmp_80_fu_435_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_431_p1) - unsigned(co_cast_cast_fu_419_p1));
    tmp_81_fu_445_p3 <= (co_reg_304 & ap_const_lv3_0);
    tmp_82_fu_457_p3 <= (co_reg_304 & ap_const_lv1_0);
    tmp_83_fu_469_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_453_p1) - unsigned(p_shl1_cast_fu_465_p1));
    tmp_84_fu_495_p4 <= phi_mul_reg_315(14 downto 11);
    tmp_85_fu_505_p3 <= (tmp_84_fu_495_p4 & ap_const_lv3_0);
        tmp_86_cast_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_80_fu_435_p2),11));

    tmp_86_fu_517_p3 <= (tmp_84_fu_495_p4 & ap_const_lv1_0);
    tmp_87_fu_529_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_513_p1) - unsigned(p_shl4_cast_fu_525_p1));
    tmp_88_fu_543_p2 <= std_logic_vector(unsigned(h_cast9_cast_fu_539_p1) + unsigned(tmp_89_cast_reg_1135));
        tmp_89_cast_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_83_fu_469_p2),12));

    tmp_89_fu_548_p1 <= tmp_88_fu_543_p2(10 - 1 downto 0);
    tmp_90_fu_568_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_552_p3) - unsigned(p_shl6_cast_fu_560_p3));
    tmp_91_fu_586_p2 <= "1" when (unsigned(next_urem_fu_580_p2) < unsigned(ap_const_lv7_C)) else "0";
    tmp_92_fu_604_p2 <= std_logic_vector(unsigned(tmp_90_reg_1163) + unsigned(w_cast8_cast_fu_600_p1));
    tmp_93_fu_630_p2 <= std_logic_vector(unsigned(m_cast7_cast_fu_626_p1) + unsigned(tmp_86_cast_reg_1130));
        tmp_94_cast_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_87_fu_529_p2),12));

    tmp_94_fu_635_p2 <= std_logic_vector(shift_left(unsigned(tmp_93_fu_630_p2),to_integer(unsigned('0' & ap_const_lv11_2(11-1 downto 0)))));
    tmp_95_fu_641_p2 <= std_logic_vector(unsigned(tmp_94_fu_635_p2) - unsigned(tmp_93_fu_630_p2));
    tmp_96_fu_678_p2 <= std_logic_vector(unsigned(tmp_39_cast_cast_fu_675_p1) + unsigned(tmp_94_cast_reg_1153));
    tmp_97_fu_707_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_687_p3) - unsigned(p_shl9_cast_fu_699_p3));
    tmp_98_fu_683_p1 <= tmp_96_fu_678_p2(7 - 1 downto 0);
    tmp_99_cast_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_92_fu_604_p2),32));
    tmp_99_fu_695_p1 <= tmp_96_fu_678_p2(9 - 1 downto 0);
        tmp_fu_1036_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_362),9));

        tmp_s_fu_1040_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    underflow_4_fu_1077_p2 <= (isneg_reg_1377 and tmp_29_fu_1072_p2);
    underflow_fu_996_p2 <= (signbit_reg_1315 and tmp4_fu_990_p2);
    underflow_not_fu_1011_p2 <= (tmp5_fu_1007_p2 or p_38_i_i_reg_1347);
    w_3_fu_1119_p2 <= std_logic_vector(unsigned(w_reg_350) + unsigned(ap_const_lv3_1));
    w_cast8_cast_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_350),13));
    weight_V_address0 <= tmp_107_cast_fu_722_p1(10 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
