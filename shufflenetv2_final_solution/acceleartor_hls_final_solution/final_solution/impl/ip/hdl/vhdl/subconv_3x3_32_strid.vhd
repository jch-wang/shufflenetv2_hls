-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_32_strid is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    conv1_output_p_V_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1_output_p_V_0_ce0 : OUT STD_LOGIC;
    conv1_output_p_V_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    conv1_output_p_V_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1_output_p_V_1_ce0 : OUT STD_LOGIC;
    conv1_output_p_V_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    conv1_output_p_V_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1_output_p_V_2_ce0 : OUT STD_LOGIC;
    conv1_output_p_V_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    conv1_output_p_V_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1_output_p_V_3_ce0 : OUT STD_LOGIC;
    conv1_output_p_V_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    conv1_output_p_V_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1_output_p_V_4_ce0 : OUT STD_LOGIC;
    conv1_output_p_V_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    conv1_output_p_V_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1_output_p_V_5_ce0 : OUT STD_LOGIC;
    conv1_output_p_V_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    conv1_output_p_V_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1_output_p_V_6_ce0 : OUT STD_LOGIC;
    conv1_output_p_V_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    conv1_output_p_V_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1_output_p_V_7_ce0 : OUT STD_LOGIC;
    conv1_output_p_V_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    conv1_output_p_V_8_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1_output_p_V_8_ce0 : OUT STD_LOGIC;
    conv1_output_p_V_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    conv1_output_p_V_9_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1_output_p_V_9_ce0 : OUT STD_LOGIC;
    conv1_output_p_V_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    conv1_output_p_V_10_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1_output_p_V_10_ce0 : OUT STD_LOGIC;
    conv1_output_p_V_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    conv1_output_p_V_11_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1_output_p_V_11_ce0 : OUT STD_LOGIC;
    conv1_output_p_V_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_32_strid is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_2B : STD_LOGIC_VECTOR (10 downto 0) := "00000101011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul_fu_402_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_mul_reg_1127 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_128_cast_fu_435_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_128_cast_reg_1132 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_123_fu_463_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_123_reg_1137 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_4_fu_475_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_4_reg_1145 : STD_LOGIC_VECTOR (4 downto 0);
    signal arrayNo_cast_fu_501_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayNo_cast_reg_1150 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond4_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_129_fu_539_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_129_reg_1155 : STD_LOGIC_VECTOR (10 downto 0);
    signal bias_V_addr_reg_1160 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_132_fu_574_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_132_reg_1165 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_586_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_1173 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond5_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_addr_reg_1178 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_s_fu_614_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_reg_1186 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond6_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_4_fu_622_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_136_fu_643_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_136_reg_1196 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m_4_fu_655_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_4_reg_1204 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_138_fu_709_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_138_reg_1209 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond7_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_4_fu_715_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_4_reg_1214 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal n_4_fu_741_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_4_reg_1227 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_load_reg_1292 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_38_fu_787_p14 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_reg_1297 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_3_fu_822_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_3_reg_1302 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_144_reg_1307 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_36_fu_848_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_36_reg_1312 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal signbit_reg_1317 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_38_fu_882_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_38_reg_1324 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_888_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_1330 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_1336 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_reg_1343 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_1349 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_50_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_reg_1354 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_987_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_1359 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_1004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_1364 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_1009_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_1369 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_1036_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal isneg_reg_1379 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal result_V_fu_1066_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_1386 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_6_reg_1392 : STD_LOGIC_VECTOR (0 downto 0);
    signal co_reg_310 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_321 : STD_LOGIC_VECTOR (10 downto 0);
    signal h_reg_332 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_344 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_Val2_s_reg_356 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_368 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_35_reg_379 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_391 : STD_LOGIC_VECTOR (1 downto 0);
    signal co_cast_fu_408_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_143_cast_fu_603_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_151_cast_fu_730_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_152_cast_fu_771_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_119_fu_417_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_fu_425_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal co_cast_cast_fu_413_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_120_fu_429_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_121_fu_439_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_122_fu_451_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_459_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_447_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_124_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_125_fu_487_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal arrayNo_fu_493_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_126_fu_505_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_127_fu_515_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_128_fu_527_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl3_cast_fu_523_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_535_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal h_cast9_cast_fu_545_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_130_fu_549_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_131_fu_562_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_554_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl6_cast_fu_570_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_cast8_cast_fu_594_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_133_fu_598_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal m_cast7_cast_fu_628_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_134_fu_632_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_135_fu_637_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_661_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_667_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_42_fu_671_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_56_cast_cast_fu_676_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_137_fu_680_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_139_fu_685_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_140_fu_697_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl9_cast_fu_705_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl8_cast_fu_689_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal n_cast6_cast_fu_721_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_141_fu_725_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp3_fu_747_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_753_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_43_fu_757_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_60_cast_cast_fu_762_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_142_fu_766_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_3_fu_822_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_3_fu_822_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_44_fu_836_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_62_cast_fu_844_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_37_fu_861_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_46_fu_871_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_145_fu_874_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_147_fu_918_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_942_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_935_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i4_fu_971_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_953_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_981_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_1015_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_1019_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_32_mux_fu_1024_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_64_fu_1030_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_40_fu_1048_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_39_fu_1044_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_33_fu_1052_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_41_fu_1080_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_1094_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_6_fu_1085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_1099_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_1104_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_1111_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component ShuffleNetV2_mux_pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mux_pcA_x_U194 : component ShuffleNetV2_mux_pcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din1 => conv1_output_p_V_0_q0,
        din2 => conv1_output_p_V_1_q0,
        din3 => conv1_output_p_V_2_q0,
        din4 => conv1_output_p_V_3_q0,
        din5 => conv1_output_p_V_4_q0,
        din6 => conv1_output_p_V_5_q0,
        din7 => conv1_output_p_V_6_q0,
        din8 => conv1_output_p_V_7_q0,
        din9 => conv1_output_p_V_8_q0,
        din10 => conv1_output_p_V_9_q0,
        din11 => conv1_output_p_V_10_q0,
        din12 => conv1_output_p_V_11_q0,
        din13 => arrayNo_cast_reg_1150,
        dout => tmp_38_fu_787_p14);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond5_fu_580_p2 = ap_const_lv1_1))) then 
                co_reg_310 <= co_4_reg_1145;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_310 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_469_p2 = ap_const_lv1_0))) then 
                h_reg_332 <= ap_const_lv5_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_608_p2 = ap_const_lv1_1))) then 
                h_reg_332 <= h_4_fu_622_p2;
            end if; 
        end if;
    end process;

    m_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_735_p2))) then 
                m_reg_368 <= m_4_reg_1204;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_608_p2))) then 
                m_reg_368 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                n_reg_391 <= n_4_reg_1227;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond7_fu_649_p2))) then 
                n_reg_391 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_35_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_Val2_35_reg_379 <= sum_V_fu_1036_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond7_fu_649_p2))) then 
                p_Val2_35_reg_379 <= p_Val2_s_reg_356;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_735_p2))) then 
                p_Val2_s_reg_356 <= p_Val2_35_reg_379;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_608_p2))) then 
                p_Val2_s_reg_356 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond5_fu_580_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_321 <= next_mul_reg_1127;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_321 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    w_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond5_fu_580_p2))) then 
                w_reg_344 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                w_reg_344 <= w_4_reg_1214;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_469_p2 = ap_const_lv1_0))) then
                    arrayNo_cast_reg_1150(4 downto 0) <= arrayNo_cast_fu_501_p1(4 downto 0);
                bias_V_addr_reg_1160 <= co_cast_fu_408_p1(5 - 1 downto 0);
                    tmp_129_reg_1155(10 downto 1) <= tmp_129_fu_539_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                brmerge40_demorgan_i_reg_1359 <= brmerge40_demorgan_i_fu_987_p2;
                brmerge_i_i_i_reg_1369 <= brmerge_i_i_i_fu_1009_p2;
                p_38_i_i_reg_1349 <= p_38_i_i_fu_960_p2;
                tmp_50_reg_1354 <= tmp_50_fu_976_p2;
                underflow_reg_1364 <= underflow_fu_1004_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                carry_reg_1336 <= carry_fu_902_p2;
                newsignbit_reg_1330 <= p_Val2_38_fu_882_p2(7 downto 7);
                p_Val2_36_reg_1312 <= p_Val2_36_fu_848_p2;
                p_Val2_38_reg_1324 <= p_Val2_38_fu_882_p2;
                signbit_reg_1317 <= p_Val2_36_fu_848_p2(15 downto 15);
                tmp_49_reg_1343 <= p_Val2_36_fu_848_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_4_reg_1145 <= co_4_fu_475_p2;
                next_mul_reg_1127 <= next_mul_fu_402_p2;
                    tmp_123_reg_1137(9 downto 1) <= tmp_123_fu_463_p2(9 downto 1);
                tmp_128_cast_reg_1132 <= tmp_128_cast_fu_435_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                isneg_reg_1379 <= p_Val2_33_fu_1052_p2(8 downto 8);
                newsignbit_6_reg_1392 <= result_V_fu_1066_p2(7 downto 7);
                result_V_reg_1386 <= result_V_fu_1066_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_4_reg_1204 <= m_4_fu_655_p2;
                tmp_136_reg_1196 <= tmp_136_fu_643_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_4_reg_1227 <= n_4_fu_741_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_V_addr_reg_1178 <= tmp_143_cast_fu_603_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_3_reg_1302 <= p_Val2_3_fu_822_p2;
                tmp_144_reg_1307 <= p_Val2_3_fu_822_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_132_reg_1165(13 downto 1) <= tmp_132_fu_574_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond7_fu_649_p2))) then
                    tmp_138_reg_1209(12 downto 1) <= tmp_138_fu_709_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_38_reg_1297 <= tmp_38_fu_787_p14;
                weight_V_load_reg_1292 <= weight_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond5_fu_580_p2))) then
                    tmp_reg_1173(5 downto 1) <= tmp_fu_586_p3(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_608_p2))) then
                    tmp_s_reg_1186(5 downto 1) <= tmp_s_fu_614_p3(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond7_fu_649_p2))) then
                w_4_reg_1214 <= w_4_fu_715_p2;
            end if;
        end if;
    end process;
    tmp_123_reg_1137(0) <= '0';
    arrayNo_cast_reg_1150(31 downto 5) <= "000000000000000000000000000";
    tmp_129_reg_1155(0) <= '0';
    tmp_132_reg_1165(0) <= '0';
    tmp_reg_1173(0) <= '0';
    tmp_s_reg_1186(0) <= '0';
    tmp_138_reg_1209(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_469_p2, ap_CS_fsm_state3, exitcond5_fu_580_p2, ap_CS_fsm_state4, exitcond6_fu_608_p2, ap_CS_fsm_state5, exitcond7_fu_649_p2, ap_CS_fsm_state6, exitcond_fu_735_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_469_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond5_fu_580_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_608_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond7_fu_649_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_735_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_925_p2 <= "1" when (tmp_49_reg_1343 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_930_p2 <= "1" when (tmp_49_reg_1343 = ap_const_lv2_0) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_469_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_469_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_469_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_469_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayNo_cast_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayNo_fu_493_p3),32));
    arrayNo_fu_493_p3 <= 
        co_reg_310 when (tmp_124_fu_481_p2(0) = '1') else 
        tmp_125_fu_487_p2;
    bias_V_address0 <= bias_V_addr_reg_1160;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_987_p2 <= (newsignbit_reg_1330 and deleted_ones_fu_953_p3);
    brmerge9_fu_1099_p2 <= (newsignbit_6_reg_1392 or isneg_not_fu_1094_p2);
    brmerge_i_i4_fu_971_p2 <= (newsignbit_reg_1330 or p_not_i_i_fu_965_p2);
    brmerge_i_i_fu_1090_p2 <= (isneg_reg_1379 xor newsignbit_6_reg_1392);
    brmerge_i_i_i_fu_1009_p2 <= (underflow_fu_1004_p2 or overflow_fu_981_p2);
    carry_fu_902_p2 <= (tmp_145_fu_874_p3 and tmp_47_fu_896_p2);
    co_4_fu_475_p2 <= std_logic_vector(unsigned(co_reg_310) + unsigned(ap_const_lv5_1));
    co_cast_cast_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_310),8));
    co_cast_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_310),32));
    conv1_output_p_V_0_address0 <= tmp_152_cast_fu_771_p1(12 - 1 downto 0);

    conv1_output_p_V_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv1_output_p_V_0_ce0 <= ap_const_logic_1;
        else 
            conv1_output_p_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_output_p_V_10_address0 <= tmp_152_cast_fu_771_p1(12 - 1 downto 0);

    conv1_output_p_V_10_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv1_output_p_V_10_ce0 <= ap_const_logic_1;
        else 
            conv1_output_p_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_output_p_V_11_address0 <= tmp_152_cast_fu_771_p1(12 - 1 downto 0);

    conv1_output_p_V_11_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv1_output_p_V_11_ce0 <= ap_const_logic_1;
        else 
            conv1_output_p_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_output_p_V_1_address0 <= tmp_152_cast_fu_771_p1(12 - 1 downto 0);

    conv1_output_p_V_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv1_output_p_V_1_ce0 <= ap_const_logic_1;
        else 
            conv1_output_p_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_output_p_V_2_address0 <= tmp_152_cast_fu_771_p1(12 - 1 downto 0);

    conv1_output_p_V_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv1_output_p_V_2_ce0 <= ap_const_logic_1;
        else 
            conv1_output_p_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_output_p_V_3_address0 <= tmp_152_cast_fu_771_p1(12 - 1 downto 0);

    conv1_output_p_V_3_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv1_output_p_V_3_ce0 <= ap_const_logic_1;
        else 
            conv1_output_p_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_output_p_V_4_address0 <= tmp_152_cast_fu_771_p1(12 - 1 downto 0);

    conv1_output_p_V_4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv1_output_p_V_4_ce0 <= ap_const_logic_1;
        else 
            conv1_output_p_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_output_p_V_5_address0 <= tmp_152_cast_fu_771_p1(12 - 1 downto 0);

    conv1_output_p_V_5_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv1_output_p_V_5_ce0 <= ap_const_logic_1;
        else 
            conv1_output_p_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_output_p_V_6_address0 <= tmp_152_cast_fu_771_p1(12 - 1 downto 0);

    conv1_output_p_V_6_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv1_output_p_V_6_ce0 <= ap_const_logic_1;
        else 
            conv1_output_p_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_output_p_V_7_address0 <= tmp_152_cast_fu_771_p1(12 - 1 downto 0);

    conv1_output_p_V_7_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv1_output_p_V_7_ce0 <= ap_const_logic_1;
        else 
            conv1_output_p_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_output_p_V_8_address0 <= tmp_152_cast_fu_771_p1(12 - 1 downto 0);

    conv1_output_p_V_8_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv1_output_p_V_8_ce0 <= ap_const_logic_1;
        else 
            conv1_output_p_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv1_output_p_V_9_address0 <= tmp_152_cast_fu_771_p1(12 - 1 downto 0);

    conv1_output_p_V_9_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv1_output_p_V_9_ce0 <= ap_const_logic_1;
        else 
            conv1_output_p_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    deleted_ones_fu_953_p3 <= 
        p_41_i_i_fu_948_p2 when (carry_reg_1336(0) = '1') else 
        Range1_all_ones_fu_925_p2;
    deleted_zeros_fu_935_p3 <= 
        Range1_all_ones_fu_925_p2 when (carry_reg_1336(0) = '1') else 
        Range1_all_zeros_fu_930_p2;
    exitcond4_fu_469_p2 <= "1" when (co_reg_310 = ap_const_lv5_18) else "0";
    exitcond5_fu_580_p2 <= "1" when (h_reg_332 = ap_const_lv5_11) else "0";
    exitcond6_fu_608_p2 <= "1" when (w_reg_344 = ap_const_lv5_11) else "0";
    exitcond7_fu_649_p2 <= "1" when (m_reg_368 = ap_const_lv2_3) else "0";
    exitcond_fu_735_p2 <= "1" when (n_reg_391 = ap_const_lv2_3) else "0";
    h_4_fu_622_p2 <= std_logic_vector(unsigned(h_reg_332) + unsigned(ap_const_lv5_1));
    h_cast9_cast_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_332),10));
    isneg_not_fu_1094_p2 <= (isneg_reg_1379 xor ap_const_lv1_1);
    m_4_fu_655_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(m_reg_368));
    m_cast7_cast_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_368),9));
    n_4_fu_741_p2 <= std_logic_vector(unsigned(n_reg_391) + unsigned(ap_const_lv2_1));
    n_cast6_cast_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_391),9));
    newsignbit_fu_888_p3 <= p_Val2_38_fu_882_p2(7 downto 7);
    next_mul_fu_402_p2 <= std_logic_vector(unsigned(phi_mul_reg_321) + unsigned(ap_const_lv11_2B));
    output_V_address0 <= output_V_addr_reg_1178;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= 
        result_V_mux_fu_1104_p3 when (brmerge9_fu_1099_p2(0) = '1') else 
        p_result_V_fu_1111_p3;

    output_V_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_981_p2 <= (brmerge_i_i4_fu_971_p2 and tmp_50_fu_976_p2);
    p_38_i_i_fu_960_p2 <= (carry_reg_1336 and Range1_all_ones_fu_925_p2);
    p_41_i_i_fu_948_p2 <= (signbit_reg_1317 and tmp_48_fu_942_p2);
    p_Val2_32_mux_fu_1024_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_1369(0) = '1') else 
        p_Val2_38_reg_1324;
    p_Val2_33_fu_1052_p2 <= std_logic_vector(signed(tmp_40_fu_1048_p1) + signed(tmp_39_fu_1044_p1));
    p_Val2_36_fu_848_p2 <= std_logic_vector(signed(tmp_62_cast_fu_844_p1) + signed(p_Val2_3_reg_1302));
    p_Val2_37_fu_861_p4 <= p_Val2_36_fu_848_p2(13 downto 6);
    p_Val2_38_fu_882_p2 <= std_logic_vector(unsigned(p_Val2_37_fu_861_p4) + unsigned(tmp_46_fu_871_p1));
    p_Val2_3_fu_822_p0 <= weight_V_load_reg_1292;
    p_Val2_3_fu_822_p1 <= tmp_38_reg_1297;
    p_Val2_3_fu_822_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_3_fu_822_p0) * signed(p_Val2_3_fu_822_p1))), 16));
    p_Val2_s_64_fu_1030_p3 <= 
        ap_const_lv8_80 when (underflow_reg_1364(0) = '1') else 
        p_Val2_38_reg_1324;
    p_not_i_i_fu_965_p2 <= (deleted_zeros_fu_935_p3 xor ap_const_lv1_1);
    p_result_V_fu_1111_p3 <= 
        ap_const_lv8_80 when (underflow_6_fu_1085_p2(0) = '1') else 
        result_V_reg_1386;
    p_shl1_cast_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_122_fu_451_p3),10));
    p_shl2_cast_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_119_fu_417_p3),8));
    p_shl3_cast_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_127_fu_515_p3),11));
    p_shl4_cast_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_128_fu_527_p3),11));
    p_shl5_cast_fu_554_p3 <= (tmp_130_fu_549_p2 & ap_const_lv4_0);
    p_shl6_cast_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_131_fu_562_p3),14));
    p_shl8_cast_fu_689_p3 <= (tmp_139_fu_685_p1 & ap_const_lv5_0);
    p_shl9_cast_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_140_fu_697_p3),13));
    p_shl_cast_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_121_fu_439_p3),10));
    result_V_fu_1066_p2 <= std_logic_vector(unsigned(bias_V_q0) + unsigned(p_Val2_s_reg_356));
    result_V_mux_fu_1104_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_1090_p2(0) = '1') else 
        result_V_reg_1386;
    sum_V_fu_1036_p3 <= 
        p_Val2_32_mux_fu_1024_p3 when (underflow_not_fu_1019_p2(0) = '1') else 
        p_Val2_s_64_fu_1030_p3;
        tmp2_cast_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_661_p2),6));

    tmp2_fu_661_p2 <= (m_reg_368 xor ap_const_lv2_2);
        tmp3_cast_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_747_p2),6));

    tmp3_fu_747_p2 <= (n_reg_391 xor ap_const_lv2_2);
    tmp4_demorgan_fu_992_p2 <= (p_38_i_i_fu_960_p2 or brmerge40_demorgan_i_fu_987_p2);
    tmp4_fu_998_p2 <= (tmp4_demorgan_fu_992_p2 xor ap_const_lv1_1);
    tmp5_fu_1015_p2 <= (brmerge40_demorgan_i_reg_1359 or tmp_50_reg_1354);
    tmp_119_fu_417_p3 <= (co_reg_310 & ap_const_lv2_0);
    tmp_120_fu_429_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_425_p1) - unsigned(co_cast_cast_fu_413_p1));
    tmp_121_fu_439_p3 <= (co_reg_310 & ap_const_lv4_0);
    tmp_122_fu_451_p3 <= (co_reg_310 & ap_const_lv1_0);
    tmp_123_fu_463_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_459_p1) + unsigned(p_shl_cast_fu_447_p1));
    tmp_124_fu_481_p2 <= "1" when (unsigned(co_reg_310) < unsigned(ap_const_lv5_C)) else "0";
    tmp_125_fu_487_p2 <= std_logic_vector(unsigned(co_reg_310) + unsigned(ap_const_lv5_14));
    tmp_126_fu_505_p4 <= phi_mul_reg_321(10 downto 9);
    tmp_127_fu_515_p3 <= (tmp_126_fu_505_p4 & ap_const_lv5_0);
        tmp_128_cast_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_120_fu_429_p2),9));

    tmp_128_fu_527_p3 <= (tmp_126_fu_505_p4 & ap_const_lv1_0);
    tmp_129_fu_539_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_523_p1) + unsigned(p_shl4_cast_fu_535_p1));
    tmp_130_fu_549_p2 <= std_logic_vector(unsigned(h_cast9_cast_fu_545_p1) + unsigned(tmp_123_reg_1137));
    tmp_131_fu_562_p3 <= (tmp_130_fu_549_p2 & ap_const_lv1_0);
    tmp_132_fu_574_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_554_p3) + unsigned(p_shl6_cast_fu_570_p1));
    tmp_133_fu_598_p2 <= std_logic_vector(unsigned(tmp_132_reg_1165) + unsigned(w_cast8_cast_fu_594_p1));
    tmp_134_fu_632_p2 <= std_logic_vector(unsigned(m_cast7_cast_fu_628_p1) + unsigned(tmp_128_cast_reg_1132));
    tmp_135_fu_637_p2 <= std_logic_vector(shift_left(unsigned(tmp_134_fu_632_p2),to_integer(unsigned('0' & ap_const_lv9_2(9-1 downto 0)))));
    tmp_136_fu_643_p2 <= std_logic_vector(unsigned(tmp_135_fu_637_p2) - unsigned(tmp_134_fu_632_p2));
    tmp_137_fu_680_p2 <= std_logic_vector(unsigned(tmp_129_reg_1155) + unsigned(tmp_56_cast_cast_fu_676_p1));
    tmp_138_fu_709_p2 <= std_logic_vector(unsigned(p_shl9_cast_fu_705_p1) + unsigned(p_shl8_cast_fu_689_p3));
    tmp_139_fu_685_p1 <= tmp_137_fu_680_p2(8 - 1 downto 0);
    tmp_140_fu_697_p3 <= (tmp_137_fu_680_p2 & ap_const_lv1_0);
    tmp_141_fu_725_p2 <= std_logic_vector(unsigned(tmp_136_reg_1196) + unsigned(n_cast6_cast_fu_721_p1));
    tmp_142_fu_766_p2 <= std_logic_vector(unsigned(tmp_60_cast_cast_fu_762_p1) + unsigned(tmp_138_reg_1209));
    tmp_143_cast_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_133_fu_598_p2),32));
    tmp_145_fu_874_p3 <= p_Val2_36_fu_848_p2(13 downto 13);
    tmp_147_fu_918_p3 <= p_Val2_36_reg_1312(14 downto 14);
    tmp_151_cast_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_141_fu_725_p2),32));
    tmp_152_cast_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_142_fu_766_p2),32));
        tmp_39_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_356),9));

        tmp_40_fu_1048_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    tmp_41_fu_1080_p2 <= (newsignbit_6_reg_1392 xor ap_const_lv1_1);
    tmp_42_fu_671_p2 <= std_logic_vector(unsigned(tmp_reg_1173) + unsigned(tmp2_cast_fu_667_p1));
    tmp_43_fu_757_p2 <= std_logic_vector(signed(tmp3_cast_fu_753_p1) + signed(tmp_s_reg_1186));
    tmp_44_fu_836_p3 <= (p_Val2_35_reg_379 & ap_const_lv6_0);
    tmp_46_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_144_reg_1307),8));
    tmp_47_fu_896_p2 <= (newsignbit_fu_888_p3 xor ap_const_lv1_1);
    tmp_48_fu_942_p2 <= (tmp_147_fu_918_p3 xor ap_const_lv1_1);
    tmp_50_fu_976_p2 <= (signbit_reg_1317 xor ap_const_lv1_1);
    tmp_56_cast_cast_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_671_p2),11));
    tmp_60_cast_cast_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_fu_757_p2),13));
        tmp_62_cast_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_44_fu_836_p3),16));

    tmp_fu_586_p3 <= (h_reg_332 & ap_const_lv1_0);
    tmp_s_fu_614_p3 <= (w_reg_344 & ap_const_lv1_0);
    underflow_6_fu_1085_p2 <= (isneg_reg_1379 and tmp_41_fu_1080_p2);
    underflow_fu_1004_p2 <= (signbit_reg_1317 and tmp4_fu_998_p2);
    underflow_not_fu_1019_p2 <= (tmp5_fu_1015_p2 or p_38_i_i_reg_1349);
    w_4_fu_715_p2 <= std_logic_vector(unsigned(w_reg_344) + unsigned(ap_const_lv5_1));
    w_cast8_cast_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_344),14));
    weight_V_address0 <= tmp_151_cast_fu_730_p1(8 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
