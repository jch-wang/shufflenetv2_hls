-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shuffle_96_r_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_12_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_12_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_1_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_2_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_3_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_4_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_4_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_5_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_5_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_6_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_6_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_7_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_7_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_8_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_8_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_9_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_9_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_10_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_10_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_11_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_11_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of shuffle_96_r_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_C : STD_LOGIC_VECTOR (6 downto 0) := "0001100";
    constant ap_const_lv16_AB : STD_LOGIC_VECTOR (15 downto 0) := "0000000010101011";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_1466_fu_270_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1466_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1347_cast_fu_304_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1347_cast_reg_570 : STD_LOGIC_VECTOR (12 downto 0);
    signal co_23_fu_314_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal co_23_reg_578 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_lshr_f_cast_fu_320_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond3_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1467_reg_588 : STD_LOGIC_VECTOR (4 downto 0);
    signal arrayNo_cast_fu_356_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal arrayNo_cast_reg_594 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_1352_cast_fu_396_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1352_cast_reg_599 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_429_fu_433_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_429_reg_604 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_431_fu_468_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_431_reg_609 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_20_fu_480_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_20_reg_617 : STD_LOGIC_VECTOR (2 downto 0);
    signal output_V_addr_reg_622 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal w_26_fu_531_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_26_reg_690 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_537_p14 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_695 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal co_reg_237 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond2_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_reg_248 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_reg_259 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_1361_cast_fu_499_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1362_cast_fu_509_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_274_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_423_fu_286_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_282_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_cast_fu_294_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_424_fu_298_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_330_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_330_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_fu_340_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_fu_340_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_330_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1468_fu_360_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_425_fu_367_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1469_fu_375_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_426_fu_382_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_fu_371_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_386_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_427_fu_390_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal h_cast2_cast_fu_404_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_428_fu_408_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1470_fu_413_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_fu_417_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl7_cast_fu_425_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal h_cast2_cast9_fu_400_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_430_fu_439_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1471_fu_444_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1472_fu_456_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_cast_fu_448_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_cast_fu_460_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal w_cast1_cast_fu_490_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_432_fu_494_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_cast1_cast8_fu_486_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_433_fu_504_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_330_ap_start : STD_LOGIC;
    signal grp_fu_330_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_fu_340_p00 : STD_LOGIC_VECTOR (15 downto 0);

    component ShuffleNetV2_uremxdS IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component ShuffleNetV2_mux_yd2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_uremxdS_x_U632 : component ShuffleNetV2_uremxdS
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 5,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_330_ap_start,
        done => grp_fu_330_ap_done,
        din0 => grp_fu_330_p0,
        din1 => grp_fu_330_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_330_p2);

    ShuffleNetV2_mux_yd2_x_U633 : component ShuffleNetV2_mux_yd2
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 9,
        dout_WIDTH => 8)
    port map (
        din1 => buffer1_1_96_4x4_p_V_12_q0,
        din2 => buffer1_1_96_4x4_p_V_1_q0,
        din3 => buffer1_1_96_4x4_p_V_2_q0,
        din4 => buffer1_1_96_4x4_p_V_3_q0,
        din5 => buffer1_1_96_4x4_p_V_4_q0,
        din6 => buffer1_1_96_4x4_p_V_5_q0,
        din7 => buffer1_1_96_4x4_p_V_6_q0,
        din8 => buffer1_1_96_4x4_p_V_7_q0,
        din9 => buffer1_1_96_4x4_p_V_8_q0,
        din10 => buffer1_1_96_4x4_p_V_9_q0,
        din11 => buffer1_1_96_4x4_p_V_10_q0,
        din12 => buffer1_1_96_4x4_p_V_11_q0,
        din13 => arrayNo_cast_reg_594,
        dout => tmp_fu_537_p14);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond2_fu_474_p2 = ap_const_lv1_1))) then 
                co_reg_237 <= co_23_reg_578;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_237 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    h_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = exitcond_fu_525_p2))) then 
                h_reg_248 <= h_20_reg_617;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                h_reg_248 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    w_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = exitcond2_fu_474_p2))) then 
                w_reg_259 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                w_reg_259 <= w_26_reg_690;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    arrayNo_cast_reg_594(6 downto 0) <= arrayNo_cast_fu_356_p1(6 downto 0);
                    tmp_1352_cast_reg_599(11 downto 1) <= tmp_1352_cast_fu_396_p1(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_23_reg_578 <= co_23_fu_314_p2;
                    tmp_1347_cast_reg_570(12 downto 1) <= tmp_1347_cast_fu_304_p1(12 downto 1);
                tmp_1466_reg_566 <= tmp_1466_fu_270_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                h_20_reg_617 <= h_20_fu_480_p2;
                    tmp_429_reg_604(13 downto 1) <= tmp_429_fu_433_p2(13 downto 1);
                    tmp_431_reg_609(9 downto 1) <= tmp_431_fu_468_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                output_V_addr_reg_622 <= tmp_1361_cast_fu_499_p1(13 - 1 downto 0);
                w_26_reg_690 <= w_26_fu_531_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_308_p2 = ap_const_lv1_0))) then
                tmp_1467_reg_588 <= mul_fu_340_p2(15 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_reg_695 <= tmp_fu_537_p14;
            end if;
        end if;
    end process;
    tmp_1347_cast_reg_570(0) <= '0';
    arrayNo_cast_reg_594(8 downto 7) <= "00";
    tmp_1352_cast_reg_599(0) <= '0';
    tmp_429_reg_604(0) <= '0';
    tmp_431_reg_609(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_1466_reg_566, ap_CS_fsm_state2, exitcond3_fu_308_p2, ap_CS_fsm_state13, ap_CS_fsm_state14, exitcond2_fu_474_p2, exitcond_fu_525_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_308_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond2_fu_474_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = exitcond_fu_525_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_0 = exitcond_fu_525_p2) and (tmp_1466_reg_566 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_308_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_308_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_308_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_308_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayNo_cast_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_330_p2),9));
    buffer1_1_96_4x4_p_V_10_address0 <= tmp_1362_cast_fu_509_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_10_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_10_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_11_address0 <= tmp_1362_cast_fu_509_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_11_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_11_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_12_address0 <= tmp_1362_cast_fu_509_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_12_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_12_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_1_address0 <= tmp_1362_cast_fu_509_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_1_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_1_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_2_address0 <= tmp_1362_cast_fu_509_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_2_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_2_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_3_address0 <= tmp_1362_cast_fu_509_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_3_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_3_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_4_address0 <= tmp_1362_cast_fu_509_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_4_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_4_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_5_address0 <= tmp_1362_cast_fu_509_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_5_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_5_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_6_address0 <= tmp_1362_cast_fu_509_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_6_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_6_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_7_address0 <= tmp_1362_cast_fu_509_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_7_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_7_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_8_address0 <= tmp_1362_cast_fu_509_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_8_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_8_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_9_address0 <= tmp_1362_cast_fu_509_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_9_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_9_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_23_fu_314_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(co_reg_237));
    exitcond2_fu_474_p2 <= "1" when (h_reg_248 = ap_const_lv3_6) else "0";
    exitcond3_fu_308_p2 <= "1" when (co_reg_237 = ap_const_lv8_C0) else "0";
    exitcond_fu_525_p2 <= "1" when (w_reg_259 = ap_const_lv3_6) else "0";

    grp_fu_330_ap_start_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_308_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_308_p2 = ap_const_lv1_0))) then 
            grp_fu_330_ap_start <= ap_const_logic_1;
        else 
            grp_fu_330_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_330_p0 <= co_reg_237(7 downto 1);
    grp_fu_330_p1 <= ap_const_lv7_C(5 - 1 downto 0);
    h_20_fu_480_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(h_reg_248));
    h_cast2_cast9_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_248),12));
    h_cast2_cast_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_248),13));
    mul_fu_340_p0 <= mul_fu_340_p00(7 - 1 downto 0);
    mul_fu_340_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_cast_fu_320_p4),16));
    mul_fu_340_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_fu_340_p0) * unsigned(ap_const_lv16_AB), 16));
    output_V_address0 <= output_V_addr_reg_622;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= tmp_reg_695;

    output_V_we0_assign_proc : process(tmp_1466_reg_566, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (tmp_1466_reg_566 = ap_const_lv1_1))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_lshr_f_cast_fu_320_p4 <= co_reg_237(7 downto 1);
    p_shl1_cast_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_423_fu_286_p3),12));
    p_shl2_cast_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_425_fu_367_p1),11));
    p_shl3_cast_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_426_fu_382_p1),11));
    p_shl4_cast_fu_448_p3 <= (tmp_1471_fu_444_p1 & ap_const_lv3_0);
    p_shl5_cast_fu_460_p3 <= (tmp_1472_fu_456_p1 & ap_const_lv1_0);
    p_shl6_cast_fu_417_p3 <= (tmp_1470_fu_413_p1 & ap_const_lv3_0);
    p_shl7_cast_fu_425_p3 <= (tmp_428_fu_408_p2 & ap_const_lv1_0);
    p_shl_cast_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_274_p3),12));
        tmp_1347_cast_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_424_fu_298_p2),13));

        tmp_1352_cast_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_427_fu_390_p2),12));

    tmp_1361_cast_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_432_fu_494_p2),32));
    tmp_1362_cast_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_433_fu_504_p2),32));
    tmp_1466_fu_270_p1 <= co_reg_237(1 - 1 downto 0);
    tmp_1468_fu_360_p3 <= (tmp_1467_reg_588 & ap_const_lv3_0);
    tmp_1469_fu_375_p3 <= (tmp_1467_reg_588 & ap_const_lv1_0);
    tmp_1470_fu_413_p1 <= tmp_428_fu_408_p2(11 - 1 downto 0);
    tmp_1471_fu_444_p1 <= tmp_430_fu_439_p2(7 - 1 downto 0);
    tmp_1472_fu_456_p1 <= tmp_430_fu_439_p2(9 - 1 downto 0);
    tmp_423_fu_286_p3 <= (co_reg_237 & ap_const_lv1_0);
    tmp_424_fu_298_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_282_p1) - unsigned(p_shl1_cast_fu_294_p1));
        tmp_425_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1468_fu_360_p3),10));

        tmp_426_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1469_fu_375_p3),8));

    tmp_427_fu_390_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_371_p1) - unsigned(p_shl3_cast_fu_386_p1));
    tmp_428_fu_408_p2 <= std_logic_vector(unsigned(h_cast2_cast_fu_404_p1) + unsigned(tmp_1347_cast_reg_570));
    tmp_429_fu_433_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_417_p3) - unsigned(p_shl7_cast_fu_425_p3));
    tmp_430_fu_439_p2 <= std_logic_vector(unsigned(h_cast2_cast9_fu_400_p1) + unsigned(tmp_1352_cast_reg_599));
    tmp_431_fu_468_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_448_p3) - unsigned(p_shl5_cast_fu_460_p3));
    tmp_432_fu_494_p2 <= std_logic_vector(unsigned(tmp_429_reg_604) + unsigned(w_cast1_cast_fu_490_p1));
    tmp_433_fu_504_p2 <= std_logic_vector(unsigned(tmp_431_reg_609) + unsigned(w_cast1_cast8_fu_486_p1));
    tmp_s_fu_274_p3 <= (co_reg_237 & ap_const_lv3_0);
    w_26_fu_531_p2 <= std_logic_vector(unsigned(w_reg_259) + unsigned(ap_const_lv3_1));
    w_cast1_cast8_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_259),10));
    w_cast1_cast_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_259),14));
end behav;
