-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shuffle_96_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    left_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    left_V_ce0 : OUT STD_LOGIC;
    left_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_12_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_12_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_1_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_2_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_3_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_4_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_4_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_5_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_5_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_6_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_6_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_7_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_7_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_8_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_8_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_9_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_9_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_10_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_10_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_11_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_11_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of shuffle_96_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_C : STD_LOGIC_VECTOR (6 downto 0) := "0001100";
    constant ap_const_lv16_AB : STD_LOGIC_VECTOR (15 downto 0) := "0000000010101011";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_1473_fu_300_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1473_reg_672 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1365_cast_fu_334_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1365_cast_reg_676 : STD_LOGIC_VECTOR (12 downto 0);
    signal co_24_fu_344_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal co_24_reg_684 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_lshr_f_cast_reg_689 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond5_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1474_reg_697 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_1370_cast_fu_413_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1370_cast_reg_703 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal arrayNo_cast_fu_417_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal arrayNo_cast_reg_708 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1375_cast_fu_457_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1375_cast_reg_713 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_443_fu_494_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_443_reg_718 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_445_fu_525_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_445_reg_723 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_447_fu_560_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_447_reg_728 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_21_fu_572_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_21_reg_736 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal output_V_addr_reg_746 : STD_LOGIC_VECTOR (12 downto 0);
    signal w_27_fu_637_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_27_reg_814 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_fu_643_p14 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal co_reg_257 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond4_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_reg_268 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_reg_279 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal storemerge_reg_290 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1388_cast_fu_595_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1389_cast_fu_605_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1390_cast_fu_615_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_304_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_434_fu_316_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_312_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_cast_fu_324_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_435_fu_328_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_360_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_360_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_fu_369_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_fu_369_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_436_fu_385_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_437_fu_396_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_cast_fu_392_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_403_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_438_fu_407_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_360_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1475_fu_421_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_439_fu_428_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1476_fu_436_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_440_fu_443_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_fu_432_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_447_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_441_fu_451_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal h_cast2_cast_fu_465_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_442_fu_469_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1477_fu_474_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl10_cast_fu_478_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl11_cast_fu_486_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal h_cast2_cast1_fu_461_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_444_fu_500_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1478_fu_505_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl8_cast_fu_509_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl9_cast_fu_517_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_446_fu_531_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1479_fu_536_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1480_fu_548_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl6_cast_fu_540_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl7_cast_fu_552_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal w_cast1_cast_fu_586_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_448_fu_590_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal w_cast1_cast2_fu_582_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_449_fu_600_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_cast1_cast1_fu_578_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_450_fu_610_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_360_ap_start : STD_LOGIC;
    signal grp_fu_360_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_fu_369_p00 : STD_LOGIC_VECTOR (15 downto 0);

    component ShuffleNetV2_uremxdS IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component ShuffleNetV2_mux_yd2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_uremxdS_x_U663 : component ShuffleNetV2_uremxdS
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 5,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_360_ap_start,
        done => grp_fu_360_ap_done,
        din0 => grp_fu_360_p0,
        din1 => grp_fu_360_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_360_p2);

    ShuffleNetV2_mux_yd2_x_U664 : component ShuffleNetV2_mux_yd2
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 9,
        dout_WIDTH => 8)
    port map (
        din1 => buffer1_1_96_4x4_p_V_12_q0,
        din2 => buffer1_1_96_4x4_p_V_1_q0,
        din3 => buffer1_1_96_4x4_p_V_2_q0,
        din4 => buffer1_1_96_4x4_p_V_3_q0,
        din5 => buffer1_1_96_4x4_p_V_4_q0,
        din6 => buffer1_1_96_4x4_p_V_5_q0,
        din7 => buffer1_1_96_4x4_p_V_6_q0,
        din8 => buffer1_1_96_4x4_p_V_7_q0,
        din9 => buffer1_1_96_4x4_p_V_8_q0,
        din10 => buffer1_1_96_4x4_p_V_9_q0,
        din11 => buffer1_1_96_4x4_p_V_10_q0,
        din12 => buffer1_1_96_4x4_p_V_11_q0,
        din13 => arrayNo_cast_reg_708,
        dout => tmp_fu_643_p14);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond4_fu_566_p2 = ap_const_lv1_1))) then 
                co_reg_257 <= co_24_reg_684;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_257 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    h_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = exitcond_fu_631_p2))) then 
                h_reg_268 <= h_21_reg_736;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                h_reg_268 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    storemerge_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                storemerge_reg_290 <= tmp_fu_643_p14;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                storemerge_reg_290 <= left_V_q0;
            end if; 
        end if;
    end process;

    w_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = exitcond4_fu_566_p2))) then 
                w_reg_279 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                w_reg_279 <= w_27_reg_814;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    arrayNo_cast_reg_708(6 downto 0) <= arrayNo_cast_fu_417_p1(6 downto 0);
                    tmp_1370_cast_reg_703(11 downto 1) <= tmp_1370_cast_fu_413_p1(11 downto 1);
                    tmp_1375_cast_reg_713(11 downto 1) <= tmp_1375_cast_fu_457_p1(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_24_reg_684 <= co_24_fu_344_p2;
                    tmp_1365_cast_reg_676(12 downto 1) <= tmp_1365_cast_fu_334_p1(12 downto 1);
                tmp_1473_reg_672 <= tmp_1473_fu_300_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                h_21_reg_736 <= h_21_fu_572_p2;
                    tmp_443_reg_718(12 downto 1) <= tmp_443_fu_494_p2(12 downto 1);
                    tmp_445_reg_723(13 downto 1) <= tmp_445_fu_525_p2(13 downto 1);
                    tmp_447_reg_728(9 downto 1) <= tmp_447_fu_560_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                output_V_addr_reg_746 <= tmp_1389_cast_fu_605_p1(13 - 1 downto 0);
                w_27_reg_814 <= w_27_fu_637_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_338_p2 = ap_const_lv1_0))) then
                p_lshr_f_cast_reg_689 <= co_reg_257(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_1474_reg_697 <= mul_fu_369_p2(15 downto 11);
            end if;
        end if;
    end process;
    tmp_1365_cast_reg_676(0) <= '0';
    tmp_1370_cast_reg_703(0) <= '0';
    arrayNo_cast_reg_708(8 downto 7) <= "00";
    tmp_1375_cast_reg_713(0) <= '0';
    tmp_443_reg_718(0) <= '0';
    tmp_445_reg_723(0) <= '0';
    tmp_447_reg_728(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_1473_reg_672, ap_CS_fsm_state2, exitcond5_fu_338_p2, ap_CS_fsm_state13, ap_CS_fsm_state14, exitcond4_fu_566_p2, exitcond_fu_631_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_338_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond4_fu_566_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = exitcond_fu_631_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_0 = exitcond_fu_631_p2) and (tmp_1473_reg_672 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_338_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_338_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_338_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_338_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayNo_cast_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_360_p2),9));
    buffer1_1_96_4x4_p_V_10_address0 <= tmp_1390_cast_fu_615_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_10_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_10_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_11_address0 <= tmp_1390_cast_fu_615_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_11_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_11_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_12_address0 <= tmp_1390_cast_fu_615_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_12_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_12_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_1_address0 <= tmp_1390_cast_fu_615_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_1_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_1_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_2_address0 <= tmp_1390_cast_fu_615_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_2_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_2_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_3_address0 <= tmp_1390_cast_fu_615_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_3_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_3_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_4_address0 <= tmp_1390_cast_fu_615_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_4_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_4_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_5_address0 <= tmp_1390_cast_fu_615_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_5_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_5_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_6_address0 <= tmp_1390_cast_fu_615_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_6_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_6_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_7_address0 <= tmp_1390_cast_fu_615_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_7_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_7_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_8_address0 <= tmp_1390_cast_fu_615_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_8_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_8_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_9_address0 <= tmp_1390_cast_fu_615_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_9_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            buffer1_1_96_4x4_p_V_9_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_24_fu_344_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(co_reg_257));
    exitcond4_fu_566_p2 <= "1" when (h_reg_268 = ap_const_lv3_6) else "0";
    exitcond5_fu_338_p2 <= "1" when (co_reg_257 = ap_const_lv8_C0) else "0";
    exitcond_fu_631_p2 <= "1" when (w_reg_279 = ap_const_lv3_6) else "0";

    grp_fu_360_ap_start_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_338_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_338_p2 = ap_const_lv1_0))) then 
            grp_fu_360_ap_start <= ap_const_logic_1;
        else 
            grp_fu_360_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_360_p0 <= co_reg_257(7 downto 1);
    grp_fu_360_p1 <= ap_const_lv7_C(5 - 1 downto 0);
    h_21_fu_572_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(h_reg_268));
    h_cast2_cast1_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_268),13));
    h_cast2_cast_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_268),12));
    left_V_address0 <= tmp_1388_cast_fu_595_p1(12 - 1 downto 0);

    left_V_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            left_V_ce0 <= ap_const_logic_1;
        else 
            left_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_fu_369_p0 <= mul_fu_369_p00(7 - 1 downto 0);
    mul_fu_369_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_cast_reg_689),16));
    mul_fu_369_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_fu_369_p0) * unsigned(ap_const_lv16_AB), 16));
    output_V_address0 <= output_V_addr_reg_746;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= storemerge_reg_290;

    output_V_we0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl10_cast_fu_478_p3 <= (tmp_1477_fu_474_p1 & ap_const_lv3_0);
    p_shl11_cast_fu_486_p3 <= (tmp_442_fu_469_p2 & ap_const_lv1_0);
    p_shl1_cast_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_434_fu_316_p3),12));
    p_shl2_cast_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_439_fu_428_p1),11));
    p_shl3_cast_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_440_fu_443_p1),11));
    p_shl4_cast_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_436_fu_385_p3),11));
    p_shl5_cast_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_437_fu_396_p3),11));
    p_shl6_cast_fu_540_p3 <= (tmp_1479_fu_536_p1 & ap_const_lv3_0);
    p_shl7_cast_fu_552_p3 <= (tmp_1480_fu_548_p1 & ap_const_lv1_0);
    p_shl8_cast_fu_509_p3 <= (tmp_1478_fu_505_p1 & ap_const_lv3_0);
    p_shl9_cast_fu_517_p3 <= (tmp_444_fu_500_p2 & ap_const_lv1_0);
    p_shl_cast_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_304_p3),12));
        tmp_1365_cast_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_435_fu_328_p2),13));

        tmp_1370_cast_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_438_fu_407_p2),12));

        tmp_1375_cast_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_441_fu_451_p2),12));

    tmp_1388_cast_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_448_fu_590_p2),32));
    tmp_1389_cast_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_449_fu_600_p2),32));
    tmp_1390_cast_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_450_fu_610_p2),32));
    tmp_1473_fu_300_p1 <= co_reg_257(1 - 1 downto 0);
    tmp_1475_fu_421_p3 <= (tmp_1474_reg_697 & ap_const_lv3_0);
    tmp_1476_fu_436_p3 <= (tmp_1474_reg_697 & ap_const_lv1_0);
    tmp_1477_fu_474_p1 <= tmp_442_fu_469_p2(10 - 1 downto 0);
    tmp_1478_fu_505_p1 <= tmp_444_fu_500_p2(11 - 1 downto 0);
    tmp_1479_fu_536_p1 <= tmp_446_fu_531_p2(7 - 1 downto 0);
    tmp_1480_fu_548_p1 <= tmp_446_fu_531_p2(9 - 1 downto 0);
    tmp_434_fu_316_p3 <= (co_reg_257 & ap_const_lv1_0);
    tmp_435_fu_328_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_312_p1) - unsigned(p_shl1_cast_fu_324_p1));
    tmp_436_fu_385_p3 <= (p_lshr_f_cast_reg_689 & ap_const_lv3_0);
    tmp_437_fu_396_p3 <= (p_lshr_f_cast_reg_689 & ap_const_lv1_0);
    tmp_438_fu_407_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_392_p1) - unsigned(p_shl5_cast_fu_403_p1));
        tmp_439_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1475_fu_421_p3),10));

        tmp_440_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1476_fu_436_p3),8));

    tmp_441_fu_451_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_432_p1) - unsigned(p_shl3_cast_fu_447_p1));
    tmp_442_fu_469_p2 <= std_logic_vector(unsigned(h_cast2_cast_fu_465_p1) + unsigned(tmp_1370_cast_reg_703));
    tmp_443_fu_494_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_478_p3) - unsigned(p_shl11_cast_fu_486_p3));
    tmp_444_fu_500_p2 <= std_logic_vector(unsigned(h_cast2_cast1_fu_461_p1) + unsigned(tmp_1365_cast_reg_676));
    tmp_445_fu_525_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_509_p3) - unsigned(p_shl9_cast_fu_517_p3));
    tmp_446_fu_531_p2 <= std_logic_vector(unsigned(h_cast2_cast_fu_465_p1) + unsigned(tmp_1375_cast_reg_713));
    tmp_447_fu_560_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_540_p3) - unsigned(p_shl7_cast_fu_552_p3));
    tmp_448_fu_590_p2 <= std_logic_vector(unsigned(tmp_443_reg_718) + unsigned(w_cast1_cast_fu_586_p1));
    tmp_449_fu_600_p2 <= std_logic_vector(unsigned(tmp_445_reg_723) + unsigned(w_cast1_cast2_fu_582_p1));
    tmp_450_fu_610_p2 <= std_logic_vector(unsigned(tmp_447_reg_728) + unsigned(w_cast1_cast1_fu_578_p1));
    tmp_s_fu_304_p3 <= (co_reg_257 & ap_const_lv3_0);
    w_27_fu_637_p2 <= std_logic_vector(unsigned(w_reg_279) + unsigned(ap_const_lv3_1));
    w_cast1_cast1_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_279),10));
    w_cast1_cast2_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_279),14));
    w_cast1_cast_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_279),13));
end behav;
