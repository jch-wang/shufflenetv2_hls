// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shuffle_96_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        left_V_address0,
        left_V_ce0,
        left_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        buffer1_1_96_4x4_p_V_12_address0,
        buffer1_1_96_4x4_p_V_12_ce0,
        buffer1_1_96_4x4_p_V_12_q0,
        buffer1_1_96_4x4_p_V_1_address0,
        buffer1_1_96_4x4_p_V_1_ce0,
        buffer1_1_96_4x4_p_V_1_q0,
        buffer1_1_96_4x4_p_V_2_address0,
        buffer1_1_96_4x4_p_V_2_ce0,
        buffer1_1_96_4x4_p_V_2_q0,
        buffer1_1_96_4x4_p_V_3_address0,
        buffer1_1_96_4x4_p_V_3_ce0,
        buffer1_1_96_4x4_p_V_3_q0,
        buffer1_1_96_4x4_p_V_4_address0,
        buffer1_1_96_4x4_p_V_4_ce0,
        buffer1_1_96_4x4_p_V_4_q0,
        buffer1_1_96_4x4_p_V_5_address0,
        buffer1_1_96_4x4_p_V_5_ce0,
        buffer1_1_96_4x4_p_V_5_q0,
        buffer1_1_96_4x4_p_V_6_address0,
        buffer1_1_96_4x4_p_V_6_ce0,
        buffer1_1_96_4x4_p_V_6_q0,
        buffer1_1_96_4x4_p_V_7_address0,
        buffer1_1_96_4x4_p_V_7_ce0,
        buffer1_1_96_4x4_p_V_7_q0,
        buffer1_1_96_4x4_p_V_8_address0,
        buffer1_1_96_4x4_p_V_8_ce0,
        buffer1_1_96_4x4_p_V_8_q0,
        buffer1_1_96_4x4_p_V_9_address0,
        buffer1_1_96_4x4_p_V_9_ce0,
        buffer1_1_96_4x4_p_V_9_q0,
        buffer1_1_96_4x4_p_V_10_address0,
        buffer1_1_96_4x4_p_V_10_ce0,
        buffer1_1_96_4x4_p_V_10_q0,
        buffer1_1_96_4x4_p_V_11_address0,
        buffer1_1_96_4x4_p_V_11_ce0,
        buffer1_1_96_4x4_p_V_11_q0
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] left_V_address0;
output   left_V_ce0;
input  [7:0] left_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [8:0] buffer1_1_96_4x4_p_V_12_address0;
output   buffer1_1_96_4x4_p_V_12_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_12_q0;
output  [8:0] buffer1_1_96_4x4_p_V_1_address0;
output   buffer1_1_96_4x4_p_V_1_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_1_q0;
output  [8:0] buffer1_1_96_4x4_p_V_2_address0;
output   buffer1_1_96_4x4_p_V_2_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_2_q0;
output  [8:0] buffer1_1_96_4x4_p_V_3_address0;
output   buffer1_1_96_4x4_p_V_3_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_3_q0;
output  [8:0] buffer1_1_96_4x4_p_V_4_address0;
output   buffer1_1_96_4x4_p_V_4_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_4_q0;
output  [8:0] buffer1_1_96_4x4_p_V_5_address0;
output   buffer1_1_96_4x4_p_V_5_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_5_q0;
output  [8:0] buffer1_1_96_4x4_p_V_6_address0;
output   buffer1_1_96_4x4_p_V_6_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_6_q0;
output  [8:0] buffer1_1_96_4x4_p_V_7_address0;
output   buffer1_1_96_4x4_p_V_7_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_7_q0;
output  [8:0] buffer1_1_96_4x4_p_V_8_address0;
output   buffer1_1_96_4x4_p_V_8_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_8_q0;
output  [8:0] buffer1_1_96_4x4_p_V_9_address0;
output   buffer1_1_96_4x4_p_V_9_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_9_q0;
output  [8:0] buffer1_1_96_4x4_p_V_10_address0;
output   buffer1_1_96_4x4_p_V_10_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_10_q0;
output  [8:0] buffer1_1_96_4x4_p_V_11_address0;
output   buffer1_1_96_4x4_p_V_11_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_11_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg left_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg buffer1_1_96_4x4_p_V_12_ce0;
reg buffer1_1_96_4x4_p_V_1_ce0;
reg buffer1_1_96_4x4_p_V_2_ce0;
reg buffer1_1_96_4x4_p_V_3_ce0;
reg buffer1_1_96_4x4_p_V_4_ce0;
reg buffer1_1_96_4x4_p_V_5_ce0;
reg buffer1_1_96_4x4_p_V_6_ce0;
reg buffer1_1_96_4x4_p_V_7_ce0;
reg buffer1_1_96_4x4_p_V_8_ce0;
reg buffer1_1_96_4x4_p_V_9_ce0;
reg buffer1_1_96_4x4_p_V_10_ce0;
reg buffer1_1_96_4x4_p_V_11_ce0;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_1473_fu_300_p1;
reg   [0:0] tmp_1473_reg_672;
wire    ap_CS_fsm_state2;
wire  signed [12:0] tmp_1365_cast_fu_334_p1;
reg  signed [12:0] tmp_1365_cast_reg_676;
wire   [7:0] co_24_fu_344_p2;
reg   [7:0] co_24_reg_684;
reg   [6:0] p_lshr_f_cast_reg_689;
wire   [0:0] exitcond5_fu_338_p2;
reg   [4:0] tmp_1474_reg_697;
wire    ap_CS_fsm_state11;
wire  signed [11:0] tmp_1370_cast_fu_413_p1;
reg  signed [11:0] tmp_1370_cast_reg_703;
wire    ap_CS_fsm_state12;
wire   [8:0] arrayNo_cast_fu_417_p1;
reg   [8:0] arrayNo_cast_reg_708;
wire  signed [11:0] tmp_1375_cast_fu_457_p1;
reg  signed [11:0] tmp_1375_cast_reg_713;
wire   [12:0] tmp_443_fu_494_p2;
reg   [12:0] tmp_443_reg_718;
wire    ap_CS_fsm_state13;
wire   [13:0] tmp_445_fu_525_p2;
reg   [13:0] tmp_445_reg_723;
wire   [9:0] tmp_447_fu_560_p2;
reg   [9:0] tmp_447_reg_728;
wire   [2:0] h_21_fu_572_p2;
reg   [2:0] h_21_reg_736;
wire    ap_CS_fsm_state14;
reg   [12:0] output_V_addr_reg_746;
wire   [2:0] w_27_fu_637_p2;
reg   [2:0] w_27_reg_814;
wire    ap_CS_fsm_state15;
wire   [7:0] tmp_fu_643_p14;
wire    ap_CS_fsm_state16;
reg   [7:0] co_reg_257;
wire   [0:0] exitcond4_fu_566_p2;
reg   [2:0] h_reg_268;
wire   [0:0] exitcond_fu_631_p2;
reg   [2:0] w_reg_279;
wire    ap_CS_fsm_state17;
reg   [7:0] storemerge_reg_290;
wire   [31:0] tmp_1388_cast_fu_595_p1;
wire   [31:0] tmp_1389_cast_fu_605_p1;
wire   [31:0] tmp_1390_cast_fu_615_p1;
wire   [10:0] tmp_s_fu_304_p3;
wire   [8:0] tmp_434_fu_316_p3;
wire   [11:0] p_shl_cast_fu_312_p1;
wire   [11:0] p_shl1_cast_fu_324_p1;
wire   [11:0] tmp_435_fu_328_p2;
wire   [6:0] grp_fu_360_p0;
wire   [4:0] grp_fu_360_p1;
wire   [6:0] mul_fu_369_p0;
wire   [15:0] mul_fu_369_p2;
wire   [9:0] tmp_436_fu_385_p3;
wire   [7:0] tmp_437_fu_396_p3;
wire   [10:0] p_shl4_cast_fu_392_p1;
wire   [10:0] p_shl5_cast_fu_403_p1;
wire   [10:0] tmp_438_fu_407_p2;
wire   [6:0] grp_fu_360_p2;
wire   [7:0] tmp_1475_fu_421_p3;
wire  signed [9:0] tmp_439_fu_428_p1;
wire   [5:0] tmp_1476_fu_436_p3;
wire  signed [7:0] tmp_440_fu_443_p1;
wire   [10:0] p_shl2_cast_fu_432_p1;
wire   [10:0] p_shl3_cast_fu_447_p1;
wire   [10:0] tmp_441_fu_451_p2;
wire   [11:0] h_cast2_cast_fu_465_p1;
wire   [11:0] tmp_442_fu_469_p2;
wire   [9:0] tmp_1477_fu_474_p1;
wire   [12:0] p_shl10_cast_fu_478_p3;
wire   [12:0] p_shl11_cast_fu_486_p3;
wire   [12:0] h_cast2_cast1_fu_461_p1;
wire   [12:0] tmp_444_fu_500_p2;
wire   [10:0] tmp_1478_fu_505_p1;
wire   [13:0] p_shl8_cast_fu_509_p3;
wire   [13:0] p_shl9_cast_fu_517_p3;
wire   [11:0] tmp_446_fu_531_p2;
wire   [6:0] tmp_1479_fu_536_p1;
wire   [8:0] tmp_1480_fu_548_p1;
wire   [9:0] p_shl6_cast_fu_540_p3;
wire   [9:0] p_shl7_cast_fu_552_p3;
wire   [12:0] w_cast1_cast_fu_586_p1;
wire   [12:0] tmp_448_fu_590_p2;
wire   [13:0] w_cast1_cast2_fu_582_p1;
wire   [13:0] tmp_449_fu_600_p2;
wire   [9:0] w_cast1_cast1_fu_578_p1;
wire   [9:0] tmp_450_fu_610_p2;
reg    grp_fu_360_ap_start;
wire    grp_fu_360_ap_done;
reg   [16:0] ap_NS_fsm;
wire   [15:0] mul_fu_369_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
end

ShuffleNetV2_uremxdS #(
    .ID( 1 ),
    .NUM_STAGE( 11 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 7 ))
ShuffleNetV2_uremxdS_x_U663(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_360_ap_start),
    .done(grp_fu_360_ap_done),
    .din0(grp_fu_360_p0),
    .din1(grp_fu_360_p1),
    .ce(1'b1),
    .dout(grp_fu_360_p2)
);

ShuffleNetV2_mux_yd2 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 9 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_yd2_x_U664(
    .din1(buffer1_1_96_4x4_p_V_12_q0),
    .din2(buffer1_1_96_4x4_p_V_1_q0),
    .din3(buffer1_1_96_4x4_p_V_2_q0),
    .din4(buffer1_1_96_4x4_p_V_3_q0),
    .din5(buffer1_1_96_4x4_p_V_4_q0),
    .din6(buffer1_1_96_4x4_p_V_5_q0),
    .din7(buffer1_1_96_4x4_p_V_6_q0),
    .din8(buffer1_1_96_4x4_p_V_7_q0),
    .din9(buffer1_1_96_4x4_p_V_8_q0),
    .din10(buffer1_1_96_4x4_p_V_9_q0),
    .din11(buffer1_1_96_4x4_p_V_10_q0),
    .din12(buffer1_1_96_4x4_p_V_11_q0),
    .din13(arrayNo_cast_reg_708),
    .dout(tmp_fu_643_p14)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (exitcond4_fu_566_p2 == 1'd1))) begin
        co_reg_257 <= co_24_reg_684;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_257 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'd1 == exitcond_fu_631_p2))) begin
        h_reg_268 <= h_21_reg_736;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        h_reg_268 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        storemerge_reg_290 <= tmp_fu_643_p14;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        storemerge_reg_290 <= left_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (1'd0 == exitcond4_fu_566_p2))) begin
        w_reg_279 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        w_reg_279 <= w_27_reg_814;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        arrayNo_cast_reg_708[6 : 0] <= arrayNo_cast_fu_417_p1[6 : 0];
        tmp_1370_cast_reg_703[11 : 1] <= tmp_1370_cast_fu_413_p1[11 : 1];
        tmp_1375_cast_reg_713[11 : 1] <= tmp_1375_cast_fu_457_p1[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_24_reg_684 <= co_24_fu_344_p2;
        tmp_1365_cast_reg_676[12 : 1] <= tmp_1365_cast_fu_334_p1[12 : 1];
        tmp_1473_reg_672 <= tmp_1473_fu_300_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        h_21_reg_736 <= h_21_fu_572_p2;
        tmp_443_reg_718[12 : 1] <= tmp_443_fu_494_p2[12 : 1];
        tmp_445_reg_723[13 : 1] <= tmp_445_fu_525_p2[13 : 1];
        tmp_447_reg_728[9 : 1] <= tmp_447_fu_560_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_V_addr_reg_746 <= tmp_1389_cast_fu_605_p1;
        w_27_reg_814 <= w_27_fu_637_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_338_p2 == 1'd0))) begin
        p_lshr_f_cast_reg_689 <= {{co_reg_257[7:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_1474_reg_697 <= {{mul_fu_369_p2[15:11]}};
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_338_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_338_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_10_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_11_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_12_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_1_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_2_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_3_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_4_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_5_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_6_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_7_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_8_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        buffer1_1_96_4x4_p_V_9_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_338_p2 == 1'd0))) begin
        grp_fu_360_ap_start = 1'b1;
    end else begin
        grp_fu_360_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        left_V_ce0 = 1'b1;
    end else begin
        left_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_338_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (exitcond4_fu_566_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (1'd1 == exitcond_fu_631_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else if (((1'b1 == ap_CS_fsm_state14) & (1'd0 == exitcond_fu_631_p2) & (tmp_1473_reg_672 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign arrayNo_cast_fu_417_p1 = grp_fu_360_p2;

assign buffer1_1_96_4x4_p_V_10_address0 = tmp_1390_cast_fu_615_p1;

assign buffer1_1_96_4x4_p_V_11_address0 = tmp_1390_cast_fu_615_p1;

assign buffer1_1_96_4x4_p_V_12_address0 = tmp_1390_cast_fu_615_p1;

assign buffer1_1_96_4x4_p_V_1_address0 = tmp_1390_cast_fu_615_p1;

assign buffer1_1_96_4x4_p_V_2_address0 = tmp_1390_cast_fu_615_p1;

assign buffer1_1_96_4x4_p_V_3_address0 = tmp_1390_cast_fu_615_p1;

assign buffer1_1_96_4x4_p_V_4_address0 = tmp_1390_cast_fu_615_p1;

assign buffer1_1_96_4x4_p_V_5_address0 = tmp_1390_cast_fu_615_p1;

assign buffer1_1_96_4x4_p_V_6_address0 = tmp_1390_cast_fu_615_p1;

assign buffer1_1_96_4x4_p_V_7_address0 = tmp_1390_cast_fu_615_p1;

assign buffer1_1_96_4x4_p_V_8_address0 = tmp_1390_cast_fu_615_p1;

assign buffer1_1_96_4x4_p_V_9_address0 = tmp_1390_cast_fu_615_p1;

assign co_24_fu_344_p2 = (8'd1 + co_reg_257);

assign exitcond4_fu_566_p2 = ((h_reg_268 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond5_fu_338_p2 = ((co_reg_257 == 8'd192) ? 1'b1 : 1'b0);

assign exitcond_fu_631_p2 = ((w_reg_279 == 3'd6) ? 1'b1 : 1'b0);

assign grp_fu_360_p0 = {{co_reg_257[7:1]}};

assign grp_fu_360_p1 = 7'd12;

assign h_21_fu_572_p2 = (3'd1 + h_reg_268);

assign h_cast2_cast1_fu_461_p1 = h_reg_268;

assign h_cast2_cast_fu_465_p1 = h_reg_268;

assign left_V_address0 = tmp_1388_cast_fu_595_p1;

assign mul_fu_369_p0 = mul_fu_369_p00;

assign mul_fu_369_p00 = p_lshr_f_cast_reg_689;

assign mul_fu_369_p2 = (mul_fu_369_p0 * $signed('hAB));

assign output_V_address0 = output_V_addr_reg_746;

assign output_V_d0 = storemerge_reg_290;

assign p_shl10_cast_fu_478_p3 = {{tmp_1477_fu_474_p1}, {3'd0}};

assign p_shl11_cast_fu_486_p3 = {{tmp_442_fu_469_p2}, {1'd0}};

assign p_shl1_cast_fu_324_p1 = tmp_434_fu_316_p3;

assign p_shl2_cast_fu_432_p1 = $unsigned(tmp_439_fu_428_p1);

assign p_shl3_cast_fu_447_p1 = $unsigned(tmp_440_fu_443_p1);

assign p_shl4_cast_fu_392_p1 = tmp_436_fu_385_p3;

assign p_shl5_cast_fu_403_p1 = tmp_437_fu_396_p3;

assign p_shl6_cast_fu_540_p3 = {{tmp_1479_fu_536_p1}, {3'd0}};

assign p_shl7_cast_fu_552_p3 = {{tmp_1480_fu_548_p1}, {1'd0}};

assign p_shl8_cast_fu_509_p3 = {{tmp_1478_fu_505_p1}, {3'd0}};

assign p_shl9_cast_fu_517_p3 = {{tmp_444_fu_500_p2}, {1'd0}};

assign p_shl_cast_fu_312_p1 = tmp_s_fu_304_p3;

assign tmp_1365_cast_fu_334_p1 = $signed(tmp_435_fu_328_p2);

assign tmp_1370_cast_fu_413_p1 = $signed(tmp_438_fu_407_p2);

assign tmp_1375_cast_fu_457_p1 = $signed(tmp_441_fu_451_p2);

assign tmp_1388_cast_fu_595_p1 = tmp_448_fu_590_p2;

assign tmp_1389_cast_fu_605_p1 = tmp_449_fu_600_p2;

assign tmp_1390_cast_fu_615_p1 = tmp_450_fu_610_p2;

assign tmp_1473_fu_300_p1 = co_reg_257[0:0];

assign tmp_1475_fu_421_p3 = {{tmp_1474_reg_697}, {3'd0}};

assign tmp_1476_fu_436_p3 = {{tmp_1474_reg_697}, {1'd0}};

assign tmp_1477_fu_474_p1 = tmp_442_fu_469_p2[9:0];

assign tmp_1478_fu_505_p1 = tmp_444_fu_500_p2[10:0];

assign tmp_1479_fu_536_p1 = tmp_446_fu_531_p2[6:0];

assign tmp_1480_fu_548_p1 = tmp_446_fu_531_p2[8:0];

assign tmp_434_fu_316_p3 = {{co_reg_257}, {1'd0}};

assign tmp_435_fu_328_p2 = (p_shl_cast_fu_312_p1 - p_shl1_cast_fu_324_p1);

assign tmp_436_fu_385_p3 = {{p_lshr_f_cast_reg_689}, {3'd0}};

assign tmp_437_fu_396_p3 = {{p_lshr_f_cast_reg_689}, {1'd0}};

assign tmp_438_fu_407_p2 = (p_shl4_cast_fu_392_p1 - p_shl5_cast_fu_403_p1);

assign tmp_439_fu_428_p1 = $signed(tmp_1475_fu_421_p3);

assign tmp_440_fu_443_p1 = $signed(tmp_1476_fu_436_p3);

assign tmp_441_fu_451_p2 = (p_shl2_cast_fu_432_p1 - p_shl3_cast_fu_447_p1);

assign tmp_442_fu_469_p2 = ($signed(h_cast2_cast_fu_465_p1) + $signed(tmp_1370_cast_reg_703));

assign tmp_443_fu_494_p2 = (p_shl10_cast_fu_478_p3 - p_shl11_cast_fu_486_p3);

assign tmp_444_fu_500_p2 = ($signed(h_cast2_cast1_fu_461_p1) + $signed(tmp_1365_cast_reg_676));

assign tmp_445_fu_525_p2 = (p_shl8_cast_fu_509_p3 - p_shl9_cast_fu_517_p3);

assign tmp_446_fu_531_p2 = ($signed(h_cast2_cast_fu_465_p1) + $signed(tmp_1375_cast_reg_713));

assign tmp_447_fu_560_p2 = (p_shl6_cast_fu_540_p3 - p_shl7_cast_fu_552_p3);

assign tmp_448_fu_590_p2 = (tmp_443_reg_718 + w_cast1_cast_fu_586_p1);

assign tmp_449_fu_600_p2 = (tmp_445_reg_723 + w_cast1_cast2_fu_582_p1);

assign tmp_450_fu_610_p2 = (tmp_447_reg_728 + w_cast1_cast1_fu_578_p1);

assign tmp_s_fu_304_p3 = {{co_reg_257}, {3'd0}};

assign w_27_fu_637_p2 = (w_reg_279 + 3'd1);

assign w_cast1_cast1_fu_578_p1 = w_reg_279;

assign w_cast1_cast2_fu_582_p1 = w_reg_279;

assign w_cast1_cast_fu_586_p1 = w_reg_279;

always @ (posedge ap_clk) begin
    tmp_1365_cast_reg_676[0] <= 1'b0;
    tmp_1370_cast_reg_703[0] <= 1'b0;
    arrayNo_cast_reg_708[8:7] <= 2'b00;
    tmp_1375_cast_reg_713[0] <= 1'b0;
    tmp_443_reg_718[0] <= 1'b0;
    tmp_445_reg_723[0] <= 1'b0;
    tmp_447_reg_728[0] <= 1'b0;
end

endmodule //shuffle_96_p
