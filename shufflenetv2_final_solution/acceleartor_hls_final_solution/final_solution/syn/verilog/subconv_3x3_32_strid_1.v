// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_32_strid_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        ShuffleConvs_0_Downs_23_address0,
        ShuffleConvs_0_Downs_23_ce0,
        ShuffleConvs_0_Downs_23_q0,
        ShuffleConvs_0_Downs_22_address0,
        ShuffleConvs_0_Downs_22_ce0,
        ShuffleConvs_0_Downs_22_q0,
        ShuffleConvs_0_Downs_11_address0,
        ShuffleConvs_0_Downs_11_ce0,
        ShuffleConvs_0_Downs_11_q0,
        ShuffleConvs_0_Downs_6_address0,
        ShuffleConvs_0_Downs_6_ce0,
        ShuffleConvs_0_Downs_6_q0,
        ShuffleConvs_0_Downs_5_address0,
        ShuffleConvs_0_Downs_5_ce0,
        ShuffleConvs_0_Downs_5_q0,
        ShuffleConvs_0_Downs_4_address0,
        ShuffleConvs_0_Downs_4_ce0,
        ShuffleConvs_0_Downs_4_q0,
        ShuffleConvs_0_Downs_3_address0,
        ShuffleConvs_0_Downs_3_ce0,
        ShuffleConvs_0_Downs_3_q0,
        ShuffleConvs_0_Downs_2_address0,
        ShuffleConvs_0_Downs_2_ce0,
        ShuffleConvs_0_Downs_2_q0,
        ShuffleConvs_0_Downs_1_address0,
        ShuffleConvs_0_Downs_1_ce0,
        ShuffleConvs_0_Downs_1_q0,
        ShuffleConvs_0_Downs_address0,
        ShuffleConvs_0_Downs_ce0,
        ShuffleConvs_0_Downs_q0,
        ShuffleConvs_0_Downs_21_address0,
        ShuffleConvs_0_Downs_21_ce0,
        ShuffleConvs_0_Downs_21_q0,
        ShuffleConvs_0_Downs_20_address0,
        ShuffleConvs_0_Downs_20_ce0,
        ShuffleConvs_0_Downs_20_q0,
        ShuffleConvs_0_Downs_19_address0,
        ShuffleConvs_0_Downs_19_ce0,
        ShuffleConvs_0_Downs_19_q0,
        ShuffleConvs_0_Downs_18_address0,
        ShuffleConvs_0_Downs_18_ce0,
        ShuffleConvs_0_Downs_18_q0,
        ShuffleConvs_0_Downs_17_address0,
        ShuffleConvs_0_Downs_17_ce0,
        ShuffleConvs_0_Downs_17_q0,
        ShuffleConvs_0_Downs_16_address0,
        ShuffleConvs_0_Downs_16_ce0,
        ShuffleConvs_0_Downs_16_q0,
        ShuffleConvs_0_Downs_15_address0,
        ShuffleConvs_0_Downs_15_ce0,
        ShuffleConvs_0_Downs_15_q0,
        ShuffleConvs_0_Downs_14_address0,
        ShuffleConvs_0_Downs_14_ce0,
        ShuffleConvs_0_Downs_14_q0,
        ShuffleConvs_0_Downs_13_address0,
        ShuffleConvs_0_Downs_13_ce0,
        ShuffleConvs_0_Downs_13_q0,
        ShuffleConvs_0_Downs_12_address0,
        ShuffleConvs_0_Downs_12_ce0,
        ShuffleConvs_0_Downs_12_q0,
        ShuffleConvs_0_Downs_10_address0,
        ShuffleConvs_0_Downs_10_ce0,
        ShuffleConvs_0_Downs_10_q0,
        ShuffleConvs_0_Downs_9_address0,
        ShuffleConvs_0_Downs_9_ce0,
        ShuffleConvs_0_Downs_9_q0,
        ShuffleConvs_0_Downs_8_address0,
        ShuffleConvs_0_Downs_8_ce0,
        ShuffleConvs_0_Downs_8_q0,
        ShuffleConvs_0_Downs_7_address0,
        ShuffleConvs_0_Downs_7_ce0,
        ShuffleConvs_0_Downs_7_q0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [4:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [10:0] ShuffleConvs_0_Downs_23_address0;
output   ShuffleConvs_0_Downs_23_ce0;
input  [7:0] ShuffleConvs_0_Downs_23_q0;
output  [10:0] ShuffleConvs_0_Downs_22_address0;
output   ShuffleConvs_0_Downs_22_ce0;
input  [7:0] ShuffleConvs_0_Downs_22_q0;
output  [10:0] ShuffleConvs_0_Downs_11_address0;
output   ShuffleConvs_0_Downs_11_ce0;
input  [7:0] ShuffleConvs_0_Downs_11_q0;
output  [10:0] ShuffleConvs_0_Downs_6_address0;
output   ShuffleConvs_0_Downs_6_ce0;
input  [7:0] ShuffleConvs_0_Downs_6_q0;
output  [10:0] ShuffleConvs_0_Downs_5_address0;
output   ShuffleConvs_0_Downs_5_ce0;
input  [7:0] ShuffleConvs_0_Downs_5_q0;
output  [10:0] ShuffleConvs_0_Downs_4_address0;
output   ShuffleConvs_0_Downs_4_ce0;
input  [7:0] ShuffleConvs_0_Downs_4_q0;
output  [10:0] ShuffleConvs_0_Downs_3_address0;
output   ShuffleConvs_0_Downs_3_ce0;
input  [7:0] ShuffleConvs_0_Downs_3_q0;
output  [10:0] ShuffleConvs_0_Downs_2_address0;
output   ShuffleConvs_0_Downs_2_ce0;
input  [7:0] ShuffleConvs_0_Downs_2_q0;
output  [10:0] ShuffleConvs_0_Downs_1_address0;
output   ShuffleConvs_0_Downs_1_ce0;
input  [7:0] ShuffleConvs_0_Downs_1_q0;
output  [10:0] ShuffleConvs_0_Downs_address0;
output   ShuffleConvs_0_Downs_ce0;
input  [7:0] ShuffleConvs_0_Downs_q0;
output  [10:0] ShuffleConvs_0_Downs_21_address0;
output   ShuffleConvs_0_Downs_21_ce0;
input  [7:0] ShuffleConvs_0_Downs_21_q0;
output  [10:0] ShuffleConvs_0_Downs_20_address0;
output   ShuffleConvs_0_Downs_20_ce0;
input  [7:0] ShuffleConvs_0_Downs_20_q0;
output  [10:0] ShuffleConvs_0_Downs_19_address0;
output   ShuffleConvs_0_Downs_19_ce0;
input  [7:0] ShuffleConvs_0_Downs_19_q0;
output  [10:0] ShuffleConvs_0_Downs_18_address0;
output   ShuffleConvs_0_Downs_18_ce0;
input  [7:0] ShuffleConvs_0_Downs_18_q0;
output  [10:0] ShuffleConvs_0_Downs_17_address0;
output   ShuffleConvs_0_Downs_17_ce0;
input  [7:0] ShuffleConvs_0_Downs_17_q0;
output  [10:0] ShuffleConvs_0_Downs_16_address0;
output   ShuffleConvs_0_Downs_16_ce0;
input  [7:0] ShuffleConvs_0_Downs_16_q0;
output  [10:0] ShuffleConvs_0_Downs_15_address0;
output   ShuffleConvs_0_Downs_15_ce0;
input  [7:0] ShuffleConvs_0_Downs_15_q0;
output  [10:0] ShuffleConvs_0_Downs_14_address0;
output   ShuffleConvs_0_Downs_14_ce0;
input  [7:0] ShuffleConvs_0_Downs_14_q0;
output  [10:0] ShuffleConvs_0_Downs_13_address0;
output   ShuffleConvs_0_Downs_13_ce0;
input  [7:0] ShuffleConvs_0_Downs_13_q0;
output  [10:0] ShuffleConvs_0_Downs_12_address0;
output   ShuffleConvs_0_Downs_12_ce0;
input  [7:0] ShuffleConvs_0_Downs_12_q0;
output  [10:0] ShuffleConvs_0_Downs_10_address0;
output   ShuffleConvs_0_Downs_10_ce0;
input  [7:0] ShuffleConvs_0_Downs_10_q0;
output  [10:0] ShuffleConvs_0_Downs_9_address0;
output   ShuffleConvs_0_Downs_9_ce0;
input  [7:0] ShuffleConvs_0_Downs_9_q0;
output  [10:0] ShuffleConvs_0_Downs_8_address0;
output   ShuffleConvs_0_Downs_8_ce0;
input  [7:0] ShuffleConvs_0_Downs_8_q0;
output  [10:0] ShuffleConvs_0_Downs_7_address0;
output   ShuffleConvs_0_Downs_7_ce0;
input  [7:0] ShuffleConvs_0_Downs_7_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg ShuffleConvs_0_Downs_23_ce0;
reg ShuffleConvs_0_Downs_22_ce0;
reg ShuffleConvs_0_Downs_11_ce0;
reg ShuffleConvs_0_Downs_6_ce0;
reg ShuffleConvs_0_Downs_5_ce0;
reg ShuffleConvs_0_Downs_4_ce0;
reg ShuffleConvs_0_Downs_3_ce0;
reg ShuffleConvs_0_Downs_2_ce0;
reg ShuffleConvs_0_Downs_1_ce0;
reg ShuffleConvs_0_Downs_ce0;
reg ShuffleConvs_0_Downs_21_ce0;
reg ShuffleConvs_0_Downs_20_ce0;
reg ShuffleConvs_0_Downs_19_ce0;
reg ShuffleConvs_0_Downs_18_ce0;
reg ShuffleConvs_0_Downs_17_ce0;
reg ShuffleConvs_0_Downs_16_ce0;
reg ShuffleConvs_0_Downs_15_ce0;
reg ShuffleConvs_0_Downs_14_ce0;
reg ShuffleConvs_0_Downs_13_ce0;
reg ShuffleConvs_0_Downs_12_ce0;
reg ShuffleConvs_0_Downs_10_ce0;
reg ShuffleConvs_0_Downs_9_ce0;
reg ShuffleConvs_0_Downs_8_ce0;
reg ShuffleConvs_0_Downs_7_ce0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [8:0] tmp_110_cast_fu_569_p1;
reg  signed [8:0] tmp_110_cast_reg_1225;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_106_fu_597_p2;
reg   [9:0] tmp_106_reg_1230;
wire   [4:0] co_4_fu_609_p2;
reg   [4:0] co_4_reg_1238;
reg   [4:0] bias_V_addr_reg_1243;
wire   [0:0] exitcond4_fu_603_p2;
wire   [13:0] tmp_109_fu_644_p2;
reg   [13:0] tmp_109_reg_1248;
wire    ap_CS_fsm_state3;
wire   [5:0] tmp_fu_656_p3;
reg   [5:0] tmp_reg_1256;
wire   [0:0] exitcond5_fu_650_p2;
reg   [12:0] output_V_addr_reg_1261;
wire    ap_CS_fsm_state4;
wire   [5:0] tmp_s_fu_684_p3;
reg   [5:0] tmp_s_reg_1269;
wire   [0:0] exitcond6_fu_678_p2;
wire   [4:0] h_4_fu_692_p2;
wire   [8:0] tmp_113_fu_713_p2;
reg   [8:0] tmp_113_reg_1279;
wire    ap_CS_fsm_state5;
wire   [1:0] m_4_fu_725_p2;
reg   [1:0] m_4_reg_1287;
wire   [11:0] tmp_116_fu_770_p2;
reg   [11:0] tmp_116_reg_1292;
wire   [0:0] exitcond7_fu_719_p2;
wire   [4:0] w_4_fu_776_p2;
reg   [4:0] w_4_reg_1297;
wire    ap_CS_fsm_state6;
wire   [1:0] n_4_fu_802_p2;
reg   [1:0] n_4_reg_1310;
wire   [0:0] exitcond_fu_796_p2;
reg   [7:0] weight_V_load_reg_1435;
wire    ap_CS_fsm_state7;
wire   [7:0] tmp_43_fu_860_p26;
reg   [7:0] tmp_43_reg_1440;
wire   [15:0] p_Val2_4_fu_920_p2;
reg   [15:0] p_Val2_4_reg_1445;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_120_reg_1450;
wire   [15:0] p_Val2_29_fu_946_p2;
reg   [15:0] p_Val2_29_reg_1455;
wire    ap_CS_fsm_state9;
reg   [0:0] signbit_reg_1460;
wire   [7:0] p_Val2_31_fu_980_p2;
reg   [7:0] p_Val2_31_reg_1467;
wire   [0:0] newsignbit_fu_986_p3;
reg   [0:0] newsignbit_reg_1473;
wire   [0:0] carry_fu_1000_p2;
reg   [0:0] carry_reg_1479;
reg   [1:0] tmp_47_reg_1486;
wire   [0:0] p_38_i_i_fu_1058_p2;
reg   [0:0] p_38_i_i_reg_1492;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_49_fu_1074_p2;
reg   [0:0] tmp_49_reg_1497;
wire   [0:0] brmerge40_demorgan_i_fu_1085_p2;
reg   [0:0] brmerge40_demorgan_i_reg_1502;
wire   [0:0] underflow_fu_1102_p2;
reg   [0:0] underflow_reg_1507;
wire   [0:0] brmerge_i_i_i_fu_1107_p2;
reg   [0:0] brmerge_i_i_i_reg_1512;
wire   [7:0] sum_V_fu_1134_p3;
wire    ap_CS_fsm_state11;
reg   [0:0] isneg_reg_1522;
wire    ap_CS_fsm_state12;
wire   [7:0] result_V_fu_1164_p2;
reg   [7:0] result_V_reg_1529;
reg   [0:0] newsignbit_5_reg_1535;
reg   [4:0] co_reg_460;
reg   [4:0] h_reg_472;
reg   [4:0] w_reg_484;
wire    ap_CS_fsm_state13;
reg   [7:0] p_Val2_s_reg_496;
reg   [1:0] m_reg_508;
reg   [7:0] p_Val2_28_reg_519;
reg   [1:0] n_reg_531;
wire   [31:0] co_cast_fu_542_p1;
wire   [31:0] tmp_118_cast_fu_673_p1;
wire   [31:0] tmp_125_cast_fu_791_p1;
wire   [31:0] tmp_126_cast_fu_832_p1;
wire   [6:0] tmp_102_fu_551_p3;
wire   [7:0] p_shl2_cast_fu_559_p1;
wire   [7:0] co_cast_cast_fu_547_p1;
wire   [7:0] tmp_103_fu_563_p2;
wire   [8:0] tmp_104_fu_573_p3;
wire   [5:0] tmp_105_fu_585_p3;
wire   [9:0] p_shl1_cast_fu_593_p1;
wire   [9:0] p_shl_cast_fu_581_p1;
wire   [9:0] h_cast9_cast_fu_615_p1;
wire   [9:0] tmp_107_fu_619_p2;
wire   [10:0] tmp_108_fu_632_p3;
wire   [13:0] p_shl3_cast_fu_624_p3;
wire   [13:0] p_shl4_cast_fu_640_p1;
wire   [13:0] w_cast8_cast_fu_664_p1;
wire   [13:0] tmp_110_fu_668_p2;
wire   [8:0] m_cast7_cast_fu_698_p1;
wire   [8:0] tmp_111_fu_702_p2;
wire   [8:0] tmp_112_fu_707_p2;
wire   [1:0] tmp2_fu_731_p2;
wire  signed [5:0] tmp2_cast_fu_737_p1;
wire   [5:0] tmp_41_fu_741_p2;
wire   [10:0] tmp_114_fu_746_p3;
wire   [6:0] tmp_115_fu_758_p3;
wire   [11:0] p_shl7_cast_fu_766_p1;
wire   [11:0] p_shl6_cast_fu_754_p1;
wire   [8:0] n_cast6_cast_fu_782_p1;
wire   [8:0] tmp_117_fu_786_p2;
wire   [1:0] tmp3_fu_808_p2;
wire  signed [5:0] tmp3_cast_fu_814_p1;
wire   [5:0] tmp_42_fu_818_p2;
wire   [11:0] tmp_77_cast_cast_fu_823_p1;
wire   [11:0] tmp_118_fu_827_p2;
wire  signed [7:0] p_Val2_4_fu_920_p0;
wire  signed [7:0] p_Val2_4_fu_920_p1;
wire   [13:0] tmp_44_fu_934_p3;
wire  signed [15:0] tmp_79_cast_fu_942_p1;
wire   [7:0] p_Val2_30_fu_959_p4;
wire   [7:0] tmp_45_fu_969_p1;
wire   [0:0] tmp_121_fu_972_p3;
wire   [0:0] tmp_46_fu_994_p2;
wire   [0:0] Range1_all_ones_fu_1023_p2;
wire   [0:0] Range1_all_zeros_fu_1028_p2;
wire   [0:0] tmp_123_fu_1016_p3;
wire   [0:0] tmp_48_fu_1040_p2;
wire   [0:0] p_41_i_i_fu_1046_p2;
wire   [0:0] deleted_zeros_fu_1033_p3;
wire   [0:0] p_not_i_i_fu_1063_p2;
wire   [0:0] brmerge_i_i4_fu_1069_p2;
wire   [0:0] deleted_ones_fu_1051_p3;
wire   [0:0] tmp4_demorgan_fu_1090_p2;
wire   [0:0] tmp4_fu_1096_p2;
wire   [0:0] overflow_fu_1079_p2;
wire   [0:0] tmp5_fu_1113_p2;
wire   [0:0] underflow_not_fu_1117_p2;
wire   [7:0] p_Val2_32_mux_fu_1122_p3;
wire   [7:0] p_Val2_s_59_fu_1128_p3;
wire  signed [8:0] tmp_39_fu_1146_p1;
wire  signed [8:0] tmp_38_fu_1142_p1;
wire   [8:0] p_Val2_26_fu_1150_p2;
wire   [0:0] tmp_40_fu_1178_p2;
wire   [0:0] isneg_not_fu_1192_p2;
wire   [0:0] brmerge_i_i_fu_1188_p2;
wire   [0:0] underflow_5_fu_1183_p2;
wire   [0:0] brmerge9_fu_1197_p2;
wire   [7:0] result_V_mux_fu_1202_p3;
wire   [7:0] p_result_V_fu_1209_p3;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

ShuffleNetV2_mux_qcK #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_qcK_x_U89(
    .din1(ShuffleConvs_0_Downs_23_q0),
    .din2(ShuffleConvs_0_Downs_22_q0),
    .din3(ShuffleConvs_0_Downs_11_q0),
    .din4(ShuffleConvs_0_Downs_6_q0),
    .din5(ShuffleConvs_0_Downs_5_q0),
    .din6(ShuffleConvs_0_Downs_4_q0),
    .din7(ShuffleConvs_0_Downs_3_q0),
    .din8(ShuffleConvs_0_Downs_2_q0),
    .din9(ShuffleConvs_0_Downs_1_q0),
    .din10(ShuffleConvs_0_Downs_q0),
    .din11(ShuffleConvs_0_Downs_21_q0),
    .din12(ShuffleConvs_0_Downs_20_q0),
    .din13(ShuffleConvs_0_Downs_19_q0),
    .din14(ShuffleConvs_0_Downs_18_q0),
    .din15(ShuffleConvs_0_Downs_17_q0),
    .din16(ShuffleConvs_0_Downs_16_q0),
    .din17(ShuffleConvs_0_Downs_15_q0),
    .din18(ShuffleConvs_0_Downs_14_q0),
    .din19(ShuffleConvs_0_Downs_13_q0),
    .din20(ShuffleConvs_0_Downs_12_q0),
    .din21(ShuffleConvs_0_Downs_10_q0),
    .din22(ShuffleConvs_0_Downs_9_q0),
    .din23(ShuffleConvs_0_Downs_8_q0),
    .din24(ShuffleConvs_0_Downs_7_q0),
    .din25(co_reg_460),
    .dout(tmp_43_fu_860_p26)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond5_fu_650_p2 == 1'd1))) begin
        co_reg_460 <= co_4_reg_1238;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_460 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_603_p2 == 1'd0))) begin
        h_reg_472 <= 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond6_fu_678_p2 == 1'd1))) begin
        h_reg_472 <= h_4_fu_692_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_796_p2))) begin
        m_reg_508 <= m_4_reg_1287;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_678_p2))) begin
        m_reg_508 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        n_reg_531 <= n_4_reg_1310;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_719_p2))) begin
        n_reg_531 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_28_reg_519 <= sum_V_fu_1134_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_719_p2))) begin
        p_Val2_28_reg_519 <= p_Val2_s_reg_496;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_796_p2))) begin
        p_Val2_s_reg_496 <= p_Val2_28_reg_519;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_678_p2))) begin
        p_Val2_s_reg_496 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond5_fu_650_p2))) begin
        w_reg_484 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        w_reg_484 <= w_4_reg_1297;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_603_p2 == 1'd0))) begin
        bias_V_addr_reg_1243 <= co_cast_fu_542_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        brmerge40_demorgan_i_reg_1502 <= brmerge40_demorgan_i_fu_1085_p2;
        brmerge_i_i_i_reg_1512 <= brmerge_i_i_i_fu_1107_p2;
        p_38_i_i_reg_1492 <= p_38_i_i_fu_1058_p2;
        tmp_49_reg_1497 <= tmp_49_fu_1074_p2;
        underflow_reg_1507 <= underflow_fu_1102_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        carry_reg_1479 <= carry_fu_1000_p2;
        newsignbit_reg_1473 <= p_Val2_31_fu_980_p2[32'd7];
        p_Val2_29_reg_1455 <= p_Val2_29_fu_946_p2;
        p_Val2_31_reg_1467 <= p_Val2_31_fu_980_p2;
        signbit_reg_1460 <= p_Val2_29_fu_946_p2[32'd15];
        tmp_47_reg_1486 <= {{p_Val2_29_fu_946_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_4_reg_1238 <= co_4_fu_609_p2;
        tmp_106_reg_1230[9 : 1] <= tmp_106_fu_597_p2[9 : 1];
        tmp_110_cast_reg_1225 <= tmp_110_cast_fu_569_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        isneg_reg_1522 <= p_Val2_26_fu_1150_p2[32'd8];
        newsignbit_5_reg_1535 <= result_V_fu_1164_p2[32'd7];
        result_V_reg_1529 <= result_V_fu_1164_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_4_reg_1287 <= m_4_fu_725_p2;
        tmp_113_reg_1279 <= tmp_113_fu_713_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_4_reg_1310 <= n_4_fu_802_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_addr_reg_1261 <= tmp_118_cast_fu_673_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_4_reg_1445 <= p_Val2_4_fu_920_p2;
        tmp_120_reg_1450 <= p_Val2_4_fu_920_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_109_reg_1248[13 : 1] <= tmp_109_fu_644_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_719_p2))) begin
        tmp_116_reg_1292[11 : 1] <= tmp_116_fu_770_p2[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_43_reg_1440 <= tmp_43_fu_860_p26;
        weight_V_load_reg_1435 <= weight_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond5_fu_650_p2))) begin
        tmp_reg_1256[5 : 1] <= tmp_fu_656_p3[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_678_p2))) begin
        tmp_s_reg_1269[5 : 1] <= tmp_s_fu_684_p3[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond7_fu_719_p2))) begin
        w_4_reg_1297 <= w_4_fu_776_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_10_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_11_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_12_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_13_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_14_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_15_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_16_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_17_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_18_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_19_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_1_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_20_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_21_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_22_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_23_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_2_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_3_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_4_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_5_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_6_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_7_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_8_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_9_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_0_Downs_ce0 = 1'b1;
    end else begin
        ShuffleConvs_0_Downs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_603_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_603_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_603_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond5_fu_650_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond6_fu_678_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_719_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_796_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_1023_p2 = ((tmp_47_reg_1486 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_1028_p2 = ((tmp_47_reg_1486 == 2'd0) ? 1'b1 : 1'b0);

assign ShuffleConvs_0_Downs_10_address0 = tmp_126_cast_fu_832_p1;

assign ShuffleConvs_0_Downs_11_address0 = tmp_126_cast_fu_832_p1;

assign ShuffleConvs_0_Downs_12_address0 = tmp_126_cast_fu_832_p1;

assign ShuffleConvs_0_Downs_13_address0 = tmp_126_cast_fu_832_p1;

assign ShuffleConvs_0_Downs_14_address0 = tmp_126_cast_fu_832_p1;

assign ShuffleConvs_0_Downs_15_address0 = tmp_126_cast_fu_832_p1;

assign ShuffleConvs_0_Downs_16_address0 = tmp_126_cast_fu_832_p1;

assign ShuffleConvs_0_Downs_17_address0 = tmp_126_cast_fu_832_p1;

assign ShuffleConvs_0_Downs_18_address0 = tmp_126_cast_fu_832_p1;

assign ShuffleConvs_0_Downs_19_address0 = tmp_126_cast_fu_832_p1;

assign ShuffleConvs_0_Downs_1_address0 = tmp_126_cast_fu_832_p1;

assign ShuffleConvs_0_Downs_20_address0 = tmp_126_cast_fu_832_p1;

assign ShuffleConvs_0_Downs_21_address0 = tmp_126_cast_fu_832_p1;

assign ShuffleConvs_0_Downs_22_address0 = tmp_126_cast_fu_832_p1;

assign ShuffleConvs_0_Downs_23_address0 = tmp_126_cast_fu_832_p1;

assign ShuffleConvs_0_Downs_2_address0 = tmp_126_cast_fu_832_p1;

assign ShuffleConvs_0_Downs_3_address0 = tmp_126_cast_fu_832_p1;

assign ShuffleConvs_0_Downs_4_address0 = tmp_126_cast_fu_832_p1;

assign ShuffleConvs_0_Downs_5_address0 = tmp_126_cast_fu_832_p1;

assign ShuffleConvs_0_Downs_6_address0 = tmp_126_cast_fu_832_p1;

assign ShuffleConvs_0_Downs_7_address0 = tmp_126_cast_fu_832_p1;

assign ShuffleConvs_0_Downs_8_address0 = tmp_126_cast_fu_832_p1;

assign ShuffleConvs_0_Downs_9_address0 = tmp_126_cast_fu_832_p1;

assign ShuffleConvs_0_Downs_address0 = tmp_126_cast_fu_832_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_1243;

assign brmerge40_demorgan_i_fu_1085_p2 = (newsignbit_reg_1473 & deleted_ones_fu_1051_p3);

assign brmerge9_fu_1197_p2 = (newsignbit_5_reg_1535 | isneg_not_fu_1192_p2);

assign brmerge_i_i4_fu_1069_p2 = (newsignbit_reg_1473 | p_not_i_i_fu_1063_p2);

assign brmerge_i_i_fu_1188_p2 = (isneg_reg_1522 ^ newsignbit_5_reg_1535);

assign brmerge_i_i_i_fu_1107_p2 = (underflow_fu_1102_p2 | overflow_fu_1079_p2);

assign carry_fu_1000_p2 = (tmp_121_fu_972_p3 & tmp_46_fu_994_p2);

assign co_4_fu_609_p2 = (co_reg_460 + 5'd1);

assign co_cast_cast_fu_547_p1 = co_reg_460;

assign co_cast_fu_542_p1 = co_reg_460;

assign deleted_ones_fu_1051_p3 = ((carry_reg_1479[0:0] === 1'b1) ? p_41_i_i_fu_1046_p2 : Range1_all_ones_fu_1023_p2);

assign deleted_zeros_fu_1033_p3 = ((carry_reg_1479[0:0] === 1'b1) ? Range1_all_ones_fu_1023_p2 : Range1_all_zeros_fu_1028_p2);

assign exitcond4_fu_603_p2 = ((co_reg_460 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond5_fu_650_p2 = ((h_reg_472 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond6_fu_678_p2 = ((w_reg_484 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond7_fu_719_p2 = ((m_reg_508 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_796_p2 = ((n_reg_531 == 2'd3) ? 1'b1 : 1'b0);

assign h_4_fu_692_p2 = (h_reg_472 + 5'd1);

assign h_cast9_cast_fu_615_p1 = h_reg_472;

assign isneg_not_fu_1192_p2 = (isneg_reg_1522 ^ 1'd1);

assign m_4_fu_725_p2 = (2'd1 + m_reg_508);

assign m_cast7_cast_fu_698_p1 = m_reg_508;

assign n_4_fu_802_p2 = (n_reg_531 + 2'd1);

assign n_cast6_cast_fu_782_p1 = n_reg_531;

assign newsignbit_fu_986_p3 = p_Val2_31_fu_980_p2[32'd7];

assign output_V_address0 = output_V_addr_reg_1261;

assign output_V_d0 = ((brmerge9_fu_1197_p2[0:0] === 1'b1) ? result_V_mux_fu_1202_p3 : p_result_V_fu_1209_p3);

assign overflow_fu_1079_p2 = (brmerge_i_i4_fu_1069_p2 & tmp_49_fu_1074_p2);

assign p_38_i_i_fu_1058_p2 = (carry_reg_1479 & Range1_all_ones_fu_1023_p2);

assign p_41_i_i_fu_1046_p2 = (signbit_reg_1460 & tmp_48_fu_1040_p2);

assign p_Val2_26_fu_1150_p2 = ($signed(tmp_39_fu_1146_p1) + $signed(tmp_38_fu_1142_p1));

assign p_Val2_29_fu_946_p2 = ($signed(tmp_79_cast_fu_942_p1) + $signed(p_Val2_4_reg_1445));

assign p_Val2_30_fu_959_p4 = {{p_Val2_29_fu_946_p2[13:6]}};

assign p_Val2_31_fu_980_p2 = (p_Val2_30_fu_959_p4 + tmp_45_fu_969_p1);

assign p_Val2_32_mux_fu_1122_p3 = ((brmerge_i_i_i_reg_1512[0:0] === 1'b1) ? 8'd127 : p_Val2_31_reg_1467);

assign p_Val2_4_fu_920_p0 = weight_V_load_reg_1435;

assign p_Val2_4_fu_920_p1 = tmp_43_reg_1440;

assign p_Val2_4_fu_920_p2 = ($signed(p_Val2_4_fu_920_p0) * $signed(p_Val2_4_fu_920_p1));

assign p_Val2_s_59_fu_1128_p3 = ((underflow_reg_1507[0:0] === 1'b1) ? 8'd128 : p_Val2_31_reg_1467);

assign p_not_i_i_fu_1063_p2 = (deleted_zeros_fu_1033_p3 ^ 1'd1);

assign p_result_V_fu_1209_p3 = ((underflow_5_fu_1183_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_1529);

assign p_shl1_cast_fu_593_p1 = tmp_105_fu_585_p3;

assign p_shl2_cast_fu_559_p1 = tmp_102_fu_551_p3;

assign p_shl3_cast_fu_624_p3 = {{tmp_107_fu_619_p2}, {4'd0}};

assign p_shl4_cast_fu_640_p1 = tmp_108_fu_632_p3;

assign p_shl6_cast_fu_754_p1 = tmp_114_fu_746_p3;

assign p_shl7_cast_fu_766_p1 = tmp_115_fu_758_p3;

assign p_shl_cast_fu_581_p1 = tmp_104_fu_573_p3;

assign result_V_fu_1164_p2 = (bias_V_q0 + p_Val2_s_reg_496);

assign result_V_mux_fu_1202_p3 = ((brmerge_i_i_fu_1188_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_1529);

assign sum_V_fu_1134_p3 = ((underflow_not_fu_1117_p2[0:0] === 1'b1) ? p_Val2_32_mux_fu_1122_p3 : p_Val2_s_59_fu_1128_p3);

assign tmp2_cast_fu_737_p1 = $signed(tmp2_fu_731_p2);

assign tmp2_fu_731_p2 = (m_reg_508 ^ 2'd2);

assign tmp3_cast_fu_814_p1 = $signed(tmp3_fu_808_p2);

assign tmp3_fu_808_p2 = (n_reg_531 ^ 2'd2);

assign tmp4_demorgan_fu_1090_p2 = (p_38_i_i_fu_1058_p2 | brmerge40_demorgan_i_fu_1085_p2);

assign tmp4_fu_1096_p2 = (tmp4_demorgan_fu_1090_p2 ^ 1'd1);

assign tmp5_fu_1113_p2 = (brmerge40_demorgan_i_reg_1502 | tmp_49_reg_1497);

assign tmp_102_fu_551_p3 = {{co_reg_460}, {2'd0}};

assign tmp_103_fu_563_p2 = (p_shl2_cast_fu_559_p1 - co_cast_cast_fu_547_p1);

assign tmp_104_fu_573_p3 = {{co_reg_460}, {4'd0}};

assign tmp_105_fu_585_p3 = {{co_reg_460}, {1'd0}};

assign tmp_106_fu_597_p2 = (p_shl1_cast_fu_593_p1 + p_shl_cast_fu_581_p1);

assign tmp_107_fu_619_p2 = (h_cast9_cast_fu_615_p1 + tmp_106_reg_1230);

assign tmp_108_fu_632_p3 = {{tmp_107_fu_619_p2}, {1'd0}};

assign tmp_109_fu_644_p2 = (p_shl3_cast_fu_624_p3 + p_shl4_cast_fu_640_p1);

assign tmp_110_cast_fu_569_p1 = $signed(tmp_103_fu_563_p2);

assign tmp_110_fu_668_p2 = (tmp_109_reg_1248 + w_cast8_cast_fu_664_p1);

assign tmp_111_fu_702_p2 = ($signed(m_cast7_cast_fu_698_p1) + $signed(tmp_110_cast_reg_1225));

assign tmp_112_fu_707_p2 = tmp_111_fu_702_p2 << 9'd2;

assign tmp_113_fu_713_p2 = (tmp_112_fu_707_p2 - tmp_111_fu_702_p2);

assign tmp_114_fu_746_p3 = {{tmp_41_fu_741_p2}, {5'd0}};

assign tmp_115_fu_758_p3 = {{tmp_41_fu_741_p2}, {1'd0}};

assign tmp_116_fu_770_p2 = (p_shl7_cast_fu_766_p1 + p_shl6_cast_fu_754_p1);

assign tmp_117_fu_786_p2 = (tmp_113_reg_1279 + n_cast6_cast_fu_782_p1);

assign tmp_118_cast_fu_673_p1 = tmp_110_fu_668_p2;

assign tmp_118_fu_827_p2 = (tmp_77_cast_cast_fu_823_p1 + tmp_116_reg_1292);

assign tmp_121_fu_972_p3 = p_Val2_29_fu_946_p2[32'd13];

assign tmp_123_fu_1016_p3 = p_Val2_29_reg_1455[32'd14];

assign tmp_125_cast_fu_791_p1 = tmp_117_fu_786_p2;

assign tmp_126_cast_fu_832_p1 = tmp_118_fu_827_p2;

assign tmp_38_fu_1142_p1 = $signed(p_Val2_s_reg_496);

assign tmp_39_fu_1146_p1 = $signed(bias_V_q0);

assign tmp_40_fu_1178_p2 = (newsignbit_5_reg_1535 ^ 1'd1);

assign tmp_41_fu_741_p2 = ($signed(tmp_reg_1256) + $signed(tmp2_cast_fu_737_p1));

assign tmp_42_fu_818_p2 = ($signed(tmp3_cast_fu_814_p1) + $signed(tmp_s_reg_1269));

assign tmp_44_fu_934_p3 = {{p_Val2_28_reg_519}, {6'd0}};

assign tmp_45_fu_969_p1 = tmp_120_reg_1450;

assign tmp_46_fu_994_p2 = (newsignbit_fu_986_p3 ^ 1'd1);

assign tmp_48_fu_1040_p2 = (tmp_123_fu_1016_p3 ^ 1'd1);

assign tmp_49_fu_1074_p2 = (signbit_reg_1460 ^ 1'd1);

assign tmp_77_cast_cast_fu_823_p1 = tmp_42_fu_818_p2;

assign tmp_79_cast_fu_942_p1 = $signed(tmp_44_fu_934_p3);

assign tmp_fu_656_p3 = {{h_reg_472}, {1'd0}};

assign tmp_s_fu_684_p3 = {{w_reg_484}, {1'd0}};

assign underflow_5_fu_1183_p2 = (isneg_reg_1522 & tmp_40_fu_1178_p2);

assign underflow_fu_1102_p2 = (signbit_reg_1460 & tmp4_fu_1096_p2);

assign underflow_not_fu_1117_p2 = (tmp5_fu_1113_p2 | p_38_i_i_reg_1492);

assign w_4_fu_776_p2 = (w_reg_484 + 5'd1);

assign w_cast8_cast_fu_664_p1 = w_reg_484;

assign weight_V_address0 = tmp_125_cast_fu_791_p1;

always @ (posedge ap_clk) begin
    tmp_106_reg_1230[0] <= 1'b0;
    tmp_109_reg_1248[0] <= 1'b0;
    tmp_reg_1256[0] <= 1'b0;
    tmp_s_reg_1269[0] <= 1'b0;
    tmp_116_reg_1292[0] <= 1'b0;
end

endmodule //subconv_3x3_32_strid_1
