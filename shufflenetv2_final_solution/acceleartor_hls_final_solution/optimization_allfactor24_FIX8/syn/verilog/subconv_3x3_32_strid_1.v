// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_32_strid_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        conv1_output_p_V_address0,
        conv1_output_p_V_ce0,
        conv1_output_p_V_q0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [4:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [14:0] conv1_output_p_V_address0;
output   conv1_output_p_V_ce0;
input  [7:0] conv1_output_p_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg conv1_output_p_V_ce0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [8:0] tmp_109_cast_fu_246_p1;
reg  signed [8:0] tmp_109_cast_reg_852;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_106_fu_278_p2;
reg   [9:0] tmp_106_reg_857;
wire   [10:0] tmp_108_fu_296_p2;
reg   [10:0] tmp_108_reg_862;
wire   [4:0] co_4_fu_308_p2;
reg   [4:0] co_4_reg_870;
reg   [4:0] bias_V_addr_reg_875;
wire   [0:0] exitcond4_fu_302_p2;
wire   [13:0] tmp_111_fu_343_p2;
reg   [13:0] tmp_111_reg_880;
wire    ap_CS_fsm_state3;
wire   [5:0] tmp_fu_355_p3;
reg   [5:0] tmp_reg_888;
wire   [0:0] exitcond5_fu_349_p2;
reg   [12:0] output_V_addr_reg_893;
wire    ap_CS_fsm_state4;
wire   [5:0] tmp_s_fu_383_p3;
reg   [5:0] tmp_s_reg_901;
wire   [0:0] exitcond6_fu_377_p2;
wire   [4:0] h_4_fu_391_p2;
wire   [8:0] tmp_115_fu_412_p2;
reg   [8:0] tmp_115_reg_911;
wire    ap_CS_fsm_state5;
wire   [1:0] m_4_fu_424_p2;
reg   [1:0] m_4_reg_919;
wire   [15:0] tmp_117_fu_474_p2;
reg   [15:0] tmp_117_reg_924;
wire   [0:0] exitcond7_fu_418_p2;
wire   [4:0] w_4_fu_480_p2;
reg   [4:0] w_4_reg_929;
wire    ap_CS_fsm_state6;
wire   [1:0] n_4_fu_506_p2;
reg   [1:0] n_4_reg_942;
wire   [0:0] exitcond_fu_500_p2;
reg   [7:0] weight_V_load_reg_952;
wire    ap_CS_fsm_state7;
reg   [7:0] conv1_output_p_V_loa_reg_957;
wire   [15:0] p_Val2_4_fu_547_p2;
reg   [15:0] p_Val2_4_reg_962;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_122_reg_967;
wire   [15:0] p_Val2_29_fu_573_p2;
reg   [15:0] p_Val2_29_reg_972;
wire    ap_CS_fsm_state9;
reg   [0:0] signbit_reg_977;
wire   [7:0] p_Val2_31_fu_607_p2;
reg   [7:0] p_Val2_31_reg_984;
wire   [0:0] newsignbit_fu_613_p3;
reg   [0:0] newsignbit_reg_990;
wire   [0:0] carry_fu_627_p2;
reg   [0:0] carry_reg_996;
reg   [1:0] tmp_46_reg_1003;
wire   [0:0] p_38_i_i_fu_685_p2;
reg   [0:0] p_38_i_i_reg_1009;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_48_fu_701_p2;
reg   [0:0] tmp_48_reg_1014;
wire   [0:0] brmerge40_demorgan_i_fu_712_p2;
reg   [0:0] brmerge40_demorgan_i_reg_1019;
wire   [0:0] underflow_fu_729_p2;
reg   [0:0] underflow_reg_1024;
wire   [0:0] brmerge_i_i_i_fu_734_p2;
reg   [0:0] brmerge_i_i_i_reg_1029;
wire   [7:0] sum_V_fu_761_p3;
wire    ap_CS_fsm_state11;
reg   [0:0] isneg_reg_1039;
wire    ap_CS_fsm_state12;
wire   [7:0] result_V_fu_791_p2;
reg   [7:0] result_V_reg_1046;
reg   [0:0] newsignbit_5_reg_1052;
reg   [4:0] co_reg_138;
reg   [4:0] h_reg_149;
reg   [4:0] w_reg_161;
wire    ap_CS_fsm_state13;
reg   [7:0] p_Val2_s_reg_173;
reg   [1:0] m_reg_185;
reg   [7:0] p_Val2_28_reg_196;
reg   [1:0] n_reg_208;
wire   [31:0] co_cast_fu_219_p1;
wire   [31:0] tmp_120_cast_fu_372_p1;
wire   [31:0] tmp_128_cast_fu_495_p1;
wire   [31:0] tmp_129_cast_fu_536_p1;
wire   [6:0] tmp_102_fu_228_p3;
wire   [7:0] p_shl4_cast_fu_236_p1;
wire   [7:0] co_cast_cast_fu_224_p1;
wire   [7:0] tmp_103_fu_240_p2;
wire   [8:0] tmp_104_fu_250_p3;
wire   [5:0] tmp_105_fu_262_p3;
wire   [9:0] p_shl3_cast_fu_274_p1;
wire   [9:0] p_shl2_cast_fu_258_p1;
wire   [9:0] tmp_107_fu_284_p3;
wire   [10:0] p_shl3_cast1_fu_270_p1;
wire   [10:0] p_shl_cast_fu_292_p1;
wire   [9:0] h_cast9_cast_fu_314_p1;
wire   [9:0] tmp_109_fu_318_p2;
wire   [10:0] tmp_110_fu_331_p3;
wire   [13:0] p_shl5_cast_fu_323_p3;
wire   [13:0] p_shl6_cast_fu_339_p1;
wire   [13:0] w_cast8_cast_fu_363_p1;
wire   [13:0] tmp_112_fu_367_p2;
wire   [8:0] m_cast7_cast_fu_397_p1;
wire   [8:0] tmp_113_fu_401_p2;
wire   [8:0] tmp_114_fu_406_p2;
wire   [1:0] tmp2_fu_430_p2;
wire  signed [5:0] tmp2_cast_fu_436_p1;
wire   [5:0] tmp_41_fu_440_p2;
wire   [10:0] tmp_73_cast_cast_fu_445_p1;
wire   [10:0] tmp_116_fu_449_p2;
wire   [11:0] tmp_118_fu_462_p3;
wire   [15:0] p_shl8_cast_fu_454_p3;
wire   [15:0] p_shl9_cast_fu_470_p1;
wire   [8:0] n_cast6_cast_fu_486_p1;
wire   [8:0] tmp_119_fu_490_p2;
wire   [1:0] tmp3_fu_512_p2;
wire  signed [5:0] tmp3_cast_fu_518_p1;
wire   [5:0] tmp_42_fu_522_p2;
wire   [15:0] tmp_77_cast_cast_fu_527_p1;
wire   [15:0] tmp_120_fu_531_p2;
wire  signed [7:0] p_Val2_4_fu_547_p0;
wire  signed [7:0] p_Val2_4_fu_547_p1;
wire   [13:0] tmp_43_fu_561_p3;
wire  signed [15:0] tmp_79_cast_fu_569_p1;
wire   [7:0] p_Val2_30_fu_586_p4;
wire   [7:0] tmp_44_fu_596_p1;
wire   [0:0] tmp_123_fu_599_p3;
wire   [0:0] tmp_45_fu_621_p2;
wire   [0:0] Range1_all_ones_fu_650_p2;
wire   [0:0] Range1_all_zeros_fu_655_p2;
wire   [0:0] tmp_125_fu_643_p3;
wire   [0:0] tmp_47_fu_667_p2;
wire   [0:0] p_41_i_i_fu_673_p2;
wire   [0:0] deleted_zeros_fu_660_p3;
wire   [0:0] p_not_i_i_fu_690_p2;
wire   [0:0] brmerge_i_i4_fu_696_p2;
wire   [0:0] deleted_ones_fu_678_p3;
wire   [0:0] tmp4_demorgan_fu_717_p2;
wire   [0:0] tmp4_fu_723_p2;
wire   [0:0] overflow_fu_706_p2;
wire   [0:0] tmp5_fu_740_p2;
wire   [0:0] underflow_not_fu_744_p2;
wire   [7:0] p_Val2_32_mux_fu_749_p3;
wire   [7:0] p_Val2_s_55_fu_755_p3;
wire  signed [8:0] tmp_39_fu_773_p1;
wire  signed [8:0] tmp_38_fu_769_p1;
wire   [8:0] p_Val2_26_fu_777_p2;
wire   [0:0] tmp_40_fu_805_p2;
wire   [0:0] isneg_not_fu_819_p2;
wire   [0:0] brmerge_i_i_fu_815_p2;
wire   [0:0] underflow_5_fu_810_p2;
wire   [0:0] brmerge9_fu_824_p2;
wire   [7:0] result_V_mux_fu_829_p3;
wire   [7:0] p_result_V_fu_836_p3;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond5_fu_349_p2 == 1'd1))) begin
        co_reg_138 <= co_4_reg_870;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_138 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_302_p2 == 1'd0))) begin
        h_reg_149 <= 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond6_fu_377_p2 == 1'd1))) begin
        h_reg_149 <= h_4_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_500_p2))) begin
        m_reg_185 <= m_4_reg_919;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_377_p2))) begin
        m_reg_185 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        n_reg_208 <= n_4_reg_942;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_418_p2))) begin
        n_reg_208 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_28_reg_196 <= sum_V_fu_761_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_418_p2))) begin
        p_Val2_28_reg_196 <= p_Val2_s_reg_173;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_500_p2))) begin
        p_Val2_s_reg_173 <= p_Val2_28_reg_196;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_377_p2))) begin
        p_Val2_s_reg_173 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond5_fu_349_p2))) begin
        w_reg_161 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        w_reg_161 <= w_4_reg_929;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_302_p2 == 1'd0))) begin
        bias_V_addr_reg_875 <= co_cast_fu_219_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        brmerge40_demorgan_i_reg_1019 <= brmerge40_demorgan_i_fu_712_p2;
        brmerge_i_i_i_reg_1029 <= brmerge_i_i_i_fu_734_p2;
        p_38_i_i_reg_1009 <= p_38_i_i_fu_685_p2;
        tmp_48_reg_1014 <= tmp_48_fu_701_p2;
        underflow_reg_1024 <= underflow_fu_729_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        carry_reg_996 <= carry_fu_627_p2;
        newsignbit_reg_990 <= p_Val2_31_fu_607_p2[32'd7];
        p_Val2_29_reg_972 <= p_Val2_29_fu_573_p2;
        p_Val2_31_reg_984 <= p_Val2_31_fu_607_p2;
        signbit_reg_977 <= p_Val2_29_fu_573_p2[32'd15];
        tmp_46_reg_1003 <= {{p_Val2_29_fu_573_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_4_reg_870 <= co_4_fu_308_p2;
        tmp_106_reg_857[9 : 1] <= tmp_106_fu_278_p2[9 : 1];
        tmp_108_reg_862[10 : 1] <= tmp_108_fu_296_p2[10 : 1];
        tmp_109_cast_reg_852 <= tmp_109_cast_fu_246_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        conv1_output_p_V_loa_reg_957 <= conv1_output_p_V_q0;
        weight_V_load_reg_952 <= weight_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        isneg_reg_1039 <= p_Val2_26_fu_777_p2[32'd8];
        newsignbit_5_reg_1052 <= result_V_fu_791_p2[32'd7];
        result_V_reg_1046 <= result_V_fu_791_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_4_reg_919 <= m_4_fu_424_p2;
        tmp_115_reg_911 <= tmp_115_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_4_reg_942 <= n_4_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_addr_reg_893 <= tmp_120_cast_fu_372_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_4_reg_962 <= p_Val2_4_fu_547_p2;
        tmp_122_reg_967 <= p_Val2_4_fu_547_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_111_reg_880[13 : 1] <= tmp_111_fu_343_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_418_p2))) begin
        tmp_117_reg_924[15 : 1] <= tmp_117_fu_474_p2[15 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond5_fu_349_p2))) begin
        tmp_reg_888[5 : 1] <= tmp_fu_355_p3[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond6_fu_377_p2))) begin
        tmp_s_reg_901[5 : 1] <= tmp_s_fu_383_p3[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond7_fu_418_p2))) begin
        w_4_reg_929 <= w_4_fu_480_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_302_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_302_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_p_V_ce0 = 1'b1;
    end else begin
        conv1_output_p_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_302_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond5_fu_349_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond6_fu_377_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond7_fu_418_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_500_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_650_p2 = ((tmp_46_reg_1003 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_655_p2 = ((tmp_46_reg_1003 == 2'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_875;

assign brmerge40_demorgan_i_fu_712_p2 = (newsignbit_reg_990 & deleted_ones_fu_678_p3);

assign brmerge9_fu_824_p2 = (newsignbit_5_reg_1052 | isneg_not_fu_819_p2);

assign brmerge_i_i4_fu_696_p2 = (newsignbit_reg_990 | p_not_i_i_fu_690_p2);

assign brmerge_i_i_fu_815_p2 = (isneg_reg_1039 ^ newsignbit_5_reg_1052);

assign brmerge_i_i_i_fu_734_p2 = (underflow_fu_729_p2 | overflow_fu_706_p2);

assign carry_fu_627_p2 = (tmp_123_fu_599_p3 & tmp_45_fu_621_p2);

assign co_4_fu_308_p2 = (co_reg_138 + 5'd1);

assign co_cast_cast_fu_224_p1 = co_reg_138;

assign co_cast_fu_219_p1 = co_reg_138;

assign conv1_output_p_V_address0 = tmp_129_cast_fu_536_p1;

assign deleted_ones_fu_678_p3 = ((carry_reg_996[0:0] === 1'b1) ? p_41_i_i_fu_673_p2 : Range1_all_ones_fu_650_p2);

assign deleted_zeros_fu_660_p3 = ((carry_reg_996[0:0] === 1'b1) ? Range1_all_ones_fu_650_p2 : Range1_all_zeros_fu_655_p2);

assign exitcond4_fu_302_p2 = ((co_reg_138 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond5_fu_349_p2 = ((h_reg_149 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond6_fu_377_p2 = ((w_reg_161 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond7_fu_418_p2 = ((m_reg_185 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_500_p2 = ((n_reg_208 == 2'd3) ? 1'b1 : 1'b0);

assign h_4_fu_391_p2 = (h_reg_149 + 5'd1);

assign h_cast9_cast_fu_314_p1 = h_reg_149;

assign isneg_not_fu_819_p2 = (isneg_reg_1039 ^ 1'd1);

assign m_4_fu_424_p2 = (2'd1 + m_reg_185);

assign m_cast7_cast_fu_397_p1 = m_reg_185;

assign n_4_fu_506_p2 = (n_reg_208 + 2'd1);

assign n_cast6_cast_fu_486_p1 = n_reg_208;

assign newsignbit_fu_613_p3 = p_Val2_31_fu_607_p2[32'd7];

assign output_V_address0 = output_V_addr_reg_893;

assign output_V_d0 = ((brmerge9_fu_824_p2[0:0] === 1'b1) ? result_V_mux_fu_829_p3 : p_result_V_fu_836_p3);

assign overflow_fu_706_p2 = (brmerge_i_i4_fu_696_p2 & tmp_48_fu_701_p2);

assign p_38_i_i_fu_685_p2 = (carry_reg_996 & Range1_all_ones_fu_650_p2);

assign p_41_i_i_fu_673_p2 = (signbit_reg_977 & tmp_47_fu_667_p2);

assign p_Val2_26_fu_777_p2 = ($signed(tmp_39_fu_773_p1) + $signed(tmp_38_fu_769_p1));

assign p_Val2_29_fu_573_p2 = ($signed(tmp_79_cast_fu_569_p1) + $signed(p_Val2_4_reg_962));

assign p_Val2_30_fu_586_p4 = {{p_Val2_29_fu_573_p2[13:6]}};

assign p_Val2_31_fu_607_p2 = (p_Val2_30_fu_586_p4 + tmp_44_fu_596_p1);

assign p_Val2_32_mux_fu_749_p3 = ((brmerge_i_i_i_reg_1029[0:0] === 1'b1) ? 8'd127 : p_Val2_31_reg_984);

assign p_Val2_4_fu_547_p0 = weight_V_load_reg_952;

assign p_Val2_4_fu_547_p1 = conv1_output_p_V_loa_reg_957;

assign p_Val2_4_fu_547_p2 = ($signed(p_Val2_4_fu_547_p0) * $signed(p_Val2_4_fu_547_p1));

assign p_Val2_s_55_fu_755_p3 = ((underflow_reg_1024[0:0] === 1'b1) ? 8'd128 : p_Val2_31_reg_984);

assign p_not_i_i_fu_690_p2 = (deleted_zeros_fu_660_p3 ^ 1'd1);

assign p_result_V_fu_836_p3 = ((underflow_5_fu_810_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_1046);

assign p_shl2_cast_fu_258_p1 = tmp_104_fu_250_p3;

assign p_shl3_cast1_fu_270_p1 = tmp_105_fu_262_p3;

assign p_shl3_cast_fu_274_p1 = tmp_105_fu_262_p3;

assign p_shl4_cast_fu_236_p1 = tmp_102_fu_228_p3;

assign p_shl5_cast_fu_323_p3 = {{tmp_109_fu_318_p2}, {4'd0}};

assign p_shl6_cast_fu_339_p1 = tmp_110_fu_331_p3;

assign p_shl8_cast_fu_454_p3 = {{tmp_116_fu_449_p2}, {5'd0}};

assign p_shl9_cast_fu_470_p1 = tmp_118_fu_462_p3;

assign p_shl_cast_fu_292_p1 = tmp_107_fu_284_p3;

assign result_V_fu_791_p2 = (bias_V_q0 + p_Val2_s_reg_173);

assign result_V_mux_fu_829_p3 = ((brmerge_i_i_fu_815_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_1046);

assign sum_V_fu_761_p3 = ((underflow_not_fu_744_p2[0:0] === 1'b1) ? p_Val2_32_mux_fu_749_p3 : p_Val2_s_55_fu_755_p3);

assign tmp2_cast_fu_436_p1 = $signed(tmp2_fu_430_p2);

assign tmp2_fu_430_p2 = (m_reg_185 ^ 2'd2);

assign tmp3_cast_fu_518_p1 = $signed(tmp3_fu_512_p2);

assign tmp3_fu_512_p2 = (n_reg_208 ^ 2'd2);

assign tmp4_demorgan_fu_717_p2 = (p_38_i_i_fu_685_p2 | brmerge40_demorgan_i_fu_712_p2);

assign tmp4_fu_723_p2 = (tmp4_demorgan_fu_717_p2 ^ 1'd1);

assign tmp5_fu_740_p2 = (brmerge40_demorgan_i_reg_1019 | tmp_48_reg_1014);

assign tmp_102_fu_228_p3 = {{co_reg_138}, {2'd0}};

assign tmp_103_fu_240_p2 = (p_shl4_cast_fu_236_p1 - co_cast_cast_fu_224_p1);

assign tmp_104_fu_250_p3 = {{co_reg_138}, {4'd0}};

assign tmp_105_fu_262_p3 = {{co_reg_138}, {1'd0}};

assign tmp_106_fu_278_p2 = (p_shl3_cast_fu_274_p1 + p_shl2_cast_fu_258_p1);

assign tmp_107_fu_284_p3 = {{co_reg_138}, {5'd0}};

assign tmp_108_fu_296_p2 = (p_shl3_cast1_fu_270_p1 + p_shl_cast_fu_292_p1);

assign tmp_109_cast_fu_246_p1 = $signed(tmp_103_fu_240_p2);

assign tmp_109_fu_318_p2 = (h_cast9_cast_fu_314_p1 + tmp_106_reg_857);

assign tmp_110_fu_331_p3 = {{tmp_109_fu_318_p2}, {1'd0}};

assign tmp_111_fu_343_p2 = (p_shl5_cast_fu_323_p3 + p_shl6_cast_fu_339_p1);

assign tmp_112_fu_367_p2 = (tmp_111_reg_880 + w_cast8_cast_fu_363_p1);

assign tmp_113_fu_401_p2 = ($signed(m_cast7_cast_fu_397_p1) + $signed(tmp_109_cast_reg_852));

assign tmp_114_fu_406_p2 = tmp_113_fu_401_p2 << 9'd2;

assign tmp_115_fu_412_p2 = (tmp_114_fu_406_p2 - tmp_113_fu_401_p2);

assign tmp_116_fu_449_p2 = (tmp_73_cast_cast_fu_445_p1 + tmp_108_reg_862);

assign tmp_117_fu_474_p2 = (p_shl8_cast_fu_454_p3 + p_shl9_cast_fu_470_p1);

assign tmp_118_fu_462_p3 = {{tmp_116_fu_449_p2}, {1'd0}};

assign tmp_119_fu_490_p2 = (tmp_115_reg_911 + n_cast6_cast_fu_486_p1);

assign tmp_120_cast_fu_372_p1 = tmp_112_fu_367_p2;

assign tmp_120_fu_531_p2 = (tmp_77_cast_cast_fu_527_p1 + tmp_117_reg_924);

assign tmp_123_fu_599_p3 = p_Val2_29_fu_573_p2[32'd13];

assign tmp_125_fu_643_p3 = p_Val2_29_reg_972[32'd14];

assign tmp_128_cast_fu_495_p1 = tmp_119_fu_490_p2;

assign tmp_129_cast_fu_536_p1 = tmp_120_fu_531_p2;

assign tmp_38_fu_769_p1 = $signed(p_Val2_s_reg_173);

assign tmp_39_fu_773_p1 = $signed(bias_V_q0);

assign tmp_40_fu_805_p2 = (newsignbit_5_reg_1052 ^ 1'd1);

assign tmp_41_fu_440_p2 = ($signed(tmp2_cast_fu_436_p1) + $signed(tmp_reg_888));

assign tmp_42_fu_522_p2 = ($signed(tmp3_cast_fu_518_p1) + $signed(tmp_s_reg_901));

assign tmp_43_fu_561_p3 = {{p_Val2_28_reg_196}, {6'd0}};

assign tmp_44_fu_596_p1 = tmp_122_reg_967;

assign tmp_45_fu_621_p2 = (newsignbit_fu_613_p3 ^ 1'd1);

assign tmp_47_fu_667_p2 = (tmp_125_fu_643_p3 ^ 1'd1);

assign tmp_48_fu_701_p2 = (signbit_reg_977 ^ 1'd1);

assign tmp_73_cast_cast_fu_445_p1 = tmp_41_fu_440_p2;

assign tmp_77_cast_cast_fu_527_p1 = tmp_42_fu_522_p2;

assign tmp_79_cast_fu_569_p1 = $signed(tmp_43_fu_561_p3);

assign tmp_fu_355_p3 = {{h_reg_149}, {1'd0}};

assign tmp_s_fu_383_p3 = {{w_reg_161}, {1'd0}};

assign underflow_5_fu_810_p2 = (isneg_reg_1039 & tmp_40_fu_805_p2);

assign underflow_fu_729_p2 = (signbit_reg_977 & tmp4_fu_723_p2);

assign underflow_not_fu_744_p2 = (tmp5_fu_740_p2 | p_38_i_i_reg_1009);

assign w_4_fu_480_p2 = (w_reg_161 + 5'd1);

assign w_cast8_cast_fu_363_p1 = w_reg_161;

assign weight_V_address0 = tmp_128_cast_fu_495_p1;

always @ (posedge ap_clk) begin
    tmp_106_reg_857[0] <= 1'b0;
    tmp_108_reg_862[0] <= 1'b0;
    tmp_111_reg_880[0] <= 1'b0;
    tmp_reg_888[0] <= 1'b0;
    tmp_s_reg_901[0] <= 1'b0;
    tmp_117_reg_924[0] <= 1'b0;
end

endmodule //subconv_3x3_32_strid_1
