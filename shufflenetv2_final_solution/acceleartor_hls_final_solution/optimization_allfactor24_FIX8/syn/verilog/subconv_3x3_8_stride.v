// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_8_stride (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        ShuffleConvs_2_Downs_23_address0,
        ShuffleConvs_2_Downs_23_ce0,
        ShuffleConvs_2_Downs_23_q0,
        ShuffleConvs_2_Downs_22_address0,
        ShuffleConvs_2_Downs_22_ce0,
        ShuffleConvs_2_Downs_22_q0,
        ShuffleConvs_2_Downs_11_address0,
        ShuffleConvs_2_Downs_11_ce0,
        ShuffleConvs_2_Downs_11_q0,
        ShuffleConvs_2_Downs_6_address0,
        ShuffleConvs_2_Downs_6_ce0,
        ShuffleConvs_2_Downs_6_q0,
        ShuffleConvs_2_Downs_5_address0,
        ShuffleConvs_2_Downs_5_ce0,
        ShuffleConvs_2_Downs_5_q0,
        ShuffleConvs_2_Downs_4_address0,
        ShuffleConvs_2_Downs_4_ce0,
        ShuffleConvs_2_Downs_4_q0,
        ShuffleConvs_2_Downs_3_address0,
        ShuffleConvs_2_Downs_3_ce0,
        ShuffleConvs_2_Downs_3_q0,
        ShuffleConvs_2_Downs_2_address0,
        ShuffleConvs_2_Downs_2_ce0,
        ShuffleConvs_2_Downs_2_q0,
        ShuffleConvs_2_Downs_1_address0,
        ShuffleConvs_2_Downs_1_ce0,
        ShuffleConvs_2_Downs_1_q0,
        ShuffleConvs_2_Downs_address0,
        ShuffleConvs_2_Downs_ce0,
        ShuffleConvs_2_Downs_q0,
        ShuffleConvs_2_Downs_21_address0,
        ShuffleConvs_2_Downs_21_ce0,
        ShuffleConvs_2_Downs_21_q0,
        ShuffleConvs_2_Downs_20_address0,
        ShuffleConvs_2_Downs_20_ce0,
        ShuffleConvs_2_Downs_20_q0,
        ShuffleConvs_2_Downs_19_address0,
        ShuffleConvs_2_Downs_19_ce0,
        ShuffleConvs_2_Downs_19_q0,
        ShuffleConvs_2_Downs_18_address0,
        ShuffleConvs_2_Downs_18_ce0,
        ShuffleConvs_2_Downs_18_q0,
        ShuffleConvs_2_Downs_17_address0,
        ShuffleConvs_2_Downs_17_ce0,
        ShuffleConvs_2_Downs_17_q0,
        ShuffleConvs_2_Downs_16_address0,
        ShuffleConvs_2_Downs_16_ce0,
        ShuffleConvs_2_Downs_16_q0,
        ShuffleConvs_2_Downs_15_address0,
        ShuffleConvs_2_Downs_15_ce0,
        ShuffleConvs_2_Downs_15_q0,
        ShuffleConvs_2_Downs_14_address0,
        ShuffleConvs_2_Downs_14_ce0,
        ShuffleConvs_2_Downs_14_q0,
        ShuffleConvs_2_Downs_13_address0,
        ShuffleConvs_2_Downs_13_ce0,
        ShuffleConvs_2_Downs_13_q0,
        ShuffleConvs_2_Downs_12_address0,
        ShuffleConvs_2_Downs_12_ce0,
        ShuffleConvs_2_Downs_12_q0,
        ShuffleConvs_2_Downs_10_address0,
        ShuffleConvs_2_Downs_10_ce0,
        ShuffleConvs_2_Downs_10_q0,
        ShuffleConvs_2_Downs_9_address0,
        ShuffleConvs_2_Downs_9_ce0,
        ShuffleConvs_2_Downs_9_q0,
        ShuffleConvs_2_Downs_8_address0,
        ShuffleConvs_2_Downs_8_ce0,
        ShuffleConvs_2_Downs_8_q0,
        ShuffleConvs_2_Downs_7_address0,
        ShuffleConvs_2_Downs_7_ce0,
        ShuffleConvs_2_Downs_7_q0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [6:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [11:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [8:0] ShuffleConvs_2_Downs_23_address0;
output   ShuffleConvs_2_Downs_23_ce0;
input  [7:0] ShuffleConvs_2_Downs_23_q0;
output  [8:0] ShuffleConvs_2_Downs_22_address0;
output   ShuffleConvs_2_Downs_22_ce0;
input  [7:0] ShuffleConvs_2_Downs_22_q0;
output  [8:0] ShuffleConvs_2_Downs_11_address0;
output   ShuffleConvs_2_Downs_11_ce0;
input  [7:0] ShuffleConvs_2_Downs_11_q0;
output  [8:0] ShuffleConvs_2_Downs_6_address0;
output   ShuffleConvs_2_Downs_6_ce0;
input  [7:0] ShuffleConvs_2_Downs_6_q0;
output  [8:0] ShuffleConvs_2_Downs_5_address0;
output   ShuffleConvs_2_Downs_5_ce0;
input  [7:0] ShuffleConvs_2_Downs_5_q0;
output  [8:0] ShuffleConvs_2_Downs_4_address0;
output   ShuffleConvs_2_Downs_4_ce0;
input  [7:0] ShuffleConvs_2_Downs_4_q0;
output  [8:0] ShuffleConvs_2_Downs_3_address0;
output   ShuffleConvs_2_Downs_3_ce0;
input  [7:0] ShuffleConvs_2_Downs_3_q0;
output  [8:0] ShuffleConvs_2_Downs_2_address0;
output   ShuffleConvs_2_Downs_2_ce0;
input  [7:0] ShuffleConvs_2_Downs_2_q0;
output  [8:0] ShuffleConvs_2_Downs_1_address0;
output   ShuffleConvs_2_Downs_1_ce0;
input  [7:0] ShuffleConvs_2_Downs_1_q0;
output  [8:0] ShuffleConvs_2_Downs_address0;
output   ShuffleConvs_2_Downs_ce0;
input  [7:0] ShuffleConvs_2_Downs_q0;
output  [8:0] ShuffleConvs_2_Downs_21_address0;
output   ShuffleConvs_2_Downs_21_ce0;
input  [7:0] ShuffleConvs_2_Downs_21_q0;
output  [8:0] ShuffleConvs_2_Downs_20_address0;
output   ShuffleConvs_2_Downs_20_ce0;
input  [7:0] ShuffleConvs_2_Downs_20_q0;
output  [8:0] ShuffleConvs_2_Downs_19_address0;
output   ShuffleConvs_2_Downs_19_ce0;
input  [7:0] ShuffleConvs_2_Downs_19_q0;
output  [8:0] ShuffleConvs_2_Downs_18_address0;
output   ShuffleConvs_2_Downs_18_ce0;
input  [7:0] ShuffleConvs_2_Downs_18_q0;
output  [8:0] ShuffleConvs_2_Downs_17_address0;
output   ShuffleConvs_2_Downs_17_ce0;
input  [7:0] ShuffleConvs_2_Downs_17_q0;
output  [8:0] ShuffleConvs_2_Downs_16_address0;
output   ShuffleConvs_2_Downs_16_ce0;
input  [7:0] ShuffleConvs_2_Downs_16_q0;
output  [8:0] ShuffleConvs_2_Downs_15_address0;
output   ShuffleConvs_2_Downs_15_ce0;
input  [7:0] ShuffleConvs_2_Downs_15_q0;
output  [8:0] ShuffleConvs_2_Downs_14_address0;
output   ShuffleConvs_2_Downs_14_ce0;
input  [7:0] ShuffleConvs_2_Downs_14_q0;
output  [8:0] ShuffleConvs_2_Downs_13_address0;
output   ShuffleConvs_2_Downs_13_ce0;
input  [7:0] ShuffleConvs_2_Downs_13_q0;
output  [8:0] ShuffleConvs_2_Downs_12_address0;
output   ShuffleConvs_2_Downs_12_ce0;
input  [7:0] ShuffleConvs_2_Downs_12_q0;
output  [8:0] ShuffleConvs_2_Downs_10_address0;
output   ShuffleConvs_2_Downs_10_ce0;
input  [7:0] ShuffleConvs_2_Downs_10_q0;
output  [8:0] ShuffleConvs_2_Downs_9_address0;
output   ShuffleConvs_2_Downs_9_ce0;
input  [7:0] ShuffleConvs_2_Downs_9_q0;
output  [8:0] ShuffleConvs_2_Downs_8_address0;
output   ShuffleConvs_2_Downs_8_ce0;
input  [7:0] ShuffleConvs_2_Downs_8_q0;
output  [8:0] ShuffleConvs_2_Downs_7_address0;
output   ShuffleConvs_2_Downs_7_ce0;
input  [7:0] ShuffleConvs_2_Downs_7_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg ShuffleConvs_2_Downs_23_ce0;
reg ShuffleConvs_2_Downs_22_ce0;
reg ShuffleConvs_2_Downs_11_ce0;
reg ShuffleConvs_2_Downs_6_ce0;
reg ShuffleConvs_2_Downs_5_ce0;
reg ShuffleConvs_2_Downs_4_ce0;
reg ShuffleConvs_2_Downs_3_ce0;
reg ShuffleConvs_2_Downs_2_ce0;
reg ShuffleConvs_2_Downs_1_ce0;
reg ShuffleConvs_2_Downs_ce0;
reg ShuffleConvs_2_Downs_21_ce0;
reg ShuffleConvs_2_Downs_20_ce0;
reg ShuffleConvs_2_Downs_19_ce0;
reg ShuffleConvs_2_Downs_18_ce0;
reg ShuffleConvs_2_Downs_17_ce0;
reg ShuffleConvs_2_Downs_16_ce0;
reg ShuffleConvs_2_Downs_15_ce0;
reg ShuffleConvs_2_Downs_14_ce0;
reg ShuffleConvs_2_Downs_13_ce0;
reg ShuffleConvs_2_Downs_12_ce0;
reg ShuffleConvs_2_Downs_10_ce0;
reg ShuffleConvs_2_Downs_9_ce0;
reg ShuffleConvs_2_Downs_8_ce0;
reg ShuffleConvs_2_Downs_7_ce0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [14:0] next_mul_fu_578_p2;
reg   [14:0] next_mul_reg_1343;
wire    ap_CS_fsm_state2;
wire  signed [10:0] tmp_35_cast_fu_611_p1;
reg  signed [10:0] tmp_35_cast_reg_1348;
wire  signed [11:0] tmp_38_cast_fu_645_p1;
reg  signed [11:0] tmp_38_cast_reg_1353;
wire   [6:0] co_1_fu_655_p2;
reg   [6:0] co_1_reg_1361;
wire   [31:0] arrayNo_cast_fu_661_p1;
reg   [31:0] arrayNo_cast_reg_1366;
wire   [0:0] exitcond1_fu_649_p2;
wire   [10:0] tmp_39_fu_699_p2;
reg   [10:0] tmp_39_reg_1371;
reg   [6:0] bias_V_addr_reg_1376;
wire   [12:0] tmp_42_fu_734_p2;
reg   [12:0] tmp_42_reg_1381;
wire    ap_CS_fsm_state3;
wire   [3:0] tmp_fu_746_p3;
reg   [3:0] tmp_reg_1389;
wire   [0:0] exitcond2_fu_740_p2;
wire   [6:0] idx_urem_fu_766_p3;
reg   [11:0] output_V_addr_reg_1399;
wire    ap_CS_fsm_state4;
wire   [3:0] tmp_2_fu_794_p3;
reg   [3:0] tmp_2_reg_1407;
wire   [0:0] exitcond3_fu_788_p2;
wire   [2:0] h_1_fu_802_p2;
wire   [10:0] tmp_47_fu_823_p2;
reg   [10:0] tmp_47_reg_1417;
wire    ap_CS_fsm_state5;
wire   [1:0] m_1_fu_835_p2;
reg   [1:0] m_1_reg_1425;
wire   [9:0] tmp_49_fu_889_p2;
reg   [9:0] tmp_49_reg_1430;
wire   [0:0] exitcond4_fu_829_p2;
wire   [2:0] w_1_fu_895_p2;
reg   [2:0] w_1_reg_1435;
wire    ap_CS_fsm_state6;
wire   [1:0] n_1_fu_921_p2;
reg   [1:0] n_1_reg_1448;
wire   [0:0] exitcond_fu_915_p2;
reg   [7:0] weight_V_load_reg_1573;
wire    ap_CS_fsm_state7;
wire   [7:0] tmp_1_fu_979_p26;
reg   [7:0] tmp_1_reg_1578;
wire   [15:0] p_Val2_5_fu_1038_p2;
reg   [15:0] p_Val2_5_reg_1583;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_55_reg_1588;
wire   [15:0] p_Val2_6_fu_1064_p2;
reg   [15:0] p_Val2_6_reg_1593;
wire    ap_CS_fsm_state9;
reg   [0:0] signbit_reg_1598;
wire   [7:0] p_Val2_8_fu_1098_p2;
reg   [7:0] p_Val2_8_reg_1605;
wire   [0:0] newsignbit_fu_1104_p3;
reg   [0:0] newsignbit_reg_1611;
wire   [0:0] carry_fu_1118_p2;
reg   [0:0] carry_reg_1617;
reg   [1:0] tmp_12_reg_1624;
wire   [0:0] p_38_i_i_fu_1176_p2;
reg   [0:0] p_38_i_i_reg_1630;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_13_fu_1192_p2;
reg   [0:0] tmp_13_reg_1635;
wire   [0:0] brmerge40_demorgan_i_fu_1203_p2;
reg   [0:0] brmerge40_demorgan_i_reg_1640;
wire   [0:0] underflow_fu_1220_p2;
reg   [0:0] underflow_reg_1645;
wire   [0:0] brmerge_i_i_i_fu_1225_p2;
reg   [0:0] brmerge_i_i_i_reg_1650;
wire   [7:0] sum_V_fu_1252_p3;
wire    ap_CS_fsm_state11;
reg   [0:0] isneg_reg_1660;
wire    ap_CS_fsm_state12;
wire   [7:0] result_V_fu_1282_p2;
reg   [7:0] result_V_reg_1667;
reg   [0:0] newsignbit_2_reg_1673;
reg   [6:0] co_reg_474;
reg   [14:0] phi_mul_reg_485;
reg   [6:0] phi_urem_reg_496;
reg   [2:0] h_reg_508;
reg   [2:0] w_reg_520;
wire    ap_CS_fsm_state13;
reg   [7:0] p_Val2_s_reg_532;
reg   [1:0] m_reg_544;
reg   [7:0] p_Val2_4_reg_555;
reg   [1:0] n_reg_567;
wire   [31:0] co_cast_fu_584_p1;
wire   [31:0] tmp_48_cast_fu_783_p1;
wire   [31:0] tmp_56_cast_fu_910_p1;
wire   [31:0] tmp_57_cast_fu_951_p1;
wire   [8:0] tmp_31_fu_593_p3;
wire   [9:0] p_shl2_cast_fu_601_p1;
wire   [9:0] co_cast_cast_fu_589_p1;
wire   [9:0] tmp_32_fu_605_p2;
wire   [9:0] tmp_33_fu_615_p3;
wire   [7:0] tmp_34_fu_627_p3;
wire   [10:0] p_shl_cast_fu_623_p1;
wire   [10:0] p_shl1_cast_fu_635_p1;
wire   [10:0] tmp_35_fu_639_p2;
wire   [2:0] tmp_36_fu_665_p4;
wire   [5:0] tmp_37_fu_675_p3;
wire   [3:0] tmp_38_fu_687_p3;
wire   [10:0] p_shl3_cast_fu_683_p1;
wire   [10:0] p_shl4_cast_fu_695_p1;
wire   [11:0] h_cast9_cast_fu_705_p1;
wire   [11:0] tmp_40_fu_709_p2;
wire   [9:0] tmp_41_fu_714_p1;
wire   [12:0] p_shl5_cast_fu_718_p3;
wire   [12:0] p_shl6_cast_fu_726_p3;
wire   [6:0] next_urem_fu_754_p2;
wire   [0:0] tmp_43_fu_760_p2;
wire   [12:0] w_cast8_cast_fu_774_p1;
wire   [12:0] tmp_44_fu_778_p2;
wire   [10:0] m_cast7_cast_fu_808_p1;
wire   [10:0] tmp_45_fu_812_p2;
wire   [10:0] tmp_46_fu_817_p2;
wire   [1:0] tmp2_fu_841_p2;
wire  signed [3:0] tmp2_cast_fu_847_p1;
wire   [3:0] tmp_s_fu_851_p2;
wire   [10:0] tmp_cast_cast_fu_856_p1;
wire   [10:0] tmp_48_fu_860_p2;
wire   [6:0] tmp_50_fu_865_p1;
wire   [8:0] tmp_51_fu_877_p1;
wire   [9:0] p_shl8_cast_fu_869_p3;
wire   [9:0] p_shl9_cast_fu_881_p3;
wire   [10:0] n_cast6_cast_fu_901_p1;
wire   [10:0] tmp_52_fu_905_p2;
wire   [1:0] tmp3_fu_927_p2;
wire  signed [3:0] tmp3_cast_fu_933_p1;
wire   [3:0] tmp_6_fu_937_p2;
wire   [9:0] tmp_6_cast_cast_fu_942_p1;
wire   [9:0] tmp_53_fu_946_p2;
wire  signed [7:0] p_Val2_5_fu_1038_p0;
wire  signed [7:0] p_Val2_5_fu_1038_p1;
wire   [13:0] tmp_7_fu_1052_p3;
wire  signed [15:0] tmp_11_cast_fu_1060_p1;
wire   [7:0] p_Val2_7_fu_1077_p4;
wire   [7:0] tmp_9_fu_1087_p1;
wire   [0:0] tmp_56_fu_1090_p3;
wire   [0:0] tmp_10_fu_1112_p2;
wire   [0:0] Range1_all_ones_fu_1141_p2;
wire   [0:0] Range1_all_zeros_fu_1146_p2;
wire   [0:0] tmp_58_fu_1134_p3;
wire   [0:0] tmp_11_fu_1158_p2;
wire   [0:0] p_41_i_i_fu_1164_p2;
wire   [0:0] deleted_zeros_fu_1151_p3;
wire   [0:0] p_not_i_i_fu_1181_p2;
wire   [0:0] brmerge_i_i1_fu_1187_p2;
wire   [0:0] deleted_ones_fu_1169_p3;
wire   [0:0] tmp4_demorgan_fu_1208_p2;
wire   [0:0] tmp4_fu_1214_p2;
wire   [0:0] overflow_fu_1197_p2;
wire   [0:0] tmp5_fu_1231_p2;
wire   [0:0] underflow_not_fu_1235_p2;
wire   [7:0] p_Val2_8_mux_fu_1240_p3;
wire   [7:0] p_Val2_8_40_fu_1246_p3;
wire  signed [8:0] tmp_4_fu_1264_p1;
wire  signed [8:0] tmp_3_fu_1260_p1;
wire   [8:0] p_Val2_2_fu_1268_p2;
wire   [0:0] tmp_5_fu_1296_p2;
wire   [0:0] isneg_not_fu_1310_p2;
wire   [0:0] brmerge_i_i_fu_1306_p2;
wire   [0:0] underflow_2_fu_1301_p2;
wire   [0:0] brmerge9_fu_1315_p2;
wire   [7:0] result_V_mux_fu_1320_p3;
wire   [7:0] p_result_V_fu_1327_p3;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

ShuffleNetV2_mux_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 32 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_fYi_x_U552(
    .din1(ShuffleConvs_2_Downs_23_q0),
    .din2(ShuffleConvs_2_Downs_22_q0),
    .din3(ShuffleConvs_2_Downs_11_q0),
    .din4(ShuffleConvs_2_Downs_6_q0),
    .din5(ShuffleConvs_2_Downs_5_q0),
    .din6(ShuffleConvs_2_Downs_4_q0),
    .din7(ShuffleConvs_2_Downs_3_q0),
    .din8(ShuffleConvs_2_Downs_2_q0),
    .din9(ShuffleConvs_2_Downs_1_q0),
    .din10(ShuffleConvs_2_Downs_q0),
    .din11(ShuffleConvs_2_Downs_21_q0),
    .din12(ShuffleConvs_2_Downs_20_q0),
    .din13(ShuffleConvs_2_Downs_19_q0),
    .din14(ShuffleConvs_2_Downs_18_q0),
    .din15(ShuffleConvs_2_Downs_17_q0),
    .din16(ShuffleConvs_2_Downs_16_q0),
    .din17(ShuffleConvs_2_Downs_15_q0),
    .din18(ShuffleConvs_2_Downs_14_q0),
    .din19(ShuffleConvs_2_Downs_13_q0),
    .din20(ShuffleConvs_2_Downs_12_q0),
    .din21(ShuffleConvs_2_Downs_10_q0),
    .din22(ShuffleConvs_2_Downs_9_q0),
    .din23(ShuffleConvs_2_Downs_8_q0),
    .din24(ShuffleConvs_2_Downs_7_q0),
    .din25(arrayNo_cast_reg_1366),
    .dout(tmp_1_fu_979_p26)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_740_p2 == 1'd1))) begin
        co_reg_474 <= co_1_reg_1361;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_474 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_649_p2 == 1'd0))) begin
        h_reg_508 <= 3'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond3_fu_788_p2))) begin
        h_reg_508 <= h_1_fu_802_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_915_p2))) begin
        m_reg_544 <= m_1_reg_1425;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_788_p2))) begin
        m_reg_544 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        n_reg_567 <= n_1_reg_1448;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_829_p2))) begin
        n_reg_567 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Val2_4_reg_555 <= sum_V_fu_1252_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_829_p2))) begin
        p_Val2_4_reg_555 <= p_Val2_s_reg_532;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_915_p2))) begin
        p_Val2_s_reg_532 <= p_Val2_4_reg_555;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_788_p2))) begin
        p_Val2_s_reg_532 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_740_p2 == 1'd1))) begin
        phi_mul_reg_485 <= next_mul_reg_1343;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_485 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_740_p2 == 1'd1))) begin
        phi_urem_reg_496 <= idx_urem_fu_766_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_urem_reg_496 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_740_p2))) begin
        w_reg_520 <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        w_reg_520 <= w_1_reg_1435;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_649_p2 == 1'd0))) begin
        arrayNo_cast_reg_1366[6 : 0] <= arrayNo_cast_fu_661_p1[6 : 0];
        bias_V_addr_reg_1376 <= co_cast_fu_584_p1;
        tmp_39_reg_1371[10 : 1] <= tmp_39_fu_699_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        brmerge40_demorgan_i_reg_1640 <= brmerge40_demorgan_i_fu_1203_p2;
        brmerge_i_i_i_reg_1650 <= brmerge_i_i_i_fu_1225_p2;
        p_38_i_i_reg_1630 <= p_38_i_i_fu_1176_p2;
        tmp_13_reg_1635 <= tmp_13_fu_1192_p2;
        underflow_reg_1645 <= underflow_fu_1220_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        carry_reg_1617 <= carry_fu_1118_p2;
        newsignbit_reg_1611 <= p_Val2_8_fu_1098_p2[32'd7];
        p_Val2_6_reg_1593 <= p_Val2_6_fu_1064_p2;
        p_Val2_8_reg_1605 <= p_Val2_8_fu_1098_p2;
        signbit_reg_1598 <= p_Val2_6_fu_1064_p2[32'd15];
        tmp_12_reg_1624 <= {{p_Val2_6_fu_1064_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_1_reg_1361 <= co_1_fu_655_p2;
        next_mul_reg_1343 <= next_mul_fu_578_p2;
        tmp_35_cast_reg_1348 <= tmp_35_cast_fu_611_p1;
        tmp_38_cast_reg_1353[11 : 1] <= tmp_38_cast_fu_645_p1[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        isneg_reg_1660 <= p_Val2_2_fu_1268_p2[32'd8];
        newsignbit_2_reg_1673 <= result_V_fu_1282_p2[32'd7];
        result_V_reg_1667 <= result_V_fu_1282_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_1_reg_1425 <= m_1_fu_835_p2;
        tmp_47_reg_1417 <= tmp_47_fu_823_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_1_reg_1448 <= n_1_fu_921_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_addr_reg_1399 <= tmp_48_cast_fu_783_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_5_reg_1583 <= p_Val2_5_fu_1038_p2;
        tmp_55_reg_1588 <= p_Val2_5_fu_1038_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_1_reg_1578 <= tmp_1_fu_979_p26;
        weight_V_load_reg_1573 <= weight_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond3_fu_788_p2))) begin
        tmp_2_reg_1407[3 : 1] <= tmp_2_fu_794_p3[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_42_reg_1381[12 : 1] <= tmp_42_fu_734_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_829_p2))) begin
        tmp_49_reg_1430[9 : 1] <= tmp_49_fu_889_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond2_fu_740_p2))) begin
        tmp_reg_1389[3 : 1] <= tmp_fu_746_p3[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond4_fu_829_p2))) begin
        w_1_reg_1435 <= w_1_fu_895_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_10_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_11_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_12_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_13_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_14_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_15_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_16_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_17_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_18_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_19_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_1_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_20_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_21_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_22_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_23_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_2_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_3_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_4_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_5_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_6_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_7_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_8_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_9_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ShuffleConvs_2_Downs_ce0 = 1'b1;
    end else begin
        ShuffleConvs_2_Downs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_649_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_649_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_649_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_740_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond3_fu_788_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_829_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_915_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_1141_p2 = ((tmp_12_reg_1624 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_1146_p2 = ((tmp_12_reg_1624 == 2'd0) ? 1'b1 : 1'b0);

assign ShuffleConvs_2_Downs_10_address0 = tmp_57_cast_fu_951_p1;

assign ShuffleConvs_2_Downs_11_address0 = tmp_57_cast_fu_951_p1;

assign ShuffleConvs_2_Downs_12_address0 = tmp_57_cast_fu_951_p1;

assign ShuffleConvs_2_Downs_13_address0 = tmp_57_cast_fu_951_p1;

assign ShuffleConvs_2_Downs_14_address0 = tmp_57_cast_fu_951_p1;

assign ShuffleConvs_2_Downs_15_address0 = tmp_57_cast_fu_951_p1;

assign ShuffleConvs_2_Downs_16_address0 = tmp_57_cast_fu_951_p1;

assign ShuffleConvs_2_Downs_17_address0 = tmp_57_cast_fu_951_p1;

assign ShuffleConvs_2_Downs_18_address0 = tmp_57_cast_fu_951_p1;

assign ShuffleConvs_2_Downs_19_address0 = tmp_57_cast_fu_951_p1;

assign ShuffleConvs_2_Downs_1_address0 = tmp_57_cast_fu_951_p1;

assign ShuffleConvs_2_Downs_20_address0 = tmp_57_cast_fu_951_p1;

assign ShuffleConvs_2_Downs_21_address0 = tmp_57_cast_fu_951_p1;

assign ShuffleConvs_2_Downs_22_address0 = tmp_57_cast_fu_951_p1;

assign ShuffleConvs_2_Downs_23_address0 = tmp_57_cast_fu_951_p1;

assign ShuffleConvs_2_Downs_2_address0 = tmp_57_cast_fu_951_p1;

assign ShuffleConvs_2_Downs_3_address0 = tmp_57_cast_fu_951_p1;

assign ShuffleConvs_2_Downs_4_address0 = tmp_57_cast_fu_951_p1;

assign ShuffleConvs_2_Downs_5_address0 = tmp_57_cast_fu_951_p1;

assign ShuffleConvs_2_Downs_6_address0 = tmp_57_cast_fu_951_p1;

assign ShuffleConvs_2_Downs_7_address0 = tmp_57_cast_fu_951_p1;

assign ShuffleConvs_2_Downs_8_address0 = tmp_57_cast_fu_951_p1;

assign ShuffleConvs_2_Downs_9_address0 = tmp_57_cast_fu_951_p1;

assign ShuffleConvs_2_Downs_address0 = tmp_57_cast_fu_951_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign arrayNo_cast_fu_661_p1 = phi_urem_reg_496;

assign bias_V_address0 = bias_V_addr_reg_1376;

assign brmerge40_demorgan_i_fu_1203_p2 = (newsignbit_reg_1611 & deleted_ones_fu_1169_p3);

assign brmerge9_fu_1315_p2 = (newsignbit_2_reg_1673 | isneg_not_fu_1310_p2);

assign brmerge_i_i1_fu_1187_p2 = (newsignbit_reg_1611 | p_not_i_i_fu_1181_p2);

assign brmerge_i_i_fu_1306_p2 = (isneg_reg_1660 ^ newsignbit_2_reg_1673);

assign brmerge_i_i_i_fu_1225_p2 = (underflow_fu_1220_p2 | overflow_fu_1197_p2);

assign carry_fu_1118_p2 = (tmp_56_fu_1090_p3 & tmp_10_fu_1112_p2);

assign co_1_fu_655_p2 = (co_reg_474 + 7'd1);

assign co_cast_cast_fu_589_p1 = co_reg_474;

assign co_cast_fu_584_p1 = co_reg_474;

assign deleted_ones_fu_1169_p3 = ((carry_reg_1617[0:0] === 1'b1) ? p_41_i_i_fu_1164_p2 : Range1_all_ones_fu_1141_p2);

assign deleted_zeros_fu_1151_p3 = ((carry_reg_1617[0:0] === 1'b1) ? Range1_all_ones_fu_1141_p2 : Range1_all_zeros_fu_1146_p2);

assign exitcond1_fu_649_p2 = ((co_reg_474 == 7'd96) ? 1'b1 : 1'b0);

assign exitcond2_fu_740_p2 = ((h_reg_508 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond3_fu_788_p2 = ((w_reg_520 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond4_fu_829_p2 = ((m_reg_544 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_915_p2 = ((n_reg_567 == 2'd3) ? 1'b1 : 1'b0);

assign h_1_fu_802_p2 = (h_reg_508 + 3'd1);

assign h_cast9_cast_fu_705_p1 = h_reg_508;

assign idx_urem_fu_766_p3 = ((tmp_43_fu_760_p2[0:0] === 1'b1) ? next_urem_fu_754_p2 : 7'd0);

assign isneg_not_fu_1310_p2 = (isneg_reg_1660 ^ 1'd1);

assign m_1_fu_835_p2 = (2'd1 + m_reg_544);

assign m_cast7_cast_fu_808_p1 = m_reg_544;

assign n_1_fu_921_p2 = (n_reg_567 + 2'd1);

assign n_cast6_cast_fu_901_p1 = n_reg_567;

assign newsignbit_fu_1104_p3 = p_Val2_8_fu_1098_p2[32'd7];

assign next_mul_fu_578_p2 = (phi_mul_reg_485 + 15'd171);

assign next_urem_fu_754_p2 = (phi_urem_reg_496 + 7'd1);

assign output_V_address0 = output_V_addr_reg_1399;

assign output_V_d0 = ((brmerge9_fu_1315_p2[0:0] === 1'b1) ? result_V_mux_fu_1320_p3 : p_result_V_fu_1327_p3);

assign overflow_fu_1197_p2 = (brmerge_i_i1_fu_1187_p2 & tmp_13_fu_1192_p2);

assign p_38_i_i_fu_1176_p2 = (carry_reg_1617 & Range1_all_ones_fu_1141_p2);

assign p_41_i_i_fu_1164_p2 = (signbit_reg_1598 & tmp_11_fu_1158_p2);

assign p_Val2_2_fu_1268_p2 = ($signed(tmp_4_fu_1264_p1) + $signed(tmp_3_fu_1260_p1));

assign p_Val2_5_fu_1038_p0 = weight_V_load_reg_1573;

assign p_Val2_5_fu_1038_p1 = tmp_1_reg_1578;

assign p_Val2_5_fu_1038_p2 = ($signed(p_Val2_5_fu_1038_p0) * $signed(p_Val2_5_fu_1038_p1));

assign p_Val2_6_fu_1064_p2 = ($signed(tmp_11_cast_fu_1060_p1) + $signed(p_Val2_5_reg_1583));

assign p_Val2_7_fu_1077_p4 = {{p_Val2_6_fu_1064_p2[13:6]}};

assign p_Val2_8_40_fu_1246_p3 = ((underflow_reg_1645[0:0] === 1'b1) ? 8'd128 : p_Val2_8_reg_1605);

assign p_Val2_8_fu_1098_p2 = (p_Val2_7_fu_1077_p4 + tmp_9_fu_1087_p1);

assign p_Val2_8_mux_fu_1240_p3 = ((brmerge_i_i_i_reg_1650[0:0] === 1'b1) ? 8'd127 : p_Val2_8_reg_1605);

assign p_not_i_i_fu_1181_p2 = (deleted_zeros_fu_1151_p3 ^ 1'd1);

assign p_result_V_fu_1327_p3 = ((underflow_2_fu_1301_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_1667);

assign p_shl1_cast_fu_635_p1 = tmp_34_fu_627_p3;

assign p_shl2_cast_fu_601_p1 = tmp_31_fu_593_p3;

assign p_shl3_cast_fu_683_p1 = tmp_37_fu_675_p3;

assign p_shl4_cast_fu_695_p1 = tmp_38_fu_687_p3;

assign p_shl5_cast_fu_718_p3 = {{tmp_41_fu_714_p1}, {3'd0}};

assign p_shl6_cast_fu_726_p3 = {{tmp_40_fu_709_p2}, {1'd0}};

assign p_shl8_cast_fu_869_p3 = {{tmp_50_fu_865_p1}, {3'd0}};

assign p_shl9_cast_fu_881_p3 = {{tmp_51_fu_877_p1}, {1'd0}};

assign p_shl_cast_fu_623_p1 = tmp_33_fu_615_p3;

assign result_V_fu_1282_p2 = (bias_V_q0 + p_Val2_s_reg_532);

assign result_V_mux_fu_1320_p3 = ((brmerge_i_i_fu_1306_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_1667);

assign sum_V_fu_1252_p3 = ((underflow_not_fu_1235_p2[0:0] === 1'b1) ? p_Val2_8_mux_fu_1240_p3 : p_Val2_8_40_fu_1246_p3);

assign tmp2_cast_fu_847_p1 = $signed(tmp2_fu_841_p2);

assign tmp2_fu_841_p2 = (m_reg_544 ^ 2'd2);

assign tmp3_cast_fu_933_p1 = $signed(tmp3_fu_927_p2);

assign tmp3_fu_927_p2 = (n_reg_567 ^ 2'd2);

assign tmp4_demorgan_fu_1208_p2 = (p_38_i_i_fu_1176_p2 | brmerge40_demorgan_i_fu_1203_p2);

assign tmp4_fu_1214_p2 = (tmp4_demorgan_fu_1208_p2 ^ 1'd1);

assign tmp5_fu_1231_p2 = (brmerge40_demorgan_i_reg_1640 | tmp_13_reg_1635);

assign tmp_10_fu_1112_p2 = (newsignbit_fu_1104_p3 ^ 1'd1);

assign tmp_11_cast_fu_1060_p1 = $signed(tmp_7_fu_1052_p3);

assign tmp_11_fu_1158_p2 = (tmp_58_fu_1134_p3 ^ 1'd1);

assign tmp_13_fu_1192_p2 = (signbit_reg_1598 ^ 1'd1);

assign tmp_2_fu_794_p3 = {{w_reg_520}, {1'd0}};

assign tmp_31_fu_593_p3 = {{co_reg_474}, {2'd0}};

assign tmp_32_fu_605_p2 = (p_shl2_cast_fu_601_p1 - co_cast_cast_fu_589_p1);

assign tmp_33_fu_615_p3 = {{co_reg_474}, {3'd0}};

assign tmp_34_fu_627_p3 = {{co_reg_474}, {1'd0}};

assign tmp_35_cast_fu_611_p1 = $signed(tmp_32_fu_605_p2);

assign tmp_35_fu_639_p2 = (p_shl_cast_fu_623_p1 - p_shl1_cast_fu_635_p1);

assign tmp_36_fu_665_p4 = {{phi_mul_reg_485[14:12]}};

assign tmp_37_fu_675_p3 = {{tmp_36_fu_665_p4}, {3'd0}};

assign tmp_38_cast_fu_645_p1 = $signed(tmp_35_fu_639_p2);

assign tmp_38_fu_687_p3 = {{tmp_36_fu_665_p4}, {1'd0}};

assign tmp_39_fu_699_p2 = (p_shl3_cast_fu_683_p1 + p_shl4_cast_fu_695_p1);

assign tmp_3_fu_1260_p1 = $signed(p_Val2_s_reg_532);

assign tmp_40_fu_709_p2 = ($signed(h_cast9_cast_fu_705_p1) + $signed(tmp_38_cast_reg_1353));

assign tmp_41_fu_714_p1 = tmp_40_fu_709_p2[9:0];

assign tmp_42_fu_734_p2 = (p_shl5_cast_fu_718_p3 - p_shl6_cast_fu_726_p3);

assign tmp_43_fu_760_p2 = ((next_urem_fu_754_p2 < 7'd24) ? 1'b1 : 1'b0);

assign tmp_44_fu_778_p2 = (tmp_42_reg_1381 + w_cast8_cast_fu_774_p1);

assign tmp_45_fu_812_p2 = ($signed(m_cast7_cast_fu_808_p1) + $signed(tmp_35_cast_reg_1348));

assign tmp_46_fu_817_p2 = tmp_45_fu_812_p2 << 11'd2;

assign tmp_47_fu_823_p2 = (tmp_46_fu_817_p2 - tmp_45_fu_812_p2);

assign tmp_48_cast_fu_783_p1 = tmp_44_fu_778_p2;

assign tmp_48_fu_860_p2 = (tmp_cast_cast_fu_856_p1 + tmp_39_reg_1371);

assign tmp_49_fu_889_p2 = (p_shl8_cast_fu_869_p3 + p_shl9_cast_fu_881_p3);

assign tmp_4_fu_1264_p1 = $signed(bias_V_q0);

assign tmp_50_fu_865_p1 = tmp_48_fu_860_p2[6:0];

assign tmp_51_fu_877_p1 = tmp_48_fu_860_p2[8:0];

assign tmp_52_fu_905_p2 = (tmp_47_reg_1417 + n_cast6_cast_fu_901_p1);

assign tmp_53_fu_946_p2 = (tmp_6_cast_cast_fu_942_p1 + tmp_49_reg_1430);

assign tmp_56_cast_fu_910_p1 = tmp_52_fu_905_p2;

assign tmp_56_fu_1090_p3 = p_Val2_6_fu_1064_p2[32'd13];

assign tmp_57_cast_fu_951_p1 = tmp_53_fu_946_p2;

assign tmp_58_fu_1134_p3 = p_Val2_6_reg_1593[32'd14];

assign tmp_5_fu_1296_p2 = (newsignbit_2_reg_1673 ^ 1'd1);

assign tmp_6_cast_cast_fu_942_p1 = tmp_6_fu_937_p2;

assign tmp_6_fu_937_p2 = ($signed(tmp3_cast_fu_933_p1) + $signed(tmp_2_reg_1407));

assign tmp_7_fu_1052_p3 = {{p_Val2_4_reg_555}, {6'd0}};

assign tmp_9_fu_1087_p1 = tmp_55_reg_1588;

assign tmp_cast_cast_fu_856_p1 = tmp_s_fu_851_p2;

assign tmp_fu_746_p3 = {{h_reg_508}, {1'd0}};

assign tmp_s_fu_851_p2 = ($signed(tmp2_cast_fu_847_p1) + $signed(tmp_reg_1389));

assign underflow_2_fu_1301_p2 = (isneg_reg_1660 & tmp_5_fu_1296_p2);

assign underflow_fu_1220_p2 = (signbit_reg_1598 & tmp4_fu_1214_p2);

assign underflow_not_fu_1235_p2 = (tmp5_fu_1231_p2 | p_38_i_i_reg_1630);

assign w_1_fu_895_p2 = (w_reg_520 + 3'd1);

assign w_cast8_cast_fu_774_p1 = w_reg_520;

assign weight_V_address0 = tmp_56_cast_fu_910_p1;

always @ (posedge ap_clk) begin
    tmp_38_cast_reg_1353[0] <= 1'b0;
    arrayNo_cast_reg_1366[31:7] <= 25'b0000000000000000000000000;
    tmp_39_reg_1371[0] <= 1'b0;
    tmp_42_reg_1381[0] <= 1'b0;
    tmp_reg_1389[0] <= 1'b0;
    tmp_2_reg_1407[0] <= 1'b0;
    tmp_49_reg_1430[0] <= 1'b0;
end

endmodule //subconv_3x3_8_stride
