// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module subconv_3x3_16_no_re (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        buffer1_1_24_16x16_p_23_address0,
        buffer1_1_24_16x16_p_23_ce0,
        buffer1_1_24_16x16_p_23_q0,
        buffer1_1_24_16x16_p_22_address0,
        buffer1_1_24_16x16_p_22_ce0,
        buffer1_1_24_16x16_p_22_q0,
        buffer1_1_24_16x16_p_11_address0,
        buffer1_1_24_16x16_p_11_ce0,
        buffer1_1_24_16x16_p_11_q0,
        buffer1_1_24_16x16_p_6_address0,
        buffer1_1_24_16x16_p_6_ce0,
        buffer1_1_24_16x16_p_6_q0,
        buffer1_1_24_16x16_p_5_address0,
        buffer1_1_24_16x16_p_5_ce0,
        buffer1_1_24_16x16_p_5_q0,
        buffer1_1_24_16x16_p_4_address0,
        buffer1_1_24_16x16_p_4_ce0,
        buffer1_1_24_16x16_p_4_q0,
        buffer1_1_24_16x16_p_3_address0,
        buffer1_1_24_16x16_p_3_ce0,
        buffer1_1_24_16x16_p_3_q0,
        buffer1_1_24_16x16_p_2_address0,
        buffer1_1_24_16x16_p_2_ce0,
        buffer1_1_24_16x16_p_2_q0,
        buffer1_1_24_16x16_p_1_address0,
        buffer1_1_24_16x16_p_1_ce0,
        buffer1_1_24_16x16_p_1_q0,
        buffer1_1_24_16x16_p_address0,
        buffer1_1_24_16x16_p_ce0,
        buffer1_1_24_16x16_p_q0,
        buffer1_1_24_16x16_p_21_address0,
        buffer1_1_24_16x16_p_21_ce0,
        buffer1_1_24_16x16_p_21_q0,
        buffer1_1_24_16x16_p_20_address0,
        buffer1_1_24_16x16_p_20_ce0,
        buffer1_1_24_16x16_p_20_q0,
        buffer1_1_24_16x16_p_19_address0,
        buffer1_1_24_16x16_p_19_ce0,
        buffer1_1_24_16x16_p_19_q0,
        buffer1_1_24_16x16_p_18_address0,
        buffer1_1_24_16x16_p_18_ce0,
        buffer1_1_24_16x16_p_18_q0,
        buffer1_1_24_16x16_p_17_address0,
        buffer1_1_24_16x16_p_17_ce0,
        buffer1_1_24_16x16_p_17_q0,
        buffer1_1_24_16x16_p_16_address0,
        buffer1_1_24_16x16_p_16_ce0,
        buffer1_1_24_16x16_p_16_q0,
        buffer1_1_24_16x16_p_15_address0,
        buffer1_1_24_16x16_p_15_ce0,
        buffer1_1_24_16x16_p_15_q0,
        buffer1_1_24_16x16_p_14_address0,
        buffer1_1_24_16x16_p_14_ce0,
        buffer1_1_24_16x16_p_14_q0,
        buffer1_1_24_16x16_p_13_address0,
        buffer1_1_24_16x16_p_13_ce0,
        buffer1_1_24_16x16_p_13_q0,
        buffer1_1_24_16x16_p_12_address0,
        buffer1_1_24_16x16_p_12_ce0,
        buffer1_1_24_16x16_p_12_q0,
        buffer1_1_24_16x16_p_10_address0,
        buffer1_1_24_16x16_p_10_ce0,
        buffer1_1_24_16x16_p_10_q0,
        buffer1_1_24_16x16_p_9_address0,
        buffer1_1_24_16x16_p_9_ce0,
        buffer1_1_24_16x16_p_9_q0,
        buffer1_1_24_16x16_p_8_address0,
        buffer1_1_24_16x16_p_8_ce0,
        buffer1_1_24_16x16_p_8_q0,
        buffer1_1_24_16x16_p_7_address0,
        buffer1_1_24_16x16_p_7_ce0,
        buffer1_1_24_16x16_p_7_q0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;
output  [4:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [8:0] buffer1_1_24_16x16_p_23_address0;
output   buffer1_1_24_16x16_p_23_ce0;
input  [7:0] buffer1_1_24_16x16_p_23_q0;
output  [8:0] buffer1_1_24_16x16_p_22_address0;
output   buffer1_1_24_16x16_p_22_ce0;
input  [7:0] buffer1_1_24_16x16_p_22_q0;
output  [8:0] buffer1_1_24_16x16_p_11_address0;
output   buffer1_1_24_16x16_p_11_ce0;
input  [7:0] buffer1_1_24_16x16_p_11_q0;
output  [8:0] buffer1_1_24_16x16_p_6_address0;
output   buffer1_1_24_16x16_p_6_ce0;
input  [7:0] buffer1_1_24_16x16_p_6_q0;
output  [8:0] buffer1_1_24_16x16_p_5_address0;
output   buffer1_1_24_16x16_p_5_ce0;
input  [7:0] buffer1_1_24_16x16_p_5_q0;
output  [8:0] buffer1_1_24_16x16_p_4_address0;
output   buffer1_1_24_16x16_p_4_ce0;
input  [7:0] buffer1_1_24_16x16_p_4_q0;
output  [8:0] buffer1_1_24_16x16_p_3_address0;
output   buffer1_1_24_16x16_p_3_ce0;
input  [7:0] buffer1_1_24_16x16_p_3_q0;
output  [8:0] buffer1_1_24_16x16_p_2_address0;
output   buffer1_1_24_16x16_p_2_ce0;
input  [7:0] buffer1_1_24_16x16_p_2_q0;
output  [8:0] buffer1_1_24_16x16_p_1_address0;
output   buffer1_1_24_16x16_p_1_ce0;
input  [7:0] buffer1_1_24_16x16_p_1_q0;
output  [8:0] buffer1_1_24_16x16_p_address0;
output   buffer1_1_24_16x16_p_ce0;
input  [7:0] buffer1_1_24_16x16_p_q0;
output  [8:0] buffer1_1_24_16x16_p_21_address0;
output   buffer1_1_24_16x16_p_21_ce0;
input  [7:0] buffer1_1_24_16x16_p_21_q0;
output  [8:0] buffer1_1_24_16x16_p_20_address0;
output   buffer1_1_24_16x16_p_20_ce0;
input  [7:0] buffer1_1_24_16x16_p_20_q0;
output  [8:0] buffer1_1_24_16x16_p_19_address0;
output   buffer1_1_24_16x16_p_19_ce0;
input  [7:0] buffer1_1_24_16x16_p_19_q0;
output  [8:0] buffer1_1_24_16x16_p_18_address0;
output   buffer1_1_24_16x16_p_18_ce0;
input  [7:0] buffer1_1_24_16x16_p_18_q0;
output  [8:0] buffer1_1_24_16x16_p_17_address0;
output   buffer1_1_24_16x16_p_17_ce0;
input  [7:0] buffer1_1_24_16x16_p_17_q0;
output  [8:0] buffer1_1_24_16x16_p_16_address0;
output   buffer1_1_24_16x16_p_16_ce0;
input  [7:0] buffer1_1_24_16x16_p_16_q0;
output  [8:0] buffer1_1_24_16x16_p_15_address0;
output   buffer1_1_24_16x16_p_15_ce0;
input  [7:0] buffer1_1_24_16x16_p_15_q0;
output  [8:0] buffer1_1_24_16x16_p_14_address0;
output   buffer1_1_24_16x16_p_14_ce0;
input  [7:0] buffer1_1_24_16x16_p_14_q0;
output  [8:0] buffer1_1_24_16x16_p_13_address0;
output   buffer1_1_24_16x16_p_13_ce0;
input  [7:0] buffer1_1_24_16x16_p_13_q0;
output  [8:0] buffer1_1_24_16x16_p_12_address0;
output   buffer1_1_24_16x16_p_12_ce0;
input  [7:0] buffer1_1_24_16x16_p_12_q0;
output  [8:0] buffer1_1_24_16x16_p_10_address0;
output   buffer1_1_24_16x16_p_10_ce0;
input  [7:0] buffer1_1_24_16x16_p_10_q0;
output  [8:0] buffer1_1_24_16x16_p_9_address0;
output   buffer1_1_24_16x16_p_9_ce0;
input  [7:0] buffer1_1_24_16x16_p_9_q0;
output  [8:0] buffer1_1_24_16x16_p_8_address0;
output   buffer1_1_24_16x16_p_8_ce0;
input  [7:0] buffer1_1_24_16x16_p_8_q0;
output  [8:0] buffer1_1_24_16x16_p_7_address0;
output   buffer1_1_24_16x16_p_7_ce0;
input  [7:0] buffer1_1_24_16x16_p_7_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_V_ce0;
reg bias_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg buffer1_1_24_16x16_p_23_ce0;
reg buffer1_1_24_16x16_p_22_ce0;
reg buffer1_1_24_16x16_p_11_ce0;
reg buffer1_1_24_16x16_p_6_ce0;
reg buffer1_1_24_16x16_p_5_ce0;
reg buffer1_1_24_16x16_p_4_ce0;
reg buffer1_1_24_16x16_p_3_ce0;
reg buffer1_1_24_16x16_p_2_ce0;
reg buffer1_1_24_16x16_p_1_ce0;
reg buffer1_1_24_16x16_p_ce0;
reg buffer1_1_24_16x16_p_21_ce0;
reg buffer1_1_24_16x16_p_20_ce0;
reg buffer1_1_24_16x16_p_19_ce0;
reg buffer1_1_24_16x16_p_18_ce0;
reg buffer1_1_24_16x16_p_17_ce0;
reg buffer1_1_24_16x16_p_16_ce0;
reg buffer1_1_24_16x16_p_15_ce0;
reg buffer1_1_24_16x16_p_14_ce0;
reg buffer1_1_24_16x16_p_13_ce0;
reg buffer1_1_24_16x16_p_12_ce0;
reg buffer1_1_24_16x16_p_10_ce0;
reg buffer1_1_24_16x16_p_9_ce0;
reg buffer1_1_24_16x16_p_8_ce0;
reg buffer1_1_24_16x16_p_7_ce0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [8:0] tmp_197_cast_fu_562_p1;
reg  signed [8:0] tmp_197_cast_reg_1203;
wire    ap_CS_fsm_state2;
wire   [9:0] tmp_187_fu_590_p2;
reg   [9:0] tmp_187_reg_1208;
wire   [4:0] co_6_fu_602_p2;
reg   [4:0] co_6_reg_1216;
reg   [4:0] bias_V_addr_reg_1221;
wire   [0:0] exitcond5_fu_596_p2;
wire   [13:0] tmp_190_fu_637_p2;
reg   [13:0] tmp_190_reg_1226;
wire    ap_CS_fsm_state3;
reg   [12:0] output_V_addr_reg_1234;
wire    ap_CS_fsm_state4;
wire   [4:0] h_6_fu_669_p2;
wire   [0:0] exitcond7_fu_663_p2;
wire   [8:0] tmp_194_fu_690_p2;
reg   [8:0] tmp_194_reg_1247;
wire    ap_CS_fsm_state5;
wire   [1:0] m_6_fu_702_p2;
reg   [1:0] m_6_reg_1255;
wire   [9:0] tmp_197_fu_748_p2;
reg   [9:0] tmp_197_reg_1260;
wire   [0:0] exitcond8_fu_696_p2;
reg   [7:0] weight_V_addr_reg_1265;
wire    ap_CS_fsm_state6;
wire   [1:0] n_6_fu_774_p2;
reg   [1:0] n_6_reg_1273;
wire   [9:0] tmp_199_fu_800_p2;
reg   [9:0] tmp_199_reg_1278;
wire   [0:0] exitcond_fu_768_p2;
wire    ap_CS_fsm_state7;
reg   [7:0] weight_V_load_reg_1403;
wire    ap_CS_fsm_state8;
wire   [7:0] tmp_76_fu_832_p26;
reg   [7:0] tmp_76_reg_1408;
wire   [15:0] p_Val2_7_fu_892_p2;
reg   [15:0] p_Val2_7_reg_1413;
wire    ap_CS_fsm_state9;
reg   [0:0] tmp_201_reg_1418;
wire   [15:0] p_Val2_57_fu_918_p2;
reg   [15:0] p_Val2_57_reg_1423;
wire    ap_CS_fsm_state10;
reg   [0:0] signbit_reg_1428;
wire   [7:0] p_Val2_59_fu_952_p2;
reg   [7:0] p_Val2_59_reg_1435;
wire   [0:0] newsignbit_fu_958_p3;
reg   [0:0] newsignbit_reg_1441;
wire   [0:0] carry_fu_972_p2;
reg   [0:0] carry_reg_1447;
reg   [1:0] tmp_80_reg_1454;
wire   [0:0] p_38_i_i_fu_1030_p2;
reg   [0:0] p_38_i_i_reg_1460;
wire    ap_CS_fsm_state11;
wire   [0:0] tmp_82_fu_1046_p2;
reg   [0:0] tmp_82_reg_1465;
wire   [0:0] brmerge40_demorgan_i_fu_1057_p2;
reg   [0:0] brmerge40_demorgan_i_reg_1470;
wire   [0:0] underflow_fu_1074_p2;
reg   [0:0] underflow_reg_1475;
wire   [0:0] brmerge_i_i_i_fu_1079_p2;
reg   [0:0] brmerge_i_i_i_reg_1480;
wire   [7:0] sum_V_fu_1106_p3;
wire    ap_CS_fsm_state12;
reg   [0:0] isneg_reg_1490;
wire    ap_CS_fsm_state13;
wire   [7:0] result_V_fu_1136_p2;
reg   [7:0] result_V_reg_1497;
reg   [0:0] newsignbit_9_reg_1503;
wire   [4:0] w_6_fu_1150_p2;
reg   [4:0] w_6_reg_1510;
reg   [4:0] co_reg_453;
wire   [0:0] exitcond6_fu_643_p2;
reg   [4:0] h_reg_465;
reg   [4:0] w_reg_477;
wire    ap_CS_fsm_state14;
reg   [7:0] p_Val2_s_reg_489;
reg   [1:0] m_reg_501;
reg   [7:0] p_Val2_56_reg_512;
reg   [1:0] n_reg_524;
wire   [31:0] co_cast_fu_535_p1;
wire   [31:0] tmp_205_cast_fu_658_p1;
wire   [31:0] tmp_212_cast_fu_763_p1;
wire   [31:0] tmp_213_cast_fu_805_p1;
wire   [6:0] tmp_183_fu_544_p3;
wire   [7:0] p_shl2_cast_fu_552_p1;
wire   [7:0] co_cast_cast_fu_540_p1;
wire   [7:0] tmp_184_fu_556_p2;
wire   [8:0] tmp_185_fu_566_p3;
wire   [5:0] tmp_186_fu_578_p3;
wire   [9:0] p_shl1_cast_fu_586_p1;
wire   [9:0] p_shl_cast_fu_574_p1;
wire   [9:0] h_cast9_cast_fu_608_p1;
wire   [9:0] tmp_188_fu_612_p2;
wire   [10:0] tmp_189_fu_625_p3;
wire   [13:0] p_shl3_cast_fu_617_p3;
wire   [13:0] p_shl4_cast_fu_633_p1;
wire   [13:0] w_cast8_cast_fu_649_p1;
wire   [13:0] tmp_191_fu_653_p2;
wire   [8:0] m_cast7_cast_fu_675_p1;
wire   [8:0] tmp_192_fu_679_p2;
wire   [8:0] tmp_193_fu_684_p2;
wire   [1:0] tmp2_fu_708_p2;
wire  signed [4:0] tmp2_cast_fu_714_p1;
wire   [4:0] tmp_74_fu_718_p2;
wire   [8:0] tmp_195_fu_724_p3;
wire   [5:0] tmp_196_fu_736_p3;
wire   [9:0] p_shl7_cast_fu_744_p1;
wire   [9:0] p_shl6_cast_fu_732_p1;
wire   [8:0] n_cast6_cast_fu_754_p1;
wire   [8:0] tmp_198_fu_758_p2;
wire   [1:0] tmp3_fu_780_p2;
wire  signed [4:0] tmp3_cast_fu_786_p1;
wire   [4:0] tmp_75_fu_790_p2;
wire   [9:0] tmp_121_cast_cast_fu_796_p1;
wire  signed [7:0] p_Val2_7_fu_892_p0;
wire  signed [7:0] p_Val2_7_fu_892_p1;
wire   [13:0] tmp_77_fu_906_p3;
wire  signed [15:0] tmp_123_cast_fu_914_p1;
wire   [7:0] p_Val2_58_fu_931_p4;
wire   [7:0] tmp_78_fu_941_p1;
wire   [0:0] tmp_202_fu_944_p3;
wire   [0:0] tmp_79_fu_966_p2;
wire   [0:0] Range1_all_ones_fu_995_p2;
wire   [0:0] Range1_all_zeros_fu_1000_p2;
wire   [0:0] tmp_204_fu_988_p3;
wire   [0:0] tmp_81_fu_1012_p2;
wire   [0:0] p_41_i_i_fu_1018_p2;
wire   [0:0] deleted_zeros_fu_1005_p3;
wire   [0:0] p_not_i_i_fu_1035_p2;
wire   [0:0] brmerge_i_i6_fu_1041_p2;
wire   [0:0] deleted_ones_fu_1023_p3;
wire   [0:0] tmp4_demorgan_fu_1062_p2;
wire   [0:0] tmp4_fu_1068_p2;
wire   [0:0] overflow_fu_1051_p2;
wire   [0:0] tmp5_fu_1085_p2;
wire   [0:0] underflow_not_fu_1089_p2;
wire   [7:0] p_Val2_48_mux_fu_1094_p3;
wire   [7:0] p_Val2_s_75_fu_1100_p3;
wire  signed [8:0] tmp_s_fu_1118_p1;
wire  signed [8:0] tmp_fu_1114_p1;
wire   [8:0] p_Val2_54_fu_1122_p2;
wire   [0:0] tmp_73_fu_1156_p2;
wire   [0:0] isneg_not_fu_1170_p2;
wire   [0:0] brmerge_i_i_fu_1166_p2;
wire   [0:0] underflow_9_fu_1161_p2;
wire   [0:0] brmerge9_fu_1175_p2;
wire   [7:0] result_V_mux_fu_1180_p3;
wire   [7:0] p_result_V_fu_1187_p3;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

ShuffleNetV2_mux_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_dEe_x_U196(
    .din1(buffer1_1_24_16x16_p_23_q0),
    .din2(buffer1_1_24_16x16_p_22_q0),
    .din3(buffer1_1_24_16x16_p_11_q0),
    .din4(buffer1_1_24_16x16_p_6_q0),
    .din5(buffer1_1_24_16x16_p_5_q0),
    .din6(buffer1_1_24_16x16_p_4_q0),
    .din7(buffer1_1_24_16x16_p_3_q0),
    .din8(buffer1_1_24_16x16_p_2_q0),
    .din9(buffer1_1_24_16x16_p_1_q0),
    .din10(buffer1_1_24_16x16_p_q0),
    .din11(buffer1_1_24_16x16_p_21_q0),
    .din12(buffer1_1_24_16x16_p_20_q0),
    .din13(buffer1_1_24_16x16_p_19_q0),
    .din14(buffer1_1_24_16x16_p_18_q0),
    .din15(buffer1_1_24_16x16_p_17_q0),
    .din16(buffer1_1_24_16x16_p_16_q0),
    .din17(buffer1_1_24_16x16_p_15_q0),
    .din18(buffer1_1_24_16x16_p_14_q0),
    .din19(buffer1_1_24_16x16_p_13_q0),
    .din20(buffer1_1_24_16x16_p_12_q0),
    .din21(buffer1_1_24_16x16_p_10_q0),
    .din22(buffer1_1_24_16x16_p_9_q0),
    .din23(buffer1_1_24_16x16_p_8_q0),
    .din24(buffer1_1_24_16x16_p_7_q0),
    .din25(co_reg_453),
    .dout(tmp_76_fu_832_p26)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond6_fu_643_p2))) begin
        co_reg_453 <= co_6_reg_1216;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_453 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_596_p2 == 1'd0))) begin
        h_reg_465 <= 5'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond7_fu_663_p2 == 1'd1))) begin
        h_reg_465 <= h_6_fu_669_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond7_fu_663_p2))) begin
        m_reg_501 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_768_p2))) begin
        m_reg_501 <= m_6_reg_1255;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        n_reg_524 <= n_6_reg_1273;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond8_fu_696_p2))) begin
        n_reg_524 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        p_Val2_56_reg_512 <= sum_V_fu_1106_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond8_fu_696_p2))) begin
        p_Val2_56_reg_512 <= p_Val2_s_reg_489;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond7_fu_663_p2))) begin
        p_Val2_s_reg_489 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_768_p2))) begin
        p_Val2_s_reg_489 <= p_Val2_56_reg_512;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond6_fu_643_p2))) begin
        w_reg_477 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        w_reg_477 <= w_6_reg_1510;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_596_p2 == 1'd0))) begin
        bias_V_addr_reg_1221 <= co_cast_fu_535_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        brmerge40_demorgan_i_reg_1470 <= brmerge40_demorgan_i_fu_1057_p2;
        brmerge_i_i_i_reg_1480 <= brmerge_i_i_i_fu_1079_p2;
        p_38_i_i_reg_1460 <= p_38_i_i_fu_1030_p2;
        tmp_82_reg_1465 <= tmp_82_fu_1046_p2;
        underflow_reg_1475 <= underflow_fu_1074_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        carry_reg_1447 <= carry_fu_972_p2;
        newsignbit_reg_1441 <= p_Val2_59_fu_952_p2[32'd7];
        p_Val2_57_reg_1423 <= p_Val2_57_fu_918_p2;
        p_Val2_59_reg_1435 <= p_Val2_59_fu_952_p2;
        signbit_reg_1428 <= p_Val2_57_fu_918_p2[32'd15];
        tmp_80_reg_1454 <= {{p_Val2_57_fu_918_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_6_reg_1216 <= co_6_fu_602_p2;
        tmp_187_reg_1208[9 : 1] <= tmp_187_fu_590_p2[9 : 1];
        tmp_197_cast_reg_1203 <= tmp_197_cast_fu_562_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        isneg_reg_1490 <= p_Val2_54_fu_1122_p2[32'd8];
        newsignbit_9_reg_1503 <= result_V_fu_1136_p2[32'd7];
        result_V_reg_1497 <= result_V_fu_1136_p2;
        w_6_reg_1510 <= w_6_fu_1150_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_6_reg_1255 <= m_6_fu_702_p2;
        tmp_194_reg_1247 <= tmp_194_fu_690_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_6_reg_1273 <= n_6_fu_774_p2;
        weight_V_addr_reg_1265 <= tmp_212_cast_fu_763_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_V_addr_reg_1234 <= tmp_205_cast_fu_658_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_Val2_7_reg_1413 <= p_Val2_7_fu_892_p2;
        tmp_201_reg_1418 <= p_Val2_7_fu_892_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_190_reg_1226[13 : 1] <= tmp_190_fu_637_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond8_fu_696_p2))) begin
        tmp_197_reg_1260[9 : 1] <= tmp_197_fu_748_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond_fu_768_p2))) begin
        tmp_199_reg_1278 <= tmp_199_fu_800_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_76_reg_1408 <= tmp_76_fu_832_p26;
        weight_V_load_reg_1403 <= weight_V_q0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_596_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_596_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_10_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_11_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_12_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_13_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_14_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_15_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_16_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_17_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_18_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_19_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_1_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_20_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_21_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_22_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_23_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_2_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_3_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_4_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_5_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_6_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_7_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_8_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_9_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer1_1_24_16x16_p_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_596_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond6_fu_643_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond7_fu_663_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond8_fu_696_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond_fu_768_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_995_p2 = ((tmp_80_reg_1454 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_1000_p2 = ((tmp_80_reg_1454 == 2'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_V_address0 = bias_V_addr_reg_1221;

assign brmerge40_demorgan_i_fu_1057_p2 = (newsignbit_reg_1441 & deleted_ones_fu_1023_p3);

assign brmerge9_fu_1175_p2 = (newsignbit_9_reg_1503 | isneg_not_fu_1170_p2);

assign brmerge_i_i6_fu_1041_p2 = (newsignbit_reg_1441 | p_not_i_i_fu_1035_p2);

assign brmerge_i_i_fu_1166_p2 = (isneg_reg_1490 ^ newsignbit_9_reg_1503);

assign brmerge_i_i_i_fu_1079_p2 = (underflow_fu_1074_p2 | overflow_fu_1051_p2);

assign buffer1_1_24_16x16_p_10_address0 = tmp_213_cast_fu_805_p1;

assign buffer1_1_24_16x16_p_11_address0 = tmp_213_cast_fu_805_p1;

assign buffer1_1_24_16x16_p_12_address0 = tmp_213_cast_fu_805_p1;

assign buffer1_1_24_16x16_p_13_address0 = tmp_213_cast_fu_805_p1;

assign buffer1_1_24_16x16_p_14_address0 = tmp_213_cast_fu_805_p1;

assign buffer1_1_24_16x16_p_15_address0 = tmp_213_cast_fu_805_p1;

assign buffer1_1_24_16x16_p_16_address0 = tmp_213_cast_fu_805_p1;

assign buffer1_1_24_16x16_p_17_address0 = tmp_213_cast_fu_805_p1;

assign buffer1_1_24_16x16_p_18_address0 = tmp_213_cast_fu_805_p1;

assign buffer1_1_24_16x16_p_19_address0 = tmp_213_cast_fu_805_p1;

assign buffer1_1_24_16x16_p_1_address0 = tmp_213_cast_fu_805_p1;

assign buffer1_1_24_16x16_p_20_address0 = tmp_213_cast_fu_805_p1;

assign buffer1_1_24_16x16_p_21_address0 = tmp_213_cast_fu_805_p1;

assign buffer1_1_24_16x16_p_22_address0 = tmp_213_cast_fu_805_p1;

assign buffer1_1_24_16x16_p_23_address0 = tmp_213_cast_fu_805_p1;

assign buffer1_1_24_16x16_p_2_address0 = tmp_213_cast_fu_805_p1;

assign buffer1_1_24_16x16_p_3_address0 = tmp_213_cast_fu_805_p1;

assign buffer1_1_24_16x16_p_4_address0 = tmp_213_cast_fu_805_p1;

assign buffer1_1_24_16x16_p_5_address0 = tmp_213_cast_fu_805_p1;

assign buffer1_1_24_16x16_p_6_address0 = tmp_213_cast_fu_805_p1;

assign buffer1_1_24_16x16_p_7_address0 = tmp_213_cast_fu_805_p1;

assign buffer1_1_24_16x16_p_8_address0 = tmp_213_cast_fu_805_p1;

assign buffer1_1_24_16x16_p_9_address0 = tmp_213_cast_fu_805_p1;

assign buffer1_1_24_16x16_p_address0 = tmp_213_cast_fu_805_p1;

assign carry_fu_972_p2 = (tmp_202_fu_944_p3 & tmp_79_fu_966_p2);

assign co_6_fu_602_p2 = (co_reg_453 + 5'd1);

assign co_cast_cast_fu_540_p1 = co_reg_453;

assign co_cast_fu_535_p1 = co_reg_453;

assign deleted_ones_fu_1023_p3 = ((carry_reg_1447[0:0] === 1'b1) ? p_41_i_i_fu_1018_p2 : Range1_all_ones_fu_995_p2);

assign deleted_zeros_fu_1005_p3 = ((carry_reg_1447[0:0] === 1'b1) ? Range1_all_ones_fu_995_p2 : Range1_all_zeros_fu_1000_p2);

assign exitcond5_fu_596_p2 = ((co_reg_453 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond6_fu_643_p2 = ((h_reg_465 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond7_fu_663_p2 = ((w_reg_477 == 5'd17) ? 1'b1 : 1'b0);

assign exitcond8_fu_696_p2 = ((m_reg_501 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_768_p2 = ((n_reg_524 == 2'd3) ? 1'b1 : 1'b0);

assign h_6_fu_669_p2 = (h_reg_465 + 5'd1);

assign h_cast9_cast_fu_608_p1 = h_reg_465;

assign isneg_not_fu_1170_p2 = (isneg_reg_1490 ^ 1'd1);

assign m_6_fu_702_p2 = (2'd1 + m_reg_501);

assign m_cast7_cast_fu_675_p1 = m_reg_501;

assign n_6_fu_774_p2 = (n_reg_524 + 2'd1);

assign n_cast6_cast_fu_754_p1 = n_reg_524;

assign newsignbit_fu_958_p3 = p_Val2_59_fu_952_p2[32'd7];

assign output_V_address0 = output_V_addr_reg_1234;

assign output_V_d0 = ((brmerge9_fu_1175_p2[0:0] === 1'b1) ? result_V_mux_fu_1180_p3 : p_result_V_fu_1187_p3);

assign overflow_fu_1051_p2 = (brmerge_i_i6_fu_1041_p2 & tmp_82_fu_1046_p2);

assign p_38_i_i_fu_1030_p2 = (carry_reg_1447 & Range1_all_ones_fu_995_p2);

assign p_41_i_i_fu_1018_p2 = (signbit_reg_1428 & tmp_81_fu_1012_p2);

assign p_Val2_48_mux_fu_1094_p3 = ((brmerge_i_i_i_reg_1480[0:0] === 1'b1) ? 8'd127 : p_Val2_59_reg_1435);

assign p_Val2_54_fu_1122_p2 = ($signed(tmp_s_fu_1118_p1) + $signed(tmp_fu_1114_p1));

assign p_Val2_57_fu_918_p2 = ($signed(tmp_123_cast_fu_914_p1) + $signed(p_Val2_7_reg_1413));

assign p_Val2_58_fu_931_p4 = {{p_Val2_57_fu_918_p2[13:6]}};

assign p_Val2_59_fu_952_p2 = (p_Val2_58_fu_931_p4 + tmp_78_fu_941_p1);

assign p_Val2_7_fu_892_p0 = weight_V_load_reg_1403;

assign p_Val2_7_fu_892_p1 = tmp_76_reg_1408;

assign p_Val2_7_fu_892_p2 = ($signed(p_Val2_7_fu_892_p0) * $signed(p_Val2_7_fu_892_p1));

assign p_Val2_s_75_fu_1100_p3 = ((underflow_reg_1475[0:0] === 1'b1) ? 8'd128 : p_Val2_59_reg_1435);

assign p_not_i_i_fu_1035_p2 = (deleted_zeros_fu_1005_p3 ^ 1'd1);

assign p_result_V_fu_1187_p3 = ((underflow_9_fu_1161_p2[0:0] === 1'b1) ? 8'd128 : result_V_reg_1497);

assign p_shl1_cast_fu_586_p1 = tmp_186_fu_578_p3;

assign p_shl2_cast_fu_552_p1 = tmp_183_fu_544_p3;

assign p_shl3_cast_fu_617_p3 = {{tmp_188_fu_612_p2}, {4'd0}};

assign p_shl4_cast_fu_633_p1 = tmp_189_fu_625_p3;

assign p_shl6_cast_fu_732_p1 = tmp_195_fu_724_p3;

assign p_shl7_cast_fu_744_p1 = tmp_196_fu_736_p3;

assign p_shl_cast_fu_574_p1 = tmp_185_fu_566_p3;

assign result_V_fu_1136_p2 = (bias_V_q0 + p_Val2_s_reg_489);

assign result_V_mux_fu_1180_p3 = ((brmerge_i_i_fu_1166_p2[0:0] === 1'b1) ? 8'd127 : result_V_reg_1497);

assign sum_V_fu_1106_p3 = ((underflow_not_fu_1089_p2[0:0] === 1'b1) ? p_Val2_48_mux_fu_1094_p3 : p_Val2_s_75_fu_1100_p3);

assign tmp2_cast_fu_714_p1 = $signed(tmp2_fu_708_p2);

assign tmp2_fu_708_p2 = ($signed(m_reg_501) + $signed(2'd3));

assign tmp3_cast_fu_786_p1 = $signed(tmp3_fu_780_p2);

assign tmp3_fu_780_p2 = ($signed(n_reg_524) + $signed(2'd3));

assign tmp4_demorgan_fu_1062_p2 = (p_38_i_i_fu_1030_p2 | brmerge40_demorgan_i_fu_1057_p2);

assign tmp4_fu_1068_p2 = (tmp4_demorgan_fu_1062_p2 ^ 1'd1);

assign tmp5_fu_1085_p2 = (brmerge40_demorgan_i_reg_1470 | tmp_82_reg_1465);

assign tmp_121_cast_cast_fu_796_p1 = tmp_75_fu_790_p2;

assign tmp_123_cast_fu_914_p1 = $signed(tmp_77_fu_906_p3);

assign tmp_183_fu_544_p3 = {{co_reg_453}, {2'd0}};

assign tmp_184_fu_556_p2 = (p_shl2_cast_fu_552_p1 - co_cast_cast_fu_540_p1);

assign tmp_185_fu_566_p3 = {{co_reg_453}, {4'd0}};

assign tmp_186_fu_578_p3 = {{co_reg_453}, {1'd0}};

assign tmp_187_fu_590_p2 = (p_shl1_cast_fu_586_p1 + p_shl_cast_fu_574_p1);

assign tmp_188_fu_612_p2 = (h_cast9_cast_fu_608_p1 + tmp_187_reg_1208);

assign tmp_189_fu_625_p3 = {{tmp_188_fu_612_p2}, {1'd0}};

assign tmp_190_fu_637_p2 = (p_shl3_cast_fu_617_p3 + p_shl4_cast_fu_633_p1);

assign tmp_191_fu_653_p2 = (tmp_190_reg_1226 + w_cast8_cast_fu_649_p1);

assign tmp_192_fu_679_p2 = ($signed(m_cast7_cast_fu_675_p1) + $signed(tmp_197_cast_reg_1203));

assign tmp_193_fu_684_p2 = tmp_192_fu_679_p2 << 9'd2;

assign tmp_194_fu_690_p2 = (tmp_193_fu_684_p2 - tmp_192_fu_679_p2);

assign tmp_195_fu_724_p3 = {{tmp_74_fu_718_p2}, {4'd0}};

assign tmp_196_fu_736_p3 = {{tmp_74_fu_718_p2}, {1'd0}};

assign tmp_197_cast_fu_562_p1 = $signed(tmp_184_fu_556_p2);

assign tmp_197_fu_748_p2 = (p_shl7_cast_fu_744_p1 + p_shl6_cast_fu_732_p1);

assign tmp_198_fu_758_p2 = (tmp_194_reg_1247 + n_cast6_cast_fu_754_p1);

assign tmp_199_fu_800_p2 = (tmp_121_cast_cast_fu_796_p1 + tmp_197_reg_1260);

assign tmp_202_fu_944_p3 = p_Val2_57_fu_918_p2[32'd13];

assign tmp_204_fu_988_p3 = p_Val2_57_reg_1423[32'd14];

assign tmp_205_cast_fu_658_p1 = tmp_191_fu_653_p2;

assign tmp_212_cast_fu_763_p1 = tmp_198_fu_758_p2;

assign tmp_213_cast_fu_805_p1 = tmp_199_reg_1278;

assign tmp_73_fu_1156_p2 = (newsignbit_9_reg_1503 ^ 1'd1);

assign tmp_74_fu_718_p2 = ($signed(h_reg_465) + $signed(tmp2_cast_fu_714_p1));

assign tmp_75_fu_790_p2 = ($signed(tmp3_cast_fu_786_p1) + $signed(w_reg_477));

assign tmp_77_fu_906_p3 = {{p_Val2_56_reg_512}, {6'd0}};

assign tmp_78_fu_941_p1 = tmp_201_reg_1418;

assign tmp_79_fu_966_p2 = (newsignbit_fu_958_p3 ^ 1'd1);

assign tmp_81_fu_1012_p2 = (tmp_204_fu_988_p3 ^ 1'd1);

assign tmp_82_fu_1046_p2 = (signbit_reg_1428 ^ 1'd1);

assign tmp_fu_1114_p1 = $signed(p_Val2_s_reg_489);

assign tmp_s_fu_1118_p1 = $signed(bias_V_q0);

assign underflow_9_fu_1161_p2 = (isneg_reg_1490 & tmp_73_fu_1156_p2);

assign underflow_fu_1074_p2 = (signbit_reg_1428 & tmp4_fu_1068_p2);

assign underflow_not_fu_1089_p2 = (tmp5_fu_1085_p2 | p_38_i_i_reg_1460);

assign w_6_fu_1150_p2 = (w_reg_477 + 5'd1);

assign w_cast8_cast_fu_649_p1 = w_reg_477;

assign weight_V_address0 = weight_V_addr_reg_1265;

always @ (posedge ap_clk) begin
    tmp_187_reg_1208[0] <= 1'b0;
    tmp_190_reg_1226[0] <= 1'b0;
    tmp_197_reg_1260[0] <= 1'b0;
end

endmodule //subconv_3x3_16_no_re
