// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv1_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        m_axi_weight_V_AWVALID,
        m_axi_weight_V_AWREADY,
        m_axi_weight_V_AWADDR,
        m_axi_weight_V_AWID,
        m_axi_weight_V_AWLEN,
        m_axi_weight_V_AWSIZE,
        m_axi_weight_V_AWBURST,
        m_axi_weight_V_AWLOCK,
        m_axi_weight_V_AWCACHE,
        m_axi_weight_V_AWPROT,
        m_axi_weight_V_AWQOS,
        m_axi_weight_V_AWREGION,
        m_axi_weight_V_AWUSER,
        m_axi_weight_V_WVALID,
        m_axi_weight_V_WREADY,
        m_axi_weight_V_WDATA,
        m_axi_weight_V_WSTRB,
        m_axi_weight_V_WLAST,
        m_axi_weight_V_WID,
        m_axi_weight_V_WUSER,
        m_axi_weight_V_ARVALID,
        m_axi_weight_V_ARREADY,
        m_axi_weight_V_ARADDR,
        m_axi_weight_V_ARID,
        m_axi_weight_V_ARLEN,
        m_axi_weight_V_ARSIZE,
        m_axi_weight_V_ARBURST,
        m_axi_weight_V_ARLOCK,
        m_axi_weight_V_ARCACHE,
        m_axi_weight_V_ARPROT,
        m_axi_weight_V_ARQOS,
        m_axi_weight_V_ARREGION,
        m_axi_weight_V_ARUSER,
        m_axi_weight_V_RVALID,
        m_axi_weight_V_RREADY,
        m_axi_weight_V_RDATA,
        m_axi_weight_V_RLAST,
        m_axi_weight_V_RID,
        m_axi_weight_V_RUSER,
        m_axi_weight_V_RRESP,
        m_axi_weight_V_BVALID,
        m_axi_weight_V_BREADY,
        m_axi_weight_V_BRESP,
        m_axi_weight_V_BID,
        m_axi_weight_V_BUSER,
        conv1_weight_V3,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        output_V_q0
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_pp0_stage0 = 20'd2;
parameter    ap_ST_fsm_state15 = 20'd4;
parameter    ap_ST_fsm_pp1_stage0 = 20'd8;
parameter    ap_ST_fsm_state19 = 20'd16;
parameter    ap_ST_fsm_state20 = 20'd32;
parameter    ap_ST_fsm_state21 = 20'd64;
parameter    ap_ST_fsm_state22 = 20'd128;
parameter    ap_ST_fsm_state23 = 20'd256;
parameter    ap_ST_fsm_state24 = 20'd512;
parameter    ap_ST_fsm_state25 = 20'd1024;
parameter    ap_ST_fsm_state26 = 20'd2048;
parameter    ap_ST_fsm_state27 = 20'd4096;
parameter    ap_ST_fsm_state28 = 20'd8192;
parameter    ap_ST_fsm_state29 = 20'd16384;
parameter    ap_ST_fsm_state30 = 20'd32768;
parameter    ap_ST_fsm_state31 = 20'd65536;
parameter    ap_ST_fsm_pp2_stage0 = 20'd131072;
parameter    ap_ST_fsm_pp2_stage1 = 20'd262144;
parameter    ap_ST_fsm_state36 = 20'd524288;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_V_address0;
output   input_V_ce0;
input  [7:0] input_V_q0;
output   m_axi_weight_V_AWVALID;
input   m_axi_weight_V_AWREADY;
output  [31:0] m_axi_weight_V_AWADDR;
output  [0:0] m_axi_weight_V_AWID;
output  [31:0] m_axi_weight_V_AWLEN;
output  [2:0] m_axi_weight_V_AWSIZE;
output  [1:0] m_axi_weight_V_AWBURST;
output  [1:0] m_axi_weight_V_AWLOCK;
output  [3:0] m_axi_weight_V_AWCACHE;
output  [2:0] m_axi_weight_V_AWPROT;
output  [3:0] m_axi_weight_V_AWQOS;
output  [3:0] m_axi_weight_V_AWREGION;
output  [0:0] m_axi_weight_V_AWUSER;
output   m_axi_weight_V_WVALID;
input   m_axi_weight_V_WREADY;
output  [7:0] m_axi_weight_V_WDATA;
output  [0:0] m_axi_weight_V_WSTRB;
output   m_axi_weight_V_WLAST;
output  [0:0] m_axi_weight_V_WID;
output  [0:0] m_axi_weight_V_WUSER;
output   m_axi_weight_V_ARVALID;
input   m_axi_weight_V_ARREADY;
output  [31:0] m_axi_weight_V_ARADDR;
output  [0:0] m_axi_weight_V_ARID;
output  [31:0] m_axi_weight_V_ARLEN;
output  [2:0] m_axi_weight_V_ARSIZE;
output  [1:0] m_axi_weight_V_ARBURST;
output  [1:0] m_axi_weight_V_ARLOCK;
output  [3:0] m_axi_weight_V_ARCACHE;
output  [2:0] m_axi_weight_V_ARPROT;
output  [3:0] m_axi_weight_V_ARQOS;
output  [3:0] m_axi_weight_V_ARREGION;
output  [0:0] m_axi_weight_V_ARUSER;
input   m_axi_weight_V_RVALID;
output   m_axi_weight_V_RREADY;
input  [7:0] m_axi_weight_V_RDATA;
input   m_axi_weight_V_RLAST;
input  [0:0] m_axi_weight_V_RID;
input  [0:0] m_axi_weight_V_RUSER;
input  [1:0] m_axi_weight_V_RRESP;
input   m_axi_weight_V_BVALID;
output   m_axi_weight_V_BREADY;
input  [1:0] m_axi_weight_V_BRESP;
input  [0:0] m_axi_weight_V_BID;
input  [0:0] m_axi_weight_V_BUSER;
input  [31:0] conv1_weight_V3;
output  [4:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output  [14:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
input  [7:0] output_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg m_axi_weight_V_ARVALID;
reg m_axi_weight_V_RREADY;
reg bias_V_ce0;
reg[14:0] output_V_address0;
reg output_V_ce0;
reg output_V_we0;
reg[7:0] output_V_d0;

(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    weight_V_blk_n_AR;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_flatten_reg_1757;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_1757;
reg    weight_V_blk_n_R;
reg    ap_enable_reg_pp0_iter11;
reg   [0:0] ap_reg_pp0_iter10_exitcond_flatten_reg_1757;
reg   [9:0] indvar_flatten14_reg_262;
reg   [4:0] i_reg_273;
reg   [5:0] indvar_flatten13_reg_285;
reg   [1:0] j_reg_296;
reg   [3:0] indvar_flatten_reg_308;
reg   [1:0] k_reg_320;
reg   [1:0] p_reg_332;
reg   [14:0] indvar_flatten15_reg_344;
reg   [4:0] i_1_reg_355;
reg   [11:0] indvar_flatten16_reg_367;
reg   [5:0] j_1_reg_378;
reg   [5:0] k_1_reg_390;
reg   [14:0] indvar_flatten17_reg_469;
reg   [4:0] i_2_reg_480;
reg   [11:0] indvar_flatten18_reg_491;
reg   [5:0] j_2_reg_502;
reg   [5:0] k_2_reg_513;
wire   [0:0] exitcond_flatten_fu_524_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
reg    ap_sig_ioackin_m_axi_weight_V_ARREADY;
reg    ap_block_state6_io;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
reg    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_1757;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_1757;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten_reg_1757;
reg   [0:0] ap_reg_pp0_iter5_exitcond_flatten_reg_1757;
reg   [0:0] ap_reg_pp0_iter6_exitcond_flatten_reg_1757;
reg   [0:0] ap_reg_pp0_iter7_exitcond_flatten_reg_1757;
reg   [0:0] ap_reg_pp0_iter8_exitcond_flatten_reg_1757;
reg   [0:0] ap_reg_pp0_iter9_exitcond_flatten_reg_1757;
reg   [0:0] ap_reg_pp0_iter11_exitcond_flatten_reg_1757;
wire   [9:0] indvar_flatten_next2_fu_530_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond_flatten18_fu_536_p2;
reg   [0:0] exitcond_flatten18_reg_1766;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten18_reg_1766;
wire   [5:0] indvar_flatten_next1_fu_548_p3;
wire   [4:0] i_cast_mid2_v_fu_569_p3;
reg   [4:0] i_cast_mid2_v_reg_1781;
reg    ap_enable_reg_pp0_iter1;
wire   [0:0] not_exitcond_flatten_fu_576_p2;
reg   [0:0] not_exitcond_flatten_reg_1788;
wire   [0:0] exitcond_flatten19_fu_581_p2;
reg   [0:0] exitcond_flatten19_reg_1793;
wire   [0:0] exitcond_flatten_mid_fu_587_p2;
reg   [0:0] exitcond_flatten_mid_reg_1798;
wire   [0:0] tmp_618_fu_599_p2;
reg   [0:0] tmp_618_reg_1803;
wire   [1:0] j_cast_mid2_fu_604_p3;
reg   [1:0] j_cast_mid2_reg_1809;
wire   [3:0] indvar_flatten_op_fu_612_p2;
reg   [3:0] indvar_flatten_op_reg_1815;
wire   [1:0] p_mid2_fu_723_p3;
reg   [1:0] p_mid2_reg_1820;
wire   [1:0] k_cast_mid2_fu_731_p3;
reg   [1:0] k_cast_mid2_reg_1825;
reg    ap_enable_reg_pp0_iter2;
wire   [31:0] tmp_622_fu_743_p2;
reg   [31:0] tmp_622_reg_1830;
wire   [1:0] p_1_fu_749_p2;
reg   [1:0] p_1_reg_1836;
wire   [3:0] indvar_flatten_next_fu_755_p3;
wire   [31:0] tmp_624_fu_774_p2;
reg   [31:0] tmp_624_reg_1846;
reg   [31:0] ap_reg_pp0_iter4_tmp_624_reg_1846;
reg   [31:0] ap_reg_pp0_iter5_tmp_624_reg_1846;
reg   [31:0] ap_reg_pp0_iter6_tmp_624_reg_1846;
reg   [31:0] ap_reg_pp0_iter7_tmp_624_reg_1846;
reg   [31:0] ap_reg_pp0_iter8_tmp_624_reg_1846;
reg   [31:0] ap_reg_pp0_iter9_tmp_624_reg_1846;
reg   [31:0] ap_reg_pp0_iter10_tmp_624_reg_1846;
reg   [31:0] ap_reg_pp0_iter11_tmp_624_reg_1846;
reg   [31:0] weight_V_addr_reg_1851;
reg   [7:0] weight_V_addr_read_reg_1857;
wire   [0:0] exitcond_flatten20_fu_791_p2;
reg   [0:0] exitcond_flatten20_reg_1862;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state16_pp1_stage0_iter0;
wire    ap_block_state17_pp1_stage0_iter1;
wire    ap_block_state18_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_flag00011001;
reg   [0:0] ap_reg_pp1_iter1_exitcond_flatten20_reg_1862;
wire   [14:0] indvar_flatten_next2_2_fu_797_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] exitcond_flatten21_fu_803_p2;
reg   [0:0] exitcond_flatten21_reg_1871;
wire   [0:0] exitcond79_mid_fu_821_p2;
reg   [0:0] exitcond79_mid_reg_1877;
wire   [5:0] k_1_mid2_fu_833_p3;
reg   [5:0] k_1_mid2_reg_1882;
reg   [5:0] ap_reg_pp1_iter1_k_1_mid2_reg_1882;
wire   [11:0] indvar_flatten_next2_1_fu_847_p3;
wire   [4:0] i_1_cast_mid2_v_fu_868_p3;
reg   [4:0] i_1_cast_mid2_v_reg_1893;
reg    ap_enable_reg_pp1_iter1;
wire   [5:0] j_1_cast_mid2_fu_916_p3;
reg   [5:0] j_1_cast_mid2_reg_1898;
wire   [10:0] tmp_629_fu_927_p2;
reg   [10:0] tmp_629_reg_1903;
wire   [5:0] k_4_fu_933_p2;
wire   [10:0] h_cast_cast_fu_976_p1;
reg   [10:0] h_cast_cast_reg_1919;
wire    ap_CS_fsm_state20;
wire   [0:0] exitcond52_fu_980_p2;
wire   [15:0] w_cast_cast_fu_986_p1;
reg   [15:0] w_cast_cast_reg_1928;
wire    ap_CS_fsm_state21;
wire   [5:0] h_34_fu_996_p2;
wire   [0:0] exitcond53_fu_990_p2;
wire   [31:0] m_cast_fu_1002_p1;
reg   [31:0] m_cast_reg_1941;
wire    ap_CS_fsm_state22;
wire   [1:0] m_7_fu_1012_p2;
reg   [1:0] m_7_reg_1949;
wire   [7:0] tmp_cast_cast_fu_1034_p1;
reg   [7:0] tmp_cast_cast_reg_1954;
wire   [0:0] exitcond55_fu_1006_p2;
wire   [5:0] w_44_fu_1038_p2;
wire   [10:0] n_cast_cast_fu_1044_p1;
reg   [10:0] n_cast_cast_reg_1964;
wire    ap_CS_fsm_state23;
wire   [1:0] n_7_fu_1054_p2;
reg   [1:0] n_7_reg_1972;
wire   [12:0] tmp_150_cast_cast_fu_1076_p1;
reg   [12:0] tmp_150_cast_cast_reg_1977;
wire   [0:0] exitcond56_fu_1048_p2;
wire   [8:0] ci_cast9_cast_fu_1080_p1;
reg   [8:0] ci_cast9_cast_reg_1982;
wire    ap_CS_fsm_state24;
reg   [11:0] input_V_addr_reg_1987;
wire   [1:0] ci_16_fu_1161_p2;
reg   [1:0] ci_16_reg_1995;
reg   [14:0] output_V_addr_2_reg_2000;
wire    ap_CS_fsm_state25;
wire   [10:0] tmp_2147_fu_1296_p1;
reg   [10:0] tmp_2147_reg_2005;
wire   [8:0] tmp_2148_fu_1300_p1;
reg   [8:0] tmp_2148_reg_2010;
wire   [0:0] exitcond58_fu_1304_p2;
reg   [0:0] exitcond58_reg_2015;
wire   [4:0] co_34_fu_1310_p2;
reg   [4:0] co_34_reg_2019;
wire    ap_CS_fsm_state26;
wire   [7:0] weight_temp_V_q0;
reg   [7:0] weight_temp_V_load_reg_2029;
wire    ap_CS_fsm_state27;
reg   [7:0] input_V_load_reg_2034;
wire   [15:0] p_Val2_67_fu_1344_p2;
reg   [15:0] p_Val2_67_reg_2039;
wire    ap_CS_fsm_state28;
reg   [7:0] p_Val2_s_reg_2044;
reg   [0:0] tmp_2150_reg_2049;
wire   [15:0] p_Val2_68_fu_1369_p2;
reg   [15:0] p_Val2_68_reg_2054;
wire    ap_CS_fsm_state29;
reg   [0:0] signbit_reg_2059;
wire   [7:0] p_Val2_70_fu_1403_p2;
reg   [7:0] p_Val2_70_reg_2066;
wire   [0:0] newsignbit_fu_1409_p3;
reg   [0:0] newsignbit_reg_2072;
wire   [0:0] carry_fu_1423_p2;
reg   [0:0] carry_reg_2078;
reg   [1:0] tmp_254_reg_2085;
wire   [0:0] p_38_i_i_fu_1481_p2;
reg   [0:0] p_38_i_i_reg_2091;
wire    ap_CS_fsm_state30;
wire   [0:0] tmp_159_fu_1497_p2;
reg   [0:0] tmp_159_reg_2096;
wire   [0:0] brmerge40_demorgan_i_fu_1508_p2;
reg   [0:0] brmerge40_demorgan_i_reg_2101;
wire   [0:0] underflow_fu_1525_p2;
reg   [0:0] underflow_reg_2106;
wire   [0:0] brmerge_i_i_i_fu_1530_p2;
reg   [0:0] brmerge_i_i_i_reg_2111;
wire   [0:0] exitcond_flatten22_fu_1566_p2;
reg   [0:0] exitcond_flatten22_reg_2116;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state32_pp2_stage0_iter0;
wire    ap_block_state34_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_flag00011001;
wire   [14:0] indvar_flatten_next2_4_fu_1572_p2;
reg   [14:0] indvar_flatten_next2_4_reg_2120;
reg    ap_enable_reg_pp2_iter0;
wire   [5:0] j_2_mid_fu_1590_p3;
reg   [5:0] j_2_mid_reg_2125;
wire   [4:0] i_2_cast7_mid2_v_fu_1598_p3;
reg   [4:0] i_2_cast7_mid2_v_reg_2131;
wire   [0:0] exitcond_mid_fu_1618_p2;
reg   [0:0] exitcond_mid_reg_2138;
wire   [5:0] k_2_mid2_fu_1630_p3;
reg   [5:0] k_2_mid2_reg_2143;
wire   [11:0] indvar_flatten_next2_3_fu_1644_p3;
reg   [11:0] indvar_flatten_next2_3_reg_2149;
wire   [5:0] j_2_cast6_mid2_fu_1685_p3;
reg   [5:0] j_2_cast6_mid2_reg_2154;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_state33_pp2_stage1_iter0;
wire    ap_block_state35_pp2_stage1_iter1;
wire    ap_block_pp2_stage1_flag00011001;
wire   [10:0] tmp_636_fu_1695_p2;
reg   [10:0] tmp_636_reg_2159;
wire   [5:0] k_6_fu_1701_p2;
reg   [5:0] k_6_reg_2165;
reg   [14:0] output_V_addr_1_reg_2170;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter12;
wire    ap_CS_fsm_state15;
wire    ap_block_pp1_stage0_flag00011011;
reg    ap_condition_pp1_exit_iter0_state16;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp2_stage0_flag00011011;
reg    ap_condition_pp2_exit_iter0_state32;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage1_flag00011011;
reg   [9:0] weight_temp_V_address0;
reg    weight_temp_V_ce0;
reg    weight_temp_V_we0;
reg   [7:0] weight_temp_V_d0;
reg   [4:0] i_phi_fu_277_p4;
reg   [1:0] j_phi_fu_300_p4;
reg   [3:0] indvar_flatten_phi_fu_312_p4;
reg   [1:0] k_phi_fu_324_p4;
reg   [1:0] p_phi_fu_336_p4;
reg   [4:0] i_1_phi_fu_359_p4;
wire    ap_block_pp1_stage0_flag00000000;
reg   [5:0] j_1_phi_fu_382_p4;
reg   [5:0] k_1_phi_fu_394_p4;
reg   [5:0] h_reg_401;
wire    ap_CS_fsm_state19;
reg   [5:0] w_reg_413;
reg   [1:0] m_reg_425;
reg   [1:0] n_reg_436;
wire   [0:0] exitcond57_fu_1155_p2;
reg   [1:0] ci_reg_447;
reg   [4:0] co_reg_458;
wire    ap_CS_fsm_state31;
reg   [14:0] indvar_flatten17_phi_fu_473_p4;
wire    ap_block_pp2_stage0_flag00000000;
reg   [4:0] i_2_phi_fu_484_p4;
reg   [11:0] indvar_flatten18_phi_fu_495_p4;
reg   [5:0] j_2_phi_fu_506_p4;
reg   [5:0] k_2_phi_fu_517_p4;
wire   [31:0] i_1_cast_mid2_fu_875_p1;
wire   [31:0] tmp_764_cast_fu_971_p1;
wire   [31:0] tmp_781_cast_fu_1150_p1;
wire   [31:0] tmp_789_cast_fu_1237_p1;
wire   [31:0] tmp_798_cast_fu_1333_p1;
wire   [31:0] tmp_773_cast_fu_1739_p1;
wire   [31:0] sum_fu_780_p2;
reg    ap_reg_ioackin_m_axi_weight_V_ARREADY;
reg    ap_block_pp0_stage0_flag00001001;
wire   [7:0] this_assign_1_fu_1557_p3;
wire   [0:0] tmp_2143_fu_1744_p3;
wire    ap_block_pp2_stage1_flag00000000;
wire   [5:0] indvar_flatten13_op_fu_542_p2;
wire   [4:0] i_6_fu_556_p2;
wire   [1:0] j_mid_fu_562_p3;
wire   [1:0] j_6_fu_593_p2;
wire   [6:0] tmp_fu_621_p3;
wire   [7:0] p_shl2_cast_fu_628_p1;
wire   [7:0] i_cast_mid2_cast_fu_618_p1;
wire   [7:0] tmp_617_fu_632_p2;
wire   [0:0] exitcond_fu_642_p2;
wire   [8:0] j_cast_mid2_cast_fu_660_p1;
wire  signed [8:0] tmp_744_cast_fu_638_p1;
wire   [8:0] tmp_619_fu_663_p2;
wire   [10:0] tmp_2138_fu_673_p3;
wire  signed [31:0] p_shl1_fu_681_p1;
wire  signed [31:0] tmp_746_cast_fu_669_p1;
wire   [0:0] exitcond_flatten_not_fu_691_p2;
wire   [0:0] exitcond82_mid_fu_648_p2;
wire   [0:0] not_exitcond_flatten_4_fu_696_p2;
wire   [1:0] k_mid_fu_653_p3;
wire   [0:0] exitcond82_mid1_fu_701_p2;
wire   [0:0] tmp_621_fu_713_p2;
wire   [0:0] tmp_2139_fu_718_p2;
wire   [1:0] k_5_fu_707_p2;
wire   [31:0] k_cast_mid2_cast_fu_739_p1;
wire   [31:0] tmp_620_fu_685_p2;
wire   [31:0] tmp_2140_fu_761_p2;
wire   [31:0] p_cast_fu_771_p1;
wire   [31:0] tmp_623_fu_766_p2;
wire   [0:0] exitcond51_fu_815_p2;
wire   [0:0] not_exitcond_flatten_1_fu_809_p2;
wire   [0:0] tmp_628_fu_827_p2;
wire   [11:0] indvar_flatten44_op_fu_841_p2;
wire   [4:0] i_7_fu_855_p2;
wire   [9:0] tmp_625_fu_880_p3;
wire   [5:0] tmp_626_fu_892_p3;
wire   [10:0] p_shl5_cast_fu_888_p1;
wire   [10:0] p_shl6_cast_fu_900_p1;
wire   [5:0] j_1_mid_fu_861_p3;
wire   [5:0] j_7_fu_910_p2;
wire   [10:0] j_1_cast_mid2_cast_fu_923_p1;
wire   [10:0] tmp_627_fu_904_p2;
wire   [11:0] tmp_2141_fu_945_p3;
wire   [15:0] p_shl3_cast_fu_938_p3;
wire   [15:0] p_shl4_cast_fu_952_p1;
wire   [15:0] k_1_cast_cast_fu_962_p1;
wire   [15:0] tmp_630_fu_956_p2;
wire   [15:0] tmp_631_fu_965_p2;
wire   [1:0] tmp1_fu_1018_p2;
wire  signed [5:0] tmp1_cast_fu_1024_p1;
wire   [5:0] tmp_s_fu_1028_p2;
wire   [1:0] tmp2_fu_1060_p2;
wire  signed [5:0] tmp2_cast_fu_1066_p1;
wire   [5:0] tmp_150_fu_1070_p2;
wire   [6:0] tmp_639_fu_1084_p3;
wire   [2:0] tmp_640_fu_1096_p3;
wire   [7:0] p_shl9_cast_fu_1092_p1;
wire   [7:0] p_shl10_cast_fu_1104_p1;
wire   [7:0] tmp_641_fu_1108_p2;
wire   [7:0] tmp_642_fu_1114_p2;
wire   [8:0] tmp_2144_fu_1127_p3;
wire   [12:0] p_shl7_cast_fu_1119_p3;
wire   [12:0] p_shl8_cast_fu_1135_p1;
wire   [12:0] tmp_643_fu_1139_p2;
wire   [12:0] tmp_644_fu_1145_p2;
wire   [9:0] tmp_645_fu_1171_p3;
wire   [5:0] tmp_646_fu_1183_p3;
wire   [10:0] p_shl17_cast_fu_1191_p1;
wire   [10:0] p_shl16_cast_fu_1179_p1;
wire   [10:0] tmp_647_fu_1195_p2;
wire   [10:0] tmp_648_fu_1201_p2;
wire   [11:0] tmp_2145_fu_1214_p3;
wire   [15:0] p_shl15_cast_fu_1222_p1;
wire   [15:0] p_shl14_cast_fu_1206_p3;
wire   [15:0] tmp_649_fu_1226_p2;
wire   [15:0] tmp_650_fu_1232_p2;
wire   [6:0] tmp_651_fu_1242_p3;
wire   [7:0] p_shl13_cast_fu_1250_p1;
wire   [7:0] co_cast8_cast_fu_1167_p1;
wire   [7:0] tmp_652_fu_1254_p2;
wire  signed [8:0] tmp_791_cast_fu_1260_p1;
wire   [8:0] tmp_653_fu_1264_p2;
wire   [10:0] tmp_2146_fu_1273_p3;
wire  signed [31:0] p_shl_fu_1281_p1;
wire  signed [31:0] tmp_792_cast_fu_1269_p1;
wire   [31:0] tmp_654_fu_1285_p2;
wire   [31:0] tmp_655_fu_1291_p2;
wire   [10:0] p_shl11_cast_fu_1316_p3;
wire   [10:0] tmp_656_fu_1323_p2;
wire   [10:0] tmp_657_fu_1328_p2;
wire  signed [7:0] p_Val2_67_fu_1344_p0;
wire  signed [7:0] p_Val2_67_fu_1344_p1;
wire   [13:0] tmp_152_fu_1358_p3;
wire  signed [15:0] tmp_152_cast_fu_1365_p1;
wire   [7:0] tmp_155_fu_1392_p1;
wire   [7:0] p_Val2_69_fu_1382_p4;
wire   [0:0] tmp_2151_fu_1395_p3;
wire   [0:0] tmp_156_fu_1417_p2;
wire   [0:0] Range1_all_ones_fu_1446_p2;
wire   [0:0] Range1_all_zeros_fu_1451_p2;
wire   [0:0] tmp_2153_fu_1439_p3;
wire   [0:0] tmp_157_fu_1463_p2;
wire   [0:0] p_41_i_i_fu_1469_p2;
wire   [0:0] deleted_zeros_fu_1456_p3;
wire   [0:0] p_not_i_i_fu_1486_p2;
wire   [0:0] brmerge_i_i_fu_1492_p2;
wire   [0:0] deleted_ones_fu_1474_p3;
wire   [0:0] tmp3_demorgan_fu_1513_p2;
wire   [0:0] tmp3_fu_1519_p2;
wire   [0:0] overflow_fu_1502_p2;
wire   [0:0] tmp4_fu_1536_p2;
wire   [0:0] underflow_not_fu_1540_p2;
wire   [7:0] p_Val2_187_mux_fu_1545_p3;
wire   [7:0] p_Val2_s_504_fu_1551_p3;
wire   [0:0] exitcond_flatten23_fu_1584_p2;
wire   [4:0] i_8_fu_1578_p2;
wire   [0:0] exitcond54_fu_1612_p2;
wire   [0:0] not_exitcond_flatten_2_fu_1606_p2;
wire   [0:0] tmp_635_fu_1624_p2;
wire   [11:0] indvar_flatten66_op_fu_1638_p2;
wire   [9:0] tmp_632_fu_1652_p3;
wire   [5:0] tmp_633_fu_1663_p3;
wire   [10:0] p_shl20_cast_fu_1659_p1;
wire   [10:0] p_shl21_cast_fu_1670_p1;
wire   [5:0] j_8_fu_1680_p2;
wire   [10:0] j_2_cast6_mid2_cast_fu_1691_p1;
wire   [10:0] tmp_634_fu_1674_p2;
wire   [11:0] tmp_2142_fu_1713_p3;
wire   [15:0] p_shl18_cast_fu_1706_p3;
wire   [15:0] p_shl19_cast_fu_1720_p1;
wire   [15:0] k_2_cast5_cast_fu_1730_p1;
wire   [15:0] tmp_637_fu_1724_p2;
wire   [15:0] tmp_638_fu_1733_p2;
wire    ap_CS_fsm_state36;
reg   [19:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 20'd1;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_reg_ioackin_m_axi_weight_V_ARREADY = 1'b0;
end

conv1_p_weight_tebkb #(
    .DataWidth( 8 ),
    .AddressRange( 648 ),
    .AddressWidth( 10 ))
weight_temp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weight_temp_V_address0),
    .ce0(weight_temp_V_ce0),
    .we0(weight_temp_V_we0),
    .d0(weight_temp_V_d0),
    .q0(weight_temp_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter12 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp1_exit_iter0_state16))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state16)) begin
                ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state16 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp2_exit_iter0_state32))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state20) & (exitcond52_fu_980_p2 == 1'd1))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == ap_condition_pp2_exit_iter0_state32) & (ap_block_pp2_stage1_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp2_iter1 <= (ap_condition_pp2_exit_iter0_state32 ^ 1'b1);
        end else if (((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((1'b1 == ap_CS_fsm_state20) & (exitcond52_fu_980_p2 == 1'd1))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_weight_V_ARREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_1757))) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_m_axi_weight_V_ARREADY <= 1'b0;
            end else if (((1'b1 == m_axi_weight_V_ARREADY) & (ap_block_pp0_stage0_flag00001001 == 1'b0))) begin
                ap_reg_ioackin_m_axi_weight_V_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (1'd1 == exitcond58_reg_2015))) begin
        ci_reg_447 <= ci_16_reg_1995;
    end else if (((1'b1 == ap_CS_fsm_state23) & (1'd0 == exitcond56_fu_1048_p2))) begin
        ci_reg_447 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'd0 == exitcond57_fu_1155_p2))) begin
        co_reg_458 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        co_reg_458 <= co_34_reg_2019;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        h_reg_401 <= 6'd1;
    end else if (((1'b1 == ap_CS_fsm_state21) & (exitcond53_fu_990_p2 == 1'd1))) begin
        h_reg_401 <= h_34_fu_996_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_1_reg_355 <= 5'd0;
    end else if (((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter1_exitcond_flatten20_reg_1862))) begin
        i_1_reg_355 <= i_1_cast_mid2_v_reg_1893;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (exitcond52_fu_980_p2 == 1'd1))) begin
        i_2_reg_480 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten22_reg_2116) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        i_2_reg_480 <= i_2_cast7_mid2_v_reg_2131;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_1757) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        i_reg_273 <= i_cast_mid2_v_reg_1781;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_273 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_524_p2))) begin
        indvar_flatten13_reg_285 <= indvar_flatten_next1_fu_548_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten13_reg_285 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_524_p2))) begin
        indvar_flatten14_reg_262 <= indvar_flatten_next2_fu_530_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten14_reg_262 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        indvar_flatten15_reg_344 <= 15'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'd0 == exitcond_flatten20_fu_791_p2))) begin
        indvar_flatten15_reg_344 <= indvar_flatten_next2_2_fu_797_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        indvar_flatten16_reg_367 <= 12'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'd0 == exitcond_flatten20_fu_791_p2))) begin
        indvar_flatten16_reg_367 <= indvar_flatten_next2_1_fu_847_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (exitcond52_fu_980_p2 == 1'd1))) begin
        indvar_flatten17_reg_469 <= 15'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten22_reg_2116) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        indvar_flatten17_reg_469 <= indvar_flatten_next2_4_reg_2120;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (exitcond52_fu_980_p2 == 1'd1))) begin
        indvar_flatten18_reg_491 <= 12'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten22_reg_2116) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        indvar_flatten18_reg_491 <= indvar_flatten_next2_3_reg_2149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_1757) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        indvar_flatten_reg_308 <= indvar_flatten_next_fu_755_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_308 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        j_1_reg_378 <= 6'd1;
    end else if (((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter1_exitcond_flatten20_reg_1862))) begin
        j_1_reg_378 <= j_1_cast_mid2_reg_1898;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (exitcond52_fu_980_p2 == 1'd1))) begin
        j_2_reg_502 <= 6'd1;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten22_reg_2116) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        j_2_reg_502 <= j_2_cast6_mid2_reg_2154;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_1757) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        j_reg_296 <= j_cast_mid2_reg_1809;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_296 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        k_1_reg_390 <= 6'd1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == exitcond_flatten20_reg_1862))) begin
        k_1_reg_390 <= k_4_fu_933_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (exitcond52_fu_980_p2 == 1'd1))) begin
        k_2_reg_513 <= 6'd1;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten22_reg_2116) & (1'b1 == ap_enable_reg_pp2_iter1))) begin
        k_2_reg_513 <= k_6_reg_2165;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_1757) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        k_reg_320 <= k_cast_mid2_reg_1825;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_reg_320 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (1'd0 == exitcond53_fu_990_p2))) begin
        m_reg_425 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state23) & (1'd1 == exitcond56_fu_1048_p2))) begin
        m_reg_425 <= m_7_reg_1949;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'd1 == exitcond57_fu_1155_p2))) begin
        n_reg_436 <= n_7_reg_1972;
    end else if (((1'b1 == ap_CS_fsm_state22) & (1'd0 == exitcond55_fu_1006_p2))) begin
        n_reg_436 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_1757) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        p_reg_332 <= p_1_reg_1836;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_reg_332 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (1'd0 == exitcond52_fu_980_p2))) begin
        w_reg_413 <= 6'd1;
    end else if (((1'b1 == ap_CS_fsm_state22) & (1'd1 == exitcond55_fu_1006_p2))) begin
        w_reg_413 <= w_44_fu_1038_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter10_exitcond_flatten_reg_1757 <= ap_reg_pp0_iter9_exitcond_flatten_reg_1757;
        ap_reg_pp0_iter10_tmp_624_reg_1846 <= ap_reg_pp0_iter9_tmp_624_reg_1846;
        ap_reg_pp0_iter11_exitcond_flatten_reg_1757 <= ap_reg_pp0_iter10_exitcond_flatten_reg_1757;
        ap_reg_pp0_iter11_tmp_624_reg_1846 <= ap_reg_pp0_iter10_tmp_624_reg_1846;
        ap_reg_pp0_iter2_exitcond_flatten_reg_1757 <= ap_reg_pp0_iter1_exitcond_flatten_reg_1757;
        ap_reg_pp0_iter3_exitcond_flatten_reg_1757 <= ap_reg_pp0_iter2_exitcond_flatten_reg_1757;
        ap_reg_pp0_iter4_exitcond_flatten_reg_1757 <= ap_reg_pp0_iter3_exitcond_flatten_reg_1757;
        ap_reg_pp0_iter4_tmp_624_reg_1846 <= tmp_624_reg_1846;
        ap_reg_pp0_iter5_exitcond_flatten_reg_1757 <= ap_reg_pp0_iter4_exitcond_flatten_reg_1757;
        ap_reg_pp0_iter5_tmp_624_reg_1846 <= ap_reg_pp0_iter4_tmp_624_reg_1846;
        ap_reg_pp0_iter6_exitcond_flatten_reg_1757 <= ap_reg_pp0_iter5_exitcond_flatten_reg_1757;
        ap_reg_pp0_iter6_tmp_624_reg_1846 <= ap_reg_pp0_iter5_tmp_624_reg_1846;
        ap_reg_pp0_iter7_exitcond_flatten_reg_1757 <= ap_reg_pp0_iter6_exitcond_flatten_reg_1757;
        ap_reg_pp0_iter7_tmp_624_reg_1846 <= ap_reg_pp0_iter6_tmp_624_reg_1846;
        ap_reg_pp0_iter8_exitcond_flatten_reg_1757 <= ap_reg_pp0_iter7_exitcond_flatten_reg_1757;
        ap_reg_pp0_iter8_tmp_624_reg_1846 <= ap_reg_pp0_iter7_tmp_624_reg_1846;
        ap_reg_pp0_iter9_exitcond_flatten_reg_1757 <= ap_reg_pp0_iter8_exitcond_flatten_reg_1757;
        ap_reg_pp0_iter9_tmp_624_reg_1846 <= ap_reg_pp0_iter8_tmp_624_reg_1846;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten18_reg_1766 <= exitcond_flatten18_reg_1766;
        ap_reg_pp0_iter1_exitcond_flatten_reg_1757 <= exitcond_flatten_reg_1757;
        exitcond_flatten_reg_1757 <= exitcond_flatten_fu_524_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp1_iter1_exitcond_flatten20_reg_1862 <= exitcond_flatten20_reg_1862;
        ap_reg_pp1_iter1_k_1_mid2_reg_1882 <= k_1_mid2_reg_1882;
        exitcond_flatten20_reg_1862 <= exitcond_flatten20_fu_791_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        brmerge40_demorgan_i_reg_2101 <= brmerge40_demorgan_i_fu_1508_p2;
        brmerge_i_i_i_reg_2111 <= brmerge_i_i_i_fu_1530_p2;
        p_38_i_i_reg_2091 <= p_38_i_i_fu_1481_p2;
        tmp_159_reg_2096 <= tmp_159_fu_1497_p2;
        underflow_reg_2106 <= underflow_fu_1525_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        carry_reg_2078 <= carry_fu_1423_p2;
        newsignbit_reg_2072 <= p_Val2_70_fu_1403_p2[32'd7];
        p_Val2_68_reg_2054 <= p_Val2_68_fu_1369_p2;
        p_Val2_70_reg_2066 <= p_Val2_70_fu_1403_p2;
        signbit_reg_2059 <= p_Val2_68_fu_1369_p2[32'd15];
        tmp_254_reg_2085 <= {{p_Val2_68_fu_1369_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        ci_16_reg_1995 <= ci_16_fu_1161_p2;
        ci_cast9_cast_reg_1982[1 : 0] <= ci_cast9_cast_fu_1080_p1[1 : 0];
        input_V_addr_reg_1987 <= tmp_781_cast_fu_1150_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        co_34_reg_2019 <= co_34_fu_1310_p2;
        exitcond58_reg_2015 <= exitcond58_fu_1304_p2;
        output_V_addr_2_reg_2000 <= tmp_789_cast_fu_1237_p1;
        tmp_2147_reg_2005 <= tmp_2147_fu_1296_p1;
        tmp_2148_reg_2010 <= tmp_2148_fu_1300_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten20_fu_791_p2))) begin
        exitcond79_mid_reg_1877 <= exitcond79_mid_fu_821_p2;
        exitcond_flatten21_reg_1871 <= exitcond_flatten21_fu_803_p2;
        k_1_mid2_reg_1882 <= k_1_mid2_fu_833_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_524_p2))) begin
        exitcond_flatten18_reg_1766 <= exitcond_flatten18_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_reg_1757))) begin
        exitcond_flatten19_reg_1793 <= exitcond_flatten19_fu_581_p2;
        exitcond_flatten_mid_reg_1798 <= exitcond_flatten_mid_fu_587_p2;
        indvar_flatten_op_reg_1815 <= indvar_flatten_op_fu_612_p2;
        not_exitcond_flatten_reg_1788 <= not_exitcond_flatten_fu_576_p2;
        tmp_618_reg_1803 <= tmp_618_fu_599_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0))) begin
        exitcond_flatten22_reg_2116 <= exitcond_flatten22_fu_1566_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten22_fu_1566_p2))) begin
        exitcond_mid_reg_2138 <= exitcond_mid_fu_1618_p2;
        j_2_mid_reg_2125 <= j_2_mid_fu_1590_p3;
        k_2_mid2_reg_2143 <= k_2_mid2_fu_1630_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        h_cast_cast_reg_1919[5 : 0] <= h_cast_cast_fu_976_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == exitcond_flatten20_reg_1862))) begin
        i_1_cast_mid2_v_reg_1893 <= i_1_cast_mid2_v_fu_868_p3;
        j_1_cast_mid2_reg_1898 <= j_1_cast_mid2_fu_916_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'd0 == exitcond_flatten22_fu_1566_p2))) begin
        i_2_cast7_mid2_v_reg_2131 <= i_2_cast7_mid2_v_fu_1598_p3;
        indvar_flatten_next2_3_reg_2149 <= indvar_flatten_next2_3_fu_1644_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_flatten_reg_1757))) begin
        i_cast_mid2_v_reg_1781 <= i_cast_mid2_v_fu_569_p3;
        j_cast_mid2_reg_1809 <= j_cast_mid2_fu_604_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter0))) begin
        indvar_flatten_next2_4_reg_2120 <= indvar_flatten_next2_4_fu_1572_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        input_V_load_reg_2034 <= input_V_q0;
        weight_temp_V_load_reg_2029 <= weight_temp_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp2_iter0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten22_reg_2116))) begin
        j_2_cast6_mid2_reg_2154 <= j_2_cast6_mid2_fu_1685_p3;
        k_6_reg_2165 <= k_6_fu_1701_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_1757) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        k_cast_mid2_reg_1825 <= k_cast_mid2_fu_731_p3;
        p_1_reg_1836 <= p_1_fu_749_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        m_7_reg_1949 <= m_7_fu_1012_p2;
        m_cast_reg_1941[1 : 0] <= m_cast_fu_1002_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        n_7_reg_1972 <= n_7_fu_1054_p2;
        n_cast_cast_reg_1964[1 : 0] <= n_cast_cast_fu_1044_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten22_reg_2116))) begin
        output_V_addr_1_reg_2170 <= tmp_773_cast_fu_1739_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        p_Val2_67_reg_2039 <= p_Val2_67_fu_1344_p2;
        p_Val2_s_reg_2044 <= output_V_q0;
        tmp_2150_reg_2049 <= p_Val2_67_fu_1344_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_1757))) begin
        p_mid2_reg_1820 <= p_mid2_fu_723_p3;
        tmp_622_reg_1830 <= tmp_622_fu_743_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (1'd0 == exitcond56_fu_1048_p2))) begin
        tmp_150_cast_cast_reg_1977[5 : 0] <= tmp_150_cast_cast_fu_1076_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_1757))) begin
        tmp_624_reg_1846 <= tmp_624_fu_774_p2;
        weight_V_addr_reg_1851 <= sum_fu_780_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten20_reg_1862))) begin
        tmp_629_reg_1903 <= tmp_629_fu_927_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten22_reg_2116))) begin
        tmp_636_reg_2159 <= tmp_636_fu_1695_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (1'd0 == exitcond55_fu_1006_p2))) begin
        tmp_cast_cast_reg_1954[5 : 0] <= tmp_cast_cast_fu_1034_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        w_cast_cast_reg_1928[5 : 0] <= w_cast_cast_fu_986_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == ap_reg_pp0_iter10_exitcond_flatten_reg_1757) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        weight_V_addr_read_reg_1857 <= m_axi_weight_V_RDATA;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_524_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten20_fu_791_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state16 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state16 = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == exitcond_flatten22_fu_1566_p2)) begin
        ap_condition_pp2_exit_iter0_state32 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state32 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state36))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter8) & (1'b0 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_enable_reg_pp0_iter10) & (1'b0 == ap_enable_reg_pp0_iter11) & (1'b0 == ap_enable_reg_pp0_iter12))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp1_iter0) & (1'b0 == ap_enable_reg_pp1_iter1) & (1'b0 == ap_enable_reg_pp1_iter2))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp2_iter0) & (1'b0 == ap_enable_reg_pp2_iter1))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_weight_V_ARREADY)) begin
        ap_sig_ioackin_m_axi_weight_V_ARREADY = m_axi_weight_V_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_weight_V_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1))) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter1_exitcond_flatten20_reg_1862) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        i_1_phi_fu_359_p4 = i_1_cast_mid2_v_reg_1893;
    end else begin
        i_1_phi_fu_359_p4 = i_1_reg_355;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'd0 == exitcond_flatten22_reg_2116) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        i_2_phi_fu_484_p4 = i_2_cast7_mid2_v_reg_2131;
    end else begin
        i_2_phi_fu_484_p4 = i_2_reg_480;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_1757) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        i_phi_fu_277_p4 = i_cast_mid2_v_reg_1781;
    end else begin
        i_phi_fu_277_p4 = i_reg_273;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'd0 == exitcond_flatten22_reg_2116) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        indvar_flatten17_phi_fu_473_p4 = indvar_flatten_next2_4_reg_2120;
    end else begin
        indvar_flatten17_phi_fu_473_p4 = indvar_flatten17_reg_469;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'd0 == exitcond_flatten22_reg_2116) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        indvar_flatten18_phi_fu_495_p4 = indvar_flatten_next2_3_reg_2149;
    end else begin
        indvar_flatten18_phi_fu_495_p4 = indvar_flatten18_reg_491;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_1757) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        indvar_flatten_phi_fu_312_p4 = indvar_flatten_next_fu_755_p3;
    end else begin
        indvar_flatten_phi_fu_312_p4 = indvar_flatten_reg_308;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter1_exitcond_flatten20_reg_1862) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        j_1_phi_fu_382_p4 = j_1_cast_mid2_reg_1898;
    end else begin
        j_1_phi_fu_382_p4 = j_1_reg_378;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'd0 == exitcond_flatten22_reg_2116) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        j_2_phi_fu_506_p4 = j_2_cast6_mid2_reg_2154;
    end else begin
        j_2_phi_fu_506_p4 = j_2_reg_502;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_1757) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        j_phi_fu_300_p4 = j_cast_mid2_reg_1809;
    end else begin
        j_phi_fu_300_p4 = j_reg_296;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == exitcond_flatten20_reg_1862) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        k_1_phi_fu_394_p4 = k_4_fu_933_p2;
    end else begin
        k_1_phi_fu_394_p4 = k_1_reg_390;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'd0 == exitcond_flatten22_reg_2116) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        k_2_phi_fu_517_p4 = k_6_reg_2165;
    end else begin
        k_2_phi_fu_517_p4 = k_2_reg_513;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_1757) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        k_phi_fu_324_p4 = k_cast_mid2_reg_1825;
    end else begin
        k_phi_fu_324_p4 = k_reg_320;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_1757) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_m_axi_weight_V_ARREADY))) begin
        m_axi_weight_V_ARVALID = 1'b1;
    end else begin
        m_axi_weight_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter11) & (1'd0 == ap_reg_pp0_iter10_exitcond_flatten_reg_1757) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        m_axi_weight_V_RREADY = 1'b1;
    end else begin
        m_axi_weight_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage1_flag00000000 == 1'b0))) begin
        output_V_address0 = output_V_addr_1_reg_2170;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage0_flag00000000 == 1'b0))) begin
        output_V_address0 = tmp_773_cast_fu_1739_p1;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state31))) begin
        output_V_address0 = output_V_addr_2_reg_2000;
    end else if (((1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        output_V_address0 = tmp_764_cast_fu_971_p1;
    end else begin
        output_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | ((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2)) | (1'b1 == ap_CS_fsm_state31) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1)))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_block_pp2_stage1_flag00000000 == 1'b0))) begin
        output_V_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        output_V_d0 = this_assign_1_fu_1557_p3;
    end else if (((1'b1 == ap_enable_reg_pp1_iter2) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        output_V_d0 = bias_V_q0;
    end else begin
        output_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_reg_pp1_iter1_exitcond_flatten20_reg_1862)) | (1'b1 == ap_CS_fsm_state31) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'd1 == tmp_2143_fu_1744_p3)))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_1757) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        p_phi_fu_336_p4 = p_1_reg_1836;
    end else begin
        p_phi_fu_336_p4 = p_reg_332;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_1757))) begin
        weight_V_blk_n_AR = m_axi_weight_V_ARREADY;
    end else begin
        weight_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter11) & (1'd0 == ap_reg_pp0_iter10_exitcond_flatten_reg_1757))) begin
        weight_V_blk_n_R = m_axi_weight_V_RVALID;
    end else begin
        weight_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        weight_temp_V_address0 = tmp_798_cast_fu_1333_p1;
    end else if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter12))) begin
        weight_temp_V_address0 = ap_reg_pp0_iter11_tmp_624_reg_1846;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        weight_temp_V_address0 = 32'd0;
    end else begin
        weight_temp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state26) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter12)))) begin
        weight_temp_V_ce0 = 1'b1;
    end else begin
        weight_temp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter12))) begin
        weight_temp_V_d0 = weight_V_addr_read_reg_1857;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        weight_temp_V_d0 = 8'd0;
    end else begin
        weight_temp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter12) & (1'd0 == ap_reg_pp0_iter11_exitcond_flatten_reg_1757)))) begin
        weight_temp_V_we0 = 1'b1;
    end else begin
        weight_temp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter12) & (ap_enable_reg_pp0_iter11 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_524_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter12) & (ap_enable_reg_pp0_iter11 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_524_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (exitcond_flatten20_fu_791_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter2) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (exitcond_flatten20_fu_791_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (exitcond52_fu_980_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (exitcond53_fu_990_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (1'd1 == exitcond55_fu_1006_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (1'd1 == exitcond56_fu_1048_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (1'd1 == exitcond57_fu_1155_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (1'd1 == exitcond58_reg_2015))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (((ap_block_pp2_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp2_iter0) & (ap_block_pp2_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond_flatten22_fu_1566_p2) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((1'b1 == ap_enable_reg_pp2_iter0) & (ap_block_pp2_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond_flatten22_fu_1566_p2) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if (((ap_block_pp2_stage1_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_enable_reg_pp2_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b1 == ap_CS_fsm_pp2_stage1) & (ap_block_pp2_stage1_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_1446_p2 = ((tmp_254_reg_2085 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_1451_p2 = ((tmp_254_reg_2085 == 2'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd19];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter11) & (1'd0 == ap_reg_pp0_iter10_exitcond_flatten_reg_1757) & (1'b0 == m_axi_weight_V_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter4) & (1'b1 == ap_block_state6_io)) | ((1'b1 == ap_enable_reg_pp0_iter11) & (1'd0 == ap_reg_pp0_iter10_exitcond_flatten_reg_1757) & (1'b0 == m_axi_weight_V_RVALID)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter4) & (1'b1 == ap_block_state6_io)) | ((1'b1 == ap_enable_reg_pp0_iter11) & (1'd0 == ap_reg_pp0_iter10_exitcond_flatten_reg_1757) & (1'b0 == m_axi_weight_V_RVALID)));
end

assign ap_block_pp1_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage0_iter11 = ((1'd0 == ap_reg_pp0_iter10_exitcond_flatten_reg_1757) & (1'b0 == m_axi_weight_V_RVALID));
end

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_1757) & (1'b0 == ap_sig_ioackin_m_axi_weight_V_ARREADY));
end

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign bias_V_address0 = i_1_cast_mid2_fu_875_p1;

assign brmerge40_demorgan_i_fu_1508_p2 = (newsignbit_reg_2072 & deleted_ones_fu_1474_p3);

assign brmerge_i_i_fu_1492_p2 = (newsignbit_reg_2072 | p_not_i_i_fu_1486_p2);

assign brmerge_i_i_i_fu_1530_p2 = (underflow_fu_1525_p2 | overflow_fu_1502_p2);

assign carry_fu_1423_p2 = (tmp_2151_fu_1395_p3 & tmp_156_fu_1417_p2);

assign ci_16_fu_1161_p2 = (ci_reg_447 + 2'd1);

assign ci_cast9_cast_fu_1080_p1 = ci_reg_447;

assign co_34_fu_1310_p2 = (5'd1 + co_reg_458);

assign co_cast8_cast_fu_1167_p1 = co_reg_458;

assign deleted_ones_fu_1474_p3 = ((carry_reg_2078[0:0] === 1'b1) ? p_41_i_i_fu_1469_p2 : Range1_all_ones_fu_1446_p2);

assign deleted_zeros_fu_1456_p3 = ((carry_reg_2078[0:0] === 1'b1) ? Range1_all_ones_fu_1446_p2 : Range1_all_zeros_fu_1451_p2);

assign exitcond51_fu_815_p2 = ((k_1_phi_fu_394_p4 == 6'd33) ? 1'b1 : 1'b0);

assign exitcond52_fu_980_p2 = ((h_reg_401 == 6'd33) ? 1'b1 : 1'b0);

assign exitcond53_fu_990_p2 = ((w_reg_413 == 6'd33) ? 1'b1 : 1'b0);

assign exitcond54_fu_1612_p2 = ((k_2_phi_fu_517_p4 == 6'd33) ? 1'b1 : 1'b0);

assign exitcond55_fu_1006_p2 = ((m_reg_425 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond56_fu_1048_p2 = ((n_reg_436 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond57_fu_1155_p2 = ((ci_reg_447 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond58_fu_1304_p2 = ((co_reg_458 == 5'd24) ? 1'b1 : 1'b0);

assign exitcond79_mid_fu_821_p2 = (exitcond51_fu_815_p2 & not_exitcond_flatten_1_fu_809_p2);

assign exitcond82_mid1_fu_701_p2 = (exitcond82_mid_fu_648_p2 & not_exitcond_flatten_4_fu_696_p2);

assign exitcond82_mid_fu_648_p2 = (exitcond_fu_642_p2 & not_exitcond_flatten_reg_1788);

assign exitcond_flatten18_fu_536_p2 = ((indvar_flatten13_reg_285 == 6'd27) ? 1'b1 : 1'b0);

assign exitcond_flatten19_fu_581_p2 = ((indvar_flatten_phi_fu_312_p4 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_flatten20_fu_791_p2 = ((indvar_flatten15_reg_344 == 15'd24576) ? 1'b1 : 1'b0);

assign exitcond_flatten21_fu_803_p2 = ((indvar_flatten16_reg_367 == 12'd1024) ? 1'b1 : 1'b0);

assign exitcond_flatten22_fu_1566_p2 = ((indvar_flatten17_phi_fu_473_p4 == 15'd24576) ? 1'b1 : 1'b0);

assign exitcond_flatten23_fu_1584_p2 = ((indvar_flatten18_phi_fu_495_p4 == 12'd1024) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_524_p2 = ((indvar_flatten14_reg_262 == 10'd648) ? 1'b1 : 1'b0);

assign exitcond_flatten_mid_fu_587_p2 = (exitcond_flatten19_fu_581_p2 & not_exitcond_flatten_fu_576_p2);

assign exitcond_flatten_not_fu_691_p2 = (exitcond_flatten19_reg_1793 ^ 1'd1);

assign exitcond_fu_642_p2 = ((p_phi_fu_336_p4 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_mid_fu_1618_p2 = (exitcond54_fu_1612_p2 & not_exitcond_flatten_2_fu_1606_p2);

assign h_34_fu_996_p2 = (h_reg_401 + 6'd1);

assign h_cast_cast_fu_976_p1 = h_reg_401;

assign i_1_cast_mid2_fu_875_p1 = i_1_cast_mid2_v_fu_868_p3;

assign i_1_cast_mid2_v_fu_868_p3 = ((exitcond_flatten21_reg_1871[0:0] === 1'b1) ? i_7_fu_855_p2 : i_1_phi_fu_359_p4);

assign i_2_cast7_mid2_v_fu_1598_p3 = ((exitcond_flatten23_fu_1584_p2[0:0] === 1'b1) ? i_8_fu_1578_p2 : i_2_phi_fu_484_p4);

assign i_6_fu_556_p2 = (5'd1 + i_phi_fu_277_p4);

assign i_7_fu_855_p2 = (i_1_phi_fu_359_p4 + 5'd1);

assign i_8_fu_1578_p2 = (i_2_phi_fu_484_p4 + 5'd1);

assign i_cast_mid2_cast_fu_618_p1 = i_cast_mid2_v_reg_1781;

assign i_cast_mid2_v_fu_569_p3 = ((exitcond_flatten18_reg_1766[0:0] === 1'b1) ? i_6_fu_556_p2 : i_phi_fu_277_p4);

assign indvar_flatten13_op_fu_542_p2 = (6'd1 + indvar_flatten13_reg_285);

assign indvar_flatten44_op_fu_841_p2 = (indvar_flatten16_reg_367 + 12'd1);

assign indvar_flatten66_op_fu_1638_p2 = (indvar_flatten18_phi_fu_495_p4 + 12'd1);

assign indvar_flatten_next1_fu_548_p3 = ((exitcond_flatten18_fu_536_p2[0:0] === 1'b1) ? 6'd1 : indvar_flatten13_op_fu_542_p2);

assign indvar_flatten_next2_1_fu_847_p3 = ((exitcond_flatten21_fu_803_p2[0:0] === 1'b1) ? 12'd1 : indvar_flatten44_op_fu_841_p2);

assign indvar_flatten_next2_2_fu_797_p2 = (indvar_flatten15_reg_344 + 15'd1);

assign indvar_flatten_next2_3_fu_1644_p3 = ((exitcond_flatten23_fu_1584_p2[0:0] === 1'b1) ? 12'd1 : indvar_flatten66_op_fu_1638_p2);

assign indvar_flatten_next2_4_fu_1572_p2 = (indvar_flatten17_phi_fu_473_p4 + 15'd1);

assign indvar_flatten_next2_fu_530_p2 = (indvar_flatten14_reg_262 + 10'd1);

assign indvar_flatten_next_fu_755_p3 = ((tmp_618_reg_1803[0:0] === 1'b1) ? 4'd1 : indvar_flatten_op_reg_1815);

assign indvar_flatten_op_fu_612_p2 = (4'd1 + indvar_flatten_phi_fu_312_p4);

assign input_V_address0 = input_V_addr_reg_1987;

assign j_1_cast_mid2_cast_fu_923_p1 = j_1_cast_mid2_fu_916_p3;

assign j_1_cast_mid2_fu_916_p3 = ((exitcond79_mid_reg_1877[0:0] === 1'b1) ? j_7_fu_910_p2 : j_1_mid_fu_861_p3);

assign j_1_mid_fu_861_p3 = ((exitcond_flatten21_reg_1871[0:0] === 1'b1) ? 6'd1 : j_1_phi_fu_382_p4);

assign j_2_cast6_mid2_cast_fu_1691_p1 = j_2_cast6_mid2_fu_1685_p3;

assign j_2_cast6_mid2_fu_1685_p3 = ((exitcond_mid_reg_2138[0:0] === 1'b1) ? j_8_fu_1680_p2 : j_2_mid_reg_2125);

assign j_2_mid_fu_1590_p3 = ((exitcond_flatten23_fu_1584_p2[0:0] === 1'b1) ? 6'd1 : j_2_phi_fu_506_p4);

assign j_6_fu_593_p2 = (2'd1 + j_mid_fu_562_p3);

assign j_7_fu_910_p2 = (j_1_mid_fu_861_p3 + 6'd1);

assign j_8_fu_1680_p2 = (j_2_mid_reg_2125 + 6'd1);

assign j_cast_mid2_cast_fu_660_p1 = j_cast_mid2_reg_1809;

assign j_cast_mid2_fu_604_p3 = ((exitcond_flatten_mid_fu_587_p2[0:0] === 1'b1) ? j_6_fu_593_p2 : j_mid_fu_562_p3);

assign j_mid_fu_562_p3 = ((exitcond_flatten18_reg_1766[0:0] === 1'b1) ? 2'd0 : j_phi_fu_300_p4);

assign k_1_cast_cast_fu_962_p1 = ap_reg_pp1_iter1_k_1_mid2_reg_1882;

assign k_1_mid2_fu_833_p3 = ((tmp_628_fu_827_p2[0:0] === 1'b1) ? 6'd1 : k_1_phi_fu_394_p4);

assign k_2_cast5_cast_fu_1730_p1 = k_2_mid2_reg_2143;

assign k_2_mid2_fu_1630_p3 = ((tmp_635_fu_1624_p2[0:0] === 1'b1) ? 6'd1 : k_2_phi_fu_517_p4);

assign k_4_fu_933_p2 = (k_1_mid2_reg_1882 + 6'd1);

assign k_5_fu_707_p2 = (2'd1 + k_mid_fu_653_p3);

assign k_6_fu_1701_p2 = (k_2_mid2_reg_2143 + 6'd1);

assign k_cast_mid2_cast_fu_739_p1 = k_cast_mid2_fu_731_p3;

assign k_cast_mid2_fu_731_p3 = ((exitcond82_mid1_fu_701_p2[0:0] === 1'b1) ? k_5_fu_707_p2 : k_mid_fu_653_p3);

assign k_mid_fu_653_p3 = ((tmp_618_reg_1803[0:0] === 1'b1) ? 2'd0 : k_phi_fu_324_p4);

assign m_7_fu_1012_p2 = (m_reg_425 + 2'd1);

assign m_axi_weight_V_ARADDR = weight_V_addr_reg_1851;

assign m_axi_weight_V_ARBURST = 2'd0;

assign m_axi_weight_V_ARCACHE = 4'd0;

assign m_axi_weight_V_ARID = 1'd0;

assign m_axi_weight_V_ARLEN = 32'd1;

assign m_axi_weight_V_ARLOCK = 2'd0;

assign m_axi_weight_V_ARPROT = 3'd0;

assign m_axi_weight_V_ARQOS = 4'd0;

assign m_axi_weight_V_ARREGION = 4'd0;

assign m_axi_weight_V_ARSIZE = 3'd0;

assign m_axi_weight_V_ARUSER = 1'd0;

assign m_axi_weight_V_AWADDR = 32'd0;

assign m_axi_weight_V_AWBURST = 2'd0;

assign m_axi_weight_V_AWCACHE = 4'd0;

assign m_axi_weight_V_AWID = 1'd0;

assign m_axi_weight_V_AWLEN = 32'd0;

assign m_axi_weight_V_AWLOCK = 2'd0;

assign m_axi_weight_V_AWPROT = 3'd0;

assign m_axi_weight_V_AWQOS = 4'd0;

assign m_axi_weight_V_AWREGION = 4'd0;

assign m_axi_weight_V_AWSIZE = 3'd0;

assign m_axi_weight_V_AWUSER = 1'd0;

assign m_axi_weight_V_AWVALID = 1'b0;

assign m_axi_weight_V_BREADY = 1'b0;

assign m_axi_weight_V_WDATA = 8'd0;

assign m_axi_weight_V_WID = 1'd0;

assign m_axi_weight_V_WLAST = 1'b0;

assign m_axi_weight_V_WSTRB = 1'd0;

assign m_axi_weight_V_WUSER = 1'd0;

assign m_axi_weight_V_WVALID = 1'b0;

assign m_cast_fu_1002_p1 = m_reg_425;

assign n_7_fu_1054_p2 = (n_reg_436 + 2'd1);

assign n_cast_cast_fu_1044_p1 = n_reg_436;

assign newsignbit_fu_1409_p3 = p_Val2_70_fu_1403_p2[32'd7];

assign not_exitcond_flatten_1_fu_809_p2 = (exitcond_flatten21_fu_803_p2 ^ 1'd1);

assign not_exitcond_flatten_2_fu_1606_p2 = (exitcond_flatten23_fu_1584_p2 ^ 1'd1);

assign not_exitcond_flatten_4_fu_696_p2 = (ap_reg_pp0_iter1_exitcond_flatten18_reg_1766 | exitcond_flatten_not_fu_691_p2);

assign not_exitcond_flatten_fu_576_p2 = (exitcond_flatten18_reg_1766 ^ 1'd1);

assign overflow_fu_1502_p2 = (brmerge_i_i_fu_1492_p2 & tmp_159_fu_1497_p2);

assign p_1_fu_749_p2 = (2'd1 + p_mid2_fu_723_p3);

assign p_38_i_i_fu_1481_p2 = (carry_reg_2078 & Range1_all_ones_fu_1446_p2);

assign p_41_i_i_fu_1469_p2 = (signbit_reg_2059 & tmp_157_fu_1463_p2);

assign p_Val2_187_mux_fu_1545_p3 = ((brmerge_i_i_i_reg_2111[0:0] === 1'b1) ? 8'd127 : p_Val2_70_reg_2066);

assign p_Val2_67_fu_1344_p0 = input_V_load_reg_2034;

assign p_Val2_67_fu_1344_p1 = weight_temp_V_load_reg_2029;

assign p_Val2_67_fu_1344_p2 = ($signed(p_Val2_67_fu_1344_p0) * $signed(p_Val2_67_fu_1344_p1));

assign p_Val2_68_fu_1369_p2 = ($signed(p_Val2_67_reg_2039) + $signed(tmp_152_cast_fu_1365_p1));

assign p_Val2_69_fu_1382_p4 = {{p_Val2_68_fu_1369_p2[13:6]}};

assign p_Val2_70_fu_1403_p2 = (tmp_155_fu_1392_p1 + p_Val2_69_fu_1382_p4);

assign p_Val2_s_504_fu_1551_p3 = ((underflow_reg_2106[0:0] === 1'b1) ? 8'd128 : p_Val2_70_reg_2066);

assign p_cast_fu_771_p1 = p_mid2_reg_1820;

assign p_mid2_fu_723_p3 = ((tmp_2139_fu_718_p2[0:0] === 1'b1) ? 2'd0 : p_phi_fu_336_p4);

assign p_not_i_i_fu_1486_p2 = (deleted_zeros_fu_1456_p3 ^ 1'd1);

assign p_shl10_cast_fu_1104_p1 = tmp_640_fu_1096_p3;

assign p_shl11_cast_fu_1316_p3 = {{tmp_2148_reg_2010}, {2'd0}};

assign p_shl13_cast_fu_1250_p1 = tmp_651_fu_1242_p3;

assign p_shl14_cast_fu_1206_p3 = {{tmp_648_fu_1201_p2}, {5'd0}};

assign p_shl15_cast_fu_1222_p1 = tmp_2145_fu_1214_p3;

assign p_shl16_cast_fu_1179_p1 = tmp_645_fu_1171_p3;

assign p_shl17_cast_fu_1191_p1 = tmp_646_fu_1183_p3;

assign p_shl18_cast_fu_1706_p3 = {{tmp_636_reg_2159}, {5'd0}};

assign p_shl19_cast_fu_1720_p1 = tmp_2142_fu_1713_p3;

assign p_shl1_fu_681_p1 = $signed(tmp_2138_fu_673_p3);

assign p_shl20_cast_fu_1659_p1 = tmp_632_fu_1652_p3;

assign p_shl21_cast_fu_1670_p1 = tmp_633_fu_1663_p3;

assign p_shl2_cast_fu_628_p1 = tmp_fu_621_p3;

assign p_shl3_cast_fu_938_p3 = {{tmp_629_reg_1903}, {5'd0}};

assign p_shl4_cast_fu_952_p1 = tmp_2141_fu_945_p3;

assign p_shl5_cast_fu_888_p1 = tmp_625_fu_880_p3;

assign p_shl6_cast_fu_900_p1 = tmp_626_fu_892_p3;

assign p_shl7_cast_fu_1119_p3 = {{tmp_642_fu_1114_p2}, {5'd0}};

assign p_shl8_cast_fu_1135_p1 = tmp_2144_fu_1127_p3;

assign p_shl9_cast_fu_1092_p1 = tmp_639_fu_1084_p3;

assign p_shl_fu_1281_p1 = $signed(tmp_2146_fu_1273_p3);

assign sum_fu_780_p2 = (tmp_624_fu_774_p2 + conv1_weight_V3);

assign this_assign_1_fu_1557_p3 = ((underflow_not_fu_1540_p2[0:0] === 1'b1) ? p_Val2_187_mux_fu_1545_p3 : p_Val2_s_504_fu_1551_p3);

assign tmp1_cast_fu_1024_p1 = $signed(tmp1_fu_1018_p2);

assign tmp1_fu_1018_p2 = ($signed(m_reg_425) + $signed(2'd3));

assign tmp2_cast_fu_1066_p1 = $signed(tmp2_fu_1060_p2);

assign tmp2_fu_1060_p2 = ($signed(n_reg_436) + $signed(2'd3));

assign tmp3_demorgan_fu_1513_p2 = (p_38_i_i_fu_1481_p2 | brmerge40_demorgan_i_fu_1508_p2);

assign tmp3_fu_1519_p2 = (tmp3_demorgan_fu_1513_p2 ^ 1'd1);

assign tmp4_fu_1536_p2 = (brmerge40_demorgan_i_reg_2101 | tmp_159_reg_2096);

assign tmp_150_cast_cast_fu_1076_p1 = tmp_150_fu_1070_p2;

assign tmp_150_fu_1070_p2 = ($signed(w_reg_413) + $signed(tmp2_cast_fu_1066_p1));

assign tmp_152_cast_fu_1365_p1 = $signed(tmp_152_fu_1358_p3);

assign tmp_152_fu_1358_p3 = {{p_Val2_s_reg_2044}, {6'd0}};

assign tmp_155_fu_1392_p1 = tmp_2150_reg_2049;

assign tmp_156_fu_1417_p2 = (newsignbit_fu_1409_p3 ^ 1'd1);

assign tmp_157_fu_1463_p2 = (tmp_2153_fu_1439_p3 ^ 1'd1);

assign tmp_159_fu_1497_p2 = (signbit_reg_2059 ^ 1'd1);

assign tmp_2138_fu_673_p3 = {{tmp_619_fu_663_p2}, {2'd0}};

assign tmp_2139_fu_718_p2 = (tmp_621_fu_713_p2 | ap_reg_pp0_iter1_exitcond_flatten18_reg_1766);

assign tmp_2140_fu_761_p2 = tmp_622_reg_1830 << 32'd2;

assign tmp_2141_fu_945_p3 = {{tmp_629_reg_1903}, {1'd0}};

assign tmp_2142_fu_1713_p3 = {{tmp_636_reg_2159}, {1'd0}};

assign tmp_2143_fu_1744_p3 = output_V_q0[32'd7];

assign tmp_2144_fu_1127_p3 = {{tmp_642_fu_1114_p2}, {1'd0}};

assign tmp_2145_fu_1214_p3 = {{tmp_648_fu_1201_p2}, {1'd0}};

assign tmp_2146_fu_1273_p3 = {{tmp_653_fu_1264_p2}, {2'd0}};

assign tmp_2147_fu_1296_p1 = tmp_655_fu_1291_p2[10:0];

assign tmp_2148_fu_1300_p1 = tmp_655_fu_1291_p2[8:0];

assign tmp_2151_fu_1395_p3 = p_Val2_68_fu_1369_p2[32'd13];

assign tmp_2153_fu_1439_p3 = p_Val2_68_reg_2054[32'd14];

assign tmp_617_fu_632_p2 = (p_shl2_cast_fu_628_p1 - i_cast_mid2_cast_fu_618_p1);

assign tmp_618_fu_599_p2 = (exitcond_flatten_mid_fu_587_p2 | exitcond_flatten18_reg_1766);

assign tmp_619_fu_663_p2 = ($signed(j_cast_mid2_cast_fu_660_p1) + $signed(tmp_744_cast_fu_638_p1));

assign tmp_620_fu_685_p2 = ($signed(p_shl1_fu_681_p1) - $signed(tmp_746_cast_fu_669_p1));

assign tmp_621_fu_713_p2 = (exitcond82_mid1_fu_701_p2 | exitcond_flatten_mid_reg_1798);

assign tmp_622_fu_743_p2 = (k_cast_mid2_cast_fu_739_p1 + tmp_620_fu_685_p2);

assign tmp_623_fu_766_p2 = (tmp_2140_fu_761_p2 - tmp_622_reg_1830);

assign tmp_624_fu_774_p2 = (p_cast_fu_771_p1 + tmp_623_fu_766_p2);

assign tmp_625_fu_880_p3 = {{i_1_cast_mid2_v_fu_868_p3}, {5'd0}};

assign tmp_626_fu_892_p3 = {{i_1_cast_mid2_v_fu_868_p3}, {1'd0}};

assign tmp_627_fu_904_p2 = (p_shl5_cast_fu_888_p1 + p_shl6_cast_fu_900_p1);

assign tmp_628_fu_827_p2 = (exitcond79_mid_fu_821_p2 | exitcond_flatten21_fu_803_p2);

assign tmp_629_fu_927_p2 = (j_1_cast_mid2_cast_fu_923_p1 + tmp_627_fu_904_p2);

assign tmp_630_fu_956_p2 = (p_shl3_cast_fu_938_p3 + p_shl4_cast_fu_952_p1);

assign tmp_631_fu_965_p2 = (k_1_cast_cast_fu_962_p1 + tmp_630_fu_956_p2);

assign tmp_632_fu_1652_p3 = {{i_2_cast7_mid2_v_reg_2131}, {5'd0}};

assign tmp_633_fu_1663_p3 = {{i_2_cast7_mid2_v_reg_2131}, {1'd0}};

assign tmp_634_fu_1674_p2 = (p_shl20_cast_fu_1659_p1 + p_shl21_cast_fu_1670_p1);

assign tmp_635_fu_1624_p2 = (exitcond_mid_fu_1618_p2 | exitcond_flatten23_fu_1584_p2);

assign tmp_636_fu_1695_p2 = (j_2_cast6_mid2_cast_fu_1691_p1 + tmp_634_fu_1674_p2);

assign tmp_637_fu_1724_p2 = (p_shl18_cast_fu_1706_p3 + p_shl19_cast_fu_1720_p1);

assign tmp_638_fu_1733_p2 = (k_2_cast5_cast_fu_1730_p1 + tmp_637_fu_1724_p2);

assign tmp_639_fu_1084_p3 = {{ci_reg_447}, {5'd0}};

assign tmp_640_fu_1096_p3 = {{ci_reg_447}, {1'd0}};

assign tmp_641_fu_1108_p2 = (p_shl9_cast_fu_1092_p1 + p_shl10_cast_fu_1104_p1);

assign tmp_642_fu_1114_p2 = (tmp_cast_cast_reg_1954 + tmp_641_fu_1108_p2);

assign tmp_643_fu_1139_p2 = (p_shl7_cast_fu_1119_p3 + p_shl8_cast_fu_1135_p1);

assign tmp_644_fu_1145_p2 = (tmp_150_cast_cast_reg_1977 + tmp_643_fu_1139_p2);

assign tmp_645_fu_1171_p3 = {{co_reg_458}, {5'd0}};

assign tmp_646_fu_1183_p3 = {{co_reg_458}, {1'd0}};

assign tmp_647_fu_1195_p2 = (p_shl17_cast_fu_1191_p1 + p_shl16_cast_fu_1179_p1);

assign tmp_648_fu_1201_p2 = (tmp_647_fu_1195_p2 + h_cast_cast_reg_1919);

assign tmp_649_fu_1226_p2 = (p_shl15_cast_fu_1222_p1 + p_shl14_cast_fu_1206_p3);

assign tmp_650_fu_1232_p2 = (tmp_649_fu_1226_p2 + w_cast_cast_reg_1928);

assign tmp_651_fu_1242_p3 = {{co_reg_458}, {2'd0}};

assign tmp_652_fu_1254_p2 = (p_shl13_cast_fu_1250_p1 - co_cast8_cast_fu_1167_p1);

assign tmp_653_fu_1264_p2 = ($signed(tmp_791_cast_fu_1260_p1) + $signed(ci_cast9_cast_reg_1982));

assign tmp_654_fu_1285_p2 = ($signed(p_shl_fu_1281_p1) - $signed(tmp_792_cast_fu_1269_p1));

assign tmp_655_fu_1291_p2 = (tmp_654_fu_1285_p2 + m_cast_reg_1941);

assign tmp_656_fu_1323_p2 = (p_shl11_cast_fu_1316_p3 - tmp_2147_reg_2005);

assign tmp_657_fu_1328_p2 = (tmp_656_fu_1323_p2 + n_cast_cast_reg_1964);

assign tmp_744_cast_fu_638_p1 = $signed(tmp_617_fu_632_p2);

assign tmp_746_cast_fu_669_p1 = $signed(tmp_619_fu_663_p2);

assign tmp_764_cast_fu_971_p1 = tmp_631_fu_965_p2;

assign tmp_773_cast_fu_1739_p1 = tmp_638_fu_1733_p2;

assign tmp_781_cast_fu_1150_p1 = tmp_644_fu_1145_p2;

assign tmp_789_cast_fu_1237_p1 = tmp_650_fu_1232_p2;

assign tmp_791_cast_fu_1260_p1 = $signed(tmp_652_fu_1254_p2);

assign tmp_792_cast_fu_1269_p1 = $signed(tmp_653_fu_1264_p2);

assign tmp_798_cast_fu_1333_p1 = tmp_657_fu_1328_p2;

assign tmp_cast_cast_fu_1034_p1 = tmp_s_fu_1028_p2;

assign tmp_fu_621_p3 = {{i_cast_mid2_v_reg_1781}, {2'd0}};

assign tmp_s_fu_1028_p2 = ($signed(h_reg_401) + $signed(tmp1_cast_fu_1024_p1));

assign underflow_fu_1525_p2 = (signbit_reg_2059 & tmp3_fu_1519_p2);

assign underflow_not_fu_1540_p2 = (tmp4_fu_1536_p2 | p_38_i_i_reg_2091);

assign w_44_fu_1038_p2 = (w_reg_413 + 6'd1);

assign w_cast_cast_fu_986_p1 = w_reg_413;

always @ (posedge ap_clk) begin
    h_cast_cast_reg_1919[10:6] <= 5'b00000;
    w_cast_cast_reg_1928[15:6] <= 10'b0000000000;
    m_cast_reg_1941[31:2] <= 30'b000000000000000000000000000000;
    tmp_cast_cast_reg_1954[7:6] <= 2'b00;
    n_cast_cast_reg_1964[10:2] <= 9'b000000000;
    tmp_150_cast_cast_reg_1977[12:6] <= 7'b0000000;
    ci_cast9_cast_reg_1982[8:2] <= 7'b0000000;
end

endmodule //conv1_p
