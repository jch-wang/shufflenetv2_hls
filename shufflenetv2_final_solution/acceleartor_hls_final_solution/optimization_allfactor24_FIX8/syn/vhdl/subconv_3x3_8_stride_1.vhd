-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_8_stride_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_8_stride_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_7_fu_254_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_reg_846 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_9_cast_fu_278_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_cast_reg_851 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_19_cast_fu_288_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_19_cast_reg_856 : STD_LOGIC_VECTOR (11 downto 0);
    signal co_1_fu_298_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_1_reg_864 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias_V_addr_reg_869 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_333_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_20_reg_874 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_345_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_882 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_addr_reg_887 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_2_fu_373_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_reg_895 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond3_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_1_fu_381_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_24_fu_402_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_24_reg_905 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m_1_fu_414_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_1_reg_913 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_26_fu_468_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_26_reg_918 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond4_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_1_fu_474_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_1_reg_923 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal n_1_fu_500_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_1_reg_936 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_load_reg_946 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal input_V_load_reg_951 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_5_fu_541_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_5_reg_956 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_32_reg_961 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_fu_567_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_6_reg_966 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal signbit_reg_971 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_fu_601_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_8_reg_978 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_607_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_990 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_997 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_1003 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_18_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_1008 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_1013 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_1018 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_1023 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_755_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal isneg_reg_1033 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal result_V_fu_785_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_1040 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_1_reg_1046 : STD_LOGIC_VECTOR (0 downto 0);
    signal co_reg_140 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_reg_151 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_163 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_Val2_s_reg_175 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_187 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_4_reg_198 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_210 : STD_LOGIC_VECTOR (1 downto 0);
    signal co_cast_fu_221_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_cast_fu_362_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_cast_fu_489_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_cast_fu_530_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_230_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_242_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_cast_fu_250_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_238_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_fu_260_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_268_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_cast_cast_fu_226_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_272_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_282_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal h_cast9_cast_fu_304_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_fu_308_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_19_fu_313_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_cast_fu_317_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl6_cast_fu_325_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal w_cast8_cast_fu_353_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_21_fu_357_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal m_cast7_cast_fu_387_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_22_fu_391_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_23_fu_396_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_fu_420_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_426_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_430_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast_cast_fu_435_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_25_fu_439_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_27_fu_444_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_28_fu_456_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl8_cast_fu_452_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl9_cast_fu_464_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal n_cast6_cast_fu_480_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_29_fu_484_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp3_fu_506_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_512_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_516_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_cast_cast_fu_521_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_30_fu_525_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_5_fu_541_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_5_fu_541_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_555_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_12_cast_fu_563_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_7_fu_580_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_590_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_fu_593_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_637_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_654_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i1_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_672_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_mux_fu_743_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_8_35_fu_749_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_767_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_fu_763_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_2_fu_771_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_823_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_830_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_339_p2 = ap_const_lv1_1))) then 
                co_reg_140 <= co_1_reg_864;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_140 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    h_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_292_p2 = ap_const_lv1_0))) then 
                h_reg_151 <= ap_const_lv3_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_367_p2 = ap_const_lv1_1))) then 
                h_reg_151 <= h_1_fu_381_p2;
            end if; 
        end if;
    end process;

    m_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_494_p2))) then 
                m_reg_187 <= m_1_reg_913;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_367_p2))) then 
                m_reg_187 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                n_reg_210 <= n_1_reg_936;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_408_p2))) then 
                n_reg_210 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_4_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_Val2_4_reg_198 <= sum_V_fu_755_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_408_p2))) then 
                p_Val2_4_reg_198 <= p_Val2_s_reg_175;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_494_p2))) then 
                p_Val2_s_reg_175 <= p_Val2_4_reg_198;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_367_p2))) then 
                p_Val2_s_reg_175 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    w_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_339_p2))) then 
                w_reg_163 <= ap_const_lv3_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                w_reg_163 <= w_1_reg_923;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_292_p2 = ap_const_lv1_0))) then
                bias_V_addr_reg_869 <= co_cast_fu_221_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                brmerge40_demorgan_i_reg_1013 <= brmerge40_demorgan_i_fu_706_p2;
                brmerge_i_i_i_reg_1023 <= brmerge_i_i_i_fu_728_p2;
                p_38_i_i_reg_1003 <= p_38_i_i_fu_679_p2;
                tmp_18_reg_1008 <= tmp_18_fu_695_p2;
                underflow_reg_1018 <= underflow_fu_723_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                carry_reg_990 <= carry_fu_621_p2;
                newsignbit_reg_984 <= p_Val2_8_fu_601_p2(7 downto 7);
                p_Val2_6_reg_966 <= p_Val2_6_fu_567_p2;
                p_Val2_8_reg_978 <= p_Val2_8_fu_601_p2;
                signbit_reg_971 <= p_Val2_6_fu_567_p2(15 downto 15);
                tmp_17_reg_997 <= p_Val2_6_fu_567_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_1_reg_864 <= co_1_fu_298_p2;
                    tmp_19_cast_reg_856(11 downto 1) <= tmp_19_cast_fu_288_p1(11 downto 1);
                    tmp_7_reg_846(10 downto 1) <= tmp_7_fu_254_p2(10 downto 1);
                tmp_9_cast_reg_851 <= tmp_9_cast_fu_278_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                input_V_load_reg_951 <= input_V_q0;
                weight_V_load_reg_946 <= weight_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                isneg_reg_1033 <= p_Val2_2_fu_771_p2(8 downto 8);
                newsignbit_1_reg_1046 <= result_V_fu_785_p2(7 downto 7);
                result_V_reg_1040 <= result_V_fu_785_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_1_reg_913 <= m_1_fu_414_p2;
                tmp_24_reg_905 <= tmp_24_fu_402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_1_reg_936 <= n_1_fu_500_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_V_addr_reg_887 <= tmp_24_cast_fu_362_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_5_reg_956 <= p_Val2_5_fu_541_p2;
                tmp_32_reg_961 <= p_Val2_5_fu_541_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_20_reg_874(12 downto 1) <= tmp_20_fu_333_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_408_p2))) then
                    tmp_26_reg_918(14 downto 1) <= tmp_26_fu_468_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_367_p2))) then
                    tmp_2_reg_895(3 downto 1) <= tmp_2_fu_373_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_339_p2))) then
                    tmp_reg_882(3 downto 1) <= tmp_fu_345_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond4_fu_408_p2))) then
                w_1_reg_923 <= w_1_fu_474_p2;
            end if;
        end if;
    end process;
    tmp_7_reg_846(0) <= '0';
    tmp_19_cast_reg_856(0) <= '0';
    tmp_20_reg_874(0) <= '0';
    tmp_reg_882(0) <= '0';
    tmp_2_reg_895(0) <= '0';
    tmp_26_reg_918(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_292_p2, ap_CS_fsm_state3, exitcond2_fu_339_p2, ap_CS_fsm_state4, exitcond3_fu_367_p2, ap_CS_fsm_state5, exitcond4_fu_408_p2, ap_CS_fsm_state6, exitcond_fu_494_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_292_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_339_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_367_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond4_fu_408_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_494_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_644_p2 <= "1" when (tmp_17_reg_997 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_649_p2 <= "1" when (tmp_17_reg_997 = ap_const_lv2_0) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_292_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_292_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_292_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_292_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_869;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_706_p2 <= (newsignbit_reg_984 and deleted_ones_fu_672_p3);
    brmerge9_fu_818_p2 <= (newsignbit_1_reg_1046 or isneg_not_fu_813_p2);
    brmerge_i_i1_fu_690_p2 <= (newsignbit_reg_984 or p_not_i_i_fu_684_p2);
    brmerge_i_i_fu_809_p2 <= (isneg_reg_1033 xor newsignbit_1_reg_1046);
    brmerge_i_i_i_fu_728_p2 <= (underflow_fu_723_p2 or overflow_fu_700_p2);
    carry_fu_621_p2 <= (tmp_33_fu_593_p3 and tmp_15_fu_615_p2);
    co_1_fu_298_p2 <= std_logic_vector(unsigned(co_reg_140) + unsigned(ap_const_lv7_1));
    co_cast_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_140),10));
    co_cast_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_140),32));
    deleted_ones_fu_672_p3 <= 
        p_41_i_i_fu_667_p2 when (carry_reg_990(0) = '1') else 
        Range1_all_ones_fu_644_p2;
    deleted_zeros_fu_654_p3 <= 
        Range1_all_ones_fu_644_p2 when (carry_reg_990(0) = '1') else 
        Range1_all_zeros_fu_649_p2;
    exitcond1_fu_292_p2 <= "1" when (co_reg_140 = ap_const_lv7_60) else "0";
    exitcond2_fu_339_p2 <= "1" when (h_reg_151 = ap_const_lv3_5) else "0";
    exitcond3_fu_367_p2 <= "1" when (w_reg_163 = ap_const_lv3_5) else "0";
    exitcond4_fu_408_p2 <= "1" when (m_reg_187 = ap_const_lv2_3) else "0";
    exitcond_fu_494_p2 <= "1" when (n_reg_210 = ap_const_lv2_3) else "0";
    h_1_fu_381_p2 <= std_logic_vector(unsigned(h_reg_151) + unsigned(ap_const_lv3_1));
    h_cast9_cast_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_151),12));
    input_V_address0 <= tmp_33_cast_fu_530_p1(14 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isneg_not_fu_813_p2 <= (isneg_reg_1033 xor ap_const_lv1_1);
    m_1_fu_414_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(m_reg_187));
    m_cast7_cast_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_187),11));
    n_1_fu_500_p2 <= std_logic_vector(unsigned(n_reg_210) + unsigned(ap_const_lv2_1));
    n_cast6_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_210),11));
    newsignbit_fu_607_p3 <= p_Val2_8_fu_601_p2(7 downto 7);
    output_V_address0 <= output_V_addr_reg_887;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= 
        result_V_mux_fu_823_p3 when (brmerge9_fu_818_p2(0) = '1') else 
        p_result_V_fu_830_p3;

    output_V_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_700_p2 <= (brmerge_i_i1_fu_690_p2 and tmp_18_fu_695_p2);
    p_38_i_i_fu_679_p2 <= (carry_reg_990 and Range1_all_ones_fu_644_p2);
    p_41_i_i_fu_667_p2 <= (signbit_reg_971 and tmp_16_fu_661_p2);
    p_Val2_2_fu_771_p2 <= std_logic_vector(signed(tmp_4_fu_767_p1) + signed(tmp_3_fu_763_p1));
    p_Val2_5_fu_541_p0 <= weight_V_load_reg_946;
    p_Val2_5_fu_541_p1 <= input_V_load_reg_951;
    p_Val2_5_fu_541_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_5_fu_541_p0) * signed(p_Val2_5_fu_541_p1))), 16));
    p_Val2_6_fu_567_p2 <= std_logic_vector(signed(tmp_12_cast_fu_563_p1) + signed(p_Val2_5_reg_956));
    p_Val2_7_fu_580_p4 <= p_Val2_6_fu_567_p2(13 downto 6);
    p_Val2_8_35_fu_749_p3 <= 
        ap_const_lv8_80 when (underflow_reg_1018(0) = '1') else 
        p_Val2_8_reg_978;
    p_Val2_8_fu_601_p2 <= std_logic_vector(unsigned(p_Val2_7_fu_580_p4) + unsigned(tmp_14_fu_590_p1));
    p_Val2_8_mux_fu_743_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_1023(0) = '1') else 
        p_Val2_8_reg_978;
    p_not_i_i_fu_684_p2 <= (deleted_zeros_fu_654_p3 xor ap_const_lv1_1);
    p_result_V_fu_830_p3 <= 
        ap_const_lv8_80 when (underflow_1_fu_804_p2(0) = '1') else 
        result_V_reg_1040;
    p_shl2_cast_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_260_p3),10));
    p_shl3_cast_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_230_p3),11));
    p_shl4_cast_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_242_p3),11));
    p_shl5_cast_fu_317_p3 <= (tmp_19_fu_313_p1 & ap_const_lv3_0);
    p_shl6_cast_fu_325_p3 <= (tmp_13_fu_308_p2 & ap_const_lv1_0);
    p_shl8_cast_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_444_p3),15));
    p_shl9_cast_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_456_p3),15));
    result_V_fu_785_p2 <= std_logic_vector(unsigned(bias_V_q0) + unsigned(p_Val2_s_reg_175));
    result_V_mux_fu_823_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_809_p2(0) = '1') else 
        result_V_reg_1040;
    sum_V_fu_755_p3 <= 
        p_Val2_8_mux_fu_743_p3 when (underflow_not_fu_738_p2(0) = '1') else 
        p_Val2_8_35_fu_749_p3;
        tmp2_cast_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_420_p2),4));

    tmp2_fu_420_p2 <= (m_reg_187 xor ap_const_lv2_2);
        tmp3_cast_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_506_p2),4));

    tmp3_fu_506_p2 <= (n_reg_210 xor ap_const_lv2_2);
    tmp4_demorgan_fu_711_p2 <= (p_38_i_i_fu_679_p2 or brmerge40_demorgan_i_fu_706_p2);
    tmp4_fu_717_p2 <= (tmp4_demorgan_fu_711_p2 xor ap_const_lv1_1);
    tmp5_fu_734_p2 <= (brmerge40_demorgan_i_reg_1013 or tmp_18_reg_1008);
    tmp_10_cast_cast_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_516_p2),15));
    tmp_10_fu_516_p2 <= std_logic_vector(signed(tmp3_cast_fu_512_p1) + signed(tmp_2_reg_895));
    tmp_11_fu_282_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_238_p1) - unsigned(p_shl4_cast_fu_250_p1));
        tmp_12_cast_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_555_p3),16));

    tmp_12_fu_555_p3 <= (p_Val2_4_reg_198 & ap_const_lv6_0);
    tmp_13_fu_308_p2 <= std_logic_vector(unsigned(h_cast9_cast_fu_304_p1) + unsigned(tmp_19_cast_reg_856));
    tmp_14_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_reg_961),8));
    tmp_15_fu_615_p2 <= (newsignbit_fu_607_p3 xor ap_const_lv1_1);
    tmp_16_fu_661_p2 <= (tmp_35_fu_637_p3 xor ap_const_lv1_1);
    tmp_18_fu_695_p2 <= (signbit_reg_971 xor ap_const_lv1_1);
        tmp_19_cast_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_fu_282_p2),12));

    tmp_19_fu_313_p1 <= tmp_13_fu_308_p2(10 - 1 downto 0);
    tmp_1_fu_230_p3 <= (co_reg_140 & ap_const_lv3_0);
    tmp_20_fu_333_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_317_p3) - unsigned(p_shl6_cast_fu_325_p3));
    tmp_21_fu_357_p2 <= std_logic_vector(unsigned(tmp_20_reg_874) + unsigned(w_cast8_cast_fu_353_p1));
    tmp_22_fu_391_p2 <= std_logic_vector(unsigned(m_cast7_cast_fu_387_p1) + unsigned(tmp_9_cast_reg_851));
    tmp_23_fu_396_p2 <= std_logic_vector(shift_left(unsigned(tmp_22_fu_391_p2),to_integer(unsigned('0' & ap_const_lv11_2(11-1 downto 0)))));
    tmp_24_cast_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_357_p2),32));
    tmp_24_fu_402_p2 <= std_logic_vector(unsigned(tmp_23_fu_396_p2) - unsigned(tmp_22_fu_391_p2));
    tmp_25_fu_439_p2 <= std_logic_vector(unsigned(tmp_cast_cast_fu_435_p1) + unsigned(tmp_7_reg_846));
    tmp_26_fu_468_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_452_p1) + unsigned(p_shl9_cast_fu_464_p1));
    tmp_27_fu_444_p3 <= (tmp_25_fu_439_p2 & ap_const_lv3_0);
    tmp_28_fu_456_p3 <= (tmp_25_fu_439_p2 & ap_const_lv1_0);
    tmp_29_fu_484_p2 <= std_logic_vector(unsigned(tmp_24_reg_905) + unsigned(n_cast6_cast_fu_480_p1));
    tmp_2_fu_373_p3 <= (w_reg_163 & ap_const_lv1_0);
    tmp_30_fu_525_p2 <= std_logic_vector(unsigned(tmp_10_cast_cast_fu_521_p1) + unsigned(tmp_26_reg_918));
    tmp_32_cast_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_484_p2),32));
    tmp_33_cast_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_525_p2),32));
    tmp_33_fu_593_p3 <= p_Val2_6_fu_567_p2(13 downto 13);
    tmp_35_fu_637_p3 <= p_Val2_6_reg_966(14 downto 14);
        tmp_3_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_175),9));

        tmp_4_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    tmp_5_fu_799_p2 <= (newsignbit_1_reg_1046 xor ap_const_lv1_1);
    tmp_6_fu_242_p3 <= (co_reg_140 & ap_const_lv1_0);
    tmp_7_fu_254_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_250_p1) + unsigned(p_shl3_cast_fu_238_p1));
    tmp_8_fu_260_p3 <= (co_reg_140 & ap_const_lv2_0);
        tmp_9_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_fu_272_p2),11));

    tmp_9_fu_272_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_268_p1) - unsigned(co_cast_cast_fu_226_p1));
    tmp_cast_cast_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_430_p2),11));
    tmp_fu_345_p3 <= (h_reg_151 & ap_const_lv1_0);
    tmp_s_fu_430_p2 <= std_logic_vector(signed(tmp2_cast_fu_426_p1) + signed(tmp_reg_882));
    underflow_1_fu_804_p2 <= (isneg_reg_1033 and tmp_5_fu_799_p2);
    underflow_fu_723_p2 <= (signbit_reg_971 and tmp4_fu_717_p2);
    underflow_not_fu_738_p2 <= (tmp5_fu_734_p2 or p_38_i_i_reg_1003);
    w_1_fu_474_p2 <= std_logic_vector(unsigned(w_reg_163) + unsigned(ap_const_lv3_1));
    w_cast8_cast_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_163),13));
    weight_V_address0 <= tmp_32_cast_fu_489_p1(10 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
