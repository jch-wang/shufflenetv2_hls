-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_16_no_re is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_23_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_23_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_23_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_22_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_22_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_22_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_11_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_11_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_6_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_6_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_5_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_5_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_4_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_4_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_3_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_2_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_1_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_21_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_21_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_21_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_20_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_20_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_20_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_19_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_19_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_19_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_18_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_18_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_18_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_17_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_17_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_17_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_16_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_16_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_16_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_15_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_15_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_15_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_14_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_14_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_14_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_13_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_13_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_13_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_12_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_12_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_10_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_10_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_9_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_9_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_8_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_8_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_7_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_24_16x16_p_7_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_16_no_re is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_197_cast_fu_562_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_197_cast_reg_1203 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_187_fu_590_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_187_reg_1208 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_6_fu_602_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_6_reg_1216 : STD_LOGIC_VECTOR (4 downto 0);
    signal bias_V_addr_reg_1221 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond5_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_190_fu_637_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_190_reg_1226 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal output_V_addr_reg_1234 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal h_6_fu_669_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond7_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_194_fu_690_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_194_reg_1247 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m_6_fu_702_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_6_reg_1255 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_197_fu_748_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_197_reg_1260 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond8_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_addr_reg_1265 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal n_6_fu_774_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_6_reg_1273 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_199_fu_800_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_199_reg_1278 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal weight_V_load_reg_1403 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_76_fu_832_p26 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_76_reg_1408 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_7_fu_892_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_7_reg_1413 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_201_reg_1418 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_57_fu_918_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_57_reg_1423 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal signbit_reg_1428 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_59_fu_952_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_59_reg_1435 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_958_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_1441 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_1447 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_80_reg_1454 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_1030_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_1460 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_82_fu_1046_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_reg_1465 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_1057_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_1470 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_1074_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_1475 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_1079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_1480 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_1106_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal isneg_reg_1490 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal result_V_fu_1136_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_1497 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_9_reg_1503 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_6_fu_1150_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_6_reg_1510 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_reg_453 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond6_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_reg_465 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_477 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal p_Val2_s_reg_489 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_501 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_56_reg_512 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_524 : STD_LOGIC_VECTOR (1 downto 0);
    signal co_cast_fu_535_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_205_cast_fu_658_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_212_cast_fu_763_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_213_cast_fu_805_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_183_fu_544_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_fu_552_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal co_cast_cast_fu_540_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_184_fu_556_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_185_fu_566_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_186_fu_578_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_586_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_574_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_cast9_cast_fu_608_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_188_fu_612_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_189_fu_625_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_617_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl4_cast_fu_633_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_cast8_cast_fu_649_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_191_fu_653_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal m_cast7_cast_fu_675_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_192_fu_679_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_193_fu_684_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_708_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_714_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_74_fu_718_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_195_fu_724_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_196_fu_736_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl7_cast_fu_744_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl6_cast_fu_732_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_cast6_cast_fu_754_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_198_fu_758_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp3_fu_780_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_786_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_75_fu_790_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_121_cast_cast_fu_796_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_7_fu_892_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_7_fu_892_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_77_fu_906_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_123_cast_fu_914_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_58_fu_931_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_78_fu_941_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_202_fu_944_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_fu_966_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_995_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_1000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_204_fu_988_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_fu_1012_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_1018_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_1005_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_1035_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i6_fu_1041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_1023_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_1062_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_1068_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_1051_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_1085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_1089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_48_mux_fu_1094_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_75_fu_1100_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_1118_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_1114_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_54_fu_1122_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_73_fu_1156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_1170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_1166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_9_fu_1161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_1175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_1180_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_1187_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component ShuffleNetV2_mux_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mux_dEe_x_U196 : component ShuffleNetV2_mux_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 5,
        dout_WIDTH => 8)
    port map (
        din1 => buffer1_1_24_16x16_p_23_q0,
        din2 => buffer1_1_24_16x16_p_22_q0,
        din3 => buffer1_1_24_16x16_p_11_q0,
        din4 => buffer1_1_24_16x16_p_6_q0,
        din5 => buffer1_1_24_16x16_p_5_q0,
        din6 => buffer1_1_24_16x16_p_4_q0,
        din7 => buffer1_1_24_16x16_p_3_q0,
        din8 => buffer1_1_24_16x16_p_2_q0,
        din9 => buffer1_1_24_16x16_p_1_q0,
        din10 => buffer1_1_24_16x16_p_q0,
        din11 => buffer1_1_24_16x16_p_21_q0,
        din12 => buffer1_1_24_16x16_p_20_q0,
        din13 => buffer1_1_24_16x16_p_19_q0,
        din14 => buffer1_1_24_16x16_p_18_q0,
        din15 => buffer1_1_24_16x16_p_17_q0,
        din16 => buffer1_1_24_16x16_p_16_q0,
        din17 => buffer1_1_24_16x16_p_15_q0,
        din18 => buffer1_1_24_16x16_p_14_q0,
        din19 => buffer1_1_24_16x16_p_13_q0,
        din20 => buffer1_1_24_16x16_p_12_q0,
        din21 => buffer1_1_24_16x16_p_10_q0,
        din22 => buffer1_1_24_16x16_p_9_q0,
        din23 => buffer1_1_24_16x16_p_8_q0,
        din24 => buffer1_1_24_16x16_p_7_q0,
        din25 => co_reg_453,
        dout => tmp_76_fu_832_p26);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_453_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond6_fu_643_p2))) then 
                co_reg_453 <= co_6_reg_1216;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_453 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_reg_465_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_596_p2 = ap_const_lv1_0))) then 
                h_reg_465 <= ap_const_lv5_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_663_p2 = ap_const_lv1_1))) then 
                h_reg_465 <= h_6_fu_669_p2;
            end if; 
        end if;
    end process;

    m_reg_501_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond7_fu_663_p2))) then 
                m_reg_501 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_768_p2))) then 
                m_reg_501 <= m_6_reg_1255;
            end if; 
        end if;
    end process;

    n_reg_524_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                n_reg_524 <= n_6_reg_1273;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond8_fu_696_p2))) then 
                n_reg_524 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_56_reg_512_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                p_Val2_56_reg_512 <= sum_V_fu_1106_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond8_fu_696_p2))) then 
                p_Val2_56_reg_512 <= p_Val2_s_reg_489;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_489_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond7_fu_663_p2))) then 
                p_Val2_s_reg_489 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_768_p2))) then 
                p_Val2_s_reg_489 <= p_Val2_56_reg_512;
            end if; 
        end if;
    end process;

    w_reg_477_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_643_p2))) then 
                w_reg_477 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                w_reg_477 <= w_6_reg_1510;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_596_p2 = ap_const_lv1_0))) then
                bias_V_addr_reg_1221 <= co_cast_fu_535_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                brmerge40_demorgan_i_reg_1470 <= brmerge40_demorgan_i_fu_1057_p2;
                brmerge_i_i_i_reg_1480 <= brmerge_i_i_i_fu_1079_p2;
                p_38_i_i_reg_1460 <= p_38_i_i_fu_1030_p2;
                tmp_82_reg_1465 <= tmp_82_fu_1046_p2;
                underflow_reg_1475 <= underflow_fu_1074_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                carry_reg_1447 <= carry_fu_972_p2;
                newsignbit_reg_1441 <= p_Val2_59_fu_952_p2(7 downto 7);
                p_Val2_57_reg_1423 <= p_Val2_57_fu_918_p2;
                p_Val2_59_reg_1435 <= p_Val2_59_fu_952_p2;
                signbit_reg_1428 <= p_Val2_57_fu_918_p2(15 downto 15);
                tmp_80_reg_1454 <= p_Val2_57_fu_918_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_6_reg_1216 <= co_6_fu_602_p2;
                    tmp_187_reg_1208(9 downto 1) <= tmp_187_fu_590_p2(9 downto 1);
                tmp_197_cast_reg_1203 <= tmp_197_cast_fu_562_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                isneg_reg_1490 <= p_Val2_54_fu_1122_p2(8 downto 8);
                newsignbit_9_reg_1503 <= result_V_fu_1136_p2(7 downto 7);
                result_V_reg_1497 <= result_V_fu_1136_p2;
                w_6_reg_1510 <= w_6_fu_1150_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_6_reg_1255 <= m_6_fu_702_p2;
                tmp_194_reg_1247 <= tmp_194_fu_690_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_6_reg_1273 <= n_6_fu_774_p2;
                weight_V_addr_reg_1265 <= tmp_212_cast_fu_763_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_V_addr_reg_1234 <= tmp_205_cast_fu_658_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                p_Val2_7_reg_1413 <= p_Val2_7_fu_892_p2;
                tmp_201_reg_1418 <= p_Val2_7_fu_892_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_190_reg_1226(13 downto 1) <= tmp_190_fu_637_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond8_fu_696_p2))) then
                    tmp_197_reg_1260(9 downto 1) <= tmp_197_fu_748_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond_fu_768_p2))) then
                tmp_199_reg_1278 <= tmp_199_fu_800_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_76_reg_1408 <= tmp_76_fu_832_p26;
                weight_V_load_reg_1403 <= weight_V_q0;
            end if;
        end if;
    end process;
    tmp_187_reg_1208(0) <= '0';
    tmp_190_reg_1226(0) <= '0';
    tmp_197_reg_1260(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_596_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond7_fu_663_p2, ap_CS_fsm_state5, exitcond8_fu_696_p2, ap_CS_fsm_state6, exitcond_fu_768_p2, exitcond6_fu_643_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_596_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond6_fu_643_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_663_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond8_fu_696_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_768_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_995_p2 <= "1" when (tmp_80_reg_1454 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_1000_p2 <= "1" when (tmp_80_reg_1454 = ap_const_lv2_0) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_596_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_596_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_596_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_596_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_1221;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_1057_p2 <= (newsignbit_reg_1441 and deleted_ones_fu_1023_p3);
    brmerge9_fu_1175_p2 <= (newsignbit_9_reg_1503 or isneg_not_fu_1170_p2);
    brmerge_i_i6_fu_1041_p2 <= (newsignbit_reg_1441 or p_not_i_i_fu_1035_p2);
    brmerge_i_i_fu_1166_p2 <= (isneg_reg_1490 xor newsignbit_9_reg_1503);
    brmerge_i_i_i_fu_1079_p2 <= (underflow_fu_1074_p2 or overflow_fu_1051_p2);
    buffer1_1_24_16x16_p_10_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_10_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_10_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_11_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_11_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_11_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_12_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_12_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_12_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_13_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_13_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_13_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_14_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_14_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_14_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_15_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_15_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_15_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_16_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_16_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_16_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_17_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_17_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_17_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_18_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_18_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_18_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_19_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_19_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_19_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_1_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_1_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_1_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_20_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_20_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_20_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_21_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_21_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_21_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_22_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_22_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_22_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_23_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_23_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_23_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_2_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_2_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_2_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_3_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_3_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_3_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_4_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_4_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_4_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_5_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_5_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_5_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_6_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_6_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_6_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_7_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_7_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_7_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_8_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_8_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_8_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_9_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_9_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_9_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_address0 <= tmp_213_cast_fu_805_p1(9 - 1 downto 0);

    buffer1_1_24_16x16_p_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buffer1_1_24_16x16_p_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    carry_fu_972_p2 <= (tmp_202_fu_944_p3 and tmp_79_fu_966_p2);
    co_6_fu_602_p2 <= std_logic_vector(unsigned(co_reg_453) + unsigned(ap_const_lv5_1));
    co_cast_cast_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_453),8));
    co_cast_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_453),32));
    deleted_ones_fu_1023_p3 <= 
        p_41_i_i_fu_1018_p2 when (carry_reg_1447(0) = '1') else 
        Range1_all_ones_fu_995_p2;
    deleted_zeros_fu_1005_p3 <= 
        Range1_all_ones_fu_995_p2 when (carry_reg_1447(0) = '1') else 
        Range1_all_zeros_fu_1000_p2;
    exitcond5_fu_596_p2 <= "1" when (co_reg_453 = ap_const_lv5_18) else "0";
    exitcond6_fu_643_p2 <= "1" when (h_reg_465 = ap_const_lv5_11) else "0";
    exitcond7_fu_663_p2 <= "1" when (w_reg_477 = ap_const_lv5_11) else "0";
    exitcond8_fu_696_p2 <= "1" when (m_reg_501 = ap_const_lv2_3) else "0";
    exitcond_fu_768_p2 <= "1" when (n_reg_524 = ap_const_lv2_3) else "0";
    h_6_fu_669_p2 <= std_logic_vector(unsigned(h_reg_465) + unsigned(ap_const_lv5_1));
    h_cast9_cast_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_465),10));
    isneg_not_fu_1170_p2 <= (isneg_reg_1490 xor ap_const_lv1_1);
    m_6_fu_702_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(m_reg_501));
    m_cast7_cast_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_501),9));
    n_6_fu_774_p2 <= std_logic_vector(unsigned(n_reg_524) + unsigned(ap_const_lv2_1));
    n_cast6_cast_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_524),9));
    newsignbit_fu_958_p3 <= p_Val2_59_fu_952_p2(7 downto 7);
    output_V_address0 <= output_V_addr_reg_1234;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= 
        result_V_mux_fu_1180_p3 when (brmerge9_fu_1175_p2(0) = '1') else 
        p_result_V_fu_1187_p3;

    output_V_we0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_1051_p2 <= (brmerge_i_i6_fu_1041_p2 and tmp_82_fu_1046_p2);
    p_38_i_i_fu_1030_p2 <= (carry_reg_1447 and Range1_all_ones_fu_995_p2);
    p_41_i_i_fu_1018_p2 <= (signbit_reg_1428 and tmp_81_fu_1012_p2);
    p_Val2_48_mux_fu_1094_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_1480(0) = '1') else 
        p_Val2_59_reg_1435;
    p_Val2_54_fu_1122_p2 <= std_logic_vector(signed(tmp_s_fu_1118_p1) + signed(tmp_fu_1114_p1));
    p_Val2_57_fu_918_p2 <= std_logic_vector(signed(tmp_123_cast_fu_914_p1) + signed(p_Val2_7_reg_1413));
    p_Val2_58_fu_931_p4 <= p_Val2_57_fu_918_p2(13 downto 6);
    p_Val2_59_fu_952_p2 <= std_logic_vector(unsigned(p_Val2_58_fu_931_p4) + unsigned(tmp_78_fu_941_p1));
    p_Val2_7_fu_892_p0 <= weight_V_load_reg_1403;
    p_Val2_7_fu_892_p1 <= tmp_76_reg_1408;
    p_Val2_7_fu_892_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_7_fu_892_p0) * signed(p_Val2_7_fu_892_p1))), 16));
    p_Val2_s_75_fu_1100_p3 <= 
        ap_const_lv8_80 when (underflow_reg_1475(0) = '1') else 
        p_Val2_59_reg_1435;
    p_not_i_i_fu_1035_p2 <= (deleted_zeros_fu_1005_p3 xor ap_const_lv1_1);
    p_result_V_fu_1187_p3 <= 
        ap_const_lv8_80 when (underflow_9_fu_1161_p2(0) = '1') else 
        result_V_reg_1497;
    p_shl1_cast_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_186_fu_578_p3),10));
    p_shl2_cast_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_183_fu_544_p3),8));
    p_shl3_cast_fu_617_p3 <= (tmp_188_fu_612_p2 & ap_const_lv4_0);
    p_shl4_cast_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_189_fu_625_p3),14));
    p_shl6_cast_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_195_fu_724_p3),10));
    p_shl7_cast_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_196_fu_736_p3),10));
    p_shl_cast_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_185_fu_566_p3),10));
    result_V_fu_1136_p2 <= std_logic_vector(unsigned(bias_V_q0) + unsigned(p_Val2_s_reg_489));
    result_V_mux_fu_1180_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_1166_p2(0) = '1') else 
        result_V_reg_1497;
    sum_V_fu_1106_p3 <= 
        p_Val2_48_mux_fu_1094_p3 when (underflow_not_fu_1089_p2(0) = '1') else 
        p_Val2_s_75_fu_1100_p3;
        tmp2_cast_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_708_p2),5));

    tmp2_fu_708_p2 <= std_logic_vector(unsigned(m_reg_501) + unsigned(ap_const_lv2_3));
        tmp3_cast_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_780_p2),5));

    tmp3_fu_780_p2 <= std_logic_vector(unsigned(n_reg_524) + unsigned(ap_const_lv2_3));
    tmp4_demorgan_fu_1062_p2 <= (p_38_i_i_fu_1030_p2 or brmerge40_demorgan_i_fu_1057_p2);
    tmp4_fu_1068_p2 <= (tmp4_demorgan_fu_1062_p2 xor ap_const_lv1_1);
    tmp5_fu_1085_p2 <= (brmerge40_demorgan_i_reg_1470 or tmp_82_reg_1465);
    tmp_121_cast_cast_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_75_fu_790_p2),10));
        tmp_123_cast_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_77_fu_906_p3),16));

    tmp_183_fu_544_p3 <= (co_reg_453 & ap_const_lv2_0);
    tmp_184_fu_556_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_552_p1) - unsigned(co_cast_cast_fu_540_p1));
    tmp_185_fu_566_p3 <= (co_reg_453 & ap_const_lv4_0);
    tmp_186_fu_578_p3 <= (co_reg_453 & ap_const_lv1_0);
    tmp_187_fu_590_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_586_p1) + unsigned(p_shl_cast_fu_574_p1));
    tmp_188_fu_612_p2 <= std_logic_vector(unsigned(h_cast9_cast_fu_608_p1) + unsigned(tmp_187_reg_1208));
    tmp_189_fu_625_p3 <= (tmp_188_fu_612_p2 & ap_const_lv1_0);
    tmp_190_fu_637_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_617_p3) + unsigned(p_shl4_cast_fu_633_p1));
    tmp_191_fu_653_p2 <= std_logic_vector(unsigned(tmp_190_reg_1226) + unsigned(w_cast8_cast_fu_649_p1));
    tmp_192_fu_679_p2 <= std_logic_vector(unsigned(m_cast7_cast_fu_675_p1) + unsigned(tmp_197_cast_reg_1203));
    tmp_193_fu_684_p2 <= std_logic_vector(shift_left(unsigned(tmp_192_fu_679_p2),to_integer(unsigned('0' & ap_const_lv9_2(9-1 downto 0)))));
    tmp_194_fu_690_p2 <= std_logic_vector(unsigned(tmp_193_fu_684_p2) - unsigned(tmp_192_fu_679_p2));
    tmp_195_fu_724_p3 <= (tmp_74_fu_718_p2 & ap_const_lv4_0);
    tmp_196_fu_736_p3 <= (tmp_74_fu_718_p2 & ap_const_lv1_0);
        tmp_197_cast_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_184_fu_556_p2),9));

    tmp_197_fu_748_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_744_p1) + unsigned(p_shl6_cast_fu_732_p1));
    tmp_198_fu_758_p2 <= std_logic_vector(unsigned(tmp_194_reg_1247) + unsigned(n_cast6_cast_fu_754_p1));
    tmp_199_fu_800_p2 <= std_logic_vector(unsigned(tmp_121_cast_cast_fu_796_p1) + unsigned(tmp_197_reg_1260));
    tmp_202_fu_944_p3 <= p_Val2_57_fu_918_p2(13 downto 13);
    tmp_204_fu_988_p3 <= p_Val2_57_reg_1423(14 downto 14);
    tmp_205_cast_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_191_fu_653_p2),32));
    tmp_212_cast_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_198_fu_758_p2),32));
    tmp_213_cast_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_199_reg_1278),32));
    tmp_73_fu_1156_p2 <= (newsignbit_9_reg_1503 xor ap_const_lv1_1);
    tmp_74_fu_718_p2 <= std_logic_vector(unsigned(h_reg_465) + unsigned(tmp2_cast_fu_714_p1));
    tmp_75_fu_790_p2 <= std_logic_vector(signed(tmp3_cast_fu_786_p1) + signed(w_reg_477));
    tmp_77_fu_906_p3 <= (p_Val2_56_reg_512 & ap_const_lv6_0);
    tmp_78_fu_941_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_201_reg_1418),8));
    tmp_79_fu_966_p2 <= (newsignbit_fu_958_p3 xor ap_const_lv1_1);
    tmp_81_fu_1012_p2 <= (tmp_204_fu_988_p3 xor ap_const_lv1_1);
    tmp_82_fu_1046_p2 <= (signbit_reg_1428 xor ap_const_lv1_1);
        tmp_fu_1114_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_489),9));

        tmp_s_fu_1118_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    underflow_9_fu_1161_p2 <= (isneg_reg_1490 and tmp_73_fu_1156_p2);
    underflow_fu_1074_p2 <= (signbit_reg_1428 and tmp4_fu_1068_p2);
    underflow_not_fu_1089_p2 <= (tmp5_fu_1085_p2 or p_38_i_i_reg_1460);
    w_6_fu_1150_p2 <= std_logic_vector(unsigned(w_reg_477) + unsigned(ap_const_lv5_1));
    w_cast8_cast_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_477),14));
    weight_V_address0 <= weight_V_addr_reg_1265;

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
