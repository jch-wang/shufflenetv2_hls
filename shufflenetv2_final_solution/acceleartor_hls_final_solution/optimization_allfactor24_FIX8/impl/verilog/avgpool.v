// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module avgpool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        conv_last_output_V_0_address0,
        conv_last_output_V_0_ce0,
        conv_last_output_V_0_q0,
        conv_last_output_V_1_address0,
        conv_last_output_V_1_ce0,
        conv_last_output_V_1_q0,
        conv_last_output_V_2_address0,
        conv_last_output_V_2_ce0,
        conv_last_output_V_2_q0,
        conv_last_output_V_3_address0,
        conv_last_output_V_3_ce0,
        conv_last_output_V_3_q0,
        conv_last_output_V_4_address0,
        conv_last_output_V_4_ce0,
        conv_last_output_V_4_q0,
        conv_last_output_V_5_address0,
        conv_last_output_V_5_ce0,
        conv_last_output_V_5_q0,
        conv_last_output_V_6_address0,
        conv_last_output_V_6_ce0,
        conv_last_output_V_6_q0,
        conv_last_output_V_7_address0,
        conv_last_output_V_7_ce0,
        conv_last_output_V_7_q0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [9:0] conv_last_output_V_0_address0;
output   conv_last_output_V_0_ce0;
input  [7:0] conv_last_output_V_0_q0;
output  [9:0] conv_last_output_V_1_address0;
output   conv_last_output_V_1_ce0;
input  [7:0] conv_last_output_V_1_q0;
output  [9:0] conv_last_output_V_2_address0;
output   conv_last_output_V_2_ce0;
input  [7:0] conv_last_output_V_2_q0;
output  [9:0] conv_last_output_V_3_address0;
output   conv_last_output_V_3_ce0;
input  [7:0] conv_last_output_V_3_q0;
output  [9:0] conv_last_output_V_4_address0;
output   conv_last_output_V_4_ce0;
input  [7:0] conv_last_output_V_4_q0;
output  [9:0] conv_last_output_V_5_address0;
output   conv_last_output_V_5_ce0;
input  [7:0] conv_last_output_V_5_q0;
output  [9:0] conv_last_output_V_6_address0;
output   conv_last_output_V_6_ce0;
input  [7:0] conv_last_output_V_6_q0;
output  [9:0] conv_last_output_V_7_address0;
output   conv_last_output_V_7_ce0;
input  [7:0] conv_last_output_V_7_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_V_ce0;
reg output_V_we0;
reg conv_last_output_V_0_ce0;
reg conv_last_output_V_1_ce0;
reg conv_last_output_V_2_ce0;
reg conv_last_output_V_3_ce0;
reg conv_last_output_V_4_ce0;
reg conv_last_output_V_5_ce0;
reg conv_last_output_V_6_ce0;
reg conv_last_output_V_7_ce0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] co_cast4_fu_243_p1;
reg   [31:0] co_cast4_reg_518;
wire    ap_CS_fsm_state2;
wire   [9:0] co_35_fu_253_p2;
reg   [9:0] co_35_reg_526;
wire   [2:0] tmp_2154_fu_259_p1;
reg   [2:0] tmp_2154_reg_531;
wire   [0:0] exitcond35_fu_247_p2;
wire   [9:0] tmp_799_cast_fu_281_p1;
reg   [9:0] tmp_799_cast_reg_536;
wire   [11:0] tmp_802_cast_fu_294_p3;
reg   [11:0] tmp_802_cast_reg_541;
wire    ap_CS_fsm_state3;
wire   [2:0] h_35_fu_308_p2;
reg   [2:0] h_35_reg_549;
reg   [4:0] tmp_658_reg_554;
wire   [0:0] exitcond34_fu_302_p2;
wire    ap_CS_fsm_state4;
wire   [2:0] w_45_fu_361_p2;
reg   [2:0] w_45_reg_602;
reg   [0:0] isneg_reg_607;
wire    ap_CS_fsm_state5;
wire   [7:0] p_Val2_75_fu_410_p2;
reg   [7:0] p_Val2_75_reg_614;
reg   [0:0] newsignbit_reg_620;
wire   [7:0] sum_V_fu_462_p3;
wire    ap_CS_fsm_state6;
reg   [9:0] co_reg_186;
wire    ap_CS_fsm_state7;
reg   [7:0] p_Val2_s_reg_197;
wire   [0:0] exitcond_fu_355_p2;
reg   [2:0] h_reg_209;
reg   [7:0] p_Val2_72_reg_220;
reg   [2:0] w_reg_232;
wire   [31:0] tmp_804_cast_fu_343_p1;
wire   [6:0] newIndex_fu_263_p4;
wire   [8:0] tmp_fu_273_p3;
wire   [9:0] h_cast3_cast_fu_285_p1;
wire   [9:0] tmp_s_fu_289_p2;
wire  signed [8:0] tmp_tr_fu_314_p1;
wire   [8:0] p_neg_fu_318_p2;
wire   [11:0] w_cast2_cast_fu_334_p1;
wire   [11:0] tmp_659_fu_338_p2;
wire   [7:0] p_Val2_73_fu_371_p10;
wire  signed [8:0] tmp_162_fu_392_p1;
wire  signed [8:0] tmp_161_fu_367_p1;
wire   [8:0] p_Val2_74_fu_396_p2;
wire   [0:0] tmp_164_fu_424_p2;
wire   [0:0] isneg_not_fu_438_p2;
wire   [0:0] brmerge_i_i_i_fu_434_p2;
wire   [0:0] underflow_fu_429_p2;
wire   [0:0] brmerge_fu_443_p2;
wire   [7:0] p_Val2_193_mux_fu_448_p3;
wire   [7:0] p_Val2_1_fu_455_p3;
wire   [5:0] p_lshr_cast_fu_478_p1;
wire   [3:0] tmp_60_fu_487_p4;
wire  signed [4:0] tmp_61_fu_497_p1;
wire   [0:0] tmp_2155_fu_470_p3;
wire   [5:0] p_neg_t_fu_481_p2;
wire   [5:0] p_lshr_f_cast_fu_501_p1;
wire   [5:0] tmp_62_fu_505_p3;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

ShuffleNetV2_mux_udo #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_udo_x_U761(
    .din1(conv_last_output_V_0_q0),
    .din2(conv_last_output_V_1_q0),
    .din3(conv_last_output_V_2_q0),
    .din4(conv_last_output_V_3_q0),
    .din5(conv_last_output_V_4_q0),
    .din6(conv_last_output_V_5_q0),
    .din7(conv_last_output_V_6_q0),
    .din8(conv_last_output_V_7_q0),
    .din9(tmp_2154_reg_531),
    .dout(p_Val2_73_fu_371_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        co_reg_186 <= co_35_reg_526;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_186 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond_fu_355_p2))) begin
        h_reg_209 <= h_35_reg_549;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond35_fu_247_p2 == 1'd0))) begin
        h_reg_209 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond34_fu_302_p2))) begin
        p_Val2_72_reg_220 <= p_Val2_s_reg_197;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_72_reg_220 <= sum_V_fu_462_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond_fu_355_p2))) begin
        p_Val2_s_reg_197 <= p_Val2_72_reg_220;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond35_fu_247_p2 == 1'd0))) begin
        p_Val2_s_reg_197 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond34_fu_302_p2))) begin
        w_reg_232 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        w_reg_232 <= w_45_reg_602;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_35_reg_526 <= co_35_fu_253_p2;
        co_cast4_reg_518[9 : 0] <= co_cast4_fu_243_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_35_reg_549 <= h_35_fu_308_p2;
        tmp_802_cast_reg_541[11 : 2] <= tmp_802_cast_fu_294_p3[11 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        isneg_reg_607 <= p_Val2_74_fu_396_p2[32'd8];
        newsignbit_reg_620 <= p_Val2_75_fu_410_p2[32'd7];
        p_Val2_75_reg_614 <= p_Val2_75_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond35_fu_247_p2 == 1'd0))) begin
        tmp_2154_reg_531 <= tmp_2154_fu_259_p1;
        tmp_799_cast_reg_536[8 : 2] <= tmp_799_cast_fu_281_p1[8 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond34_fu_302_p2 == 1'd1))) begin
        tmp_658_reg_554 <= {{p_neg_fu_318_p2[8:4]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_45_reg_602 <= w_45_fu_361_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond35_fu_247_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond35_fu_247_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_last_output_V_0_ce0 = 1'b1;
    end else begin
        conv_last_output_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_last_output_V_1_ce0 = 1'b1;
    end else begin
        conv_last_output_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_last_output_V_2_ce0 = 1'b1;
    end else begin
        conv_last_output_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_last_output_V_3_ce0 = 1'b1;
    end else begin
        conv_last_output_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_last_output_V_4_ce0 = 1'b1;
    end else begin
        conv_last_output_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_last_output_V_5_ce0 = 1'b1;
    end else begin
        conv_last_output_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_last_output_V_6_ce0 = 1'b1;
    end else begin
        conv_last_output_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_last_output_V_7_ce0 = 1'b1;
    end else begin
        conv_last_output_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond35_fu_247_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond34_fu_302_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond_fu_355_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign brmerge_fu_443_p2 = (newsignbit_reg_620 | isneg_not_fu_438_p2);

assign brmerge_i_i_i_fu_434_p2 = (isneg_reg_607 ^ newsignbit_reg_620);

assign co_35_fu_253_p2 = (co_reg_186 + 10'd1);

assign co_cast4_fu_243_p1 = co_reg_186;

assign conv_last_output_V_0_address0 = tmp_804_cast_fu_343_p1;

assign conv_last_output_V_1_address0 = tmp_804_cast_fu_343_p1;

assign conv_last_output_V_2_address0 = tmp_804_cast_fu_343_p1;

assign conv_last_output_V_3_address0 = tmp_804_cast_fu_343_p1;

assign conv_last_output_V_4_address0 = tmp_804_cast_fu_343_p1;

assign conv_last_output_V_5_address0 = tmp_804_cast_fu_343_p1;

assign conv_last_output_V_6_address0 = tmp_804_cast_fu_343_p1;

assign conv_last_output_V_7_address0 = tmp_804_cast_fu_343_p1;

assign exitcond34_fu_302_p2 = ((h_reg_209 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond35_fu_247_p2 = ((co_reg_186 == 10'd512) ? 1'b1 : 1'b0);

assign exitcond_fu_355_p2 = ((w_reg_232 == 3'd4) ? 1'b1 : 1'b0);

assign h_35_fu_308_p2 = (h_reg_209 + 3'd1);

assign h_cast3_cast_fu_285_p1 = h_reg_209;

assign isneg_not_fu_438_p2 = (isneg_reg_607 ^ 1'd1);

assign newIndex_fu_263_p4 = {{co_reg_186[9:3]}};

assign output_V_address0 = co_cast4_reg_518;

assign output_V_d0 = $signed(tmp_62_fu_505_p3);

assign p_Val2_193_mux_fu_448_p3 = ((brmerge_i_i_i_fu_434_p2[0:0] === 1'b1) ? 8'd127 : p_Val2_75_reg_614);

assign p_Val2_1_fu_455_p3 = ((underflow_fu_429_p2[0:0] === 1'b1) ? 8'd128 : p_Val2_75_reg_614);

assign p_Val2_74_fu_396_p2 = ($signed(tmp_162_fu_392_p1) + $signed(tmp_161_fu_367_p1));

assign p_Val2_75_fu_410_p2 = (p_Val2_72_reg_220 + p_Val2_73_fu_371_p10);

assign p_lshr_cast_fu_478_p1 = tmp_658_reg_554;

assign p_lshr_f_cast_fu_501_p1 = $unsigned(tmp_61_fu_497_p1);

assign p_neg_fu_318_p2 = ($signed(9'd0) - $signed(tmp_tr_fu_314_p1));

assign p_neg_t_fu_481_p2 = (6'd0 - p_lshr_cast_fu_478_p1);

assign sum_V_fu_462_p3 = ((brmerge_fu_443_p2[0:0] === 1'b1) ? p_Val2_193_mux_fu_448_p3 : p_Val2_1_fu_455_p3);

assign tmp_161_fu_367_p1 = $signed(p_Val2_72_reg_220);

assign tmp_162_fu_392_p1 = $signed(p_Val2_73_fu_371_p10);

assign tmp_164_fu_424_p2 = (newsignbit_reg_620 ^ 1'd1);

assign tmp_2154_fu_259_p1 = co_reg_186[2:0];

assign tmp_2155_fu_470_p3 = p_Val2_s_reg_197[32'd7];

assign tmp_60_fu_487_p4 = {{p_Val2_s_reg_197[7:4]}};

assign tmp_61_fu_497_p1 = $signed(tmp_60_fu_487_p4);

assign tmp_62_fu_505_p3 = ((tmp_2155_fu_470_p3[0:0] === 1'b1) ? p_neg_t_fu_481_p2 : p_lshr_f_cast_fu_501_p1);

assign tmp_659_fu_338_p2 = (tmp_802_cast_reg_541 + w_cast2_cast_fu_334_p1);

assign tmp_799_cast_fu_281_p1 = tmp_fu_273_p3;

assign tmp_802_cast_fu_294_p3 = {{tmp_s_fu_289_p2}, {2'd0}};

assign tmp_804_cast_fu_343_p1 = tmp_659_fu_338_p2;

assign tmp_fu_273_p3 = {{newIndex_fu_263_p4}, {2'd0}};

assign tmp_s_fu_289_p2 = (h_cast3_cast_fu_285_p1 + tmp_799_cast_reg_536);

assign tmp_tr_fu_314_p1 = $signed(p_Val2_s_reg_197);

assign underflow_fu_429_p2 = (isneg_reg_607 & tmp_164_fu_424_p2);

assign w_45_fu_361_p2 = (w_reg_232 + 3'd1);

assign w_cast2_cast_fu_334_p1 = w_reg_232;

always @ (posedge ap_clk) begin
    co_cast4_reg_518[31:10] <= 22'b0000000000000000000000;
    tmp_799_cast_reg_536[1:0] <= 2'b00;
    tmp_799_cast_reg_536[9] <= 1'b0;
    tmp_802_cast_reg_541[1:0] <= 2'b00;
end

endmodule //avgpool
