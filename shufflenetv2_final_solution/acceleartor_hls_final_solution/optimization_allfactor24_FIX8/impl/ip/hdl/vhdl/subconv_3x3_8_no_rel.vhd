-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_8_no_rel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_24_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_24_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_24_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_1_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_2_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_3_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_4_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_5_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_6_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_7_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_7_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_8_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_8_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_9_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_9_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_10_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_10_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_11_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_11_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_12_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_12_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_13_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_13_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_13_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_14_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_14_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_14_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_15_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_15_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_15_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_16_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_16_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_16_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_17_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_17_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_17_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_18_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_18_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_18_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_19_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_19_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_19_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_20_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_20_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_20_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_21_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_21_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_21_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_22_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_22_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_22_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_23_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_23_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_23_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_8_no_rel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_56 : STD_LOGIC_VECTOR (12 downto 0) := "0000001010110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul_fu_566_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul_reg_1315 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_59_cast_fu_599_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_59_cast_reg_1320 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_58_fu_627_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_58_reg_1325 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_2_fu_639_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal co_2_reg_1333 : STD_LOGIC_VECTOR (5 downto 0);
    signal arrayNo_cast_fu_665_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayNo_cast_reg_1338 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond5_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_fu_703_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_64_reg_1343 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_V_addr_reg_1348 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_68_fu_742_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_68_reg_1353 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal output_V_addr_reg_1361 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal h_2_fu_774_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond7_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_72_fu_795_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_72_reg_1374 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m_2_fu_807_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_2_reg_1382 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_20_fu_823_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_20_reg_1387 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond8_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_fu_861_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_74_reg_1392 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal n_2_fu_887_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_2_reg_1405 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_78_fu_913_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_78_reg_1410 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal weight_V_load_reg_1535 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_945_p26 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_reg_1540 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_Val2_1_fu_1004_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_reg_1545 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_80_reg_1550 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_15_fu_1030_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_15_reg_1555 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal signbit_reg_1560 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_17_fu_1064_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_17_reg_1567 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_1070_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_1573 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_1084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_1579 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_reg_1586 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_1142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_1592 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_27_fu_1158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_1597 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_1169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_1602 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_1186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_1607 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_1191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_1612 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_1218_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal isneg_reg_1622 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal result_V_fu_1248_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_1629 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_3_reg_1635 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_2_fu_1309_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal co_reg_474 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond6_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_485 : STD_LOGIC_VECTOR (12 downto 0);
    signal h_reg_496 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_508 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_s_reg_520 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_532 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_14_reg_543 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_555 : STD_LOGIC_VECTOR (1 downto 0);
    signal co_cast_fu_572_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_74_cast_fu_763_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_82_cast_fu_876_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_83_cast_fu_918_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_fu_581_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_fu_589_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal co_cast_cast_fu_577_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_55_fu_593_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_56_fu_603_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_57_fu_615_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_623_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_611_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_59_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_651_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal arrayNo_fu_657_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_61_fu_669_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_62_fu_679_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_63_fu_691_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl3_cast_fu_687_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_cast_fu_699_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_cast9_cast_fu_709_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_65_fu_713_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_66_fu_718_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_67_fu_730_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_726_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl6_cast_fu_738_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_cast8_cast_fu_754_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_69_fu_758_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal m_cast7_cast_fu_780_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_70_fu_784_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_71_fu_789_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp2_fu_813_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_819_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_24_cast_cast_fu_829_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_73_fu_832_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_75_fu_837_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_76_fu_849_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl8_cast_fu_841_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl9_cast_fu_853_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_cast6_cast_fu_867_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_77_fu_871_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp3_fu_893_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_899_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_21_fu_903_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_28_cast_cast_fu_909_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_1_fu_1004_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_fu_1004_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_1018_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_30_cast_fu_1026_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_16_fu_1043_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_1053_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_81_fu_1056_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_1078_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_1107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_1112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_83_fu_1100_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_1124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_1130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_1117_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_1147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i2_fu_1153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_1135_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_1174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_1180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_1163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_1197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_1201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_16_mux_fu_1206_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_45_fu_1212_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_1230_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_1226_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_12_fu_1234_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_19_fu_1262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_1276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_1272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_3_fu_1267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_1281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_1286_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_1293_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component ShuffleNetV2_mux_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mux_fYi_x_U443 : component ShuffleNetV2_mux_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din1 => buffer1_1_48_8x8_p_V_24_q0,
        din2 => buffer1_1_48_8x8_p_V_1_q0,
        din3 => buffer1_1_48_8x8_p_V_2_q0,
        din4 => buffer1_1_48_8x8_p_V_3_q0,
        din5 => buffer1_1_48_8x8_p_V_4_q0,
        din6 => buffer1_1_48_8x8_p_V_5_q0,
        din7 => buffer1_1_48_8x8_p_V_6_q0,
        din8 => buffer1_1_48_8x8_p_V_7_q0,
        din9 => buffer1_1_48_8x8_p_V_8_q0,
        din10 => buffer1_1_48_8x8_p_V_9_q0,
        din11 => buffer1_1_48_8x8_p_V_10_q0,
        din12 => buffer1_1_48_8x8_p_V_11_q0,
        din13 => buffer1_1_48_8x8_p_V_12_q0,
        din14 => buffer1_1_48_8x8_p_V_13_q0,
        din15 => buffer1_1_48_8x8_p_V_14_q0,
        din16 => buffer1_1_48_8x8_p_V_15_q0,
        din17 => buffer1_1_48_8x8_p_V_16_q0,
        din18 => buffer1_1_48_8x8_p_V_17_q0,
        din19 => buffer1_1_48_8x8_p_V_18_q0,
        din20 => buffer1_1_48_8x8_p_V_19_q0,
        din21 => buffer1_1_48_8x8_p_V_20_q0,
        din22 => buffer1_1_48_8x8_p_V_21_q0,
        din23 => buffer1_1_48_8x8_p_V_22_q0,
        din24 => buffer1_1_48_8x8_p_V_23_q0,
        din25 => arrayNo_cast_reg_1338,
        dout => tmp_18_fu_945_p26);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_474_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond6_fu_748_p2))) then 
                co_reg_474 <= co_2_reg_1333;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_474 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    h_reg_496_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_633_p2 = ap_const_lv1_0))) then 
                h_reg_496 <= ap_const_lv4_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_768_p2 = ap_const_lv1_1))) then 
                h_reg_496 <= h_2_fu_774_p2;
            end if; 
        end if;
    end process;

    m_reg_532_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond7_fu_768_p2))) then 
                m_reg_532 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_881_p2))) then 
                m_reg_532 <= m_2_reg_1382;
            end if; 
        end if;
    end process;

    n_reg_555_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                n_reg_555 <= n_2_reg_1405;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                n_reg_555 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_14_reg_543_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                p_Val2_14_reg_543 <= sum_V_fu_1218_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_14_reg_543 <= p_Val2_s_reg_520;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_520_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond7_fu_768_p2))) then 
                p_Val2_s_reg_520 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_881_p2))) then 
                p_Val2_s_reg_520 <= p_Val2_14_reg_543;
            end if; 
        end if;
    end process;

    phi_mul_reg_485_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond6_fu_748_p2))) then 
                phi_mul_reg_485 <= next_mul_reg_1315;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_485 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    w_reg_508_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_748_p2))) then 
                w_reg_508 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                w_reg_508 <= w_2_fu_1309_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_633_p2 = ap_const_lv1_0))) then
                    arrayNo_cast_reg_1338(5 downto 0) <= arrayNo_cast_fu_665_p1(5 downto 0);
                bias_V_addr_reg_1348 <= co_cast_fu_572_p1(6 - 1 downto 0);
                    tmp_64_reg_1343(9 downto 1) <= tmp_64_fu_703_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                brmerge40_demorgan_i_reg_1602 <= brmerge40_demorgan_i_fu_1169_p2;
                brmerge_i_i_i_reg_1612 <= brmerge_i_i_i_fu_1191_p2;
                p_38_i_i_reg_1592 <= p_38_i_i_fu_1142_p2;
                tmp_27_reg_1597 <= tmp_27_fu_1158_p2;
                underflow_reg_1607 <= underflow_fu_1186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                carry_reg_1579 <= carry_fu_1084_p2;
                newsignbit_reg_1573 <= p_Val2_17_fu_1064_p2(7 downto 7);
                p_Val2_15_reg_1555 <= p_Val2_15_fu_1030_p2;
                p_Val2_17_reg_1567 <= p_Val2_17_fu_1064_p2;
                signbit_reg_1560 <= p_Val2_15_fu_1030_p2(15 downto 15);
                tmp_25_reg_1586 <= p_Val2_15_fu_1030_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_2_reg_1333 <= co_2_fu_639_p2;
                next_mul_reg_1315 <= next_mul_fu_566_p2;
                    tmp_58_reg_1325(9 downto 1) <= tmp_58_fu_627_p2(9 downto 1);
                tmp_59_cast_reg_1320 <= tmp_59_cast_fu_599_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                isneg_reg_1622 <= p_Val2_12_fu_1234_p2(8 downto 8);
                newsignbit_3_reg_1635 <= result_V_fu_1248_p2(7 downto 7);
                result_V_reg_1629 <= result_V_fu_1248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_2_reg_1382 <= m_2_fu_807_p2;
                tmp_72_reg_1374 <= tmp_72_fu_795_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                n_2_reg_1405 <= n_2_fu_887_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_V_addr_reg_1361 <= tmp_74_cast_fu_763_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_Val2_1_reg_1545 <= p_Val2_1_fu_1004_p2;
                tmp_80_reg_1550 <= p_Val2_1_fu_1004_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_18_reg_1540 <= tmp_18_fu_945_p26;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond8_fu_801_p2))) then
                tmp_20_reg_1387 <= tmp_20_fu_823_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_68_reg_1353(13 downto 1) <= tmp_68_fu_742_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    tmp_74_reg_1392(8 downto 1) <= tmp_74_fu_861_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond_fu_881_p2))) then
                tmp_78_reg_1410 <= tmp_78_fu_913_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                weight_V_load_reg_1535 <= weight_V_q0;
            end if;
        end if;
    end process;
    tmp_58_reg_1325(0) <= '0';
    arrayNo_cast_reg_1338(31 downto 6) <= "00000000000000000000000000";
    tmp_64_reg_1343(0) <= '0';
    tmp_68_reg_1353(0) <= '0';
    tmp_74_reg_1392(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_633_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond7_fu_768_p2, ap_CS_fsm_state5, exitcond8_fu_801_p2, ap_CS_fsm_state7, exitcond_fu_881_p2, exitcond6_fu_748_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_633_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond6_fu_748_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_768_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond8_fu_801_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_881_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_1107_p2 <= "1" when (tmp_25_reg_1586 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_1112_p2 <= "1" when (tmp_25_reg_1586 = ap_const_lv2_0) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_633_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_633_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_633_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_633_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayNo_cast_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayNo_fu_657_p3),32));
    arrayNo_fu_657_p3 <= 
        co_reg_474 when (tmp_59_fu_645_p2(0) = '1') else 
        tmp_60_fu_651_p2;
    bias_V_address0 <= bias_V_addr_reg_1348;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_1169_p2 <= (newsignbit_reg_1573 and deleted_ones_fu_1135_p3);
    brmerge9_fu_1281_p2 <= (newsignbit_3_reg_1635 or isneg_not_fu_1276_p2);
    brmerge_i_i2_fu_1153_p2 <= (newsignbit_reg_1573 or p_not_i_i_fu_1147_p2);
    brmerge_i_i_fu_1272_p2 <= (isneg_reg_1622 xor newsignbit_3_reg_1635);
    brmerge_i_i_i_fu_1191_p2 <= (underflow_fu_1186_p2 or overflow_fu_1163_p2);
    buffer1_1_48_8x8_p_V_10_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_10_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_10_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_11_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_11_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_11_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_12_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_12_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_12_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_13_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_13_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_13_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_14_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_14_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_14_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_15_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_15_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_15_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_16_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_16_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_16_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_17_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_17_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_17_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_18_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_18_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_18_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_19_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_19_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_19_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_1_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_1_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_1_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_20_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_20_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_20_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_21_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_21_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_21_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_22_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_22_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_22_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_23_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_23_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_23_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_24_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_24_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_24_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_2_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_2_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_2_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_3_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_3_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_3_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_4_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_4_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_4_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_5_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_5_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_5_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_6_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_6_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_6_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_7_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_7_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_7_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_8_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_8_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_8_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_9_address0 <= tmp_83_cast_fu_918_p1(8 - 1 downto 0);

    buffer1_1_48_8x8_p_V_9_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_48_8x8_p_V_9_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    carry_fu_1084_p2 <= (tmp_81_fu_1056_p3 and tmp_24_fu_1078_p2);
    co_2_fu_639_p2 <= std_logic_vector(unsigned(co_reg_474) + unsigned(ap_const_lv6_1));
    co_cast_cast_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_474),9));
    co_cast_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_474),32));
    deleted_ones_fu_1135_p3 <= 
        p_41_i_i_fu_1130_p2 when (carry_reg_1579(0) = '1') else 
        Range1_all_ones_fu_1107_p2;
    deleted_zeros_fu_1117_p3 <= 
        Range1_all_ones_fu_1107_p2 when (carry_reg_1579(0) = '1') else 
        Range1_all_zeros_fu_1112_p2;
    exitcond5_fu_633_p2 <= "1" when (co_reg_474 = ap_const_lv6_30) else "0";
    exitcond6_fu_748_p2 <= "1" when (h_reg_496 = ap_const_lv4_9) else "0";
    exitcond7_fu_768_p2 <= "1" when (w_reg_508 = ap_const_lv4_9) else "0";
    exitcond8_fu_801_p2 <= "1" when (m_reg_532 = ap_const_lv2_3) else "0";
    exitcond_fu_881_p2 <= "1" when (n_reg_555 = ap_const_lv2_3) else "0";
    h_2_fu_774_p2 <= std_logic_vector(unsigned(h_reg_496) + unsigned(ap_const_lv4_1));
    h_cast9_cast_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_496),10));
    isneg_not_fu_1276_p2 <= (isneg_reg_1622 xor ap_const_lv1_1);
    m_2_fu_807_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(m_reg_532));
    m_cast7_cast_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_532),10));
    n_2_fu_887_p2 <= std_logic_vector(unsigned(n_reg_555) + unsigned(ap_const_lv2_1));
    n_cast6_cast_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_555),10));
    newsignbit_fu_1070_p3 <= p_Val2_17_fu_1064_p2(7 downto 7);
    next_mul_fu_566_p2 <= std_logic_vector(unsigned(phi_mul_reg_485) + unsigned(ap_const_lv13_56));
    output_V_address0 <= output_V_addr_reg_1361;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= 
        result_V_mux_fu_1286_p3 when (brmerge9_fu_1281_p2(0) = '1') else 
        p_result_V_fu_1293_p3;

    output_V_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_1163_p2 <= (brmerge_i_i2_fu_1153_p2 and tmp_27_fu_1158_p2);
    p_38_i_i_fu_1142_p2 <= (carry_reg_1579 and Range1_all_ones_fu_1107_p2);
    p_41_i_i_fu_1130_p2 <= (signbit_reg_1560 and tmp_26_fu_1124_p2);
    p_Val2_12_fu_1234_p2 <= std_logic_vector(signed(tmp_s_fu_1230_p1) + signed(tmp_fu_1226_p1));
    p_Val2_15_fu_1030_p2 <= std_logic_vector(signed(tmp_30_cast_fu_1026_p1) + signed(p_Val2_1_reg_1545));
    p_Val2_16_fu_1043_p4 <= p_Val2_15_fu_1030_p2(13 downto 6);
    p_Val2_16_mux_fu_1206_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_1612(0) = '1') else 
        p_Val2_17_reg_1567;
    p_Val2_17_fu_1064_p2 <= std_logic_vector(unsigned(p_Val2_16_fu_1043_p4) + unsigned(tmp_23_fu_1053_p1));
    p_Val2_1_fu_1004_p0 <= weight_V_load_reg_1535;
    p_Val2_1_fu_1004_p1 <= tmp_18_reg_1540;
    p_Val2_1_fu_1004_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_1_fu_1004_p0) * signed(p_Val2_1_fu_1004_p1))), 16));
    p_Val2_s_45_fu_1212_p3 <= 
        ap_const_lv8_80 when (underflow_reg_1607(0) = '1') else 
        p_Val2_17_reg_1567;
    p_not_i_i_fu_1147_p2 <= (deleted_zeros_fu_1117_p3 xor ap_const_lv1_1);
    p_result_V_fu_1293_p3 <= 
        ap_const_lv8_80 when (underflow_3_fu_1267_p2(0) = '1') else 
        result_V_reg_1629;
    p_shl1_cast_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_615_p3),10));
    p_shl2_cast_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_581_p3),9));
    p_shl3_cast_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_fu_679_p3),10));
    p_shl4_cast_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_691_p3),10));
    p_shl5_cast_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_66_fu_718_p3),14));
    p_shl6_cast_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_fu_730_p3),14));
    p_shl8_cast_fu_841_p3 <= (tmp_75_fu_837_p1 & ap_const_lv3_0);
    p_shl9_cast_fu_853_p3 <= (tmp_76_fu_849_p1 & ap_const_lv1_0);
    p_shl_cast_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_603_p3),10));
    result_V_fu_1248_p2 <= std_logic_vector(unsigned(bias_V_q0) + unsigned(p_Val2_s_reg_520));
    result_V_mux_fu_1286_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_1272_p2(0) = '1') else 
        result_V_reg_1629;
    sum_V_fu_1218_p3 <= 
        p_Val2_16_mux_fu_1206_p3 when (underflow_not_fu_1201_p2(0) = '1') else 
        p_Val2_s_45_fu_1212_p3;
        tmp2_cast_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_813_p2),4));

    tmp2_fu_813_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(m_reg_532));
        tmp3_cast_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_893_p2),4));

    tmp3_fu_893_p2 <= std_logic_vector(unsigned(n_reg_555) + unsigned(ap_const_lv2_3));
    tmp4_demorgan_fu_1174_p2 <= (p_38_i_i_fu_1142_p2 or brmerge40_demorgan_i_fu_1169_p2);
    tmp4_fu_1180_p2 <= (tmp4_demorgan_fu_1174_p2 xor ap_const_lv1_1);
    tmp5_fu_1197_p2 <= (brmerge40_demorgan_i_reg_1602 or tmp_27_reg_1597);
    tmp_19_fu_1262_p2 <= (newsignbit_3_reg_1635 xor ap_const_lv1_1);
    tmp_20_fu_823_p2 <= std_logic_vector(signed(tmp2_cast_fu_819_p1) + signed(h_reg_496));
    tmp_21_fu_903_p2 <= std_logic_vector(signed(tmp3_cast_fu_899_p1) + signed(w_reg_508));
    tmp_22_fu_1018_p3 <= (p_Val2_14_reg_543 & ap_const_lv6_0);
    tmp_23_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_80_reg_1550),8));
    tmp_24_cast_cast_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_reg_1387),10));
    tmp_24_fu_1078_p2 <= (newsignbit_fu_1070_p3 xor ap_const_lv1_1);
    tmp_26_fu_1124_p2 <= (tmp_83_fu_1100_p3 xor ap_const_lv1_1);
    tmp_27_fu_1158_p2 <= (signbit_reg_1560 xor ap_const_lv1_1);
    tmp_28_cast_cast_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_903_p2),9));
        tmp_30_cast_fu_1026_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_22_fu_1018_p3),16));

    tmp_54_fu_581_p3 <= (co_reg_474 & ap_const_lv2_0);
    tmp_55_fu_593_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_589_p1) - unsigned(co_cast_cast_fu_577_p1));
    tmp_56_fu_603_p3 <= (co_reg_474 & ap_const_lv3_0);
    tmp_57_fu_615_p3 <= (co_reg_474 & ap_const_lv1_0);
    tmp_58_fu_627_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_623_p1) + unsigned(p_shl_cast_fu_611_p1));
        tmp_59_cast_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_55_fu_593_p2),10));

    tmp_59_fu_645_p2 <= "1" when (unsigned(co_reg_474) < unsigned(ap_const_lv6_18)) else "0";
    tmp_60_fu_651_p2 <= std_logic_vector(unsigned(co_reg_474) + unsigned(ap_const_lv6_28));
    tmp_61_fu_669_p4 <= phi_mul_reg_485(12 downto 11);
    tmp_62_fu_679_p3 <= (tmp_61_fu_669_p4 & ap_const_lv3_0);
    tmp_63_fu_691_p3 <= (tmp_61_fu_669_p4 & ap_const_lv1_0);
    tmp_64_fu_703_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_687_p1) + unsigned(p_shl4_cast_fu_699_p1));
    tmp_65_fu_713_p2 <= std_logic_vector(unsigned(h_cast9_cast_fu_709_p1) + unsigned(tmp_58_reg_1325));
    tmp_66_fu_718_p3 <= (tmp_65_fu_713_p2 & ap_const_lv3_0);
    tmp_67_fu_730_p3 <= (tmp_65_fu_713_p2 & ap_const_lv1_0);
    tmp_68_fu_742_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_726_p1) + unsigned(p_shl6_cast_fu_738_p1));
    tmp_69_fu_758_p2 <= std_logic_vector(unsigned(tmp_68_reg_1353) + unsigned(w_cast8_cast_fu_754_p1));
    tmp_70_fu_784_p2 <= std_logic_vector(unsigned(m_cast7_cast_fu_780_p1) + unsigned(tmp_59_cast_reg_1320));
    tmp_71_fu_789_p2 <= std_logic_vector(shift_left(unsigned(tmp_70_fu_784_p2),to_integer(unsigned('0' & ap_const_lv10_2(10-1 downto 0)))));
    tmp_72_fu_795_p2 <= std_logic_vector(unsigned(tmp_71_fu_789_p2) - unsigned(tmp_70_fu_784_p2));
    tmp_73_fu_832_p2 <= std_logic_vector(unsigned(tmp_24_cast_cast_fu_829_p1) + unsigned(tmp_64_reg_1343));
    tmp_74_cast_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_fu_758_p2),32));
    tmp_74_fu_861_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_841_p3) + unsigned(p_shl9_cast_fu_853_p3));
    tmp_75_fu_837_p1 <= tmp_73_fu_832_p2(6 - 1 downto 0);
    tmp_76_fu_849_p1 <= tmp_73_fu_832_p2(8 - 1 downto 0);
    tmp_77_fu_871_p2 <= std_logic_vector(unsigned(tmp_72_reg_1374) + unsigned(n_cast6_cast_fu_867_p1));
    tmp_78_fu_913_p2 <= std_logic_vector(unsigned(tmp_28_cast_cast_fu_909_p1) + unsigned(tmp_74_reg_1392));
    tmp_81_fu_1056_p3 <= p_Val2_15_fu_1030_p2(13 downto 13);
    tmp_82_cast_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_77_fu_871_p2),32));
    tmp_83_cast_fu_918_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_78_reg_1410),32));
    tmp_83_fu_1100_p3 <= p_Val2_15_reg_1555(14 downto 14);
        tmp_fu_1226_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_520),9));

        tmp_s_fu_1230_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    underflow_3_fu_1267_p2 <= (isneg_reg_1622 and tmp_19_fu_1262_p2);
    underflow_fu_1186_p2 <= (signbit_reg_1560 and tmp4_fu_1180_p2);
    underflow_not_fu_1201_p2 <= (tmp5_fu_1197_p2 or p_38_i_i_reg_1592);
    w_2_fu_1309_p2 <= std_logic_vector(unsigned(w_reg_508) + unsigned(ap_const_lv4_1));
    w_cast8_cast_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_508),14));
    weight_V_address0 <= tmp_82_cast_fu_876_p1(9 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
