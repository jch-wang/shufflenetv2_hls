-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_4_no_rel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_24_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_24_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_24_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_1_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_2_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_3_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_4_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_5_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_6_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_7_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_7_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_8_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_8_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_9_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_9_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_10_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_10_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_11_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_11_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_12_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_12_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_13_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_13_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_13_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_14_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_14_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_14_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_15_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_15_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_15_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_16_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_16_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_16_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_17_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_17_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_17_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_18_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_18_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_18_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_19_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_19_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_19_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_20_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_20_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_20_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_21_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_21_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_21_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_22_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_22_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_22_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_23_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_23_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_23_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_4_no_rel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv15_AB : STD_LOGIC_VECTOR (14 downto 0) := "000000010101011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv7_18 : STD_LOGIC_VECTOR (6 downto 0) := "0011000";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul_fu_578_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal next_mul_reg_1330 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_85_cast_fu_611_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_85_cast_reg_1335 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_88_cast_fu_645_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_88_cast_reg_1340 : STD_LOGIC_VECTOR (11 downto 0);
    signal co_3_fu_655_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_3_reg_1348 : STD_LOGIC_VECTOR (6 downto 0);
    signal arrayNo_cast_fu_661_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayNo_cast_reg_1353 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond9_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_93_cast_fu_705_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_93_cast_reg_1358 : STD_LOGIC_VECTOR (11 downto 0);
    signal bias_V_addr_reg_1363 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_90_fu_738_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_90_reg_1368 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal idx_urem_fu_762_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_addr_reg_1381 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal h_3_fu_790_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond2_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_95_fu_811_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_95_reg_1394 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m_3_fu_823_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_3_reg_1402 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_98_fu_854_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_98_reg_1407 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond3_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_99_fu_858_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_99_reg_1412 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_97_fu_876_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_97_reg_1417 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal n_3_fu_902_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_3_reg_1430 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_101_fu_928_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_101_reg_1435 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal weight_V_load_reg_1560 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_960_p26 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_reg_1565 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_Val2_2_fu_1019_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_2_reg_1570 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_103_reg_1575 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_22_fu_1045_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_22_reg_1580 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal signbit_reg_1585 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_24_fu_1079_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_24_reg_1592 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_1085_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_1598 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_1099_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_1604 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_reg_1611 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_1157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_1617 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_37_fu_1173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_reg_1622 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_1184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_1627 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_1201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_1632 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_1206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_1637 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_1233_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal isneg_reg_1647 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal result_V_fu_1263_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_1654 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_4_reg_1660 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_3_fu_1324_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal co_reg_474 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul_reg_485 : STD_LOGIC_VECTOR (14 downto 0);
    signal phi_urem_reg_496 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_reg_508 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_520 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_s_reg_532 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_544 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_21_reg_555 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_567 : STD_LOGIC_VECTOR (1 downto 0);
    signal co_cast_fu_584_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_98_cast_fu_779_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_106_cast_fu_891_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_107_cast_fu_933_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_79_fu_593_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_601_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_cast_cast_fu_589_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_80_fu_605_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_81_fu_615_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_82_fu_627_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_623_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_635_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_83_fu_639_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_84_fu_665_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_85_fu_675_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_86_fu_687_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl3_cast_fu_683_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_695_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_87_fu_699_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal h_cast9_cast_fu_709_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_88_fu_713_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_89_fu_718_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_cast_fu_722_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl6_cast_fu_730_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_urem_fu_750_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_91_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_cast8_cast_fu_770_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_92_fu_774_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal m_cast7_cast_fu_796_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_93_fu_800_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_94_fu_805_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_fu_829_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_835_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_30_fu_839_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_39_cast_cast_fu_845_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_96_fu_849_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl8_cast_fu_862_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl9_cast_fu_869_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_cast6_cast_fu_882_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_100_fu_886_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp3_fu_908_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_914_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_31_fu_918_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_43_cast_cast_fu_924_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_2_fu_1019_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_fu_1019_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_fu_1033_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_45_cast_fu_1041_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_23_fu_1058_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_fu_1068_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_104_fu_1071_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_1093_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_1122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_1127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_106_fu_1115_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_1139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_1145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_1132_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_1162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i3_fu_1168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_1150_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_1189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_1195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_1178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_1212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_1216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_24_mux_fu_1221_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_50_fu_1227_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_1245_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_1241_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_19_fu_1249_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_29_fu_1277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_1291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_1287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_4_fu_1282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_1296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_1301_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_1308_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component ShuffleNetV2_mux_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mux_fYi_x_U691 : component ShuffleNetV2_mux_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        din1 => buffer1_1_96_4x4_p_V_24_q0,
        din2 => buffer1_1_96_4x4_p_V_1_q0,
        din3 => buffer1_1_96_4x4_p_V_2_q0,
        din4 => buffer1_1_96_4x4_p_V_3_q0,
        din5 => buffer1_1_96_4x4_p_V_4_q0,
        din6 => buffer1_1_96_4x4_p_V_5_q0,
        din7 => buffer1_1_96_4x4_p_V_6_q0,
        din8 => buffer1_1_96_4x4_p_V_7_q0,
        din9 => buffer1_1_96_4x4_p_V_8_q0,
        din10 => buffer1_1_96_4x4_p_V_9_q0,
        din11 => buffer1_1_96_4x4_p_V_10_q0,
        din12 => buffer1_1_96_4x4_p_V_11_q0,
        din13 => buffer1_1_96_4x4_p_V_12_q0,
        din14 => buffer1_1_96_4x4_p_V_13_q0,
        din15 => buffer1_1_96_4x4_p_V_14_q0,
        din16 => buffer1_1_96_4x4_p_V_15_q0,
        din17 => buffer1_1_96_4x4_p_V_16_q0,
        din18 => buffer1_1_96_4x4_p_V_17_q0,
        din19 => buffer1_1_96_4x4_p_V_18_q0,
        din20 => buffer1_1_96_4x4_p_V_19_q0,
        din21 => buffer1_1_96_4x4_p_V_20_q0,
        din22 => buffer1_1_96_4x4_p_V_21_q0,
        din23 => buffer1_1_96_4x4_p_V_22_q0,
        din24 => buffer1_1_96_4x4_p_V_23_q0,
        din25 => arrayNo_cast_reg_1353,
        dout => tmp_28_fu_960_p26);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_474_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_744_p2 = ap_const_lv1_1))) then 
                co_reg_474 <= co_3_reg_1348;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_474 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    h_reg_508_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_649_p2 = ap_const_lv1_0))) then 
                h_reg_508 <= ap_const_lv3_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond2_fu_784_p2))) then 
                h_reg_508 <= h_3_fu_790_p2;
            end if; 
        end if;
    end process;

    m_reg_544_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_784_p2))) then 
                m_reg_544 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_896_p2))) then 
                m_reg_544 <= m_3_reg_1402;
            end if; 
        end if;
    end process;

    n_reg_567_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                n_reg_567 <= n_3_reg_1430;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                n_reg_567 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_21_reg_555_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                p_Val2_21_reg_555 <= sum_V_fu_1233_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_21_reg_555 <= p_Val2_s_reg_532;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_532_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_784_p2))) then 
                p_Val2_s_reg_532 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_896_p2))) then 
                p_Val2_s_reg_532 <= p_Val2_21_reg_555;
            end if; 
        end if;
    end process;

    phi_mul_reg_485_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_744_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_485 <= next_mul_reg_1330;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_485 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    phi_urem_reg_496_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_744_p2 = ap_const_lv1_1))) then 
                phi_urem_reg_496 <= idx_urem_fu_762_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_urem_reg_496 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    w_reg_520_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond1_fu_744_p2))) then 
                w_reg_520 <= ap_const_lv3_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                w_reg_520 <= w_3_fu_1324_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_649_p2 = ap_const_lv1_0))) then
                    arrayNo_cast_reg_1353(6 downto 0) <= arrayNo_cast_fu_661_p1(6 downto 0);
                bias_V_addr_reg_1363 <= co_cast_fu_584_p1(7 - 1 downto 0);
                    tmp_93_cast_reg_1358(11 downto 1) <= tmp_93_cast_fu_705_p1(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                brmerge40_demorgan_i_reg_1627 <= brmerge40_demorgan_i_fu_1184_p2;
                brmerge_i_i_i_reg_1637 <= brmerge_i_i_i_fu_1206_p2;
                p_38_i_i_reg_1617 <= p_38_i_i_fu_1157_p2;
                tmp_37_reg_1622 <= tmp_37_fu_1173_p2;
                underflow_reg_1632 <= underflow_fu_1201_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                carry_reg_1604 <= carry_fu_1099_p2;
                newsignbit_reg_1598 <= p_Val2_24_fu_1079_p2(7 downto 7);
                p_Val2_22_reg_1580 <= p_Val2_22_fu_1045_p2;
                p_Val2_24_reg_1592 <= p_Val2_24_fu_1079_p2;
                signbit_reg_1585 <= p_Val2_22_fu_1045_p2(15 downto 15);
                tmp_35_reg_1611 <= p_Val2_22_fu_1045_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_3_reg_1348 <= co_3_fu_655_p2;
                next_mul_reg_1330 <= next_mul_fu_578_p2;
                tmp_85_cast_reg_1335 <= tmp_85_cast_fu_611_p1;
                    tmp_88_cast_reg_1340(11 downto 1) <= tmp_88_cast_fu_645_p1(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                isneg_reg_1647 <= p_Val2_19_fu_1249_p2(8 downto 8);
                newsignbit_4_reg_1660 <= result_V_fu_1263_p2(7 downto 7);
                result_V_reg_1654 <= result_V_fu_1263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_3_reg_1402 <= m_3_fu_823_p2;
                tmp_95_reg_1394 <= tmp_95_fu_811_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                n_3_reg_1430 <= n_3_fu_902_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_V_addr_reg_1381 <= tmp_98_cast_fu_779_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_Val2_2_reg_1570 <= p_Val2_2_fu_1019_p2;
                tmp_103_reg_1575 <= p_Val2_2_fu_1019_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond_fu_896_p2))) then
                tmp_101_reg_1435 <= tmp_101_fu_928_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_28_reg_1565 <= tmp_28_fu_960_p26;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_90_reg_1368(12 downto 1) <= tmp_90_fu_738_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    tmp_97_reg_1417(8 downto 1) <= tmp_97_fu_876_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond3_fu_817_p2))) then
                tmp_98_reg_1407 <= tmp_98_fu_854_p1;
                tmp_99_reg_1412 <= tmp_99_fu_858_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                weight_V_load_reg_1560 <= weight_V_q0;
            end if;
        end if;
    end process;
    tmp_88_cast_reg_1340(0) <= '0';
    arrayNo_cast_reg_1353(31 downto 7) <= "0000000000000000000000000";
    tmp_93_cast_reg_1358(0) <= '0';
    tmp_90_reg_1368(0) <= '0';
    tmp_97_reg_1417(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond9_fu_649_p2, ap_CS_fsm_state3, exitcond1_fu_744_p2, ap_CS_fsm_state4, exitcond2_fu_784_p2, ap_CS_fsm_state5, exitcond3_fu_817_p2, ap_CS_fsm_state7, exitcond_fu_896_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_649_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_744_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond2_fu_784_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond3_fu_817_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_896_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_1122_p2 <= "1" when (tmp_35_reg_1611 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_1127_p2 <= "1" when (tmp_35_reg_1611 = ap_const_lv2_0) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond9_fu_649_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_649_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond9_fu_649_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond9_fu_649_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayNo_cast_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_urem_reg_496),32));
    bias_V_address0 <= bias_V_addr_reg_1363;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_1184_p2 <= (newsignbit_reg_1598 and deleted_ones_fu_1150_p3);
    brmerge9_fu_1296_p2 <= (newsignbit_4_reg_1660 or isneg_not_fu_1291_p2);
    brmerge_i_i3_fu_1168_p2 <= (newsignbit_reg_1598 or p_not_i_i_fu_1162_p2);
    brmerge_i_i_fu_1287_p2 <= (isneg_reg_1647 xor newsignbit_4_reg_1660);
    brmerge_i_i_i_fu_1206_p2 <= (underflow_fu_1201_p2 or overflow_fu_1178_p2);
    buffer1_1_96_4x4_p_V_10_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_10_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_10_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_11_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_11_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_11_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_12_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_12_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_12_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_13_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_13_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_13_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_14_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_14_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_14_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_15_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_15_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_15_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_16_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_16_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_16_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_17_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_17_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_17_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_18_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_18_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_18_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_19_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_19_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_19_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_1_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_1_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_1_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_20_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_20_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_20_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_21_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_21_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_21_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_22_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_22_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_22_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_23_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_23_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_23_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_24_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_24_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_24_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_2_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_2_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_2_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_3_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_3_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_3_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_4_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_4_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_4_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_5_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_5_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_5_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_6_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_6_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_6_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_7_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_7_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_7_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_8_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_8_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_8_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_9_address0 <= tmp_107_cast_fu_933_p1(8 - 1 downto 0);

    buffer1_1_96_4x4_p_V_9_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_96_4x4_p_V_9_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    carry_fu_1099_p2 <= (tmp_104_fu_1071_p3 and tmp_34_fu_1093_p2);
    co_3_fu_655_p2 <= std_logic_vector(unsigned(co_reg_474) + unsigned(ap_const_lv7_1));
    co_cast_cast_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_474),10));
    co_cast_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_474),32));
    deleted_ones_fu_1150_p3 <= 
        p_41_i_i_fu_1145_p2 when (carry_reg_1604(0) = '1') else 
        Range1_all_ones_fu_1122_p2;
    deleted_zeros_fu_1132_p3 <= 
        Range1_all_ones_fu_1122_p2 when (carry_reg_1604(0) = '1') else 
        Range1_all_zeros_fu_1127_p2;
    exitcond1_fu_744_p2 <= "1" when (h_reg_508 = ap_const_lv3_5) else "0";
    exitcond2_fu_784_p2 <= "1" when (w_reg_520 = ap_const_lv3_5) else "0";
    exitcond3_fu_817_p2 <= "1" when (m_reg_544 = ap_const_lv2_3) else "0";
    exitcond9_fu_649_p2 <= "1" when (co_reg_474 = ap_const_lv7_60) else "0";
    exitcond_fu_896_p2 <= "1" when (n_reg_567 = ap_const_lv2_3) else "0";
    h_3_fu_790_p2 <= std_logic_vector(unsigned(h_reg_508) + unsigned(ap_const_lv3_1));
    h_cast9_cast_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_508),12));
    idx_urem_fu_762_p3 <= 
        next_urem_fu_750_p2 when (tmp_91_fu_756_p2(0) = '1') else 
        ap_const_lv7_0;
    isneg_not_fu_1291_p2 <= (isneg_reg_1647 xor ap_const_lv1_1);
    m_3_fu_823_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(m_reg_544));
    m_cast7_cast_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_544),11));
    n_3_fu_902_p2 <= std_logic_vector(unsigned(n_reg_567) + unsigned(ap_const_lv2_1));
    n_cast6_cast_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_567),11));
    newsignbit_fu_1085_p3 <= p_Val2_24_fu_1079_p2(7 downto 7);
    next_mul_fu_578_p2 <= std_logic_vector(unsigned(phi_mul_reg_485) + unsigned(ap_const_lv15_AB));
    next_urem_fu_750_p2 <= std_logic_vector(unsigned(phi_urem_reg_496) + unsigned(ap_const_lv7_1));
    output_V_address0 <= output_V_addr_reg_1381;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= 
        result_V_mux_fu_1301_p3 when (brmerge9_fu_1296_p2(0) = '1') else 
        p_result_V_fu_1308_p3;

    output_V_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_1178_p2 <= (brmerge_i_i3_fu_1168_p2 and tmp_37_fu_1173_p2);
    p_38_i_i_fu_1157_p2 <= (carry_reg_1604 and Range1_all_ones_fu_1122_p2);
    p_41_i_i_fu_1145_p2 <= (signbit_reg_1585 and tmp_36_fu_1139_p2);
    p_Val2_19_fu_1249_p2 <= std_logic_vector(signed(tmp_s_fu_1245_p1) + signed(tmp_fu_1241_p1));
    p_Val2_22_fu_1045_p2 <= std_logic_vector(signed(tmp_45_cast_fu_1041_p1) + signed(p_Val2_2_reg_1570));
    p_Val2_23_fu_1058_p4 <= p_Val2_22_fu_1045_p2(13 downto 6);
    p_Val2_24_fu_1079_p2 <= std_logic_vector(unsigned(p_Val2_23_fu_1058_p4) + unsigned(tmp_33_fu_1068_p1));
    p_Val2_24_mux_fu_1221_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_1637(0) = '1') else 
        p_Val2_24_reg_1592;
    p_Val2_2_fu_1019_p0 <= weight_V_load_reg_1560;
    p_Val2_2_fu_1019_p1 <= tmp_28_reg_1565;
    p_Val2_2_fu_1019_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_2_fu_1019_p0) * signed(p_Val2_2_fu_1019_p1))), 16));
    p_Val2_s_50_fu_1227_p3 <= 
        ap_const_lv8_80 when (underflow_reg_1632(0) = '1') else 
        p_Val2_24_reg_1592;
    p_not_i_i_fu_1162_p2 <= (deleted_zeros_fu_1132_p3 xor ap_const_lv1_1);
    p_result_V_fu_1308_p3 <= 
        ap_const_lv8_80 when (underflow_4_fu_1282_p2(0) = '1') else 
        result_V_reg_1654;
    p_shl1_cast_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_82_fu_627_p3),11));
    p_shl2_cast_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_79_fu_593_p3),10));
    p_shl3_cast_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_85_fu_675_p3),11));
    p_shl4_cast_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_86_fu_687_p3),11));
    p_shl5_cast_fu_722_p3 <= (tmp_89_fu_718_p1 & ap_const_lv3_0);
    p_shl6_cast_fu_730_p3 <= (tmp_88_fu_713_p2 & ap_const_lv1_0);
    p_shl8_cast_fu_862_p3 <= (tmp_98_reg_1407 & ap_const_lv3_0);
    p_shl9_cast_fu_869_p3 <= (tmp_99_reg_1412 & ap_const_lv1_0);
    p_shl_cast_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_81_fu_615_p3),11));
    result_V_fu_1263_p2 <= std_logic_vector(unsigned(bias_V_q0) + unsigned(p_Val2_s_reg_532));
    result_V_mux_fu_1301_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_1287_p2(0) = '1') else 
        result_V_reg_1654;
    sum_V_fu_1233_p3 <= 
        p_Val2_24_mux_fu_1221_p3 when (underflow_not_fu_1216_p2(0) = '1') else 
        p_Val2_s_50_fu_1227_p3;
        tmp2_cast_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_829_p2),3));

    tmp2_fu_829_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(m_reg_544));
        tmp3_cast_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_908_p2),3));

    tmp3_fu_908_p2 <= std_logic_vector(unsigned(n_reg_567) + unsigned(ap_const_lv2_3));
    tmp4_demorgan_fu_1189_p2 <= (p_38_i_i_fu_1157_p2 or brmerge40_demorgan_i_fu_1184_p2);
    tmp4_fu_1195_p2 <= (tmp4_demorgan_fu_1189_p2 xor ap_const_lv1_1);
    tmp5_fu_1212_p2 <= (brmerge40_demorgan_i_reg_1627 or tmp_37_reg_1622);
    tmp_100_fu_886_p2 <= std_logic_vector(unsigned(tmp_95_reg_1394) + unsigned(n_cast6_cast_fu_882_p1));
    tmp_101_fu_928_p2 <= std_logic_vector(unsigned(tmp_43_cast_cast_fu_924_p1) + unsigned(tmp_97_reg_1417));
    tmp_104_fu_1071_p3 <= p_Val2_22_fu_1045_p2(13 downto 13);
    tmp_106_cast_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_100_fu_886_p2),32));
    tmp_106_fu_1115_p3 <= p_Val2_22_reg_1580(14 downto 14);
    tmp_107_cast_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_101_reg_1435),32));
    tmp_29_fu_1277_p2 <= (newsignbit_4_reg_1660 xor ap_const_lv1_1);
    tmp_30_fu_839_p2 <= std_logic_vector(signed(tmp2_cast_fu_835_p1) + signed(h_reg_508));
    tmp_31_fu_918_p2 <= std_logic_vector(signed(tmp3_cast_fu_914_p1) + signed(w_reg_520));
    tmp_32_fu_1033_p3 <= (p_Val2_21_reg_555 & ap_const_lv6_0);
    tmp_33_fu_1068_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_103_reg_1575),8));
    tmp_34_fu_1093_p2 <= (newsignbit_fu_1085_p3 xor ap_const_lv1_1);
    tmp_36_fu_1139_p2 <= (tmp_106_fu_1115_p3 xor ap_const_lv1_1);
    tmp_37_fu_1173_p2 <= (signbit_reg_1585 xor ap_const_lv1_1);
    tmp_39_cast_cast_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_839_p2),12));
    tmp_43_cast_cast_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_918_p2),9));
        tmp_45_cast_fu_1041_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_32_fu_1033_p3),16));

    tmp_79_fu_593_p3 <= (co_reg_474 & ap_const_lv2_0);
    tmp_80_fu_605_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_601_p1) - unsigned(co_cast_cast_fu_589_p1));
    tmp_81_fu_615_p3 <= (co_reg_474 & ap_const_lv3_0);
    tmp_82_fu_627_p3 <= (co_reg_474 & ap_const_lv1_0);
    tmp_83_fu_639_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_623_p1) - unsigned(p_shl1_cast_fu_635_p1));
    tmp_84_fu_665_p4 <= phi_mul_reg_485(14 downto 12);
        tmp_85_cast_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_80_fu_605_p2),11));

    tmp_85_fu_675_p3 <= (tmp_84_fu_665_p4 & ap_const_lv3_0);
    tmp_86_fu_687_p3 <= (tmp_84_fu_665_p4 & ap_const_lv1_0);
    tmp_87_fu_699_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_683_p1) - unsigned(p_shl4_cast_fu_695_p1));
        tmp_88_cast_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_83_fu_639_p2),12));

    tmp_88_fu_713_p2 <= std_logic_vector(unsigned(h_cast9_cast_fu_709_p1) + unsigned(tmp_88_cast_reg_1340));
    tmp_89_fu_718_p1 <= tmp_88_fu_713_p2(10 - 1 downto 0);
    tmp_90_fu_738_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_722_p3) - unsigned(p_shl6_cast_fu_730_p3));
    tmp_91_fu_756_p2 <= "1" when (unsigned(next_urem_fu_750_p2) < unsigned(ap_const_lv7_18)) else "0";
    tmp_92_fu_774_p2 <= std_logic_vector(unsigned(tmp_90_reg_1368) + unsigned(w_cast8_cast_fu_770_p1));
        tmp_93_cast_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_87_fu_699_p2),12));

    tmp_93_fu_800_p2 <= std_logic_vector(unsigned(m_cast7_cast_fu_796_p1) + unsigned(tmp_85_cast_reg_1335));
    tmp_94_fu_805_p2 <= std_logic_vector(shift_left(unsigned(tmp_93_fu_800_p2),to_integer(unsigned('0' & ap_const_lv11_2(11-1 downto 0)))));
    tmp_95_fu_811_p2 <= std_logic_vector(unsigned(tmp_94_fu_805_p2) - unsigned(tmp_93_fu_800_p2));
    tmp_96_fu_849_p2 <= std_logic_vector(unsigned(tmp_39_cast_cast_fu_845_p1) + unsigned(tmp_93_cast_reg_1358));
    tmp_97_fu_876_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_862_p3) - unsigned(p_shl9_cast_fu_869_p3));
    tmp_98_cast_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_92_fu_774_p2),32));
    tmp_98_fu_854_p1 <= tmp_96_fu_849_p2(6 - 1 downto 0);
    tmp_99_fu_858_p1 <= tmp_96_fu_849_p2(8 - 1 downto 0);
        tmp_fu_1241_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_532),9));

        tmp_s_fu_1245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    underflow_4_fu_1282_p2 <= (isneg_reg_1647 and tmp_29_fu_1277_p2);
    underflow_fu_1201_p2 <= (signbit_reg_1585 and tmp4_fu_1195_p2);
    underflow_not_fu_1216_p2 <= (tmp5_fu_1212_p2 or p_38_i_i_reg_1617);
    w_3_fu_1324_p2 <= std_logic_vector(unsigned(w_reg_520) + unsigned(ap_const_lv3_1));
    w_cast8_cast_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_520),13));
    weight_V_address0 <= tmp_106_cast_fu_891_p1(10 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
