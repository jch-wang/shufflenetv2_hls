-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv1_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_weight_V_AWVALID : OUT STD_LOGIC;
    m_axi_weight_V_AWREADY : IN STD_LOGIC;
    m_axi_weight_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_WVALID : OUT STD_LOGIC;
    m_axi_weight_V_WREADY : IN STD_LOGIC;
    m_axi_weight_V_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_weight_V_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_WLAST : OUT STD_LOGIC;
    m_axi_weight_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_ARVALID : OUT STD_LOGIC;
    m_axi_weight_V_ARREADY : IN STD_LOGIC;
    m_axi_weight_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weight_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weight_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weight_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_RVALID : IN STD_LOGIC;
    m_axi_weight_V_RREADY : OUT STD_LOGIC;
    m_axi_weight_V_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_weight_V_RLAST : IN STD_LOGIC;
    m_axi_weight_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_BVALID : IN STD_LOGIC;
    m_axi_weight_V_BREADY : OUT STD_LOGIC;
    m_axi_weight_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weight_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weight_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    conv1_weight_V3 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of conv1_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv10_288 : STD_LOGIC_VECTOR (9 downto 0) := "1010001000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv6_1B : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv15_6000 : STD_LOGIC_VECTOR (14 downto 0) := "110000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv12_400 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weight_V_blk_n_AR : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal exitcond_flatten_reg_1757 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_flatten_reg_1757 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter10_exitcond_flatten_reg_1757 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten14_reg_262 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_273 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten13_reg_285 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_296 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_308 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_320 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_reg_332 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten15_reg_344 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_1_reg_355 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten16_reg_367 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_1_reg_378 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_1_reg_390 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten17_reg_469 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_2_reg_480 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten18_reg_491 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_2_reg_502 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_2_reg_513 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_flatten_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_weight_V_ARREADY : STD_LOGIC;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_1757 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_1757 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_flatten_reg_1757 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_flatten_reg_1757 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_flatten_reg_1757 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_exitcond_flatten_reg_1757 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_exitcond_flatten_reg_1757 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_exitcond_flatten_reg_1757 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_exitcond_flatten_reg_1757 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next2_fu_530_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond_flatten18_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten18_reg_1766 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond_flatten18_reg_1766 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next1_fu_548_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_cast_mid2_v_fu_569_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_cast_mid2_v_reg_1781 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal not_exitcond_flatten_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_reg_1788 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten19_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten19_reg_1793 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_mid_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_mid_reg_1798 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_618_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_618_reg_1803 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast_mid2_fu_604_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_cast_mid2_reg_1809 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_op_fu_612_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_op_reg_1815 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_mid2_fu_723_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_mid2_reg_1820 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_cast_mid2_fu_731_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_cast_mid2_reg_1825 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_622_fu_743_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_622_reg_1830 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_fu_749_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_1_reg_1836 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_next_fu_755_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_624_fu_774_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_624_reg_1846 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter4_tmp_624_reg_1846 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter5_tmp_624_reg_1846 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter6_tmp_624_reg_1846 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter7_tmp_624_reg_1846 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter8_tmp_624_reg_1846 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter9_tmp_624_reg_1846 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter10_tmp_624_reg_1846 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter11_tmp_624_reg_1846 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_V_addr_reg_1851 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_V_addr_read_reg_1857 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_flatten20_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten20_reg_1862 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state16_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp1_iter1_exitcond_flatten20_reg_1862 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next2_2_fu_797_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal exitcond_flatten21_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten21_reg_1871 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond79_mid_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond79_mid_reg_1877 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_mid2_fu_833_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_1_mid2_reg_1882 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_pp1_iter1_k_1_mid2_reg_1882 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_next2_1_fu_847_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_cast_mid2_v_fu_868_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_cast_mid2_v_reg_1893 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal j_1_cast_mid2_fu_916_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_cast_mid2_reg_1898 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_629_fu_927_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_629_reg_1903 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_4_fu_933_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_cast_cast_fu_976_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal h_cast_cast_reg_1919 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal exitcond52_fu_980_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_cast_cast_fu_986_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_cast_cast_reg_1928 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal h_34_fu_996_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond53_fu_990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_cast_fu_1002_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_cast_reg_1941 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal m_7_fu_1012_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_7_reg_1949 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_cast_cast_fu_1034_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_cast_reg_1954 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond55_fu_1006_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_44_fu_1038_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal n_cast_cast_fu_1044_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal n_cast_cast_reg_1964 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal n_7_fu_1054_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_7_reg_1972 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_150_cast_cast_fu_1076_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_150_cast_cast_reg_1977 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond56_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ci_cast9_cast_fu_1080_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ci_cast9_cast_reg_1982 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal input_V_addr_reg_1987 : STD_LOGIC_VECTOR (11 downto 0);
    signal ci_16_fu_1161_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ci_16_reg_1995 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_V_addr_2_reg_2000 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_2147_fu_1296_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2147_reg_2005 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2148_fu_1300_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2148_reg_2010 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond58_fu_1304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond58_reg_2015 : STD_LOGIC_VECTOR (0 downto 0);
    signal co_34_fu_1310_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_34_reg_2019 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal weight_temp_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weight_temp_V_load_reg_2029 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal input_V_load_reg_2034 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_67_fu_1344_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_67_reg_2039 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal p_Val2_s_reg_2044 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2150_reg_2049 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_68_fu_1369_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_68_reg_2054 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal signbit_reg_2059 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_70_fu_1403_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_70_reg_2066 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_1409_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_2072 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_1423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_2078 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_254_reg_2085 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_1481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_2091 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal tmp_159_fu_1497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_159_reg_2096 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_1508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_2101 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_1525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_2106 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_1530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_2111 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten22_fu_1566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten22_reg_2116 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state32_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state34_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_flag00011001 : BOOLEAN;
    signal indvar_flatten_next2_4_fu_1572_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal indvar_flatten_next2_4_reg_2120 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal j_2_mid_fu_1590_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_mid_reg_2125 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_cast7_mid2_v_fu_1598_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_cast7_mid2_v_reg_2131 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_mid_fu_1618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_mid_reg_2138 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_2_mid2_fu_1630_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_2_mid2_reg_2143 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_next2_3_fu_1644_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_flatten_next2_3_reg_2149 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_2_cast6_mid2_fu_1685_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_cast6_mid2_reg_2154 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_state33_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state35_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_pp2_stage1_flag00011001 : BOOLEAN;
    signal tmp_636_fu_1695_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_636_reg_2159 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_6_fu_1701_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_6_reg_2165 : STD_LOGIC_VECTOR (5 downto 0);
    signal output_V_addr_1_reg_2170 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_pp1_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state16 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state32 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage1_flag00011011 : BOOLEAN;
    signal weight_temp_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weight_temp_V_ce0 : STD_LOGIC;
    signal weight_temp_V_we0 : STD_LOGIC;
    signal weight_temp_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_phi_fu_277_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_phi_fu_300_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_phi_fu_312_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_phi_fu_324_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_phi_fu_336_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_phi_fu_359_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0_flag00000000 : BOOLEAN;
    signal j_1_phi_fu_382_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_1_phi_fu_394_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_reg_401 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal w_reg_413 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_reg_425 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_reg_436 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond57_fu_1155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ci_reg_447 : STD_LOGIC_VECTOR (1 downto 0);
    signal co_reg_458 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal indvar_flatten17_phi_fu_473_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp2_stage0_flag00000000 : BOOLEAN;
    signal i_2_phi_fu_484_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten18_phi_fu_495_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_2_phi_fu_506_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_2_phi_fu_517_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_cast_mid2_fu_875_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_764_cast_fu_971_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_781_cast_fu_1150_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_789_cast_fu_1237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_798_cast_fu_1333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_773_cast_fu_1739_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_fu_780_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_m_axi_weight_V_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal this_assign_1_fu_1557_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2143_fu_1744_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp2_stage1_flag00000000 : BOOLEAN;
    signal indvar_flatten13_op_fu_542_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_6_fu_556_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_mid_fu_562_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_6_fu_593_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_621_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_fu_628_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_cast_mid2_cast_fu_618_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_617_fu_632_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast_mid2_cast_fu_660_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_744_cast_fu_638_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_619_fu_663_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2138_fu_673_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_fu_681_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_746_cast_fu_669_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_not_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond82_mid_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_4_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_mid_fu_653_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond82_mid1_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_621_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2139_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_5_fu_707_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_cast_mid2_cast_fu_739_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_620_fu_685_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2140_fu_761_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_fu_771_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_623_fu_766_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond51_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_1_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_628_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten44_op_fu_841_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_7_fu_855_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_625_fu_880_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_626_fu_892_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl5_cast_fu_888_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_fu_900_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_mid_fu_861_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_7_fu_910_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_cast_mid2_cast_fu_923_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_627_fu_904_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2141_fu_945_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl3_cast_fu_938_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl4_cast_fu_952_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_1_cast_cast_fu_962_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_630_fu_956_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_631_fu_965_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_1018_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_cast_fu_1024_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_1028_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp2_fu_1060_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_1066_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_150_fu_1070_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_639_fu_1084_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_640_fu_1096_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl9_cast_fu_1092_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl10_cast_fu_1104_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_641_fu_1108_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_642_fu_1114_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2144_fu_1127_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl7_cast_fu_1119_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl8_cast_fu_1135_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_643_fu_1139_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_644_fu_1145_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_645_fu_1171_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_646_fu_1183_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl17_cast_fu_1191_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl16_cast_fu_1179_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_647_fu_1195_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_648_fu_1201_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2145_fu_1214_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl15_cast_fu_1222_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl14_cast_fu_1206_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_649_fu_1226_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_650_fu_1232_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_651_fu_1242_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl13_cast_fu_1250_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal co_cast8_cast_fu_1167_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_652_fu_1254_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_791_cast_fu_1260_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_653_fu_1264_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2146_fu_1273_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_fu_1281_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_792_cast_fu_1269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_654_fu_1285_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_655_fu_1291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl11_cast_fu_1316_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_656_fu_1323_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_657_fu_1328_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_67_fu_1344_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_67_fu_1344_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_152_fu_1358_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_152_cast_fu_1365_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_155_fu_1392_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_69_fu_1382_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2151_fu_1395_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_156_fu_1417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_1446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_1451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2153_fu_1439_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_157_fu_1463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_1469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_1456_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_1486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_1492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_1474_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_demorgan_fu_1513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_1519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_1502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_1536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_1540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_187_mux_fu_1545_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_504_fu_1551_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_flatten23_fu_1584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_fu_1578_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond54_fu_1612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_2_fu_1606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_635_fu_1624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten66_op_fu_1638_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_632_fu_1652_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_633_fu_1663_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl20_cast_fu_1659_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl21_cast_fu_1670_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_8_fu_1680_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_cast6_mid2_cast_fu_1691_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_634_fu_1674_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2142_fu_1713_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl18_cast_fu_1706_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl19_cast_fu_1720_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_2_cast5_cast_fu_1730_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_637_fu_1724_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_638_fu_1733_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component conv1_p_weight_tebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    weight_temp_V_U : component conv1_p_weight_tebkb
    generic map (
        DataWidth => 8,
        AddressRange => 648,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weight_temp_V_address0,
        ce0 => weight_temp_V_ce0,
        we0 => weight_temp_V_we0,
        d0 => weight_temp_V_d0,
        q0 => weight_temp_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state16))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state16)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state16 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state32))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond52_fu_980_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state32) and (ap_block_pp2_stage1_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_condition_pp2_exit_iter0_state32 xor ap_const_logic_1);
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_block_pp2_stage1_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond52_fu_980_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_weight_V_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_weight_V_ARREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_1757))) then
                    if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_m_axi_weight_V_ARREADY <= ap_const_logic_0;
                    elsif (((ap_const_logic_1 = m_axi_weight_V_ARREADY) and (ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0))) then 
                        ap_reg_ioackin_m_axi_weight_V_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ci_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv1_1 = exitcond58_reg_2015))) then 
                ci_reg_447 <= ci_16_reg_1995;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_0 = exitcond56_fu_1048_p2))) then 
                ci_reg_447 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    co_reg_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_lv1_0 = exitcond57_fu_1155_p2))) then 
                co_reg_458 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                co_reg_458 <= co_34_reg_2019;
            end if; 
        end if;
    end process;

    h_reg_401_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                h_reg_401 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond53_fu_990_p2 = ap_const_lv1_1))) then 
                h_reg_401 <= h_34_fu_996_p2;
            end if; 
        end if;
    end process;

    i_1_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_1_reg_355 <= ap_const_lv5_0;
            elsif (((ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond_flatten20_reg_1862))) then 
                i_1_reg_355 <= i_1_cast_mid2_v_reg_1893;
            end if; 
        end if;
    end process;

    i_2_reg_480_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond52_fu_980_p2 = ap_const_lv1_1))) then 
                i_2_reg_480 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten22_reg_2116) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1))) then 
                i_2_reg_480 <= i_2_cast7_mid2_v_reg_2131;
            end if; 
        end if;
    end process;

    i_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_1757) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
                i_reg_273 <= i_cast_mid2_v_reg_1781;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_273 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_524_p2))) then 
                indvar_flatten13_reg_285 <= indvar_flatten_next1_fu_548_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten13_reg_285 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten14_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_524_p2))) then 
                indvar_flatten14_reg_262 <= indvar_flatten_next2_fu_530_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten14_reg_262 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten15_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                indvar_flatten15_reg_344 <= ap_const_lv15_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_flatten20_fu_791_p2))) then 
                indvar_flatten15_reg_344 <= indvar_flatten_next2_2_fu_797_p2;
            end if; 
        end if;
    end process;

    indvar_flatten16_reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                indvar_flatten16_reg_367 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_flatten20_fu_791_p2))) then 
                indvar_flatten16_reg_367 <= indvar_flatten_next2_1_fu_847_p3;
            end if; 
        end if;
    end process;

    indvar_flatten17_reg_469_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond52_fu_980_p2 = ap_const_lv1_1))) then 
                indvar_flatten17_reg_469 <= ap_const_lv15_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten22_reg_2116) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1))) then 
                indvar_flatten17_reg_469 <= indvar_flatten_next2_4_reg_2120;
            end if; 
        end if;
    end process;

    indvar_flatten18_reg_491_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond52_fu_980_p2 = ap_const_lv1_1))) then 
                indvar_flatten18_reg_491 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten22_reg_2116) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1))) then 
                indvar_flatten18_reg_491 <= indvar_flatten_next2_3_reg_2149;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_1757) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
                indvar_flatten_reg_308 <= indvar_flatten_next_fu_755_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_308 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_1_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j_1_reg_378 <= ap_const_lv6_1;
            elsif (((ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond_flatten20_reg_1862))) then 
                j_1_reg_378 <= j_1_cast_mid2_reg_1898;
            end if; 
        end if;
    end process;

    j_2_reg_502_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond52_fu_980_p2 = ap_const_lv1_1))) then 
                j_2_reg_502 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten22_reg_2116) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1))) then 
                j_2_reg_502 <= j_2_cast6_mid2_reg_2154;
            end if; 
        end if;
    end process;

    j_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_1757) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
                j_reg_296 <= j_cast_mid2_reg_1809;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_296 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_1_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                k_1_reg_390 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_flatten20_reg_1862))) then 
                k_1_reg_390 <= k_4_fu_933_p2;
            end if; 
        end if;
    end process;

    k_2_reg_513_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond52_fu_980_p2 = ap_const_lv1_1))) then 
                k_2_reg_513 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten22_reg_2116) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1))) then 
                k_2_reg_513 <= k_6_reg_2165;
            end if; 
        end if;
    end process;

    k_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_1757) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then 
                k_reg_320 <= k_cast_mid2_reg_1825;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_reg_320 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    m_reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_lv1_0 = exitcond53_fu_990_p2))) then 
                m_reg_425 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_1 = exitcond56_fu_1048_p2))) then 
                m_reg_425 <= m_7_reg_1949;
            end if; 
        end if;
    end process;

    n_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_lv1_1 = exitcond57_fu_1155_p2))) then 
                n_reg_436 <= n_7_reg_1972;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (ap_const_lv1_0 = exitcond55_fu_1006_p2))) then 
                n_reg_436 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_1757) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then 
                p_reg_332 <= p_1_reg_1836;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_reg_332 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    w_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = exitcond52_fu_980_p2))) then 
                w_reg_413 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (ap_const_lv1_1 = exitcond55_fu_1006_p2))) then 
                w_reg_413 <= w_44_fu_1038_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter10_exitcond_flatten_reg_1757 <= ap_reg_pp0_iter9_exitcond_flatten_reg_1757;
                ap_reg_pp0_iter10_tmp_624_reg_1846 <= ap_reg_pp0_iter9_tmp_624_reg_1846;
                ap_reg_pp0_iter11_exitcond_flatten_reg_1757 <= ap_reg_pp0_iter10_exitcond_flatten_reg_1757;
                ap_reg_pp0_iter11_tmp_624_reg_1846 <= ap_reg_pp0_iter10_tmp_624_reg_1846;
                ap_reg_pp0_iter2_exitcond_flatten_reg_1757 <= ap_reg_pp0_iter1_exitcond_flatten_reg_1757;
                ap_reg_pp0_iter3_exitcond_flatten_reg_1757 <= ap_reg_pp0_iter2_exitcond_flatten_reg_1757;
                ap_reg_pp0_iter4_exitcond_flatten_reg_1757 <= ap_reg_pp0_iter3_exitcond_flatten_reg_1757;
                ap_reg_pp0_iter4_tmp_624_reg_1846 <= tmp_624_reg_1846;
                ap_reg_pp0_iter5_exitcond_flatten_reg_1757 <= ap_reg_pp0_iter4_exitcond_flatten_reg_1757;
                ap_reg_pp0_iter5_tmp_624_reg_1846 <= ap_reg_pp0_iter4_tmp_624_reg_1846;
                ap_reg_pp0_iter6_exitcond_flatten_reg_1757 <= ap_reg_pp0_iter5_exitcond_flatten_reg_1757;
                ap_reg_pp0_iter6_tmp_624_reg_1846 <= ap_reg_pp0_iter5_tmp_624_reg_1846;
                ap_reg_pp0_iter7_exitcond_flatten_reg_1757 <= ap_reg_pp0_iter6_exitcond_flatten_reg_1757;
                ap_reg_pp0_iter7_tmp_624_reg_1846 <= ap_reg_pp0_iter6_tmp_624_reg_1846;
                ap_reg_pp0_iter8_exitcond_flatten_reg_1757 <= ap_reg_pp0_iter7_exitcond_flatten_reg_1757;
                ap_reg_pp0_iter8_tmp_624_reg_1846 <= ap_reg_pp0_iter7_tmp_624_reg_1846;
                ap_reg_pp0_iter9_exitcond_flatten_reg_1757 <= ap_reg_pp0_iter8_exitcond_flatten_reg_1757;
                ap_reg_pp0_iter9_tmp_624_reg_1846 <= ap_reg_pp0_iter8_tmp_624_reg_1846;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_flatten18_reg_1766 <= exitcond_flatten18_reg_1766;
                ap_reg_pp0_iter1_exitcond_flatten_reg_1757 <= exitcond_flatten_reg_1757;
                exitcond_flatten_reg_1757 <= exitcond_flatten_fu_524_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp1_iter1_exitcond_flatten20_reg_1862 <= exitcond_flatten20_reg_1862;
                ap_reg_pp1_iter1_k_1_mid2_reg_1882 <= k_1_mid2_reg_1882;
                exitcond_flatten20_reg_1862 <= exitcond_flatten20_fu_791_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                brmerge40_demorgan_i_reg_2101 <= brmerge40_demorgan_i_fu_1508_p2;
                brmerge_i_i_i_reg_2111 <= brmerge_i_i_i_fu_1530_p2;
                p_38_i_i_reg_2091 <= p_38_i_i_fu_1481_p2;
                tmp_159_reg_2096 <= tmp_159_fu_1497_p2;
                underflow_reg_2106 <= underflow_fu_1525_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                carry_reg_2078 <= carry_fu_1423_p2;
                newsignbit_reg_2072 <= p_Val2_70_fu_1403_p2(7 downto 7);
                p_Val2_68_reg_2054 <= p_Val2_68_fu_1369_p2;
                p_Val2_70_reg_2066 <= p_Val2_70_fu_1403_p2;
                signbit_reg_2059 <= p_Val2_68_fu_1369_p2(15 downto 15);
                tmp_254_reg_2085 <= p_Val2_68_fu_1369_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                ci_16_reg_1995 <= ci_16_fu_1161_p2;
                    ci_cast9_cast_reg_1982(1 downto 0) <= ci_cast9_cast_fu_1080_p1(1 downto 0);
                input_V_addr_reg_1987 <= tmp_781_cast_fu_1150_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                co_34_reg_2019 <= co_34_fu_1310_p2;
                exitcond58_reg_2015 <= exitcond58_fu_1304_p2;
                output_V_addr_2_reg_2000 <= tmp_789_cast_fu_1237_p1(15 - 1 downto 0);
                tmp_2147_reg_2005 <= tmp_2147_fu_1296_p1;
                tmp_2148_reg_2010 <= tmp_2148_fu_1300_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten20_fu_791_p2))) then
                exitcond79_mid_reg_1877 <= exitcond79_mid_fu_821_p2;
                exitcond_flatten21_reg_1871 <= exitcond_flatten21_fu_803_p2;
                k_1_mid2_reg_1882 <= k_1_mid2_fu_833_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_fu_524_p2))) then
                exitcond_flatten18_reg_1766 <= exitcond_flatten18_fu_536_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_reg_1757))) then
                exitcond_flatten19_reg_1793 <= exitcond_flatten19_fu_581_p2;
                exitcond_flatten_mid_reg_1798 <= exitcond_flatten_mid_fu_587_p2;
                indvar_flatten_op_reg_1815 <= indvar_flatten_op_fu_612_p2;
                not_exitcond_flatten_reg_1788 <= not_exitcond_flatten_fu_576_p2;
                tmp_618_reg_1803 <= tmp_618_fu_599_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0))) then
                exitcond_flatten22_reg_2116 <= exitcond_flatten22_fu_1566_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten22_fu_1566_p2))) then
                exitcond_mid_reg_2138 <= exitcond_mid_fu_1618_p2;
                j_2_mid_reg_2125 <= j_2_mid_fu_1590_p3;
                k_2_mid2_reg_2143 <= k_2_mid2_fu_1630_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                    h_cast_cast_reg_1919(5 downto 0) <= h_cast_cast_fu_976_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_flatten20_reg_1862))) then
                i_1_cast_mid2_v_reg_1893 <= i_1_cast_mid2_v_fu_868_p3;
                j_1_cast_mid2_reg_1898 <= j_1_cast_mid2_fu_916_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_0 = exitcond_flatten22_fu_1566_p2))) then
                i_2_cast7_mid2_v_reg_2131 <= i_2_cast7_mid2_v_fu_1598_p3;
                indvar_flatten_next2_3_reg_2149 <= indvar_flatten_next2_3_fu_1644_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond_flatten_reg_1757))) then
                i_cast_mid2_v_reg_1781 <= i_cast_mid2_v_fu_569_p3;
                j_cast_mid2_reg_1809 <= j_cast_mid2_fu_604_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then
                indvar_flatten_next2_4_reg_2120 <= indvar_flatten_next2_4_fu_1572_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                input_V_load_reg_2034 <= input_V_q0;
                weight_temp_V_load_reg_2029 <= weight_temp_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_block_pp2_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten22_reg_2116))) then
                j_2_cast6_mid2_reg_2154 <= j_2_cast6_mid2_fu_1685_p3;
                k_6_reg_2165 <= k_6_fu_1701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_1757) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then
                k_cast_mid2_reg_1825 <= k_cast_mid2_fu_731_p3;
                p_1_reg_1836 <= p_1_fu_749_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                m_7_reg_1949 <= m_7_fu_1012_p2;
                    m_cast_reg_1941(1 downto 0) <= m_cast_fu_1002_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                n_7_reg_1972 <= n_7_fu_1054_p2;
                    n_cast_cast_reg_1964(1 downto 0) <= n_cast_cast_fu_1044_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten22_reg_2116))) then
                output_V_addr_1_reg_2170 <= tmp_773_cast_fu_1739_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                p_Val2_67_reg_2039 <= p_Val2_67_fu_1344_p2;
                p_Val2_s_reg_2044 <= output_V_q0;
                tmp_2150_reg_2049 <= p_Val2_67_fu_1344_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_1757))) then
                p_mid2_reg_1820 <= p_mid2_fu_723_p3;
                tmp_622_reg_1830 <= tmp_622_fu_743_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_0 = exitcond56_fu_1048_p2))) then
                    tmp_150_cast_cast_reg_1977(5 downto 0) <= tmp_150_cast_cast_fu_1076_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_1757))) then
                tmp_624_reg_1846 <= tmp_624_fu_774_p2;
                weight_V_addr_reg_1851 <= sum_fu_780_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten20_reg_1862))) then
                tmp_629_reg_1903 <= tmp_629_fu_927_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_block_pp2_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten22_reg_2116))) then
                tmp_636_reg_2159 <= tmp_636_fu_1695_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (ap_const_lv1_0 = exitcond55_fu_1006_p2))) then
                    tmp_cast_cast_reg_1954(5 downto 0) <= tmp_cast_cast_fu_1034_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                    w_cast_cast_reg_1928(5 downto 0) <= w_cast_cast_fu_986_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = ap_reg_pp0_iter10_exitcond_flatten_reg_1757) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                weight_V_addr_read_reg_1857 <= m_axi_weight_V_RDATA;
            end if;
        end if;
    end process;
    h_cast_cast_reg_1919(10 downto 6) <= "00000";
    w_cast_cast_reg_1928(15 downto 6) <= "0000000000";
    m_cast_reg_1941(31 downto 2) <= "000000000000000000000000000000";
    tmp_cast_cast_reg_1954(7 downto 6) <= "00";
    n_cast_cast_reg_1964(10 downto 2) <= "000000000";
    tmp_150_cast_cast_reg_1977(12 downto 6) <= "0000000";
    ci_cast9_cast_reg_1982(8 downto 2) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter11, exitcond_flatten_fu_524_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, exitcond_flatten20_fu_791_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state20, exitcond52_fu_980_p2, ap_CS_fsm_state21, exitcond53_fu_990_p2, ap_CS_fsm_state22, exitcond55_fu_1006_p2, ap_CS_fsm_state23, exitcond56_fu_1048_p2, ap_CS_fsm_state24, exitcond58_reg_2015, ap_CS_fsm_state26, exitcond_flatten22_fu_1566_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter12, ap_block_pp1_stage0_flag00011011, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_flag00011011, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1_flag00011011, exitcond57_fu_1155_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_524_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_524_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten20_fu_791_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten20_fu_791_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond52_fu_980_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond53_fu_990_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (ap_const_lv1_1 = exitcond55_fu_1006_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_lv1_1 = exitcond56_fu_1048_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_lv1_1 = exitcond57_fu_1155_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv1_1 = exitcond58_reg_2015))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_pp2_stage0 => 
                if (((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_flatten22_fu_1566_p2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_flatten22_fu_1566_p2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if (((ap_block_pp2_stage1_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_block_pp2_stage1_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_block_pp2_stage1_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_1446_p2 <= "1" when (tmp_254_reg_2085 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_1451_p2 <= "1" when (tmp_254_reg_2085 = ap_const_lv2_0) else "0";
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(17);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(18);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(2);
    ap_CS_fsm_state19 <= ap_CS_fsm(4);
    ap_CS_fsm_state20 <= ap_CS_fsm(5);
    ap_CS_fsm_state21 <= ap_CS_fsm(6);
    ap_CS_fsm_state22 <= ap_CS_fsm(7);
    ap_CS_fsm_state23 <= ap_CS_fsm(8);
    ap_CS_fsm_state24 <= ap_CS_fsm(9);
    ap_CS_fsm_state25 <= ap_CS_fsm(10);
    ap_CS_fsm_state26 <= ap_CS_fsm(11);
    ap_CS_fsm_state27 <= ap_CS_fsm(12);
    ap_CS_fsm_state28 <= ap_CS_fsm(13);
    ap_CS_fsm_state29 <= ap_CS_fsm(14);
    ap_CS_fsm_state30 <= ap_CS_fsm(15);
    ap_CS_fsm_state31 <= ap_CS_fsm(16);
    ap_CS_fsm_state36 <= ap_CS_fsm(19);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00001001_assign_proc : process(m_axi_weight_V_RVALID, ap_enable_reg_pp0_iter11, ap_reg_pp0_iter10_exitcond_flatten_reg_1757)
    begin
                ap_block_pp0_stage0_flag00001001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter11) and (ap_const_lv1_0 = ap_reg_pp0_iter10_exitcond_flatten_reg_1757) and (ap_const_logic_0 = m_axi_weight_V_RVALID));
    end process;


    ap_block_pp0_stage0_flag00011001_assign_proc : process(m_axi_weight_V_RVALID, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter11, ap_reg_pp0_iter10_exitcond_flatten_reg_1757, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_flag00011001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_boolean_1 = ap_block_state6_io)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter11) and (ap_const_lv1_0 = ap_reg_pp0_iter10_exitcond_flatten_reg_1757) and (ap_const_logic_0 = m_axi_weight_V_RVALID)));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(m_axi_weight_V_RVALID, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter11, ap_reg_pp0_iter10_exitcond_flatten_reg_1757, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_flag00011011 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_boolean_1 = ap_block_state6_io)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter11) and (ap_const_lv1_0 = ap_reg_pp0_iter10_exitcond_flatten_reg_1757) and (ap_const_logic_0 = m_axi_weight_V_RVALID)));
    end process;

        ap_block_pp1_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_pp0_stage0_iter11_assign_proc : process(m_axi_weight_V_RVALID, ap_reg_pp0_iter10_exitcond_flatten_reg_1757)
    begin
                ap_block_state13_pp0_stage0_iter11 <= ((ap_const_lv1_0 = ap_reg_pp0_iter10_exitcond_flatten_reg_1757) and (ap_const_logic_0 = m_axi_weight_V_RVALID));
    end process;

        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(ap_reg_pp0_iter3_exitcond_flatten_reg_1757, ap_sig_ioackin_m_axi_weight_V_ARREADY)
    begin
                ap_block_state6_io <= ((ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_1757) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_weight_V_ARREADY));
    end process;

        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_524_p2)
    begin
        if ((exitcond_flatten_fu_524_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state16_assign_proc : process(exitcond_flatten20_fu_791_p2)
    begin
        if ((exitcond_flatten20_fu_791_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state16 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state32_assign_proc : process(exitcond_flatten22_fu_1566_p2)
    begin
        if ((ap_const_lv1_1 = exitcond_flatten22_fu_1566_p2)) then 
            ap_condition_pp2_exit_iter0_state32 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state32 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state36)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9) and (ap_const_logic_0 = ap_enable_reg_pp0_iter10) and (ap_const_logic_0 = ap_enable_reg_pp0_iter11) and (ap_const_logic_0 = ap_enable_reg_pp0_iter12))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter0) and (ap_const_logic_0 = ap_enable_reg_pp1_iter1) and (ap_const_logic_0 = ap_enable_reg_pp1_iter2))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp2_iter0) and (ap_const_logic_0 = ap_enable_reg_pp2_iter1))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_weight_V_ARREADY_assign_proc : process(m_axi_weight_V_ARREADY, ap_reg_ioackin_m_axi_weight_V_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_weight_V_ARREADY)) then 
            ap_sig_ioackin_m_axi_weight_V_ARREADY <= m_axi_weight_V_ARREADY;
        else 
            ap_sig_ioackin_m_axi_weight_V_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    bias_V_address0 <= i_1_cast_mid2_fu_875_p1(5 - 1 downto 0);

    bias_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_1508_p2 <= (newsignbit_reg_2072 and deleted_ones_fu_1474_p3);
    brmerge_i_i_fu_1492_p2 <= (newsignbit_reg_2072 or p_not_i_i_fu_1486_p2);
    brmerge_i_i_i_fu_1530_p2 <= (underflow_fu_1525_p2 or overflow_fu_1502_p2);
    carry_fu_1423_p2 <= (tmp_2151_fu_1395_p3 and tmp_156_fu_1417_p2);
    ci_16_fu_1161_p2 <= std_logic_vector(unsigned(ci_reg_447) + unsigned(ap_const_lv2_1));
    ci_cast9_cast_fu_1080_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ci_reg_447),9));
    co_34_fu_1310_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(co_reg_458));
    co_cast8_cast_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_458),8));
    deleted_ones_fu_1474_p3 <= 
        p_41_i_i_fu_1469_p2 when (carry_reg_2078(0) = '1') else 
        Range1_all_ones_fu_1446_p2;
    deleted_zeros_fu_1456_p3 <= 
        Range1_all_ones_fu_1446_p2 when (carry_reg_2078(0) = '1') else 
        Range1_all_zeros_fu_1451_p2;
    exitcond51_fu_815_p2 <= "1" when (k_1_phi_fu_394_p4 = ap_const_lv6_21) else "0";
    exitcond52_fu_980_p2 <= "1" when (h_reg_401 = ap_const_lv6_21) else "0";
    exitcond53_fu_990_p2 <= "1" when (w_reg_413 = ap_const_lv6_21) else "0";
    exitcond54_fu_1612_p2 <= "1" when (k_2_phi_fu_517_p4 = ap_const_lv6_21) else "0";
    exitcond55_fu_1006_p2 <= "1" when (m_reg_425 = ap_const_lv2_3) else "0";
    exitcond56_fu_1048_p2 <= "1" when (n_reg_436 = ap_const_lv2_3) else "0";
    exitcond57_fu_1155_p2 <= "1" when (ci_reg_447 = ap_const_lv2_3) else "0";
    exitcond58_fu_1304_p2 <= "1" when (co_reg_458 = ap_const_lv5_18) else "0";
    exitcond79_mid_fu_821_p2 <= (exitcond51_fu_815_p2 and not_exitcond_flatten_1_fu_809_p2);
    exitcond82_mid1_fu_701_p2 <= (exitcond82_mid_fu_648_p2 and not_exitcond_flatten_4_fu_696_p2);
    exitcond82_mid_fu_648_p2 <= (exitcond_fu_642_p2 and not_exitcond_flatten_reg_1788);
    exitcond_flatten18_fu_536_p2 <= "1" when (indvar_flatten13_reg_285 = ap_const_lv6_1B) else "0";
    exitcond_flatten19_fu_581_p2 <= "1" when (indvar_flatten_phi_fu_312_p4 = ap_const_lv4_9) else "0";
    exitcond_flatten20_fu_791_p2 <= "1" when (indvar_flatten15_reg_344 = ap_const_lv15_6000) else "0";
    exitcond_flatten21_fu_803_p2 <= "1" when (indvar_flatten16_reg_367 = ap_const_lv12_400) else "0";
    exitcond_flatten22_fu_1566_p2 <= "1" when (indvar_flatten17_phi_fu_473_p4 = ap_const_lv15_6000) else "0";
    exitcond_flatten23_fu_1584_p2 <= "1" when (indvar_flatten18_phi_fu_495_p4 = ap_const_lv12_400) else "0";
    exitcond_flatten_fu_524_p2 <= "1" when (indvar_flatten14_reg_262 = ap_const_lv10_288) else "0";
    exitcond_flatten_mid_fu_587_p2 <= (exitcond_flatten19_fu_581_p2 and not_exitcond_flatten_fu_576_p2);
    exitcond_flatten_not_fu_691_p2 <= (exitcond_flatten19_reg_1793 xor ap_const_lv1_1);
    exitcond_fu_642_p2 <= "1" when (p_phi_fu_336_p4 = ap_const_lv2_3) else "0";
    exitcond_mid_fu_1618_p2 <= (exitcond54_fu_1612_p2 and not_exitcond_flatten_2_fu_1606_p2);
    h_34_fu_996_p2 <= std_logic_vector(unsigned(h_reg_401) + unsigned(ap_const_lv6_1));
    h_cast_cast_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_401),11));
    i_1_cast_mid2_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_cast_mid2_v_fu_868_p3),32));
    i_1_cast_mid2_v_fu_868_p3 <= 
        i_7_fu_855_p2 when (exitcond_flatten21_reg_1871(0) = '1') else 
        i_1_phi_fu_359_p4;

    i_1_phi_fu_359_p4_assign_proc : process(i_1_reg_355, ap_reg_pp1_iter1_exitcond_flatten20_reg_1862, i_1_cast_mid2_v_reg_1893, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond_flatten20_reg_1862) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            i_1_phi_fu_359_p4 <= i_1_cast_mid2_v_reg_1893;
        else 
            i_1_phi_fu_359_p4 <= i_1_reg_355;
        end if; 
    end process;

    i_2_cast7_mid2_v_fu_1598_p3 <= 
        i_8_fu_1578_p2 when (exitcond_flatten23_fu_1584_p2(0) = '1') else 
        i_2_phi_fu_484_p4;

    i_2_phi_fu_484_p4_assign_proc : process(i_2_reg_480, exitcond_flatten22_reg_2116, ap_CS_fsm_pp2_stage0, i_2_cast7_mid2_v_reg_2131, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond_flatten22_reg_2116) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0))) then 
            i_2_phi_fu_484_p4 <= i_2_cast7_mid2_v_reg_2131;
        else 
            i_2_phi_fu_484_p4 <= i_2_reg_480;
        end if; 
    end process;

    i_6_fu_556_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(i_phi_fu_277_p4));
    i_7_fu_855_p2 <= std_logic_vector(unsigned(i_1_phi_fu_359_p4) + unsigned(ap_const_lv5_1));
    i_8_fu_1578_p2 <= std_logic_vector(unsigned(i_2_phi_fu_484_p4) + unsigned(ap_const_lv5_1));
    i_cast_mid2_cast_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_cast_mid2_v_reg_1781),8));
    i_cast_mid2_v_fu_569_p3 <= 
        i_6_fu_556_p2 when (exitcond_flatten18_reg_1766(0) = '1') else 
        i_phi_fu_277_p4;

    i_phi_fu_277_p4_assign_proc : process(ap_block_pp0_stage0_flag00000000, i_reg_273, ap_reg_pp0_iter1_exitcond_flatten_reg_1757, i_cast_mid2_v_reg_1781, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_1757) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            i_phi_fu_277_p4 <= i_cast_mid2_v_reg_1781;
        else 
            i_phi_fu_277_p4 <= i_reg_273;
        end if; 
    end process;

    indvar_flatten13_op_fu_542_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(indvar_flatten13_reg_285));

    indvar_flatten17_phi_fu_473_p4_assign_proc : process(indvar_flatten17_reg_469, exitcond_flatten22_reg_2116, ap_CS_fsm_pp2_stage0, indvar_flatten_next2_4_reg_2120, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond_flatten22_reg_2116) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0))) then 
            indvar_flatten17_phi_fu_473_p4 <= indvar_flatten_next2_4_reg_2120;
        else 
            indvar_flatten17_phi_fu_473_p4 <= indvar_flatten17_reg_469;
        end if; 
    end process;


    indvar_flatten18_phi_fu_495_p4_assign_proc : process(indvar_flatten18_reg_491, exitcond_flatten22_reg_2116, ap_CS_fsm_pp2_stage0, indvar_flatten_next2_3_reg_2149, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond_flatten22_reg_2116) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0))) then 
            indvar_flatten18_phi_fu_495_p4 <= indvar_flatten_next2_3_reg_2149;
        else 
            indvar_flatten18_phi_fu_495_p4 <= indvar_flatten18_reg_491;
        end if; 
    end process;

    indvar_flatten44_op_fu_841_p2 <= std_logic_vector(unsigned(indvar_flatten16_reg_367) + unsigned(ap_const_lv12_1));
    indvar_flatten66_op_fu_1638_p2 <= std_logic_vector(unsigned(indvar_flatten18_phi_fu_495_p4) + unsigned(ap_const_lv12_1));
    indvar_flatten_next1_fu_548_p3 <= 
        ap_const_lv6_1 when (exitcond_flatten18_fu_536_p2(0) = '1') else 
        indvar_flatten13_op_fu_542_p2;
    indvar_flatten_next2_1_fu_847_p3 <= 
        ap_const_lv12_1 when (exitcond_flatten21_fu_803_p2(0) = '1') else 
        indvar_flatten44_op_fu_841_p2;
    indvar_flatten_next2_2_fu_797_p2 <= std_logic_vector(unsigned(indvar_flatten15_reg_344) + unsigned(ap_const_lv15_1));
    indvar_flatten_next2_3_fu_1644_p3 <= 
        ap_const_lv12_1 when (exitcond_flatten23_fu_1584_p2(0) = '1') else 
        indvar_flatten66_op_fu_1638_p2;
    indvar_flatten_next2_4_fu_1572_p2 <= std_logic_vector(unsigned(indvar_flatten17_phi_fu_473_p4) + unsigned(ap_const_lv15_1));
    indvar_flatten_next2_fu_530_p2 <= std_logic_vector(unsigned(indvar_flatten14_reg_262) + unsigned(ap_const_lv10_1));
    indvar_flatten_next_fu_755_p3 <= 
        ap_const_lv4_1 when (tmp_618_reg_1803(0) = '1') else 
        indvar_flatten_op_reg_1815;
    indvar_flatten_op_fu_612_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(indvar_flatten_phi_fu_312_p4));

    indvar_flatten_phi_fu_312_p4_assign_proc : process(ap_block_pp0_stage0_flag00000000, indvar_flatten_reg_308, ap_reg_pp0_iter1_exitcond_flatten_reg_1757, ap_enable_reg_pp0_iter2, indvar_flatten_next_fu_755_p3)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_1757) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            indvar_flatten_phi_fu_312_p4 <= indvar_flatten_next_fu_755_p3;
        else 
            indvar_flatten_phi_fu_312_p4 <= indvar_flatten_reg_308;
        end if; 
    end process;

    input_V_address0 <= input_V_addr_reg_1987;

    input_V_ce0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_cast_mid2_cast_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_cast_mid2_fu_916_p3),11));
    j_1_cast_mid2_fu_916_p3 <= 
        j_7_fu_910_p2 when (exitcond79_mid_reg_1877(0) = '1') else 
        j_1_mid_fu_861_p3;
    j_1_mid_fu_861_p3 <= 
        ap_const_lv6_1 when (exitcond_flatten21_reg_1871(0) = '1') else 
        j_1_phi_fu_382_p4;

    j_1_phi_fu_382_p4_assign_proc : process(j_1_reg_378, ap_reg_pp1_iter1_exitcond_flatten20_reg_1862, j_1_cast_mid2_reg_1898, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond_flatten20_reg_1862) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            j_1_phi_fu_382_p4 <= j_1_cast_mid2_reg_1898;
        else 
            j_1_phi_fu_382_p4 <= j_1_reg_378;
        end if; 
    end process;

    j_2_cast6_mid2_cast_fu_1691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_cast6_mid2_fu_1685_p3),11));
    j_2_cast6_mid2_fu_1685_p3 <= 
        j_8_fu_1680_p2 when (exitcond_mid_reg_2138(0) = '1') else 
        j_2_mid_reg_2125;
    j_2_mid_fu_1590_p3 <= 
        ap_const_lv6_1 when (exitcond_flatten23_fu_1584_p2(0) = '1') else 
        j_2_phi_fu_506_p4;

    j_2_phi_fu_506_p4_assign_proc : process(j_2_reg_502, exitcond_flatten22_reg_2116, ap_CS_fsm_pp2_stage0, j_2_cast6_mid2_reg_2154, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond_flatten22_reg_2116) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0))) then 
            j_2_phi_fu_506_p4 <= j_2_cast6_mid2_reg_2154;
        else 
            j_2_phi_fu_506_p4 <= j_2_reg_502;
        end if; 
    end process;

    j_6_fu_593_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(j_mid_fu_562_p3));
    j_7_fu_910_p2 <= std_logic_vector(unsigned(j_1_mid_fu_861_p3) + unsigned(ap_const_lv6_1));
    j_8_fu_1680_p2 <= std_logic_vector(unsigned(j_2_mid_reg_2125) + unsigned(ap_const_lv6_1));
    j_cast_mid2_cast_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_cast_mid2_reg_1809),9));
    j_cast_mid2_fu_604_p3 <= 
        j_6_fu_593_p2 when (exitcond_flatten_mid_fu_587_p2(0) = '1') else 
        j_mid_fu_562_p3;
    j_mid_fu_562_p3 <= 
        ap_const_lv2_0 when (exitcond_flatten18_reg_1766(0) = '1') else 
        j_phi_fu_300_p4;

    j_phi_fu_300_p4_assign_proc : process(ap_block_pp0_stage0_flag00000000, j_reg_296, ap_reg_pp0_iter1_exitcond_flatten_reg_1757, j_cast_mid2_reg_1809, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_1757) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            j_phi_fu_300_p4 <= j_cast_mid2_reg_1809;
        else 
            j_phi_fu_300_p4 <= j_reg_296;
        end if; 
    end process;

    k_1_cast_cast_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp1_iter1_k_1_mid2_reg_1882),16));
    k_1_mid2_fu_833_p3 <= 
        ap_const_lv6_1 when (tmp_628_fu_827_p2(0) = '1') else 
        k_1_phi_fu_394_p4;

    k_1_phi_fu_394_p4_assign_proc : process(k_1_reg_390, exitcond_flatten20_reg_1862, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, k_4_fu_933_p2, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_0 = exitcond_flatten20_reg_1862) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            k_1_phi_fu_394_p4 <= k_4_fu_933_p2;
        else 
            k_1_phi_fu_394_p4 <= k_1_reg_390;
        end if; 
    end process;

    k_2_cast5_cast_fu_1730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_2_mid2_reg_2143),16));
    k_2_mid2_fu_1630_p3 <= 
        ap_const_lv6_1 when (tmp_635_fu_1624_p2(0) = '1') else 
        k_2_phi_fu_517_p4;

    k_2_phi_fu_517_p4_assign_proc : process(k_2_reg_513, exitcond_flatten22_reg_2116, ap_CS_fsm_pp2_stage0, k_6_reg_2165, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond_flatten22_reg_2116) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0))) then 
            k_2_phi_fu_517_p4 <= k_6_reg_2165;
        else 
            k_2_phi_fu_517_p4 <= k_2_reg_513;
        end if; 
    end process;

    k_4_fu_933_p2 <= std_logic_vector(unsigned(k_1_mid2_reg_1882) + unsigned(ap_const_lv6_1));
    k_5_fu_707_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(k_mid_fu_653_p3));
    k_6_fu_1701_p2 <= std_logic_vector(unsigned(k_2_mid2_reg_2143) + unsigned(ap_const_lv6_1));
    k_cast_mid2_cast_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_cast_mid2_fu_731_p3),32));
    k_cast_mid2_fu_731_p3 <= 
        k_5_fu_707_p2 when (exitcond82_mid1_fu_701_p2(0) = '1') else 
        k_mid_fu_653_p3;
    k_mid_fu_653_p3 <= 
        ap_const_lv2_0 when (tmp_618_reg_1803(0) = '1') else 
        k_phi_fu_324_p4;

    k_phi_fu_324_p4_assign_proc : process(ap_block_pp0_stage0_flag00000000, k_reg_320, ap_reg_pp0_iter2_exitcond_flatten_reg_1757, k_cast_mid2_reg_1825, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_1757) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then 
            k_phi_fu_324_p4 <= k_cast_mid2_reg_1825;
        else 
            k_phi_fu_324_p4 <= k_reg_320;
        end if; 
    end process;

    m_7_fu_1012_p2 <= std_logic_vector(unsigned(m_reg_425) + unsigned(ap_const_lv2_1));
    m_axi_weight_V_ARADDR <= weight_V_addr_reg_1851;
    m_axi_weight_V_ARBURST <= ap_const_lv2_0;
    m_axi_weight_V_ARCACHE <= ap_const_lv4_0;
    m_axi_weight_V_ARID <= ap_const_lv1_0;
    m_axi_weight_V_ARLEN <= ap_const_lv32_1;
    m_axi_weight_V_ARLOCK <= ap_const_lv2_0;
    m_axi_weight_V_ARPROT <= ap_const_lv3_0;
    m_axi_weight_V_ARQOS <= ap_const_lv4_0;
    m_axi_weight_V_ARREGION <= ap_const_lv4_0;
    m_axi_weight_V_ARSIZE <= ap_const_lv3_0;
    m_axi_weight_V_ARUSER <= ap_const_lv1_0;

    m_axi_weight_V_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_reg_pp0_iter3_exitcond_flatten_reg_1757, ap_reg_ioackin_m_axi_weight_V_ARREADY, ap_block_pp0_stage0_flag00001001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_1757) and (ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_weight_V_ARREADY))) then 
            m_axi_weight_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_weight_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weight_V_AWADDR <= ap_const_lv32_0;
    m_axi_weight_V_AWBURST <= ap_const_lv2_0;
    m_axi_weight_V_AWCACHE <= ap_const_lv4_0;
    m_axi_weight_V_AWID <= ap_const_lv1_0;
    m_axi_weight_V_AWLEN <= ap_const_lv32_0;
    m_axi_weight_V_AWLOCK <= ap_const_lv2_0;
    m_axi_weight_V_AWPROT <= ap_const_lv3_0;
    m_axi_weight_V_AWQOS <= ap_const_lv4_0;
    m_axi_weight_V_AWREGION <= ap_const_lv4_0;
    m_axi_weight_V_AWSIZE <= ap_const_lv3_0;
    m_axi_weight_V_AWUSER <= ap_const_lv1_0;
    m_axi_weight_V_AWVALID <= ap_const_logic_0;
    m_axi_weight_V_BREADY <= ap_const_logic_0;

    m_axi_weight_V_RREADY_assign_proc : process(ap_enable_reg_pp0_iter11, ap_reg_pp0_iter10_exitcond_flatten_reg_1757, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter11) and (ap_const_lv1_0 = ap_reg_pp0_iter10_exitcond_flatten_reg_1757) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            m_axi_weight_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_weight_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weight_V_WDATA <= ap_const_lv8_0;
    m_axi_weight_V_WID <= ap_const_lv1_0;
    m_axi_weight_V_WLAST <= ap_const_logic_0;
    m_axi_weight_V_WSTRB <= ap_const_lv1_0;
    m_axi_weight_V_WUSER <= ap_const_lv1_0;
    m_axi_weight_V_WVALID <= ap_const_logic_0;
    m_cast_fu_1002_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_425),32));
    n_7_fu_1054_p2 <= std_logic_vector(unsigned(n_reg_436) + unsigned(ap_const_lv2_1));
    n_cast_cast_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_436),11));
    newsignbit_fu_1409_p3 <= p_Val2_70_fu_1403_p2(7 downto 7);
    not_exitcond_flatten_1_fu_809_p2 <= (exitcond_flatten21_fu_803_p2 xor ap_const_lv1_1);
    not_exitcond_flatten_2_fu_1606_p2 <= (exitcond_flatten23_fu_1584_p2 xor ap_const_lv1_1);
    not_exitcond_flatten_4_fu_696_p2 <= (ap_reg_pp0_iter1_exitcond_flatten18_reg_1766 or exitcond_flatten_not_fu_691_p2);
    not_exitcond_flatten_fu_576_p2 <= (exitcond_flatten18_reg_1766 xor ap_const_lv1_1);

    output_V_address0_assign_proc : process(output_V_addr_2_reg_2000, ap_CS_fsm_state27, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp2_stage1, output_V_addr_1_reg_2170, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter1, ap_block_pp1_stage0_flag00000000, ap_CS_fsm_state31, ap_block_pp2_stage0_flag00000000, tmp_764_cast_fu_971_p1, tmp_773_cast_fu_1739_p1, ap_block_pp2_stage1_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_block_pp2_stage1_flag00000000 = ap_const_boolean_0))) then 
            output_V_address0 <= output_V_addr_1_reg_2170;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0))) then 
            output_V_address0 <= tmp_773_cast_fu_1739_p1(15 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            output_V_address0 <= output_V_addr_2_reg_2000;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            output_V_address0 <= tmp_764_cast_fu_971_p1(15 - 1 downto 0);
        else 
            output_V_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_ce0_assign_proc : process(ap_block_pp1_stage0_flag00011001, ap_CS_fsm_state27, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_flag00011001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_flag00011001, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter1, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2)) or (ap_const_logic_1 = ap_CS_fsm_state31) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_block_pp2_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1)))) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_d0_assign_proc : process(bias_V_q0, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter1, ap_block_pp1_stage0_flag00000000, ap_CS_fsm_state31, this_assign_1_fu_1557_p3, ap_block_pp2_stage1_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_block_pp2_stage1_flag00000000 = ap_const_boolean_0))) then 
            output_V_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            output_V_d0 <= this_assign_1_fu_1557_p3;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            output_V_d0 <= bias_V_q0;
        else 
            output_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    output_V_we0_assign_proc : process(ap_block_pp1_stage0_flag00011001, ap_reg_pp1_iter1_exitcond_flatten20_reg_1862, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_flag00011001, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter1, ap_CS_fsm_state31, tmp_2143_fu_1744_p3)
    begin
        if ((((ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond_flatten20_reg_1862)) or (ap_const_logic_1 = ap_CS_fsm_state31) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_block_pp2_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_1 = tmp_2143_fu_1744_p3)))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_1502_p2 <= (brmerge_i_i_fu_1492_p2 and tmp_159_fu_1497_p2);
    p_1_fu_749_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(p_mid2_fu_723_p3));
    p_38_i_i_fu_1481_p2 <= (carry_reg_2078 and Range1_all_ones_fu_1446_p2);
    p_41_i_i_fu_1469_p2 <= (signbit_reg_2059 and tmp_157_fu_1463_p2);
    p_Val2_187_mux_fu_1545_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_2111(0) = '1') else 
        p_Val2_70_reg_2066;
    p_Val2_67_fu_1344_p0 <= input_V_load_reg_2034;
    p_Val2_67_fu_1344_p1 <= weight_temp_V_load_reg_2029;
    p_Val2_67_fu_1344_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_67_fu_1344_p0) * signed(p_Val2_67_fu_1344_p1))), 16));
    p_Val2_68_fu_1369_p2 <= std_logic_vector(unsigned(p_Val2_67_reg_2039) + unsigned(tmp_152_cast_fu_1365_p1));
    p_Val2_69_fu_1382_p4 <= p_Val2_68_fu_1369_p2(13 downto 6);
    p_Val2_70_fu_1403_p2 <= std_logic_vector(unsigned(tmp_155_fu_1392_p1) + unsigned(p_Val2_69_fu_1382_p4));
    p_Val2_s_504_fu_1551_p3 <= 
        ap_const_lv8_80 when (underflow_reg_2106(0) = '1') else 
        p_Val2_70_reg_2066;
    p_cast_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid2_reg_1820),32));
    p_mid2_fu_723_p3 <= 
        ap_const_lv2_0 when (tmp_2139_fu_718_p2(0) = '1') else 
        p_phi_fu_336_p4;
    p_not_i_i_fu_1486_p2 <= (deleted_zeros_fu_1456_p3 xor ap_const_lv1_1);

    p_phi_fu_336_p4_assign_proc : process(ap_block_pp0_stage0_flag00000000, p_reg_332, ap_reg_pp0_iter2_exitcond_flatten_reg_1757, p_1_reg_1836, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_1757) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then 
            p_phi_fu_336_p4 <= p_1_reg_1836;
        else 
            p_phi_fu_336_p4 <= p_reg_332;
        end if; 
    end process;

    p_shl10_cast_fu_1104_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_640_fu_1096_p3),8));
    p_shl11_cast_fu_1316_p3 <= (tmp_2148_reg_2010 & ap_const_lv2_0);
    p_shl13_cast_fu_1250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_651_fu_1242_p3),8));
    p_shl14_cast_fu_1206_p3 <= (tmp_648_fu_1201_p2 & ap_const_lv5_0);
    p_shl15_cast_fu_1222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2145_fu_1214_p3),16));
    p_shl16_cast_fu_1179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_645_fu_1171_p3),11));
    p_shl17_cast_fu_1191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_646_fu_1183_p3),11));
    p_shl18_cast_fu_1706_p3 <= (tmp_636_reg_2159 & ap_const_lv5_0);
    p_shl19_cast_fu_1720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2142_fu_1713_p3),16));
        p_shl1_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2138_fu_673_p3),32));

    p_shl20_cast_fu_1659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_632_fu_1652_p3),11));
    p_shl21_cast_fu_1670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_633_fu_1663_p3),11));
    p_shl2_cast_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_621_p3),8));
    p_shl3_cast_fu_938_p3 <= (tmp_629_reg_1903 & ap_const_lv5_0);
    p_shl4_cast_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2141_fu_945_p3),16));
    p_shl5_cast_fu_888_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_625_fu_880_p3),11));
    p_shl6_cast_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_626_fu_892_p3),11));
    p_shl7_cast_fu_1119_p3 <= (tmp_642_fu_1114_p2 & ap_const_lv5_0);
    p_shl8_cast_fu_1135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2144_fu_1127_p3),13));
    p_shl9_cast_fu_1092_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_639_fu_1084_p3),8));
        p_shl_fu_1281_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2146_fu_1273_p3),32));

    sum_fu_780_p2 <= std_logic_vector(unsigned(tmp_624_fu_774_p2) + unsigned(conv1_weight_V3));
    this_assign_1_fu_1557_p3 <= 
        p_Val2_187_mux_fu_1545_p3 when (underflow_not_fu_1540_p2(0) = '1') else 
        p_Val2_s_504_fu_1551_p3;
        tmp1_cast_fu_1024_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_1018_p2),6));

    tmp1_fu_1018_p2 <= std_logic_vector(unsigned(m_reg_425) + unsigned(ap_const_lv2_3));
        tmp2_cast_fu_1066_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_1060_p2),6));

    tmp2_fu_1060_p2 <= std_logic_vector(unsigned(n_reg_436) + unsigned(ap_const_lv2_3));
    tmp3_demorgan_fu_1513_p2 <= (p_38_i_i_fu_1481_p2 or brmerge40_demorgan_i_fu_1508_p2);
    tmp3_fu_1519_p2 <= (tmp3_demorgan_fu_1513_p2 xor ap_const_lv1_1);
    tmp4_fu_1536_p2 <= (brmerge40_demorgan_i_reg_2101 or tmp_159_reg_2096);
    tmp_150_cast_cast_fu_1076_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_150_fu_1070_p2),13));
    tmp_150_fu_1070_p2 <= std_logic_vector(unsigned(w_reg_413) + unsigned(tmp2_cast_fu_1066_p1));
        tmp_152_cast_fu_1365_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_152_fu_1358_p3),16));

    tmp_152_fu_1358_p3 <= (p_Val2_s_reg_2044 & ap_const_lv6_0);
    tmp_155_fu_1392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2150_reg_2049),8));
    tmp_156_fu_1417_p2 <= (newsignbit_fu_1409_p3 xor ap_const_lv1_1);
    tmp_157_fu_1463_p2 <= (tmp_2153_fu_1439_p3 xor ap_const_lv1_1);
    tmp_159_fu_1497_p2 <= (signbit_reg_2059 xor ap_const_lv1_1);
    tmp_2138_fu_673_p3 <= (tmp_619_fu_663_p2 & ap_const_lv2_0);
    tmp_2139_fu_718_p2 <= (tmp_621_fu_713_p2 or ap_reg_pp0_iter1_exitcond_flatten18_reg_1766);
    tmp_2140_fu_761_p2 <= std_logic_vector(shift_left(unsigned(tmp_622_reg_1830),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_2141_fu_945_p3 <= (tmp_629_reg_1903 & ap_const_lv1_0);
    tmp_2142_fu_1713_p3 <= (tmp_636_reg_2159 & ap_const_lv1_0);
    tmp_2143_fu_1744_p3 <= output_V_q0(7 downto 7);
    tmp_2144_fu_1127_p3 <= (tmp_642_fu_1114_p2 & ap_const_lv1_0);
    tmp_2145_fu_1214_p3 <= (tmp_648_fu_1201_p2 & ap_const_lv1_0);
    tmp_2146_fu_1273_p3 <= (tmp_653_fu_1264_p2 & ap_const_lv2_0);
    tmp_2147_fu_1296_p1 <= tmp_655_fu_1291_p2(11 - 1 downto 0);
    tmp_2148_fu_1300_p1 <= tmp_655_fu_1291_p2(9 - 1 downto 0);
    tmp_2151_fu_1395_p3 <= p_Val2_68_fu_1369_p2(13 downto 13);
    tmp_2153_fu_1439_p3 <= p_Val2_68_reg_2054(14 downto 14);
    tmp_617_fu_632_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_628_p1) - unsigned(i_cast_mid2_cast_fu_618_p1));
    tmp_618_fu_599_p2 <= (exitcond_flatten_mid_fu_587_p2 or exitcond_flatten18_reg_1766);
    tmp_619_fu_663_p2 <= std_logic_vector(unsigned(j_cast_mid2_cast_fu_660_p1) + unsigned(tmp_744_cast_fu_638_p1));
    tmp_620_fu_685_p2 <= std_logic_vector(signed(p_shl1_fu_681_p1) - signed(tmp_746_cast_fu_669_p1));
    tmp_621_fu_713_p2 <= (exitcond82_mid1_fu_701_p2 or exitcond_flatten_mid_reg_1798);
    tmp_622_fu_743_p2 <= std_logic_vector(unsigned(k_cast_mid2_cast_fu_739_p1) + unsigned(tmp_620_fu_685_p2));
    tmp_623_fu_766_p2 <= std_logic_vector(unsigned(tmp_2140_fu_761_p2) - unsigned(tmp_622_reg_1830));
    tmp_624_fu_774_p2 <= std_logic_vector(unsigned(p_cast_fu_771_p1) + unsigned(tmp_623_fu_766_p2));
    tmp_625_fu_880_p3 <= (i_1_cast_mid2_v_fu_868_p3 & ap_const_lv5_0);
    tmp_626_fu_892_p3 <= (i_1_cast_mid2_v_fu_868_p3 & ap_const_lv1_0);
    tmp_627_fu_904_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_888_p1) + unsigned(p_shl6_cast_fu_900_p1));
    tmp_628_fu_827_p2 <= (exitcond79_mid_fu_821_p2 or exitcond_flatten21_fu_803_p2);
    tmp_629_fu_927_p2 <= std_logic_vector(unsigned(j_1_cast_mid2_cast_fu_923_p1) + unsigned(tmp_627_fu_904_p2));
    tmp_630_fu_956_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_938_p3) + unsigned(p_shl4_cast_fu_952_p1));
    tmp_631_fu_965_p2 <= std_logic_vector(unsigned(k_1_cast_cast_fu_962_p1) + unsigned(tmp_630_fu_956_p2));
    tmp_632_fu_1652_p3 <= (i_2_cast7_mid2_v_reg_2131 & ap_const_lv5_0);
    tmp_633_fu_1663_p3 <= (i_2_cast7_mid2_v_reg_2131 & ap_const_lv1_0);
    tmp_634_fu_1674_p2 <= std_logic_vector(unsigned(p_shl20_cast_fu_1659_p1) + unsigned(p_shl21_cast_fu_1670_p1));
    tmp_635_fu_1624_p2 <= (exitcond_mid_fu_1618_p2 or exitcond_flatten23_fu_1584_p2);
    tmp_636_fu_1695_p2 <= std_logic_vector(unsigned(j_2_cast6_mid2_cast_fu_1691_p1) + unsigned(tmp_634_fu_1674_p2));
    tmp_637_fu_1724_p2 <= std_logic_vector(unsigned(p_shl18_cast_fu_1706_p3) + unsigned(p_shl19_cast_fu_1720_p1));
    tmp_638_fu_1733_p2 <= std_logic_vector(unsigned(k_2_cast5_cast_fu_1730_p1) + unsigned(tmp_637_fu_1724_p2));
    tmp_639_fu_1084_p3 <= (ci_reg_447 & ap_const_lv5_0);
    tmp_640_fu_1096_p3 <= (ci_reg_447 & ap_const_lv1_0);
    tmp_641_fu_1108_p2 <= std_logic_vector(unsigned(p_shl9_cast_fu_1092_p1) + unsigned(p_shl10_cast_fu_1104_p1));
    tmp_642_fu_1114_p2 <= std_logic_vector(unsigned(tmp_cast_cast_reg_1954) + unsigned(tmp_641_fu_1108_p2));
    tmp_643_fu_1139_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_1119_p3) + unsigned(p_shl8_cast_fu_1135_p1));
    tmp_644_fu_1145_p2 <= std_logic_vector(unsigned(tmp_150_cast_cast_reg_1977) + unsigned(tmp_643_fu_1139_p2));
    tmp_645_fu_1171_p3 <= (co_reg_458 & ap_const_lv5_0);
    tmp_646_fu_1183_p3 <= (co_reg_458 & ap_const_lv1_0);
    tmp_647_fu_1195_p2 <= std_logic_vector(unsigned(p_shl17_cast_fu_1191_p1) + unsigned(p_shl16_cast_fu_1179_p1));
    tmp_648_fu_1201_p2 <= std_logic_vector(unsigned(tmp_647_fu_1195_p2) + unsigned(h_cast_cast_reg_1919));
    tmp_649_fu_1226_p2 <= std_logic_vector(unsigned(p_shl15_cast_fu_1222_p1) + unsigned(p_shl14_cast_fu_1206_p3));
    tmp_650_fu_1232_p2 <= std_logic_vector(unsigned(tmp_649_fu_1226_p2) + unsigned(w_cast_cast_reg_1928));
    tmp_651_fu_1242_p3 <= (co_reg_458 & ap_const_lv2_0);
    tmp_652_fu_1254_p2 <= std_logic_vector(unsigned(p_shl13_cast_fu_1250_p1) - unsigned(co_cast8_cast_fu_1167_p1));
    tmp_653_fu_1264_p2 <= std_logic_vector(signed(tmp_791_cast_fu_1260_p1) + signed(ci_cast9_cast_reg_1982));
    tmp_654_fu_1285_p2 <= std_logic_vector(signed(p_shl_fu_1281_p1) - signed(tmp_792_cast_fu_1269_p1));
    tmp_655_fu_1291_p2 <= std_logic_vector(unsigned(tmp_654_fu_1285_p2) + unsigned(m_cast_reg_1941));
    tmp_656_fu_1323_p2 <= std_logic_vector(unsigned(p_shl11_cast_fu_1316_p3) - unsigned(tmp_2147_reg_2005));
    tmp_657_fu_1328_p2 <= std_logic_vector(unsigned(tmp_656_fu_1323_p2) + unsigned(n_cast_cast_reg_1964));
        tmp_744_cast_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_617_fu_632_p2),9));

        tmp_746_cast_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_619_fu_663_p2),32));

    tmp_764_cast_fu_971_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_631_fu_965_p2),32));
    tmp_773_cast_fu_1739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_638_fu_1733_p2),32));
    tmp_781_cast_fu_1150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_644_fu_1145_p2),32));
    tmp_789_cast_fu_1237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_650_fu_1232_p2),32));
        tmp_791_cast_fu_1260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_652_fu_1254_p2),9));

        tmp_792_cast_fu_1269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_653_fu_1264_p2),32));

    tmp_798_cast_fu_1333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_657_fu_1328_p2),32));
    tmp_cast_cast_fu_1034_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_1028_p2),8));
    tmp_fu_621_p3 <= (i_cast_mid2_v_reg_1781 & ap_const_lv2_0);
    tmp_s_fu_1028_p2 <= std_logic_vector(unsigned(h_reg_401) + unsigned(tmp1_cast_fu_1024_p1));
    underflow_fu_1525_p2 <= (signbit_reg_2059 and tmp3_fu_1519_p2);
    underflow_not_fu_1540_p2 <= (tmp4_fu_1536_p2 or p_38_i_i_reg_2091);
    w_44_fu_1038_p2 <= std_logic_vector(unsigned(w_reg_413) + unsigned(ap_const_lv6_1));
    w_cast_cast_fu_986_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_413),16));

    weight_V_blk_n_AR_assign_proc : process(m_axi_weight_V_ARREADY, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_flag00000000, ap_reg_pp0_iter3_exitcond_flatten_reg_1757)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_1757))) then 
            weight_V_blk_n_AR <= m_axi_weight_V_ARREADY;
        else 
            weight_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    weight_V_blk_n_R_assign_proc : process(m_axi_weight_V_RVALID, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter11, ap_reg_pp0_iter10_exitcond_flatten_reg_1757)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11) and (ap_const_lv1_0 = ap_reg_pp0_iter10_exitcond_flatten_reg_1757))) then 
            weight_V_blk_n_R <= m_axi_weight_V_RVALID;
        else 
            weight_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    weight_temp_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_block_pp0_stage0_flag00000000, ap_reg_pp0_iter11_tmp_624_reg_1846, ap_CS_fsm_state26, ap_enable_reg_pp0_iter12, tmp_798_cast_fu_1333_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            weight_temp_V_address0 <= tmp_798_cast_fu_1333_p1(10 - 1 downto 0);
        elsif (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12))) then 
            weight_temp_V_address0 <= ap_reg_pp0_iter11_tmp_624_reg_1846(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            weight_temp_V_address0 <= ap_const_lv32_0(10 - 1 downto 0);
        else 
            weight_temp_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    weight_temp_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_state26, ap_enable_reg_pp0_iter12)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12)))) then 
            weight_temp_V_ce0 <= ap_const_logic_1;
        else 
            weight_temp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    weight_temp_V_d0_assign_proc : process(ap_CS_fsm_state1, ap_block_pp0_stage0_flag00000000, weight_V_addr_read_reg_1857, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12))) then 
            weight_temp_V_d0 <= weight_V_addr_read_reg_1857;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            weight_temp_V_d0 <= ap_const_lv8_0;
        else 
            weight_temp_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    weight_temp_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter11_exitcond_flatten_reg_1757, ap_enable_reg_pp0_iter12)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12) and (ap_const_lv1_0 = ap_reg_pp0_iter11_exitcond_flatten_reg_1757)))) then 
            weight_temp_V_we0 <= ap_const_logic_1;
        else 
            weight_temp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
