-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_32_strid_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    conv1_output_p_V_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv1_output_p_V_ce0 : OUT STD_LOGIC;
    conv1_output_p_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_32_strid_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_109_cast_fu_246_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_109_cast_reg_852 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_106_fu_278_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_106_reg_857 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_108_fu_296_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_108_reg_862 : STD_LOGIC_VECTOR (10 downto 0);
    signal co_4_fu_308_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_4_reg_870 : STD_LOGIC_VECTOR (4 downto 0);
    signal bias_V_addr_reg_875 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond4_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_111_fu_343_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_111_reg_880 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_355_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_888 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond5_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_addr_reg_893 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_s_fu_383_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_reg_901 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond6_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_4_fu_391_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_115_fu_412_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_115_reg_911 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m_4_fu_424_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_4_reg_919 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_117_fu_474_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_117_reg_924 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond7_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_4_fu_480_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_4_reg_929 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal n_4_fu_506_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_4_reg_942 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_load_reg_952 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal conv1_output_p_V_loa_reg_957 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_4_fu_547_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_4_reg_962 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_122_reg_967 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_29_fu_573_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_29_reg_972 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal signbit_reg_977 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_31_fu_607_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_31_reg_984 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_613_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_990 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_996 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_reg_1003 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_1009 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_48_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_reg_1014 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_1019 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_1024 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_1029 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_761_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal isneg_reg_1039 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal result_V_fu_791_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_1046 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_5_reg_1052 : STD_LOGIC_VECTOR (0 downto 0);
    signal co_reg_138 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_149 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_161 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_Val2_s_reg_173 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_185 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_28_reg_196 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_208 : STD_LOGIC_VECTOR (1 downto 0);
    signal co_cast_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_120_cast_fu_372_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_cast_fu_495_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_129_cast_fu_536_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_102_fu_228_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl4_cast_fu_236_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal co_cast_cast_fu_224_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_103_fu_240_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_104_fu_250_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_105_fu_262_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl3_cast_fu_274_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_258_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_107_fu_284_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_cast1_fu_270_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_292_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal h_cast9_cast_fu_314_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_109_fu_318_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_110_fu_331_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_323_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl6_cast_fu_339_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_cast8_cast_fu_363_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_112_fu_367_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal m_cast7_cast_fu_397_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_113_fu_401_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_114_fu_406_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_430_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_436_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_41_fu_440_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_73_cast_cast_fu_445_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_116_fu_449_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_118_fu_462_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl8_cast_fu_454_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl9_cast_fu_470_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal n_cast6_cast_fu_486_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_119_fu_490_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp3_fu_512_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_518_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_42_fu_522_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_77_cast_cast_fu_527_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_120_fu_531_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_4_fu_547_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_4_fu_547_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_fu_561_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_79_cast_fu_569_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_30_fu_586_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_44_fu_596_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_123_fu_599_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_125_fu_643_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_660_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i4_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_678_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_32_mux_fu_749_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_55_fu_755_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_fu_773_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_38_fu_769_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_26_fu_777_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_40_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_5_fu_810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_829_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_836_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond5_fu_349_p2 = ap_const_lv1_1))) then 
                co_reg_138 <= co_4_reg_870;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_138 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_302_p2 = ap_const_lv1_0))) then 
                h_reg_149 <= ap_const_lv5_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_377_p2 = ap_const_lv1_1))) then 
                h_reg_149 <= h_4_fu_391_p2;
            end if; 
        end if;
    end process;

    m_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_500_p2))) then 
                m_reg_185 <= m_4_reg_919;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_377_p2))) then 
                m_reg_185 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                n_reg_208 <= n_4_reg_942;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond7_fu_418_p2))) then 
                n_reg_208 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_28_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_Val2_28_reg_196 <= sum_V_fu_761_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond7_fu_418_p2))) then 
                p_Val2_28_reg_196 <= p_Val2_s_reg_173;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_500_p2))) then 
                p_Val2_s_reg_173 <= p_Val2_28_reg_196;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_377_p2))) then 
                p_Val2_s_reg_173 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    w_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond5_fu_349_p2))) then 
                w_reg_161 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                w_reg_161 <= w_4_reg_929;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_302_p2 = ap_const_lv1_0))) then
                bias_V_addr_reg_875 <= co_cast_fu_219_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                brmerge40_demorgan_i_reg_1019 <= brmerge40_demorgan_i_fu_712_p2;
                brmerge_i_i_i_reg_1029 <= brmerge_i_i_i_fu_734_p2;
                p_38_i_i_reg_1009 <= p_38_i_i_fu_685_p2;
                tmp_48_reg_1014 <= tmp_48_fu_701_p2;
                underflow_reg_1024 <= underflow_fu_729_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                carry_reg_996 <= carry_fu_627_p2;
                newsignbit_reg_990 <= p_Val2_31_fu_607_p2(7 downto 7);
                p_Val2_29_reg_972 <= p_Val2_29_fu_573_p2;
                p_Val2_31_reg_984 <= p_Val2_31_fu_607_p2;
                signbit_reg_977 <= p_Val2_29_fu_573_p2(15 downto 15);
                tmp_46_reg_1003 <= p_Val2_29_fu_573_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_4_reg_870 <= co_4_fu_308_p2;
                    tmp_106_reg_857(9 downto 1) <= tmp_106_fu_278_p2(9 downto 1);
                    tmp_108_reg_862(10 downto 1) <= tmp_108_fu_296_p2(10 downto 1);
                tmp_109_cast_reg_852 <= tmp_109_cast_fu_246_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                conv1_output_p_V_loa_reg_957 <= conv1_output_p_V_q0;
                weight_V_load_reg_952 <= weight_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                isneg_reg_1039 <= p_Val2_26_fu_777_p2(8 downto 8);
                newsignbit_5_reg_1052 <= result_V_fu_791_p2(7 downto 7);
                result_V_reg_1046 <= result_V_fu_791_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_4_reg_919 <= m_4_fu_424_p2;
                tmp_115_reg_911 <= tmp_115_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_4_reg_942 <= n_4_fu_506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_V_addr_reg_893 <= tmp_120_cast_fu_372_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_4_reg_962 <= p_Val2_4_fu_547_p2;
                tmp_122_reg_967 <= p_Val2_4_fu_547_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_111_reg_880(13 downto 1) <= tmp_111_fu_343_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond7_fu_418_p2))) then
                    tmp_117_reg_924(15 downto 1) <= tmp_117_fu_474_p2(15 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond5_fu_349_p2))) then
                    tmp_reg_888(5 downto 1) <= tmp_fu_355_p3(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_377_p2))) then
                    tmp_s_reg_901(5 downto 1) <= tmp_s_fu_383_p3(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond7_fu_418_p2))) then
                w_4_reg_929 <= w_4_fu_480_p2;
            end if;
        end if;
    end process;
    tmp_106_reg_857(0) <= '0';
    tmp_108_reg_862(0) <= '0';
    tmp_111_reg_880(0) <= '0';
    tmp_reg_888(0) <= '0';
    tmp_s_reg_901(0) <= '0';
    tmp_117_reg_924(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_302_p2, ap_CS_fsm_state3, exitcond5_fu_349_p2, ap_CS_fsm_state4, exitcond6_fu_377_p2, ap_CS_fsm_state5, exitcond7_fu_418_p2, ap_CS_fsm_state6, exitcond_fu_500_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_302_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond5_fu_349_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_377_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond7_fu_418_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_500_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_650_p2 <= "1" when (tmp_46_reg_1003 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_655_p2 <= "1" when (tmp_46_reg_1003 = ap_const_lv2_0) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_302_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_302_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_302_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_302_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_875;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_712_p2 <= (newsignbit_reg_990 and deleted_ones_fu_678_p3);
    brmerge9_fu_824_p2 <= (newsignbit_5_reg_1052 or isneg_not_fu_819_p2);
    brmerge_i_i4_fu_696_p2 <= (newsignbit_reg_990 or p_not_i_i_fu_690_p2);
    brmerge_i_i_fu_815_p2 <= (isneg_reg_1039 xor newsignbit_5_reg_1052);
    brmerge_i_i_i_fu_734_p2 <= (underflow_fu_729_p2 or overflow_fu_706_p2);
    carry_fu_627_p2 <= (tmp_123_fu_599_p3 and tmp_45_fu_621_p2);
    co_4_fu_308_p2 <= std_logic_vector(unsigned(co_reg_138) + unsigned(ap_const_lv5_1));
    co_cast_cast_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_138),8));
    co_cast_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_138),32));
    conv1_output_p_V_address0 <= tmp_129_cast_fu_536_p1(15 - 1 downto 0);

    conv1_output_p_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv1_output_p_V_ce0 <= ap_const_logic_1;
        else 
            conv1_output_p_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    deleted_ones_fu_678_p3 <= 
        p_41_i_i_fu_673_p2 when (carry_reg_996(0) = '1') else 
        Range1_all_ones_fu_650_p2;
    deleted_zeros_fu_660_p3 <= 
        Range1_all_ones_fu_650_p2 when (carry_reg_996(0) = '1') else 
        Range1_all_zeros_fu_655_p2;
    exitcond4_fu_302_p2 <= "1" when (co_reg_138 = ap_const_lv5_18) else "0";
    exitcond5_fu_349_p2 <= "1" when (h_reg_149 = ap_const_lv5_11) else "0";
    exitcond6_fu_377_p2 <= "1" when (w_reg_161 = ap_const_lv5_11) else "0";
    exitcond7_fu_418_p2 <= "1" when (m_reg_185 = ap_const_lv2_3) else "0";
    exitcond_fu_500_p2 <= "1" when (n_reg_208 = ap_const_lv2_3) else "0";
    h_4_fu_391_p2 <= std_logic_vector(unsigned(h_reg_149) + unsigned(ap_const_lv5_1));
    h_cast9_cast_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_149),10));
    isneg_not_fu_819_p2 <= (isneg_reg_1039 xor ap_const_lv1_1);
    m_4_fu_424_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(m_reg_185));
    m_cast7_cast_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_185),9));
    n_4_fu_506_p2 <= std_logic_vector(unsigned(n_reg_208) + unsigned(ap_const_lv2_1));
    n_cast6_cast_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_208),9));
    newsignbit_fu_613_p3 <= p_Val2_31_fu_607_p2(7 downto 7);
    output_V_address0 <= output_V_addr_reg_893;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= 
        result_V_mux_fu_829_p3 when (brmerge9_fu_824_p2(0) = '1') else 
        p_result_V_fu_836_p3;

    output_V_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_706_p2 <= (brmerge_i_i4_fu_696_p2 and tmp_48_fu_701_p2);
    p_38_i_i_fu_685_p2 <= (carry_reg_996 and Range1_all_ones_fu_650_p2);
    p_41_i_i_fu_673_p2 <= (signbit_reg_977 and tmp_47_fu_667_p2);
    p_Val2_26_fu_777_p2 <= std_logic_vector(signed(tmp_39_fu_773_p1) + signed(tmp_38_fu_769_p1));
    p_Val2_29_fu_573_p2 <= std_logic_vector(signed(tmp_79_cast_fu_569_p1) + signed(p_Val2_4_reg_962));
    p_Val2_30_fu_586_p4 <= p_Val2_29_fu_573_p2(13 downto 6);
    p_Val2_31_fu_607_p2 <= std_logic_vector(unsigned(p_Val2_30_fu_586_p4) + unsigned(tmp_44_fu_596_p1));
    p_Val2_32_mux_fu_749_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_1029(0) = '1') else 
        p_Val2_31_reg_984;
    p_Val2_4_fu_547_p0 <= weight_V_load_reg_952;
    p_Val2_4_fu_547_p1 <= conv1_output_p_V_loa_reg_957;
    p_Val2_4_fu_547_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_4_fu_547_p0) * signed(p_Val2_4_fu_547_p1))), 16));
    p_Val2_s_55_fu_755_p3 <= 
        ap_const_lv8_80 when (underflow_reg_1024(0) = '1') else 
        p_Val2_31_reg_984;
    p_not_i_i_fu_690_p2 <= (deleted_zeros_fu_660_p3 xor ap_const_lv1_1);
    p_result_V_fu_836_p3 <= 
        ap_const_lv8_80 when (underflow_5_fu_810_p2(0) = '1') else 
        result_V_reg_1046;
    p_shl2_cast_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_104_fu_250_p3),10));
    p_shl3_cast1_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_105_fu_262_p3),11));
    p_shl3_cast_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_105_fu_262_p3),10));
    p_shl4_cast_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_102_fu_228_p3),8));
    p_shl5_cast_fu_323_p3 <= (tmp_109_fu_318_p2 & ap_const_lv4_0);
    p_shl6_cast_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_110_fu_331_p3),14));
    p_shl8_cast_fu_454_p3 <= (tmp_116_fu_449_p2 & ap_const_lv5_0);
    p_shl9_cast_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_118_fu_462_p3),16));
    p_shl_cast_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_107_fu_284_p3),11));
    result_V_fu_791_p2 <= std_logic_vector(unsigned(bias_V_q0) + unsigned(p_Val2_s_reg_173));
    result_V_mux_fu_829_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_815_p2(0) = '1') else 
        result_V_reg_1046;
    sum_V_fu_761_p3 <= 
        p_Val2_32_mux_fu_749_p3 when (underflow_not_fu_744_p2(0) = '1') else 
        p_Val2_s_55_fu_755_p3;
        tmp2_cast_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_430_p2),6));

    tmp2_fu_430_p2 <= (m_reg_185 xor ap_const_lv2_2);
        tmp3_cast_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_512_p2),6));

    tmp3_fu_512_p2 <= (n_reg_208 xor ap_const_lv2_2);
    tmp4_demorgan_fu_717_p2 <= (p_38_i_i_fu_685_p2 or brmerge40_demorgan_i_fu_712_p2);
    tmp4_fu_723_p2 <= (tmp4_demorgan_fu_717_p2 xor ap_const_lv1_1);
    tmp5_fu_740_p2 <= (brmerge40_demorgan_i_reg_1019 or tmp_48_reg_1014);
    tmp_102_fu_228_p3 <= (co_reg_138 & ap_const_lv2_0);
    tmp_103_fu_240_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_236_p1) - unsigned(co_cast_cast_fu_224_p1));
    tmp_104_fu_250_p3 <= (co_reg_138 & ap_const_lv4_0);
    tmp_105_fu_262_p3 <= (co_reg_138 & ap_const_lv1_0);
    tmp_106_fu_278_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_274_p1) + unsigned(p_shl2_cast_fu_258_p1));
    tmp_107_fu_284_p3 <= (co_reg_138 & ap_const_lv5_0);
    tmp_108_fu_296_p2 <= std_logic_vector(unsigned(p_shl3_cast1_fu_270_p1) + unsigned(p_shl_cast_fu_292_p1));
        tmp_109_cast_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_103_fu_240_p2),9));

    tmp_109_fu_318_p2 <= std_logic_vector(unsigned(h_cast9_cast_fu_314_p1) + unsigned(tmp_106_reg_857));
    tmp_110_fu_331_p3 <= (tmp_109_fu_318_p2 & ap_const_lv1_0);
    tmp_111_fu_343_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_323_p3) + unsigned(p_shl6_cast_fu_339_p1));
    tmp_112_fu_367_p2 <= std_logic_vector(unsigned(tmp_111_reg_880) + unsigned(w_cast8_cast_fu_363_p1));
    tmp_113_fu_401_p2 <= std_logic_vector(unsigned(m_cast7_cast_fu_397_p1) + unsigned(tmp_109_cast_reg_852));
    tmp_114_fu_406_p2 <= std_logic_vector(shift_left(unsigned(tmp_113_fu_401_p2),to_integer(unsigned('0' & ap_const_lv9_2(9-1 downto 0)))));
    tmp_115_fu_412_p2 <= std_logic_vector(unsigned(tmp_114_fu_406_p2) - unsigned(tmp_113_fu_401_p2));
    tmp_116_fu_449_p2 <= std_logic_vector(unsigned(tmp_73_cast_cast_fu_445_p1) + unsigned(tmp_108_reg_862));
    tmp_117_fu_474_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_454_p3) + unsigned(p_shl9_cast_fu_470_p1));
    tmp_118_fu_462_p3 <= (tmp_116_fu_449_p2 & ap_const_lv1_0);
    tmp_119_fu_490_p2 <= std_logic_vector(unsigned(tmp_115_reg_911) + unsigned(n_cast6_cast_fu_486_p1));
    tmp_120_cast_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_fu_367_p2),32));
    tmp_120_fu_531_p2 <= std_logic_vector(unsigned(tmp_77_cast_cast_fu_527_p1) + unsigned(tmp_117_reg_924));
    tmp_123_fu_599_p3 <= p_Val2_29_fu_573_p2(13 downto 13);
    tmp_125_fu_643_p3 <= p_Val2_29_reg_972(14 downto 14);
    tmp_128_cast_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_119_fu_490_p2),32));
    tmp_129_cast_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_120_fu_531_p2),32));
        tmp_38_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_173),9));

        tmp_39_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    tmp_40_fu_805_p2 <= (newsignbit_5_reg_1052 xor ap_const_lv1_1);
    tmp_41_fu_440_p2 <= std_logic_vector(signed(tmp2_cast_fu_436_p1) + signed(tmp_reg_888));
    tmp_42_fu_522_p2 <= std_logic_vector(signed(tmp3_cast_fu_518_p1) + signed(tmp_s_reg_901));
    tmp_43_fu_561_p3 <= (p_Val2_28_reg_196 & ap_const_lv6_0);
    tmp_44_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_122_reg_967),8));
    tmp_45_fu_621_p2 <= (newsignbit_fu_613_p3 xor ap_const_lv1_1);
    tmp_47_fu_667_p2 <= (tmp_125_fu_643_p3 xor ap_const_lv1_1);
    tmp_48_fu_701_p2 <= (signbit_reg_977 xor ap_const_lv1_1);
    tmp_73_cast_cast_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_440_p2),11));
    tmp_77_cast_cast_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_522_p2),16));
        tmp_79_cast_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_43_fu_561_p3),16));

    tmp_fu_355_p3 <= (h_reg_149 & ap_const_lv1_0);
    tmp_s_fu_383_p3 <= (w_reg_161 & ap_const_lv1_0);
    underflow_5_fu_810_p2 <= (isneg_reg_1039 and tmp_40_fu_805_p2);
    underflow_fu_729_p2 <= (signbit_reg_977 and tmp4_fu_723_p2);
    underflow_not_fu_744_p2 <= (tmp5_fu_740_p2 or p_38_i_i_reg_1009);
    w_4_fu_480_p2 <= std_logic_vector(unsigned(w_reg_161) + unsigned(ap_const_lv5_1));
    w_cast8_cast_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_161),14));
    weight_V_address0 <= tmp_128_cast_fu_495_p1(8 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
