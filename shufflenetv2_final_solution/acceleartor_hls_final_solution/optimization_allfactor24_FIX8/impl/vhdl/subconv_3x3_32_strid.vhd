-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_32_strid is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_23_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_23_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_23_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_22_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_22_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_22_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_11_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_11_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_6_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_6_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_5_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_4_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_4_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_3_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_2_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_1_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_21_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_21_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_21_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_20_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_20_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_20_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_19_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_19_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_19_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_18_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_18_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_18_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_17_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_17_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_17_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_16_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_16_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_16_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_15_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_15_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_15_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_14_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_14_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_14_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_13_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_13_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_13_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_12_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_12_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_10_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_10_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_9_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_9_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_8_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_8_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ShuffleConvs_0_Downs_7_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    ShuffleConvs_0_Downs_7_ce0 : OUT STD_LOGIC;
    ShuffleConvs_0_Downs_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_32_strid is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_131_cast_fu_569_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_131_cast_reg_1225 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_125_fu_597_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_125_reg_1230 : STD_LOGIC_VECTOR (9 downto 0);
    signal co_4_fu_609_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_4_reg_1238 : STD_LOGIC_VECTOR (4 downto 0);
    signal bias_V_addr_reg_1243 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond4_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_128_fu_644_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_128_reg_1248 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_656_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_1256 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond5_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_addr_reg_1261 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_s_fu_684_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_reg_1269 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond6_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_4_fu_692_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_132_fu_713_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_132_reg_1279 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m_4_fu_725_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_4_reg_1287 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_135_fu_770_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_135_reg_1292 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond7_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_4_fu_776_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_4_reg_1297 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal n_4_fu_802_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_4_reg_1310 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_V_load_reg_1435 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_38_fu_860_p26 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_reg_1440 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_3_fu_920_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_3_reg_1445 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_139_reg_1450 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_36_fu_946_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_36_reg_1455 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal signbit_reg_1460 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_38_fu_980_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_38_reg_1467 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_986_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_1473 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_1000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_1479 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_reg_1486 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_1058_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_1492 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_50_fu_1074_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_reg_1497 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_1085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_1502 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_1102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_1507 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_1107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_1512 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_1134_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal isneg_reg_1522 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal result_V_fu_1164_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_1529 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_6_reg_1535 : STD_LOGIC_VECTOR (0 downto 0);
    signal co_reg_460 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_472 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_484 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_Val2_s_reg_496 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_508 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_35_reg_519 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_531 : STD_LOGIC_VECTOR (1 downto 0);
    signal co_cast_fu_542_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_139_cast_fu_673_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_146_cast_fu_791_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_147_cast_fu_832_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_121_fu_551_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_fu_559_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal co_cast_cast_fu_547_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_122_fu_563_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_123_fu_573_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_124_fu_585_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_593_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_581_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_cast9_cast_fu_615_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_126_fu_619_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_127_fu_632_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_624_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl4_cast_fu_640_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal w_cast8_cast_fu_664_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_129_fu_668_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal m_cast7_cast_fu_698_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_130_fu_702_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_131_fu_707_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_731_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_737_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_42_fu_741_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_133_fu_746_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_134_fu_758_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl7_cast_fu_766_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl6_cast_fu_754_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal n_cast6_cast_fu_782_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_136_fu_786_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp3_fu_808_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_814_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_43_fu_818_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_60_cast_cast_fu_823_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_137_fu_827_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_3_fu_920_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_3_fu_920_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_44_fu_934_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_62_cast_fu_942_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_37_fu_959_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_46_fu_969_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_140_fu_972_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_994_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_1028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_142_fu_1016_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_1040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_1046_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_1033_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_1063_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i4_fu_1069_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_1051_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_1096_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_1079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_1113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_1117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_32_mux_fu_1122_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_60_fu_1128_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_40_fu_1146_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_39_fu_1142_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_33_fu_1150_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_41_fu_1178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_1192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_1188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_6_fu_1183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_1197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_1202_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_1209_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component ShuffleNetV2_mux_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mux_dEe_x_U61 : component ShuffleNetV2_mux_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 5,
        dout_WIDTH => 8)
    port map (
        din1 => ShuffleConvs_0_Downs_23_q0,
        din2 => ShuffleConvs_0_Downs_22_q0,
        din3 => ShuffleConvs_0_Downs_11_q0,
        din4 => ShuffleConvs_0_Downs_6_q0,
        din5 => ShuffleConvs_0_Downs_5_q0,
        din6 => ShuffleConvs_0_Downs_4_q0,
        din7 => ShuffleConvs_0_Downs_3_q0,
        din8 => ShuffleConvs_0_Downs_2_q0,
        din9 => ShuffleConvs_0_Downs_1_q0,
        din10 => ShuffleConvs_0_Downs_q0,
        din11 => ShuffleConvs_0_Downs_21_q0,
        din12 => ShuffleConvs_0_Downs_20_q0,
        din13 => ShuffleConvs_0_Downs_19_q0,
        din14 => ShuffleConvs_0_Downs_18_q0,
        din15 => ShuffleConvs_0_Downs_17_q0,
        din16 => ShuffleConvs_0_Downs_16_q0,
        din17 => ShuffleConvs_0_Downs_15_q0,
        din18 => ShuffleConvs_0_Downs_14_q0,
        din19 => ShuffleConvs_0_Downs_13_q0,
        din20 => ShuffleConvs_0_Downs_12_q0,
        din21 => ShuffleConvs_0_Downs_10_q0,
        din22 => ShuffleConvs_0_Downs_9_q0,
        din23 => ShuffleConvs_0_Downs_8_q0,
        din24 => ShuffleConvs_0_Downs_7_q0,
        din25 => co_reg_460,
        dout => tmp_38_fu_860_p26);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_460_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond5_fu_650_p2 = ap_const_lv1_1))) then 
                co_reg_460 <= co_4_reg_1238;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_460 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_reg_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_603_p2 = ap_const_lv1_0))) then 
                h_reg_472 <= ap_const_lv5_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_678_p2 = ap_const_lv1_1))) then 
                h_reg_472 <= h_4_fu_692_p2;
            end if; 
        end if;
    end process;

    m_reg_508_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_796_p2))) then 
                m_reg_508 <= m_4_reg_1287;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_678_p2))) then 
                m_reg_508 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    n_reg_531_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                n_reg_531 <= n_4_reg_1310;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond7_fu_719_p2))) then 
                n_reg_531 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_35_reg_519_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                p_Val2_35_reg_519 <= sum_V_fu_1134_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond7_fu_719_p2))) then 
                p_Val2_35_reg_519 <= p_Val2_s_reg_496;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_496_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_796_p2))) then 
                p_Val2_s_reg_496 <= p_Val2_35_reg_519;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_678_p2))) then 
                p_Val2_s_reg_496 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    w_reg_484_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond5_fu_650_p2))) then 
                w_reg_484 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                w_reg_484 <= w_4_reg_1297;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_603_p2 = ap_const_lv1_0))) then
                bias_V_addr_reg_1243 <= co_cast_fu_542_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                brmerge40_demorgan_i_reg_1502 <= brmerge40_demorgan_i_fu_1085_p2;
                brmerge_i_i_i_reg_1512 <= brmerge_i_i_i_fu_1107_p2;
                p_38_i_i_reg_1492 <= p_38_i_i_fu_1058_p2;
                tmp_50_reg_1497 <= tmp_50_fu_1074_p2;
                underflow_reg_1507 <= underflow_fu_1102_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                carry_reg_1479 <= carry_fu_1000_p2;
                newsignbit_reg_1473 <= p_Val2_38_fu_980_p2(7 downto 7);
                p_Val2_36_reg_1455 <= p_Val2_36_fu_946_p2;
                p_Val2_38_reg_1467 <= p_Val2_38_fu_980_p2;
                signbit_reg_1460 <= p_Val2_36_fu_946_p2(15 downto 15);
                tmp_49_reg_1486 <= p_Val2_36_fu_946_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_4_reg_1238 <= co_4_fu_609_p2;
                    tmp_125_reg_1230(9 downto 1) <= tmp_125_fu_597_p2(9 downto 1);
                tmp_131_cast_reg_1225 <= tmp_131_cast_fu_569_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                isneg_reg_1522 <= p_Val2_33_fu_1150_p2(8 downto 8);
                newsignbit_6_reg_1535 <= result_V_fu_1164_p2(7 downto 7);
                result_V_reg_1529 <= result_V_fu_1164_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_4_reg_1287 <= m_4_fu_725_p2;
                tmp_132_reg_1279 <= tmp_132_fu_713_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                n_4_reg_1310 <= n_4_fu_802_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                output_V_addr_reg_1261 <= tmp_139_cast_fu_673_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_3_reg_1445 <= p_Val2_3_fu_920_p2;
                tmp_139_reg_1450 <= p_Val2_3_fu_920_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_128_reg_1248(13 downto 1) <= tmp_128_fu_644_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond7_fu_719_p2))) then
                    tmp_135_reg_1292(11 downto 1) <= tmp_135_fu_770_p2(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_38_reg_1440 <= tmp_38_fu_860_p26;
                weight_V_load_reg_1435 <= weight_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond5_fu_650_p2))) then
                    tmp_reg_1256(5 downto 1) <= tmp_fu_656_p3(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond6_fu_678_p2))) then
                    tmp_s_reg_1269(5 downto 1) <= tmp_s_fu_684_p3(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond7_fu_719_p2))) then
                w_4_reg_1297 <= w_4_fu_776_p2;
            end if;
        end if;
    end process;
    tmp_125_reg_1230(0) <= '0';
    tmp_128_reg_1248(0) <= '0';
    tmp_reg_1256(0) <= '0';
    tmp_s_reg_1269(0) <= '0';
    tmp_135_reg_1292(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_603_p2, ap_CS_fsm_state3, exitcond5_fu_650_p2, ap_CS_fsm_state4, exitcond6_fu_678_p2, ap_CS_fsm_state5, exitcond7_fu_719_p2, ap_CS_fsm_state6, exitcond_fu_796_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_603_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond5_fu_650_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_678_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond7_fu_719_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_fu_796_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_1023_p2 <= "1" when (tmp_49_reg_1486 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_1028_p2 <= "1" when (tmp_49_reg_1486 = ap_const_lv2_0) else "0";
    ShuffleConvs_0_Downs_10_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_10_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_10_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_11_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_11_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_11_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_12_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_12_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_12_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_13_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_13_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_13_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_14_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_14_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_14_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_15_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_15_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_15_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_16_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_16_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_16_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_17_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_17_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_17_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_18_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_18_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_18_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_19_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_19_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_19_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_1_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_1_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_1_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_20_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_20_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_20_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_21_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_21_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_21_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_22_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_22_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_22_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_23_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_23_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_23_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_2_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_2_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_2_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_3_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_3_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_3_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_4_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_4_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_5_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_5_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_5_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_6_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_6_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_6_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_7_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_7_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_7_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_8_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_8_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_8_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_9_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_9_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_9_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ShuffleConvs_0_Downs_address0 <= tmp_147_cast_fu_832_p1(11 - 1 downto 0);

    ShuffleConvs_0_Downs_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ShuffleConvs_0_Downs_ce0 <= ap_const_logic_1;
        else 
            ShuffleConvs_0_Downs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_603_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_603_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_603_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_603_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_1243;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_1085_p2 <= (newsignbit_reg_1473 and deleted_ones_fu_1051_p3);
    brmerge9_fu_1197_p2 <= (newsignbit_6_reg_1535 or isneg_not_fu_1192_p2);
    brmerge_i_i4_fu_1069_p2 <= (newsignbit_reg_1473 or p_not_i_i_fu_1063_p2);
    brmerge_i_i_fu_1188_p2 <= (isneg_reg_1522 xor newsignbit_6_reg_1535);
    brmerge_i_i_i_fu_1107_p2 <= (underflow_fu_1102_p2 or overflow_fu_1079_p2);
    carry_fu_1000_p2 <= (tmp_140_fu_972_p3 and tmp_47_fu_994_p2);
    co_4_fu_609_p2 <= std_logic_vector(unsigned(co_reg_460) + unsigned(ap_const_lv5_1));
    co_cast_cast_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_460),8));
    co_cast_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_460),32));
    deleted_ones_fu_1051_p3 <= 
        p_41_i_i_fu_1046_p2 when (carry_reg_1479(0) = '1') else 
        Range1_all_ones_fu_1023_p2;
    deleted_zeros_fu_1033_p3 <= 
        Range1_all_ones_fu_1023_p2 when (carry_reg_1479(0) = '1') else 
        Range1_all_zeros_fu_1028_p2;
    exitcond4_fu_603_p2 <= "1" when (co_reg_460 = ap_const_lv5_18) else "0";
    exitcond5_fu_650_p2 <= "1" when (h_reg_472 = ap_const_lv5_11) else "0";
    exitcond6_fu_678_p2 <= "1" when (w_reg_484 = ap_const_lv5_11) else "0";
    exitcond7_fu_719_p2 <= "1" when (m_reg_508 = ap_const_lv2_3) else "0";
    exitcond_fu_796_p2 <= "1" when (n_reg_531 = ap_const_lv2_3) else "0";
    h_4_fu_692_p2 <= std_logic_vector(unsigned(h_reg_472) + unsigned(ap_const_lv5_1));
    h_cast9_cast_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_472),10));
    isneg_not_fu_1192_p2 <= (isneg_reg_1522 xor ap_const_lv1_1);
    m_4_fu_725_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(m_reg_508));
    m_cast7_cast_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_508),9));
    n_4_fu_802_p2 <= std_logic_vector(unsigned(n_reg_531) + unsigned(ap_const_lv2_1));
    n_cast6_cast_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_531),9));
    newsignbit_fu_986_p3 <= p_Val2_38_fu_980_p2(7 downto 7);
    output_V_address0 <= output_V_addr_reg_1261;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= 
        result_V_mux_fu_1202_p3 when (brmerge9_fu_1197_p2(0) = '1') else 
        p_result_V_fu_1209_p3;

    output_V_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_1079_p2 <= (brmerge_i_i4_fu_1069_p2 and tmp_50_fu_1074_p2);
    p_38_i_i_fu_1058_p2 <= (carry_reg_1479 and Range1_all_ones_fu_1023_p2);
    p_41_i_i_fu_1046_p2 <= (signbit_reg_1460 and tmp_48_fu_1040_p2);
    p_Val2_32_mux_fu_1122_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_1512(0) = '1') else 
        p_Val2_38_reg_1467;
    p_Val2_33_fu_1150_p2 <= std_logic_vector(signed(tmp_40_fu_1146_p1) + signed(tmp_39_fu_1142_p1));
    p_Val2_36_fu_946_p2 <= std_logic_vector(signed(tmp_62_cast_fu_942_p1) + signed(p_Val2_3_reg_1445));
    p_Val2_37_fu_959_p4 <= p_Val2_36_fu_946_p2(13 downto 6);
    p_Val2_38_fu_980_p2 <= std_logic_vector(unsigned(p_Val2_37_fu_959_p4) + unsigned(tmp_46_fu_969_p1));
    p_Val2_3_fu_920_p0 <= weight_V_load_reg_1435;
    p_Val2_3_fu_920_p1 <= tmp_38_reg_1440;
    p_Val2_3_fu_920_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_3_fu_920_p0) * signed(p_Val2_3_fu_920_p1))), 16));
    p_Val2_s_60_fu_1128_p3 <= 
        ap_const_lv8_80 when (underflow_reg_1507(0) = '1') else 
        p_Val2_38_reg_1467;
    p_not_i_i_fu_1063_p2 <= (deleted_zeros_fu_1033_p3 xor ap_const_lv1_1);
    p_result_V_fu_1209_p3 <= 
        ap_const_lv8_80 when (underflow_6_fu_1183_p2(0) = '1') else 
        result_V_reg_1529;
    p_shl1_cast_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_124_fu_585_p3),10));
    p_shl2_cast_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_121_fu_551_p3),8));
    p_shl3_cast_fu_624_p3 <= (tmp_126_fu_619_p2 & ap_const_lv4_0);
    p_shl4_cast_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_127_fu_632_p3),14));
    p_shl6_cast_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_133_fu_746_p3),12));
    p_shl7_cast_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_134_fu_758_p3),12));
    p_shl_cast_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_123_fu_573_p3),10));
    result_V_fu_1164_p2 <= std_logic_vector(unsigned(bias_V_q0) + unsigned(p_Val2_s_reg_496));
    result_V_mux_fu_1202_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_1188_p2(0) = '1') else 
        result_V_reg_1529;
    sum_V_fu_1134_p3 <= 
        p_Val2_32_mux_fu_1122_p3 when (underflow_not_fu_1117_p2(0) = '1') else 
        p_Val2_s_60_fu_1128_p3;
        tmp2_cast_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_731_p2),6));

    tmp2_fu_731_p2 <= (m_reg_508 xor ap_const_lv2_2);
        tmp3_cast_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_808_p2),6));

    tmp3_fu_808_p2 <= (n_reg_531 xor ap_const_lv2_2);
    tmp4_demorgan_fu_1090_p2 <= (p_38_i_i_fu_1058_p2 or brmerge40_demorgan_i_fu_1085_p2);
    tmp4_fu_1096_p2 <= (tmp4_demorgan_fu_1090_p2 xor ap_const_lv1_1);
    tmp5_fu_1113_p2 <= (brmerge40_demorgan_i_reg_1502 or tmp_50_reg_1497);
    tmp_121_fu_551_p3 <= (co_reg_460 & ap_const_lv2_0);
    tmp_122_fu_563_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_559_p1) - unsigned(co_cast_cast_fu_547_p1));
    tmp_123_fu_573_p3 <= (co_reg_460 & ap_const_lv4_0);
    tmp_124_fu_585_p3 <= (co_reg_460 & ap_const_lv1_0);
    tmp_125_fu_597_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_593_p1) + unsigned(p_shl_cast_fu_581_p1));
    tmp_126_fu_619_p2 <= std_logic_vector(unsigned(h_cast9_cast_fu_615_p1) + unsigned(tmp_125_reg_1230));
    tmp_127_fu_632_p3 <= (tmp_126_fu_619_p2 & ap_const_lv1_0);
    tmp_128_fu_644_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_624_p3) + unsigned(p_shl4_cast_fu_640_p1));
    tmp_129_fu_668_p2 <= std_logic_vector(unsigned(tmp_128_reg_1248) + unsigned(w_cast8_cast_fu_664_p1));
    tmp_130_fu_702_p2 <= std_logic_vector(unsigned(m_cast7_cast_fu_698_p1) + unsigned(tmp_131_cast_reg_1225));
        tmp_131_cast_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_122_fu_563_p2),9));

    tmp_131_fu_707_p2 <= std_logic_vector(shift_left(unsigned(tmp_130_fu_702_p2),to_integer(unsigned('0' & ap_const_lv9_2(9-1 downto 0)))));
    tmp_132_fu_713_p2 <= std_logic_vector(unsigned(tmp_131_fu_707_p2) - unsigned(tmp_130_fu_702_p2));
    tmp_133_fu_746_p3 <= (tmp_42_fu_741_p2 & ap_const_lv5_0);
    tmp_134_fu_758_p3 <= (tmp_42_fu_741_p2 & ap_const_lv1_0);
    tmp_135_fu_770_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_766_p1) + unsigned(p_shl6_cast_fu_754_p1));
    tmp_136_fu_786_p2 <= std_logic_vector(unsigned(tmp_132_reg_1279) + unsigned(n_cast6_cast_fu_782_p1));
    tmp_137_fu_827_p2 <= std_logic_vector(unsigned(tmp_60_cast_cast_fu_823_p1) + unsigned(tmp_135_reg_1292));
    tmp_139_cast_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_129_fu_668_p2),32));
    tmp_140_fu_972_p3 <= p_Val2_36_fu_946_p2(13 downto 13);
    tmp_142_fu_1016_p3 <= p_Val2_36_reg_1455(14 downto 14);
    tmp_146_cast_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_136_fu_786_p2),32));
    tmp_147_cast_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_137_fu_827_p2),32));
        tmp_39_fu_1142_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_496),9));

        tmp_40_fu_1146_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    tmp_41_fu_1178_p2 <= (newsignbit_6_reg_1535 xor ap_const_lv1_1);
    tmp_42_fu_741_p2 <= std_logic_vector(unsigned(tmp_reg_1256) + unsigned(tmp2_cast_fu_737_p1));
    tmp_43_fu_818_p2 <= std_logic_vector(signed(tmp3_cast_fu_814_p1) + signed(tmp_s_reg_1269));
    tmp_44_fu_934_p3 <= (p_Val2_35_reg_519 & ap_const_lv6_0);
    tmp_46_fu_969_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_139_reg_1450),8));
    tmp_47_fu_994_p2 <= (newsignbit_fu_986_p3 xor ap_const_lv1_1);
    tmp_48_fu_1040_p2 <= (tmp_142_fu_1016_p3 xor ap_const_lv1_1);
    tmp_50_fu_1074_p2 <= (signbit_reg_1460 xor ap_const_lv1_1);
    tmp_60_cast_cast_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_fu_818_p2),12));
        tmp_62_cast_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_44_fu_934_p3),16));

    tmp_fu_656_p3 <= (h_reg_472 & ap_const_lv1_0);
    tmp_s_fu_684_p3 <= (w_reg_484 & ap_const_lv1_0);
    underflow_6_fu_1183_p2 <= (isneg_reg_1522 and tmp_41_fu_1178_p2);
    underflow_fu_1102_p2 <= (signbit_reg_1460 and tmp4_fu_1096_p2);
    underflow_not_fu_1117_p2 <= (tmp5_fu_1113_p2 or p_38_i_i_reg_1492);
    w_4_fu_776_p2 <= std_logic_vector(unsigned(w_reg_484) + unsigned(ap_const_lv5_1));
    w_cast8_cast_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_484),14));
    weight_V_address0 <= tmp_146_cast_fu_791_p1(8 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
