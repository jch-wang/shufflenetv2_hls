-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MUL_DP is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    a_V : IN STD_LOGIC_VECTOR (7 downto 0);
    b_V : IN STD_LOGIC_VECTOR (7 downto 0);
    w_V : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of MUL_DP is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";

    signal w_V_read_reg_127 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal r_V_fu_68_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal r_V_reg_132 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_2567_reg_147 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_152 : STD_LOGIC_VECTOR (15 downto 0);
    signal loc_V_1_fu_104_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal loc_V_1_reg_157 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal p_Result_2_fu_52_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal rhs_V_fu_64_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal lhs_V_fu_60_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_80_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_464_fu_108_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal loc_V_fu_111_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_80_ce : STD_LOGIC;

    component ShuffleNetV2_mul_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;



begin
    ShuffleNetV2_mul_cud_U6 : component ShuffleNetV2_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 26,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => w_V_read_reg_127,
        din1 => r_V_reg_132,
        ce => grp_fu_80_ce,
        dout => grp_fu_80_p2);




    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_ce = ap_const_logic_1))) then
                loc_V_1_reg_157 <= loc_V_1_fu_104_p1;
                p_Result_s_reg_152 <= grp_fu_80_p2(32 downto 17);
                r_V_reg_132 <= r_V_fu_68_p2;
                tmp_2567_reg_147 <= grp_fu_80_p2(15 downto 15);
                w_V_read_reg_127 <= w_V;
            end if;
        end if;
    end process;
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_return_0 <= loc_V_fu_111_p2;
    ap_return_1 <= loc_V_1_reg_157;

    grp_fu_80_ce_assign_proc : process(ap_ce, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            grp_fu_80_ce <= ap_const_logic_1;
        else 
            grp_fu_80_ce <= ap_const_logic_0;
        end if; 
    end process;

        lhs_V_fu_60_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_2_fu_52_p3),26));

    loc_V_1_fu_104_p1 <= grp_fu_80_p2(16 - 1 downto 0);
    loc_V_fu_111_p2 <= std_logic_vector(unsigned(tmp_464_fu_108_p1) + unsigned(p_Result_s_reg_152));
    p_Result_2_fu_52_p3 <= (a_V & ap_const_lv17_0);
    r_V_fu_68_p2 <= std_logic_vector(signed(rhs_V_fu_64_p1) + signed(lhs_V_fu_60_p1));
        rhs_V_fu_64_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_V),26));

    tmp_464_fu_108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2567_reg_147),16));
end behav;
