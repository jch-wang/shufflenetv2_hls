-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shuffle_48_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    left_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    left_V_ce0 : OUT STD_LOGIC;
    left_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_48_8x8_p_V_8_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_48_8x8_p_V_1_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_48_8x8_p_V_2_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_48_8x8_p_V_3_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_48_8x8_p_V_4_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_48_8x8_p_V_5_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_48_8x8_p_V_6_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_48_8x8_p_V_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_48_8x8_p_V_7_ce0 : OUT STD_LOGIC;
    buffer1_1_48_8x8_p_V_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of shuffle_48_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_522_fu_240_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_522_reg_587 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal co_27_fu_250_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal co_27_reg_594 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_411_fu_280_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_411_reg_599 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond5_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_415_fu_320_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_415_reg_604 : STD_LOGIC_VECTOR (9 downto 0);
    signal arrayNo_reg_609 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_419_fu_370_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_419_reg_614 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_24_fu_382_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal h_24_reg_622 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_421_fu_429_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_421_reg_627 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond4_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_423_fu_464_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_423_reg_632 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_425_fu_499_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_425_reg_637 : STD_LOGIC_VECTOR (10 downto 0);
    signal w_29_fu_511_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_29_reg_645 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_addr_reg_655 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_fu_566_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal co_reg_197 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_reg_208 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_219 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal storemerge_reg_230 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_524_cast_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_525_cast_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_526_cast_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_256_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_410_fu_268_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl5_cast_fu_276_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_264_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_412_fu_286_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_413_fu_296_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_414_fu_308_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl3_cast_fu_316_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_304_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_416_fu_336_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_417_fu_346_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_418_fu_358_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_cast_fu_366_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_354_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_fu_396_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_420_fu_400_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_527_fu_405_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_528_fu_417_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl10_cast_fu_413_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl11_cast_fu_425_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_cast7_fu_392_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_422_fu_435_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_529_fu_440_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_530_fu_452_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl8_cast_fu_448_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl9_cast_fu_460_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_cast6_fu_388_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_424_fu_470_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_531_fu_475_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_532_fu_487_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl6_cast_fu_483_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_cast_fu_495_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_217_cast_fu_525_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_426_fu_529_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_217_cast2_fu_521_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_427_fu_539_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_217_cast1_fu_517_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_428_fu_549_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component ShuffleNetV2_mux_jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mux_jbC_x_U203 : component ShuffleNetV2_mux_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din1 => buffer1_1_48_8x8_p_V_8_q0,
        din2 => buffer1_1_48_8x8_p_V_1_q0,
        din3 => buffer1_1_48_8x8_p_V_2_q0,
        din4 => buffer1_1_48_8x8_p_V_3_q0,
        din5 => buffer1_1_48_8x8_p_V_4_q0,
        din6 => buffer1_1_48_8x8_p_V_5_q0,
        din7 => buffer1_1_48_8x8_p_V_6_q0,
        din8 => buffer1_1_48_8x8_p_V_7_q0,
        din9 => arrayNo_reg_609,
        dout => tmp_fu_566_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_376_p2 = ap_const_lv1_1))) then 
                co_reg_197 <= co_27_reg_594;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_197 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    h_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_505_p2 = ap_const_lv1_1))) then 
                h_reg_208 <= h_24_reg_622;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_244_p2 = ap_const_lv1_0))) then 
                h_reg_208 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    storemerge_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                storemerge_reg_230 <= tmp_fu_566_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                storemerge_reg_230 <= left_V_q0;
            end if; 
        end if;
    end process;

    w_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond4_fu_376_p2))) then 
                w_reg_219 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                w_reg_219 <= w_29_reg_645;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_244_p2 = ap_const_lv1_0))) then
                arrayNo_reg_609 <= co_reg_197(3 downto 1);
                    tmp_411_reg_599(10 downto 1) <= tmp_411_fu_280_p2(10 downto 1);
                    tmp_415_reg_604(9 downto 1) <= tmp_415_fu_320_p2(9 downto 1);
                    tmp_419_reg_614(6 downto 1) <= tmp_419_fu_370_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_27_reg_594 <= co_27_fu_250_p2;
                tmp_522_reg_587 <= tmp_522_fu_240_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_24_reg_622 <= h_24_fu_382_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond_fu_505_p2))) then
                output_V_addr_reg_655 <= tmp_525_cast_fu_544_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond4_fu_376_p2))) then
                    tmp_421_reg_627(13 downto 1) <= tmp_421_fu_429_p2(13 downto 1);
                    tmp_423_reg_632(14 downto 1) <= tmp_423_fu_464_p2(14 downto 1);
                    tmp_425_reg_637(10 downto 1) <= tmp_425_fu_499_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                w_29_reg_645 <= w_29_fu_511_p2;
            end if;
        end if;
    end process;
    tmp_411_reg_599(0) <= '0';
    tmp_415_reg_604(0) <= '0';
    tmp_419_reg_614(0) <= '0';
    tmp_421_reg_627(0) <= '0';
    tmp_423_reg_632(0) <= '0';
    tmp_425_reg_637(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_522_reg_587, ap_CS_fsm_state2, exitcond5_fu_244_p2, ap_CS_fsm_state3, exitcond4_fu_376_p2, ap_CS_fsm_state4, exitcond_fu_505_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_244_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_376_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_505_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond_fu_505_p2) and (tmp_522_reg_587 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_244_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_244_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_244_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_244_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_1_address0 <= tmp_526_cast_fu_554_p1(10 - 1 downto 0);

    buffer1_1_48_8x8_p_V_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_1_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_2_address0 <= tmp_526_cast_fu_554_p1(10 - 1 downto 0);

    buffer1_1_48_8x8_p_V_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_2_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_3_address0 <= tmp_526_cast_fu_554_p1(10 - 1 downto 0);

    buffer1_1_48_8x8_p_V_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_3_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_4_address0 <= tmp_526_cast_fu_554_p1(10 - 1 downto 0);

    buffer1_1_48_8x8_p_V_4_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_4_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_5_address0 <= tmp_526_cast_fu_554_p1(10 - 1 downto 0);

    buffer1_1_48_8x8_p_V_5_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_5_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_6_address0 <= tmp_526_cast_fu_554_p1(10 - 1 downto 0);

    buffer1_1_48_8x8_p_V_6_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_6_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_7_address0 <= tmp_526_cast_fu_554_p1(10 - 1 downto 0);

    buffer1_1_48_8x8_p_V_7_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_7_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_48_8x8_p_V_8_address0 <= tmp_526_cast_fu_554_p1(10 - 1 downto 0);

    buffer1_1_48_8x8_p_V_8_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_48_8x8_p_V_8_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_48_8x8_p_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_27_fu_250_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(co_reg_197));
    exitcond4_fu_376_p2 <= "1" when (h_reg_208 = ap_const_lv4_A) else "0";
    exitcond5_fu_244_p2 <= "1" when (co_reg_197 = ap_const_lv7_60) else "0";
    exitcond_fu_505_p2 <= "1" when (w_reg_219 = ap_const_lv4_A) else "0";
    h_24_fu_382_p2 <= std_logic_vector(unsigned(h_reg_208) + unsigned(ap_const_lv4_1));
    left_V_address0 <= tmp_524_cast_fu_534_p1(13 - 1 downto 0);

    left_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            left_V_ce0 <= ap_const_logic_1;
        else 
            left_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_address0 <= output_V_addr_reg_655;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= storemerge_reg_230;

    output_V_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl10_cast_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_527_fu_405_p3),14));
    p_shl11_cast_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_528_fu_417_p3),14));
    p_shl1_cast_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_418_fu_358_p3),7));
    p_shl2_cast_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_413_fu_296_p3),10));
    p_shl3_cast_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_414_fu_308_p3),10));
    p_shl4_cast_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_256_p3),11));
    p_shl5_cast_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_410_fu_268_p3),11));
    p_shl6_cast_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_531_fu_475_p3),11));
    p_shl7_cast_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_532_fu_487_p3),11));
    p_shl8_cast_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_529_fu_440_p3),15));
    p_shl9_cast_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_530_fu_452_p3),15));
    p_shl_cast_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_417_fu_346_p3),7));
    tmp_217_cast1_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_219),11));
    tmp_217_cast2_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_219),15));
    tmp_217_cast_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_219),14));
    tmp_410_fu_268_p3 <= (co_reg_197 & ap_const_lv1_0);
    tmp_411_fu_280_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_276_p1) + unsigned(p_shl4_cast_fu_264_p1));
    tmp_412_fu_286_p4 <= co_reg_197(6 downto 1);
    tmp_413_fu_296_p3 <= (tmp_412_fu_286_p4 & ap_const_lv3_0);
    tmp_414_fu_308_p3 <= (tmp_412_fu_286_p4 & ap_const_lv1_0);
    tmp_415_fu_320_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_316_p1) + unsigned(p_shl2_cast_fu_304_p1));
    tmp_416_fu_336_p4 <= co_reg_197(6 downto 4);
    tmp_417_fu_346_p3 <= (tmp_416_fu_336_p4 & ap_const_lv3_0);
    tmp_418_fu_358_p3 <= (tmp_416_fu_336_p4 & ap_const_lv1_0);
    tmp_419_fu_370_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_366_p1) + unsigned(p_shl_cast_fu_354_p1));
    tmp_420_fu_400_p2 <= std_logic_vector(unsigned(tmp_cast_fu_396_p1) + unsigned(tmp_415_reg_604));
    tmp_421_fu_429_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_413_p1) + unsigned(p_shl11_cast_fu_425_p1));
    tmp_422_fu_435_p2 <= std_logic_vector(unsigned(tmp_cast7_fu_392_p1) + unsigned(tmp_411_reg_599));
    tmp_423_fu_464_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_448_p1) + unsigned(p_shl9_cast_fu_460_p1));
    tmp_424_fu_470_p2 <= std_logic_vector(unsigned(tmp_cast6_fu_388_p1) + unsigned(tmp_419_reg_614));
    tmp_425_fu_499_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_483_p1) + unsigned(p_shl7_cast_fu_495_p1));
    tmp_426_fu_529_p2 <= std_logic_vector(unsigned(tmp_421_reg_627) + unsigned(tmp_217_cast_fu_525_p1));
    tmp_427_fu_539_p2 <= std_logic_vector(unsigned(tmp_423_reg_632) + unsigned(tmp_217_cast2_fu_521_p1));
    tmp_428_fu_549_p2 <= std_logic_vector(unsigned(tmp_425_reg_637) + unsigned(tmp_217_cast1_fu_517_p1));
    tmp_522_fu_240_p1 <= co_reg_197(1 - 1 downto 0);
    tmp_524_cast_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_426_fu_529_p2),64));
    tmp_525_cast_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_427_fu_539_p2),64));
    tmp_526_cast_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_428_fu_549_p2),64));
    tmp_527_fu_405_p3 <= (tmp_420_fu_400_p2 & ap_const_lv3_0);
    tmp_528_fu_417_p3 <= (tmp_420_fu_400_p2 & ap_const_lv1_0);
    tmp_529_fu_440_p3 <= (tmp_422_fu_435_p2 & ap_const_lv3_0);
    tmp_530_fu_452_p3 <= (tmp_422_fu_435_p2 & ap_const_lv1_0);
    tmp_531_fu_475_p3 <= (tmp_424_fu_470_p2 & ap_const_lv3_0);
    tmp_532_fu_487_p3 <= (tmp_424_fu_470_p2 & ap_const_lv1_0);
    tmp_cast6_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_208),7));
    tmp_cast7_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_208),11));
    tmp_cast_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_208),10));
    tmp_s_fu_256_p3 <= (co_reg_197 & ap_const_lv3_0);
    w_29_fu_511_p2 <= std_logic_vector(unsigned(w_reg_219) + unsigned(ap_const_lv4_1));
end behav;
