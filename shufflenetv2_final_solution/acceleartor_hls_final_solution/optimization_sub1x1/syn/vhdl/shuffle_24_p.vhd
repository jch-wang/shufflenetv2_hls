-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shuffle_24_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    left_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    left_V_ce0 : OUT STD_LOGIC;
    left_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_24_16x16_p_7_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_24_16x16_p_6_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_24_16x16_p_5_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_24_16x16_p_4_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_24_16x16_p_3_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_24_16x16_p_2_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_24_16x16_p_1_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_24_16x16_p_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of shuffle_24_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_553_fu_246_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_553_reg_581 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal co_30_fu_256_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal co_30_reg_588 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_454_fu_286_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_454_reg_593 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond5_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_458_fu_326_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_458_reg_598 : STD_LOGIC_VECTOR (9 downto 0);
    signal arrayNo_reg_603 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_462_fu_376_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_462_reg_608 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_27_fu_388_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_27_reg_616 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_464_fu_431_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_464_reg_621 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond4_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_466_fu_462_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_466_reg_626 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_468_fu_493_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_468_reg_631 : STD_LOGIC_VECTOR (10 downto 0);
    signal w_32_fu_505_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_32_reg_639 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_addr_reg_649 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_fu_560_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal co_reg_203 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_reg_214 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_225 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal storemerge_reg_236 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_588_cast_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_589_cast_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_590_cast_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_262_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_453_fu_274_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl5_cast_fu_282_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_270_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_455_fu_292_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_456_fu_302_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_457_fu_314_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl3_cast_fu_322_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_310_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_459_fu_342_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_460_fu_352_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_461_fu_364_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl1_cast_fu_372_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_360_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_fu_402_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_463_fu_406_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_554_fu_419_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl10_cast_fu_411_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl11_cast_fu_427_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_cast9_fu_398_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_465_fu_437_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_555_fu_450_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl8_cast_fu_442_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl9_cast_fu_458_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_cast8_fu_394_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_467_fu_468_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_556_fu_481_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl6_cast_fu_473_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_cast_fu_489_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_220_cast_fu_519_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_469_fu_523_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_220_cast2_fu_515_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_470_fu_533_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_220_cast1_fu_511_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_471_fu_543_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component ShuffleNetV2_mux_jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mux_jbC_x_U106 : component ShuffleNetV2_mux_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din1 => buffer1_1_24_16x16_p_7_q0,
        din2 => buffer1_1_24_16x16_p_6_q0,
        din3 => buffer1_1_24_16x16_p_5_q0,
        din4 => buffer1_1_24_16x16_p_4_q0,
        din5 => buffer1_1_24_16x16_p_3_q0,
        din6 => buffer1_1_24_16x16_p_2_q0,
        din7 => buffer1_1_24_16x16_p_1_q0,
        din8 => buffer1_1_24_16x16_p_q0,
        din9 => arrayNo_reg_603,
        dout => tmp_fu_560_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_382_p2 = ap_const_lv1_1))) then 
                co_reg_203 <= co_30_reg_588;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_203 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    h_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_499_p2 = ap_const_lv1_1))) then 
                h_reg_214 <= h_27_reg_616;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_250_p2 = ap_const_lv1_0))) then 
                h_reg_214 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    storemerge_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                storemerge_reg_236 <= tmp_fu_560_p10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                storemerge_reg_236 <= left_V_q0;
            end if; 
        end if;
    end process;

    w_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond4_fu_382_p2))) then 
                w_reg_225 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                w_reg_225 <= w_32_reg_639;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_250_p2 = ap_const_lv1_0))) then
                arrayNo_reg_603 <= co_reg_203(3 downto 1);
                    tmp_454_reg_593(10 downto 1) <= tmp_454_fu_286_p2(10 downto 1);
                    tmp_458_reg_598(9 downto 1) <= tmp_458_fu_326_p2(9 downto 1);
                    tmp_462_reg_608(6 downto 1) <= tmp_462_fu_376_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_30_reg_588 <= co_30_fu_256_p2;
                tmp_553_reg_581 <= tmp_553_fu_246_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_27_reg_616 <= h_27_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond_fu_499_p2))) then
                output_V_addr_reg_649 <= tmp_589_cast_fu_538_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond4_fu_382_p2))) then
                    tmp_464_reg_621(13 downto 1) <= tmp_464_fu_431_p2(13 downto 1);
                    tmp_466_reg_626(14 downto 1) <= tmp_466_fu_462_p2(14 downto 1);
                    tmp_468_reg_631(10 downto 1) <= tmp_468_fu_493_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                w_32_reg_639 <= w_32_fu_505_p2;
            end if;
        end if;
    end process;
    tmp_454_reg_593(0) <= '0';
    tmp_458_reg_598(0) <= '0';
    tmp_462_reg_608(0) <= '0';
    tmp_464_reg_621(0) <= '0';
    tmp_466_reg_626(0) <= '0';
    tmp_468_reg_631(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_553_reg_581, ap_CS_fsm_state2, exitcond5_fu_250_p2, ap_CS_fsm_state3, exitcond4_fu_382_p2, ap_CS_fsm_state4, exitcond_fu_499_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_250_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_382_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_499_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond_fu_499_p2) and (tmp_553_reg_581 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_250_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_250_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_250_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_250_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_1_address0 <= tmp_590_cast_fu_548_p1(10 - 1 downto 0);

    buffer1_1_24_16x16_p_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_24_16x16_p_1_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_2_address0 <= tmp_590_cast_fu_548_p1(10 - 1 downto 0);

    buffer1_1_24_16x16_p_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_24_16x16_p_2_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_3_address0 <= tmp_590_cast_fu_548_p1(10 - 1 downto 0);

    buffer1_1_24_16x16_p_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_24_16x16_p_3_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_4_address0 <= tmp_590_cast_fu_548_p1(10 - 1 downto 0);

    buffer1_1_24_16x16_p_4_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_24_16x16_p_4_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_5_address0 <= tmp_590_cast_fu_548_p1(10 - 1 downto 0);

    buffer1_1_24_16x16_p_5_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_24_16x16_p_5_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_6_address0 <= tmp_590_cast_fu_548_p1(10 - 1 downto 0);

    buffer1_1_24_16x16_p_6_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_24_16x16_p_6_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_7_address0 <= tmp_590_cast_fu_548_p1(10 - 1 downto 0);

    buffer1_1_24_16x16_p_7_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_24_16x16_p_7_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_address0 <= tmp_590_cast_fu_548_p1(10 - 1 downto 0);

    buffer1_1_24_16x16_p_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_24_16x16_p_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_30_fu_256_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(co_reg_203));
    exitcond4_fu_382_p2 <= "1" when (h_reg_214 = ap_const_lv5_12) else "0";
    exitcond5_fu_250_p2 <= "1" when (co_reg_203 = ap_const_lv6_30) else "0";
    exitcond_fu_499_p2 <= "1" when (w_reg_225 = ap_const_lv5_12) else "0";
    h_27_fu_388_p2 <= std_logic_vector(unsigned(h_reg_214) + unsigned(ap_const_lv5_1));
    left_V_address0 <= tmp_588_cast_fu_528_p1(13 - 1 downto 0);

    left_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            left_V_ce0 <= ap_const_logic_1;
        else 
            left_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_address0 <= output_V_addr_reg_649;

    output_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= storemerge_reg_236;

    output_V_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl10_cast_fu_411_p3 <= (tmp_463_fu_406_p2 & ap_const_lv4_0);
    p_shl11_cast_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_554_fu_419_p3),14));
    p_shl1_cast_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_461_fu_364_p3),7));
    p_shl2_cast_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_456_fu_302_p3),10));
    p_shl3_cast_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_457_fu_314_p3),10));
    p_shl4_cast_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_262_p3),11));
    p_shl5_cast_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_453_fu_274_p3),11));
    p_shl6_cast_fu_473_p3 <= (tmp_467_fu_468_p2 & ap_const_lv4_0);
    p_shl7_cast_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_556_fu_481_p3),11));
    p_shl8_cast_fu_442_p3 <= (tmp_465_fu_437_p2 & ap_const_lv4_0);
    p_shl9_cast_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_555_fu_450_p3),15));
    p_shl_cast_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_460_fu_352_p3),7));
    tmp_220_cast1_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_225),11));
    tmp_220_cast2_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_225),15));
    tmp_220_cast_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_225),14));
    tmp_453_fu_274_p3 <= (co_reg_203 & ap_const_lv1_0);
    tmp_454_fu_286_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_282_p1) + unsigned(p_shl4_cast_fu_270_p1));
    tmp_455_fu_292_p4 <= co_reg_203(5 downto 1);
    tmp_456_fu_302_p3 <= (tmp_455_fu_292_p4 & ap_const_lv4_0);
    tmp_457_fu_314_p3 <= (tmp_455_fu_292_p4 & ap_const_lv1_0);
    tmp_458_fu_326_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_322_p1) + unsigned(p_shl2_cast_fu_310_p1));
    tmp_459_fu_342_p4 <= co_reg_203(5 downto 4);
    tmp_460_fu_352_p3 <= (tmp_459_fu_342_p4 & ap_const_lv4_0);
    tmp_461_fu_364_p3 <= (tmp_459_fu_342_p4 & ap_const_lv1_0);
    tmp_462_fu_376_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_372_p1) + unsigned(p_shl_cast_fu_360_p1));
    tmp_463_fu_406_p2 <= std_logic_vector(unsigned(tmp_cast_fu_402_p1) + unsigned(tmp_458_reg_598));
    tmp_464_fu_431_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_411_p3) + unsigned(p_shl11_cast_fu_427_p1));
    tmp_465_fu_437_p2 <= std_logic_vector(unsigned(tmp_cast9_fu_398_p1) + unsigned(tmp_454_reg_593));
    tmp_466_fu_462_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_442_p3) + unsigned(p_shl9_cast_fu_458_p1));
    tmp_467_fu_468_p2 <= std_logic_vector(unsigned(tmp_cast8_fu_394_p1) + unsigned(tmp_462_reg_608));
    tmp_468_fu_493_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_473_p3) + unsigned(p_shl7_cast_fu_489_p1));
    tmp_469_fu_523_p2 <= std_logic_vector(unsigned(tmp_464_reg_621) + unsigned(tmp_220_cast_fu_519_p1));
    tmp_470_fu_533_p2 <= std_logic_vector(unsigned(tmp_466_reg_626) + unsigned(tmp_220_cast2_fu_515_p1));
    tmp_471_fu_543_p2 <= std_logic_vector(unsigned(tmp_468_reg_631) + unsigned(tmp_220_cast1_fu_511_p1));
    tmp_553_fu_246_p1 <= co_reg_203(1 - 1 downto 0);
    tmp_554_fu_419_p3 <= (tmp_463_fu_406_p2 & ap_const_lv1_0);
    tmp_555_fu_450_p3 <= (tmp_465_fu_437_p2 & ap_const_lv1_0);
    tmp_556_fu_481_p3 <= (tmp_467_fu_468_p2 & ap_const_lv1_0);
    tmp_588_cast_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_469_fu_523_p2),64));
    tmp_589_cast_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_470_fu_533_p2),64));
    tmp_590_cast_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_471_fu_543_p2),64));
    tmp_cast8_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_214),7));
    tmp_cast9_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_214),11));
    tmp_cast_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_214),10));
    tmp_s_fu_262_p3 <= (co_reg_203 & ap_const_lv4_0);
    w_32_fu_505_p2 <= std_logic_vector(unsigned(w_reg_225) + unsigned(ap_const_lv5_1));
end behav;
