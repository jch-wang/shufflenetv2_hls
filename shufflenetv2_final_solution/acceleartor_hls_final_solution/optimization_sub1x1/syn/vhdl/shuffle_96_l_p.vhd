-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shuffle_96_l_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_8_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_8_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_1_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_2_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_3_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_4_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_4_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_5_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_5_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_6_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_6_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_96_4x4_p_V_7_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    buffer1_1_96_4x4_p_V_7_ce0 : OUT STD_LOGIC;
    buffer1_1_96_4x4_p_V_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of shuffle_96_l_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_514_fu_211_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_514_reg_464 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal co_25_fu_221_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal co_25_reg_471 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_465_cast_fu_257_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_465_cast_reg_476 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond3_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal arrayNo_reg_481 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_470_cast_fu_311_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_470_cast_reg_486 : STD_LOGIC_VECTOR (8 downto 0);
    signal h_22_fu_321_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_22_reg_494 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_393_fu_360_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_393_reg_499 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond2_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_395_fu_391_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_395_reg_504 : STD_LOGIC_VECTOR (9 downto 0);
    signal w_27_fu_403_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_27_reg_512 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_396_fu_417_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_396_reg_517 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_439_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_562 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal co_reg_178 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_reg_189 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_200 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_480_cast_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_479_cast_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_227_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_386_fu_239_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_235_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl3_cast_fu_247_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_387_fu_251_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_388_fu_271_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_389_fu_281_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_390_fu_293_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_289_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_cast_fu_301_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_391_fu_305_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_213_cast_fu_331_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_392_fu_335_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_515_fu_340_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_fu_344_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl7_cast_fu_352_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_213_cast9_fu_327_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_394_fu_366_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_516_fu_371_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl4_cast_fu_375_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_cast_fu_383_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_214_cast_fu_413_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_214_cast8_fu_409_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_397_fu_422_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component ShuffleNetV2_mux_jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mux_jbC_x_U264 : component ShuffleNetV2_mux_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din1 => buffer1_1_96_4x4_p_V_8_q0,
        din2 => buffer1_1_96_4x4_p_V_1_q0,
        din3 => buffer1_1_96_4x4_p_V_2_q0,
        din4 => buffer1_1_96_4x4_p_V_3_q0,
        din5 => buffer1_1_96_4x4_p_V_4_q0,
        din6 => buffer1_1_96_4x4_p_V_5_q0,
        din7 => buffer1_1_96_4x4_p_V_6_q0,
        din8 => buffer1_1_96_4x4_p_V_7_q0,
        din9 => arrayNo_reg_481,
        dout => tmp_fu_439_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_315_p2 = ap_const_lv1_1))) then 
                co_reg_178 <= co_25_reg_471;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_178 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    h_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_397_p2 = ap_const_lv1_1))) then 
                h_reg_189 <= h_22_reg_494;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_215_p2 = ap_const_lv1_0))) then 
                h_reg_189 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    w_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_315_p2))) then 
                w_reg_200 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                w_reg_200 <= w_27_reg_512;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_215_p2 = ap_const_lv1_0))) then
                arrayNo_reg_481 <= co_reg_178(3 downto 1);
                    tmp_465_cast_reg_476(12 downto 1) <= tmp_465_cast_fu_257_p1(12 downto 1);
                    tmp_470_cast_reg_486(8 downto 1) <= tmp_470_cast_fu_311_p1(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_25_reg_471 <= co_25_fu_221_p2;
                tmp_514_reg_464 <= tmp_514_fu_211_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                h_22_reg_494 <= h_22_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond2_fu_315_p2))) then
                    tmp_393_reg_499(13 downto 1) <= tmp_393_fu_360_p2(13 downto 1);
                    tmp_395_reg_504(9 downto 1) <= tmp_395_fu_391_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond_fu_397_p2) and (tmp_514_reg_464 = ap_const_lv1_0))) then
                tmp_396_reg_517 <= tmp_396_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_reg_562 <= tmp_fu_439_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                w_27_reg_512 <= w_27_fu_403_p2;
            end if;
        end if;
    end process;
    tmp_465_cast_reg_476(0) <= '0';
    tmp_470_cast_reg_486(0) <= '0';
    tmp_393_reg_499(0) <= '0';
    tmp_395_reg_504(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_514_reg_464, ap_CS_fsm_state2, exitcond3_fu_215_p2, ap_CS_fsm_state3, exitcond2_fu_315_p2, ap_CS_fsm_state4, exitcond_fu_397_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_215_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_315_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_fu_397_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond_fu_397_p2) and (tmp_514_reg_464 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_215_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_215_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_215_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_215_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_1_address0 <= tmp_480_cast_fu_427_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_96_4x4_p_V_1_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_2_address0 <= tmp_480_cast_fu_427_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_2_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_96_4x4_p_V_2_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_3_address0 <= tmp_480_cast_fu_427_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_3_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_96_4x4_p_V_3_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_4_address0 <= tmp_480_cast_fu_427_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_4_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_96_4x4_p_V_4_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_5_address0 <= tmp_480_cast_fu_427_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_5_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_96_4x4_p_V_5_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_6_address0 <= tmp_480_cast_fu_427_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_6_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_96_4x4_p_V_6_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_7_address0 <= tmp_480_cast_fu_427_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_7_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_96_4x4_p_V_7_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_96_4x4_p_V_8_address0 <= tmp_480_cast_fu_427_p1(9 - 1 downto 0);

    buffer1_1_96_4x4_p_V_8_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buffer1_1_96_4x4_p_V_8_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_96_4x4_p_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    co_25_fu_221_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(co_reg_178));
    exitcond2_fu_315_p2 <= "1" when (h_reg_189 = ap_const_lv3_6) else "0";
    exitcond3_fu_215_p2 <= "1" when (co_reg_178 = ap_const_lv8_C0) else "0";
    exitcond_fu_397_p2 <= "1" when (w_reg_200 = ap_const_lv3_6) else "0";
    h_22_fu_321_p2 <= std_logic_vector(unsigned(h_reg_189) + unsigned(ap_const_lv3_1));
    output_V_address0 <= tmp_479_cast_fu_460_p1(13 - 1 downto 0);

    output_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= tmp_reg_562;

    output_V_we0_assign_proc : process(tmp_514_reg_464, ap_CS_fsm_state6)
    begin
        if (((tmp_514_reg_464 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_390_fu_293_p3),8));
    p_shl2_cast_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_227_p3),12));
    p_shl3_cast_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_386_fu_239_p3),12));
    p_shl4_cast_fu_375_p3 <= (tmp_516_fu_371_p1 & ap_const_lv3_0);
    p_shl5_cast_fu_383_p3 <= (tmp_394_fu_366_p2 & ap_const_lv1_0);
    p_shl6_cast_fu_344_p3 <= (tmp_515_fu_340_p1 & ap_const_lv3_0);
    p_shl7_cast_fu_352_p3 <= (tmp_392_fu_335_p2 & ap_const_lv1_0);
    p_shl_cast_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_389_fu_281_p3),8));
    tmp_213_cast9_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_189),9));
    tmp_213_cast_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_189),13));
    tmp_214_cast8_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_200),10));
    tmp_214_cast_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_200),14));
    tmp_386_fu_239_p3 <= (co_reg_178 & ap_const_lv1_0);
    tmp_387_fu_251_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_235_p1) - unsigned(p_shl3_cast_fu_247_p1));
    tmp_388_fu_271_p4 <= co_reg_178(7 downto 4);
    tmp_389_fu_281_p3 <= (tmp_388_fu_271_p4 & ap_const_lv3_0);
    tmp_390_fu_293_p3 <= (tmp_388_fu_271_p4 & ap_const_lv1_0);
    tmp_391_fu_305_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_289_p1) - unsigned(p_shl1_cast_fu_301_p1));
    tmp_392_fu_335_p2 <= std_logic_vector(unsigned(tmp_213_cast_fu_331_p1) + unsigned(tmp_465_cast_reg_476));
    tmp_393_fu_360_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_344_p3) - unsigned(p_shl7_cast_fu_352_p3));
    tmp_394_fu_366_p2 <= std_logic_vector(unsigned(tmp_213_cast9_fu_327_p1) + unsigned(tmp_470_cast_reg_486));
    tmp_395_fu_391_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_375_p3) - unsigned(p_shl5_cast_fu_383_p3));
    tmp_396_fu_417_p2 <= std_logic_vector(unsigned(tmp_393_reg_499) + unsigned(tmp_214_cast_fu_413_p1));
    tmp_397_fu_422_p2 <= std_logic_vector(unsigned(tmp_395_reg_504) + unsigned(tmp_214_cast8_fu_409_p1));
        tmp_465_cast_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_387_fu_251_p2),13));

        tmp_470_cast_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_391_fu_305_p2),9));

    tmp_479_cast_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_396_reg_517),64));
    tmp_480_cast_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_397_fu_422_p2),64));
    tmp_514_fu_211_p1 <= co_reg_178(1 - 1 downto 0);
    tmp_515_fu_340_p1 <= tmp_392_fu_335_p2(11 - 1 downto 0);
    tmp_516_fu_371_p1 <= tmp_394_fu_366_p2(7 - 1 downto 0);
    tmp_s_fu_227_p3 <= (co_reg_178 & ap_const_lv3_0);
    w_27_fu_403_p2 <= std_logic_vector(unsigned(w_reg_200) + unsigned(ap_const_lv3_1));
end behav;
