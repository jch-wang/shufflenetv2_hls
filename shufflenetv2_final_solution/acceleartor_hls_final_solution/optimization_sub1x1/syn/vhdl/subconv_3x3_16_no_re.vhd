-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity subconv_3x3_16_no_re is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weight_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weight_V_ce0 : OUT STD_LOGIC;
    weight_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    bias_V_ce0 : OUT STD_LOGIC;
    bias_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_24_16x16_p_7_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_24_16x16_p_6_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_24_16x16_p_5_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_24_16x16_p_4_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_24_16x16_p_3_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_24_16x16_p_2_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_24_16x16_p_1_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer1_1_24_16x16_p_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer1_1_24_16x16_p_ce0 : OUT STD_LOGIC;
    buffer1_1_24_16x16_p_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of subconv_3x3_16_no_re is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal co_6_fu_332_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal co_6_reg_993 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_174_cast_fu_365_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_174_cast_reg_998 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond5_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_161_fu_393_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_161_reg_1003 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_163_fu_399_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_163_reg_1008 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_165_fu_437_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_165_reg_1013 : STD_LOGIC_VECTOR (6 downto 0);
    signal bias_V_addr_reg_1018 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_168_fu_478_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_168_reg_1026 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond6_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_6_fu_490_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond7_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_6_fu_502_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_6_reg_1042 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_170_fu_512_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_170_reg_1047 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond8_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_173_fu_537_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_173_reg_1053 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_172_fu_547_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_172_reg_1059 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_175_fu_570_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_175_reg_1064 : STD_LOGIC_VECTOR (10 downto 0);
    signal n_6_fu_582_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_6_reg_1072 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_177_fu_622_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_177_reg_1082 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal weight_V_load_reg_1127 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_108_fu_638_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_108_reg_1132 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_Val2_6_fu_665_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_6_reg_1137 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_179_reg_1142 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_50_fu_691_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_50_reg_1147 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal signbit_reg_1152 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_52_fu_725_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_52_reg_1159 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_fu_731_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_reg_1165 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_1171 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_112_reg_1178 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_38_i_i_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_reg_1184 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_114_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_114_reg_1189 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_reg_1194 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_reg_1199 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_reg_1204 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_879_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal isneg_reg_1214 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal result_V_fu_909_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_V_reg_1221 : STD_LOGIC_VECTOR (7 downto 0);
    signal newsignbit_8_reg_1227 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_6_fu_984_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal co_reg_245 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_reg_256 : STD_LOGIC_VECTOR (4 downto 0);
    signal w_reg_268 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Val2_s_reg_280 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_reg_292 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_49_reg_303 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_reg_315 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_193_cast_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_194_cast_fu_627_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_185_cast_fu_979_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_347_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl4_cast_fu_355_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_fu_343_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_158_fu_359_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_159_fu_369_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_160_fu_381_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_cast_fu_377_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_cast_fu_389_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal newIndex_fu_403_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_162_fu_413_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_164_fu_425_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_cast_fu_421_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_433_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_57_fu_449_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_166_fu_453_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_167_fu_466_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_458_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl6_cast_fu_474_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_102_cast_fu_508_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_517_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_cast_fu_523_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_103_fu_527_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_104_cast_fu_533_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_171_fu_542_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_174_fu_559_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl8_cast_fu_566_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_cast_fu_552_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_105_cast_fu_588_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_176_fu_592_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp3_fu_602_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp3_cast_fu_608_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_106_fu_612_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_107_cast_fu_618_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_6_fu_665_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_6_fu_665_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_109_fu_679_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_159_cast_fu_687_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_51_fu_704_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_110_fu_714_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_180_fu_717_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_111_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_182_fu_761_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_41_i_i_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_778_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i6_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_796_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_48_mux_fu_867_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_61_fu_873_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_98_fu_887_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_99_fu_891_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_47_fu_895_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_100_fu_923_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_not_fu_937_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_8_fu_928_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_942_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_mux_fu_947_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_result_V_fu_954_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_101_cast_fu_970_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_169_fu_974_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component ShuffleNetV2_mux_jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    ShuffleNetV2_mux_jbC_x_U94 : component ShuffleNetV2_mux_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din1 => buffer1_1_24_16x16_p_7_q0,
        din2 => buffer1_1_24_16x16_p_6_q0,
        din3 => buffer1_1_24_16x16_p_5_q0,
        din4 => buffer1_1_24_16x16_p_4_q0,
        din5 => buffer1_1_24_16x16_p_3_q0,
        din6 => buffer1_1_24_16x16_p_2_q0,
        din7 => buffer1_1_24_16x16_p_1_q0,
        din8 => buffer1_1_24_16x16_p_q0,
        din9 => tmp_163_reg_1008,
        dout => tmp_108_fu_638_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    co_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond6_fu_443_p2 = ap_const_lv1_1))) then 
                co_reg_245 <= co_6_reg_993;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                co_reg_245 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_326_p2 = ap_const_lv1_0))) then 
                h_reg_256 <= ap_const_lv5_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_484_p2 = ap_const_lv1_1))) then 
                h_reg_256 <= h_6_fu_490_p2;
            end if; 
        end if;
    end process;

    m_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond7_fu_484_p2))) then 
                m_reg_292 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_576_p2))) then 
                m_reg_292 <= m_6_reg_1042;
            end if; 
        end if;
    end process;

    n_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                n_reg_315 <= n_6_reg_1072;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                n_reg_315 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_49_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                p_Val2_49_reg_303 <= sum_V_fu_879_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_49_reg_303 <= p_Val2_s_reg_280;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond7_fu_484_p2))) then 
                p_Val2_s_reg_280 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_576_p2))) then 
                p_Val2_s_reg_280 <= p_Val2_49_reg_303;
            end if; 
        end if;
    end process;

    w_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_443_p2))) then 
                w_reg_268 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                w_reg_268 <= w_6_fu_984_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_326_p2 = ap_const_lv1_0))) then
                bias_V_addr_reg_1018 <= tmp_fu_338_p1(5 - 1 downto 0);
                    tmp_161_reg_1003(9 downto 1) <= tmp_161_fu_393_p2(9 downto 1);
                tmp_163_reg_1008 <= tmp_163_fu_399_p1;
                    tmp_165_reg_1013(6 downto 1) <= tmp_165_fu_437_p2(6 downto 1);
                tmp_174_cast_reg_998 <= tmp_174_cast_fu_365_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                brmerge40_demorgan_i_reg_1194 <= brmerge40_demorgan_i_fu_830_p2;
                brmerge_i_i_i_reg_1204 <= brmerge_i_i_i_fu_852_p2;
                p_38_i_i_reg_1184 <= p_38_i_i_fu_803_p2;
                tmp_114_reg_1189 <= tmp_114_fu_819_p2;
                underflow_reg_1199 <= underflow_fu_847_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                carry_reg_1171 <= carry_fu_745_p2;
                newsignbit_reg_1165 <= p_Val2_52_fu_725_p2(7 downto 7);
                p_Val2_50_reg_1147 <= p_Val2_50_fu_691_p2;
                p_Val2_52_reg_1159 <= p_Val2_52_fu_725_p2;
                signbit_reg_1152 <= p_Val2_50_fu_691_p2(15 downto 15);
                tmp_112_reg_1178 <= p_Val2_50_fu_691_p2(15 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                co_6_reg_993 <= co_6_fu_332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                isneg_reg_1214 <= p_Val2_47_fu_895_p2(8 downto 8);
                newsignbit_8_reg_1227 <= result_V_fu_909_p2(7 downto 7);
                result_V_reg_1221 <= result_V_fu_909_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_6_reg_1042 <= m_6_fu_502_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                n_6_reg_1072 <= n_6_fu_582_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_Val2_6_reg_1137 <= p_Val2_6_fu_665_p2;
                tmp_179_reg_1142 <= p_Val2_6_fu_665_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_108_reg_1132 <= tmp_108_fu_638_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond6_fu_443_p2))) then
                    tmp_168_reg_1026(13 downto 1) <= tmp_168_fu_478_p2(13 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond8_fu_496_p2))) then
                tmp_170_reg_1047 <= tmp_170_fu_512_p2;
                tmp_173_reg_1053 <= tmp_173_fu_537_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_172_reg_1059 <= tmp_172_fu_547_p2;
                    tmp_175_reg_1064(10 downto 1) <= tmp_175_fu_570_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond_fu_576_p2))) then
                tmp_177_reg_1082 <= tmp_177_fu_622_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                weight_V_load_reg_1127 <= weight_V_q0;
            end if;
        end if;
    end process;
    tmp_161_reg_1003(0) <= '0';
    tmp_165_reg_1013(0) <= '0';
    tmp_168_reg_1026(0) <= '0';
    tmp_175_reg_1064(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_326_p2, ap_CS_fsm_state3, exitcond6_fu_443_p2, ap_CS_fsm_state4, exitcond7_fu_484_p2, ap_CS_fsm_state5, exitcond8_fu_496_p2, ap_CS_fsm_state7, exitcond_fu_576_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_326_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond6_fu_443_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond7_fu_484_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_1 = exitcond8_fu_496_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_576_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_768_p2 <= "1" when (tmp_112_reg_1178 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_773_p2 <= "1" when (tmp_112_reg_1178 = ap_const_lv2_0) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_326_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_326_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_326_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_326_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_V_address0 <= bias_V_addr_reg_1018;

    bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_V_ce0 <= ap_const_logic_1;
        else 
            bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_830_p2 <= (newsignbit_reg_1165 and deleted_ones_fu_796_p3);
    brmerge9_fu_942_p2 <= (newsignbit_8_reg_1227 or isneg_not_fu_937_p2);
    brmerge_i_i6_fu_814_p2 <= (newsignbit_reg_1165 or p_not_i_i_fu_808_p2);
    brmerge_i_i_fu_933_p2 <= (isneg_reg_1214 xor newsignbit_8_reg_1227);
    brmerge_i_i_i_fu_852_p2 <= (underflow_fu_847_p2 or overflow_fu_824_p2);
    buffer1_1_24_16x16_p_1_address0 <= tmp_194_cast_fu_627_p1(10 - 1 downto 0);

    buffer1_1_24_16x16_p_1_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_24_16x16_p_1_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_2_address0 <= tmp_194_cast_fu_627_p1(10 - 1 downto 0);

    buffer1_1_24_16x16_p_2_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_24_16x16_p_2_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_3_address0 <= tmp_194_cast_fu_627_p1(10 - 1 downto 0);

    buffer1_1_24_16x16_p_3_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_24_16x16_p_3_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_4_address0 <= tmp_194_cast_fu_627_p1(10 - 1 downto 0);

    buffer1_1_24_16x16_p_4_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_24_16x16_p_4_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_5_address0 <= tmp_194_cast_fu_627_p1(10 - 1 downto 0);

    buffer1_1_24_16x16_p_5_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_24_16x16_p_5_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_6_address0 <= tmp_194_cast_fu_627_p1(10 - 1 downto 0);

    buffer1_1_24_16x16_p_6_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_24_16x16_p_6_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_7_address0 <= tmp_194_cast_fu_627_p1(10 - 1 downto 0);

    buffer1_1_24_16x16_p_7_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_24_16x16_p_7_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer1_1_24_16x16_p_address0 <= tmp_194_cast_fu_627_p1(10 - 1 downto 0);

    buffer1_1_24_16x16_p_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            buffer1_1_24_16x16_p_ce0 <= ap_const_logic_1;
        else 
            buffer1_1_24_16x16_p_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    carry_fu_745_p2 <= (tmp_180_fu_717_p3 and tmp_111_fu_739_p2);
    co_6_fu_332_p2 <= std_logic_vector(unsigned(co_reg_245) + unsigned(ap_const_lv5_1));
    deleted_ones_fu_796_p3 <= 
        p_41_i_i_fu_791_p2 when (carry_reg_1171(0) = '1') else 
        Range1_all_ones_fu_768_p2;
    deleted_zeros_fu_778_p3 <= 
        Range1_all_ones_fu_768_p2 when (carry_reg_1171(0) = '1') else 
        Range1_all_zeros_fu_773_p2;
    exitcond5_fu_326_p2 <= "1" when (co_reg_245 = ap_const_lv5_18) else "0";
    exitcond6_fu_443_p2 <= "1" when (h_reg_256 = ap_const_lv5_11) else "0";
    exitcond7_fu_484_p2 <= "1" when (w_reg_268 = ap_const_lv5_11) else "0";
    exitcond8_fu_496_p2 <= "1" when (m_reg_292 = ap_const_lv2_3) else "0";
    exitcond_fu_576_p2 <= "1" when (n_reg_315 = ap_const_lv2_3) else "0";
    h_6_fu_490_p2 <= std_logic_vector(unsigned(h_reg_256) + unsigned(ap_const_lv5_1));
    isneg_not_fu_937_p2 <= (isneg_reg_1214 xor ap_const_lv1_1);
    m_6_fu_502_p2 <= std_logic_vector(unsigned(m_reg_292) + unsigned(ap_const_lv2_1));
    n_6_fu_582_p2 <= std_logic_vector(unsigned(n_reg_315) + unsigned(ap_const_lv2_1));
    newIndex_fu_403_p4 <= co_reg_245(4 downto 3);
    newsignbit_fu_731_p3 <= p_Val2_52_fu_725_p2(7 downto 7);
    output_V_address0 <= tmp_185_cast_fu_979_p1(13 - 1 downto 0);

    output_V_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= 
        result_V_mux_fu_947_p3 when (brmerge9_fu_942_p2(0) = '1') else 
        p_result_V_fu_954_p3;

    output_V_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_824_p2 <= (brmerge_i_i6_fu_814_p2 and tmp_114_fu_819_p2);
    p_38_i_i_fu_803_p2 <= (carry_reg_1171 and Range1_all_ones_fu_768_p2);
    p_41_i_i_fu_791_p2 <= (signbit_reg_1152 and tmp_113_fu_785_p2);
    p_Val2_47_fu_895_p2 <= std_logic_vector(signed(tmp_98_fu_887_p1) + signed(tmp_99_fu_891_p1));
    p_Val2_48_mux_fu_867_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_i_reg_1204(0) = '1') else 
        p_Val2_52_reg_1159;
    p_Val2_50_fu_691_p2 <= std_logic_vector(signed(tmp_159_cast_fu_687_p1) + signed(p_Val2_6_reg_1137));
    p_Val2_51_fu_704_p4 <= p_Val2_50_fu_691_p2(13 downto 6);
    p_Val2_52_fu_725_p2 <= std_logic_vector(unsigned(p_Val2_51_fu_704_p4) + unsigned(tmp_110_fu_714_p1));
    p_Val2_6_fu_665_p0 <= weight_V_load_reg_1127;
    p_Val2_6_fu_665_p1 <= tmp_108_reg_1132;
    p_Val2_6_fu_665_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_Val2_6_fu_665_p0) * signed(p_Val2_6_fu_665_p1))), 16));
    p_Val2_s_61_fu_873_p3 <= 
        ap_const_lv8_80 when (underflow_reg_1199(0) = '1') else 
        p_Val2_52_reg_1159;
    p_not_i_i_fu_808_p2 <= (deleted_zeros_fu_778_p3 xor ap_const_lv1_1);
    p_result_V_fu_954_p3 <= 
        ap_const_lv8_80 when (underflow_8_fu_928_p2(0) = '1') else 
        result_V_reg_1221;
    p_shl1_cast_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_164_fu_425_p3),7));
    p_shl2_cast_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_159_fu_369_p3),10));
    p_shl3_cast_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_160_fu_381_p3),10));
    p_shl4_cast_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_347_p3),8));
    p_shl5_cast_fu_458_p3 <= (tmp_166_fu_453_p2 & ap_const_lv4_0);
    p_shl6_cast_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_167_fu_466_p3),14));
    p_shl7_cast_fu_552_p3 <= (tmp_173_reg_1053 & ap_const_lv4_0);
    p_shl8_cast_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_174_fu_559_p3),11));
    p_shl_cast_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_162_fu_413_p3),7));
    result_V_fu_909_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_280) + unsigned(bias_V_q0));
    result_V_mux_fu_947_p3 <= 
        ap_const_lv8_7F when (brmerge_i_i_fu_933_p2(0) = '1') else 
        result_V_reg_1221;
    sum_V_fu_879_p3 <= 
        p_Val2_48_mux_fu_867_p3 when (underflow_not_fu_862_p2(0) = '1') else 
        p_Val2_s_61_fu_873_p3;
        tmp2_cast_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_517_p2),5));

    tmp2_fu_517_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(m_reg_292));
        tmp3_cast_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_602_p2),5));

    tmp3_fu_602_p2 <= std_logic_vector(unsigned(n_reg_315) + unsigned(ap_const_lv2_3));
    tmp4_demorgan_fu_835_p2 <= (p_38_i_i_fu_803_p2 or brmerge40_demorgan_i_fu_830_p2);
    tmp4_fu_841_p2 <= (tmp4_demorgan_fu_835_p2 xor ap_const_lv1_1);
    tmp5_fu_858_p2 <= (brmerge40_demorgan_i_reg_1194 or tmp_114_reg_1189);
    tmp_100_fu_923_p2 <= (newsignbit_8_reg_1227 xor ap_const_lv1_1);
    tmp_101_cast_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_268),14));
    tmp_102_cast_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_292),9));
    tmp_103_fu_527_p2 <= std_logic_vector(unsigned(h_reg_256) + unsigned(tmp2_cast_fu_523_p1));
    tmp_104_cast_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_103_fu_527_p2),7));
    tmp_105_cast_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_315),9));
    tmp_106_fu_612_p2 <= std_logic_vector(signed(tmp3_cast_fu_608_p1) + signed(w_reg_268));
    tmp_107_cast_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_106_fu_612_p2),11));
    tmp_109_fu_679_p3 <= (p_Val2_49_reg_303 & ap_const_lv6_0);
    tmp_110_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_179_reg_1142),8));
    tmp_111_fu_739_p2 <= (newsignbit_fu_731_p3 xor ap_const_lv1_1);
    tmp_113_fu_785_p2 <= (tmp_182_fu_761_p3 xor ap_const_lv1_1);
    tmp_114_fu_819_p2 <= (signbit_reg_1152 xor ap_const_lv1_1);
    tmp_158_fu_359_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_355_p1) - unsigned(tmp_cast_fu_343_p1));
        tmp_159_cast_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_109_fu_679_p3),16));

    tmp_159_fu_369_p3 <= (co_reg_245 & ap_const_lv4_0);
    tmp_160_fu_381_p3 <= (co_reg_245 & ap_const_lv1_0);
    tmp_161_fu_393_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_377_p1) + unsigned(p_shl3_cast_fu_389_p1));
    tmp_162_fu_413_p3 <= (newIndex_fu_403_p4 & ap_const_lv4_0);
    tmp_163_fu_399_p1 <= co_reg_245(3 - 1 downto 0);
    tmp_164_fu_425_p3 <= (newIndex_fu_403_p4 & ap_const_lv1_0);
    tmp_165_fu_437_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_421_p1) + unsigned(p_shl1_cast_fu_433_p1));
    tmp_166_fu_453_p2 <= std_logic_vector(unsigned(tmp_cast_57_fu_449_p1) + unsigned(tmp_161_reg_1003));
    tmp_167_fu_466_p3 <= (tmp_166_fu_453_p2 & ap_const_lv1_0);
    tmp_168_fu_478_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_458_p3) + unsigned(p_shl6_cast_fu_474_p1));
    tmp_169_fu_974_p2 <= std_logic_vector(unsigned(tmp_168_reg_1026) + unsigned(tmp_101_cast_fu_970_p1));
    tmp_170_fu_512_p2 <= std_logic_vector(signed(tmp_174_cast_reg_998) + signed(tmp_102_cast_fu_508_p1));
    tmp_171_fu_542_p2 <= std_logic_vector(shift_left(unsigned(tmp_170_reg_1047),to_integer(unsigned('0' & ap_const_lv9_2(9-1 downto 0)))));
    tmp_172_fu_547_p2 <= std_logic_vector(unsigned(tmp_171_fu_542_p2) - unsigned(tmp_170_reg_1047));
    tmp_173_fu_537_p2 <= std_logic_vector(unsigned(tmp_165_reg_1013) + unsigned(tmp_104_cast_fu_533_p1));
        tmp_174_cast_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_158_fu_359_p2),9));

    tmp_174_fu_559_p3 <= (tmp_173_reg_1053 & ap_const_lv1_0);
    tmp_175_fu_570_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_566_p1) + unsigned(p_shl7_cast_fu_552_p3));
    tmp_176_fu_592_p2 <= std_logic_vector(unsigned(tmp_105_cast_fu_588_p1) + unsigned(tmp_172_reg_1059));
    tmp_177_fu_622_p2 <= std_logic_vector(unsigned(tmp_107_cast_fu_618_p1) + unsigned(tmp_175_reg_1064));
    tmp_180_fu_717_p3 <= p_Val2_50_fu_691_p2(13 downto 13);
    tmp_182_fu_761_p3 <= p_Val2_50_reg_1147(14 downto 14);
    tmp_185_cast_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_169_fu_974_p2),64));
    tmp_193_cast_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_176_fu_592_p2),64));
    tmp_194_cast_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_177_reg_1082),64));
        tmp_98_fu_887_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_280),9));

        tmp_99_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_q0),9));

    tmp_cast_57_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_256),10));
    tmp_cast_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_245),8));
    tmp_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(co_reg_245),64));
    tmp_s_fu_347_p3 <= (co_reg_245 & ap_const_lv2_0);
    underflow_8_fu_928_p2 <= (isneg_reg_1214 and tmp_100_fu_923_p2);
    underflow_fu_847_p2 <= (signbit_reg_1152 and tmp4_fu_841_p2);
    underflow_not_fu_862_p2 <= (tmp5_fu_858_p2 or p_38_i_i_reg_1184);
    w_6_fu_984_p2 <= std_logic_vector(unsigned(w_reg_268) + unsigned(ap_const_lv5_1));
    weight_V_address0 <= tmp_193_cast_fu_597_p1(8 - 1 downto 0);

    weight_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weight_V_ce0 <= ap_const_logic_1;
        else 
            weight_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
