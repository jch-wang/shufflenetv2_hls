// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shuffle_24_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        left_V_address0,
        left_V_ce0,
        left_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        buffer1_1_24_16x16_p_7_address0,
        buffer1_1_24_16x16_p_7_ce0,
        buffer1_1_24_16x16_p_7_q0,
        buffer1_1_24_16x16_p_6_address0,
        buffer1_1_24_16x16_p_6_ce0,
        buffer1_1_24_16x16_p_6_q0,
        buffer1_1_24_16x16_p_5_address0,
        buffer1_1_24_16x16_p_5_ce0,
        buffer1_1_24_16x16_p_5_q0,
        buffer1_1_24_16x16_p_4_address0,
        buffer1_1_24_16x16_p_4_ce0,
        buffer1_1_24_16x16_p_4_q0,
        buffer1_1_24_16x16_p_3_address0,
        buffer1_1_24_16x16_p_3_ce0,
        buffer1_1_24_16x16_p_3_q0,
        buffer1_1_24_16x16_p_2_address0,
        buffer1_1_24_16x16_p_2_ce0,
        buffer1_1_24_16x16_p_2_q0,
        buffer1_1_24_16x16_p_1_address0,
        buffer1_1_24_16x16_p_1_ce0,
        buffer1_1_24_16x16_p_1_q0,
        buffer1_1_24_16x16_p_address0,
        buffer1_1_24_16x16_p_ce0,
        buffer1_1_24_16x16_p_q0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] left_V_address0;
output   left_V_ce0;
input  [7:0] left_V_q0;
output  [13:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [9:0] buffer1_1_24_16x16_p_7_address0;
output   buffer1_1_24_16x16_p_7_ce0;
input  [7:0] buffer1_1_24_16x16_p_7_q0;
output  [9:0] buffer1_1_24_16x16_p_6_address0;
output   buffer1_1_24_16x16_p_6_ce0;
input  [7:0] buffer1_1_24_16x16_p_6_q0;
output  [9:0] buffer1_1_24_16x16_p_5_address0;
output   buffer1_1_24_16x16_p_5_ce0;
input  [7:0] buffer1_1_24_16x16_p_5_q0;
output  [9:0] buffer1_1_24_16x16_p_4_address0;
output   buffer1_1_24_16x16_p_4_ce0;
input  [7:0] buffer1_1_24_16x16_p_4_q0;
output  [9:0] buffer1_1_24_16x16_p_3_address0;
output   buffer1_1_24_16x16_p_3_ce0;
input  [7:0] buffer1_1_24_16x16_p_3_q0;
output  [9:0] buffer1_1_24_16x16_p_2_address0;
output   buffer1_1_24_16x16_p_2_ce0;
input  [7:0] buffer1_1_24_16x16_p_2_q0;
output  [9:0] buffer1_1_24_16x16_p_1_address0;
output   buffer1_1_24_16x16_p_1_ce0;
input  [7:0] buffer1_1_24_16x16_p_1_q0;
output  [9:0] buffer1_1_24_16x16_p_address0;
output   buffer1_1_24_16x16_p_ce0;
input  [7:0] buffer1_1_24_16x16_p_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg left_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg buffer1_1_24_16x16_p_7_ce0;
reg buffer1_1_24_16x16_p_6_ce0;
reg buffer1_1_24_16x16_p_5_ce0;
reg buffer1_1_24_16x16_p_4_ce0;
reg buffer1_1_24_16x16_p_3_ce0;
reg buffer1_1_24_16x16_p_2_ce0;
reg buffer1_1_24_16x16_p_1_ce0;
reg buffer1_1_24_16x16_p_ce0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_553_fu_246_p1;
reg   [0:0] tmp_553_reg_581;
wire    ap_CS_fsm_state2;
wire   [5:0] co_30_fu_256_p2;
reg   [5:0] co_30_reg_588;
wire   [10:0] tmp_454_fu_286_p2;
reg   [10:0] tmp_454_reg_593;
wire   [0:0] exitcond5_fu_250_p2;
wire   [9:0] tmp_458_fu_326_p2;
reg   [9:0] tmp_458_reg_598;
reg   [2:0] arrayNo_reg_603;
wire   [6:0] tmp_462_fu_376_p2;
reg   [6:0] tmp_462_reg_608;
wire   [4:0] h_27_fu_388_p2;
reg   [4:0] h_27_reg_616;
wire    ap_CS_fsm_state3;
wire   [13:0] tmp_464_fu_431_p2;
reg   [13:0] tmp_464_reg_621;
wire   [0:0] exitcond4_fu_382_p2;
wire   [14:0] tmp_466_fu_462_p2;
reg   [14:0] tmp_466_reg_626;
wire   [10:0] tmp_468_fu_493_p2;
reg   [10:0] tmp_468_reg_631;
wire   [4:0] w_32_fu_505_p2;
reg   [4:0] w_32_reg_639;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_499_p2;
reg   [13:0] output_V_addr_reg_649;
wire    ap_CS_fsm_state5;
wire   [7:0] tmp_fu_560_p10;
wire    ap_CS_fsm_state6;
reg   [5:0] co_reg_203;
reg   [4:0] h_reg_214;
reg   [4:0] w_reg_225;
wire    ap_CS_fsm_state7;
reg   [7:0] storemerge_reg_236;
wire   [63:0] tmp_588_cast_fu_528_p1;
wire   [63:0] tmp_589_cast_fu_538_p1;
wire   [63:0] tmp_590_cast_fu_548_p1;
wire   [9:0] tmp_s_fu_262_p3;
wire   [6:0] tmp_453_fu_274_p3;
wire   [10:0] p_shl5_cast_fu_282_p1;
wire   [10:0] p_shl4_cast_fu_270_p1;
wire   [4:0] tmp_455_fu_292_p4;
wire   [8:0] tmp_456_fu_302_p3;
wire   [5:0] tmp_457_fu_314_p3;
wire   [9:0] p_shl3_cast_fu_322_p1;
wire   [9:0] p_shl2_cast_fu_310_p1;
wire   [1:0] tmp_459_fu_342_p4;
wire   [5:0] tmp_460_fu_352_p3;
wire   [2:0] tmp_461_fu_364_p3;
wire   [6:0] p_shl1_cast_fu_372_p1;
wire   [6:0] p_shl_cast_fu_360_p1;
wire   [9:0] tmp_cast_fu_402_p1;
wire   [9:0] tmp_463_fu_406_p2;
wire   [10:0] tmp_554_fu_419_p3;
wire   [13:0] p_shl10_cast_fu_411_p3;
wire   [13:0] p_shl11_cast_fu_427_p1;
wire   [10:0] tmp_cast9_fu_398_p1;
wire   [10:0] tmp_465_fu_437_p2;
wire   [11:0] tmp_555_fu_450_p3;
wire   [14:0] p_shl8_cast_fu_442_p3;
wire   [14:0] p_shl9_cast_fu_458_p1;
wire   [6:0] tmp_cast8_fu_394_p1;
wire   [6:0] tmp_467_fu_468_p2;
wire   [7:0] tmp_556_fu_481_p3;
wire   [10:0] p_shl6_cast_fu_473_p3;
wire   [10:0] p_shl7_cast_fu_489_p1;
wire   [13:0] tmp_220_cast_fu_519_p1;
wire   [13:0] tmp_469_fu_523_p2;
wire   [14:0] tmp_220_cast2_fu_515_p1;
wire   [14:0] tmp_470_fu_533_p2;
wire   [10:0] tmp_220_cast1_fu_511_p1;
wire   [10:0] tmp_471_fu_543_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

ShuffleNetV2_mux_jbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_jbC_x_U106(
    .din1(buffer1_1_24_16x16_p_7_q0),
    .din2(buffer1_1_24_16x16_p_6_q0),
    .din3(buffer1_1_24_16x16_p_5_q0),
    .din4(buffer1_1_24_16x16_p_4_q0),
    .din5(buffer1_1_24_16x16_p_3_q0),
    .din6(buffer1_1_24_16x16_p_2_q0),
    .din7(buffer1_1_24_16x16_p_1_q0),
    .din8(buffer1_1_24_16x16_p_q0),
    .din9(arrayNo_reg_603),
    .dout(tmp_fu_560_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_382_p2 == 1'd1))) begin
        co_reg_203 <= co_30_reg_588;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_203 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_499_p2 == 1'd1))) begin
        h_reg_214 <= h_27_reg_616;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_250_p2 == 1'd0))) begin
        h_reg_214 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        storemerge_reg_236 <= tmp_fu_560_p10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        storemerge_reg_236 <= left_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond4_fu_382_p2))) begin
        w_reg_225 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        w_reg_225 <= w_32_reg_639;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_250_p2 == 1'd0))) begin
        arrayNo_reg_603 <= {{co_reg_203[3:1]}};
        tmp_454_reg_593[10 : 1] <= tmp_454_fu_286_p2[10 : 1];
        tmp_458_reg_598[9 : 1] <= tmp_458_fu_326_p2[9 : 1];
        tmp_462_reg_608[6 : 1] <= tmp_462_fu_376_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_30_reg_588 <= co_30_fu_256_p2;
        tmp_553_reg_581 <= tmp_553_fu_246_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_27_reg_616 <= h_27_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_499_p2))) begin
        output_V_addr_reg_649 <= tmp_589_cast_fu_538_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond4_fu_382_p2))) begin
        tmp_464_reg_621[13 : 1] <= tmp_464_fu_431_p2[13 : 1];
        tmp_466_reg_626[14 : 1] <= tmp_466_fu_462_p2[14 : 1];
        tmp_468_reg_631[10 : 1] <= tmp_468_fu_493_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_32_reg_639 <= w_32_fu_505_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_250_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_250_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_1_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_2_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_3_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_4_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_5_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_6_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_7_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_24_16x16_p_ce0 = 1'b1;
    end else begin
        buffer1_1_24_16x16_p_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        left_V_ce0 = 1'b1;
    end else begin
        left_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_250_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_382_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_499_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_499_p2) & (tmp_553_reg_581 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign buffer1_1_24_16x16_p_1_address0 = tmp_590_cast_fu_548_p1;

assign buffer1_1_24_16x16_p_2_address0 = tmp_590_cast_fu_548_p1;

assign buffer1_1_24_16x16_p_3_address0 = tmp_590_cast_fu_548_p1;

assign buffer1_1_24_16x16_p_4_address0 = tmp_590_cast_fu_548_p1;

assign buffer1_1_24_16x16_p_5_address0 = tmp_590_cast_fu_548_p1;

assign buffer1_1_24_16x16_p_6_address0 = tmp_590_cast_fu_548_p1;

assign buffer1_1_24_16x16_p_7_address0 = tmp_590_cast_fu_548_p1;

assign buffer1_1_24_16x16_p_address0 = tmp_590_cast_fu_548_p1;

assign co_30_fu_256_p2 = (6'd1 + co_reg_203);

assign exitcond4_fu_382_p2 = ((h_reg_214 == 5'd18) ? 1'b1 : 1'b0);

assign exitcond5_fu_250_p2 = ((co_reg_203 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond_fu_499_p2 = ((w_reg_225 == 5'd18) ? 1'b1 : 1'b0);

assign h_27_fu_388_p2 = (h_reg_214 + 5'd1);

assign left_V_address0 = tmp_588_cast_fu_528_p1;

assign output_V_address0 = output_V_addr_reg_649;

assign output_V_d0 = storemerge_reg_236;

assign p_shl10_cast_fu_411_p3 = {{tmp_463_fu_406_p2}, {4'd0}};

assign p_shl11_cast_fu_427_p1 = tmp_554_fu_419_p3;

assign p_shl1_cast_fu_372_p1 = tmp_461_fu_364_p3;

assign p_shl2_cast_fu_310_p1 = tmp_456_fu_302_p3;

assign p_shl3_cast_fu_322_p1 = tmp_457_fu_314_p3;

assign p_shl4_cast_fu_270_p1 = tmp_s_fu_262_p3;

assign p_shl5_cast_fu_282_p1 = tmp_453_fu_274_p3;

assign p_shl6_cast_fu_473_p3 = {{tmp_467_fu_468_p2}, {4'd0}};

assign p_shl7_cast_fu_489_p1 = tmp_556_fu_481_p3;

assign p_shl8_cast_fu_442_p3 = {{tmp_465_fu_437_p2}, {4'd0}};

assign p_shl9_cast_fu_458_p1 = tmp_555_fu_450_p3;

assign p_shl_cast_fu_360_p1 = tmp_460_fu_352_p3;

assign tmp_220_cast1_fu_511_p1 = w_reg_225;

assign tmp_220_cast2_fu_515_p1 = w_reg_225;

assign tmp_220_cast_fu_519_p1 = w_reg_225;

assign tmp_453_fu_274_p3 = {{co_reg_203}, {1'd0}};

assign tmp_454_fu_286_p2 = (p_shl5_cast_fu_282_p1 + p_shl4_cast_fu_270_p1);

assign tmp_455_fu_292_p4 = {{co_reg_203[5:1]}};

assign tmp_456_fu_302_p3 = {{tmp_455_fu_292_p4}, {4'd0}};

assign tmp_457_fu_314_p3 = {{tmp_455_fu_292_p4}, {1'd0}};

assign tmp_458_fu_326_p2 = (p_shl3_cast_fu_322_p1 + p_shl2_cast_fu_310_p1);

assign tmp_459_fu_342_p4 = {{co_reg_203[5:4]}};

assign tmp_460_fu_352_p3 = {{tmp_459_fu_342_p4}, {4'd0}};

assign tmp_461_fu_364_p3 = {{tmp_459_fu_342_p4}, {1'd0}};

assign tmp_462_fu_376_p2 = (p_shl1_cast_fu_372_p1 + p_shl_cast_fu_360_p1);

assign tmp_463_fu_406_p2 = (tmp_cast_fu_402_p1 + tmp_458_reg_598);

assign tmp_464_fu_431_p2 = (p_shl10_cast_fu_411_p3 + p_shl11_cast_fu_427_p1);

assign tmp_465_fu_437_p2 = (tmp_cast9_fu_398_p1 + tmp_454_reg_593);

assign tmp_466_fu_462_p2 = (p_shl8_cast_fu_442_p3 + p_shl9_cast_fu_458_p1);

assign tmp_467_fu_468_p2 = (tmp_cast8_fu_394_p1 + tmp_462_reg_608);

assign tmp_468_fu_493_p2 = (p_shl6_cast_fu_473_p3 + p_shl7_cast_fu_489_p1);

assign tmp_469_fu_523_p2 = (tmp_464_reg_621 + tmp_220_cast_fu_519_p1);

assign tmp_470_fu_533_p2 = (tmp_466_reg_626 + tmp_220_cast2_fu_515_p1);

assign tmp_471_fu_543_p2 = (tmp_468_reg_631 + tmp_220_cast1_fu_511_p1);

assign tmp_553_fu_246_p1 = co_reg_203[0:0];

assign tmp_554_fu_419_p3 = {{tmp_463_fu_406_p2}, {1'd0}};

assign tmp_555_fu_450_p3 = {{tmp_465_fu_437_p2}, {1'd0}};

assign tmp_556_fu_481_p3 = {{tmp_467_fu_468_p2}, {1'd0}};

assign tmp_588_cast_fu_528_p1 = tmp_469_fu_523_p2;

assign tmp_589_cast_fu_538_p1 = tmp_470_fu_533_p2;

assign tmp_590_cast_fu_548_p1 = tmp_471_fu_543_p2;

assign tmp_cast8_fu_394_p1 = h_reg_214;

assign tmp_cast9_fu_398_p1 = h_reg_214;

assign tmp_cast_fu_402_p1 = h_reg_214;

assign tmp_s_fu_262_p3 = {{co_reg_203}, {4'd0}};

assign w_32_fu_505_p2 = (w_reg_225 + 5'd1);

always @ (posedge ap_clk) begin
    tmp_454_reg_593[0] <= 1'b0;
    tmp_458_reg_598[0] <= 1'b0;
    tmp_462_reg_608[0] <= 1'b0;
    tmp_464_reg_621[0] <= 1'b0;
    tmp_466_reg_626[0] <= 1'b0;
    tmp_468_reg_631[0] <= 1'b0;
end

endmodule //shuffle_24_p
