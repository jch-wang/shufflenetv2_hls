// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_weight_V_AWVALID,
        m_axi_weight_V_AWREADY,
        m_axi_weight_V_AWADDR,
        m_axi_weight_V_AWID,
        m_axi_weight_V_AWLEN,
        m_axi_weight_V_AWSIZE,
        m_axi_weight_V_AWBURST,
        m_axi_weight_V_AWLOCK,
        m_axi_weight_V_AWCACHE,
        m_axi_weight_V_AWPROT,
        m_axi_weight_V_AWQOS,
        m_axi_weight_V_AWREGION,
        m_axi_weight_V_AWUSER,
        m_axi_weight_V_WVALID,
        m_axi_weight_V_WREADY,
        m_axi_weight_V_WDATA,
        m_axi_weight_V_WSTRB,
        m_axi_weight_V_WLAST,
        m_axi_weight_V_WID,
        m_axi_weight_V_WUSER,
        m_axi_weight_V_ARVALID,
        m_axi_weight_V_ARREADY,
        m_axi_weight_V_ARADDR,
        m_axi_weight_V_ARID,
        m_axi_weight_V_ARLEN,
        m_axi_weight_V_ARSIZE,
        m_axi_weight_V_ARBURST,
        m_axi_weight_V_ARLOCK,
        m_axi_weight_V_ARCACHE,
        m_axi_weight_V_ARPROT,
        m_axi_weight_V_ARQOS,
        m_axi_weight_V_ARREGION,
        m_axi_weight_V_ARUSER,
        m_axi_weight_V_RVALID,
        m_axi_weight_V_RREADY,
        m_axi_weight_V_RDATA,
        m_axi_weight_V_RLAST,
        m_axi_weight_V_RID,
        m_axi_weight_V_RUSER,
        m_axi_weight_V_RRESP,
        m_axi_weight_V_BVALID,
        m_axi_weight_V_BREADY,
        m_axi_weight_V_BRESP,
        m_axi_weight_V_BID,
        m_axi_weight_V_BUSER,
        fc_weight_V11,
        bias_V_address0,
        bias_V_ce0,
        bias_V_q0,
        m_axi_output_V_AWVALID,
        m_axi_output_V_AWREADY,
        m_axi_output_V_AWADDR,
        m_axi_output_V_AWID,
        m_axi_output_V_AWLEN,
        m_axi_output_V_AWSIZE,
        m_axi_output_V_AWBURST,
        m_axi_output_V_AWLOCK,
        m_axi_output_V_AWCACHE,
        m_axi_output_V_AWPROT,
        m_axi_output_V_AWQOS,
        m_axi_output_V_AWREGION,
        m_axi_output_V_AWUSER,
        m_axi_output_V_WVALID,
        m_axi_output_V_WREADY,
        m_axi_output_V_WDATA,
        m_axi_output_V_WSTRB,
        m_axi_output_V_WLAST,
        m_axi_output_V_WID,
        m_axi_output_V_WUSER,
        m_axi_output_V_ARVALID,
        m_axi_output_V_ARREADY,
        m_axi_output_V_ARADDR,
        m_axi_output_V_ARID,
        m_axi_output_V_ARLEN,
        m_axi_output_V_ARSIZE,
        m_axi_output_V_ARBURST,
        m_axi_output_V_ARLOCK,
        m_axi_output_V_ARCACHE,
        m_axi_output_V_ARPROT,
        m_axi_output_V_ARQOS,
        m_axi_output_V_ARREGION,
        m_axi_output_V_ARUSER,
        m_axi_output_V_RVALID,
        m_axi_output_V_RREADY,
        m_axi_output_V_RDATA,
        m_axi_output_V_RLAST,
        m_axi_output_V_RID,
        m_axi_output_V_RUSER,
        m_axi_output_V_RRESP,
        m_axi_output_V_BVALID,
        m_axi_output_V_BREADY,
        m_axi_output_V_BRESP,
        m_axi_output_V_BID,
        m_axi_output_V_BUSER,
        fc_output_V15,
        avgpool_output_V_address0,
        avgpool_output_V_ce0,
        avgpool_output_V_q0
);

parameter    ap_ST_fsm_state1 = 22'd1;
parameter    ap_ST_fsm_state2 = 22'd2;
parameter    ap_ST_fsm_state3 = 22'd4;
parameter    ap_ST_fsm_state4 = 22'd8;
parameter    ap_ST_fsm_state5 = 22'd16;
parameter    ap_ST_fsm_state6 = 22'd32;
parameter    ap_ST_fsm_state7 = 22'd64;
parameter    ap_ST_fsm_state8 = 22'd128;
parameter    ap_ST_fsm_state9 = 22'd256;
parameter    ap_ST_fsm_state10 = 22'd512;
parameter    ap_ST_fsm_state11 = 22'd1024;
parameter    ap_ST_fsm_state12 = 22'd2048;
parameter    ap_ST_fsm_state13 = 22'd4096;
parameter    ap_ST_fsm_state14 = 22'd8192;
parameter    ap_ST_fsm_state15 = 22'd16384;
parameter    ap_ST_fsm_state16 = 22'd32768;
parameter    ap_ST_fsm_state17 = 22'd65536;
parameter    ap_ST_fsm_state18 = 22'd131072;
parameter    ap_ST_fsm_state19 = 22'd262144;
parameter    ap_ST_fsm_state20 = 22'd524288;
parameter    ap_ST_fsm_state21 = 22'd1048576;
parameter    ap_ST_fsm_state22 = 22'd2097152;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_weight_V_AWVALID;
input   m_axi_weight_V_AWREADY;
output  [31:0] m_axi_weight_V_AWADDR;
output  [0:0] m_axi_weight_V_AWID;
output  [31:0] m_axi_weight_V_AWLEN;
output  [2:0] m_axi_weight_V_AWSIZE;
output  [1:0] m_axi_weight_V_AWBURST;
output  [1:0] m_axi_weight_V_AWLOCK;
output  [3:0] m_axi_weight_V_AWCACHE;
output  [2:0] m_axi_weight_V_AWPROT;
output  [3:0] m_axi_weight_V_AWQOS;
output  [3:0] m_axi_weight_V_AWREGION;
output  [0:0] m_axi_weight_V_AWUSER;
output   m_axi_weight_V_WVALID;
input   m_axi_weight_V_WREADY;
output  [7:0] m_axi_weight_V_WDATA;
output  [0:0] m_axi_weight_V_WSTRB;
output   m_axi_weight_V_WLAST;
output  [0:0] m_axi_weight_V_WID;
output  [0:0] m_axi_weight_V_WUSER;
output   m_axi_weight_V_ARVALID;
input   m_axi_weight_V_ARREADY;
output  [31:0] m_axi_weight_V_ARADDR;
output  [0:0] m_axi_weight_V_ARID;
output  [31:0] m_axi_weight_V_ARLEN;
output  [2:0] m_axi_weight_V_ARSIZE;
output  [1:0] m_axi_weight_V_ARBURST;
output  [1:0] m_axi_weight_V_ARLOCK;
output  [3:0] m_axi_weight_V_ARCACHE;
output  [2:0] m_axi_weight_V_ARPROT;
output  [3:0] m_axi_weight_V_ARQOS;
output  [3:0] m_axi_weight_V_ARREGION;
output  [0:0] m_axi_weight_V_ARUSER;
input   m_axi_weight_V_RVALID;
output   m_axi_weight_V_RREADY;
input  [7:0] m_axi_weight_V_RDATA;
input   m_axi_weight_V_RLAST;
input  [0:0] m_axi_weight_V_RID;
input  [0:0] m_axi_weight_V_RUSER;
input  [1:0] m_axi_weight_V_RRESP;
input   m_axi_weight_V_BVALID;
output   m_axi_weight_V_BREADY;
input  [1:0] m_axi_weight_V_BRESP;
input  [0:0] m_axi_weight_V_BID;
input  [0:0] m_axi_weight_V_BUSER;
input  [31:0] fc_weight_V11;
output  [3:0] bias_V_address0;
output   bias_V_ce0;
input  [7:0] bias_V_q0;
output   m_axi_output_V_AWVALID;
input   m_axi_output_V_AWREADY;
output  [31:0] m_axi_output_V_AWADDR;
output  [0:0] m_axi_output_V_AWID;
output  [31:0] m_axi_output_V_AWLEN;
output  [2:0] m_axi_output_V_AWSIZE;
output  [1:0] m_axi_output_V_AWBURST;
output  [1:0] m_axi_output_V_AWLOCK;
output  [3:0] m_axi_output_V_AWCACHE;
output  [2:0] m_axi_output_V_AWPROT;
output  [3:0] m_axi_output_V_AWQOS;
output  [3:0] m_axi_output_V_AWREGION;
output  [0:0] m_axi_output_V_AWUSER;
output   m_axi_output_V_WVALID;
input   m_axi_output_V_WREADY;
output  [7:0] m_axi_output_V_WDATA;
output  [0:0] m_axi_output_V_WSTRB;
output   m_axi_output_V_WLAST;
output  [0:0] m_axi_output_V_WID;
output  [0:0] m_axi_output_V_WUSER;
output   m_axi_output_V_ARVALID;
input   m_axi_output_V_ARREADY;
output  [31:0] m_axi_output_V_ARADDR;
output  [0:0] m_axi_output_V_ARID;
output  [31:0] m_axi_output_V_ARLEN;
output  [2:0] m_axi_output_V_ARSIZE;
output  [1:0] m_axi_output_V_ARBURST;
output  [1:0] m_axi_output_V_ARLOCK;
output  [3:0] m_axi_output_V_ARCACHE;
output  [2:0] m_axi_output_V_ARPROT;
output  [3:0] m_axi_output_V_ARQOS;
output  [3:0] m_axi_output_V_ARREGION;
output  [0:0] m_axi_output_V_ARUSER;
input   m_axi_output_V_RVALID;
output   m_axi_output_V_RREADY;
input  [7:0] m_axi_output_V_RDATA;
input   m_axi_output_V_RLAST;
input  [0:0] m_axi_output_V_RID;
input  [0:0] m_axi_output_V_RUSER;
input  [1:0] m_axi_output_V_RRESP;
input   m_axi_output_V_BVALID;
output   m_axi_output_V_BREADY;
input  [1:0] m_axi_output_V_BRESP;
input  [0:0] m_axi_output_V_BID;
input  [0:0] m_axi_output_V_BUSER;
input  [31:0] fc_output_V15;
output  [8:0] avgpool_output_V_address0;
output   avgpool_output_V_ce0;
input  [7:0] avgpool_output_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_weight_V_ARVALID;
reg m_axi_weight_V_RREADY;
reg bias_V_ce0;
reg m_axi_output_V_AWVALID;
reg m_axi_output_V_WVALID;
reg m_axi_output_V_BREADY;
reg avgpool_output_V_ce0;

(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    weight_V_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    weight_V_blk_n_R;
wire    ap_CS_fsm_state11;
reg    output_V_blk_n_AW;
reg    output_V_blk_n_W;
wire    ap_CS_fsm_state18;
reg    output_V_blk_n_B;
wire    ap_CS_fsm_state22;
reg    ap_sig_ioackin_m_axi_output_V_AWREADY;
wire  signed [32:0] sext_cast_fu_217_p1;
reg  signed [32:0] sext_cast_reg_602;
wire   [3:0] co_32_fu_227_p2;
reg   [3:0] co_32_reg_610;
wire    ap_CS_fsm_state2;
reg   [31:0] weight_V_addr_reg_615;
wire   [0:0] exitcond21_fu_221_p2;
wire   [63:0] tmp_fu_260_p1;
reg   [63:0] tmp_reg_621;
wire    ap_CS_fsm_state9;
wire   [9:0] ci_7_fu_270_p2;
reg   [9:0] ci_7_reg_629;
wire    ap_CS_fsm_state10;
wire   [0:0] exitcond_fu_264_p2;
reg   [7:0] weight_V_addr_read_reg_644;
reg   [7:0] avgpool_output_V_loa_reg_649;
wire   [15:0] p_Val2_56_fu_287_p2;
reg   [15:0] p_Val2_56_reg_654;
wire    ap_CS_fsm_state12;
reg   [0:0] tmp_566_reg_659;
wire   [15:0] p_Val2_57_fu_313_p2;
reg   [15:0] p_Val2_57_reg_664;
wire    ap_CS_fsm_state13;
reg   [0:0] signbit_reg_669;
wire   [7:0] p_Val2_59_fu_347_p2;
reg   [7:0] p_Val2_59_reg_676;
wire   [0:0] newsignbit_fu_353_p3;
reg   [0:0] newsignbit_reg_682;
wire   [0:0] carry_fu_367_p2;
reg   [0:0] carry_reg_688;
reg   [1:0] tmp_228_reg_695;
wire   [0:0] p_38_i_i_fu_425_p2;
reg   [0:0] p_38_i_i_reg_701;
wire    ap_CS_fsm_state14;
wire   [0:0] tmp_230_fu_441_p2;
reg   [0:0] tmp_230_reg_706;
wire   [0:0] brmerge40_demorgan_i_fu_452_p2;
reg   [0:0] brmerge40_demorgan_i_reg_711;
wire   [0:0] underflow_fu_469_p2;
reg   [0:0] underflow_reg_716;
wire   [0:0] brmerge_i_i_i_fu_474_p2;
reg   [0:0] brmerge_i_i_i_reg_721;
wire   [7:0] sum_V_fu_501_p3;
wire    ap_CS_fsm_state15;
reg   [7:0] p_Val2_53_reg_731;
wire    ap_CS_fsm_state16;
wire   [7:0] result_1_fu_589_p3;
reg   [7:0] result_1_reg_737;
wire    ap_CS_fsm_state17;
reg   [3:0] co_reg_171;
reg    ap_sig_ioackin_m_axi_output_V_WREADY;
reg   [7:0] p_Val2_s_reg_183;
reg   [9:0] ci_reg_195;
wire   [63:0] tmp_224_fu_276_p1;
wire  signed [63:0] sext2_fu_206_p1;
wire  signed [63:0] tmp_562_fu_250_p1;
reg    ap_reg_ioackin_m_axi_output_V_AWREADY;
reg    ap_reg_ioackin_m_axi_output_V_WREADY;
reg    ap_reg_ioackin_m_axi_weight_V_ARREADY;
reg    ap_sig_ioackin_m_axi_weight_V_ARREADY;
wire   [12:0] tmp_484_fu_233_p3;
wire   [32:0] tmp_560_fu_241_p1;
wire   [32:0] tmp_561_fu_245_p2;
wire  signed [7:0] p_Val2_56_fu_287_p0;
wire  signed [7:0] p_Val2_56_fu_287_p1;
wire   [13:0] tmp_225_fu_301_p3;
wire  signed [15:0] tmp_243_cast_fu_309_p1;
wire   [7:0] tmp_226_fu_336_p1;
wire   [7:0] p_Val2_58_fu_326_p4;
wire   [0:0] tmp_567_fu_339_p3;
wire   [0:0] tmp_227_fu_361_p2;
wire   [0:0] Range1_all_ones_fu_390_p2;
wire   [0:0] Range1_all_zeros_fu_395_p2;
wire   [0:0] tmp_569_fu_383_p3;
wire   [0:0] tmp_229_fu_407_p2;
wire   [0:0] p_41_i_i_fu_413_p2;
wire   [0:0] deleted_zeros_fu_400_p3;
wire   [0:0] p_not_i_i_fu_430_p2;
wire   [0:0] brmerge_i_i7_fu_436_p2;
wire   [0:0] deleted_ones_fu_418_p3;
wire   [0:0] tmp2_demorgan_fu_457_p2;
wire   [0:0] tmp2_fu_463_p2;
wire   [0:0] overflow_fu_446_p2;
wire   [0:0] tmp3_fu_480_p2;
wire   [0:0] underflow_not_fu_484_p2;
wire   [7:0] p_Val2_79_mux_fu_489_p3;
wire   [7:0] p_Val2_s_171_fu_495_p3;
wire  signed [8:0] tmp_222_fu_513_p1;
wire  signed [8:0] tmp_s_fu_509_p1;
wire   [8:0] p_Val2_54_fu_516_p2;
wire   [7:0] result_V_fu_530_p2;
wire   [0:0] newsignbit_9_fu_535_p3;
wire   [0:0] isneg_fu_522_p3;
wire   [0:0] tmp_223_fu_543_p2;
wire   [0:0] isneg_not_fu_561_p2;
wire   [0:0] brmerge_i_i_fu_555_p2;
wire   [0:0] underflow_9_fu_549_p2;
wire   [0:0] brmerge1_fu_567_p2;
wire   [7:0] result_V_mux_fu_573_p3;
wire   [7:0] p_result_V_fu_581_p3;
reg   [21:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 22'd1;
#0 ap_reg_ioackin_m_axi_output_V_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_output_V_WREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_weight_V_ARREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_output_V_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if (~((1'b0 == ap_start) | (1'b0 == ap_sig_ioackin_m_axi_output_V_AWREADY))) begin
                ap_reg_ioackin_m_axi_output_V_AWREADY <= 1'b0;
            end else if (((ap_start == 1'b1) & (1'b1 == m_axi_output_V_AWREADY))) begin
                ap_reg_ioackin_m_axi_output_V_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_output_V_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state18)) begin
            if ((ap_sig_ioackin_m_axi_output_V_WREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_output_V_WREADY <= 1'b0;
            end else if ((1'b1 == m_axi_output_V_WREADY)) begin
                ap_reg_ioackin_m_axi_output_V_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_weight_V_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            if ((ap_sig_ioackin_m_axi_weight_V_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_weight_V_ARREADY <= 1'b0;
            end else if ((1'b1 == m_axi_weight_V_ARREADY)) begin
                ap_reg_ioackin_m_axi_weight_V_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ci_reg_195 <= ci_7_reg_629;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        ci_reg_195 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (ap_sig_ioackin_m_axi_output_V_WREADY == 1'b1))) begin
        co_reg_171 <= co_32_reg_610;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == ap_sig_ioackin_m_axi_output_V_AWREADY)))) begin
        co_reg_171 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        p_Val2_s_reg_183 <= sum_V_fu_501_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        p_Val2_s_reg_183 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (m_axi_weight_V_RVALID == 1'b1))) begin
        avgpool_output_V_loa_reg_649 <= avgpool_output_V_q0;
        weight_V_addr_read_reg_644 <= m_axi_weight_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        brmerge40_demorgan_i_reg_711 <= brmerge40_demorgan_i_fu_452_p2;
        brmerge_i_i_i_reg_721 <= brmerge_i_i_i_fu_474_p2;
        p_38_i_i_reg_701 <= p_38_i_i_fu_425_p2;
        tmp_230_reg_706 <= tmp_230_fu_441_p2;
        underflow_reg_716 <= underflow_fu_469_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        carry_reg_688 <= carry_fu_367_p2;
        newsignbit_reg_682 <= p_Val2_59_fu_347_p2[32'd7];
        p_Val2_57_reg_664 <= p_Val2_57_fu_313_p2;
        p_Val2_59_reg_676 <= p_Val2_59_fu_347_p2;
        signbit_reg_669 <= p_Val2_57_fu_313_p2[32'd15];
        tmp_228_reg_695 <= {{p_Val2_57_fu_313_p2[15:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ci_7_reg_629 <= ci_7_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_32_reg_610 <= co_32_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        p_Val2_53_reg_731 <= bias_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        p_Val2_56_reg_654 <= p_Val2_56_fu_287_p2;
        tmp_566_reg_659 <= p_Val2_56_fu_287_p2[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        result_1_reg_737 <= result_1_fu_589_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == ap_sig_ioackin_m_axi_output_V_AWREADY)))) begin
        sext_cast_reg_602 <= sext_cast_fu_217_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_reg_621[3 : 0] <= tmp_fu_260_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond21_fu_221_p2))) begin
        weight_V_addr_reg_615 <= tmp_562_fu_250_p1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state22) & (m_axi_output_V_BVALID == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) & (m_axi_output_V_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_output_V_AWREADY)) begin
        ap_sig_ioackin_m_axi_output_V_AWREADY = m_axi_output_V_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_output_V_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_output_V_WREADY)) begin
        ap_sig_ioackin_m_axi_output_V_WREADY = m_axi_output_V_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_output_V_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_weight_V_ARREADY)) begin
        ap_sig_ioackin_m_axi_weight_V_ARREADY = m_axi_weight_V_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_weight_V_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        avgpool_output_V_ce0 = 1'b1;
    end else begin
        avgpool_output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        bias_V_ce0 = 1'b1;
    end else begin
        bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (1'b0 == ap_reg_ioackin_m_axi_output_V_AWREADY))) begin
        m_axi_output_V_AWVALID = 1'b1;
    end else begin
        m_axi_output_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) & (m_axi_output_V_BVALID == 1'b1))) begin
        m_axi_output_V_BREADY = 1'b1;
    end else begin
        m_axi_output_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (1'b0 == ap_reg_ioackin_m_axi_output_V_WREADY))) begin
        m_axi_output_V_WVALID = 1'b1;
    end else begin
        m_axi_output_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_reg_ioackin_m_axi_weight_V_ARREADY))) begin
        m_axi_weight_V_ARVALID = 1'b1;
    end else begin
        m_axi_weight_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (m_axi_weight_V_RVALID == 1'b1))) begin
        m_axi_weight_V_RREADY = 1'b1;
    end else begin
        m_axi_weight_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        output_V_blk_n_AW = m_axi_output_V_AWREADY;
    end else begin
        output_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        output_V_blk_n_B = m_axi_output_V_BVALID;
    end else begin
        output_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        output_V_blk_n_W = m_axi_output_V_WREADY;
    end else begin
        output_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weight_V_blk_n_AR = m_axi_weight_V_ARREADY;
    end else begin
        weight_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        weight_V_blk_n_R = m_axi_weight_V_RVALID;
    end else begin
        weight_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == ap_sig_ioackin_m_axi_output_V_AWREADY)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond21_fu_221_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (ap_sig_ioackin_m_axi_weight_V_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (exitcond_fu_264_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (m_axi_weight_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (ap_sig_ioackin_m_axi_output_V_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (m_axi_output_V_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_390_p2 = ((tmp_228_reg_695 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_395_p2 = ((tmp_228_reg_695 == 2'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign avgpool_output_V_address0 = tmp_224_fu_276_p1;

assign bias_V_address0 = tmp_reg_621;

assign brmerge1_fu_567_p2 = (newsignbit_9_fu_535_p3 | isneg_not_fu_561_p2);

assign brmerge40_demorgan_i_fu_452_p2 = (newsignbit_reg_682 & deleted_ones_fu_418_p3);

assign brmerge_i_i7_fu_436_p2 = (newsignbit_reg_682 | p_not_i_i_fu_430_p2);

assign brmerge_i_i_fu_555_p2 = (isneg_fu_522_p3 ^ newsignbit_9_fu_535_p3);

assign brmerge_i_i_i_fu_474_p2 = (underflow_fu_469_p2 | overflow_fu_446_p2);

assign carry_fu_367_p2 = (tmp_567_fu_339_p3 & tmp_227_fu_361_p2);

assign ci_7_fu_270_p2 = (ci_reg_195 + 10'd1);

assign co_32_fu_227_p2 = (co_reg_171 + 4'd1);

assign deleted_ones_fu_418_p3 = ((carry_reg_688[0:0] === 1'b1) ? p_41_i_i_fu_413_p2 : Range1_all_ones_fu_390_p2);

assign deleted_zeros_fu_400_p3 = ((carry_reg_688[0:0] === 1'b1) ? Range1_all_ones_fu_390_p2 : Range1_all_zeros_fu_395_p2);

assign exitcond21_fu_221_p2 = ((co_reg_171 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_fu_264_p2 = ((ci_reg_195 == 10'd512) ? 1'b1 : 1'b0);

assign isneg_fu_522_p3 = p_Val2_54_fu_516_p2[32'd8];

assign isneg_not_fu_561_p2 = (isneg_fu_522_p3 ^ 1'd1);

assign m_axi_output_V_ARADDR = 32'd0;

assign m_axi_output_V_ARBURST = 2'd0;

assign m_axi_output_V_ARCACHE = 4'd0;

assign m_axi_output_V_ARID = 1'd0;

assign m_axi_output_V_ARLEN = 32'd0;

assign m_axi_output_V_ARLOCK = 2'd0;

assign m_axi_output_V_ARPROT = 3'd0;

assign m_axi_output_V_ARQOS = 4'd0;

assign m_axi_output_V_ARREGION = 4'd0;

assign m_axi_output_V_ARSIZE = 3'd0;

assign m_axi_output_V_ARUSER = 1'd0;

assign m_axi_output_V_ARVALID = 1'b0;

assign m_axi_output_V_AWADDR = sext2_fu_206_p1;

assign m_axi_output_V_AWBURST = 2'd0;

assign m_axi_output_V_AWCACHE = 4'd0;

assign m_axi_output_V_AWID = 1'd0;

assign m_axi_output_V_AWLEN = 32'd10;

assign m_axi_output_V_AWLOCK = 2'd0;

assign m_axi_output_V_AWPROT = 3'd0;

assign m_axi_output_V_AWQOS = 4'd0;

assign m_axi_output_V_AWREGION = 4'd0;

assign m_axi_output_V_AWSIZE = 3'd0;

assign m_axi_output_V_AWUSER = 1'd0;

assign m_axi_output_V_RREADY = 1'b0;

assign m_axi_output_V_WDATA = result_1_reg_737;

assign m_axi_output_V_WID = 1'd0;

assign m_axi_output_V_WLAST = 1'b0;

assign m_axi_output_V_WSTRB = 1'd1;

assign m_axi_output_V_WUSER = 1'd0;

assign m_axi_weight_V_ARADDR = weight_V_addr_reg_615;

assign m_axi_weight_V_ARBURST = 2'd0;

assign m_axi_weight_V_ARCACHE = 4'd0;

assign m_axi_weight_V_ARID = 1'd0;

assign m_axi_weight_V_ARLEN = 32'd512;

assign m_axi_weight_V_ARLOCK = 2'd0;

assign m_axi_weight_V_ARPROT = 3'd0;

assign m_axi_weight_V_ARQOS = 4'd0;

assign m_axi_weight_V_ARREGION = 4'd0;

assign m_axi_weight_V_ARSIZE = 3'd0;

assign m_axi_weight_V_ARUSER = 1'd0;

assign m_axi_weight_V_AWADDR = 32'd0;

assign m_axi_weight_V_AWBURST = 2'd0;

assign m_axi_weight_V_AWCACHE = 4'd0;

assign m_axi_weight_V_AWID = 1'd0;

assign m_axi_weight_V_AWLEN = 32'd0;

assign m_axi_weight_V_AWLOCK = 2'd0;

assign m_axi_weight_V_AWPROT = 3'd0;

assign m_axi_weight_V_AWQOS = 4'd0;

assign m_axi_weight_V_AWREGION = 4'd0;

assign m_axi_weight_V_AWSIZE = 3'd0;

assign m_axi_weight_V_AWUSER = 1'd0;

assign m_axi_weight_V_AWVALID = 1'b0;

assign m_axi_weight_V_BREADY = 1'b0;

assign m_axi_weight_V_WDATA = 8'd0;

assign m_axi_weight_V_WID = 1'd0;

assign m_axi_weight_V_WLAST = 1'b0;

assign m_axi_weight_V_WSTRB = 1'd0;

assign m_axi_weight_V_WUSER = 1'd0;

assign m_axi_weight_V_WVALID = 1'b0;

assign newsignbit_9_fu_535_p3 = result_V_fu_530_p2[32'd7];

assign newsignbit_fu_353_p3 = p_Val2_59_fu_347_p2[32'd7];

assign overflow_fu_446_p2 = (brmerge_i_i7_fu_436_p2 & tmp_230_fu_441_p2);

assign p_38_i_i_fu_425_p2 = (carry_reg_688 & Range1_all_ones_fu_390_p2);

assign p_41_i_i_fu_413_p2 = (signbit_reg_669 & tmp_229_fu_407_p2);

assign p_Val2_54_fu_516_p2 = ($signed(tmp_222_fu_513_p1) + $signed(tmp_s_fu_509_p1));

assign p_Val2_56_fu_287_p0 = avgpool_output_V_loa_reg_649;

assign p_Val2_56_fu_287_p1 = weight_V_addr_read_reg_644;

assign p_Val2_56_fu_287_p2 = ($signed(p_Val2_56_fu_287_p0) * $signed(p_Val2_56_fu_287_p1));

assign p_Val2_57_fu_313_p2 = ($signed(p_Val2_56_reg_654) + $signed(tmp_243_cast_fu_309_p1));

assign p_Val2_58_fu_326_p4 = {{p_Val2_57_fu_313_p2[13:6]}};

assign p_Val2_59_fu_347_p2 = (tmp_226_fu_336_p1 + p_Val2_58_fu_326_p4);

assign p_Val2_79_mux_fu_489_p3 = ((brmerge_i_i_i_reg_721[0:0] === 1'b1) ? 8'd127 : p_Val2_59_reg_676);

assign p_Val2_s_171_fu_495_p3 = ((underflow_reg_716[0:0] === 1'b1) ? 8'd128 : p_Val2_59_reg_676);

assign p_not_i_i_fu_430_p2 = (deleted_zeros_fu_400_p3 ^ 1'd1);

assign p_result_V_fu_581_p3 = ((underflow_9_fu_549_p2[0:0] === 1'b1) ? 8'd128 : result_V_fu_530_p2);

assign result_1_fu_589_p3 = ((brmerge1_fu_567_p2[0:0] === 1'b1) ? result_V_mux_fu_573_p3 : p_result_V_fu_581_p3);

assign result_V_fu_530_p2 = (p_Val2_53_reg_731 + p_Val2_s_reg_183);

assign result_V_mux_fu_573_p3 = ((brmerge_i_i_fu_555_p2[0:0] === 1'b1) ? 8'd127 : result_V_fu_530_p2);

assign sext2_fu_206_p1 = $signed(fc_output_V15);

assign sext_cast_fu_217_p1 = $signed(fc_weight_V11);

assign sum_V_fu_501_p3 = ((underflow_not_fu_484_p2[0:0] === 1'b1) ? p_Val2_79_mux_fu_489_p3 : p_Val2_s_171_fu_495_p3);

assign tmp2_demorgan_fu_457_p2 = (p_38_i_i_fu_425_p2 | brmerge40_demorgan_i_fu_452_p2);

assign tmp2_fu_463_p2 = (tmp2_demorgan_fu_457_p2 ^ 1'd1);

assign tmp3_fu_480_p2 = (brmerge40_demorgan_i_reg_711 | tmp_230_reg_706);

assign tmp_222_fu_513_p1 = $signed(p_Val2_53_reg_731);

assign tmp_223_fu_543_p2 = (newsignbit_9_fu_535_p3 ^ 1'd1);

assign tmp_224_fu_276_p1 = ci_reg_195;

assign tmp_225_fu_301_p3 = {{p_Val2_s_reg_183}, {6'd0}};

assign tmp_226_fu_336_p1 = tmp_566_reg_659;

assign tmp_227_fu_361_p2 = (newsignbit_fu_353_p3 ^ 1'd1);

assign tmp_229_fu_407_p2 = (tmp_569_fu_383_p3 ^ 1'd1);

assign tmp_230_fu_441_p2 = (signbit_reg_669 ^ 1'd1);

assign tmp_243_cast_fu_309_p1 = $signed(tmp_225_fu_301_p3);

assign tmp_484_fu_233_p3 = {{co_reg_171}, {9'd0}};

assign tmp_560_fu_241_p1 = tmp_484_fu_233_p3;

assign tmp_561_fu_245_p2 = ($signed(tmp_560_fu_241_p1) + $signed(sext_cast_reg_602));

assign tmp_562_fu_250_p1 = $signed(tmp_561_fu_245_p2);

assign tmp_567_fu_339_p3 = p_Val2_57_fu_313_p2[32'd13];

assign tmp_569_fu_383_p3 = p_Val2_57_reg_664[32'd14];

assign tmp_fu_260_p1 = co_reg_171;

assign tmp_s_fu_509_p1 = $signed(p_Val2_s_reg_183);

assign underflow_9_fu_549_p2 = (isneg_fu_522_p3 & tmp_223_fu_543_p2);

assign underflow_fu_469_p2 = (signbit_reg_669 & tmp2_fu_463_p2);

assign underflow_not_fu_484_p2 = (tmp3_fu_480_p2 | p_38_i_i_reg_701);

always @ (posedge ap_clk) begin
    tmp_reg_621[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //fc
