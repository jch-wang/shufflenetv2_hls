// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shuffle_96_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        left_V_address0,
        left_V_ce0,
        left_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        buffer1_1_96_4x4_p_V_8_address0,
        buffer1_1_96_4x4_p_V_8_ce0,
        buffer1_1_96_4x4_p_V_8_q0,
        buffer1_1_96_4x4_p_V_1_address0,
        buffer1_1_96_4x4_p_V_1_ce0,
        buffer1_1_96_4x4_p_V_1_q0,
        buffer1_1_96_4x4_p_V_2_address0,
        buffer1_1_96_4x4_p_V_2_ce0,
        buffer1_1_96_4x4_p_V_2_q0,
        buffer1_1_96_4x4_p_V_3_address0,
        buffer1_1_96_4x4_p_V_3_ce0,
        buffer1_1_96_4x4_p_V_3_q0,
        buffer1_1_96_4x4_p_V_4_address0,
        buffer1_1_96_4x4_p_V_4_ce0,
        buffer1_1_96_4x4_p_V_4_q0,
        buffer1_1_96_4x4_p_V_5_address0,
        buffer1_1_96_4x4_p_V_5_ce0,
        buffer1_1_96_4x4_p_V_5_q0,
        buffer1_1_96_4x4_p_V_6_address0,
        buffer1_1_96_4x4_p_V_6_ce0,
        buffer1_1_96_4x4_p_V_6_q0,
        buffer1_1_96_4x4_p_V_7_address0,
        buffer1_1_96_4x4_p_V_7_ce0,
        buffer1_1_96_4x4_p_V_7_q0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] left_V_address0;
output   left_V_ce0;
input  [7:0] left_V_q0;
output  [12:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;
output  [8:0] buffer1_1_96_4x4_p_V_8_address0;
output   buffer1_1_96_4x4_p_V_8_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_8_q0;
output  [8:0] buffer1_1_96_4x4_p_V_1_address0;
output   buffer1_1_96_4x4_p_V_1_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_1_q0;
output  [8:0] buffer1_1_96_4x4_p_V_2_address0;
output   buffer1_1_96_4x4_p_V_2_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_2_q0;
output  [8:0] buffer1_1_96_4x4_p_V_3_address0;
output   buffer1_1_96_4x4_p_V_3_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_3_q0;
output  [8:0] buffer1_1_96_4x4_p_V_4_address0;
output   buffer1_1_96_4x4_p_V_4_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_4_q0;
output  [8:0] buffer1_1_96_4x4_p_V_5_address0;
output   buffer1_1_96_4x4_p_V_5_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_5_q0;
output  [8:0] buffer1_1_96_4x4_p_V_6_address0;
output   buffer1_1_96_4x4_p_V_6_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_6_q0;
output  [8:0] buffer1_1_96_4x4_p_V_7_address0;
output   buffer1_1_96_4x4_p_V_7_ce0;
input  [7:0] buffer1_1_96_4x4_p_V_7_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg left_V_ce0;
reg output_V_ce0;
reg output_V_we0;
reg buffer1_1_96_4x4_p_V_8_ce0;
reg buffer1_1_96_4x4_p_V_1_ce0;
reg buffer1_1_96_4x4_p_V_2_ce0;
reg buffer1_1_96_4x4_p_V_3_ce0;
reg buffer1_1_96_4x4_p_V_4_ce0;
reg buffer1_1_96_4x4_p_V_5_ce0;
reg buffer1_1_96_4x4_p_V_6_ce0;
reg buffer1_1_96_4x4_p_V_7_ce0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_510_fu_242_p1;
reg   [0:0] tmp_510_reg_589;
wire    ap_CS_fsm_state2;
wire   [7:0] co_24_fu_252_p2;
reg   [7:0] co_24_reg_596;
wire  signed [12:0] tmp_437_cast_fu_288_p1;
reg  signed [12:0] tmp_437_cast_reg_601;
wire   [0:0] exitcond5_fu_246_p2;
wire  signed [11:0] tmp_442_cast_fu_332_p1;
reg  signed [11:0] tmp_442_cast_reg_606;
reg   [2:0] arrayNo_reg_611;
wire  signed [8:0] tmp_447_cast_fu_386_p1;
reg  signed [8:0] tmp_447_cast_reg_616;
wire   [2:0] h_21_fu_396_p2;
reg   [2:0] h_21_reg_624;
wire    ap_CS_fsm_state3;
wire   [12:0] tmp_378_fu_439_p2;
reg   [12:0] tmp_378_reg_629;
wire   [0:0] exitcond4_fu_390_p2;
wire   [13:0] tmp_380_fu_470_p2;
reg   [13:0] tmp_380_reg_634;
wire   [9:0] tmp_382_fu_501_p2;
reg   [9:0] tmp_382_reg_639;
wire   [2:0] w_26_fu_513_p2;
reg   [2:0] w_26_reg_647;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_507_p2;
reg   [12:0] output_V_addr_reg_657;
wire    ap_CS_fsm_state5;
wire   [7:0] tmp_fu_568_p10;
wire    ap_CS_fsm_state6;
reg   [7:0] co_reg_199;
reg   [2:0] h_reg_210;
reg   [2:0] w_reg_221;
wire    ap_CS_fsm_state7;
reg   [7:0] storemerge_reg_232;
wire   [63:0] tmp_460_cast_fu_536_p1;
wire   [63:0] tmp_461_cast_fu_546_p1;
wire   [63:0] tmp_462_cast_fu_556_p1;
wire   [10:0] tmp_s_fu_258_p3;
wire   [8:0] tmp_367_fu_270_p3;
wire   [11:0] p_shl4_cast_fu_266_p1;
wire   [11:0] p_shl5_cast_fu_278_p1;
wire   [11:0] tmp_368_fu_282_p2;
wire   [6:0] tmp_369_fu_292_p4;
wire   [9:0] tmp_370_fu_302_p3;
wire   [7:0] tmp_371_fu_314_p3;
wire   [10:0] p_shl2_cast_fu_310_p1;
wire   [10:0] p_shl3_cast_fu_322_p1;
wire   [10:0] tmp_372_fu_326_p2;
wire   [3:0] tmp_373_fu_346_p4;
wire   [6:0] tmp_374_fu_356_p3;
wire   [4:0] tmp_375_fu_368_p3;
wire   [7:0] p_shl_cast_fu_364_p1;
wire   [7:0] p_shl1_cast_fu_376_p1;
wire   [7:0] tmp_376_fu_380_p2;
wire   [11:0] tmp_211_cast_fu_410_p1;
wire   [11:0] tmp_377_fu_414_p2;
wire   [9:0] tmp_511_fu_419_p1;
wire   [12:0] p_shl10_cast_fu_423_p3;
wire   [12:0] p_shl11_cast_fu_431_p3;
wire   [12:0] tmp_211_cast2_fu_406_p1;
wire   [12:0] tmp_379_fu_445_p2;
wire   [10:0] tmp_512_fu_450_p1;
wire   [13:0] p_shl8_cast_fu_454_p3;
wire   [13:0] p_shl9_cast_fu_462_p3;
wire   [8:0] tmp_211_cast1_fu_402_p1;
wire   [8:0] tmp_381_fu_476_p2;
wire   [6:0] tmp_513_fu_481_p1;
wire   [9:0] p_shl6_cast_fu_485_p3;
wire   [9:0] p_shl7_cast_fu_493_p3;
wire   [12:0] tmp_212_cast_fu_527_p1;
wire   [12:0] tmp_383_fu_531_p2;
wire   [13:0] tmp_212_cast2_fu_523_p1;
wire   [13:0] tmp_384_fu_541_p2;
wire   [9:0] tmp_212_cast1_fu_519_p1;
wire   [9:0] tmp_385_fu_551_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

ShuffleNetV2_mux_jbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
ShuffleNetV2_mux_jbC_x_U300(
    .din1(buffer1_1_96_4x4_p_V_8_q0),
    .din2(buffer1_1_96_4x4_p_V_1_q0),
    .din3(buffer1_1_96_4x4_p_V_2_q0),
    .din4(buffer1_1_96_4x4_p_V_3_q0),
    .din5(buffer1_1_96_4x4_p_V_4_q0),
    .din6(buffer1_1_96_4x4_p_V_5_q0),
    .din7(buffer1_1_96_4x4_p_V_6_q0),
    .din8(buffer1_1_96_4x4_p_V_7_q0),
    .din9(arrayNo_reg_611),
    .dout(tmp_fu_568_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_390_p2 == 1'd1))) begin
        co_reg_199 <= co_24_reg_596;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        co_reg_199 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_507_p2 == 1'd1))) begin
        h_reg_210 <= h_21_reg_624;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_246_p2 == 1'd0))) begin
        h_reg_210 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        storemerge_reg_232 <= tmp_fu_568_p10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        storemerge_reg_232 <= left_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond4_fu_390_p2))) begin
        w_reg_221 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        w_reg_221 <= w_26_reg_647;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_246_p2 == 1'd0))) begin
        arrayNo_reg_611 <= {{co_reg_199[3:1]}};
        tmp_437_cast_reg_601[12 : 1] <= tmp_437_cast_fu_288_p1[12 : 1];
        tmp_442_cast_reg_606[11 : 1] <= tmp_442_cast_fu_332_p1[11 : 1];
        tmp_447_cast_reg_616[8 : 1] <= tmp_447_cast_fu_386_p1[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        co_24_reg_596 <= co_24_fu_252_p2;
        tmp_510_reg_589 <= tmp_510_fu_242_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        h_21_reg_624 <= h_21_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_507_p2))) begin
        output_V_addr_reg_657 <= tmp_461_cast_fu_546_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond4_fu_390_p2))) begin
        tmp_378_reg_629[12 : 1] <= tmp_378_fu_439_p2[12 : 1];
        tmp_380_reg_634[13 : 1] <= tmp_380_fu_470_p2[13 : 1];
        tmp_382_reg_639[9 : 1] <= tmp_382_fu_501_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_26_reg_647 <= w_26_fu_513_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_246_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_246_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_96_4x4_p_V_1_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_96_4x4_p_V_2_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_96_4x4_p_V_3_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_96_4x4_p_V_4_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_96_4x4_p_V_5_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_96_4x4_p_V_6_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_96_4x4_p_V_7_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer1_1_96_4x4_p_V_8_ce0 = 1'b1;
    end else begin
        buffer1_1_96_4x4_p_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        left_V_ce0 = 1'b1;
    end else begin
        left_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_246_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_390_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_507_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond_fu_507_p2) & (tmp_510_reg_589 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign buffer1_1_96_4x4_p_V_1_address0 = tmp_462_cast_fu_556_p1;

assign buffer1_1_96_4x4_p_V_2_address0 = tmp_462_cast_fu_556_p1;

assign buffer1_1_96_4x4_p_V_3_address0 = tmp_462_cast_fu_556_p1;

assign buffer1_1_96_4x4_p_V_4_address0 = tmp_462_cast_fu_556_p1;

assign buffer1_1_96_4x4_p_V_5_address0 = tmp_462_cast_fu_556_p1;

assign buffer1_1_96_4x4_p_V_6_address0 = tmp_462_cast_fu_556_p1;

assign buffer1_1_96_4x4_p_V_7_address0 = tmp_462_cast_fu_556_p1;

assign buffer1_1_96_4x4_p_V_8_address0 = tmp_462_cast_fu_556_p1;

assign co_24_fu_252_p2 = (8'd1 + co_reg_199);

assign exitcond4_fu_390_p2 = ((h_reg_210 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond5_fu_246_p2 = ((co_reg_199 == 8'd192) ? 1'b1 : 1'b0);

assign exitcond_fu_507_p2 = ((w_reg_221 == 3'd6) ? 1'b1 : 1'b0);

assign h_21_fu_396_p2 = (h_reg_210 + 3'd1);

assign left_V_address0 = tmp_460_cast_fu_536_p1;

assign output_V_address0 = output_V_addr_reg_657;

assign output_V_d0 = storemerge_reg_232;

assign p_shl10_cast_fu_423_p3 = {{tmp_511_fu_419_p1}, {3'd0}};

assign p_shl11_cast_fu_431_p3 = {{tmp_377_fu_414_p2}, {1'd0}};

assign p_shl1_cast_fu_376_p1 = tmp_375_fu_368_p3;

assign p_shl2_cast_fu_310_p1 = tmp_370_fu_302_p3;

assign p_shl3_cast_fu_322_p1 = tmp_371_fu_314_p3;

assign p_shl4_cast_fu_266_p1 = tmp_s_fu_258_p3;

assign p_shl5_cast_fu_278_p1 = tmp_367_fu_270_p3;

assign p_shl6_cast_fu_485_p3 = {{tmp_513_fu_481_p1}, {3'd0}};

assign p_shl7_cast_fu_493_p3 = {{tmp_381_fu_476_p2}, {1'd0}};

assign p_shl8_cast_fu_454_p3 = {{tmp_512_fu_450_p1}, {3'd0}};

assign p_shl9_cast_fu_462_p3 = {{tmp_379_fu_445_p2}, {1'd0}};

assign p_shl_cast_fu_364_p1 = tmp_374_fu_356_p3;

assign tmp_211_cast1_fu_402_p1 = h_reg_210;

assign tmp_211_cast2_fu_406_p1 = h_reg_210;

assign tmp_211_cast_fu_410_p1 = h_reg_210;

assign tmp_212_cast1_fu_519_p1 = w_reg_221;

assign tmp_212_cast2_fu_523_p1 = w_reg_221;

assign tmp_212_cast_fu_527_p1 = w_reg_221;

assign tmp_367_fu_270_p3 = {{co_reg_199}, {1'd0}};

assign tmp_368_fu_282_p2 = (p_shl4_cast_fu_266_p1 - p_shl5_cast_fu_278_p1);

assign tmp_369_fu_292_p4 = {{co_reg_199[7:1]}};

assign tmp_370_fu_302_p3 = {{tmp_369_fu_292_p4}, {3'd0}};

assign tmp_371_fu_314_p3 = {{tmp_369_fu_292_p4}, {1'd0}};

assign tmp_372_fu_326_p2 = (p_shl2_cast_fu_310_p1 - p_shl3_cast_fu_322_p1);

assign tmp_373_fu_346_p4 = {{co_reg_199[7:4]}};

assign tmp_374_fu_356_p3 = {{tmp_373_fu_346_p4}, {3'd0}};

assign tmp_375_fu_368_p3 = {{tmp_373_fu_346_p4}, {1'd0}};

assign tmp_376_fu_380_p2 = (p_shl_cast_fu_364_p1 - p_shl1_cast_fu_376_p1);

assign tmp_377_fu_414_p2 = ($signed(tmp_211_cast_fu_410_p1) + $signed(tmp_442_cast_reg_606));

assign tmp_378_fu_439_p2 = (p_shl10_cast_fu_423_p3 - p_shl11_cast_fu_431_p3);

assign tmp_379_fu_445_p2 = ($signed(tmp_211_cast2_fu_406_p1) + $signed(tmp_437_cast_reg_601));

assign tmp_380_fu_470_p2 = (p_shl8_cast_fu_454_p3 - p_shl9_cast_fu_462_p3);

assign tmp_381_fu_476_p2 = ($signed(tmp_211_cast1_fu_402_p1) + $signed(tmp_447_cast_reg_616));

assign tmp_382_fu_501_p2 = (p_shl6_cast_fu_485_p3 - p_shl7_cast_fu_493_p3);

assign tmp_383_fu_531_p2 = (tmp_378_reg_629 + tmp_212_cast_fu_527_p1);

assign tmp_384_fu_541_p2 = (tmp_380_reg_634 + tmp_212_cast2_fu_523_p1);

assign tmp_385_fu_551_p2 = (tmp_382_reg_639 + tmp_212_cast1_fu_519_p1);

assign tmp_437_cast_fu_288_p1 = $signed(tmp_368_fu_282_p2);

assign tmp_442_cast_fu_332_p1 = $signed(tmp_372_fu_326_p2);

assign tmp_447_cast_fu_386_p1 = $signed(tmp_376_fu_380_p2);

assign tmp_460_cast_fu_536_p1 = tmp_383_fu_531_p2;

assign tmp_461_cast_fu_546_p1 = tmp_384_fu_541_p2;

assign tmp_462_cast_fu_556_p1 = tmp_385_fu_551_p2;

assign tmp_510_fu_242_p1 = co_reg_199[0:0];

assign tmp_511_fu_419_p1 = tmp_377_fu_414_p2[9:0];

assign tmp_512_fu_450_p1 = tmp_379_fu_445_p2[10:0];

assign tmp_513_fu_481_p1 = tmp_381_fu_476_p2[6:0];

assign tmp_s_fu_258_p3 = {{co_reg_199}, {3'd0}};

assign w_26_fu_513_p2 = (w_reg_221 + 3'd1);

always @ (posedge ap_clk) begin
    tmp_437_cast_reg_601[0] <= 1'b0;
    tmp_442_cast_reg_606[0] <= 1'b0;
    tmp_447_cast_reg_616[0] <= 1'b0;
    tmp_378_reg_629[0] <= 1'b0;
    tmp_380_reg_634[0] <= 1'b0;
    tmp_382_reg_639[0] <= 1'b0;
end

endmodule //shuffle_96_p
